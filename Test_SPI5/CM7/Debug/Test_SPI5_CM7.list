
Test_SPI5_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a78  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08003d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  20000010  08003d38  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000b8  08003d38  000200b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001333c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000202d  00000000  00000000  0003337a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009f8  00000000  00000000  000353a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  00035da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d526  00000000  00000000  000366d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009c5f  00000000  00000000  00073bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018ec7b  00000000  00000000  0007d855  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0020c4d0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027f8  00000000  00000000  0020c54c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003cf8 	.word	0x08003cf8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08003cf8 	.word	0x08003cf8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_1 */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 fa52 	bl	80008b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f808 	bl	8000428 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f000 f8f6 	bl	8000608 <MX_GPIO_Init>
  MX_SPI5_Init();
 800041c:	f000 f89e 	bl	800055c <MX_SPI5_Init>
 8000420:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000422:	4618      	mov	r0, r3
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b0cc      	sub	sp, #304	; 0x130
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000432:	224c      	movs	r2, #76	; 0x4c
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f003 fc56 	bl	8003ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f003 fc4f 	bl	8003ce8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4618      	mov	r0, r3
 800044e:	23c0      	movs	r3, #192	; 0xc0
 8000450:	461a      	mov	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f003 fc48 	bl	8003ce8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000458:	2002      	movs	r0, #2
 800045a:	f000 ffcf 	bl	80013fc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800045e:	463b      	mov	r3, r7
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	4b3b      	ldr	r3, [pc, #236]	; (8000554 <SystemClock_Config+0x12c>)
 8000466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000468:	4a3a      	ldr	r2, [pc, #232]	; (8000554 <SystemClock_Config+0x12c>)
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000470:	4b38      	ldr	r3, [pc, #224]	; (8000554 <SystemClock_Config+0x12c>)
 8000472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000474:	f003 0201 	and.w	r2, r3, #1
 8000478:	463b      	mov	r3, r7
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	4b36      	ldr	r3, [pc, #216]	; (8000558 <SystemClock_Config+0x130>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000484:	4a34      	ldr	r2, [pc, #208]	; (8000558 <SystemClock_Config+0x130>)
 8000486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b32      	ldr	r3, [pc, #200]	; (8000558 <SystemClock_Config+0x130>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000494:	463b      	mov	r3, r7
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	463b      	mov	r3, r7
 800049a:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800049c:	bf00      	nop
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <SystemClock_Config+0x130>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004aa:	d1f8      	bne.n	800049e <SystemClock_Config+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ac:	2302      	movs	r3, #2
 80004ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b8:	2340      	movs	r3, #64	; 0x40
 80004ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004be:	2300      	movs	r3, #0
 80004c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fff1 	bl	80014b0 <HAL_RCC_OscConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004d4:	f000 f8f8 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d8:	233f      	movs	r3, #63	; 0x3f
 80004da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004de:	2300      	movs	r3, #0
 80004e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000508:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fbde 	bl	8001cd0 <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800051a:	f000 f8d5 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000524:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4618      	mov	r0, r3
 8000530:	f001 ff60 	bl	80023f4 <HAL_RCCEx_PeriphCLKConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800053a:	f000 f8c5 	bl	80006c8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800053e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000542:	2100      	movs	r1, #0
 8000544:	2000      	movs	r0, #0
 8000546:	f001 fd79 	bl	800203c <HAL_RCC_MCOConfig>
}
 800054a:	bf00      	nop
 800054c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	58000400 	.word	0x58000400
 8000558:	58024800 	.word	0x58024800

0800055c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */
  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <MX_SPI5_Init+0xa4>)
 8000562:	4a28      	ldr	r2, [pc, #160]	; (8000604 <MX_SPI5_Init+0xa8>)
 8000564:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_SPI5_Init+0xa4>)
 8000568:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800056c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <MX_SPI5_Init+0xa4>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <MX_SPI5_Init+0xa4>)
 8000576:	2203      	movs	r2, #3
 8000578:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <MX_SPI5_Init+0xa4>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <MX_SPI5_Init+0xa4>)
 8000582:	2200      	movs	r2, #0
 8000584:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_SPI5_Init+0xa4>)
 8000588:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800058c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <MX_SPI5_Init+0xa4>)
 8000590:	2200      	movs	r2, #0
 8000592:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_SPI5_Init+0xa4>)
 8000596:	2200      	movs	r2, #0
 8000598:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <MX_SPI5_Init+0xa4>)
 800059c:	2200      	movs	r2, #0
 800059e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_SPI5_Init+0xa4>)
 80005ec:	f002 ff80 	bl	80034f0 <HAL_SPI_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 80005f6:	f000 f867 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */
  /* USER CODE END SPI5_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000002c 	.word	0x2000002c
 8000604:	40015000 	.word	0x40015000

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_GPIO_Init+0xb8>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_GPIO_Init+0xb8>)
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_GPIO_Init+0xb8>)
 800065c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000660:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_GPIO_Init+0xb8>)
 800066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_GPIO_Init+0xb8>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_GPIO_Init+0xb8>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_GPIO_Init+0xbc>)
 80006b4:	f000 fcf2 	bl	800109c <HAL_GPIO_Init>

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	58024400 	.word	0x58024400
 80006c4:	58020000 	.word	0x58020000

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_MspInit+0x30>)
 80006e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006e4:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x30>)
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x30>)
 80006f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006f4:	f003 0302 	and.w	r3, r3, #2
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	58024400 	.word	0x58024400

0800070c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a2e      	ldr	r2, [pc, #184]	; (80007e4 <HAL_SPI_MspInit+0xd8>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d155      	bne.n	80007da <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <HAL_SPI_MspInit+0xdc>)
 8000730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000734:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <HAL_SPI_MspInit+0xdc>)
 8000736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800073a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <HAL_SPI_MspInit+0xdc>)
 8000740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <HAL_SPI_MspInit+0xdc>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <HAL_SPI_MspInit+0xdc>)
 8000754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <HAL_SPI_MspInit+0xdc>)
 800075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <HAL_SPI_MspInit+0xdc>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <HAL_SPI_MspInit+0xdc>)
 8000772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <HAL_SPI_MspInit+0xdc>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000788:	2301      	movs	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000798:	2305      	movs	r3, #5
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <HAL_SPI_MspInit+0xe0>)
 80007a4:	f000 fc7a 	bl	800109c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80007a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80007ba:	2305      	movs	r3, #5
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	480a      	ldr	r0, [pc, #40]	; (80007f0 <HAL_SPI_MspInit+0xe4>)
 80007c6:	f000 fc69 	bl	800109c <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2055      	movs	r0, #85	; 0x55
 80007d0:	f000 f9eb 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80007d4:	2055      	movs	r0, #85	; 0x55
 80007d6:	f000 fa02 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40015000 	.word	0x40015000
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58022800 	.word	0x58022800
 80007f0:	58022400 	.word	0x58022400

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <MemManage_Handler+0x4>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler+0x4>

0800081a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 f8a8 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <SPI5_IRQHandler+0x10>)
 8000856:	f002 ff43 	bl	80036e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000002c 	.word	0x2000002c

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800089c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000868:	f7ff fd36 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800086c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800086e:	e003      	b.n	8000878 <LoopCopyDataInit>

08000870 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000872:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000874:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000876:	3104      	adds	r1, #4

08000878 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800087c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800087e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000880:	d3f6      	bcc.n	8000870 <CopyDataInit>
  ldr  r2, =_sbss
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000884:	e002      	b.n	800088c <LoopFillZerobss>

08000886 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000886:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000888:	f842 3b04 	str.w	r3, [r2], #4

0800088c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800088e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000890:	d3f9      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000892:	f003 fa05 	bl	8003ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fdb9 	bl	800040c <main>
  bx  lr    
 800089a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800089c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008a0:	08003d28 	.word	0x08003d28
  ldr  r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008a8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80008ac:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80008b0:	200000b8 	.word	0x200000b8

080008b4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC3_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008be:	2003      	movs	r0, #3
 80008c0:	f000 f968 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008c4:	f001 fc24 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80008c8:	4601      	mov	r1, r0
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_Init+0x68>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	f003 030f 	and.w	r3, r3, #15
 80008d4:	4a13      	ldr	r2, [pc, #76]	; (8000924 <HAL_Init+0x6c>)
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	f003 031f 	and.w	r3, r3, #31
 80008dc:	fa21 f303 	lsr.w	r3, r1, r3
 80008e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_Init+0x68>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <HAL_Init+0x6c>)
 80008ec:	5cd3      	ldrb	r3, [r2, r3]
 80008ee:	f003 031f 	and.w	r3, r3, #31
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	fa22 f303 	lsr.w	r3, r2, r3
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <HAL_Init+0x70>)
 80008fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <HAL_Init+0x74>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f814 	bl	8000930 <HAL_InitTick>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e002      	b.n	8000918 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000912:	f7ff fee1 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	58024400 	.word	0x58024400
 8000924:	08003d10 	.word	0x08003d10
 8000928:	20000004 	.word	0x20000004
 800092c:	20000000 	.word	0x20000000

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_InitTick+0x60>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	e021      	b.n	8000988 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <HAL_InitTick+0x64>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_InitTick+0x60>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f94d 	bl	8000bfa <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f917 	bl	8000baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_InitTick+0x68>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000000c 	.word	0x2000000c
 80009c0:	200000b4 	.word	0x200000b4

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	200000b4 	.word	0x200000b4

080009dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetREVID+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	0c1b      	lsrs	r3, r3, #16
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	5c001000 	.word	0x5c001000

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <__NVIC_SetPriorityGrouping+0x40>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x40>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00
 8000a38:	05fa0000 	.word	0x05fa0000

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <__NVIC_EnableIRQ+0x38>)
 8000a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b60:	d301      	bcc.n	8000b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00f      	b.n	8000b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <SysTick_Config+0x40>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6e:	210f      	movs	r1, #15
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f7ff ff8e 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SysTick_Config+0x40>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SysTick_Config+0x40>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff29 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff40 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff90 	bl	8000ae8 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5f 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff33 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa4 	bl	8000b50 <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e205      	b.n	8001032 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d004      	beq.n	8000c3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e1fa      	b.n	8001032 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a8c      	ldr	r2, [pc, #560]	; (8000e74 <HAL_DMA_Abort_IT+0x260>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d04a      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a8b      	ldr	r2, [pc, #556]	; (8000e78 <HAL_DMA_Abort_IT+0x264>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d045      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a89      	ldr	r2, [pc, #548]	; (8000e7c <HAL_DMA_Abort_IT+0x268>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d040      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a88      	ldr	r2, [pc, #544]	; (8000e80 <HAL_DMA_Abort_IT+0x26c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d03b      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a86      	ldr	r2, [pc, #536]	; (8000e84 <HAL_DMA_Abort_IT+0x270>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d036      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a85      	ldr	r2, [pc, #532]	; (8000e88 <HAL_DMA_Abort_IT+0x274>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d031      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a83      	ldr	r2, [pc, #524]	; (8000e8c <HAL_DMA_Abort_IT+0x278>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d02c      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a82      	ldr	r2, [pc, #520]	; (8000e90 <HAL_DMA_Abort_IT+0x27c>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d027      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a80      	ldr	r2, [pc, #512]	; (8000e94 <HAL_DMA_Abort_IT+0x280>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d022      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a7f      	ldr	r2, [pc, #508]	; (8000e98 <HAL_DMA_Abort_IT+0x284>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d01d      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a7d      	ldr	r2, [pc, #500]	; (8000e9c <HAL_DMA_Abort_IT+0x288>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d018      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a7c      	ldr	r2, [pc, #496]	; (8000ea0 <HAL_DMA_Abort_IT+0x28c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d013      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a7a      	ldr	r2, [pc, #488]	; (8000ea4 <HAL_DMA_Abort_IT+0x290>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d00e      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a79      	ldr	r2, [pc, #484]	; (8000ea8 <HAL_DMA_Abort_IT+0x294>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d009      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a77      	ldr	r2, [pc, #476]	; (8000eac <HAL_DMA_Abort_IT+0x298>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d004      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xc8>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a76      	ldr	r2, [pc, #472]	; (8000eb0 <HAL_DMA_Abort_IT+0x29c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d101      	bne.n	8000ce0 <HAL_DMA_Abort_IT+0xcc>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <HAL_DMA_Abort_IT+0xce>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d065      	beq.n	8000db2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2204      	movs	r2, #4
 8000cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a60      	ldr	r2, [pc, #384]	; (8000e74 <HAL_DMA_Abort_IT+0x260>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d04a      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a5e      	ldr	r2, [pc, #376]	; (8000e78 <HAL_DMA_Abort_IT+0x264>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d045      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a5d      	ldr	r2, [pc, #372]	; (8000e7c <HAL_DMA_Abort_IT+0x268>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d040      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a5b      	ldr	r2, [pc, #364]	; (8000e80 <HAL_DMA_Abort_IT+0x26c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d03b      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a5a      	ldr	r2, [pc, #360]	; (8000e84 <HAL_DMA_Abort_IT+0x270>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d036      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a58      	ldr	r2, [pc, #352]	; (8000e88 <HAL_DMA_Abort_IT+0x274>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d031      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a57      	ldr	r2, [pc, #348]	; (8000e8c <HAL_DMA_Abort_IT+0x278>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d02c      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a55      	ldr	r2, [pc, #340]	; (8000e90 <HAL_DMA_Abort_IT+0x27c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d027      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a54      	ldr	r2, [pc, #336]	; (8000e94 <HAL_DMA_Abort_IT+0x280>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d022      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a52      	ldr	r2, [pc, #328]	; (8000e98 <HAL_DMA_Abort_IT+0x284>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01d      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a51      	ldr	r2, [pc, #324]	; (8000e9c <HAL_DMA_Abort_IT+0x288>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d018      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a4f      	ldr	r2, [pc, #316]	; (8000ea0 <HAL_DMA_Abort_IT+0x28c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <HAL_DMA_Abort_IT+0x290>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d00e      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a4c      	ldr	r2, [pc, #304]	; (8000ea8 <HAL_DMA_Abort_IT+0x294>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d009      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a4b      	ldr	r2, [pc, #300]	; (8000eac <HAL_DMA_Abort_IT+0x298>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d004      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x17a>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <HAL_DMA_Abort_IT+0x29c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d108      	bne.n	8000da0 <HAL_DMA_Abort_IT+0x18c>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0201 	bic.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e147      	b.n	8001030 <HAL_DMA_Abort_IT+0x41c>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0201 	bic.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e13e      	b.n	8001030 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 020e 	bic.w	r2, r2, #14
 8000dc0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a2b      	ldr	r2, [pc, #172]	; (8000e74 <HAL_DMA_Abort_IT+0x260>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d04a      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <HAL_DMA_Abort_IT+0x264>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d045      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <HAL_DMA_Abort_IT+0x268>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d040      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <HAL_DMA_Abort_IT+0x26c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d03b      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_DMA_Abort_IT+0x270>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d036      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <HAL_DMA_Abort_IT+0x274>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d031      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <HAL_DMA_Abort_IT+0x278>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d02c      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <HAL_DMA_Abort_IT+0x27c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d027      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_DMA_Abort_IT+0x280>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d022      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <HAL_DMA_Abort_IT+0x284>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d01d      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <HAL_DMA_Abort_IT+0x288>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d018      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1a      	ldr	r2, [pc, #104]	; (8000ea0 <HAL_DMA_Abort_IT+0x28c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_DMA_Abort_IT+0x290>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d00e      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_DMA_Abort_IT+0x294>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d009      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <HAL_DMA_Abort_IT+0x298>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d004      	beq.n	8000e62 <HAL_DMA_Abort_IT+0x24e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <HAL_DMA_Abort_IT+0x29c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d128      	bne.n	8000eb4 <HAL_DMA_Abort_IT+0x2a0>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e027      	b.n	8000ec4 <HAL_DMA_Abort_IT+0x2b0>
 8000e74:	40020010 	.word	0x40020010
 8000e78:	40020028 	.word	0x40020028
 8000e7c:	40020040 	.word	0x40020040
 8000e80:	40020058 	.word	0x40020058
 8000e84:	40020070 	.word	0x40020070
 8000e88:	40020088 	.word	0x40020088
 8000e8c:	400200a0 	.word	0x400200a0
 8000e90:	400200b8 	.word	0x400200b8
 8000e94:	40020410 	.word	0x40020410
 8000e98:	40020428 	.word	0x40020428
 8000e9c:	40020440 	.word	0x40020440
 8000ea0:	40020458 	.word	0x40020458
 8000ea4:	40020470 	.word	0x40020470
 8000ea8:	40020488 	.word	0x40020488
 8000eac:	400204a0 	.word	0x400204a0
 8000eb0:	400204b8 	.word	0x400204b8
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a5c      	ldr	r2, [pc, #368]	; (800103c <HAL_DMA_Abort_IT+0x428>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d072      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a5b      	ldr	r2, [pc, #364]	; (8001040 <HAL_DMA_Abort_IT+0x42c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d06d      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a59      	ldr	r2, [pc, #356]	; (8001044 <HAL_DMA_Abort_IT+0x430>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d068      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a58      	ldr	r2, [pc, #352]	; (8001048 <HAL_DMA_Abort_IT+0x434>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d063      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a56      	ldr	r2, [pc, #344]	; (800104c <HAL_DMA_Abort_IT+0x438>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d05e      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a55      	ldr	r2, [pc, #340]	; (8001050 <HAL_DMA_Abort_IT+0x43c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d059      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a53      	ldr	r2, [pc, #332]	; (8001054 <HAL_DMA_Abort_IT+0x440>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d054      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a52      	ldr	r2, [pc, #328]	; (8001058 <HAL_DMA_Abort_IT+0x444>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d04f      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a50      	ldr	r2, [pc, #320]	; (800105c <HAL_DMA_Abort_IT+0x448>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d04a      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <HAL_DMA_Abort_IT+0x44c>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d045      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_DMA_Abort_IT+0x450>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d040      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HAL_DMA_Abort_IT+0x454>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d03b      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4a      	ldr	r2, [pc, #296]	; (800106c <HAL_DMA_Abort_IT+0x458>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d036      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a49      	ldr	r2, [pc, #292]	; (8001070 <HAL_DMA_Abort_IT+0x45c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d031      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a47      	ldr	r2, [pc, #284]	; (8001074 <HAL_DMA_Abort_IT+0x460>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d02c      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a46      	ldr	r2, [pc, #280]	; (8001078 <HAL_DMA_Abort_IT+0x464>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d027      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a44      	ldr	r2, [pc, #272]	; (800107c <HAL_DMA_Abort_IT+0x468>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d022      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a43      	ldr	r2, [pc, #268]	; (8001080 <HAL_DMA_Abort_IT+0x46c>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d01d      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a41      	ldr	r2, [pc, #260]	; (8001084 <HAL_DMA_Abort_IT+0x470>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d018      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a40      	ldr	r2, [pc, #256]	; (8001088 <HAL_DMA_Abort_IT+0x474>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d013      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a3e      	ldr	r2, [pc, #248]	; (800108c <HAL_DMA_Abort_IT+0x478>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00e      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a3d      	ldr	r2, [pc, #244]	; (8001090 <HAL_DMA_Abort_IT+0x47c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d009      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <HAL_DMA_Abort_IT+0x480>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d004      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x3a0>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a3a      	ldr	r2, [pc, #232]	; (8001098 <HAL_DMA_Abort_IT+0x484>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d101      	bne.n	8000fb8 <HAL_DMA_Abort_IT+0x3a4>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <HAL_DMA_Abort_IT+0x3a6>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d028      	beq.n	8001010 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd8:	f003 031f 	and.w	r3, r3, #31
 8000fdc:	2201      	movs	r2, #1
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000fec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00c      	beq.n	8001010 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001004:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800100e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40020010 	.word	0x40020010
 8001040:	40020028 	.word	0x40020028
 8001044:	40020040 	.word	0x40020040
 8001048:	40020058 	.word	0x40020058
 800104c:	40020070 	.word	0x40020070
 8001050:	40020088 	.word	0x40020088
 8001054:	400200a0 	.word	0x400200a0
 8001058:	400200b8 	.word	0x400200b8
 800105c:	40020410 	.word	0x40020410
 8001060:	40020428 	.word	0x40020428
 8001064:	40020440 	.word	0x40020440
 8001068:	40020458 	.word	0x40020458
 800106c:	40020470 	.word	0x40020470
 8001070:	40020488 	.word	0x40020488
 8001074:	400204a0 	.word	0x400204a0
 8001078:	400204b8 	.word	0x400204b8
 800107c:	58025408 	.word	0x58025408
 8001080:	5802541c 	.word	0x5802541c
 8001084:	58025430 	.word	0x58025430
 8001088:	58025444 	.word	0x58025444
 800108c:	58025458 	.word	0x58025458
 8001090:	5802546c 	.word	0x5802546c
 8001094:	58025480 	.word	0x58025480
 8001098:	58025494 	.word	0x58025494

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010aa:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <HAL_GPIO_Init+0x234>)
 80010ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ae:	e194      	b.n	80013da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8186 	beq.w	80013d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d00b      	beq.n	80010e8 <HAL_GPIO_Init+0x4c>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010dc:	2b11      	cmp	r3, #17
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b12      	cmp	r3, #18
 80010e6:	d130      	bne.n	800114a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800111e:	2201      	movs	r2, #1
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 0201 	and.w	r2, r3, #1
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0xee>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b12      	cmp	r3, #18
 8001188:	d123      	bne.n	80011d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	69b9      	ldr	r1, [r7, #24]
 80011ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0203 	and.w	r2, r3, #3
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80e0 	beq.w	80013d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <HAL_GPIO_Init+0x238>)
 8001216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800121a:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <HAL_GPIO_Init+0x238>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <HAL_GPIO_Init+0x238>)
 8001226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001232:	4a29      	ldr	r2, [pc, #164]	; (80012d8 <HAL_GPIO_Init+0x23c>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a20      	ldr	r2, [pc, #128]	; (80012dc <HAL_GPIO_Init+0x240>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d052      	beq.n	8001304 <HAL_GPIO_Init+0x268>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <HAL_GPIO_Init+0x244>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d031      	beq.n	80012ca <HAL_GPIO_Init+0x22e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_GPIO_Init+0x248>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d02b      	beq.n	80012c6 <HAL_GPIO_Init+0x22a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <HAL_GPIO_Init+0x24c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d025      	beq.n	80012c2 <HAL_GPIO_Init+0x226>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <HAL_GPIO_Init+0x250>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d01f      	beq.n	80012be <HAL_GPIO_Init+0x222>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_GPIO_Init+0x254>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x21e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_GPIO_Init+0x258>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x21a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_GPIO_Init+0x25c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x216>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a18      	ldr	r2, [pc, #96]	; (80012fc <HAL_GPIO_Init+0x260>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x212>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a17      	ldr	r2, [pc, #92]	; (8001300 <HAL_GPIO_Init+0x264>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x20e>
 80012a6:	2309      	movs	r3, #9
 80012a8:	e02d      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012aa:	230a      	movs	r3, #10
 80012ac:	e02b      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012ae:	2308      	movs	r3, #8
 80012b0:	e029      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012b2:	2307      	movs	r3, #7
 80012b4:	e027      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012b6:	2306      	movs	r3, #6
 80012b8:	e025      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e023      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012be:	2304      	movs	r3, #4
 80012c0:	e021      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e01f      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e01d      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e01b      	b.n	8001306 <HAL_GPIO_Init+0x26a>
 80012ce:	bf00      	nop
 80012d0:	58000080 	.word	0x58000080
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58000400 	.word	0x58000400
 80012dc:	58020000 	.word	0x58020000
 80012e0:	58020400 	.word	0x58020400
 80012e4:	58020800 	.word	0x58020800
 80012e8:	58020c00 	.word	0x58020c00
 80012ec:	58021000 	.word	0x58021000
 80012f0:	58021400 	.word	0x58021400
 80012f4:	58021800 	.word	0x58021800
 80012f8:	58021c00 	.word	0x58021c00
 80012fc:	58022000 	.word	0x58022000
 8001300:	58022400 	.word	0x58022400
 8001304:	2300      	movs	r3, #0
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	f002 0203 	and.w	r2, r2, #3
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	4093      	lsls	r3, r2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001316:	4938      	ldr	r1, [pc, #224]	; (80013f8 <HAL_GPIO_Init+0x35c>)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800139e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	3301      	adds	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f47f ae63 	bne.w	80010b0 <HAL_GPIO_Init+0x14>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	58000400 	.word	0x58000400

080013fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	2b06      	cmp	r3, #6
 800140e:	d00a      	beq.n	8001426 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d001      	beq.n	8001422 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e040      	b.n	80014a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e03e      	b.n	80014a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800142e:	491f      	ldr	r1, [pc, #124]	; (80014ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4313      	orrs	r3, r2
 8001434:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001436:	f7ff fac5 	bl	80009c4 <HAL_GetTick>
 800143a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800143c:	e009      	b.n	8001452 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800143e:	f7ff fac1 	bl	80009c4 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800144c:	d901      	bls.n	8001452 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e028      	b.n	80014a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800145a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145e:	d1ee      	bne.n	800143e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b1e      	cmp	r3, #30
 8001464:	d008      	beq.n	8001478 <HAL_PWREx_ConfigSupply+0x7c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b2e      	cmp	r3, #46	; 0x2e
 800146a:	d005      	beq.n	8001478 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b1d      	cmp	r3, #29
 8001470:	d002      	beq.n	8001478 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b2d      	cmp	r3, #45	; 0x2d
 8001476:	d114      	bne.n	80014a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001478:	f7ff faa4 	bl	80009c4 <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800147e:	e009      	b.n	8001494 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001480:	f7ff faa0 	bl	80009c4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800148e:	d901      	bls.n	8001494 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e007      	b.n	80014a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_PWREx_ConfigSupply+0xb0>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a0:	d1ee      	bne.n	8001480 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58024800 	.word	0x58024800

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e3ff      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8087 	beq.w	80015de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d0:	4b99      	ldr	r3, [pc, #612]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014da:	4b97      	ldr	r3, [pc, #604]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d007      	beq.n	80014f6 <HAL_RCC_OscConfig+0x46>
 80014e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e8:	2b18      	cmp	r3, #24
 80014ea:	d110      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
 80014ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d10b      	bne.n	800150e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	4b90      	ldr	r3, [pc, #576]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d06c      	beq.n	80015dc <HAL_RCC_OscConfig+0x12c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d168      	bne.n	80015dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e3d9      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x76>
 8001518:	4b87      	ldr	r3, [pc, #540]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a86      	ldr	r2, [pc, #536]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b82      	ldr	r3, [pc, #520]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a81      	ldr	r2, [pc, #516]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7e      	ldr	r2, [pc, #504]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xbc>
 8001552:	4b79      	ldr	r3, [pc, #484]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a78      	ldr	r2, [pc, #480]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b76      	ldr	r3, [pc, #472]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a75      	ldr	r2, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd4>
 800156c:	4b72      	ldr	r3, [pc, #456]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a71      	ldr	r2, [pc, #452]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6e      	ldr	r2, [pc, #440]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fa1a 	bl	80009c4 <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fa16 	bl	80009c4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e38d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015a6:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe4>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fa06 	bl	80009c4 <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fa02 	bl	80009c4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e379      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ce:	4b5a      	ldr	r3, [pc, #360]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x10c>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80ae 	beq.w	8001748 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ec:	4b52      	ldr	r3, [pc, #328]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015f6:	4b50      	ldr	r3, [pc, #320]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_RCC_OscConfig+0x162>
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	2b18      	cmp	r3, #24
 8001606:	d13a      	bne.n	800167e <HAL_RCC_OscConfig+0x1ce>
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d135      	bne.n	800167e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001612:	4b49      	ldr	r3, [pc, #292]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x17a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e34b      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	f7ff f9d7 	bl	80009dc <HAL_GetREVID>
 800162e:	4602      	mov	r2, r0
 8001630:	f241 0303 	movw	r3, #4099	; 0x1003
 8001634:	429a      	cmp	r2, r3
 8001636:	d817      	bhi.n	8001668 <HAL_RCC_OscConfig+0x1b8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b40      	cmp	r3, #64	; 0x40
 800163e:	d108      	bne.n	8001652 <HAL_RCC_OscConfig+0x1a2>
 8001640:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001648:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 800164a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001650:	e07a      	b.n	8001748 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	031b      	lsls	r3, r3, #12
 8001660:	4935      	ldr	r1, [pc, #212]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001666:	e06f      	b.n	8001748 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	4930      	ldr	r1, [pc, #192]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800167c:	e064      	b.n	8001748 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d045      	beq.n	8001712 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001686:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0219 	bic.w	r2, r3, #25
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4929      	ldr	r1, [pc, #164]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff f994 	bl	80009c4 <HAL_GetTick>
 800169c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff f990 	bl	80009c4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e307      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016be:	f7ff f98d 	bl	80009dc <HAL_GetREVID>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d817      	bhi.n	80016fc <HAL_RCC_OscConfig+0x24c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b40      	cmp	r3, #64	; 0x40
 80016d2:	d108      	bne.n	80016e6 <HAL_RCC_OscConfig+0x236>
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016dc:	4a16      	ldr	r2, [pc, #88]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80016de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e2:	6053      	str	r3, [r2, #4]
 80016e4:	e030      	b.n	8001748 <HAL_RCC_OscConfig+0x298>
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	031b      	lsls	r3, r3, #12
 80016f4:	4910      	ldr	r1, [pc, #64]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
 80016fa:	e025      	b.n	8001748 <HAL_RCC_OscConfig+0x298>
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	061b      	lsls	r3, r3, #24
 800170a:	490b      	ldr	r1, [pc, #44]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e01a      	b.n	8001748 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_RCC_OscConfig+0x288>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff f951 	bl	80009c4 <HAL_GetTick>
 8001722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff f94d 	bl	80009c4 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d903      	bls.n	800173c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e2c4      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
 8001738:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800173c:	4ba4      	ldr	r3, [pc, #656]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1ee      	bne.n	8001726 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80a9 	beq.w	80018a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4b9e      	ldr	r3, [pc, #632]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800175e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001760:	4b9b      	ldr	r3, [pc, #620]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d007      	beq.n	800177c <HAL_RCC_OscConfig+0x2cc>
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b18      	cmp	r3, #24
 8001770:	d13a      	bne.n	80017e8 <HAL_RCC_OscConfig+0x338>
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d135      	bne.n	80017e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800177c:	4b94      	ldr	r3, [pc, #592]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_OscConfig+0x2e4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b80      	cmp	r3, #128	; 0x80
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e296      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001794:	f7ff f922 	bl	80009dc <HAL_GetREVID>
 8001798:	4602      	mov	r2, r0
 800179a:	f241 0303 	movw	r3, #4099	; 0x1003
 800179e:	429a      	cmp	r2, r3
 80017a0:	d817      	bhi.n	80017d2 <HAL_RCC_OscConfig+0x322>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	2b20      	cmp	r3, #32
 80017a8:	d108      	bne.n	80017bc <HAL_RCC_OscConfig+0x30c>
 80017aa:	4b89      	ldr	r3, [pc, #548]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017b2:	4a87      	ldr	r2, [pc, #540]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80017b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017ba:	e075      	b.n	80018a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017bc:	4b84      	ldr	r3, [pc, #528]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	069b      	lsls	r3, r3, #26
 80017ca:	4981      	ldr	r1, [pc, #516]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017d0:	e06a      	b.n	80018a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	061b      	lsls	r3, r3, #24
 80017e0:	497b      	ldr	r1, [pc, #492]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017e6:	e05f      	b.n	80018a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d042      	beq.n	8001876 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017f0:	4b77      	ldr	r3, [pc, #476]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a76      	ldr	r2, [pc, #472]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80017f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff f8e2 	bl	80009c4 <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001804:	f7ff f8de 	bl	80009c4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e255      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001816:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001822:	f7ff f8db 	bl	80009dc <HAL_GetREVID>
 8001826:	4602      	mov	r2, r0
 8001828:	f241 0303 	movw	r3, #4099	; 0x1003
 800182c:	429a      	cmp	r2, r3
 800182e:	d817      	bhi.n	8001860 <HAL_RCC_OscConfig+0x3b0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	2b20      	cmp	r3, #32
 8001836:	d108      	bne.n	800184a <HAL_RCC_OscConfig+0x39a>
 8001838:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001840:	4a63      	ldr	r2, [pc, #396]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001846:	6053      	str	r3, [r2, #4]
 8001848:	e02e      	b.n	80018a8 <HAL_RCC_OscConfig+0x3f8>
 800184a:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	069b      	lsls	r3, r3, #26
 8001858:	495d      	ldr	r1, [pc, #372]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
 800185e:	e023      	b.n	80018a8 <HAL_RCC_OscConfig+0x3f8>
 8001860:	4b5b      	ldr	r3, [pc, #364]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	4958      	ldr	r1, [pc, #352]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001870:	4313      	orrs	r3, r2
 8001872:	60cb      	str	r3, [r1, #12]
 8001874:	e018      	b.n	80018a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001876:	4b56      	ldr	r3, [pc, #344]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a55      	ldr	r2, [pc, #340]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800187c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff f89f 	bl	80009c4 <HAL_GetTick>
 8001886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800188a:	f7ff f89b 	bl	80009c4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e212      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800189c:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d036      	beq.n	8001922 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d019      	beq.n	80018f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018bc:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80018be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c0:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff f87c 	bl	80009c4 <HAL_GetTick>
 80018cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff f878 	bl	80009c4 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1ef      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80018e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x420>
 80018ee:	e018      	b.n	8001922 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f0:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80018f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f4:	4a36      	ldr	r2, [pc, #216]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff f862 	bl	80009c4 <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff f85e 	bl	80009c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1d5      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b00      	cmp	r3, #0
 800192c:	d036      	beq.n	800199c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d019      	beq.n	800196a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800193c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001940:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001942:	f7ff f83f 	bl	80009c4 <HAL_GetTick>
 8001946:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800194a:	f7ff f83b 	bl	80009c4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1b2      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x49a>
 8001968:	e018      	b.n	800199c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a18      	ldr	r2, [pc, #96]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001976:	f7ff f825 	bl	80009c4 <HAL_GetTick>
 800197a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800197e:	f7ff f821 	bl	80009c4 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e198      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RCC_OscConfig+0x520>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8085 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_RCC_OscConfig+0x524>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <HAL_RCC_OscConfig+0x524>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019b6:	f7ff f805 	bl	80009c4 <HAL_GetTick>
 80019ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019bc:	e00c      	b.n	80019d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019be:	f7ff f801 	bl	80009c4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b64      	cmp	r3, #100	; 0x64
 80019ca:	d905      	bls.n	80019d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e178      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
 80019d0:	58024400 	.word	0x58024400
 80019d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019d8:	4b96      	ldr	r3, [pc, #600]	; (8001c34 <HAL_RCC_OscConfig+0x784>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ec      	beq.n	80019be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x54a>
 80019ec:	4b92      	ldr	r3, [pc, #584]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	4a91      	ldr	r2, [pc, #580]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6713      	str	r3, [r2, #112]	; 0x70
 80019f8:	e02d      	b.n	8001a56 <HAL_RCC_OscConfig+0x5a6>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x56c>
 8001a02:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a8c      	ldr	r2, [pc, #560]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0e:	4b8a      	ldr	r3, [pc, #552]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	4a89      	ldr	r2, [pc, #548]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1a:	e01c      	b.n	8001a56 <HAL_RCC_OscConfig+0x5a6>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d10c      	bne.n	8001a3e <HAL_RCC_OscConfig+0x58e>
 8001a24:	4b84      	ldr	r3, [pc, #528]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a83      	ldr	r2, [pc, #524]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a30:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	4a80      	ldr	r2, [pc, #512]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0x5a6>
 8001a3e:	4b7e      	ldr	r3, [pc, #504]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	4a7d      	ldr	r2, [pc, #500]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4a:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	4a7a      	ldr	r2, [pc, #488]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d015      	beq.n	8001a8a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7fe ffb1 	bl	80009c4 <HAL_GetTick>
 8001a62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7fe ffad 	bl	80009c4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e122      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a7c:	4b6e      	ldr	r3, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ee      	beq.n	8001a66 <HAL_RCC_OscConfig+0x5b6>
 8001a88:	e014      	b.n	8001ab4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7fe ff9b 	bl	80009c4 <HAL_GetTick>
 8001a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7fe ff97 	bl	80009c4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e10c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aa8:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1ee      	bne.n	8001a92 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8101 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001abe:	4b5e      	ldr	r3, [pc, #376]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ac6:	2b18      	cmp	r3, #24
 8001ac8:	f000 80bc 	beq.w	8001c44 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 8095 	bne.w	8001c00 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a57      	ldr	r2, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7fe ff6f 	bl	80009c4 <HAL_GetTick>
 8001ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aea:	f7fe ff6b 	bl	80009c4 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0e2      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001afc:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b08:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <HAL_RCC_OscConfig+0x78c>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	4946      	ldr	r1, [pc, #280]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	628b      	str	r3, [r1, #40]	; 0x28
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	3b01      	subs	r3, #1
 8001b32:	025b      	lsls	r3, r3, #9
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	041b      	lsls	r3, r3, #16
 8001b40:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b52:	4939      	ldr	r1, [pc, #228]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001b58:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	4a36      	ldr	r2, [pc, #216]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b64:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_RCC_OscConfig+0x790>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b70:	00d2      	lsls	r2, r2, #3
 8001b72:	4931      	ldr	r1, [pc, #196]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f023 020c 	bic.w	r2, r3, #12
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	492c      	ldr	r1, [pc, #176]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f023 0202 	bic.w	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4928      	ldr	r1, [pc, #160]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bb4:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001bba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7fe fef4 	bl	80009c4 <HAL_GetTick>
 8001bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7fe fef0 	bl	80009c4 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e067      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x730>
 8001bfe:	e05f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7fe feda 	bl	80009c4 <HAL_GetTick>
 8001c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7fe fed6 	bl	80009c4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e04d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <HAL_RCC_OscConfig+0x788>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x764>
 8001c32:	e045      	b.n	8001cc0 <HAL_RCC_OscConfig+0x810>
 8001c34:	58024800 	.word	0x58024800
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	fffffc0c 	.word	0xfffffc0c
 8001c40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_RCC_OscConfig+0x81c>)
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_RCC_OscConfig+0x81c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d031      	beq.n	8001cbc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0203 	and.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d12a      	bne.n	8001cbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d122      	bne.n	8001cbc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d11a      	bne.n	8001cbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d111      	bne.n	8001cbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d108      	bne.n	8001cbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	0e1b      	lsrs	r3, r3, #24
 8001cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3730      	adds	r7, #48	; 0x30
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	58024400 	.word	0x58024400

08001cd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e19c      	b.n	800201e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b8a      	ldr	r3, [pc, #552]	; (8001f10 <HAL_RCC_ClockConfig+0x240>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d910      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b87      	ldr	r3, [pc, #540]	; (8001f10 <HAL_RCC_ClockConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 020f 	bic.w	r2, r3, #15
 8001cfa:	4985      	ldr	r1, [pc, #532]	; (8001f10 <HAL_RCC_ClockConfig+0x240>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <HAL_RCC_ClockConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e184      	b.n	800201e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	4b7b      	ldr	r3, [pc, #492]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d908      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d30:	4b78      	ldr	r3, [pc, #480]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4975      	ldr	r1, [pc, #468]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	4b70      	ldr	r3, [pc, #448]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d908      	bls.n	8001d70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d5e:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	496a      	ldr	r1, [pc, #424]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d908      	bls.n	8001d9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d8c:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	495e      	ldr	r1, [pc, #376]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d010      	beq.n	8001dcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d908      	bls.n	8001dcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001dba:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4953      	ldr	r1, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	4b4d      	ldr	r3, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d908      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f023 020f 	bic.w	r2, r3, #15
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4947      	ldr	r1, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d055      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e06:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4940      	ldr	r1, [pc, #256]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d121      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0f6      	b.n	800201e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e38:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d115      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0ea      	b.n	800201e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e50:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0de      	b.n	800201e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e60:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0d6      	b.n	800201e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e70:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f023 0207 	bic.w	r2, r3, #7
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4925      	ldr	r1, [pc, #148]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7fe fd9f 	bl	80009c4 <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8a:	f7fe fd9b 	bl	80009c4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0be      	b.n	800201e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d1eb      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d010      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d208      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f023 020f 	bic.w	r2, r3, #15
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x244>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_ClockConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d214      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_RCC_ClockConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 020f 	bic.w	r2, r3, #15
 8001ef6:	4906      	ldr	r1, [pc, #24]	; (8001f10 <HAL_RCC_ClockConfig+0x240>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_RCC_ClockConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e086      	b.n	800201e <HAL_RCC_ClockConfig+0x34e>
 8001f10:	52002000 	.word	0x52002000
 8001f14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d208      	bcs.n	8001f46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f34:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	4939      	ldr	r1, [pc, #228]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d010      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	4b34      	ldr	r3, [pc, #208]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d208      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	492e      	ldr	r1, [pc, #184]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d010      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699a      	ldr	r2, [r3, #24]
 8001f84:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d208      	bcs.n	8001fa2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4922      	ldr	r1, [pc, #136]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d010      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d208      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4917      	ldr	r1, [pc, #92]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fd0:	f000 f89e 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 8001fd4:	4601      	mov	r1, r0
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_RCC_ClockConfig+0x35c>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8001fec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_RCC_ClockConfig+0x358>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_RCC_ClockConfig+0x35c>)
 8001ff8:	5cd3      	ldrb	r3, [r2, r3]
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x360>)
 8002006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_RCC_ClockConfig+0x364>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_RCC_ClockConfig+0x368>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fc8c 	bl	8000930 <HAL_InitTick>
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	58024400 	.word	0x58024400
 800202c:	08003d10 	.word	0x08003d10
 8002030:	20000004 	.word	0x20000004
 8002034:	20000000 	.word	0x20000000
 8002038:	20000008 	.word	0x20000008

0800203c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d12a      	bne.n	80020a4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800204e:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800206c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800207e:	2300      	movs	r3, #0
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002082:	f107 031c 	add.w	r3, r7, #28
 8002086:	4619      	mov	r1, r3
 8002088:	481f      	ldr	r0, [pc, #124]	; (8002108 <HAL_RCC_MCOConfig+0xcc>)
 800208a:	f7ff f807 	bl	800109c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	430b      	orrs	r3, r1
 800209c:	4919      	ldr	r1, [pc, #100]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80020a2:	e02a      	b.n	80020fa <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 80020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020aa:	4a16      	ldr	r2, [pc, #88]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 80020b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80020c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	480b      	ldr	r0, [pc, #44]	; (800210c <HAL_RCC_MCOConfig+0xd0>)
 80020e0:	f7fe ffdc 	bl	800109c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	01d9      	lsls	r1, r3, #7
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	430b      	orrs	r3, r1
 80020f4:	4903      	ldr	r1, [pc, #12]	; (8002104 <HAL_RCC_MCOConfig+0xc8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	610b      	str	r3, [r1, #16]
}
 80020fa:	bf00      	nop
 80020fc:	3730      	adds	r7, #48	; 0x30
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	58024400 	.word	0x58024400
 8002108:	58020000 	.word	0x58020000
 800210c:	58020800 	.word	0x58020800

08002110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002116:	4baf      	ldr	r3, [pc, #700]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800211e:	2b18      	cmp	r3, #24
 8002120:	f200 814e 	bhi.w	80023c0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	08002191 	.word	0x08002191
 8002130:	080023c1 	.word	0x080023c1
 8002134:	080023c1 	.word	0x080023c1
 8002138:	080023c1 	.word	0x080023c1
 800213c:	080023c1 	.word	0x080023c1
 8002140:	080023c1 	.word	0x080023c1
 8002144:	080023c1 	.word	0x080023c1
 8002148:	080023c1 	.word	0x080023c1
 800214c:	080021b7 	.word	0x080021b7
 8002150:	080023c1 	.word	0x080023c1
 8002154:	080023c1 	.word	0x080023c1
 8002158:	080023c1 	.word	0x080023c1
 800215c:	080023c1 	.word	0x080023c1
 8002160:	080023c1 	.word	0x080023c1
 8002164:	080023c1 	.word	0x080023c1
 8002168:	080023c1 	.word	0x080023c1
 800216c:	080021bd 	.word	0x080021bd
 8002170:	080023c1 	.word	0x080023c1
 8002174:	080023c1 	.word	0x080023c1
 8002178:	080023c1 	.word	0x080023c1
 800217c:	080023c1 	.word	0x080023c1
 8002180:	080023c1 	.word	0x080023c1
 8002184:	080023c1 	.word	0x080023c1
 8002188:	080023c1 	.word	0x080023c1
 800218c:	080021c3 	.word	0x080021c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002190:	4b90      	ldr	r3, [pc, #576]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800219c:	4b8d      	ldr	r3, [pc, #564]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	08db      	lsrs	r3, r3, #3
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	4a8c      	ldr	r2, [pc, #560]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80021ae:	e10a      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021b0:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80021b2:	61bb      	str	r3, [r7, #24]
    break;
 80021b4:	e107      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80021b6:	4b89      	ldr	r3, [pc, #548]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80021b8:	61bb      	str	r3, [r7, #24]
    break;
 80021ba:	e104      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80021bc:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80021be:	61bb      	str	r3, [r7, #24]
    break;
 80021c0:	e101      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021c2:	4b84      	ldr	r3, [pc, #528]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021cc:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021d8:	4b7e      	ldr	r3, [pc, #504]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021e2:	4b7c      	ldr	r3, [pc, #496]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	08db      	lsrs	r3, r3, #3
 80021e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80da 	beq.w	80023ba <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d05a      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800220c:	2b01      	cmp	r3, #1
 800220e:	d302      	bcc.n	8002216 <HAL_RCC_GetSysClockFreq+0x106>
 8002210:	2b02      	cmp	r3, #2
 8002212:	d078      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002214:	e099      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002216:	4b6f      	ldr	r3, [pc, #444]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d02d      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002222:	4b6c      	ldr	r3, [pc, #432]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	08db      	lsrs	r3, r3, #3
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	4a6a      	ldr	r2, [pc, #424]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224c:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800225c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002260:	eddf 5a60 	vldr	s11, [pc, #384]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800226c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002278:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800227c:	e087      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002288:	eddf 6a57 	vldr	s13, [pc, #348]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800228c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80022a4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80022a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022c0:	e065      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022cc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80023ec <HAL_RCC_GetSysClockFreq+0x2dc>
 80022d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d4:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80022ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002300:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002304:	e043      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002310:	eddf 6a37 	vldr	s13, [pc, #220]	; 80023f0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002318:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002328:	ed97 6a02 	vldr	s12, [r7, #8]
 800232c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800233c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002344:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002348:	e021      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002354:	eddf 6a25 	vldr	s13, [pc, #148]	; 80023ec <HAL_RCC_GetSysClockFreq+0x2dc>
 8002358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002370:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002388:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800238c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	0a5b      	lsrs	r3, r3, #9
 8002394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002398:	3301      	adds	r3, #1
 800239a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80023aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b2:	ee17 3a90 	vmov	r3, s15
 80023b6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80023b8:	e005      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
    break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80023c2:	61bb      	str	r3, [r7, #24]
    break;
 80023c4:	bf00      	nop
  }

  return sysclockfreq;
 80023c6:	69bb      	ldr	r3, [r7, #24]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3724      	adds	r7, #36	; 0x24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	58024400 	.word	0x58024400
 80023d8:	03d09000 	.word	0x03d09000
 80023dc:	003d0900 	.word	0x003d0900
 80023e0:	017d7840 	.word	0x017d7840
 80023e4:	46000000 	.word	0x46000000
 80023e8:	4c742400 	.word	0x4c742400
 80023ec:	4a742400 	.word	0x4a742400
 80023f0:	4bbebc20 	.word	0x4bbebc20

080023f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023fc:	2300      	movs	r3, #0
 80023fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002400:	2300      	movs	r3, #0
 8002402:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d03d      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002418:	d013      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800241a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800241e:	d802      	bhi.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002424:	e01f      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800242a:	d013      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800242c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002430:	d01c      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002432:	e018      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002434:	4baf      	ldr	r3, [pc, #700]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	4aae      	ldr	r2, [pc, #696]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800243a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002440:	e015      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2102      	movs	r1, #2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 feed 	bl	8003228 <RCCEx_PLL2_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002452:	e00c      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3324      	adds	r3, #36	; 0x24
 8002458:	2102      	movs	r1, #2
 800245a:	4618      	mov	r0, r3
 800245c:	f000 ff96 	bl	800338c <RCCEx_PLL3_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002464:	e003      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
      break;
 800246a:	e000      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800246c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002474:	4b9f      	ldr	r3, [pc, #636]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002480:	499c      	ldr	r1, [pc, #624]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002482:	4313      	orrs	r3, r2
 8002484:	650b      	str	r3, [r1, #80]	; 0x50
 8002486:	e001      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03d      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	2b04      	cmp	r3, #4
 800249e:	d826      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80024a0:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024bd 	.word	0x080024bd
 80024ac:	080024cb 	.word	0x080024cb
 80024b0:	080024dd 	.word	0x080024dd
 80024b4:	080024f5 	.word	0x080024f5
 80024b8:	080024f5 	.word	0x080024f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024bc:	4b8d      	ldr	r3, [pc, #564]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	4a8c      	ldr	r2, [pc, #560]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024c8:	e015      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fea9 	bl	8003228 <RCCEx_PLL2_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024da:	e00c      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3324      	adds	r3, #36	; 0x24
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 ff52 	bl	800338c <RCCEx_PLL3_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024ec:	e003      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
      break;
 80024f2:	e000      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80024f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024fc:	4b7d      	ldr	r3, [pc, #500]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002500:	f023 0207 	bic.w	r2, r3, #7
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	497a      	ldr	r1, [pc, #488]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800250a:	4313      	orrs	r3, r2
 800250c:	650b      	str	r3, [r1, #80]	; 0x50
 800250e:	e001      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251c:	2b00      	cmp	r3, #0
 800251e:	d03e      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	2b80      	cmp	r3, #128	; 0x80
 8002526:	d01c      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002528:	2b80      	cmp	r3, #128	; 0x80
 800252a:	d804      	bhi.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002530:	2b40      	cmp	r3, #64	; 0x40
 8002532:	d00d      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002534:	e01e      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002536:	2bc0      	cmp	r3, #192	; 0xc0
 8002538:	d01f      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800253a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253e:	d01e      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002540:	e018      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002542:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	4a6b      	ldr	r2, [pc, #428]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800254e:	e017      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fe66 	bl	8003228 <RCCEx_PLL2_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002560:	e00e      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3324      	adds	r3, #36	; 0x24
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f000 ff0f 	bl	800338c <RCCEx_PLL3_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002572:	e005      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	75fb      	strb	r3, [r7, #23]
      break;
 8002578:	e002      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800257e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002586:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	4958      	ldr	r1, [pc, #352]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002594:	4313      	orrs	r3, r2
 8002596:	650b      	str	r3, [r1, #80]	; 0x50
 8002598:	e001      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d044      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80025b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b4:	d01f      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80025b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ba:	d805      	bhi.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025c4:	d00e      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80025c6:	e01f      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80025c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025cc:	d01f      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80025ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025d2:	d01e      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80025d4:	e018      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	4a46      	ldr	r2, [pc, #280]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025e2:	e017      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fe1c 	bl	8003228 <RCCEx_PLL2_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80025f4:	e00e      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3324      	adds	r3, #36	; 0x24
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fec5 	bl	800338c <RCCEx_PLL3_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002606:	e005      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	75fb      	strb	r3, [r7, #23]
      break;
 800260c:	e002      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800261a:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002628:	4932      	ldr	r1, [pc, #200]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800262a:	4313      	orrs	r3, r2
 800262c:	658b      	str	r3, [r1, #88]	; 0x58
 800262e:	e001      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263c:	2b00      	cmp	r3, #0
 800263e:	d044      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800264a:	d01f      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800264c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002650:	d805      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002656:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800265a:	d00e      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800265c:	e01f      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800265e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002662:	d01f      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002668:	d01e      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800266a:	e018      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002678:	e017      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fdd1 	bl	8003228 <RCCEx_PLL2_Config>
 8002686:	4603      	mov	r3, r0
 8002688:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800268a:	e00e      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3324      	adds	r3, #36	; 0x24
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fe7a 	bl	800338c <RCCEx_PLL3_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800269c:	e005      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
      break;
 80026a2:	e002      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80026a4:	bf00      	nop
 80026a6:	e000      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80026a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026be:	490d      	ldr	r1, [pc, #52]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	658b      	str	r3, [r1, #88]	; 0x58
 80026c4:	e001      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d035      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d802      	bhi.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01b      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80026e6:	e017      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d00c      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80026ec:	2b30      	cmp	r3, #48	; 0x30
 80026ee:	d018      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80026f0:	e012      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80026f2:	bf00      	nop
 80026f4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f8:	4bae      	ldr	r3, [pc, #696]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	4aad      	ldr	r2, [pc, #692]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80026fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002704:	e00e      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fd8b 	bl	8003228 <RCCEx_PLL2_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002716:	e005      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	75fb      	strb	r3, [r7, #23]
      break;
 800271c:	e002      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800271e:	bf00      	nop
 8002720:	e000      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800272a:	4ba2      	ldr	r3, [pc, #648]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	499f      	ldr	r1, [pc, #636]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800273c:	e001      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d042      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002756:	d01f      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275c:	d805      	bhi.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002766:	d00e      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002768:	e01f      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800276a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800276e:	d01f      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002774:	d01e      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002776:	e018      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002778:	4b8e      	ldr	r3, [pc, #568]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	4a8d      	ldr	r2, [pc, #564]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800277e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002784:	e017      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fd4b 	bl	8003228 <RCCEx_PLL2_Config>
 8002792:	4603      	mov	r3, r0
 8002794:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002796:	e00e      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3324      	adds	r3, #36	; 0x24
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fdf4 	bl	800338c <RCCEx_PLL3_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027a8:	e005      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
      break;
 80027ae:	e002      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80027b0:	bf00      	nop
 80027b2:	e000      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80027b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027bc:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80027be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c8:	497a      	ldr	r1, [pc, #488]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	650b      	str	r3, [r1, #80]	; 0x50
 80027ce:	e001      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d042      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e8:	d01b      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027ee:	d805      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d022      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80027fa:	e01b      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80027fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002800:	d01d      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002802:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002806:	d01c      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002808:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800280c:	d01b      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800280e:	e011      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	2101      	movs	r1, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fd06 	bl	8003228 <RCCEx_PLL2_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002820:	e012      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3324      	adds	r3, #36	; 0x24
 8002826:	2101      	movs	r1, #1
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fdaf 	bl	800338c <RCCEx_PLL3_Config>
 800282e:	4603      	mov	r3, r0
 8002830:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002832:	e009      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	75fb      	strb	r3, [r7, #23]
      break;
 8002838:	e006      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800283a:	bf00      	nop
 800283c:	e004      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800283e:	bf00      	nop
 8002840:	e002      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002842:	bf00      	nop
 8002844:	e000      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800284e:	4b59      	ldr	r3, [pc, #356]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285a:	4956      	ldr	r1, [pc, #344]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 800285c:	4313      	orrs	r3, r2
 800285e:	650b      	str	r3, [r1, #80]	; 0x50
 8002860:	e001      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d044      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800287c:	d01b      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800287e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002882:	d805      	bhi.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d022      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800288e:	e01b      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d01d      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289a:	d01c      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800289c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028a0:	d01b      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80028a2:	e011      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fcbc 	bl	8003228 <RCCEx_PLL2_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80028b4:	e012      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3324      	adds	r3, #36	; 0x24
 80028ba:	2101      	movs	r1, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd65 	bl	800338c <RCCEx_PLL3_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
      break;
 80028cc:	e006      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80028ce:	bf00      	nop
 80028d0:	e004      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80028da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80028e2:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028f0:	4930      	ldr	r1, [pc, #192]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	658b      	str	r3, [r1, #88]	; 0x58
 80028f6:	e001      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d022      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00e      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8002910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002914:	d108      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3304      	adds	r3, #4
 800291a:	2101      	movs	r1, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fc83 	bl	8003228 <RCCEx_PLL2_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002926:	e003      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	75fb      	strb	r3, [r7, #23]
      break;
 800292c:	e000      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 800292e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	491c      	ldr	r1, [pc, #112]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002948:	e001      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d030      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002962:	d005      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002968:	d009      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d013      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800296e:	e00f      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002970:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800297c:	e00c      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	2101      	movs	r1, #1
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fc4f 	bl	8003228 <RCCEx_PLL2_Config>
 800298a:	4603      	mov	r3, r0
 800298c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800298e:	e003      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
      break;
 8002994:	e000      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 8002996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10c      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80029a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4902      	ldr	r1, [pc, #8]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	650b      	str	r3, [r1, #80]	; 0x50
 80029b0:	e004      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80029b2:	bf00      	nop
 80029b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
 80029ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d032      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d81b      	bhi.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80029d0:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d6:	bf00      	nop
 80029d8:	08002a0f 	.word	0x08002a0f
 80029dc:	080029e9 	.word	0x080029e9
 80029e0:	080029f7 	.word	0x080029f7
 80029e4:	08002a0f 	.word	0x08002a0f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e8:	4bb8      	ldr	r3, [pc, #736]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	4ab7      	ldr	r2, [pc, #732]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029f4:	e00c      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2102      	movs	r1, #2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fc13 	bl	8003228 <RCCEx_PLL2_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a06:	e003      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0c:	e000      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 8002a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a16:	4bad      	ldr	r3, [pc, #692]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	49aa      	ldr	r1, [pc, #680]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a28:	e001      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8086 	beq.w	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a3c:	4ba4      	ldr	r3, [pc, #656]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4aa3      	ldr	r2, [pc, #652]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a48:	f7fd ffbc 	bl	80009c4 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a4e:	e009      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fd ffb8 	bl	80009c4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d902      	bls.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	75fb      	strb	r3, [r7, #23]
        break;
 8002a62:	e005      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a64:	4b9a      	ldr	r3, [pc, #616]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ef      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d166      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a76:	4b95      	ldr	r3, [pc, #596]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a80:	4053      	eors	r3, r2
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d013      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a8a:	4b90      	ldr	r3, [pc, #576]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a94:	4b8d      	ldr	r3, [pc, #564]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a8c      	ldr	r2, [pc, #560]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa0:	4b8a      	ldr	r3, [pc, #552]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a89      	ldr	r2, [pc, #548]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002aac:	4a87      	ldr	r2, [pc, #540]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abc:	d115      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fd ff81 	bl	80009c4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ac4:	e00b      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fd ff7d 	bl	80009c4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d902      	bls.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	75fb      	strb	r3, [r7, #23]
            break;
 8002adc:	e005      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ade:	4b7b      	ldr	r3, [pc, #492]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ed      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d126      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002b00:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b0e:	0919      	lsrs	r1, r3, #4
 8002b10:	4b70      	ldr	r3, [pc, #448]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002b12:	400b      	ands	r3, r1
 8002b14:	496d      	ldr	r1, [pc, #436]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	610b      	str	r3, [r1, #16]
 8002b1a:	e005      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	4a6a      	ldr	r2, [pc, #424]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b26:	6113      	str	r3, [r2, #16]
 8002b28:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b36:	4965      	ldr	r1, [pc, #404]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	670b      	str	r3, [r1, #112]	; 0x70
 8002b3c:	e004      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	75bb      	strb	r3, [r7, #22]
 8002b42:	e001      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d07e      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b58:	2b28      	cmp	r3, #40	; 0x28
 8002b5a:	d867      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002c33 	.word	0x08002c33
 8002b68:	08002c2d 	.word	0x08002c2d
 8002b6c:	08002c2d 	.word	0x08002c2d
 8002b70:	08002c2d 	.word	0x08002c2d
 8002b74:	08002c2d 	.word	0x08002c2d
 8002b78:	08002c2d 	.word	0x08002c2d
 8002b7c:	08002c2d 	.word	0x08002c2d
 8002b80:	08002c2d 	.word	0x08002c2d
 8002b84:	08002c09 	.word	0x08002c09
 8002b88:	08002c2d 	.word	0x08002c2d
 8002b8c:	08002c2d 	.word	0x08002c2d
 8002b90:	08002c2d 	.word	0x08002c2d
 8002b94:	08002c2d 	.word	0x08002c2d
 8002b98:	08002c2d 	.word	0x08002c2d
 8002b9c:	08002c2d 	.word	0x08002c2d
 8002ba0:	08002c2d 	.word	0x08002c2d
 8002ba4:	08002c1b 	.word	0x08002c1b
 8002ba8:	08002c2d 	.word	0x08002c2d
 8002bac:	08002c2d 	.word	0x08002c2d
 8002bb0:	08002c2d 	.word	0x08002c2d
 8002bb4:	08002c2d 	.word	0x08002c2d
 8002bb8:	08002c2d 	.word	0x08002c2d
 8002bbc:	08002c2d 	.word	0x08002c2d
 8002bc0:	08002c2d 	.word	0x08002c2d
 8002bc4:	08002c33 	.word	0x08002c33
 8002bc8:	08002c2d 	.word	0x08002c2d
 8002bcc:	08002c2d 	.word	0x08002c2d
 8002bd0:	08002c2d 	.word	0x08002c2d
 8002bd4:	08002c2d 	.word	0x08002c2d
 8002bd8:	08002c2d 	.word	0x08002c2d
 8002bdc:	08002c2d 	.word	0x08002c2d
 8002be0:	08002c2d 	.word	0x08002c2d
 8002be4:	08002c33 	.word	0x08002c33
 8002be8:	08002c2d 	.word	0x08002c2d
 8002bec:	08002c2d 	.word	0x08002c2d
 8002bf0:	08002c2d 	.word	0x08002c2d
 8002bf4:	08002c2d 	.word	0x08002c2d
 8002bf8:	08002c2d 	.word	0x08002c2d
 8002bfc:	08002c2d 	.word	0x08002c2d
 8002c00:	08002c2d 	.word	0x08002c2d
 8002c04:	08002c33 	.word	0x08002c33
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fb0a 	bl	8003228 <RCCEx_PLL2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c18:	e00c      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3324      	adds	r3, #36	; 0x24
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fbb3 	bl	800338c <RCCEx_PLL3_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c2a:	e003      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c30:	e000      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 8002c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c46:	4921      	ldr	r1, [pc, #132]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	654b      	str	r3, [r1, #84]	; 0x54
 8002c4c:	e001      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d03e      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d820      	bhi.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <HAL_RCCEx_PeriphCLKConfig+0x878>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002caf 	.word	0x08002caf
 8002c70:	08002c85 	.word	0x08002c85
 8002c74:	08002c97 	.word	0x08002c97
 8002c78:	08002caf 	.word	0x08002caf
 8002c7c:	08002caf 	.word	0x08002caf
 8002c80:	08002caf 	.word	0x08002caf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 facc 	bl	8003228 <RCCEx_PLL2_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c94:	e00c      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3324      	adds	r3, #36	; 0x24
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fb75 	bl	800338c <RCCEx_PLL3_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ca6:	e003      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cac:	e000      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 8002cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d110      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f023 0207 	bic.w	r2, r3, #7
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc2:	4902      	ldr	r1, [pc, #8]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	654b      	str	r3, [r1, #84]	; 0x54
 8002cc8:	e008      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8002cca:	bf00      	nop
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	58024800 	.word	0x58024800
 8002cd4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d039      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	d820      	bhi.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d3b 	.word	0x08002d3b
 8002cfc:	08002d11 	.word	0x08002d11
 8002d00:	08002d23 	.word	0x08002d23
 8002d04:	08002d3b 	.word	0x08002d3b
 8002d08:	08002d3b 	.word	0x08002d3b
 8002d0c:	08002d3b 	.word	0x08002d3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fa86 	bl	8003228 <RCCEx_PLL2_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d20:	e00c      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3324      	adds	r3, #36	; 0x24
 8002d26:	2101      	movs	r1, #1
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fb2f 	bl	800338c <RCCEx_PLL3_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d32:	e003      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75fb      	strb	r3, [r7, #23]
      break;
 8002d38:	e000      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 8002d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d42:	4bb2      	ldr	r3, [pc, #712]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d50:	49ae      	ldr	r1, [pc, #696]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	658b      	str	r3, [r1, #88]	; 0x58
 8002d56:	e001      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d044      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d72:	d01b      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8002d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d78:	d805      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x992>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d022      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8002d84:	e01b      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d90:	d01c      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8002d92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d96:	d01b      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8002d98:	e011      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fa41 	bl	8003228 <RCCEx_PLL2_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002daa:	e012      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	2102      	movs	r1, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 faea 	bl	800338c <RCCEx_PLL3_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc2:	e006      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002dc4:	bf00      	nop
 8002dc6:	e004      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002dc8:	bf00      	nop
 8002dca:	e002      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8002dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dd8:	4b8c      	ldr	r3, [pc, #560]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	4989      	ldr	r1, [pc, #548]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	654b      	str	r3, [r1, #84]	; 0x54
 8002dec:	e001      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d044      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e08:	d01b      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 8002e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e0e:	d805      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d022      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8002e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8002e1a:	e01b      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e20:	d01d      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002e22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e26:	d01c      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8002e28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e2c:	d01b      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xa72>
 8002e2e:	e011      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3304      	adds	r3, #4
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f9f6 	bl	8003228 <RCCEx_PLL2_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e40:	e012      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3324      	adds	r3, #36	; 0x24
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fa9f 	bl	800338c <RCCEx_PLL3_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e52:	e009      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	e006      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e004      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 8002e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e6e:	4b67      	ldr	r3, [pc, #412]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e7c:	4963      	ldr	r1, [pc, #396]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	658b      	str	r3, [r1, #88]	; 0x58
 8002e82:	e001      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d044      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xae4>
 8002ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea4:	d805      	bhi.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d022      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8002eb0:	e01b      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d01d      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8002eb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ebc:	d01c      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8002ebe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ec2:	d01b      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8002ec4:	e011      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f9ab 	bl	8003228 <RCCEx_PLL2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ed6:	e012      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3324      	adds	r3, #36	; 0x24
 8002edc:	2102      	movs	r1, #2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa54 	bl	800338c <RCCEx_PLL3_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ee8:	e009      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
      break;
 8002eee:	e006      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002ef0:	bf00      	nop
 8002ef2:	e004      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002ef4:	bf00      	nop
 8002ef6:	e002      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8002efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f12:	493e      	ldr	r1, [pc, #248]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	658b      	str	r3, [r1, #88]	; 0x58
 8002f18:	e001      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f34:	d10a      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3324      	adds	r3, #36	; 0x24
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fa25 	bl	800338c <RCCEx_PLL3_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5a:	492c      	ldr	r1, [pc, #176]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f76:	d10a      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3324      	adds	r3, #36	; 0x24
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fa04 	bl	800338c <RCCEx_PLL3_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f9c:	491b      	ldr	r1, [pc, #108]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d032      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8002fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fbe:	d016      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d111      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f92c 	bl	8003228 <RCCEx_PLL2_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002fd4:	e00c      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3324      	adds	r3, #36	; 0x24
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f9d5 	bl	800338c <RCCEx_PLL3_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002fe6:	e003      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
      break;
 8002fec:	e000      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 8002fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003004:	4901      	ldr	r1, [pc, #4]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003006:	4313      	orrs	r3, r2
 8003008:	658b      	str	r3, [r1, #88]	; 0x58
 800300a:	e003      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800300c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02f      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800302a:	d00c      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800302c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003030:	d015      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 8003032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003036:	d10f      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003038:	4b7a      	ldr	r3, [pc, #488]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	4a79      	ldr	r2, [pc, #484]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800303e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003042:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003044:	e00c      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3324      	adds	r3, #36	; 0x24
 800304a:	2101      	movs	r1, #1
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f99d 	bl	800338c <RCCEx_PLL3_Config>
 8003052:	4603      	mov	r3, r0
 8003054:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	75fb      	strb	r3, [r7, #23]
      break;
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 800305e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003066:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	496b      	ldr	r1, [pc, #428]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003076:	4313      	orrs	r3, r2
 8003078:	654b      	str	r3, [r1, #84]	; 0x54
 800307a:	e001      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d029      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d007      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 800309a:	e00f      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800309c:	4b61      	ldr	r3, [pc, #388]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	4a60      	ldr	r2, [pc, #384]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80030a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030a8:	e00b      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2102      	movs	r1, #2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 f8b9 	bl	8003228 <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030ba:	e002      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	75fb      	strb	r3, [r7, #23]
      break;
 80030c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030c8:	4b56      	ldr	r3, [pc, #344]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80030ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d4:	4953      	ldr	r1, [pc, #332]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030da:	e001      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3324      	adds	r3, #36	; 0x24
 80030f0:	2102      	movs	r1, #2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f94a 	bl	800338c <RCCEx_PLL3_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d031      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003118:	d00c      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 800311a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311e:	d802      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xd32>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d011      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xd54>
 8003124:	e00d      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312a:	d00f      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xd58>
 800312c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003130:	d00e      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8003132:	e006      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800313a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003140:	e007      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
      break;
 8003146:	e004      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003148:	bf00      	nop
 800314a:	e002      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10a      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003166:	492f      	ldr	r1, [pc, #188]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003168:	4313      	orrs	r3, r2
 800316a:	654b      	str	r3, [r1, #84]	; 0x54
 800316c:	e001      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003182:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318a:	4926      	ldr	r1, [pc, #152]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800318c:	4313      	orrs	r3, r2
 800318e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d009      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800319c:	4b21      	ldr	r3, [pc, #132]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80031aa:	491e      	ldr	r1, [pc, #120]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c8:	4916      	ldr	r1, [pc, #88]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xe02>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031e4:	6113      	str	r3, [r2, #16]
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80031f0:	490c      	ldr	r1, [pc, #48]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	da08      	bge.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	4906      	ldr	r1, [pc, #24]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800320c:	4313      	orrs	r3, r2
 800320e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003210:	7dbb      	ldrb	r3, [r7, #22]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xe28>
  }
  return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	58024400 	.word	0x58024400

08003228 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003236:	4b53      	ldr	r3, [pc, #332]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b03      	cmp	r3, #3
 8003240:	d101      	bne.n	8003246 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e099      	b.n	800337a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003246:	4b4f      	ldr	r3, [pc, #316]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a4e      	ldr	r2, [pc, #312]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800324c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003252:	f7fd fbb7 	bl	80009c4 <HAL_GetTick>
 8003256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003258:	e008      	b.n	800326c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800325a:	f7fd fbb3 	bl	80009c4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e086      	b.n	800337a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800326c:	4b45      	ldr	r3, [pc, #276]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003278:	4b42      	ldr	r3, [pc, #264]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	031b      	lsls	r3, r3, #12
 8003286:	493f      	ldr	r1, [pc, #252]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 8003288:	4313      	orrs	r3, r2
 800328a:	628b      	str	r3, [r1, #40]	; 0x28
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	3b01      	subs	r3, #1
 8003292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	3b01      	subs	r3, #1
 800329c:	025b      	lsls	r3, r3, #9
 800329e:	b29b      	uxth	r3, r3
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032bc:	4931      	ldr	r1, [pc, #196]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	492d      	ldr	r1, [pc, #180]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80032d4:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f023 0220 	bic.w	r2, r3, #32
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	4928      	ldr	r1, [pc, #160]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80032e6:	4b27      	ldr	r3, [pc, #156]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	4a26      	ldr	r2, [pc, #152]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 80032ec:	f023 0310 	bic.w	r3, r3, #16
 80032f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 80032f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <RCCEx_PLL2_Config+0x160>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	69d2      	ldr	r2, [r2, #28]
 80032fe:	00d2      	lsls	r2, r2, #3
 8003300:	4920      	ldr	r1, [pc, #128]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 8003302:	4313      	orrs	r3, r2
 8003304:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003306:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800330c:	f043 0310 	orr.w	r3, r3, #16
 8003310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d106      	bne.n	8003326 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800331e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003322:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003324:	e00f      	b.n	8003346 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d106      	bne.n	800333a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800332c:	4b15      	ldr	r3, [pc, #84]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 8003332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003336:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003338:	e005      	b.n	8003346 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	4a11      	ldr	r2, [pc, #68]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 8003340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003344:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800334c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003352:	f7fd fb37 	bl	80009c4 <HAL_GetTick>
 8003356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003358:	e008      	b.n	800336c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800335a:	f7fd fb33 	bl	80009c4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e006      	b.n	800337a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <RCCEx_PLL2_Config+0x15c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	58024400 	.word	0x58024400
 8003388:	ffff0007 	.word	0xffff0007

0800338c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d101      	bne.n	80033aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e099      	b.n	80034de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80033aa:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a4e      	ldr	r2, [pc, #312]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80033b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b6:	f7fd fb05 	bl	80009c4 <HAL_GetTick>
 80033ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033bc:	e008      	b.n	80033d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80033be:	f7fd fb01 	bl	80009c4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e086      	b.n	80034de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033d0:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80033dc:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	051b      	lsls	r3, r3, #20
 80033ea:	493f      	ldr	r1, [pc, #252]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	628b      	str	r3, [r1, #40]	; 0x28
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	3b01      	subs	r3, #1
 8003400:	025b      	lsls	r3, r3, #9
 8003402:	b29b      	uxth	r3, r3
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	3b01      	subs	r3, #1
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	3b01      	subs	r3, #1
 800341a:	061b      	lsls	r3, r3, #24
 800341c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003420:	4931      	ldr	r1, [pc, #196]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003426:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	492d      	ldr	r1, [pc, #180]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003434:	4313      	orrs	r3, r2
 8003436:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003438:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4928      	ldr	r1, [pc, #160]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	4a26      	ldr	r2, [pc, #152]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003454:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003456:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <RCCEx_PLL3_Config+0x160>)
 800345c:	4013      	ands	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	69d2      	ldr	r2, [r2, #28]
 8003462:	00d2      	lsls	r2, r2, #3
 8003464:	4920      	ldr	r1, [pc, #128]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800346a:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d106      	bne.n	800348a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003486:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003488:	e00f      	b.n	80034aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003490:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 8003496:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800349a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800349c:	e005      	b.n	80034aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80034a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b6:	f7fd fa85 	bl	80009c4 <HAL_GetTick>
 80034ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80034bc:	e008      	b.n	80034d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80034be:	f7fd fa81 	bl	80009c4 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e006      	b.n	80034de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <RCCEx_PLL3_Config+0x15c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
 80034ec:	ffff0007 	.word	0xffff0007

080034f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0e2      	b.n	80036cc <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a70      	ldr	r2, [pc, #448]	; (80036d4 <HAL_SPI_Init+0x1e4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00f      	beq.n	8003536 <HAL_SPI_Init+0x46>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6f      	ldr	r2, [pc, #444]	; (80036d8 <HAL_SPI_Init+0x1e8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00a      	beq.n	8003536 <HAL_SPI_Init+0x46>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6d      	ldr	r2, [pc, #436]	; (80036dc <HAL_SPI_Init+0x1ec>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d005      	beq.n	8003536 <HAL_SPI_Init+0x46>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	d901      	bls.n	8003536 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0ca      	b.n	80036cc <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fb96 	bl	8003c68 <SPI_GetPacketSize>
 800353c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a64      	ldr	r2, [pc, #400]	; (80036d4 <HAL_SPI_Init+0x1e4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00c      	beq.n	8003562 <HAL_SPI_Init+0x72>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a62      	ldr	r2, [pc, #392]	; (80036d8 <HAL_SPI_Init+0x1e8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <HAL_SPI_Init+0x72>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a61      	ldr	r2, [pc, #388]	; (80036dc <HAL_SPI_Init+0x1ec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d002      	beq.n	8003562 <HAL_SPI_Init+0x72>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b08      	cmp	r3, #8
 8003560:	d811      	bhi.n	8003586 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003566:	4a5b      	ldr	r2, [pc, #364]	; (80036d4 <HAL_SPI_Init+0x1e4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a59      	ldr	r2, [pc, #356]	; (80036d8 <HAL_SPI_Init+0x1e8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_SPI_Init+0x90>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a58      	ldr	r2, [pc, #352]	; (80036dc <HAL_SPI_Init+0x1ec>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d104      	bne.n	800358a <HAL_SPI_Init+0x9a>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b10      	cmp	r3, #16
 8003584:	d901      	bls.n	800358a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0a0      	b.n	80036cc <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd f8b4 	bl	800070c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c4:	d110      	bne.n	80035e8 <HAL_SPI_Init+0xf8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ce:	d10b      	bne.n	80035e8 <HAL_SPI_Init+0xf8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d107      	bne.n	80035e8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035e6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	ea42 0103 	orr.w	r1, r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003648:	ea42 0103 	orr.w	r1, r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d113      	bne.n	8003688 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003672:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003686:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40013000 	.word	0x40013000
 80036d8:	40003800 	.word	0x40003800
 80036dc:	40003c00 	.word	0x40003c00

080036e0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80036f8:	6a3a      	ldr	r2, [r7, #32]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003712:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3330      	adds	r3, #48	; 0x30
 800371a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d113      	bne.n	800374e <HAL_SPI_IRQHandler+0x6e>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10e      	bne.n	800374e <HAL_SPI_IRQHandler+0x6e>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
    hspi->RxISR(hspi);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
    handled = 1UL;
 800374a:	2301      	movs	r3, #1
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10f      	bne.n	8003778 <HAL_SPI_IRQHandler+0x98>
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_SPI_IRQHandler+0x98>
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
    handled = 1UL;
 8003774:	2301      	movs	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <HAL_SPI_IRQHandler+0xc2>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_SPI_IRQHandler+0xc2>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
    handled = 1UL;
 800379e:	2301      	movs	r3, #1
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f040 8170 	bne.w	8003a8a <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a0 	beq.w	80038f6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0208 	orr.w	r2, r2, #8
 80037c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0210 	orr.w	r2, r2, #16
 80037d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699a      	ldr	r2, [r3, #24]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0208 	bic.w	r2, r2, #8
 80037f4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00f      	beq.n	8003820 <HAL_SPI_IRQHandler+0x140>
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d004      	beq.n	8003810 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_SPI_IRQHandler+0x140>
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d059      	beq.n	80038ca <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d154      	bne.n	80038ca <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d13d      	bne.n	80038aa <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800382e:	e036      	b.n	800389e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b0f      	cmp	r3, #15
 8003836:	d90b      	bls.n	8003850 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003840:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003842:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003848:	1d1a      	adds	r2, r3, #4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	665a      	str	r2, [r3, #100]	; 0x64
 800384e:	e01d      	b.n	800388c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b07      	cmp	r3, #7
 8003856:	d90b      	bls.n	8003870 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	8812      	ldrh	r2, [r2, #0]
 8003860:	b292      	uxth	r2, r2
 8003862:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003868:	1c9a      	adds	r2, r3, #2
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	665a      	str	r2, [r3, #100]	; 0x64
 800386e:	e00d      	b.n	800388c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800387c:	7812      	ldrb	r2, [r2, #0]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1c2      	bne.n	8003830 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f93c 	bl	8003b28 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f90c 	bl	8003ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 80038c8:	e0e4      	b.n	8003a94 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80038ca:	7cfb      	ldrb	r3, [r7, #19]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d103      	bne.n	80038d8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8fb 	bl	8003acc <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 80038d6:	e0da      	b.n	8003a8e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d103      	bne.n	80038e6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8ea 	bl	8003ab8 <HAL_SPI_RxCpltCallback>
    return;
 80038e4:	e0d3      	b.n	8003a8e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	f040 80d0 	bne.w	8003a8e <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8d8 	bl	8003aa4 <HAL_SPI_TxCpltCallback>
    return;
 80038f4:	e0cb      	b.n	8003a8e <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <HAL_SPI_IRQHandler+0x23c>
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003918:	619a      	str	r2, [r3, #24]

    return;
 800391a:	e0bb      	b.n	8003a94 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80b6 	beq.w	8003a94 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00f      	beq.n	8003952 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003938:	f043 0204 	orr.w	r2, r3, #4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003950:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00f      	beq.n	800397c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00f      	beq.n	80039a6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398c:	f043 0208 	orr.w	r2, r3, #8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00f      	beq.n	80039d0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0220 	orr.w	r2, r2, #32
 80039ce:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d05b      	beq.n	8003a92 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6919      	ldr	r1, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <HAL_SPI_IRQHandler+0x3bc>)
 80039f6:	400b      	ands	r3, r1
 80039f8:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a04:	d138      	bne.n	8003a78 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003a14:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d013      	beq.n	8003a46 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a22:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_SPI_IRQHandler+0x3c0>)
 8003a24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd f8f2 	bl	8000c14 <HAL_DMA_Abort_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d021      	beq.n	8003a92 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_SPI_IRQHandler+0x3c0>)
 8003a54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fd f8da 	bl	8000c14 <HAL_DMA_Abort_IT>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d015      	beq.n	8003a92 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a76:	e00c      	b.n	8003a92 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f82d 	bl	8003ae0 <HAL_SPI_ErrorCallback>
    return;
 8003a86:	bf00      	nop
 8003a88:	e003      	b.n	8003a92 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8003a8a:	bf00      	nop
 8003a8c:	e002      	b.n	8003a94 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8003a92:	bf00      	nop
  }
}
 8003a94:	3728      	adds	r7, #40	; 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	fffffc94 	.word	0xfffffc94
 8003aa0:	08003af5 	.word	0x08003af5

08003aa4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff ffe0 	bl	8003ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0208 	orr.w	r2, r2, #8
 8003b46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0210 	orr.w	r2, r2, #16
 8003b56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6919      	ldr	r1, [r3, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <SPI_CloseTransfer+0x13c>)
 8003b74:	400b      	ands	r3, r1
 8003b76:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003b86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d014      	beq.n	8003bbe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00f      	beq.n	8003bbe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0220 	orr.w	r2, r2, #32
 8003bbc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d014      	beq.n	8003bf4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00f      	beq.n	8003bf4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00f      	beq.n	8003c1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00f      	beq.n	8003c48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2e:	f043 0208 	orr.w	r2, r3, #8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	fffffc90 	.word	0xfffffc90

08003c68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	3301      	adds	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3307      	adds	r3, #7
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <__libc_init_array>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4e0d      	ldr	r6, [pc, #52]	; (8003cd8 <__libc_init_array+0x38>)
 8003ca4:	4c0d      	ldr	r4, [pc, #52]	; (8003cdc <__libc_init_array+0x3c>)
 8003ca6:	1ba4      	subs	r4, r4, r6
 8003ca8:	10a4      	asrs	r4, r4, #2
 8003caa:	2500      	movs	r5, #0
 8003cac:	42a5      	cmp	r5, r4
 8003cae:	d109      	bne.n	8003cc4 <__libc_init_array+0x24>
 8003cb0:	4e0b      	ldr	r6, [pc, #44]	; (8003ce0 <__libc_init_array+0x40>)
 8003cb2:	4c0c      	ldr	r4, [pc, #48]	; (8003ce4 <__libc_init_array+0x44>)
 8003cb4:	f000 f820 	bl	8003cf8 <_init>
 8003cb8:	1ba4      	subs	r4, r4, r6
 8003cba:	10a4      	asrs	r4, r4, #2
 8003cbc:	2500      	movs	r5, #0
 8003cbe:	42a5      	cmp	r5, r4
 8003cc0:	d105      	bne.n	8003cce <__libc_init_array+0x2e>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cc8:	4798      	blx	r3
 8003cca:	3501      	adds	r5, #1
 8003ccc:	e7ee      	b.n	8003cac <__libc_init_array+0xc>
 8003cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cd2:	4798      	blx	r3
 8003cd4:	3501      	adds	r5, #1
 8003cd6:	e7f2      	b.n	8003cbe <__libc_init_array+0x1e>
 8003cd8:	08003d20 	.word	0x08003d20
 8003cdc:	08003d20 	.word	0x08003d20
 8003ce0:	08003d20 	.word	0x08003d20
 8003ce4:	08003d24 	.word	0x08003d24

08003ce8 <memset>:
 8003ce8:	4402      	add	r2, r0
 8003cea:	4603      	mov	r3, r0
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <memset+0xa>
 8003cf0:	4770      	bx	lr
 8003cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf6:	e7f9      	b.n	8003cec <memset+0x4>

08003cf8 <_init>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr

08003d04 <_fini>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	bf00      	nop
 8003d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0a:	bc08      	pop	{r3}
 8003d0c:	469e      	mov	lr, r3
 8003d0e:	4770      	bx	lr
