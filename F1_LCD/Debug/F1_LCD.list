
F1_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080026b0  080026b0  000126b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002740  08002740  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002740  08002740  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002740  08002740  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  080027b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080027b8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dee  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d8  00000000  00000000  00027e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  00029460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  00029b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a36  00000000  00000000  0002a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e26  00000000  00000000  00040be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008264a  00000000  00000000  00049a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f28  00000000  00000000  000cc0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002698 	.word	0x08002698

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002698 	.word	0x08002698

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f000 ff05 	bl	8000fa8 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000098 	.word	0x20000098

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f000 fed5 	bl	8000fa8 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000098 	.word	0x20000098

0800020c <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000210:	2032      	movs	r0, #50	; 0x32
 8000212:	f000 fae1 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000216:	2030      	movs	r0, #48	; 0x30
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800021c:	2005      	movs	r0, #5
 800021e:	f000 fadb 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000222:	2030      	movs	r0, #48	; 0x30
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000228:	2001      	movs	r0, #1
 800022a:	f000 fad5 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800022e:	2030      	movs	r0, #48	; 0x30
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000234:	200a      	movs	r0, #10
 8000236:	f000 facf 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800023a:	2020      	movs	r0, #32
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000240:	200a      	movs	r0, #10
 8000242:	f000 fac9 	bl	80007d8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000246:	2028      	movs	r0, #40	; 0x28
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f000 fac3 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000252:	2008      	movs	r0, #8
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 fabd 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800025e:	2001      	movs	r0, #1
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fab7 	bl	80007d8 <HAL_Delay>
	HAL_Delay(1);
 800026a:	2001      	movs	r0, #1
 800026c:	f000 fab4 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000270:	2006      	movs	r0, #6
 8000272:	f7ff ff6b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f000 faae 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800027c:	200c      	movs	r0, #12
 800027e:	f7ff ff65 	bl	800014c <lcd_send_cmd>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}

08000286 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800028e:	e006      	b.n	800029e <lcd_send_string+0x18>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	1c5a      	adds	r2, r3, #1
 8000294:	607a      	str	r2, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ff87 	bl	80001ac <lcd_send_data>
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d1f4      	bne.n	8000290 <lcd_send_string+0xa>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af02      	add	r7, sp, #8
	HAL_Init();
 80002b6:	f000 fa2d 	bl	8000714 <HAL_Init>
	SystemClock_Config();
 80002ba:	f000 f85f 	bl	800037c <SystemClock_Config>
	MX_GPIO_Init();
 80002be:	f000 f8d1 	bl	8000464 <MX_GPIO_Init>
	MX_I2C1_Init();
 80002c2:	f000 f8a1 	bl	8000408 <MX_I2C1_Init>
	{

	}
	*/

	lcd_init ();
 80002c6:	f7ff ffa1 	bl	800020c <lcd_init>

	lcd_send_cmd (0x80|0x00);
 80002ca:	2080      	movs	r0, #128	; 0x80
 80002cc:	f7ff ff3e 	bl	800014c <lcd_send_cmd>
	sprintf (buf,"HELLO %d %d %d",0x8024,1,111);
 80002d0:	236f      	movs	r3, #111	; 0x6f
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2301      	movs	r3, #1
 80002d6:	f248 0224 	movw	r2, #32804	; 0x8024
 80002da:	4923      	ldr	r1, [pc, #140]	; (8000368 <main+0xb8>)
 80002dc:	4823      	ldr	r0, [pc, #140]	; (800036c <main+0xbc>)
 80002de:	f001 fdaf 	bl	8001e40 <siprintf>
	lcd_send_string(buf);
 80002e2:	4822      	ldr	r0, [pc, #136]	; (800036c <main+0xbc>)
 80002e4:	f7ff ffcf 	bl	8000286 <lcd_send_string>
	HAL_Delay(1000);
 80002e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ec:	f000 fa74 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x80|0x40);
 80002f0:	20c0      	movs	r0, #192	; 0xc0
 80002f2:	f7ff ff2b 	bl	800014c <lcd_send_cmd>
	lcd_send_string("LCD 20x4 DEMO");
 80002f6:	481e      	ldr	r0, [pc, #120]	; (8000370 <main+0xc0>)
 80002f8:	f7ff ffc5 	bl	8000286 <lcd_send_string>
	HAL_Delay(1000);
 80002fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000300:	f000 fa6a 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x80|0x14);
 8000304:	2094      	movs	r0, #148	; 0x94
 8000306:	f7ff ff21 	bl	800014c <lcd_send_cmd>
	lcd_send_string("BY");
 800030a:	481a      	ldr	r0, [pc, #104]	; (8000374 <main+0xc4>)
 800030c:	f7ff ffbb 	bl	8000286 <lcd_send_string>
	HAL_Delay(1000);
 8000310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000314:	f000 fa60 	bl	80007d8 <HAL_Delay>
	lcd_send_cmd (0x80|0x54);
 8000318:	20d4      	movs	r0, #212	; 0xd4
 800031a:	f7ff ff17 	bl	800014c <lcd_send_cmd>
	lcd_send_string("Tran Minh Tan");
 800031e:	4816      	ldr	r0, [pc, #88]	; (8000378 <main+0xc8>)
 8000320:	f7ff ffb1 	bl	8000286 <lcd_send_string>

	while (1)
	{
		for (int i=0; i<6; i++)
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	e009      	b.n	800033e <main+0x8e>
		{
		  lcd_send_cmd (0x1C);  // display shift right
 800032a:	201c      	movs	r0, #28
 800032c:	f7ff ff0e 	bl	800014c <lcd_send_cmd>
		  HAL_Delay(1000);
 8000330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000334:	f000 fa50 	bl	80007d8 <HAL_Delay>
		for (int i=0; i<6; i++)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3301      	adds	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b05      	cmp	r3, #5
 8000342:	ddf2      	ble.n	800032a <main+0x7a>
		}

		for (int i=0; i<6; i++)
 8000344:	2300      	movs	r3, #0
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	e009      	b.n	800035e <main+0xae>
		{
		  lcd_send_cmd (0x18);  // display shift left
 800034a:	2018      	movs	r0, #24
 800034c:	f7ff fefe 	bl	800014c <lcd_send_cmd>
		  HAL_Delay(1000);
 8000350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000354:	f000 fa40 	bl	80007d8 <HAL_Delay>
		for (int i=0; i<6; i++)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	3301      	adds	r3, #1
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b05      	cmp	r3, #5
 8000362:	ddf2      	ble.n	800034a <main+0x9a>
		for (int i=0; i<6; i++)
 8000364:	e7de      	b.n	8000324 <main+0x74>
 8000366:	bf00      	nop
 8000368:	080026b0 	.word	0x080026b0
 800036c:	200000ec 	.word	0x200000ec
 8000370:	080026c0 	.word	0x080026c0
 8000374:	080026d0 	.word	0x080026d0
 8000378:	080026d4 	.word	0x080026d4

0800037c <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b090      	sub	sp, #64	; 0x40
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0318 	add.w	r3, r7, #24
 8000386:	2228      	movs	r2, #40	; 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fd50 	bl	8001e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039e:	2301      	movs	r3, #1
 80003a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	2301      	movs	r3, #1
 80003ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b0:	2302      	movs	r3, #2
 80003b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	f107 0318 	add.w	r3, r7, #24
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 f8f5 	bl	80015b4 <HAL_RCC_OscConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003d0:	f000 f8a0 	bl	8000514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	230f      	movs	r3, #15
 80003d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d8:	2302      	movs	r3, #2
 80003da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2102      	movs	r1, #2
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fb60 	bl	8001ab4 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003fa:	f000 f88b 	bl	8000514 <Error_Handler>
  }
}
 80003fe:	bf00      	nop
 8000400:	3740      	adds	r7, #64	; 0x40
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <MX_I2C1_Init+0x50>)
 800040e:	4a13      	ldr	r2, [pc, #76]	; (800045c <MX_I2C1_Init+0x54>)
 8000410:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_I2C1_Init+0x50>)
 8000414:	4a12      	ldr	r2, [pc, #72]	; (8000460 <MX_I2C1_Init+0x58>)
 8000416:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_I2C1_Init+0x50>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_I2C1_Init+0x50>)
 8000420:	2200      	movs	r2, #0
 8000422:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_I2C1_Init+0x50>)
 8000426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800042a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <MX_I2C1_Init+0x50>)
 800042e:	2200      	movs	r2, #0
 8000430:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_I2C1_Init+0x50>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <MX_I2C1_Init+0x50>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_I2C1_Init+0x50>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <MX_I2C1_Init+0x50>)
 8000446:	f000 fc6b 	bl	8000d20 <HAL_I2C_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C1_Init+0x4c>
	{
	Error_Handler();
 8000450:	f000 f860 	bl	8000514 <Error_Handler>
	}
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000098 	.word	0x20000098
 800045c:	40005400 	.word	0x40005400
 8000460:	000186a0 	.word	0x000186a0

08000464 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b24      	ldr	r3, [pc, #144]	; (800050c <MX_GPIO_Init+0xa8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a23      	ldr	r2, [pc, #140]	; (800050c <MX_GPIO_Init+0xa8>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <MX_GPIO_Init+0xa8>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <MX_GPIO_Init+0xa8>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a1d      	ldr	r2, [pc, #116]	; (800050c <MX_GPIO_Init+0xa8>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_GPIO_Init+0xa8>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_GPIO_Init+0xa8>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a17      	ldr	r2, [pc, #92]	; (800050c <MX_GPIO_Init+0xa8>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_GPIO_Init+0xa8>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_GPIO_Init+0xa8>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a11      	ldr	r2, [pc, #68]	; (800050c <MX_GPIO_Init+0xa8>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_GPIO_Init+0xa8>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	480c      	ldr	r0, [pc, #48]	; (8000510 <MX_GPIO_Init+0xac>)
 80004e0:	f000 fc06 	bl	8000cf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	2301      	movs	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <MX_GPIO_Init+0xac>)
 80004fe:	f000 fa73 	bl	80009e8 <HAL_GPIO_Init>
}
 8000502:	bf00      	nop
 8000504:	3720      	adds	r7, #32
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	40011000 	.word	0x40011000

08000514 <Error_Handler>:

void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <HAL_MspInit+0x5c>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a14      	ldr	r2, [pc, #80]	; (800057c <HAL_MspInit+0x5c>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_MspInit+0x5c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_MspInit+0x5c>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <HAL_MspInit+0x5c>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <HAL_MspInit+0x5c>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_MspInit+0x60>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_MspInit+0x60>)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000
 8000580:	40010000 	.word	0x40010000

08000584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <HAL_I2C_MspInit+0x70>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d123      	bne.n	80005ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0308 	and.w	r3, r3, #8
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005bc:	23c0      	movs	r3, #192	; 0xc0
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005c0:	2312      	movs	r3, #18
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <HAL_I2C_MspInit+0x78>)
 80005d0:	f000 fa0a 	bl	80009e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005de:	61d3      	str	r3, [r2, #28]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_I2C_MspInit+0x74>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40005400 	.word	0x40005400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010c00 	.word	0x40010c00

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler+0x4>

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <MemManage_Handler+0x4>

08000612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <UsageFault_Handler+0x4>

0800061e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000646:	f000 f8ab 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f001 fb9e 	bl	8001dc0 <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20005000 	.word	0x20005000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	20000120 	.word	0x20000120

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ca:	e003      	b.n	80006d4 <LoopCopyDataInit>

080006cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006d2:	3104      	adds	r1, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006dc:	d3f6      	bcc.n	80006cc <CopyDataInit>
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006e0:	e002      	b.n	80006e8 <LoopFillZerobss>

080006e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006e4:	f842 3b04 	str.w	r3, [r2], #4

080006e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006ec:	d3f9      	bcc.n	80006e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ee:	f7ff ffe5 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f2:	f001 fb6b 	bl	8001dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fddb 	bl	80002b0 <main>
  bx lr
 80006fa:	4770      	bx	lr
  ldr r3, =_sidata
 80006fc:	08002748 	.word	0x08002748
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000704:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000708:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800070c:	2000011c 	.word	0x2000011c

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f92b 	bl	8000980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f808 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff fef6 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x54>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f935 	bl	80009ce <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d80a      	bhi.n	800078a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f000 f90b 	bl	8000996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <HAL_InitTick+0x5c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x1c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x20>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <HAL_IncTick+0x20>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000108 	.word	0x20000108

080007c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_GetTick+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20000108 	.word	0x20000108

080007d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e0:	f7ff fff0 	bl	80007c4 <HAL_GetTick>
 80007e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f0:	d005      	beq.n	80007fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_Delay+0x44>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fe:	bf00      	nop
 8000800:	f7ff ffe0 	bl	80007c4 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	429a      	cmp	r2, r3
 800080e:	d8f7      	bhi.n	8000800 <HAL_Delay+0x28>
  {
  }
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000008 	.word	0x20000008

08000820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db0a      	blt.n	80008ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <__NVIC_SetPriority+0x4c>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ac:	e00a      	b.n	80008c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <__NVIC_SetPriority+0x50>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	3b04      	subs	r3, #4
 80008bc:	0112      	lsls	r2, r2, #4
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	440b      	add	r3, r1
 80008c2:	761a      	strb	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f1c3 0307 	rsb	r3, r3, #7
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	bf28      	it	cs
 80008f6:	2304      	movcs	r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3304      	adds	r3, #4
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d902      	bls.n	8000908 <NVIC_EncodePriority+0x30>
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b03      	subs	r3, #3
 8000906:	e000      	b.n	800090a <NVIC_EncodePriority+0x32>
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43da      	mvns	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43d9      	mvns	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	4313      	orrs	r3, r2
         );
}
 8000932:	4618      	mov	r0, r3
 8000934:	3724      	adds	r7, #36	; 0x24
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800094c:	d301      	bcc.n	8000952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094e:	2301      	movs	r3, #1
 8000950:	e00f      	b.n	8000972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SysTick_Config+0x40>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095a:	210f      	movs	r1, #15
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f7ff ff90 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <SysTick_Config+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <SysTick_Config+0x40>)
 800096c:	2207      	movs	r2, #7
 800096e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	e000e010 	.word	0xe000e010

08000980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff49 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a8:	f7ff ff5e 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	6978      	ldr	r0, [r7, #20]
 80009b4:	f7ff ff90 	bl	80008d8 <NVIC_EncodePriority>
 80009b8:	4602      	mov	r2, r0
 80009ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff5f 	bl	8000884 <__NVIC_SetPriority>
}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffb0 	bl	800093c <SysTick_Config>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b08b      	sub	sp, #44	; 0x2c
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fa:	e169      	b.n	8000cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009fc:	2201      	movs	r2, #1
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	f040 8158 	bne.w	8000cca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	4a9a      	ldr	r2, [pc, #616]	; (8000c88 <HAL_GPIO_Init+0x2a0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d05e      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a24:	4a98      	ldr	r2, [pc, #608]	; (8000c88 <HAL_GPIO_Init+0x2a0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d875      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a2a:	4a98      	ldr	r2, [pc, #608]	; (8000c8c <HAL_GPIO_Init+0x2a4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d058      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a30:	4a96      	ldr	r2, [pc, #600]	; (8000c8c <HAL_GPIO_Init+0x2a4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d86f      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a36:	4a96      	ldr	r2, [pc, #600]	; (8000c90 <HAL_GPIO_Init+0x2a8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d052      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a3c:	4a94      	ldr	r2, [pc, #592]	; (8000c90 <HAL_GPIO_Init+0x2a8>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d869      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a42:	4a94      	ldr	r2, [pc, #592]	; (8000c94 <HAL_GPIO_Init+0x2ac>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d04c      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a48:	4a92      	ldr	r2, [pc, #584]	; (8000c94 <HAL_GPIO_Init+0x2ac>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d863      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a4e:	4a92      	ldr	r2, [pc, #584]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d046      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a54:	4a90      	ldr	r2, [pc, #576]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d85d      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a5a:	2b12      	cmp	r3, #18
 8000a5c:	d82a      	bhi.n	8000ab4 <HAL_GPIO_Init+0xcc>
 8000a5e:	2b12      	cmp	r3, #18
 8000a60:	d859      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <HAL_GPIO_Init+0x80>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000ae3 	.word	0x08000ae3
 8000a6c:	08000abd 	.word	0x08000abd
 8000a70:	08000acf 	.word	0x08000acf
 8000a74:	08000b11 	.word	0x08000b11
 8000a78:	08000b17 	.word	0x08000b17
 8000a7c:	08000b17 	.word	0x08000b17
 8000a80:	08000b17 	.word	0x08000b17
 8000a84:	08000b17 	.word	0x08000b17
 8000a88:	08000b17 	.word	0x08000b17
 8000a8c:	08000b17 	.word	0x08000b17
 8000a90:	08000b17 	.word	0x08000b17
 8000a94:	08000b17 	.word	0x08000b17
 8000a98:	08000b17 	.word	0x08000b17
 8000a9c:	08000b17 	.word	0x08000b17
 8000aa0:	08000b17 	.word	0x08000b17
 8000aa4:	08000b17 	.word	0x08000b17
 8000aa8:	08000b17 	.word	0x08000b17
 8000aac:	08000ac5 	.word	0x08000ac5
 8000ab0:	08000ad9 	.word	0x08000ad9
 8000ab4:	4a79      	ldr	r2, [pc, #484]	; (8000c9c <HAL_GPIO_Init+0x2b4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aba:	e02c      	b.n	8000b16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e029      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	623b      	str	r3, [r7, #32]
          break;
 8000acc:	e024      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	623b      	str	r3, [r7, #32]
          break;
 8000ad6:	e01f      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	330c      	adds	r3, #12
 8000ade:	623b      	str	r3, [r7, #32]
          break;
 8000ae0:	e01a      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aea:	2304      	movs	r3, #4
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e013      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d105      	bne.n	8000b04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af8:	2308      	movs	r3, #8
 8000afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	611a      	str	r2, [r3, #16]
          break;
 8000b02:	e009      	b.n	8000b18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b04:	2308      	movs	r3, #8
 8000b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	615a      	str	r2, [r3, #20]
          break;
 8000b0e:	e003      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
          break;
 8000b14:	e000      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          break;
 8000b16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	2bff      	cmp	r3, #255	; 0xff
 8000b1c:	d801      	bhi.n	8000b22 <HAL_GPIO_Init+0x13a>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	e001      	b.n	8000b26 <HAL_GPIO_Init+0x13e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3304      	adds	r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	2bff      	cmp	r3, #255	; 0xff
 8000b2c:	d802      	bhi.n	8000b34 <HAL_GPIO_Init+0x14c>
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	e002      	b.n	8000b3a <HAL_GPIO_Init+0x152>
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	3b08      	subs	r3, #8
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	210f      	movs	r1, #15
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	6a39      	ldr	r1, [r7, #32]
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 80b1 	beq.w	8000cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b68:	4b4d      	ldr	r3, [pc, #308]	; (8000ca0 <HAL_GPIO_Init+0x2b8>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ca0 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <HAL_GPIO_Init+0x2b8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b80:	4a48      	ldr	r2, [pc, #288]	; (8000ca4 <HAL_GPIO_Init+0x2bc>)
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3302      	adds	r3, #2
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	220f      	movs	r2, #15
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a40      	ldr	r2, [pc, #256]	; (8000ca8 <HAL_GPIO_Init+0x2c0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d013      	beq.n	8000bd4 <HAL_GPIO_Init+0x1ec>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a3f      	ldr	r2, [pc, #252]	; (8000cac <HAL_GPIO_Init+0x2c4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d00d      	beq.n	8000bd0 <HAL_GPIO_Init+0x1e8>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a3e      	ldr	r2, [pc, #248]	; (8000cb0 <HAL_GPIO_Init+0x2c8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d007      	beq.n	8000bcc <HAL_GPIO_Init+0x1e4>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a3d      	ldr	r2, [pc, #244]	; (8000cb4 <HAL_GPIO_Init+0x2cc>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d101      	bne.n	8000bc8 <HAL_GPIO_Init+0x1e0>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e006      	b.n	8000bd6 <HAL_GPIO_Init+0x1ee>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e004      	b.n	8000bd6 <HAL_GPIO_Init+0x1ee>
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e002      	b.n	8000bd6 <HAL_GPIO_Init+0x1ee>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <HAL_GPIO_Init+0x1ee>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd8:	f002 0203 	and.w	r2, r2, #3
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	4093      	lsls	r3, r2
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000be6:	492f      	ldr	r1, [pc, #188]	; (8000ca4 <HAL_GPIO_Init+0x2bc>)
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	3302      	adds	r3, #2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d006      	beq.n	8000c0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	492c      	ldr	r1, [pc, #176]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	600b      	str	r3, [r1, #0]
 8000c0c:	e006      	b.n	8000c1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4928      	ldr	r1, [pc, #160]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d006      	beq.n	8000c36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	4922      	ldr	r1, [pc, #136]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	604b      	str	r3, [r1, #4]
 8000c34:	e006      	b.n	8000c44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	491e      	ldr	r1, [pc, #120]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d006      	beq.n	8000c5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	4918      	ldr	r1, [pc, #96]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	608b      	str	r3, [r1, #8]
 8000c5c:	e006      	b.n	8000c6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	4914      	ldr	r1, [pc, #80]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d021      	beq.n	8000cbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60cb      	str	r3, [r1, #12]
 8000c84:	e021      	b.n	8000cca <HAL_GPIO_Init+0x2e2>
 8000c86:	bf00      	nop
 8000c88:	10320000 	.word	0x10320000
 8000c8c:	10310000 	.word	0x10310000
 8000c90:	10220000 	.word	0x10220000
 8000c94:	10210000 	.word	0x10210000
 8000c98:	10120000 	.word	0x10120000
 8000c9c:	10110000 	.word	0x10110000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40011400 	.word	0x40011400
 8000cb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_GPIO_Init+0x304>)
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4909      	ldr	r1, [pc, #36]	; (8000cec <HAL_GPIO_Init+0x304>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	3301      	adds	r3, #1
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f47f ae8e 	bne.w	80009fc <HAL_GPIO_Init+0x14>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	372c      	adds	r7, #44	; 0x2c
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	40010400 	.word	0x40010400

08000cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d00:	787b      	ldrb	r3, [r7, #1]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d0c:	e003      	b.n	8000d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d0e:	887b      	ldrh	r3, [r7, #2]
 8000d10:	041a      	lsls	r2, r3, #16
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	611a      	str	r2, [r3, #16]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e12b      	b.n	8000f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d106      	bne.n	8000d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fc1c 	bl	8000584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2224      	movs	r2, #36	; 0x24
 8000d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d84:	f000 ffea 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 8000d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	4a81      	ldr	r2, [pc, #516]	; (8000f94 <HAL_I2C_Init+0x274>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d807      	bhi.n	8000da4 <HAL_I2C_Init+0x84>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4a80      	ldr	r2, [pc, #512]	; (8000f98 <HAL_I2C_Init+0x278>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	bf94      	ite	ls
 8000d9c:	2301      	movls	r3, #1
 8000d9e:	2300      	movhi	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	e006      	b.n	8000db2 <HAL_I2C_Init+0x92>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4a7d      	ldr	r2, [pc, #500]	; (8000f9c <HAL_I2C_Init+0x27c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e0e7      	b.n	8000f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4a78      	ldr	r2, [pc, #480]	; (8000fa0 <HAL_I2C_Init+0x280>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	0c9b      	lsrs	r3, r3, #18
 8000dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a6a      	ldr	r2, [pc, #424]	; (8000f94 <HAL_I2C_Init+0x274>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d802      	bhi.n	8000df4 <HAL_I2C_Init+0xd4>
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3301      	adds	r3, #1
 8000df2:	e009      	b.n	8000e08 <HAL_I2C_Init+0xe8>
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dfa:	fb02 f303 	mul.w	r3, r2, r3
 8000dfe:	4a69      	ldr	r2, [pc, #420]	; (8000fa4 <HAL_I2C_Init+0x284>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	099b      	lsrs	r3, r3, #6
 8000e06:	3301      	adds	r3, #1
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	495c      	ldr	r1, [pc, #368]	; (8000f94 <HAL_I2C_Init+0x274>)
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d819      	bhi.n	8000e5c <HAL_I2C_Init+0x13c>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	1e59      	subs	r1, r3, #1
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e36:	1c59      	adds	r1, r3, #1
 8000e38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e3c:	400b      	ands	r3, r1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00a      	beq.n	8000e58 <HAL_I2C_Init+0x138>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	1e59      	subs	r1, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e56:	e051      	b.n	8000efc <HAL_I2C_Init+0x1dc>
 8000e58:	2304      	movs	r3, #4
 8000e5a:	e04f      	b.n	8000efc <HAL_I2C_Init+0x1dc>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d111      	bne.n	8000e88 <HAL_I2C_Init+0x168>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1e58      	subs	r0, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6859      	ldr	r1, [r3, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	440b      	add	r3, r1
 8000e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e76:	3301      	adds	r3, #1
 8000e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf0c      	ite	eq
 8000e80:	2301      	moveq	r3, #1
 8000e82:	2300      	movne	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	e012      	b.n	8000eae <HAL_I2C_Init+0x18e>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1e58      	subs	r0, r3, #1
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6859      	ldr	r1, [r3, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	0099      	lsls	r1, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_I2C_Init+0x196>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e022      	b.n	8000efc <HAL_I2C_Init+0x1dc>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10e      	bne.n	8000edc <HAL_I2C_Init+0x1bc>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	1e58      	subs	r0, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6859      	ldr	r1, [r3, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eda:	e00f      	b.n	8000efc <HAL_I2C_Init+0x1dc>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1e58      	subs	r0, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6859      	ldr	r1, [r3, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	0099      	lsls	r1, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	6809      	ldr	r1, [r1, #0]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69da      	ldr	r2, [r3, #28]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	6911      	ldr	r1, [r2, #16]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68d2      	ldr	r2, [r2, #12]
 8000f36:	4311      	orrs	r1, r2
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2220      	movs	r2, #32
 8000f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	000186a0 	.word	0x000186a0
 8000f98:	001e847f 	.word	0x001e847f
 8000f9c:	003d08ff 	.word	0x003d08ff
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	10624dd3 	.word	0x10624dd3

08000fa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	817b      	strh	r3, [r7, #10]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff fc02 	bl	80007c4 <HAL_GetTick>
 8000fc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b20      	cmp	r3, #32
 8000fcc:	f040 80e0 	bne.w	8001190 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2319      	movs	r3, #25
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4970      	ldr	r1, [pc, #448]	; (800119c <HAL_I2C_Master_Transmit+0x1f4>)
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 f964 	bl	80012a8 <I2C_WaitOnFlagUntilTimeout>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e0d3      	b.n	8001192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_I2C_Master_Transmit+0x50>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e0cc      	b.n	8001192 <HAL_I2C_Master_Transmit+0x1ea>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d007      	beq.n	800101e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0201 	orr.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800102c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2221      	movs	r2, #33	; 0x21
 8001032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2210      	movs	r2, #16
 800103a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	893a      	ldrh	r2, [r7, #8]
 800104e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001054:	b29a      	uxth	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4a50      	ldr	r2, [pc, #320]	; (80011a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001060:	8979      	ldrh	r1, [r7, #10]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	6a3a      	ldr	r2, [r7, #32]
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f89c 	bl	80011a4 <I2C_MasterRequestWrite>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e08d      	b.n	8001192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800108c:	e066      	b.n	800115c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	6a39      	ldr	r1, [r7, #32]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f9de 	bl	8001454 <I2C_WaitOnTXEFlagUntilTimeout>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00d      	beq.n	80010ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d107      	bne.n	80010b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e06b      	b.n	8001192 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d11b      	bne.n	8001130 <HAL_I2C_Master_Transmit+0x188>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d017      	beq.n	8001130 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800111a:	b29b      	uxth	r3, r3
 800111c:	3b01      	subs	r3, #1
 800111e:	b29a      	uxth	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001128:	3b01      	subs	r3, #1
 800112a:	b29a      	uxth	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	6a39      	ldr	r1, [r7, #32]
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f9ce 	bl	80014d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00d      	beq.n	800115c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	2b04      	cmp	r3, #4
 8001146:	d107      	bne.n	8001158 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001156:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e01a      	b.n	8001192 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001160:	2b00      	cmp	r3, #0
 8001162:	d194      	bne.n	800108e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2220      	movs	r2, #32
 8001178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	e000      	b.n	8001192 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001190:	2302      	movs	r3, #2
  }
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	00100002 	.word	0x00100002
 80011a0:	ffff0000 	.word	0xffff0000

080011a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	460b      	mov	r3, r1
 80011b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d006      	beq.n	80011ce <I2C_MasterRequestWrite+0x2a>
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d003      	beq.n	80011ce <I2C_MasterRequestWrite+0x2a>
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80011cc:	d108      	bne.n	80011e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e00b      	b.n	80011f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	2b12      	cmp	r3, #18
 80011e6:	d107      	bne.n	80011f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f84f 	bl	80012a8 <I2C_WaitOnFlagUntilTimeout>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00d      	beq.n	800122c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800121e:	d103      	bne.n	8001228 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e035      	b.n	8001298 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001234:	d108      	bne.n	8001248 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001244:	611a      	str	r2, [r3, #16]
 8001246:	e01b      	b.n	8001280 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	11db      	asrs	r3, r3, #7
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f003 0306 	and.w	r3, r3, #6
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f063 030f 	orn	r3, r3, #15
 8001258:	b2da      	uxtb	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	490e      	ldr	r1, [pc, #56]	; (80012a0 <I2C_MasterRequestWrite+0xfc>)
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 f875 	bl	8001356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e010      	b.n	8001298 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001276:	897b      	ldrh	r3, [r7, #10]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <I2C_MasterRequestWrite+0x100>)
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f865 	bl	8001356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	00010008 	.word	0x00010008
 80012a4:	00010002 	.word	0x00010002

080012a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012b8:	e025      	b.n	8001306 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d021      	beq.n	8001306 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012c2:	f7ff fa7f 	bl	80007c4 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d302      	bcc.n	80012d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d116      	bne.n	8001306 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2220      	movs	r2, #32
 80012e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f043 0220 	orr.w	r2, r3, #32
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e023      	b.n	800134e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10d      	bne.n	800132c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4013      	ands	r3, r2
 800131c:	b29b      	uxth	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	e00c      	b.n	8001346 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4013      	ands	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	429a      	cmp	r2, r3
 800134a:	d0b6      	beq.n	80012ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001364:	e051      	b.n	800140a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001374:	d123      	bne.n	80013be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001384:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800138e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f043 0204 	orr.w	r2, r3, #4
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e046      	b.n	800144c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d021      	beq.n	800140a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c6:	f7ff f9fd 	bl	80007c4 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d302      	bcc.n	80013dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d116      	bne.n	800140a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2220      	movs	r2, #32
 80013e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f043 0220 	orr.w	r2, r3, #32
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e020      	b.n	800144c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d10c      	bne.n	800142e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4013      	ands	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	e00b      	b.n	8001446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	43da      	mvns	r2, r3
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4013      	ands	r3, r2
 800143a:	b29b      	uxth	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	bf14      	ite	ne
 8001440:	2301      	movne	r3, #1
 8001442:	2300      	moveq	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d18d      	bne.n	8001366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001460:	e02d      	b.n	80014be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f878 	bl	8001558 <I2C_IsAcknowledgeFailed>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e02d      	b.n	80014ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d021      	beq.n	80014be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800147a:	f7ff f9a3 	bl	80007c4 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	429a      	cmp	r2, r3
 8001488:	d302      	bcc.n	8001490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d116      	bne.n	80014be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2220      	movs	r2, #32
 800149a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f043 0220 	orr.w	r2, r3, #32
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e007      	b.n	80014ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c8:	2b80      	cmp	r3, #128	; 0x80
 80014ca:	d1ca      	bne.n	8001462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014e2:	e02d      	b.n	8001540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 f837 	bl	8001558 <I2C_IsAcknowledgeFailed>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e02d      	b.n	8001550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fa:	d021      	beq.n	8001540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014fc:	f7ff f962 	bl	80007c4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	429a      	cmp	r2, r3
 800150a:	d302      	bcc.n	8001512 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d116      	bne.n	8001540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2220      	movs	r2, #32
 800151c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f043 0220 	orr.w	r2, r3, #32
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e007      	b.n	8001550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b04      	cmp	r3, #4
 800154c:	d1ca      	bne.n	80014e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156e:	d11b      	bne.n	80015a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001578:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f043 0204 	orr.w	r2, r3, #4
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e26c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8087 	beq.w	80016e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d4:	4b92      	ldr	r3, [pc, #584]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d00c      	beq.n	80015fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e0:	4b8f      	ldr	r3, [pc, #572]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d112      	bne.n	8001612 <HAL_RCC_OscConfig+0x5e>
 80015ec:	4b8c      	ldr	r3, [pc, #560]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f8:	d10b      	bne.n	8001612 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fa:	4b89      	ldr	r3, [pc, #548]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d06c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x12c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d168      	bne.n	80016e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e246      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x76>
 800161c:	4b80      	ldr	r3, [pc, #512]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a7f      	ldr	r2, [pc, #508]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e02e      	b.n	8001688 <HAL_RCC_OscConfig+0xd4>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x98>
 8001632:	4b7b      	ldr	r3, [pc, #492]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a7a      	ldr	r2, [pc, #488]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b78      	ldr	r3, [pc, #480]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a77      	ldr	r2, [pc, #476]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xd4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0xbc>
 8001656:	4b72      	ldr	r3, [pc, #456]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a71      	ldr	r2, [pc, #452]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6e      	ldr	r2, [pc, #440]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xd4>
 8001670:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a6a      	ldr	r2, [pc, #424]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b68      	ldr	r3, [pc, #416]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a67      	ldr	r2, [pc, #412]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff f898 	bl	80007c4 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff f894 	bl	80007c4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1fa      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xe4>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff f884 	bl	80007c4 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff f880 	bl	80007c4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1e6      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x10c>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d063      	beq.n	80017b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ee:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016fa:	4b49      	ldr	r3, [pc, #292]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x18c>
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x176>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1ba      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4939      	ldr	r1, [pc, #228]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_RCC_OscConfig+0x270>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff f839 	bl	80007c4 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff f835 	bl	80007c4 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e19b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4927      	ldr	r1, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_RCC_OscConfig+0x270>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff f818 	bl	80007c4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff f814 	bl	80007c4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e17a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d03a      	beq.n	8001838 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d019      	beq.n	80017fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_RCC_OscConfig+0x274>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7fe fff8 	bl	80007c4 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7fe fff4 	bl	80007c4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e15a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f000 fac4 	bl	8001d84 <RCC_Delay>
 80017fc:	e01c      	b.n	8001838 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_RCC_OscConfig+0x274>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7fe ffde 	bl	80007c4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180a:	e00f      	b.n	800182c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7fe ffda 	bl	80007c4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d908      	bls.n	800182c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e140      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	42420000 	.word	0x42420000
 8001828:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1e9      	bne.n	800180c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a6 	beq.w	8001992 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b97      	ldr	r3, [pc, #604]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10d      	bne.n	8001872 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b94      	ldr	r3, [pc, #592]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a93      	ldr	r2, [pc, #588]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b91      	ldr	r3, [pc, #580]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b8e      	ldr	r3, [pc, #568]	; (8001aac <HAL_RCC_OscConfig+0x4f8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d118      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <HAL_RCC_OscConfig+0x4f8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a8a      	ldr	r2, [pc, #552]	; (8001aac <HAL_RCC_OscConfig+0x4f8>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7fe ff9b 	bl	80007c4 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7fe ff97 	bl	80007c4 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b64      	cmp	r3, #100	; 0x64
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e0fd      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	4b81      	ldr	r3, [pc, #516]	; (8001aac <HAL_RCC_OscConfig+0x4f8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x312>
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a7a      	ldr	r2, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	e02d      	b.n	8001922 <HAL_RCC_OscConfig+0x36e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x334>
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a72      	ldr	r2, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	f023 0304 	bic.w	r3, r3, #4
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	e01c      	b.n	8001922 <HAL_RCC_OscConfig+0x36e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d10c      	bne.n	800190a <HAL_RCC_OscConfig+0x356>
 80018f0:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a69      	ldr	r2, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	e00b      	b.n	8001922 <HAL_RCC_OscConfig+0x36e>
 800190a:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a66      	ldr	r2, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a63      	ldr	r2, [pc, #396]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d015      	beq.n	8001956 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7fe ff4b 	bl	80007c4 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7fe ff47 	bl	80007c4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0ab      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001948:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0ee      	beq.n	8001932 <HAL_RCC_OscConfig+0x37e>
 8001954:	e014      	b.n	8001980 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7fe ff35 	bl	80007c4 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7fe ff31 	bl	80007c4 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e095      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ee      	bne.n	800195e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d105      	bne.n	8001992 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001986:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a47      	ldr	r2, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 800198c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8081 	beq.w	8001a9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800199c:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d061      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d146      	bne.n	8001a3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_OscConfig+0x4fc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7fe ff05 	bl	80007c4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7fe ff01 	bl	80007c4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e067      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d108      	bne.n	80019f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019e6:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	492d      	ldr	r1, [pc, #180]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a19      	ldr	r1, [r3, #32]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	4927      	ldr	r1, [pc, #156]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x4fc>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7fe fed5 	bl	80007c4 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7fe fed1 	bl	80007c4 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e037      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x46a>
 8001a3c:	e02f      	b.n	8001a9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_RCC_OscConfig+0x4fc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe febe 	bl	80007c4 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7fe feba 	bl	80007c4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e020      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x498>
 8001a6a:	e018      	b.n	8001a9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e013      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	42420060 	.word	0x42420060

08001ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0d0      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d910      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4965      	ldr	r1, [pc, #404]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a58      	ldr	r2, [pc, #352]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	494d      	ldr	r1, [pc, #308]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d040      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d115      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e073      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06b      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f023 0203 	bic.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4936      	ldr	r1, [pc, #216]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba4:	f7fe fe0e 	bl	80007c4 <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7fe fe0a 	bl	80007c4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e053      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 020c 	and.w	r2, r3, #12
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1eb      	bne.n	8001bac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d210      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4922      	ldr	r1, [pc, #136]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e032      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4916      	ldr	r1, [pc, #88]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c42:	f000 f821 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490a      	ldr	r1, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1cc>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1d0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fd6c 	bl	8000740 <HAL_InitTick>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	080026f4 	.word	0x080026f4
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	b490      	push	{r4, r7}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c90:	1d3c      	adds	r4, r7, #4
 8001c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c98:	f240 2301 	movw	r3, #513	; 0x201
 8001c9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x46>
 8001cc6:	e02d      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cca:	623b      	str	r3, [r7, #32]
      break;
 8001ccc:	e02d      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	0c9b      	lsrs	r3, r3, #18
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cda:	4413      	add	r3, r2
 8001cdc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ce0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	0c5b      	lsrs	r3, r3, #17
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d06:	fb02 f203 	mul.w	r2, r2, r3
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e004      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	623b      	str	r3, [r7, #32]
      break;
 8001d22:	e002      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d26:	623b      	str	r3, [r7, #32]
      break;
 8001d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3728      	adds	r7, #40	; 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc90      	pop	{r4, r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	080026e4 	.word	0x080026e4
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	007a1200 	.word	0x007a1200
 8001d44:	003d0900 	.word	0x003d0900

08001d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b02      	ldr	r3, [pc, #8]	; (8001d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	20000000 	.word	0x20000000

08001d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d60:	f7ff fff2 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4903      	ldr	r1, [pc, #12]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08002704 	.word	0x08002704

08001d84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <RCC_Delay+0x34>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <RCC_Delay+0x38>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0a5b      	lsrs	r3, r3, #9
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001da0:	bf00      	nop
  }
  while (Delay --);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1e5a      	subs	r2, r3, #1
 8001da6:	60fa      	str	r2, [r7, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f9      	bne.n	8001da0 <RCC_Delay+0x1c>
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	10624dd3 	.word	0x10624dd3

08001dc0 <__errno>:
 8001dc0:	4b01      	ldr	r3, [pc, #4]	; (8001dc8 <__errno+0x8>)
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	2000000c 	.word	0x2000000c

08001dcc <__libc_init_array>:
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	2600      	movs	r6, #0
 8001dd0:	4d0c      	ldr	r5, [pc, #48]	; (8001e04 <__libc_init_array+0x38>)
 8001dd2:	4c0d      	ldr	r4, [pc, #52]	; (8001e08 <__libc_init_array+0x3c>)
 8001dd4:	1b64      	subs	r4, r4, r5
 8001dd6:	10a4      	asrs	r4, r4, #2
 8001dd8:	42a6      	cmp	r6, r4
 8001dda:	d109      	bne.n	8001df0 <__libc_init_array+0x24>
 8001ddc:	f000 fc5c 	bl	8002698 <_init>
 8001de0:	2600      	movs	r6, #0
 8001de2:	4d0a      	ldr	r5, [pc, #40]	; (8001e0c <__libc_init_array+0x40>)
 8001de4:	4c0a      	ldr	r4, [pc, #40]	; (8001e10 <__libc_init_array+0x44>)
 8001de6:	1b64      	subs	r4, r4, r5
 8001de8:	10a4      	asrs	r4, r4, #2
 8001dea:	42a6      	cmp	r6, r4
 8001dec:	d105      	bne.n	8001dfa <__libc_init_array+0x2e>
 8001dee:	bd70      	pop	{r4, r5, r6, pc}
 8001df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001df4:	4798      	blx	r3
 8001df6:	3601      	adds	r6, #1
 8001df8:	e7ee      	b.n	8001dd8 <__libc_init_array+0xc>
 8001dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dfe:	4798      	blx	r3
 8001e00:	3601      	adds	r6, #1
 8001e02:	e7f2      	b.n	8001dea <__libc_init_array+0x1e>
 8001e04:	08002740 	.word	0x08002740
 8001e08:	08002740 	.word	0x08002740
 8001e0c:	08002740 	.word	0x08002740
 8001e10:	08002744 	.word	0x08002744

08001e14 <memcpy>:
 8001e14:	440a      	add	r2, r1
 8001e16:	4291      	cmp	r1, r2
 8001e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8001e1c:	d100      	bne.n	8001e20 <memcpy+0xc>
 8001e1e:	4770      	bx	lr
 8001e20:	b510      	push	{r4, lr}
 8001e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e26:	4291      	cmp	r1, r2
 8001e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e2c:	d1f9      	bne.n	8001e22 <memcpy+0xe>
 8001e2e:	bd10      	pop	{r4, pc}

08001e30 <memset>:
 8001e30:	4603      	mov	r3, r0
 8001e32:	4402      	add	r2, r0
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d100      	bne.n	8001e3a <memset+0xa>
 8001e38:	4770      	bx	lr
 8001e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e3e:	e7f9      	b.n	8001e34 <memset+0x4>

08001e40 <siprintf>:
 8001e40:	b40e      	push	{r1, r2, r3}
 8001e42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e46:	b500      	push	{lr}
 8001e48:	b09c      	sub	sp, #112	; 0x70
 8001e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8001e4c:	9002      	str	r0, [sp, #8]
 8001e4e:	9006      	str	r0, [sp, #24]
 8001e50:	9107      	str	r1, [sp, #28]
 8001e52:	9104      	str	r1, [sp, #16]
 8001e54:	4808      	ldr	r0, [pc, #32]	; (8001e78 <siprintf+0x38>)
 8001e56:	4909      	ldr	r1, [pc, #36]	; (8001e7c <siprintf+0x3c>)
 8001e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e5c:	9105      	str	r1, [sp, #20]
 8001e5e:	6800      	ldr	r0, [r0, #0]
 8001e60:	a902      	add	r1, sp, #8
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	f000 f868 	bl	8001f38 <_svfiprintf_r>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	9b02      	ldr	r3, [sp, #8]
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	b01c      	add	sp, #112	; 0x70
 8001e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e74:	b003      	add	sp, #12
 8001e76:	4770      	bx	lr
 8001e78:	2000000c 	.word	0x2000000c
 8001e7c:	ffff0208 	.word	0xffff0208

08001e80 <__ssputs_r>:
 8001e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e84:	688e      	ldr	r6, [r1, #8]
 8001e86:	4682      	mov	sl, r0
 8001e88:	429e      	cmp	r6, r3
 8001e8a:	460c      	mov	r4, r1
 8001e8c:	4690      	mov	r8, r2
 8001e8e:	461f      	mov	r7, r3
 8001e90:	d838      	bhi.n	8001f04 <__ssputs_r+0x84>
 8001e92:	898a      	ldrh	r2, [r1, #12]
 8001e94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e98:	d032      	beq.n	8001f00 <__ssputs_r+0x80>
 8001e9a:	6825      	ldr	r5, [r4, #0]
 8001e9c:	6909      	ldr	r1, [r1, #16]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	eba5 0901 	sub.w	r9, r5, r1
 8001ea4:	6965      	ldr	r5, [r4, #20]
 8001ea6:	444b      	add	r3, r9
 8001ea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001eac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001eb0:	106d      	asrs	r5, r5, #1
 8001eb2:	429d      	cmp	r5, r3
 8001eb4:	bf38      	it	cc
 8001eb6:	461d      	movcc	r5, r3
 8001eb8:	0553      	lsls	r3, r2, #21
 8001eba:	d531      	bpl.n	8001f20 <__ssputs_r+0xa0>
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f000 fb45 	bl	800254c <_malloc_r>
 8001ec2:	4606      	mov	r6, r0
 8001ec4:	b950      	cbnz	r0, 8001edc <__ssputs_r+0x5c>
 8001ec6:	230c      	movs	r3, #12
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f8ca 3000 	str.w	r3, [sl]
 8001ed0:	89a3      	ldrh	r3, [r4, #12]
 8001ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed6:	81a3      	strh	r3, [r4, #12]
 8001ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001edc:	464a      	mov	r2, r9
 8001ede:	6921      	ldr	r1, [r4, #16]
 8001ee0:	f7ff ff98 	bl	8001e14 <memcpy>
 8001ee4:	89a3      	ldrh	r3, [r4, #12]
 8001ee6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eee:	81a3      	strh	r3, [r4, #12]
 8001ef0:	6126      	str	r6, [r4, #16]
 8001ef2:	444e      	add	r6, r9
 8001ef4:	6026      	str	r6, [r4, #0]
 8001ef6:	463e      	mov	r6, r7
 8001ef8:	6165      	str	r5, [r4, #20]
 8001efa:	eba5 0509 	sub.w	r5, r5, r9
 8001efe:	60a5      	str	r5, [r4, #8]
 8001f00:	42be      	cmp	r6, r7
 8001f02:	d900      	bls.n	8001f06 <__ssputs_r+0x86>
 8001f04:	463e      	mov	r6, r7
 8001f06:	4632      	mov	r2, r6
 8001f08:	4641      	mov	r1, r8
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	f000 fab8 	bl	8002480 <memmove>
 8001f10:	68a3      	ldr	r3, [r4, #8]
 8001f12:	6822      	ldr	r2, [r4, #0]
 8001f14:	1b9b      	subs	r3, r3, r6
 8001f16:	4432      	add	r2, r6
 8001f18:	2000      	movs	r0, #0
 8001f1a:	60a3      	str	r3, [r4, #8]
 8001f1c:	6022      	str	r2, [r4, #0]
 8001f1e:	e7db      	b.n	8001ed8 <__ssputs_r+0x58>
 8001f20:	462a      	mov	r2, r5
 8001f22:	f000 fb6d 	bl	8002600 <_realloc_r>
 8001f26:	4606      	mov	r6, r0
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d1e1      	bne.n	8001ef0 <__ssputs_r+0x70>
 8001f2c:	4650      	mov	r0, sl
 8001f2e:	6921      	ldr	r1, [r4, #16]
 8001f30:	f000 fac0 	bl	80024b4 <_free_r>
 8001f34:	e7c7      	b.n	8001ec6 <__ssputs_r+0x46>
	...

08001f38 <_svfiprintf_r>:
 8001f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f3c:	4698      	mov	r8, r3
 8001f3e:	898b      	ldrh	r3, [r1, #12]
 8001f40:	4607      	mov	r7, r0
 8001f42:	061b      	lsls	r3, r3, #24
 8001f44:	460d      	mov	r5, r1
 8001f46:	4614      	mov	r4, r2
 8001f48:	b09d      	sub	sp, #116	; 0x74
 8001f4a:	d50e      	bpl.n	8001f6a <_svfiprintf_r+0x32>
 8001f4c:	690b      	ldr	r3, [r1, #16]
 8001f4e:	b963      	cbnz	r3, 8001f6a <_svfiprintf_r+0x32>
 8001f50:	2140      	movs	r1, #64	; 0x40
 8001f52:	f000 fafb 	bl	800254c <_malloc_r>
 8001f56:	6028      	str	r0, [r5, #0]
 8001f58:	6128      	str	r0, [r5, #16]
 8001f5a:	b920      	cbnz	r0, 8001f66 <_svfiprintf_r+0x2e>
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	e0d1      	b.n	800210a <_svfiprintf_r+0x1d2>
 8001f66:	2340      	movs	r3, #64	; 0x40
 8001f68:	616b      	str	r3, [r5, #20]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f6e:	2320      	movs	r3, #32
 8001f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f74:	2330      	movs	r3, #48	; 0x30
 8001f76:	f04f 0901 	mov.w	r9, #1
 8001f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002124 <_svfiprintf_r+0x1ec>
 8001f82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f86:	4623      	mov	r3, r4
 8001f88:	469a      	mov	sl, r3
 8001f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f8e:	b10a      	cbz	r2, 8001f94 <_svfiprintf_r+0x5c>
 8001f90:	2a25      	cmp	r2, #37	; 0x25
 8001f92:	d1f9      	bne.n	8001f88 <_svfiprintf_r+0x50>
 8001f94:	ebba 0b04 	subs.w	fp, sl, r4
 8001f98:	d00b      	beq.n	8001fb2 <_svfiprintf_r+0x7a>
 8001f9a:	465b      	mov	r3, fp
 8001f9c:	4622      	mov	r2, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	4638      	mov	r0, r7
 8001fa2:	f7ff ff6d 	bl	8001e80 <__ssputs_r>
 8001fa6:	3001      	adds	r0, #1
 8001fa8:	f000 80aa 	beq.w	8002100 <_svfiprintf_r+0x1c8>
 8001fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fae:	445a      	add	r2, fp
 8001fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8001fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80a2 	beq.w	8002100 <_svfiprintf_r+0x1c8>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fc6:	f10a 0a01 	add.w	sl, sl, #1
 8001fca:	9304      	str	r3, [sp, #16]
 8001fcc:	9307      	str	r3, [sp, #28]
 8001fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8001fd4:	4654      	mov	r4, sl
 8001fd6:	2205      	movs	r2, #5
 8001fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fdc:	4851      	ldr	r0, [pc, #324]	; (8002124 <_svfiprintf_r+0x1ec>)
 8001fde:	f000 fa41 	bl	8002464 <memchr>
 8001fe2:	9a04      	ldr	r2, [sp, #16]
 8001fe4:	b9d8      	cbnz	r0, 800201e <_svfiprintf_r+0xe6>
 8001fe6:	06d0      	lsls	r0, r2, #27
 8001fe8:	bf44      	itt	mi
 8001fea:	2320      	movmi	r3, #32
 8001fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ff0:	0711      	lsls	r1, r2, #28
 8001ff2:	bf44      	itt	mi
 8001ff4:	232b      	movmi	r3, #43	; 0x2b
 8001ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8001ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8002000:	d015      	beq.n	800202e <_svfiprintf_r+0xf6>
 8002002:	4654      	mov	r4, sl
 8002004:	2000      	movs	r0, #0
 8002006:	f04f 0c0a 	mov.w	ip, #10
 800200a:	9a07      	ldr	r2, [sp, #28]
 800200c:	4621      	mov	r1, r4
 800200e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002012:	3b30      	subs	r3, #48	; 0x30
 8002014:	2b09      	cmp	r3, #9
 8002016:	d94e      	bls.n	80020b6 <_svfiprintf_r+0x17e>
 8002018:	b1b0      	cbz	r0, 8002048 <_svfiprintf_r+0x110>
 800201a:	9207      	str	r2, [sp, #28]
 800201c:	e014      	b.n	8002048 <_svfiprintf_r+0x110>
 800201e:	eba0 0308 	sub.w	r3, r0, r8
 8002022:	fa09 f303 	lsl.w	r3, r9, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	46a2      	mov	sl, r4
 800202a:	9304      	str	r3, [sp, #16]
 800202c:	e7d2      	b.n	8001fd4 <_svfiprintf_r+0x9c>
 800202e:	9b03      	ldr	r3, [sp, #12]
 8002030:	1d19      	adds	r1, r3, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	9103      	str	r1, [sp, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	bfbb      	ittet	lt
 800203a:	425b      	neglt	r3, r3
 800203c:	f042 0202 	orrlt.w	r2, r2, #2
 8002040:	9307      	strge	r3, [sp, #28]
 8002042:	9307      	strlt	r3, [sp, #28]
 8002044:	bfb8      	it	lt
 8002046:	9204      	strlt	r2, [sp, #16]
 8002048:	7823      	ldrb	r3, [r4, #0]
 800204a:	2b2e      	cmp	r3, #46	; 0x2e
 800204c:	d10c      	bne.n	8002068 <_svfiprintf_r+0x130>
 800204e:	7863      	ldrb	r3, [r4, #1]
 8002050:	2b2a      	cmp	r3, #42	; 0x2a
 8002052:	d135      	bne.n	80020c0 <_svfiprintf_r+0x188>
 8002054:	9b03      	ldr	r3, [sp, #12]
 8002056:	3402      	adds	r4, #2
 8002058:	1d1a      	adds	r2, r3, #4
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	9203      	str	r2, [sp, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	bfb8      	it	lt
 8002062:	f04f 33ff 	movlt.w	r3, #4294967295
 8002066:	9305      	str	r3, [sp, #20]
 8002068:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002134 <_svfiprintf_r+0x1fc>
 800206c:	2203      	movs	r2, #3
 800206e:	4650      	mov	r0, sl
 8002070:	7821      	ldrb	r1, [r4, #0]
 8002072:	f000 f9f7 	bl	8002464 <memchr>
 8002076:	b140      	cbz	r0, 800208a <_svfiprintf_r+0x152>
 8002078:	2340      	movs	r3, #64	; 0x40
 800207a:	eba0 000a 	sub.w	r0, r0, sl
 800207e:	fa03 f000 	lsl.w	r0, r3, r0
 8002082:	9b04      	ldr	r3, [sp, #16]
 8002084:	3401      	adds	r4, #1
 8002086:	4303      	orrs	r3, r0
 8002088:	9304      	str	r3, [sp, #16]
 800208a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800208e:	2206      	movs	r2, #6
 8002090:	4825      	ldr	r0, [pc, #148]	; (8002128 <_svfiprintf_r+0x1f0>)
 8002092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002096:	f000 f9e5 	bl	8002464 <memchr>
 800209a:	2800      	cmp	r0, #0
 800209c:	d038      	beq.n	8002110 <_svfiprintf_r+0x1d8>
 800209e:	4b23      	ldr	r3, [pc, #140]	; (800212c <_svfiprintf_r+0x1f4>)
 80020a0:	bb1b      	cbnz	r3, 80020ea <_svfiprintf_r+0x1b2>
 80020a2:	9b03      	ldr	r3, [sp, #12]
 80020a4:	3307      	adds	r3, #7
 80020a6:	f023 0307 	bic.w	r3, r3, #7
 80020aa:	3308      	adds	r3, #8
 80020ac:	9303      	str	r3, [sp, #12]
 80020ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020b0:	4433      	add	r3, r6
 80020b2:	9309      	str	r3, [sp, #36]	; 0x24
 80020b4:	e767      	b.n	8001f86 <_svfiprintf_r+0x4e>
 80020b6:	460c      	mov	r4, r1
 80020b8:	2001      	movs	r0, #1
 80020ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80020be:	e7a5      	b.n	800200c <_svfiprintf_r+0xd4>
 80020c0:	2300      	movs	r3, #0
 80020c2:	f04f 0c0a 	mov.w	ip, #10
 80020c6:	4619      	mov	r1, r3
 80020c8:	3401      	adds	r4, #1
 80020ca:	9305      	str	r3, [sp, #20]
 80020cc:	4620      	mov	r0, r4
 80020ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020d2:	3a30      	subs	r2, #48	; 0x30
 80020d4:	2a09      	cmp	r2, #9
 80020d6:	d903      	bls.n	80020e0 <_svfiprintf_r+0x1a8>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0c5      	beq.n	8002068 <_svfiprintf_r+0x130>
 80020dc:	9105      	str	r1, [sp, #20]
 80020de:	e7c3      	b.n	8002068 <_svfiprintf_r+0x130>
 80020e0:	4604      	mov	r4, r0
 80020e2:	2301      	movs	r3, #1
 80020e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80020e8:	e7f0      	b.n	80020cc <_svfiprintf_r+0x194>
 80020ea:	ab03      	add	r3, sp, #12
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	462a      	mov	r2, r5
 80020f0:	4638      	mov	r0, r7
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <_svfiprintf_r+0x1f8>)
 80020f4:	a904      	add	r1, sp, #16
 80020f6:	f3af 8000 	nop.w
 80020fa:	1c42      	adds	r2, r0, #1
 80020fc:	4606      	mov	r6, r0
 80020fe:	d1d6      	bne.n	80020ae <_svfiprintf_r+0x176>
 8002100:	89ab      	ldrh	r3, [r5, #12]
 8002102:	065b      	lsls	r3, r3, #25
 8002104:	f53f af2c 	bmi.w	8001f60 <_svfiprintf_r+0x28>
 8002108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800210a:	b01d      	add	sp, #116	; 0x74
 800210c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002110:	ab03      	add	r3, sp, #12
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	462a      	mov	r2, r5
 8002116:	4638      	mov	r0, r7
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <_svfiprintf_r+0x1f8>)
 800211a:	a904      	add	r1, sp, #16
 800211c:	f000 f87c 	bl	8002218 <_printf_i>
 8002120:	e7eb      	b.n	80020fa <_svfiprintf_r+0x1c2>
 8002122:	bf00      	nop
 8002124:	0800270c 	.word	0x0800270c
 8002128:	08002716 	.word	0x08002716
 800212c:	00000000 	.word	0x00000000
 8002130:	08001e81 	.word	0x08001e81
 8002134:	08002712 	.word	0x08002712

08002138 <_printf_common>:
 8002138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800213c:	4616      	mov	r6, r2
 800213e:	4699      	mov	r9, r3
 8002140:	688a      	ldr	r2, [r1, #8]
 8002142:	690b      	ldr	r3, [r1, #16]
 8002144:	4607      	mov	r7, r0
 8002146:	4293      	cmp	r3, r2
 8002148:	bfb8      	it	lt
 800214a:	4613      	movlt	r3, r2
 800214c:	6033      	str	r3, [r6, #0]
 800214e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002152:	460c      	mov	r4, r1
 8002154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002158:	b10a      	cbz	r2, 800215e <_printf_common+0x26>
 800215a:	3301      	adds	r3, #1
 800215c:	6033      	str	r3, [r6, #0]
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	0699      	lsls	r1, r3, #26
 8002162:	bf42      	ittt	mi
 8002164:	6833      	ldrmi	r3, [r6, #0]
 8002166:	3302      	addmi	r3, #2
 8002168:	6033      	strmi	r3, [r6, #0]
 800216a:	6825      	ldr	r5, [r4, #0]
 800216c:	f015 0506 	ands.w	r5, r5, #6
 8002170:	d106      	bne.n	8002180 <_printf_common+0x48>
 8002172:	f104 0a19 	add.w	sl, r4, #25
 8002176:	68e3      	ldr	r3, [r4, #12]
 8002178:	6832      	ldr	r2, [r6, #0]
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	42ab      	cmp	r3, r5
 800217e:	dc28      	bgt.n	80021d2 <_printf_common+0x9a>
 8002180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002184:	1e13      	subs	r3, r2, #0
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	bf18      	it	ne
 800218a:	2301      	movne	r3, #1
 800218c:	0692      	lsls	r2, r2, #26
 800218e:	d42d      	bmi.n	80021ec <_printf_common+0xb4>
 8002190:	4649      	mov	r1, r9
 8002192:	4638      	mov	r0, r7
 8002194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002198:	47c0      	blx	r8
 800219a:	3001      	adds	r0, #1
 800219c:	d020      	beq.n	80021e0 <_printf_common+0xa8>
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	68e5      	ldr	r5, [r4, #12]
 80021a2:	f003 0306 	and.w	r3, r3, #6
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf18      	it	ne
 80021aa:	2500      	movne	r5, #0
 80021ac:	6832      	ldr	r2, [r6, #0]
 80021ae:	f04f 0600 	mov.w	r6, #0
 80021b2:	68a3      	ldr	r3, [r4, #8]
 80021b4:	bf08      	it	eq
 80021b6:	1aad      	subeq	r5, r5, r2
 80021b8:	6922      	ldr	r2, [r4, #16]
 80021ba:	bf08      	it	eq
 80021bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bfc4      	itt	gt
 80021c4:	1a9b      	subgt	r3, r3, r2
 80021c6:	18ed      	addgt	r5, r5, r3
 80021c8:	341a      	adds	r4, #26
 80021ca:	42b5      	cmp	r5, r6
 80021cc:	d11a      	bne.n	8002204 <_printf_common+0xcc>
 80021ce:	2000      	movs	r0, #0
 80021d0:	e008      	b.n	80021e4 <_printf_common+0xac>
 80021d2:	2301      	movs	r3, #1
 80021d4:	4652      	mov	r2, sl
 80021d6:	4649      	mov	r1, r9
 80021d8:	4638      	mov	r0, r7
 80021da:	47c0      	blx	r8
 80021dc:	3001      	adds	r0, #1
 80021de:	d103      	bne.n	80021e8 <_printf_common+0xb0>
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021e8:	3501      	adds	r5, #1
 80021ea:	e7c4      	b.n	8002176 <_printf_common+0x3e>
 80021ec:	2030      	movs	r0, #48	; 0x30
 80021ee:	18e1      	adds	r1, r4, r3
 80021f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021fa:	4422      	add	r2, r4
 80021fc:	3302      	adds	r3, #2
 80021fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002202:	e7c5      	b.n	8002190 <_printf_common+0x58>
 8002204:	2301      	movs	r3, #1
 8002206:	4622      	mov	r2, r4
 8002208:	4649      	mov	r1, r9
 800220a:	4638      	mov	r0, r7
 800220c:	47c0      	blx	r8
 800220e:	3001      	adds	r0, #1
 8002210:	d0e6      	beq.n	80021e0 <_printf_common+0xa8>
 8002212:	3601      	adds	r6, #1
 8002214:	e7d9      	b.n	80021ca <_printf_common+0x92>
	...

08002218 <_printf_i>:
 8002218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800221c:	460c      	mov	r4, r1
 800221e:	7e27      	ldrb	r7, [r4, #24]
 8002220:	4691      	mov	r9, r2
 8002222:	2f78      	cmp	r7, #120	; 0x78
 8002224:	4680      	mov	r8, r0
 8002226:	469a      	mov	sl, r3
 8002228:	990c      	ldr	r1, [sp, #48]	; 0x30
 800222a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800222e:	d807      	bhi.n	8002240 <_printf_i+0x28>
 8002230:	2f62      	cmp	r7, #98	; 0x62
 8002232:	d80a      	bhi.n	800224a <_printf_i+0x32>
 8002234:	2f00      	cmp	r7, #0
 8002236:	f000 80d9 	beq.w	80023ec <_printf_i+0x1d4>
 800223a:	2f58      	cmp	r7, #88	; 0x58
 800223c:	f000 80a4 	beq.w	8002388 <_printf_i+0x170>
 8002240:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002248:	e03a      	b.n	80022c0 <_printf_i+0xa8>
 800224a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800224e:	2b15      	cmp	r3, #21
 8002250:	d8f6      	bhi.n	8002240 <_printf_i+0x28>
 8002252:	a001      	add	r0, pc, #4	; (adr r0, 8002258 <_printf_i+0x40>)
 8002254:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002258:	080022b1 	.word	0x080022b1
 800225c:	080022c5 	.word	0x080022c5
 8002260:	08002241 	.word	0x08002241
 8002264:	08002241 	.word	0x08002241
 8002268:	08002241 	.word	0x08002241
 800226c:	08002241 	.word	0x08002241
 8002270:	080022c5 	.word	0x080022c5
 8002274:	08002241 	.word	0x08002241
 8002278:	08002241 	.word	0x08002241
 800227c:	08002241 	.word	0x08002241
 8002280:	08002241 	.word	0x08002241
 8002284:	080023d3 	.word	0x080023d3
 8002288:	080022f5 	.word	0x080022f5
 800228c:	080023b5 	.word	0x080023b5
 8002290:	08002241 	.word	0x08002241
 8002294:	08002241 	.word	0x08002241
 8002298:	080023f5 	.word	0x080023f5
 800229c:	08002241 	.word	0x08002241
 80022a0:	080022f5 	.word	0x080022f5
 80022a4:	08002241 	.word	0x08002241
 80022a8:	08002241 	.word	0x08002241
 80022ac:	080023bd 	.word	0x080023bd
 80022b0:	680b      	ldr	r3, [r1, #0]
 80022b2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80022b6:	1d1a      	adds	r2, r3, #4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	600a      	str	r2, [r1, #0]
 80022bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0a4      	b.n	800240e <_printf_i+0x1f6>
 80022c4:	6825      	ldr	r5, [r4, #0]
 80022c6:	6808      	ldr	r0, [r1, #0]
 80022c8:	062e      	lsls	r6, r5, #24
 80022ca:	f100 0304 	add.w	r3, r0, #4
 80022ce:	d50a      	bpl.n	80022e6 <_printf_i+0xce>
 80022d0:	6805      	ldr	r5, [r0, #0]
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	2d00      	cmp	r5, #0
 80022d6:	da03      	bge.n	80022e0 <_printf_i+0xc8>
 80022d8:	232d      	movs	r3, #45	; 0x2d
 80022da:	426d      	negs	r5, r5
 80022dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022e0:	230a      	movs	r3, #10
 80022e2:	485e      	ldr	r0, [pc, #376]	; (800245c <_printf_i+0x244>)
 80022e4:	e019      	b.n	800231a <_printf_i+0x102>
 80022e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80022ea:	6805      	ldr	r5, [r0, #0]
 80022ec:	600b      	str	r3, [r1, #0]
 80022ee:	bf18      	it	ne
 80022f0:	b22d      	sxthne	r5, r5
 80022f2:	e7ef      	b.n	80022d4 <_printf_i+0xbc>
 80022f4:	680b      	ldr	r3, [r1, #0]
 80022f6:	6825      	ldr	r5, [r4, #0]
 80022f8:	1d18      	adds	r0, r3, #4
 80022fa:	6008      	str	r0, [r1, #0]
 80022fc:	0628      	lsls	r0, r5, #24
 80022fe:	d501      	bpl.n	8002304 <_printf_i+0xec>
 8002300:	681d      	ldr	r5, [r3, #0]
 8002302:	e002      	b.n	800230a <_printf_i+0xf2>
 8002304:	0669      	lsls	r1, r5, #25
 8002306:	d5fb      	bpl.n	8002300 <_printf_i+0xe8>
 8002308:	881d      	ldrh	r5, [r3, #0]
 800230a:	2f6f      	cmp	r7, #111	; 0x6f
 800230c:	bf0c      	ite	eq
 800230e:	2308      	moveq	r3, #8
 8002310:	230a      	movne	r3, #10
 8002312:	4852      	ldr	r0, [pc, #328]	; (800245c <_printf_i+0x244>)
 8002314:	2100      	movs	r1, #0
 8002316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800231a:	6866      	ldr	r6, [r4, #4]
 800231c:	2e00      	cmp	r6, #0
 800231e:	bfa8      	it	ge
 8002320:	6821      	ldrge	r1, [r4, #0]
 8002322:	60a6      	str	r6, [r4, #8]
 8002324:	bfa4      	itt	ge
 8002326:	f021 0104 	bicge.w	r1, r1, #4
 800232a:	6021      	strge	r1, [r4, #0]
 800232c:	b90d      	cbnz	r5, 8002332 <_printf_i+0x11a>
 800232e:	2e00      	cmp	r6, #0
 8002330:	d04d      	beq.n	80023ce <_printf_i+0x1b6>
 8002332:	4616      	mov	r6, r2
 8002334:	fbb5 f1f3 	udiv	r1, r5, r3
 8002338:	fb03 5711 	mls	r7, r3, r1, r5
 800233c:	5dc7      	ldrb	r7, [r0, r7]
 800233e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002342:	462f      	mov	r7, r5
 8002344:	42bb      	cmp	r3, r7
 8002346:	460d      	mov	r5, r1
 8002348:	d9f4      	bls.n	8002334 <_printf_i+0x11c>
 800234a:	2b08      	cmp	r3, #8
 800234c:	d10b      	bne.n	8002366 <_printf_i+0x14e>
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	07df      	lsls	r7, r3, #31
 8002352:	d508      	bpl.n	8002366 <_printf_i+0x14e>
 8002354:	6923      	ldr	r3, [r4, #16]
 8002356:	6861      	ldr	r1, [r4, #4]
 8002358:	4299      	cmp	r1, r3
 800235a:	bfde      	ittt	le
 800235c:	2330      	movle	r3, #48	; 0x30
 800235e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002362:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002366:	1b92      	subs	r2, r2, r6
 8002368:	6122      	str	r2, [r4, #16]
 800236a:	464b      	mov	r3, r9
 800236c:	4621      	mov	r1, r4
 800236e:	4640      	mov	r0, r8
 8002370:	f8cd a000 	str.w	sl, [sp]
 8002374:	aa03      	add	r2, sp, #12
 8002376:	f7ff fedf 	bl	8002138 <_printf_common>
 800237a:	3001      	adds	r0, #1
 800237c:	d14c      	bne.n	8002418 <_printf_i+0x200>
 800237e:	f04f 30ff 	mov.w	r0, #4294967295
 8002382:	b004      	add	sp, #16
 8002384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002388:	4834      	ldr	r0, [pc, #208]	; (800245c <_printf_i+0x244>)
 800238a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800238e:	680e      	ldr	r6, [r1, #0]
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	f856 5b04 	ldr.w	r5, [r6], #4
 8002396:	061f      	lsls	r7, r3, #24
 8002398:	600e      	str	r6, [r1, #0]
 800239a:	d514      	bpl.n	80023c6 <_printf_i+0x1ae>
 800239c:	07d9      	lsls	r1, r3, #31
 800239e:	bf44      	itt	mi
 80023a0:	f043 0320 	orrmi.w	r3, r3, #32
 80023a4:	6023      	strmi	r3, [r4, #0]
 80023a6:	b91d      	cbnz	r5, 80023b0 <_printf_i+0x198>
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	f023 0320 	bic.w	r3, r3, #32
 80023ae:	6023      	str	r3, [r4, #0]
 80023b0:	2310      	movs	r3, #16
 80023b2:	e7af      	b.n	8002314 <_printf_i+0xfc>
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	f043 0320 	orr.w	r3, r3, #32
 80023ba:	6023      	str	r3, [r4, #0]
 80023bc:	2378      	movs	r3, #120	; 0x78
 80023be:	4828      	ldr	r0, [pc, #160]	; (8002460 <_printf_i+0x248>)
 80023c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023c4:	e7e3      	b.n	800238e <_printf_i+0x176>
 80023c6:	065e      	lsls	r6, r3, #25
 80023c8:	bf48      	it	mi
 80023ca:	b2ad      	uxthmi	r5, r5
 80023cc:	e7e6      	b.n	800239c <_printf_i+0x184>
 80023ce:	4616      	mov	r6, r2
 80023d0:	e7bb      	b.n	800234a <_printf_i+0x132>
 80023d2:	680b      	ldr	r3, [r1, #0]
 80023d4:	6826      	ldr	r6, [r4, #0]
 80023d6:	1d1d      	adds	r5, r3, #4
 80023d8:	6960      	ldr	r0, [r4, #20]
 80023da:	600d      	str	r5, [r1, #0]
 80023dc:	0635      	lsls	r5, r6, #24
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	d501      	bpl.n	80023e6 <_printf_i+0x1ce>
 80023e2:	6018      	str	r0, [r3, #0]
 80023e4:	e002      	b.n	80023ec <_printf_i+0x1d4>
 80023e6:	0671      	lsls	r1, r6, #25
 80023e8:	d5fb      	bpl.n	80023e2 <_printf_i+0x1ca>
 80023ea:	8018      	strh	r0, [r3, #0]
 80023ec:	2300      	movs	r3, #0
 80023ee:	4616      	mov	r6, r2
 80023f0:	6123      	str	r3, [r4, #16]
 80023f2:	e7ba      	b.n	800236a <_printf_i+0x152>
 80023f4:	680b      	ldr	r3, [r1, #0]
 80023f6:	1d1a      	adds	r2, r3, #4
 80023f8:	600a      	str	r2, [r1, #0]
 80023fa:	681e      	ldr	r6, [r3, #0]
 80023fc:	2100      	movs	r1, #0
 80023fe:	4630      	mov	r0, r6
 8002400:	6862      	ldr	r2, [r4, #4]
 8002402:	f000 f82f 	bl	8002464 <memchr>
 8002406:	b108      	cbz	r0, 800240c <_printf_i+0x1f4>
 8002408:	1b80      	subs	r0, r0, r6
 800240a:	6060      	str	r0, [r4, #4]
 800240c:	6863      	ldr	r3, [r4, #4]
 800240e:	6123      	str	r3, [r4, #16]
 8002410:	2300      	movs	r3, #0
 8002412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002416:	e7a8      	b.n	800236a <_printf_i+0x152>
 8002418:	4632      	mov	r2, r6
 800241a:	4649      	mov	r1, r9
 800241c:	4640      	mov	r0, r8
 800241e:	6923      	ldr	r3, [r4, #16]
 8002420:	47d0      	blx	sl
 8002422:	3001      	adds	r0, #1
 8002424:	d0ab      	beq.n	800237e <_printf_i+0x166>
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	079b      	lsls	r3, r3, #30
 800242a:	d413      	bmi.n	8002454 <_printf_i+0x23c>
 800242c:	68e0      	ldr	r0, [r4, #12]
 800242e:	9b03      	ldr	r3, [sp, #12]
 8002430:	4298      	cmp	r0, r3
 8002432:	bfb8      	it	lt
 8002434:	4618      	movlt	r0, r3
 8002436:	e7a4      	b.n	8002382 <_printf_i+0x16a>
 8002438:	2301      	movs	r3, #1
 800243a:	4632      	mov	r2, r6
 800243c:	4649      	mov	r1, r9
 800243e:	4640      	mov	r0, r8
 8002440:	47d0      	blx	sl
 8002442:	3001      	adds	r0, #1
 8002444:	d09b      	beq.n	800237e <_printf_i+0x166>
 8002446:	3501      	adds	r5, #1
 8002448:	68e3      	ldr	r3, [r4, #12]
 800244a:	9903      	ldr	r1, [sp, #12]
 800244c:	1a5b      	subs	r3, r3, r1
 800244e:	42ab      	cmp	r3, r5
 8002450:	dcf2      	bgt.n	8002438 <_printf_i+0x220>
 8002452:	e7eb      	b.n	800242c <_printf_i+0x214>
 8002454:	2500      	movs	r5, #0
 8002456:	f104 0619 	add.w	r6, r4, #25
 800245a:	e7f5      	b.n	8002448 <_printf_i+0x230>
 800245c:	0800271d 	.word	0x0800271d
 8002460:	0800272e 	.word	0x0800272e

08002464 <memchr>:
 8002464:	4603      	mov	r3, r0
 8002466:	b510      	push	{r4, lr}
 8002468:	b2c9      	uxtb	r1, r1
 800246a:	4402      	add	r2, r0
 800246c:	4293      	cmp	r3, r2
 800246e:	4618      	mov	r0, r3
 8002470:	d101      	bne.n	8002476 <memchr+0x12>
 8002472:	2000      	movs	r0, #0
 8002474:	e003      	b.n	800247e <memchr+0x1a>
 8002476:	7804      	ldrb	r4, [r0, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	428c      	cmp	r4, r1
 800247c:	d1f6      	bne.n	800246c <memchr+0x8>
 800247e:	bd10      	pop	{r4, pc}

08002480 <memmove>:
 8002480:	4288      	cmp	r0, r1
 8002482:	b510      	push	{r4, lr}
 8002484:	eb01 0402 	add.w	r4, r1, r2
 8002488:	d902      	bls.n	8002490 <memmove+0x10>
 800248a:	4284      	cmp	r4, r0
 800248c:	4623      	mov	r3, r4
 800248e:	d807      	bhi.n	80024a0 <memmove+0x20>
 8002490:	1e43      	subs	r3, r0, #1
 8002492:	42a1      	cmp	r1, r4
 8002494:	d008      	beq.n	80024a8 <memmove+0x28>
 8002496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800249a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800249e:	e7f8      	b.n	8002492 <memmove+0x12>
 80024a0:	4601      	mov	r1, r0
 80024a2:	4402      	add	r2, r0
 80024a4:	428a      	cmp	r2, r1
 80024a6:	d100      	bne.n	80024aa <memmove+0x2a>
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80024b2:	e7f7      	b.n	80024a4 <memmove+0x24>

080024b4 <_free_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	4605      	mov	r5, r0
 80024b8:	2900      	cmp	r1, #0
 80024ba:	d043      	beq.n	8002544 <_free_r+0x90>
 80024bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024c0:	1f0c      	subs	r4, r1, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bfb8      	it	lt
 80024c6:	18e4      	addlt	r4, r4, r3
 80024c8:	f000 f8d0 	bl	800266c <__malloc_lock>
 80024cc:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <_free_r+0x94>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	4610      	mov	r0, r2
 80024d2:	b933      	cbnz	r3, 80024e2 <_free_r+0x2e>
 80024d4:	6063      	str	r3, [r4, #4]
 80024d6:	6014      	str	r4, [r2, #0]
 80024d8:	4628      	mov	r0, r5
 80024da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024de:	f000 b8cb 	b.w	8002678 <__malloc_unlock>
 80024e2:	42a3      	cmp	r3, r4
 80024e4:	d90a      	bls.n	80024fc <_free_r+0x48>
 80024e6:	6821      	ldr	r1, [r4, #0]
 80024e8:	1862      	adds	r2, r4, r1
 80024ea:	4293      	cmp	r3, r2
 80024ec:	bf01      	itttt	eq
 80024ee:	681a      	ldreq	r2, [r3, #0]
 80024f0:	685b      	ldreq	r3, [r3, #4]
 80024f2:	1852      	addeq	r2, r2, r1
 80024f4:	6022      	streq	r2, [r4, #0]
 80024f6:	6063      	str	r3, [r4, #4]
 80024f8:	6004      	str	r4, [r0, #0]
 80024fa:	e7ed      	b.n	80024d8 <_free_r+0x24>
 80024fc:	461a      	mov	r2, r3
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	b10b      	cbz	r3, 8002506 <_free_r+0x52>
 8002502:	42a3      	cmp	r3, r4
 8002504:	d9fa      	bls.n	80024fc <_free_r+0x48>
 8002506:	6811      	ldr	r1, [r2, #0]
 8002508:	1850      	adds	r0, r2, r1
 800250a:	42a0      	cmp	r0, r4
 800250c:	d10b      	bne.n	8002526 <_free_r+0x72>
 800250e:	6820      	ldr	r0, [r4, #0]
 8002510:	4401      	add	r1, r0
 8002512:	1850      	adds	r0, r2, r1
 8002514:	4283      	cmp	r3, r0
 8002516:	6011      	str	r1, [r2, #0]
 8002518:	d1de      	bne.n	80024d8 <_free_r+0x24>
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4401      	add	r1, r0
 8002520:	6011      	str	r1, [r2, #0]
 8002522:	6053      	str	r3, [r2, #4]
 8002524:	e7d8      	b.n	80024d8 <_free_r+0x24>
 8002526:	d902      	bls.n	800252e <_free_r+0x7a>
 8002528:	230c      	movs	r3, #12
 800252a:	602b      	str	r3, [r5, #0]
 800252c:	e7d4      	b.n	80024d8 <_free_r+0x24>
 800252e:	6820      	ldr	r0, [r4, #0]
 8002530:	1821      	adds	r1, r4, r0
 8002532:	428b      	cmp	r3, r1
 8002534:	bf01      	itttt	eq
 8002536:	6819      	ldreq	r1, [r3, #0]
 8002538:	685b      	ldreq	r3, [r3, #4]
 800253a:	1809      	addeq	r1, r1, r0
 800253c:	6021      	streq	r1, [r4, #0]
 800253e:	6063      	str	r3, [r4, #4]
 8002540:	6054      	str	r4, [r2, #4]
 8002542:	e7c9      	b.n	80024d8 <_free_r+0x24>
 8002544:	bd38      	pop	{r3, r4, r5, pc}
 8002546:	bf00      	nop
 8002548:	20000090 	.word	0x20000090

0800254c <_malloc_r>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	1ccd      	adds	r5, r1, #3
 8002550:	f025 0503 	bic.w	r5, r5, #3
 8002554:	3508      	adds	r5, #8
 8002556:	2d0c      	cmp	r5, #12
 8002558:	bf38      	it	cc
 800255a:	250c      	movcc	r5, #12
 800255c:	2d00      	cmp	r5, #0
 800255e:	4606      	mov	r6, r0
 8002560:	db01      	blt.n	8002566 <_malloc_r+0x1a>
 8002562:	42a9      	cmp	r1, r5
 8002564:	d903      	bls.n	800256e <_malloc_r+0x22>
 8002566:	230c      	movs	r3, #12
 8002568:	6033      	str	r3, [r6, #0]
 800256a:	2000      	movs	r0, #0
 800256c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800256e:	f000 f87d 	bl	800266c <__malloc_lock>
 8002572:	4921      	ldr	r1, [pc, #132]	; (80025f8 <_malloc_r+0xac>)
 8002574:	680a      	ldr	r2, [r1, #0]
 8002576:	4614      	mov	r4, r2
 8002578:	b99c      	cbnz	r4, 80025a2 <_malloc_r+0x56>
 800257a:	4f20      	ldr	r7, [pc, #128]	; (80025fc <_malloc_r+0xb0>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b923      	cbnz	r3, 800258a <_malloc_r+0x3e>
 8002580:	4621      	mov	r1, r4
 8002582:	4630      	mov	r0, r6
 8002584:	f000 f862 	bl	800264c <_sbrk_r>
 8002588:	6038      	str	r0, [r7, #0]
 800258a:	4629      	mov	r1, r5
 800258c:	4630      	mov	r0, r6
 800258e:	f000 f85d 	bl	800264c <_sbrk_r>
 8002592:	1c43      	adds	r3, r0, #1
 8002594:	d123      	bne.n	80025de <_malloc_r+0x92>
 8002596:	230c      	movs	r3, #12
 8002598:	4630      	mov	r0, r6
 800259a:	6033      	str	r3, [r6, #0]
 800259c:	f000 f86c 	bl	8002678 <__malloc_unlock>
 80025a0:	e7e3      	b.n	800256a <_malloc_r+0x1e>
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	1b5b      	subs	r3, r3, r5
 80025a6:	d417      	bmi.n	80025d8 <_malloc_r+0x8c>
 80025a8:	2b0b      	cmp	r3, #11
 80025aa:	d903      	bls.n	80025b4 <_malloc_r+0x68>
 80025ac:	6023      	str	r3, [r4, #0]
 80025ae:	441c      	add	r4, r3
 80025b0:	6025      	str	r5, [r4, #0]
 80025b2:	e004      	b.n	80025be <_malloc_r+0x72>
 80025b4:	6863      	ldr	r3, [r4, #4]
 80025b6:	42a2      	cmp	r2, r4
 80025b8:	bf0c      	ite	eq
 80025ba:	600b      	streq	r3, [r1, #0]
 80025bc:	6053      	strne	r3, [r2, #4]
 80025be:	4630      	mov	r0, r6
 80025c0:	f000 f85a 	bl	8002678 <__malloc_unlock>
 80025c4:	f104 000b 	add.w	r0, r4, #11
 80025c8:	1d23      	adds	r3, r4, #4
 80025ca:	f020 0007 	bic.w	r0, r0, #7
 80025ce:	1ac2      	subs	r2, r0, r3
 80025d0:	d0cc      	beq.n	800256c <_malloc_r+0x20>
 80025d2:	1a1b      	subs	r3, r3, r0
 80025d4:	50a3      	str	r3, [r4, r2]
 80025d6:	e7c9      	b.n	800256c <_malloc_r+0x20>
 80025d8:	4622      	mov	r2, r4
 80025da:	6864      	ldr	r4, [r4, #4]
 80025dc:	e7cc      	b.n	8002578 <_malloc_r+0x2c>
 80025de:	1cc4      	adds	r4, r0, #3
 80025e0:	f024 0403 	bic.w	r4, r4, #3
 80025e4:	42a0      	cmp	r0, r4
 80025e6:	d0e3      	beq.n	80025b0 <_malloc_r+0x64>
 80025e8:	1a21      	subs	r1, r4, r0
 80025ea:	4630      	mov	r0, r6
 80025ec:	f000 f82e 	bl	800264c <_sbrk_r>
 80025f0:	3001      	adds	r0, #1
 80025f2:	d1dd      	bne.n	80025b0 <_malloc_r+0x64>
 80025f4:	e7cf      	b.n	8002596 <_malloc_r+0x4a>
 80025f6:	bf00      	nop
 80025f8:	20000090 	.word	0x20000090
 80025fc:	20000094 	.word	0x20000094

08002600 <_realloc_r>:
 8002600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002602:	4607      	mov	r7, r0
 8002604:	4614      	mov	r4, r2
 8002606:	460e      	mov	r6, r1
 8002608:	b921      	cbnz	r1, 8002614 <_realloc_r+0x14>
 800260a:	4611      	mov	r1, r2
 800260c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002610:	f7ff bf9c 	b.w	800254c <_malloc_r>
 8002614:	b922      	cbnz	r2, 8002620 <_realloc_r+0x20>
 8002616:	f7ff ff4d 	bl	80024b4 <_free_r>
 800261a:	4625      	mov	r5, r4
 800261c:	4628      	mov	r0, r5
 800261e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002620:	f000 f830 	bl	8002684 <_malloc_usable_size_r>
 8002624:	42a0      	cmp	r0, r4
 8002626:	d20f      	bcs.n	8002648 <_realloc_r+0x48>
 8002628:	4621      	mov	r1, r4
 800262a:	4638      	mov	r0, r7
 800262c:	f7ff ff8e 	bl	800254c <_malloc_r>
 8002630:	4605      	mov	r5, r0
 8002632:	2800      	cmp	r0, #0
 8002634:	d0f2      	beq.n	800261c <_realloc_r+0x1c>
 8002636:	4631      	mov	r1, r6
 8002638:	4622      	mov	r2, r4
 800263a:	f7ff fbeb 	bl	8001e14 <memcpy>
 800263e:	4631      	mov	r1, r6
 8002640:	4638      	mov	r0, r7
 8002642:	f7ff ff37 	bl	80024b4 <_free_r>
 8002646:	e7e9      	b.n	800261c <_realloc_r+0x1c>
 8002648:	4635      	mov	r5, r6
 800264a:	e7e7      	b.n	800261c <_realloc_r+0x1c>

0800264c <_sbrk_r>:
 800264c:	b538      	push	{r3, r4, r5, lr}
 800264e:	2300      	movs	r3, #0
 8002650:	4d05      	ldr	r5, [pc, #20]	; (8002668 <_sbrk_r+0x1c>)
 8002652:	4604      	mov	r4, r0
 8002654:	4608      	mov	r0, r1
 8002656:	602b      	str	r3, [r5, #0]
 8002658:	f7fd fffa 	bl	8000650 <_sbrk>
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	d102      	bne.n	8002666 <_sbrk_r+0x1a>
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	b103      	cbz	r3, 8002666 <_sbrk_r+0x1a>
 8002664:	6023      	str	r3, [r4, #0]
 8002666:	bd38      	pop	{r3, r4, r5, pc}
 8002668:	2000010c 	.word	0x2000010c

0800266c <__malloc_lock>:
 800266c:	4801      	ldr	r0, [pc, #4]	; (8002674 <__malloc_lock+0x8>)
 800266e:	f000 b811 	b.w	8002694 <__retarget_lock_acquire_recursive>
 8002672:	bf00      	nop
 8002674:	20000114 	.word	0x20000114

08002678 <__malloc_unlock>:
 8002678:	4801      	ldr	r0, [pc, #4]	; (8002680 <__malloc_unlock+0x8>)
 800267a:	f000 b80c 	b.w	8002696 <__retarget_lock_release_recursive>
 800267e:	bf00      	nop
 8002680:	20000114 	.word	0x20000114

08002684 <_malloc_usable_size_r>:
 8002684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002688:	1f18      	subs	r0, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	bfbc      	itt	lt
 800268e:	580b      	ldrlt	r3, [r1, r0]
 8002690:	18c0      	addlt	r0, r0, r3
 8002692:	4770      	bx	lr

08002694 <__retarget_lock_acquire_recursive>:
 8002694:	4770      	bx	lr

08002696 <__retarget_lock_release_recursive>:
 8002696:	4770      	bx	lr

08002698 <_init>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	bf00      	nop
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr

080026a4 <_fini>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	bf00      	nop
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr
