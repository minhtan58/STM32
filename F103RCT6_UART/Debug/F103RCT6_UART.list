
F103RCT6_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d60  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001f44  08001f44  00011f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f70  08001f70  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001f70  08001f70  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f70  08001f70  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f70  08001f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000020  08001f98  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001f98  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056f2  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012d9  00000000  00000000  0002573b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000648  00000000  00000000  00026a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a0  00000000  00000000  00027060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017dfc  00000000  00000000  00027600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005bd4  00000000  00000000  0003f3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bed2  00000000  00000000  00044fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0ea2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001828  00000000  00000000  000d0f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000020 	.word	0x20000020
 8000200:	00000000 	.word	0x00000000
 8000204:	08001f2c 	.word	0x08001f2c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000024 	.word	0x20000024
 8000220:	08001f2c 	.word	0x08001f2c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  HAL_Init();
 8000228:	f000 f9ba 	bl	80005a0 <HAL_Init>

  SystemClock_Config();
 800022c:	f000 f83c 	bl	80002a8 <SystemClock_Config>

  MX_GPIO_Init();
 8000230:	f000 f8a8 	bl	8000384 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 8000234:	f000 f87c 	bl	8000330 <MX_USART1_UART_Init>

  HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 2);
 8000238:	2202      	movs	r2, #2
 800023a:	490a      	ldr	r1, [pc, #40]	; (8000264 <main+0x40>)
 800023c:	480a      	ldr	r0, [pc, #40]	; (8000268 <main+0x44>)
 800023e:	f001 faf2 	bl	8001826 <HAL_UART_Receive_IT>

  while (1)
  {
	   HAL_UART_Transmit(&huart1, (uint8_t*)&UART1_TxBuffer, countof(UART1_TxBuffer)-1, HAL_TIMEOUT_VALUE);
 8000242:	f04f 33ff 	mov.w	r3, #4294967295
 8000246:	2212      	movs	r2, #18
 8000248:	4908      	ldr	r1, [pc, #32]	; (800026c <main+0x48>)
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <main+0x44>)
 800024c:	f001 fa15 	bl	800167a <HAL_UART_Transmit>
	   HAL_UART_Transmit_IT(&huart1, (uint8_t*)&UART1_TxBuffer, countof(UART1_TxBuffer)-1);
 8000250:	2212      	movs	r2, #18
 8000252:	4906      	ldr	r1, [pc, #24]	; (800026c <main+0x48>)
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <main+0x44>)
 8000256:	f001 faa2 	bl	800179e <HAL_UART_Transmit_IT>
	   HAL_Delay(1000);
 800025a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025e:	f000 fa01 	bl	8000664 <HAL_Delay>
	   HAL_UART_Transmit(&huart1, (uint8_t*)&UART1_TxBuffer, countof(UART1_TxBuffer)-1, HAL_TIMEOUT_VALUE);
 8000262:	e7ee      	b.n	8000242 <main+0x1e>
 8000264:	2000003c 	.word	0x2000003c
 8000268:	20000048 	.word	0x20000048
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_UART_RxCpltCallback>:
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <HAL_UART_RxCpltCallback+0x30>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d109      	bne.n	8000298 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&UART1_RxBuffer, countof(UART1_RxBuffer)-1);
 8000284:	2209      	movs	r2, #9
 8000286:	4907      	ldr	r1, [pc, #28]	; (80002a4 <HAL_UART_RxCpltCallback+0x34>)
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <HAL_UART_RxCpltCallback+0x30>)
 800028a:	f001 fa88 	bl	800179e <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART1_RxBuffer, 2);
 800028e:	2202      	movs	r2, #2
 8000290:	4904      	ldr	r1, [pc, #16]	; (80002a4 <HAL_UART_RxCpltCallback+0x34>)
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <HAL_UART_RxCpltCallback+0x30>)
 8000294:	f001 fac7 	bl	8001826 <HAL_UART_Receive_IT>
	}
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000048 	.word	0x20000048
 80002a4:	2000003c 	.word	0x2000003c

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	; 0x40
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fe30 	bl	8001f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	2302      	movs	r3, #2
 80002de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002e6:	2300      	movs	r3, #0
 80002e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fd5a 	bl	8000da8 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002fa:	f000 f865 	bl	80003c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2302      	movs	r3, #2
 8000304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f000 ffc6 	bl	80012a8 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000322:	f000 f851 	bl	80003c8 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	; 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_USART1_UART_Init+0x50>)
 8000338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <MX_USART1_UART_Init+0x4c>)
 800033c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_USART1_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000368:	f001 f93a 	bl	80015e0 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000372:	f000 f829 	bl	80003c8 <Error_Handler>
  }
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000048 	.word	0x20000048
 8000380:	40013800 	.word	0x40013800

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_GPIO_Init+0x40>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <MX_GPIO_Init+0x40>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_GPIO_Init+0x40>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0320 	and.w	r3, r3, #32
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_GPIO_Init+0x40>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <MX_GPIO_Init+0x40>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <MX_GPIO_Init+0x40>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0304 	and.w	r3, r3, #4
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a14      	ldr	r2, [pc, #80]	; (8000430 <HAL_MspInit+0x5c>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x5c>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <HAL_MspInit+0x60>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <HAL_MspInit+0x60>)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000
 8000434:	40010000 	.word	0x40010000

08000438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a20      	ldr	r2, [pc, #128]	; (80004d4 <HAL_UART_MspInit+0x9c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d139      	bne.n	80004cc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <HAL_UART_MspInit+0xa0>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1e      	ldr	r2, [pc, #120]	; (80004d8 <HAL_UART_MspInit+0xa0>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <HAL_UART_MspInit+0xa0>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <HAL_UART_MspInit+0xa0>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a18      	ldr	r2, [pc, #96]	; (80004d8 <HAL_UART_MspInit+0xa0>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <HAL_UART_MspInit+0xa0>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800048c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048e:	2302      	movs	r3, #2
 8000490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	480f      	ldr	r0, [pc, #60]	; (80004dc <HAL_UART_MspInit+0xa4>)
 800049e:	f000 fb19 	bl	8000ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4809      	ldr	r0, [pc, #36]	; (80004dc <HAL_UART_MspInit+0xa4>)
 80004b8:	f000 fb0c 	bl	8000ad4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2025      	movs	r0, #37	; 0x25
 80004c2:	f000 f9c8 	bl	8000856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004c6:	2025      	movs	r0, #37	; 0x25
 80004c8:	f000 f9e1 	bl	800088e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004cc:	bf00      	nop
 80004ce:	3720      	adds	r7, #32
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40013800 	.word	0x40013800
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010800 	.word	0x40010800

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <HardFault_Handler+0x4>

080004f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <MemManage_Handler+0x4>

080004f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <BusFault_Handler+0x4>

080004fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <UsageFault_Handler+0x4>

08000504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052c:	f000 f87e 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <USART1_IRQHandler+0x10>)
 800053a:	f001 f9c9 	bl	80018d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000048 	.word	0x20000048

08000548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000554:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000556:	e003      	b.n	8000560 <LoopCopyDataInit>

08000558 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800055a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800055c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800055e:	3104      	adds	r1, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000564:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000566:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000568:	d3f6      	bcc.n	8000558 <CopyDataInit>
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800056c:	e002      	b.n	8000574 <LoopFillZerobss>

0800056e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000570:	f842 3b04 	str.w	r3, [r2], #4

08000574 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000576:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000578:	d3f9      	bcc.n	800056e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057a:	f7ff ffe5 	bl	8000548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057e:	f001 fca9 	bl	8001ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff fe4f 	bl	8000224 <main>
  bx lr
 8000586:	4770      	bx	lr
  ldr r3, =_sidata
 8000588:	08001f78 	.word	0x08001f78
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000590:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8000594:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8000598:	2000008c 	.word	0x2000008c

0800059c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_2_IRQHandler>
	...

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_Init+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_Init+0x28>)
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 f945 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f808 	bl	80005cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005bc:	f7ff ff0a 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40022000 	.word	0x40022000

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x54>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x58>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f95d 	bl	80008aa <HAL_SYSTICK_Config>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00e      	b.n	8000618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d80a      	bhi.n	8000616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f925 	bl	8000856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_InitTick+0x5c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000014 	.word	0x20000014
 8000624:	2000001c 	.word	0x2000001c
 8000628:	20000018 	.word	0x20000018

0800062c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_IncTick+0x1c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_IncTick+0x20>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x20>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	2000001c 	.word	0x2000001c
 800064c:	20000088 	.word	0x20000088

08000650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <HAL_GetTick+0x10>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000088 	.word	0x20000088

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff fff0 	bl	8000650 <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffe0 	bl	8000650 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000001c 	.word	0x2000001c

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <__NVIC_EnableIRQ+0x34>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	e000e100 	.word	0xe000e100

08000744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	db0a      	blt.n	800076e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <__NVIC_SetPriority+0x4c>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	0112      	lsls	r2, r2, #4
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	440b      	add	r3, r1
 8000768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800076c:	e00a      	b.n	8000784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4908      	ldr	r1, [pc, #32]	; (8000794 <__NVIC_SetPriority+0x50>)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	3b04      	subs	r3, #4
 800077c:	0112      	lsls	r2, r2, #4
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	440b      	add	r3, r1
 8000782:	761a      	strb	r2, [r3, #24]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000e100 	.word	0xe000e100
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000798:	b480      	push	{r7}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f1c3 0307 	rsb	r3, r3, #7
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	bf28      	it	cs
 80007b6:	2304      	movcs	r3, #4
 80007b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3304      	adds	r3, #4
 80007be:	2b06      	cmp	r3, #6
 80007c0:	d902      	bls.n	80007c8 <NVIC_EncodePriority+0x30>
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3b03      	subs	r3, #3
 80007c6:	e000      	b.n	80007ca <NVIC_EncodePriority+0x32>
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	f04f 32ff 	mov.w	r2, #4294967295
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43da      	mvns	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	401a      	ands	r2, r3
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43d9      	mvns	r1, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	4313      	orrs	r3, r2
         );
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3724      	adds	r7, #36	; 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	210f      	movs	r1, #15
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ff90 	bl	8000744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff2d 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff42 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ff90 	bl	8000798 <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [