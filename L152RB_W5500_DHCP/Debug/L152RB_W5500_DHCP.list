
L152RB_W5500_DHCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009184  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080092c8  080092c8  000192c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b8  080096b8  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096c0  080096c0  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c0  080096c0  000196c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096c4  080096c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  080096c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  2000023c  08009904  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  08009904  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0e8  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002621  00000000  00000000  0002d34d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0002f970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  000305d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a1f  00000000  00000000  00031108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e50  00000000  00000000  00045b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d7ae  00000000  00000000  0004f977  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe4  00000000  00000000  000cd1a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000023c 	.word	0x2000023c
 800015c:	00000000 	.word	0x00000000
 8000160:	080092ac 	.word	0x080092ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000240 	.word	0x20000240
 800017c:	080092ac 	.word	0x080092ac

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_uldivmod>:
 8000ab8:	b953      	cbnz	r3, 8000ad0 <__aeabi_uldivmod+0x18>
 8000aba:	b94a      	cbnz	r2, 8000ad0 <__aeabi_uldivmod+0x18>
 8000abc:	2900      	cmp	r1, #0
 8000abe:	bf08      	it	eq
 8000ac0:	2800      	cmpeq	r0, #0
 8000ac2:	bf1c      	itt	ne
 8000ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8000acc:	f000 b974 	b.w	8000db8 <__aeabi_idiv0>
 8000ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad8:	f000 f806 	bl	8000ae8 <__udivmoddi4>
 8000adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae4:	b004      	add	sp, #16
 8000ae6:	4770      	bx	lr

08000ae8 <__udivmoddi4>:
 8000ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aec:	468c      	mov	ip, r1
 8000aee:	4604      	mov	r4, r0
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d14b      	bne.n	8000b8e <__udivmoddi4+0xa6>
 8000af6:	428a      	cmp	r2, r1
 8000af8:	4615      	mov	r5, r2
 8000afa:	d967      	bls.n	8000bcc <__udivmoddi4+0xe4>
 8000afc:	fab2 f282 	clz	r2, r2
 8000b00:	b14a      	cbz	r2, 8000b16 <__udivmoddi4+0x2e>
 8000b02:	f1c2 0720 	rsb	r7, r2, #32
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b0e:	4095      	lsls	r5, r2
 8000b10:	ea47 0c03 	orr.w	ip, r7, r3
 8000b14:	4094      	lsls	r4, r2
 8000b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1a:	fbbc f7fe 	udiv	r7, ip, lr
 8000b1e:	fa1f f885 	uxth.w	r8, r5
 8000b22:	fb0e c317 	mls	r3, lr, r7, ip
 8000b26:	fb07 f908 	mul.w	r9, r7, r8
 8000b2a:	0c21      	lsrs	r1, r4, #16
 8000b2c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b30:	4599      	cmp	r9, r3
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x60>
 8000b34:	18eb      	adds	r3, r5, r3
 8000b36:	f107 31ff 	add.w	r1, r7, #4294967295
 8000b3a:	f080 811c 	bcs.w	8000d76 <__udivmoddi4+0x28e>
 8000b3e:	4599      	cmp	r9, r3
 8000b40:	f240 8119 	bls.w	8000d76 <__udivmoddi4+0x28e>
 8000b44:	3f02      	subs	r7, #2
 8000b46:	442b      	add	r3, r5
 8000b48:	eba3 0309 	sub.w	r3, r3, r9
 8000b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b54:	fb00 f108 	mul.w	r1, r0, r8
 8000b58:	b2a4      	uxth	r4, r4
 8000b5a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5e:	42a1      	cmp	r1, r4
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0x8e>
 8000b62:	192c      	adds	r4, r5, r4
 8000b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b68:	f080 8107 	bcs.w	8000d7a <__udivmoddi4+0x292>
 8000b6c:	42a1      	cmp	r1, r4
 8000b6e:	f240 8104 	bls.w	8000d7a <__udivmoddi4+0x292>
 8000b72:	3802      	subs	r0, #2
 8000b74:	442c      	add	r4, r5
 8000b76:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	1a64      	subs	r4, r4, r1
 8000b7e:	b11e      	cbz	r6, 8000b88 <__udivmoddi4+0xa0>
 8000b80:	2300      	movs	r3, #0
 8000b82:	40d4      	lsrs	r4, r2
 8000b84:	e9c6 4300 	strd	r4, r3, [r6]
 8000b88:	4639      	mov	r1, r7
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d909      	bls.n	8000ba6 <__udivmoddi4+0xbe>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f000 80ec 	beq.w	8000d70 <__udivmoddi4+0x288>
 8000b98:	2700      	movs	r7, #0
 8000b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	4639      	mov	r1, r7
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	fab3 f783 	clz	r7, r3
 8000baa:	2f00      	cmp	r7, #0
 8000bac:	d148      	bne.n	8000c40 <__udivmoddi4+0x158>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xd0>
 8000bb2:	4282      	cmp	r2, r0
 8000bb4:	f200 80fb 	bhi.w	8000dae <__udivmoddi4+0x2c6>
 8000bb8:	1a84      	subs	r4, r0, r2
 8000bba:	eb61 0303 	sbc.w	r3, r1, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	469c      	mov	ip, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d0e0      	beq.n	8000b88 <__udivmoddi4+0xa0>
 8000bc6:	e9c6 4c00 	strd	r4, ip, [r6]
 8000bca:	e7dd      	b.n	8000b88 <__udivmoddi4+0xa0>
 8000bcc:	b902      	cbnz	r2, 8000bd0 <__udivmoddi4+0xe8>
 8000bce:	deff      	udf	#255	; 0xff
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f040 808f 	bne.w	8000cf8 <__udivmoddi4+0x210>
 8000bda:	2701      	movs	r7, #1
 8000bdc:	1b49      	subs	r1, r1, r5
 8000bde:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000be2:	fa1f f985 	uxth.w	r9, r5
 8000be6:	fbb1 fef8 	udiv	lr, r1, r8
 8000bea:	fb08 111e 	mls	r1, r8, lr, r1
 8000bee:	fb09 f00e 	mul.w	r0, r9, lr
 8000bf2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000bf6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000bfa:	4298      	cmp	r0, r3
 8000bfc:	d907      	bls.n	8000c0e <__udivmoddi4+0x126>
 8000bfe:	18eb      	adds	r3, r5, r3
 8000c00:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000c04:	d202      	bcs.n	8000c0c <__udivmoddi4+0x124>
 8000c06:	4298      	cmp	r0, r3
 8000c08:	f200 80cd 	bhi.w	8000da6 <__udivmoddi4+0x2be>
 8000c0c:	468e      	mov	lr, r1
 8000c0e:	1a1b      	subs	r3, r3, r0
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	fb09 f900 	mul.w	r9, r9, r0
 8000c1c:	b2a4      	uxth	r4, r4
 8000c1e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c22:	45a1      	cmp	r9, r4
 8000c24:	d907      	bls.n	8000c36 <__udivmoddi4+0x14e>
 8000c26:	192c      	adds	r4, r5, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	d202      	bcs.n	8000c34 <__udivmoddi4+0x14c>
 8000c2e:	45a1      	cmp	r9, r4
 8000c30:	f200 80b6 	bhi.w	8000da0 <__udivmoddi4+0x2b8>
 8000c34:	4618      	mov	r0, r3
 8000c36:	eba4 0409 	sub.w	r4, r4, r9
 8000c3a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c3e:	e79e      	b.n	8000b7e <__udivmoddi4+0x96>
 8000c40:	f1c7 0520 	rsb	r5, r7, #32
 8000c44:	40bb      	lsls	r3, r7
 8000c46:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c56:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c5a:	fa1f f88c 	uxth.w	r8, ip
 8000c5e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000c62:	fa20 f305 	lsr.w	r3, r0, r5
 8000c66:	40b9      	lsls	r1, r7
 8000c68:	fb09 fa08 	mul.w	sl, r9, r8
 8000c6c:	4319      	orrs	r1, r3
 8000c6e:	0c0b      	lsrs	r3, r1, #16
 8000c70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c74:	45a2      	cmp	sl, r4
 8000c76:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7a:	fa00 f307 	lsl.w	r3, r0, r7
 8000c7e:	d90b      	bls.n	8000c98 <__udivmoddi4+0x1b0>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c88:	f080 8088 	bcs.w	8000d9c <__udivmoddi4+0x2b4>
 8000c8c:	45a2      	cmp	sl, r4
 8000c8e:	f240 8085 	bls.w	8000d9c <__udivmoddi4+0x2b4>
 8000c92:	f1a9 0902 	sub.w	r9, r9, #2
 8000c96:	4464      	add	r4, ip
 8000c98:	eba4 040a 	sub.w	r4, r4, sl
 8000c9c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ca0:	fb0e 4410 	mls	r4, lr, r0, r4
 8000ca4:	fb00 fa08 	mul.w	sl, r0, r8
 8000ca8:	b289      	uxth	r1, r1
 8000caa:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x1dc>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cba:	d26b      	bcs.n	8000d94 <__udivmoddi4+0x2ac>
 8000cbc:	45a2      	cmp	sl, r4
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0x2ac>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	4464      	add	r4, ip
 8000cc4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc8:	fba0 8902 	umull	r8, r9, r0, r2
 8000ccc:	eba4 040a 	sub.w	r4, r4, sl
 8000cd0:	454c      	cmp	r4, r9
 8000cd2:	4641      	mov	r1, r8
 8000cd4:	46ce      	mov	lr, r9
 8000cd6:	d354      	bcc.n	8000d82 <__udivmoddi4+0x29a>
 8000cd8:	d051      	beq.n	8000d7e <__udivmoddi4+0x296>
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d069      	beq.n	8000db2 <__udivmoddi4+0x2ca>
 8000cde:	1a5a      	subs	r2, r3, r1
 8000ce0:	eb64 040e 	sbc.w	r4, r4, lr
 8000ce4:	fa04 f505 	lsl.w	r5, r4, r5
 8000ce8:	fa22 f307 	lsr.w	r3, r2, r7
 8000cec:	40fc      	lsrs	r4, r7
 8000cee:	431d      	orrs	r5, r3
 8000cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf4:	2700      	movs	r7, #0
 8000cf6:	e747      	b.n	8000b88 <__udivmoddi4+0xa0>
 8000cf8:	4095      	lsls	r5, r2
 8000cfa:	f1c2 0320 	rsb	r3, r2, #32
 8000cfe:	fa21 f003 	lsr.w	r0, r1, r3
 8000d02:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d06:	fbb0 f7f8 	udiv	r7, r0, r8
 8000d0a:	fa1f f985 	uxth.w	r9, r5
 8000d0e:	fb08 0017 	mls	r0, r8, r7, r0
 8000d12:	fa24 f303 	lsr.w	r3, r4, r3
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fb07 fc09 	mul.w	ip, r7, r9
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	0c19      	lsrs	r1, r3, #16
 8000d20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d24:	458c      	cmp	ip, r1
 8000d26:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x254>
 8000d2c:	1869      	adds	r1, r5, r1
 8000d2e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d32:	d231      	bcs.n	8000d98 <__udivmoddi4+0x2b0>
 8000d34:	458c      	cmp	ip, r1
 8000d36:	d92f      	bls.n	8000d98 <__udivmoddi4+0x2b0>
 8000d38:	3f02      	subs	r7, #2
 8000d3a:	4429      	add	r1, r5
 8000d3c:	eba1 010c 	sub.w	r1, r1, ip
 8000d40:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d44:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d48:	fb00 fe09 	mul.w	lr, r0, r9
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d52:	458e      	cmp	lr, r1
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x27e>
 8000d56:	1869      	adds	r1, r5, r1
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	d218      	bcs.n	8000d90 <__udivmoddi4+0x2a8>
 8000d5e:	458e      	cmp	lr, r1
 8000d60:	d916      	bls.n	8000d90 <__udivmoddi4+0x2a8>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4429      	add	r1, r5
 8000d66:	eba1 010e 	sub.w	r1, r1, lr
 8000d6a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d6e:	e73a      	b.n	8000be6 <__udivmoddi4+0xfe>
 8000d70:	4637      	mov	r7, r6
 8000d72:	4630      	mov	r0, r6
 8000d74:	e708      	b.n	8000b88 <__udivmoddi4+0xa0>
 8000d76:	460f      	mov	r7, r1
 8000d78:	e6e6      	b.n	8000b48 <__udivmoddi4+0x60>
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	e6fb      	b.n	8000b76 <__udivmoddi4+0x8e>
 8000d7e:	4543      	cmp	r3, r8
 8000d80:	d2ab      	bcs.n	8000cda <__udivmoddi4+0x1f2>
 8000d82:	ebb8 0102 	subs.w	r1, r8, r2
 8000d86:	eb69 020c 	sbc.w	r2, r9, ip
 8000d8a:	3801      	subs	r0, #1
 8000d8c:	4696      	mov	lr, r2
 8000d8e:	e7a4      	b.n	8000cda <__udivmoddi4+0x1f2>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e7e8      	b.n	8000d66 <__udivmoddi4+0x27e>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e795      	b.n	8000cc4 <__udivmoddi4+0x1dc>
 8000d98:	4607      	mov	r7, r0
 8000d9a:	e7cf      	b.n	8000d3c <__udivmoddi4+0x254>
 8000d9c:	4681      	mov	r9, r0
 8000d9e:	e77b      	b.n	8000c98 <__udivmoddi4+0x1b0>
 8000da0:	3802      	subs	r0, #2
 8000da2:	442c      	add	r4, r5
 8000da4:	e747      	b.n	8000c36 <__udivmoddi4+0x14e>
 8000da6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000daa:	442b      	add	r3, r5
 8000dac:	e72f      	b.n	8000c0e <__udivmoddi4+0x126>
 8000dae:	4638      	mov	r0, r7
 8000db0:	e707      	b.n	8000bc2 <__udivmoddi4+0xda>
 8000db2:	4637      	mov	r7, r6
 8000db4:	e6e8      	b.n	8000b88 <__udivmoddi4+0xa0>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <WIZCHIP_READ+0x24>
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d114      	bne.n	8000e0a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	0c12      	lsrs	r2, r2, #16
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	4610      	mov	r0, r2
 8000dec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	0a12      	lsrs	r2, r2, #8
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	4610      	mov	r0, r2
 8000e06:	4798      	blx	r3
 8000e08:	e011      	b.n	8000e2e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	0c1b      	lsrs	r3, r3, #16
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	f107 020c 	add.w	r2, r7, #12
 8000e28:	2103      	movs	r1, #3
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4798      	blx	r3
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <WIZCHIP_READ+0x94>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	4798      	blx	r3
   return ret;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000020 	.word	0x20000020

08000e54 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d119      	bne.n	8000eb0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	0c12      	lsrs	r2, r2, #16
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	4610      	mov	r0, r2
 8000e88:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	0a12      	lsrs	r2, r2, #8
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	4610      	mov	r0, r2
 8000e96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	78fa      	ldrb	r2, [r7, #3]
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4798      	blx	r3
 8000eae:	e013      	b.n	8000ed8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000ede:	4b03      	ldr	r3, [pc, #12]	; (8000eec <WIZCHIP_WRITE+0x98>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	4798      	blx	r3
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000020 	.word	0x20000020

08000ef0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	4613      	mov	r3, r2
 8000efc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <WIZCHIP_READ_BUF+0x2a>
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d126      	bne.n	8000f68 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	0c12      	lsrs	r2, r2, #16
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	4610      	mov	r0, r2
 8000f26:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	0a12      	lsrs	r2, r2, #8
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	4610      	mov	r0, r2
 8000f34:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	82fb      	strh	r3, [r7, #22]
 8000f46:	e00a      	b.n	8000f5e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	8afa      	ldrh	r2, [r7, #22]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	188c      	adds	r4, r1, r2
 8000f52:	4798      	blx	r3
 8000f54:	4603      	mov	r3, r0
 8000f56:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	82fb      	strh	r3, [r7, #22]
 8000f5e:	8afa      	ldrh	r2, [r7, #22]
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3f0      	bcc.n	8000f48 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f66:	e017      	b.n	8000f98 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	f107 0210 	add.w	r2, r7, #16
 8000f86:	2103      	movs	r1, #3
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	88fa      	ldrh	r2, [r7, #6]
 8000f92:	4611      	mov	r1, r2
 8000f94:	68b8      	ldr	r0, [r7, #8]
 8000f96:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <WIZCHIP_READ_BUF+0xbc>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	4798      	blx	r3
}
 8000fa4:	bf00      	nop
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	20000020 	.word	0x20000020

08000fb0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d126      	bne.n	8001028 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	0c12      	lsrs	r2, r2, #16
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	0a12      	lsrs	r2, r2, #8
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	4610      	mov	r0, r2
 8001000:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	82fb      	strh	r3, [r7, #22]
 8001006:	e00a      	b.n	800101e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	8afa      	ldrh	r2, [r7, #22]
 800100e:	68b9      	ldr	r1, [r7, #8]
 8001010:	440a      	add	r2, r1
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	4610      	mov	r0, r2
 8001016:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001018:	8afb      	ldrh	r3, [r7, #22]
 800101a:	3301      	adds	r3, #1
 800101c:	82fb      	strh	r3, [r7, #22]
 800101e:	8afa      	ldrh	r2, [r7, #22]
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	429a      	cmp	r2, r3
 8001024:	d3f0      	bcc.n	8001008 <WIZCHIP_WRITE_BUF+0x58>
 8001026:	e017      	b.n	8001058 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	b2db      	uxtb	r3, r3
 800102e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b2db      	uxtb	r3, r3
 8001036:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	f107 0210 	add.w	r2, r7, #16
 8001046:	2103      	movs	r1, #3
 8001048:	4610      	mov	r0, r2
 800104a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	4611      	mov	r1, r2
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <WIZCHIP_WRITE_BUF+0xbc>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4798      	blx	r3
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000020 	.word	0x20000020

08001070 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800107a:	2300      	movs	r3, #0
 800107c:	81fb      	strh	r3, [r7, #14]
 800107e:	2300      	movs	r3, #0
 8001080:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	3301      	adds	r3, #1
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fe94 	bl	8000dbc <WIZCHIP_READ>
 8001094:	4603      	mov	r3, r0
 8001096:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001098:	89bb      	ldrh	r3, [r7, #12]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b29c      	uxth	r4, r3
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	3301      	adds	r3, #1
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fe86 	bl	8000dbc <WIZCHIP_READ>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4423      	add	r3, r4
 80010b6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80010b8:	89bb      	ldrh	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d01a      	beq.n	80010f4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	3301      	adds	r3, #1
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe76 	bl	8000dbc <WIZCHIP_READ>
 80010d0:	4603      	mov	r3, r0
 80010d2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b29c      	uxth	r4, r3
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	3301      	adds	r3, #1
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe68 	bl	8000dbc <WIZCHIP_READ>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4423      	add	r3, r4
 80010f2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80010f4:	89fa      	ldrh	r2, [r7, #14]
 80010f6:	89bb      	ldrh	r3, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d1c2      	bne.n	8001082 <getSn_TX_FSR+0x12>
   return val;
 80010fc:	89fb      	ldrh	r3, [r7, #14]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}

08001106 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001106:	b590      	push	{r4, r7, lr}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001110:	2300      	movs	r3, #0
 8001112:	81fb      	strh	r3, [r7, #14]
 8001114:	2300      	movs	r3, #0
 8001116:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	3301      	adds	r3, #1
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fe49 	bl	8000dbc <WIZCHIP_READ>
 800112a:	4603      	mov	r3, r0
 800112c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800112e:	89bb      	ldrh	r3, [r7, #12]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b29c      	uxth	r4, r3
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	3301      	adds	r3, #1
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fe3b 	bl	8000dbc <WIZCHIP_READ>
 8001146:	4603      	mov	r3, r0
 8001148:	b29b      	uxth	r3, r3
 800114a:	4423      	add	r3, r4
 800114c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800114e:	89bb      	ldrh	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01a      	beq.n	800118a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	3301      	adds	r3, #1
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fe2b 	bl	8000dbc <WIZCHIP_READ>
 8001166:	4603      	mov	r3, r0
 8001168:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b29c      	uxth	r4, r3
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	3301      	adds	r3, #1
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fe1d 	bl	8000dbc <WIZCHIP_READ>
 8001182:	4603      	mov	r3, r0
 8001184:	b29b      	uxth	r3, r3
 8001186:	4423      	add	r3, r4
 8001188:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800118a:	89fa      	ldrh	r2, [r7, #14]
 800118c:	89bb      	ldrh	r3, [r7, #12]
 800118e:	429a      	cmp	r2, r3
 8001190:	d1c2      	bne.n	8001118 <getSn_RX_RSR+0x12>
   return val;
 8001192:	89fb      	ldrh	r3, [r7, #14]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}

0800119c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	4613      	mov	r3, r2
 80011aa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d048      	beq.n	800124c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	3301      	adds	r3, #1
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fdf8 	bl	8000dbc <WIZCHIP_READ>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b29c      	uxth	r4, r3
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	3301      	adds	r3, #1
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fdeb 	bl	8000dbc <WIZCHIP_READ>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4423      	add	r3, r4
 80011ec:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80011ee:	89fb      	ldrh	r3, [r7, #14]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	3202      	adds	r2, #2
 80011f8:	00d2      	lsls	r2, r2, #3
 80011fa:	4413      	add	r3, r2
 80011fc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80011fe:	88bb      	ldrh	r3, [r7, #4]
 8001200:	461a      	mov	r2, r3
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	68b8      	ldr	r0, [r7, #8]
 8001206:	f7ff fed3 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800120a:	89fa      	ldrh	r2, [r7, #14]
 800120c:	88bb      	ldrh	r3, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	3301      	adds	r3, #1
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800121e:	461a      	mov	r2, r3
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	b29b      	uxth	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f7ff fe12 	bl	8000e54 <WIZCHIP_WRITE>
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	3301      	adds	r3, #1
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800123c:	461a      	mov	r2, r3
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	4610      	mov	r0, r2
 8001246:	f7ff fe05 	bl	8000e54 <WIZCHIP_WRITE>
 800124a:	e000      	b.n	800124e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800124c:	bf00      	nop
}
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}

08001254 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d048      	beq.n	8001304 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	3301      	adds	r3, #1
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fd9c 	bl	8000dbc <WIZCHIP_READ>
 8001284:	4603      	mov	r3, r0
 8001286:	b29b      	uxth	r3, r3
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b29c      	uxth	r4, r3
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	3301      	adds	r3, #1
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fd8f 	bl	8000dbc <WIZCHIP_READ>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4423      	add	r3, r4
 80012a4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	3203      	adds	r2, #3
 80012b0:	00d2      	lsls	r2, r2, #3
 80012b2:	4413      	add	r3, r2
 80012b4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	461a      	mov	r2, r3
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f7ff fe17 	bl	8000ef0 <WIZCHIP_READ_BUF>
   ptr += len;
 80012c2:	89fa      	ldrh	r2, [r7, #14]
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	3301      	adds	r3, #1
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80012d6:	461a      	mov	r2, r3
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4619      	mov	r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f7ff fdb6 	bl	8000e54 <WIZCHIP_WRITE>
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	3301      	adds	r3, #1
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80012f4:	461a      	mov	r2, r3
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	4610      	mov	r0, r2
 80012fe:	f7ff fda9 	bl	8000e54 <WIZCHIP_WRITE>
 8001302:	e000      	b.n	8001306 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001304:	bf00      	nop
}
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}

0800130c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	4613      	mov	r3, r2
 800131a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	3301      	adds	r3, #1
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fd45 	bl	8000dbc <WIZCHIP_READ>
 8001332:	4603      	mov	r3, r0
 8001334:	b29b      	uxth	r3, r3
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b29c      	uxth	r4, r3
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	3301      	adds	r3, #1
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fd38 	bl	8000dbc <WIZCHIP_READ>
 800134c:	4603      	mov	r3, r0
 800134e:	b29b      	uxth	r3, r3
 8001350:	4423      	add	r3, r4
 8001352:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8001354:	89fa      	ldrh	r2, [r7, #14]
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	3301      	adds	r3, #1
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001368:	461a      	mov	r2, r3
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	b29b      	uxth	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f7ff fd6d 	bl	8000e54 <WIZCHIP_WRITE>
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	3301      	adds	r3, #1
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001386:	461a      	mov	r2, r3
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4619      	mov	r1, r3
 800138e:	4610      	mov	r0, r2
 8001390:	f7ff fd60 	bl	8000e54 <WIZCHIP_WRITE>
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}

0800139c <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 80013a0:	2204      	movs	r2, #4
 80013a2:	4909      	ldr	r1, [pc, #36]	; (80013c8 <default_ip_assign+0x2c>)
 80013a4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80013a8:	f7ff fe02 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 80013ac:	2204      	movs	r2, #4
 80013ae:	4907      	ldr	r1, [pc, #28]	; (80013cc <default_ip_assign+0x30>)
 80013b0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80013b4:	f7ff fdfc 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80013b8:	2204      	movs	r2, #4
 80013ba:	4905      	ldr	r1, [pc, #20]	; (80013d0 <default_ip_assign+0x34>)
 80013bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013c0:	f7ff fdf6 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000025c 	.word	0x2000025c
 80013cc:	20000264 	.word	0x20000264
 80013d0:	20000260 	.word	0x20000260

080013d4 <default_ip_update>:

/* The default handler of ip chaged */
void default_ip_update(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fd3a 	bl	8000e54 <WIZCHIP_WRITE>
   getMR(); // for delay
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fceb 	bl	8000dbc <WIZCHIP_READ>
   default_ip_assign();
 80013e6:	f7ff ffd9 	bl	800139c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80013ea:	2206      	movs	r2, #6
 80013ec:	4903      	ldr	r1, [pc, #12]	; (80013fc <default_ip_update+0x28>)
 80013ee:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80013f2:	f7ff fddd 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200002a4 	.word	0x200002a4

08001400 <default_ip_conflict>:

/* The default handler of ip chaged */
void default_ip_conflict(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff fd24 	bl	8000e54 <WIZCHIP_WRITE>
	getMR(); // for delay
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff fcd5 	bl	8000dbc <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8001412:	2206      	movs	r2, #6
 8001414:	4903      	ldr	r1, [pc, #12]	; (8001424 <default_ip_conflict+0x24>)
 8001416:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800141a:	f7ff fdc9 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200002a4 	.word	0x200002a4

08001428 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <reg_dhcp_cbfunc+0x4c>)
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <reg_dhcp_cbfunc+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <reg_dhcp_cbfunc+0x54>)
 800143c:	4a10      	ldr	r2, [pc, #64]	; (8001480 <reg_dhcp_cbfunc+0x58>)
 800143e:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <reg_dhcp_cbfunc+0x5c>)
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <reg_dhcp_cbfunc+0x60>)
 8001444:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <reg_dhcp_cbfunc+0x2a>
 800144c:	4a09      	ldr	r2, [pc, #36]	; (8001474 <reg_dhcp_cbfunc+0x4c>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <reg_dhcp_cbfunc+0x36>
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <reg_dhcp_cbfunc+0x54>)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <reg_dhcp_cbfunc+0x42>
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <reg_dhcp_cbfunc+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	20000010 	.word	0x20000010
 8001478:	0800139d 	.word	0x0800139d
 800147c:	20000014 	.word	0x20000014
 8001480:	080013d5 	.word	0x080013d5
 8001484:	20000018 	.word	0x20000018
 8001488:	08001401 	.word	0x08001401

0800148c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8001492:	463b      	mov	r3, r7
 8001494:	2206      	movs	r2, #6
 8001496:	4619      	mov	r1, r3
 8001498:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800149c:	f7ff fd28 	bl	8000ef0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 80014a0:	4b72      	ldr	r3, [pc, #456]	; (800166c <makeDHCPMSG+0x1e0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 80014a8:	4b70      	ldr	r3, [pc, #448]	; (800166c <makeDHCPMSG+0x1e0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 80014b0:	4b6e      	ldr	r3, [pc, #440]	; (800166c <makeDHCPMSG+0x1e0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2206      	movs	r2, #6
 80014b6:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 80014b8:	4b6c      	ldr	r3, [pc, #432]	; (800166c <makeDHCPMSG+0x1e0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2200      	movs	r2, #0
 80014be:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80014c0:	4b6a      	ldr	r3, [pc, #424]	; (800166c <makeDHCPMSG+0x1e0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3304      	adds	r3, #4
 80014c6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80014c8:	4b69      	ldr	r3, [pc, #420]	; (8001670 <makeDHCPMSG+0x1e4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0e1b      	lsrs	r3, r3, #24
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <makeDHCPMSG+0x1e4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0c1a      	lsrs	r2, r3, #16
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <makeDHCPMSG+0x1e4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0a1a      	lsrs	r2, r3, #8
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3302      	adds	r3, #2
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80014f0:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <makeDHCPMSG+0x1e4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3303      	adds	r3, #3
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80014fc:	4b5b      	ldr	r3, [pc, #364]	; (800166c <makeDHCPMSG+0x1e0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2200      	movs	r2, #0
 8001502:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8001504:	4b59      	ldr	r3, [pc, #356]	; (800166c <makeDHCPMSG+0x1e0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	330a      	adds	r3, #10
 800150a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3301      	adds	r3, #1
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 800151a:	4b54      	ldr	r3, [pc, #336]	; (800166c <makeDHCPMSG+0x1e0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <makeDHCPMSG+0x1e0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 800152a:	4b50      	ldr	r3, [pc, #320]	; (800166c <makeDHCPMSG+0x1e0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2200      	movs	r2, #0
 8001530:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8001532:	4b4e      	ldr	r3, [pc, #312]	; (800166c <makeDHCPMSG+0x1e0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 800153a:	4b4c      	ldr	r3, [pc, #304]	; (800166c <makeDHCPMSG+0x1e0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8001542:	4b4a      	ldr	r3, [pc, #296]	; (800166c <makeDHCPMSG+0x1e0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <makeDHCPMSG+0x1e0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <makeDHCPMSG+0x1e0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2200      	movs	r2, #0
 8001558:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 800155a:	4b44      	ldr	r3, [pc, #272]	; (800166c <makeDHCPMSG+0x1e0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2200      	movs	r2, #0
 8001560:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <makeDHCPMSG+0x1e0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 800156a:	4b40      	ldr	r3, [pc, #256]	; (800166c <makeDHCPMSG+0x1e0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8001572:	4b3e      	ldr	r3, [pc, #248]	; (800166c <makeDHCPMSG+0x1e0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <makeDHCPMSG+0x1e0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <makeDHCPMSG+0x1e0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2200      	movs	r2, #0
 8001588:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <makeDHCPMSG+0x1e0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8001592:	4b36      	ldr	r3, [pc, #216]	; (800166c <makeDHCPMSG+0x1e0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <makeDHCPMSG+0x1e0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a35      	ldr	r2, [pc, #212]	; (8001674 <makeDHCPMSG+0x1e8>)
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <makeDHCPMSG+0x1e0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a32      	ldr	r2, [pc, #200]	; (8001674 <makeDHCPMSG+0x1e8>)
 80015aa:	7852      	ldrb	r2, [r2, #1]
 80015ac:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <makeDHCPMSG+0x1e0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a30      	ldr	r2, [pc, #192]	; (8001674 <makeDHCPMSG+0x1e8>)
 80015b4:	7892      	ldrb	r2, [r2, #2]
 80015b6:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <makeDHCPMSG+0x1e0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a2d      	ldr	r2, [pc, #180]	; (8001674 <makeDHCPMSG+0x1e8>)
 80015be:	78d2      	ldrb	r2, [r2, #3]
 80015c0:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <makeDHCPMSG+0x1e0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a2b      	ldr	r2, [pc, #172]	; (8001674 <makeDHCPMSG+0x1e8>)
 80015c8:	7912      	ldrb	r2, [r2, #4]
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <makeDHCPMSG+0x1e0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a28      	ldr	r2, [pc, #160]	; (8001674 <makeDHCPMSG+0x1e8>)
 80015d4:	7952      	ldrb	r2, [r2, #5]
 80015d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80015da:	2306      	movs	r3, #6
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e008      	b.n	80015f2 <makeDHCPMSG+0x166>
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <makeDHCPMSG+0x1e0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	4413      	add	r3, r2
 80015e8:	2200      	movs	r2, #0
 80015ea:	771a      	strb	r2, [r3, #28]
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	3301      	adds	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d9f3      	bls.n	80015e0 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e009      	b.n	8001612 <makeDHCPMSG+0x186>
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <makeDHCPMSG+0x1e0>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4413      	add	r3, r2
 8001606:	2200      	movs	r2, #0
 8001608:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b3f      	cmp	r3, #63	; 0x3f
 8001616:	d9f2      	bls.n	80015fe <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e009      	b.n	8001632 <makeDHCPMSG+0x1a6>
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <makeDHCPMSG+0x1e0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4413      	add	r3, r2
 8001626:	2200      	movs	r2, #0
 8001628:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	3301      	adds	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	daf1      	bge.n	800161e <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <makeDHCPMSG+0x1e0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2263      	movs	r2, #99	; 0x63
 8001640:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <makeDHCPMSG+0x1e0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2282      	movs	r2, #130	; 0x82
 800164a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <makeDHCPMSG+0x1e0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2253      	movs	r2, #83	; 0x53
 8001654:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <makeDHCPMSG+0x1e0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2263      	movs	r2, #99	; 0x63
 800165e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200002b4 	.word	0x200002b4
 8001670:	200002ac 	.word	0x200002ac
 8001674:	200002a4 	.word	0x200002a4

08001678 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8001682:	f7ff ff03 	bl	800148c <makeDHCPMSG>

   k = 4;     // beacaue MAGIC_COOKIE already made by makeDHCPMSG()
 8001686:	2304      	movs	r3, #4
 8001688:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800168a:	4baa      	ldr	r3, [pc, #680]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	80b9      	strh	r1, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	2235      	movs	r2, #53	; 0x35
 8001698:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800169c:	4ba5      	ldr	r3, [pc, #660]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	1c59      	adds	r1, r3, #1
 80016a4:	80b9      	strh	r1, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80016ae:	4ba1      	ldr	r3, [pc, #644]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	88bb      	ldrh	r3, [r7, #4]
 80016b4:	1c59      	adds	r1, r3, #1
 80016b6:	80b9      	strh	r1, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80016c0:	4b9c      	ldr	r3, [pc, #624]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	1c59      	adds	r1, r3, #1
 80016c8:	80b9      	strh	r1, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	223d      	movs	r2, #61	; 0x3d
 80016ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80016d2:	4b98      	ldr	r3, [pc, #608]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	1c59      	adds	r1, r3, #1
 80016da:	80b9      	strh	r1, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	2207      	movs	r2, #7
 80016e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80016e4:	4b93      	ldr	r3, [pc, #588]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	1c59      	adds	r1, r3, #1
 80016ec:	80b9      	strh	r1, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80016f6:	4b8f      	ldr	r3, [pc, #572]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	1c59      	adds	r1, r3, #1
 80016fe:	80b9      	strh	r1, [r7, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	4b8d      	ldr	r3, [pc, #564]	; (8001938 <send_DHCP_DISCOVER+0x2c0>)
 8001704:	7819      	ldrb	r1, [r3, #0]
 8001706:	1813      	adds	r3, r2, r0
 8001708:	460a      	mov	r2, r1
 800170a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800170e:	4b89      	ldr	r3, [pc, #548]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	1c59      	adds	r1, r3, #1
 8001716:	80b9      	strh	r1, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	4b87      	ldr	r3, [pc, #540]	; (8001938 <send_DHCP_DISCOVER+0x2c0>)
 800171c:	7859      	ldrb	r1, [r3, #1]
 800171e:	1813      	adds	r3, r2, r0
 8001720:	460a      	mov	r2, r1
 8001722:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001726:	4b83      	ldr	r3, [pc, #524]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	88bb      	ldrh	r3, [r7, #4]
 800172c:	1c59      	adds	r1, r3, #1
 800172e:	80b9      	strh	r1, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	4b81      	ldr	r3, [pc, #516]	; (8001938 <send_DHCP_DISCOVER+0x2c0>)
 8001734:	7899      	ldrb	r1, [r3, #2]
 8001736:	1813      	adds	r3, r2, r0
 8001738:	460a      	mov	r2, r1
 800173a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800173e:	4b7d      	ldr	r3, [pc, #500]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	1c59      	adds	r1, r3, #1
 8001746:	80b9      	strh	r1, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	4b7b      	ldr	r3, [pc, #492]	; (8001938 <send_DHCP_DISCOVER+0x2c0>)
 800174c:	78d9      	ldrb	r1, [r3, #3]
 800174e:	1813      	adds	r3, r2, r0
 8001750:	460a      	mov	r2, r1
 8001752:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	1c59      	adds	r1, r3, #1
 800175e:	80b9      	strh	r1, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	4b75      	ldr	r3, [pc, #468]	; (8001938 <send_DHCP_DISCOVER+0x2c0>)
 8001764:	7919      	ldrb	r1, [r3, #4]
 8001766:	1813      	adds	r3, r2, r0
 8001768:	460a      	mov	r2, r1
 800176a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800176e:	4b71      	ldr	r3, [pc, #452]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	88bb      	ldrh	r3, [r7, #4]
 8001774:	1c59      	adds	r1, r3, #1
 8001776:	80b9      	strh	r1, [r7, #4]
 8001778:	4618      	mov	r0, r3
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <send_DHCP_DISCOVER+0x2c0>)
 800177c:	7959      	ldrb	r1, [r3, #5]
 800177e:	1813      	adds	r3, r2, r0
 8001780:	460a      	mov	r2, r1
 8001782:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001786:	4b6b      	ldr	r3, [pc, #428]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	1c59      	adds	r1, r3, #1
 800178e:	80b9      	strh	r1, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	220c      	movs	r2, #12
 8001794:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001798:	4b66      	ldr	r3, [pc, #408]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	1c59      	adds	r1, r3, #1
 80017a0:	80b9      	strh	r1, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	e00f      	b.n	80017d0 <send_DHCP_DISCOVER+0x158>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80017b0:	88f9      	ldrh	r1, [r7, #6]
 80017b2:	4b60      	ldr	r3, [pc, #384]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	88bb      	ldrh	r3, [r7, #4]
 80017b8:	1c58      	adds	r0, r3, #1
 80017ba:	80b8      	strh	r0, [r7, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <send_DHCP_DISCOVER+0x2c4>)
 80017c0:	5c59      	ldrb	r1, [r3, r1]
 80017c2:	1813      	adds	r3, r2, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	3301      	adds	r3, #1
 80017ce:	80fb      	strh	r3, [r7, #6]
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4a5a      	ldr	r2, [pc, #360]	; (800193c <send_DHCP_DISCOVER+0x2c4>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ea      	bne.n	80017b0 <send_DHCP_DISCOVER+0x138>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80017da:	4b56      	ldr	r3, [pc, #344]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	88bb      	ldrh	r3, [r7, #4]
 80017e0:	1c59      	adds	r1, r3, #1
 80017e2:	80b9      	strh	r1, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	4b54      	ldr	r3, [pc, #336]	; (8001938 <send_DHCP_DISCOVER+0x2c0>)
 80017e8:	78d9      	ldrb	r1, [r3, #3]
 80017ea:	1813      	adds	r3, r2, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80017f2:	4b50      	ldr	r3, [pc, #320]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	1c59      	adds	r1, r3, #1
 80017fa:	80b9      	strh	r1, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <send_DHCP_DISCOVER+0x2c0>)
 8001800:	7919      	ldrb	r1, [r3, #4]
 8001802:	1813      	adds	r3, r2, r0
 8001804:	460a      	mov	r2, r1
 8001806:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800180a:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	1c59      	adds	r1, r3, #1
 8001812:	80b9      	strh	r1, [r7, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <send_DHCP_DISCOVER+0x2c0>)
 8001818:	7959      	ldrb	r1, [r3, #5]
 800181a:	1813      	adds	r3, r2, r0
 800181c:	460a      	mov	r2, r1
 800181e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b2d9      	uxtb	r1, r3
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	88b8      	ldrh	r0, [r7, #4]
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	3304      	adds	r3, #4
 8001830:	1ac3      	subs	r3, r0, r3
 8001832:	3103      	adds	r1, #3
 8001834:	b2c9      	uxtb	r1, r1
 8001836:	4413      	add	r3, r2
 8001838:	460a      	mov	r2, r1
 800183a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	1c59      	adds	r1, r3, #1
 8001846:	80b9      	strh	r1, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	2237      	movs	r2, #55	; 0x37
 800184c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001850:	4b38      	ldr	r3, [pc, #224]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	1c59      	adds	r1, r3, #1
 8001858:	80b9      	strh	r1, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	2206      	movs	r2, #6
 800185e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	88bb      	ldrh	r3, [r7, #4]
 8001868:	1c59      	adds	r1, r3, #1
 800186a:	80b9      	strh	r1, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	2201      	movs	r2, #1
 8001870:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001874:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	1c59      	adds	r1, r3, #1
 800187c:	80b9      	strh	r1, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	2203      	movs	r2, #3
 8001882:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	1c59      	adds	r1, r3, #1
 800188e:	80b9      	strh	r1, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2206      	movs	r2, #6
 8001894:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	88bb      	ldrh	r3, [r7, #4]
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	80b9      	strh	r1, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	220f      	movs	r2, #15
 80018a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	1c59      	adds	r1, r3, #1
 80018b2:	80b9      	strh	r1, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	223a      	movs	r2, #58	; 0x3a
 80018b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	80b9      	strh	r1, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	223b      	movs	r2, #59	; 0x3b
 80018ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	88bb      	ldrh	r3, [r7, #4]
 80018d4:	1c59      	adds	r1, r3, #1
 80018d6:	80b9      	strh	r1, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	22ff      	movs	r2, #255	; 0xff
 80018dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80018e0:	88bb      	ldrh	r3, [r7, #4]
 80018e2:	80fb      	strh	r3, [r7, #6]
 80018e4:	e009      	b.n	80018fa <send_DHCP_DISCOVER+0x282>
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4413      	add	r3, r2
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	3301      	adds	r3, #1
 80018f8:	80fb      	strh	r3, [r7, #6]
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001900:	d3f1      	bcc.n	80018e6 <send_DHCP_DISCOVER+0x26e>

	// send broadcasting packet
	ip[0] = 255;
 8001902:	23ff      	movs	r3, #255	; 0xff
 8001904:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001906:	23ff      	movs	r3, #255	; 0xff
 8001908:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800190a:	23ff      	movs	r3, #255	; 0xff
 800190c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800190e:	23ff      	movs	r3, #255	; 0xff
 8001910:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <send_DHCP_DISCOVER+0x2c8>)
 8001914:	7818      	ldrb	r0, [r3, #0]
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <send_DHCP_DISCOVER+0x2bc>)
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	463a      	mov	r2, r7
 800191c:	2343      	movs	r3, #67	; 0x43
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	4613      	mov	r3, r2
 8001922:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001926:	f001 f95f 	bl	8002be8 <sendto>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200002b4 	.word	0x200002b4
 8001938:	200002a4 	.word	0x200002a4
 800193c:	20000008 	.word	0x20000008
 8001940:	200002b8 	.word	0x200002b8

08001944 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800194e:	f7ff fd9d 	bl	800148c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <send_DHCP_REQUEST+0x7c>)
 8001954:	f993 3000 	ldrsb.w	r3, [r3]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d004      	beq.n	8001966 <send_DHCP_REQUEST+0x22>
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <send_DHCP_REQUEST+0x7c>)
 800195e:	f993 3000 	ldrsb.w	r3, [r3]
 8001962:	2b04      	cmp	r3, #4
 8001964:	d134      	bne.n	80019d0 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <send_DHCP_REQUEST+0x80>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	330a      	adds	r3, #10
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <send_DHCP_REQUEST+0x80>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	330a      	adds	r3, #10
 8001976:	3301      	adds	r3, #1
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <send_DHCP_REQUEST+0x80>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <send_DHCP_REQUEST+0x84>)
 8001982:	7812      	ldrb	r2, [r2, #0]
 8001984:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <send_DHCP_REQUEST+0x80>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <send_DHCP_REQUEST+0x84>)
 800198c:	7852      	ldrb	r2, [r2, #1]
 800198e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <send_DHCP_REQUEST+0x80>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <send_DHCP_REQUEST+0x84>)
 8001996:	7892      	ldrb	r2, [r2, #2]
 8001998:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <send_DHCP_REQUEST+0x80>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <send_DHCP_REQUEST+0x84>)
 80019a0:	78d2      	ldrb	r2, [r2, #3]
 80019a2:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <send_DHCP_REQUEST+0x88>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <send_DHCP_REQUEST+0x88>)
 80019ac:	785b      	ldrb	r3, [r3, #1]
 80019ae:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <send_DHCP_REQUEST+0x88>)
 80019b2:	789b      	ldrb	r3, [r3, #2]
 80019b4:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <send_DHCP_REQUEST+0x88>)
 80019b8:	78db      	ldrb	r3, [r3, #3]
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	e010      	b.n	80019e0 <send_DHCP_REQUEST+0x9c>
 80019be:	bf00      	nop
 80019c0:	2000026c 	.word	0x2000026c
 80019c4:	200002b4 	.word	0x200002b4
 80019c8:	2000025c 	.word	0x2000025c
 80019cc:	200002b0 	.word	0x200002b0
   }
   else
   {
   	ip[0] = 255;
 80019d0:	23ff      	movs	r3, #255	; 0xff
 80019d2:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80019d4:	23ff      	movs	r3, #255	; 0xff
 80019d6:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80019d8:	23ff      	movs	r3, #255	; 0xff
 80019da:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80019dc:	23ff      	movs	r3, #255	; 0xff
 80019de:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // beacaue MAGIC_COOKIE already made by makeDHCPMSG()
 80019e0:	2304      	movs	r3, #4
 80019e2:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80019e4:	4b8d      	ldr	r3, [pc, #564]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	897b      	ldrh	r3, [r7, #10]
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	8179      	strh	r1, [r7, #10]
 80019ee:	4413      	add	r3, r2
 80019f0:	2235      	movs	r2, #53	; 0x35
 80019f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80019f6:	4b89      	ldr	r3, [pc, #548]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	897b      	ldrh	r3, [r7, #10]
 80019fc:	1c59      	adds	r1, r3, #1
 80019fe:	8179      	strh	r1, [r7, #10]
 8001a00:	4413      	add	r3, r2
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001a08:	4b84      	ldr	r3, [pc, #528]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	897b      	ldrh	r3, [r7, #10]
 8001a0e:	1c59      	adds	r1, r3, #1
 8001a10:	8179      	strh	r1, [r7, #10]
 8001a12:	4413      	add	r3, r2
 8001a14:	2203      	movs	r2, #3
 8001a16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001a1a:	4b80      	ldr	r3, [pc, #512]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	897b      	ldrh	r3, [r7, #10]
 8001a20:	1c59      	adds	r1, r3, #1
 8001a22:	8179      	strh	r1, [r7, #10]
 8001a24:	4413      	add	r3, r2
 8001a26:	223d      	movs	r2, #61	; 0x3d
 8001a28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001a2c:	4b7b      	ldr	r3, [pc, #492]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	1c59      	adds	r1, r3, #1
 8001a34:	8179      	strh	r1, [r7, #10]
 8001a36:	4413      	add	r3, r2
 8001a38:	2207      	movs	r2, #7
 8001a3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001a3e:	4b77      	ldr	r3, [pc, #476]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	897b      	ldrh	r3, [r7, #10]
 8001a44:	1c59      	adds	r1, r3, #1
 8001a46:	8179      	strh	r1, [r7, #10]
 8001a48:	4413      	add	r3, r2
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001a50:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	897b      	ldrh	r3, [r7, #10]
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	8179      	strh	r1, [r7, #10]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <send_DHCP_REQUEST+0x2dc>)
 8001a5e:	7819      	ldrb	r1, [r3, #0]
 8001a60:	1813      	adds	r3, r2, r0
 8001a62:	460a      	mov	r2, r1
 8001a64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001a68:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	897b      	ldrh	r3, [r7, #10]
 8001a6e:	1c59      	adds	r1, r3, #1
 8001a70:	8179      	strh	r1, [r7, #10]
 8001a72:	4618      	mov	r0, r3
 8001a74:	4b6a      	ldr	r3, [pc, #424]	; (8001c20 <send_DHCP_REQUEST+0x2dc>)
 8001a76:	7859      	ldrb	r1, [r3, #1]
 8001a78:	1813      	adds	r3, r2, r0
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001a80:	4b66      	ldr	r3, [pc, #408]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	897b      	ldrh	r3, [r7, #10]
 8001a86:	1c59      	adds	r1, r3, #1
 8001a88:	8179      	strh	r1, [r7, #10]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4b64      	ldr	r3, [pc, #400]	; (8001c20 <send_DHCP_REQUEST+0x2dc>)
 8001a8e:	7899      	ldrb	r1, [r3, #2]
 8001a90:	1813      	adds	r3, r2, r0
 8001a92:	460a      	mov	r2, r1
 8001a94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001a98:	4b60      	ldr	r3, [pc, #384]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	897b      	ldrh	r3, [r7, #10]
 8001a9e:	1c59      	adds	r1, r3, #1
 8001aa0:	8179      	strh	r1, [r7, #10]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4b5e      	ldr	r3, [pc, #376]	; (8001c20 <send_DHCP_REQUEST+0x2dc>)
 8001aa6:	78d9      	ldrb	r1, [r3, #3]
 8001aa8:	1813      	adds	r3, r2, r0
 8001aaa:	460a      	mov	r2, r1
 8001aac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001ab0:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	897b      	ldrh	r3, [r7, #10]
 8001ab6:	1c59      	adds	r1, r3, #1
 8001ab8:	8179      	strh	r1, [r7, #10]
 8001aba:	4618      	mov	r0, r3
 8001abc:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <send_DHCP_REQUEST+0x2dc>)
 8001abe:	7919      	ldrb	r1, [r3, #4]
 8001ac0:	1813      	adds	r3, r2, r0
 8001ac2:	460a      	mov	r2, r1
 8001ac4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001ac8:	4b54      	ldr	r3, [pc, #336]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	897b      	ldrh	r3, [r7, #10]
 8001ace:	1c59      	adds	r1, r3, #1
 8001ad0:	8179      	strh	r1, [r7, #10]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <send_DHCP_REQUEST+0x2dc>)
 8001ad6:	7959      	ldrb	r1, [r3, #5]
 8001ad8:	1813      	adds	r3, r2, r0
 8001ada:	460a      	mov	r2, r1
 8001adc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2bff      	cmp	r3, #255	; 0xff
 8001ae4:	f040 8084 	bne.w	8001bf0 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	897b      	ldrh	r3, [r7, #10]
 8001aee:	1c59      	adds	r1, r3, #1
 8001af0:	8179      	strh	r1, [r7, #10]
 8001af2:	4413      	add	r3, r2
 8001af4:	2232      	movs	r2, #50	; 0x32
 8001af6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001afa:	4b48      	ldr	r3, [pc, #288]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	1c59      	adds	r1, r3, #1
 8001b02:	8179      	strh	r1, [r7, #10]
 8001b04:	4413      	add	r3, r2
 8001b06:	2204      	movs	r2, #4
 8001b08:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	897b      	ldrh	r3, [r7, #10]
 8001b12:	1c59      	adds	r1, r3, #1
 8001b14:	8179      	strh	r1, [r7, #10]
 8001b16:	4618      	mov	r0, r3
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <send_DHCP_REQUEST+0x2e0>)
 8001b1a:	7819      	ldrb	r1, [r3, #0]
 8001b1c:	1813      	adds	r3, r2, r0
 8001b1e:	460a      	mov	r2, r1
 8001b20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001b24:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	1c59      	adds	r1, r3, #1
 8001b2c:	8179      	strh	r1, [r7, #10]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <send_DHCP_REQUEST+0x2e0>)
 8001b32:	7859      	ldrb	r1, [r3, #1]
 8001b34:	1813      	adds	r3, r2, r0
 8001b36:	460a      	mov	r2, r1
 8001b38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001b3c:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	897b      	ldrh	r3, [r7, #10]
 8001b42:	1c59      	adds	r1, r3, #1
 8001b44:	8179      	strh	r1, [r7, #10]
 8001b46:	4618      	mov	r0, r3
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <send_DHCP_REQUEST+0x2e0>)
 8001b4a:	7899      	ldrb	r1, [r3, #2]
 8001b4c:	1813      	adds	r3, r2, r0
 8001b4e:	460a      	mov	r2, r1
 8001b50:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001b54:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	897b      	ldrh	r3, [r7, #10]
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	8179      	strh	r1, [r7, #10]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <send_DHCP_REQUEST+0x2e0>)
 8001b62:	78d9      	ldrb	r1, [r3, #3]
 8001b64:	1813      	adds	r3, r2, r0
 8001b66:	460a      	mov	r2, r1
 8001b68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	897b      	ldrh	r3, [r7, #10]
 8001b72:	1c59      	adds	r1, r3, #1
 8001b74:	8179      	strh	r1, [r7, #10]
 8001b76:	4413      	add	r3, r2
 8001b78:	2236      	movs	r2, #54	; 0x36
 8001b7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001b7e:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	1c59      	adds	r1, r3, #1
 8001b86:	8179      	strh	r1, [r7, #10]
 8001b88:	4413      	add	r3, r2
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	897b      	ldrh	r3, [r7, #10]
 8001b96:	1c59      	adds	r1, r3, #1
 8001b98:	8179      	strh	r1, [r7, #10]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <send_DHCP_REQUEST+0x2e4>)
 8001b9e:	7819      	ldrb	r1, [r3, #0]
 8001ba0:	1813      	adds	r3, r2, r0
 8001ba2:	460a      	mov	r2, r1
 8001ba4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	897b      	ldrh	r3, [r7, #10]
 8001bae:	1c59      	adds	r1, r3, #1
 8001bb0:	8179      	strh	r1, [r7, #10]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <send_DHCP_REQUEST+0x2e4>)
 8001bb6:	7859      	ldrb	r1, [r3, #1]
 8001bb8:	1813      	adds	r3, r2, r0
 8001bba:	460a      	mov	r2, r1
 8001bbc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	897b      	ldrh	r3, [r7, #10]
 8001bc6:	1c59      	adds	r1, r3, #1
 8001bc8:	8179      	strh	r1, [r7, #10]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <send_DHCP_REQUEST+0x2e4>)
 8001bce:	7899      	ldrb	r1, [r3, #2]
 8001bd0:	1813      	adds	r3, r2, r0
 8001bd2:	460a      	mov	r2, r1
 8001bd4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	897b      	ldrh	r3, [r7, #10]
 8001bde:	1c59      	adds	r1, r3, #1
 8001be0:	8179      	strh	r1, [r7, #10]
 8001be2:	4618      	mov	r0, r3
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <send_DHCP_REQUEST+0x2e4>)
 8001be6:	78d9      	ldrb	r1, [r3, #3]
 8001be8:	1813      	adds	r3, r2, r0
 8001bea:	460a      	mov	r2, r1
 8001bec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	897b      	ldrh	r3, [r7, #10]
 8001bf6:	1c59      	adds	r1, r3, #1
 8001bf8:	8179      	strh	r1, [r7, #10]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <send_DHCP_REQUEST+0x2d8>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	897b      	ldrh	r3, [r7, #10]
 8001c08:	1c59      	adds	r1, r3, #1
 8001c0a:	8179      	strh	r1, [r7, #10]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	e019      	b.n	8001c4e <send_DHCP_REQUEST+0x30a>
 8001c1a:	bf00      	nop
 8001c1c:	200002b4 	.word	0x200002b4
 8001c20:	200002a4 	.word	0x200002a4
 8001c24:	2000025c 	.word	0x2000025c
 8001c28:	200002b0 	.word	0x200002b0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	897b      	ldrh	r3, [r7, #10]
 8001c32:	1c59      	adds	r1, r3, #1
 8001c34:	8179      	strh	r1, [r7, #10]
 8001c36:	4618      	mov	r0, r3
 8001c38:	4964      	ldr	r1, [pc, #400]	; (8001dcc <send_DHCP_REQUEST+0x488>)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	440b      	add	r3, r1
 8001c3e:	7819      	ldrb	r1, [r3, #0]
 8001c40:	1813      	adds	r3, r2, r0
 8001c42:	460a      	mov	r2, r1
 8001c44:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4a5f      	ldr	r2, [pc, #380]	; (8001dcc <send_DHCP_REQUEST+0x488>)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1e8      	bne.n	8001c2c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	1c59      	adds	r1, r3, #1
 8001c62:	8179      	strh	r1, [r7, #10]
 8001c64:	4618      	mov	r0, r3
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <send_DHCP_REQUEST+0x48c>)
 8001c68:	78d9      	ldrb	r1, [r3, #3]
 8001c6a:	1813      	adds	r3, r2, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001c72:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	897b      	ldrh	r3, [r7, #10]
 8001c78:	1c59      	adds	r1, r3, #1
 8001c7a:	8179      	strh	r1, [r7, #10]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <send_DHCP_REQUEST+0x48c>)
 8001c80:	7919      	ldrb	r1, [r3, #4]
 8001c82:	1813      	adds	r3, r2, r0
 8001c84:	460a      	mov	r2, r1
 8001c86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001c8a:	4b4f      	ldr	r3, [pc, #316]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	1c59      	adds	r1, r3, #1
 8001c92:	8179      	strh	r1, [r7, #10]
 8001c94:	4618      	mov	r0, r3
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <send_DHCP_REQUEST+0x48c>)
 8001c98:	7959      	ldrb	r1, [r3, #5]
 8001c9a:	1813      	adds	r3, r2, r0
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	b2d9      	uxtb	r1, r3
 8001ca6:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	8978      	ldrh	r0, [r7, #10]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	1ac3      	subs	r3, r0, r3
 8001cb2:	3103      	adds	r1, #3
 8001cb4:	b2c9      	uxtb	r1, r1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	460a      	mov	r2, r1
 8001cba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001cbe:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	897b      	ldrh	r3, [r7, #10]
 8001cc4:	1c59      	adds	r1, r3, #1
 8001cc6:	8179      	strh	r1, [r7, #10]
 8001cc8:	4413      	add	r3, r2
 8001cca:	2237      	movs	r2, #55	; 0x37
 8001ccc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	1c59      	adds	r1, r3, #1
 8001cd8:	8179      	strh	r1, [r7, #10]
 8001cda:	4413      	add	r3, r2
 8001cdc:	2208      	movs	r2, #8
 8001cde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001ce2:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	1c59      	adds	r1, r3, #1
 8001cea:	8179      	strh	r1, [r7, #10]
 8001cec:	4413      	add	r3, r2
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001cf4:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	1c59      	adds	r1, r3, #1
 8001cfc:	8179      	strh	r1, [r7, #10]
 8001cfe:	4413      	add	r3, r2
 8001d00:	2203      	movs	r2, #3
 8001d02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	1c59      	adds	r1, r3, #1
 8001d0e:	8179      	strh	r1, [r7, #10]
 8001d10:	4413      	add	r3, r2
 8001d12:	2206      	movs	r2, #6
 8001d14:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	1c59      	adds	r1, r3, #1
 8001d20:	8179      	strh	r1, [r7, #10]
 8001d22:	4413      	add	r3, r2
 8001d24:	220f      	movs	r2, #15
 8001d26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001d2a:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	8179      	strh	r1, [r7, #10]
 8001d34:	4413      	add	r3, r2
 8001d36:	223a      	movs	r2, #58	; 0x3a
 8001d38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	897b      	ldrh	r3, [r7, #10]
 8001d42:	1c59      	adds	r1, r3, #1
 8001d44:	8179      	strh	r1, [r7, #10]
 8001d46:	4413      	add	r3, r2
 8001d48:	223b      	movs	r2, #59	; 0x3b
 8001d4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	1c59      	adds	r1, r3, #1
 8001d56:	8179      	strh	r1, [r7, #10]
 8001d58:	4413      	add	r3, r2
 8001d5a:	221f      	movs	r2, #31
 8001d5c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	897b      	ldrh	r3, [r7, #10]
 8001d66:	1c59      	adds	r1, r3, #1
 8001d68:	8179      	strh	r1, [r7, #10]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2221      	movs	r2, #33	; 0x21
 8001d6e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	897b      	ldrh	r3, [r7, #10]
 8001d78:	1c59      	adds	r1, r3, #1
 8001d7a:	8179      	strh	r1, [r7, #10]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	22ff      	movs	r2, #255	; 0xff
 8001d80:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001d84:	897b      	ldrh	r3, [r7, #10]
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e009      	b.n	8001d9e <send_DHCP_REQUEST+0x45a>
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4413      	add	r3, r2
 8001d92:	33ec      	adds	r3, #236	; 0xec
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001da4:	dbf1      	blt.n	8001d8a <send_DHCP_REQUEST+0x446>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <send_DHCP_REQUEST+0x490>)
 8001da8:	7818      	ldrb	r0, [r3, #0]
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <send_DHCP_REQUEST+0x484>)
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	1d3a      	adds	r2, r7, #4
 8001db0:	2343      	movs	r3, #67	; 0x43
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001dba:	f000 ff15 	bl	8002be8 <sendto>

}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200002b4 	.word	0x200002b4
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	200002a4 	.word	0x200002a4
 8001dd4:	200002b8 	.word	0x200002b8

08001dd8 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001de2:	f7ff fb53 	bl	800148c <makeDHCPMSG>

   k = 4;      // beacaue MAGIC_COOKIE already made by makeDHCPMSG()
 8001de6:	2304      	movs	r3, #4
 8001de8:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001dea:	4b9f      	ldr	r3, [pc, #636]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330a      	adds	r3, #10
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001df4:	4b9c      	ldr	r3, [pc, #624]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	330a      	adds	r3, #10
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001e00:	4b99      	ldr	r3, [pc, #612]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	897b      	ldrh	r3, [r7, #10]
 8001e06:	1c59      	adds	r1, r3, #1
 8001e08:	8179      	strh	r1, [r7, #10]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	2235      	movs	r2, #53	; 0x35
 8001e0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001e12:	4b95      	ldr	r3, [pc, #596]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	897b      	ldrh	r3, [r7, #10]
 8001e18:	1c59      	adds	r1, r3, #1
 8001e1a:	8179      	strh	r1, [r7, #10]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001e24:	4b90      	ldr	r3, [pc, #576]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	897b      	ldrh	r3, [r7, #10]
 8001e2a:	1c59      	adds	r1, r3, #1
 8001e2c:	8179      	strh	r1, [r7, #10]
 8001e2e:	4413      	add	r3, r2
 8001e30:	2204      	movs	r2, #4
 8001e32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001e36:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	1c59      	adds	r1, r3, #1
 8001e3e:	8179      	strh	r1, [r7, #10]
 8001e40:	4413      	add	r3, r2
 8001e42:	223d      	movs	r2, #61	; 0x3d
 8001e44:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001e48:	4b87      	ldr	r3, [pc, #540]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	897b      	ldrh	r3, [r7, #10]
 8001e4e:	1c59      	adds	r1, r3, #1
 8001e50:	8179      	strh	r1, [r7, #10]
 8001e52:	4413      	add	r3, r2
 8001e54:	2207      	movs	r2, #7
 8001e56:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001e5a:	4b83      	ldr	r3, [pc, #524]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	1c59      	adds	r1, r3, #1
 8001e62:	8179      	strh	r1, [r7, #10]
 8001e64:	4413      	add	r3, r2
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001e6c:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	897b      	ldrh	r3, [r7, #10]
 8001e72:	1c59      	adds	r1, r3, #1
 8001e74:	8179      	strh	r1, [r7, #10]
 8001e76:	4618      	mov	r0, r3
 8001e78:	4b7c      	ldr	r3, [pc, #496]	; (800206c <send_DHCP_DECLINE+0x294>)
 8001e7a:	7819      	ldrb	r1, [r3, #0]
 8001e7c:	1813      	adds	r3, r2, r0
 8001e7e:	460a      	mov	r2, r1
 8001e80:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001e84:	4b78      	ldr	r3, [pc, #480]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	897b      	ldrh	r3, [r7, #10]
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	8179      	strh	r1, [r7, #10]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4b76      	ldr	r3, [pc, #472]	; (800206c <send_DHCP_DECLINE+0x294>)
 8001e92:	7859      	ldrb	r1, [r3, #1]
 8001e94:	1813      	adds	r3, r2, r0
 8001e96:	460a      	mov	r2, r1
 8001e98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001e9c:	4b72      	ldr	r3, [pc, #456]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	897b      	ldrh	r3, [r7, #10]
 8001ea2:	1c59      	adds	r1, r3, #1
 8001ea4:	8179      	strh	r1, [r7, #10]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4b70      	ldr	r3, [pc, #448]	; (800206c <send_DHCP_DECLINE+0x294>)
 8001eaa:	7899      	ldrb	r1, [r3, #2]
 8001eac:	1813      	adds	r3, r2, r0
 8001eae:	460a      	mov	r2, r1
 8001eb0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001eb4:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	897b      	ldrh	r3, [r7, #10]
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	8179      	strh	r1, [r7, #10]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <send_DHCP_DECLINE+0x294>)
 8001ec2:	78d9      	ldrb	r1, [r3, #3]
 8001ec4:	1813      	adds	r3, r2, r0
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	897b      	ldrh	r3, [r7, #10]
 8001ed2:	1c59      	adds	r1, r3, #1
 8001ed4:	8179      	strh	r1, [r7, #10]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	4b64      	ldr	r3, [pc, #400]	; (800206c <send_DHCP_DECLINE+0x294>)
 8001eda:	7919      	ldrb	r1, [r3, #4]
 8001edc:	1813      	adds	r3, r2, r0
 8001ede:	460a      	mov	r2, r1
 8001ee0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001ee4:	4b60      	ldr	r3, [pc, #384]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	897b      	ldrh	r3, [r7, #10]
 8001eea:	1c59      	adds	r1, r3, #1
 8001eec:	8179      	strh	r1, [r7, #10]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4b5e      	ldr	r3, [pc, #376]	; (800206c <send_DHCP_DECLINE+0x294>)
 8001ef2:	7959      	ldrb	r1, [r3, #5]
 8001ef4:	1813      	adds	r3, r2, r0
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001efc:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	897b      	ldrh	r3, [r7, #10]
 8001f02:	1c59      	adds	r1, r3, #1
 8001f04:	8179      	strh	r1, [r7, #10]
 8001f06:	4413      	add	r3, r2
 8001f08:	2232      	movs	r2, #50	; 0x32
 8001f0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001f0e:	4b56      	ldr	r3, [pc, #344]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	1c59      	adds	r1, r3, #1
 8001f16:	8179      	strh	r1, [r7, #10]
 8001f18:	4413      	add	r3, r2
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001f20:	4b51      	ldr	r3, [pc, #324]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	897b      	ldrh	r3, [r7, #10]
 8001f26:	1c59      	adds	r1, r3, #1
 8001f28:	8179      	strh	r1, [r7, #10]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <send_DHCP_DECLINE+0x298>)
 8001f2e:	7819      	ldrb	r1, [r3, #0]
 8001f30:	1813      	adds	r3, r2, r0
 8001f32:	460a      	mov	r2, r1
 8001f34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	897b      	ldrh	r3, [r7, #10]
 8001f3e:	1c59      	adds	r1, r3, #1
 8001f40:	8179      	strh	r1, [r7, #10]
 8001f42:	4618      	mov	r0, r3
 8001f44:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <send_DHCP_DECLINE+0x298>)
 8001f46:	7859      	ldrb	r1, [r3, #1]
 8001f48:	1813      	adds	r3, r2, r0
 8001f4a:	460a      	mov	r2, r1
 8001f4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001f50:	4b45      	ldr	r3, [pc, #276]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	897b      	ldrh	r3, [r7, #10]
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	8179      	strh	r1, [r7, #10]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	4b44      	ldr	r3, [pc, #272]	; (8002070 <send_DHCP_DECLINE+0x298>)
 8001f5e:	7899      	ldrb	r1, [r3, #2]
 8001f60:	1813      	adds	r3, r2, r0
 8001f62:	460a      	mov	r2, r1
 8001f64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001f68:	4b3f      	ldr	r3, [pc, #252]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	897b      	ldrh	r3, [r7, #10]
 8001f6e:	1c59      	adds	r1, r3, #1
 8001f70:	8179      	strh	r1, [r7, #10]
 8001f72:	4618      	mov	r0, r3
 8001f74:	4b3e      	ldr	r3, [pc, #248]	; (8002070 <send_DHCP_DECLINE+0x298>)
 8001f76:	78d9      	ldrb	r1, [r3, #3]
 8001f78:	1813      	adds	r3, r2, r0
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	897b      	ldrh	r3, [r7, #10]
 8001f86:	1c59      	adds	r1, r3, #1
 8001f88:	8179      	strh	r1, [r7, #10]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	2236      	movs	r2, #54	; 0x36
 8001f8e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001f92:	4b35      	ldr	r3, [pc, #212]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	897b      	ldrh	r3, [r7, #10]
 8001f98:	1c59      	adds	r1, r3, #1
 8001f9a:	8179      	strh	r1, [r7, #10]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001fa4:	4b30      	ldr	r3, [pc, #192]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	897b      	ldrh	r3, [r7, #10]
 8001faa:	1c59      	adds	r1, r3, #1
 8001fac:	8179      	strh	r1, [r7, #10]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	4b30      	ldr	r3, [pc, #192]	; (8002074 <send_DHCP_DECLINE+0x29c>)
 8001fb2:	7819      	ldrb	r1, [r3, #0]
 8001fb4:	1813      	adds	r3, r2, r0
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	897b      	ldrh	r3, [r7, #10]
 8001fc2:	1c59      	adds	r1, r3, #1
 8001fc4:	8179      	strh	r1, [r7, #10]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <send_DHCP_DECLINE+0x29c>)
 8001fca:	7859      	ldrb	r1, [r3, #1]
 8001fcc:	1813      	adds	r3, r2, r0
 8001fce:	460a      	mov	r2, r1
 8001fd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	897b      	ldrh	r3, [r7, #10]
 8001fda:	1c59      	adds	r1, r3, #1
 8001fdc:	8179      	strh	r1, [r7, #10]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <send_DHCP_DECLINE+0x29c>)
 8001fe2:	7899      	ldrb	r1, [r3, #2]
 8001fe4:	1813      	adds	r3, r2, r0
 8001fe6:	460a      	mov	r2, r1
 8001fe8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	1c59      	adds	r1, r3, #1
 8001ff4:	8179      	strh	r1, [r7, #10]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <send_DHCP_DECLINE+0x29c>)
 8001ffa:	78d9      	ldrb	r1, [r3, #3]
 8001ffc:	1813      	adds	r3, r2, r0
 8001ffe:	460a      	mov	r2, r1
 8002000:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <send_DHCP_DECLINE+0x290>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	1c59      	adds	r1, r3, #1
 800200c:	8179      	strh	r1, [r7, #10]
 800200e:	4413      	add	r3, r2
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002016:	897b      	ldrh	r3, [r7, #10]
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e009      	b.n	8002030 <send_DHCP_DECLINE+0x258>
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <send_DHCP_DECLINE+0x290>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	33ec      	adds	r3, #236	; 0xec
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3301      	adds	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002036:	dbf1      	blt.n	800201c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8002038:	23ff      	movs	r3, #255	; 0xff
 800203a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800203c:	23ff      	movs	r3, #255	; 0xff
 800203e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8002040:	23ff      	movs	r3, #255	; 0xff
 8002042:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8002044:	23ff      	movs	r3, #255	; 0xff
 8002046:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <send_DHCP_DECLINE+0x2a0>)
 800204a:	7818      	ldrb	r0, [r3, #0]
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <send_DHCP_DECLINE+0x290>)
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	1d3a      	adds	r2, r7, #4
 8002052:	2343      	movs	r3, #67	; 0x43
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	4613      	mov	r3, r2
 8002058:	f44f 7209 	mov.w	r2, #548	; 0x224
 800205c:	f000 fdc4 	bl	8002be8 <sendto>
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200002b4 	.word	0x200002b4
 800206c:	200002a4 	.word	0x200002a4
 8002070:	2000025c 	.word	0x2000025c
 8002074:	200002b0 	.word	0x200002b0
 8002078:	200002b8 	.word	0x200002b8

0800207c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af02      	add	r7, sp, #8
	uint8_t * p;
	uint8_t * e;
	uint8_t type;
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8002082:	4b90      	ldr	r3, [pc, #576]	; (80022c4 <parseDHCPMSG+0x248>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f83d 	bl	8001106 <getSn_RX_RSR>
 800208c:	4603      	mov	r3, r0
 800208e:	823b      	strh	r3, [r7, #16]
 8002090:	8a3b      	ldrh	r3, [r7, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d011      	beq.n	80020ba <parseDHCPMSG+0x3e>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8002096:	4b8b      	ldr	r3, [pc, #556]	; (80022c4 <parseDHCPMSG+0x248>)
 8002098:	7818      	ldrb	r0, [r3, #0]
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <parseDHCPMSG+0x24c>)
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	1d3c      	adds	r4, r7, #4
 80020a0:	8a3a      	ldrh	r2, [r7, #16]
 80020a2:	1cbb      	adds	r3, r7, #2
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	4623      	mov	r3, r4
 80020a8:	f000 fed4 	bl	8002e54 <recvfrom>
 80020ac:	4603      	mov	r3, r0
 80020ae:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	2b43      	cmp	r3, #67	; 0x43
 80020b4:	f040 8147 	bne.w	8002346 <parseDHCPMSG+0x2ca>
 80020b8:	e001      	b.n	80020be <parseDHCPMSG+0x42>
   else return 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e145      	b.n	800234a <parseDHCPMSG+0x2ce>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80020be:	4b82      	ldr	r3, [pc, #520]	; (80022c8 <parseDHCPMSG+0x24c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	7f1a      	ldrb	r2, [r3, #28]
 80020c4:	4b81      	ldr	r3, [pc, #516]	; (80022cc <parseDHCPMSG+0x250>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d124      	bne.n	8002116 <parseDHCPMSG+0x9a>
 80020cc:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <parseDHCPMSG+0x24c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	7f5a      	ldrb	r2, [r3, #29]
 80020d2:	4b7e      	ldr	r3, [pc, #504]	; (80022cc <parseDHCPMSG+0x250>)
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d11d      	bne.n	8002116 <parseDHCPMSG+0x9a>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80020da:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <parseDHCPMSG+0x24c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	7f9a      	ldrb	r2, [r3, #30]
 80020e0:	4b7a      	ldr	r3, [pc, #488]	; (80022cc <parseDHCPMSG+0x250>)
 80020e2:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d116      	bne.n	8002116 <parseDHCPMSG+0x9a>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80020e8:	4b77      	ldr	r3, [pc, #476]	; (80022c8 <parseDHCPMSG+0x24c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	7fda      	ldrb	r2, [r3, #31]
 80020ee:	4b77      	ldr	r3, [pc, #476]	; (80022cc <parseDHCPMSG+0x250>)
 80020f0:	78db      	ldrb	r3, [r3, #3]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d10f      	bne.n	8002116 <parseDHCPMSG+0x9a>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80020f6:	4b74      	ldr	r3, [pc, #464]	; (80022c8 <parseDHCPMSG+0x24c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f893 2020 	ldrb.w	r2, [r3, #32]
 80020fe:	4b73      	ldr	r3, [pc, #460]	; (80022cc <parseDHCPMSG+0x250>)
 8002100:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d107      	bne.n	8002116 <parseDHCPMSG+0x9a>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002106:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <parseDHCPMSG+0x24c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800210e:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <parseDHCPMSG+0x250>)
 8002110:	795b      	ldrb	r3, [r3, #5]
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <parseDHCPMSG+0x9e>
         return 0;
 8002116:	2300      	movs	r3, #0
 8002118:	e117      	b.n	800234a <parseDHCPMSG+0x2ce>
      type = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	74fb      	strb	r3, [r7, #19]
		p = (uint8_t *)(&pDHCPMSG->op);
 800211e:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <parseDHCPMSG+0x24c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	33f0      	adds	r3, #240	; 0xf0
 8002128:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800212a:	8a3b      	ldrh	r3, [r7, #16]
 800212c:	3bf0      	subs	r3, #240	; 0xf0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4413      	add	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8002134:	e102      	b.n	800233c <parseDHCPMSG+0x2c0>

			switch ( *p ) {
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b06      	cmp	r3, #6
 800213c:	d06e      	beq.n	800221c <parseDHCPMSG+0x1a0>
 800213e:	2b06      	cmp	r3, #6
 8002140:	dc06      	bgt.n	8002150 <parseDHCPMSG+0xd4>
 8002142:	2b01      	cmp	r3, #1
 8002144:	d025      	beq.n	8002192 <parseDHCPMSG+0x116>
 8002146:	2b03      	cmp	r3, #3
 8002148:	d042      	beq.n	80021d0 <parseDHCPMSG+0x154>
 800214a:	2b00      	cmp	r3, #0
 800214c:	d011      	beq.n	8002172 <parseDHCPMSG+0xf6>
 800214e:	e0e8      	b.n	8002322 <parseDHCPMSG+0x2a6>
 8002150:	2b35      	cmp	r3, #53	; 0x35
 8002152:	d012      	beq.n	800217a <parseDHCPMSG+0xfe>
 8002154:	2b35      	cmp	r3, #53	; 0x35
 8002156:	dc03      	bgt.n	8002160 <parseDHCPMSG+0xe4>
 8002158:	2b33      	cmp	r3, #51	; 0x33
 800215a:	f000 8085 	beq.w	8002268 <parseDHCPMSG+0x1ec>
 800215e:	e0e0      	b.n	8002322 <parseDHCPMSG+0x2a6>
 8002160:	2b36      	cmp	r3, #54	; 0x36
 8002162:	f000 80bd 	beq.w	80022e0 <parseDHCPMSG+0x264>
 8002166:	2bff      	cmp	r3, #255	; 0xff
 8002168:	f040 80db 	bne.w	8002322 <parseDHCPMSG+0x2a6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	617b      	str	r3, [r7, #20]
   				break;
 8002170:	e0e4      	b.n	800233c <parseDHCPMSG+0x2c0>
            case padOption :
   				p++;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3301      	adds	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
   				break;
 8002178:	e0e0      	b.n	800233c <parseDHCPMSG+0x2c0>
   			case dhcpMessageType :
   				p++;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
   				p++;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	617a      	str	r2, [r7, #20]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	74fb      	strb	r3, [r7, #19]
   				break;
 8002190:	e0d4      	b.n	800233c <parseDHCPMSG+0x2c0>
   			case subnetMask :
   				p++;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
   				p++;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	617a      	str	r2, [r7, #20]
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <parseDHCPMSG+0x254>)
 80021a8:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	617a      	str	r2, [r7, #20]
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <parseDHCPMSG+0x254>)
 80021b4:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	617a      	str	r2, [r7, #20]
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <parseDHCPMSG+0x254>)
 80021c0:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	617a      	str	r2, [r7, #20]
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <parseDHCPMSG+0x254>)
 80021cc:	70da      	strb	r2, [r3, #3]
   				break;
 80021ce:	e0b5      	b.n	800233c <parseDHCPMSG+0x2c0>
   			case routersOnSubnet :
   				p++;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3301      	adds	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	617a      	str	r2, [r7, #20]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	617a      	str	r2, [r7, #20]
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <parseDHCPMSG+0x258>)
 80021ea:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	617a      	str	r2, [r7, #20]
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <parseDHCPMSG+0x258>)
 80021f6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	617a      	str	r2, [r7, #20]
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <parseDHCPMSG+0x258>)
 8002202:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	617a      	str	r2, [r7, #20]
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <parseDHCPMSG+0x258>)
 800220e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	3b04      	subs	r3, #4
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4413      	add	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
   				break;
 800221a:	e08f      	b.n	800233c <parseDHCPMSG+0x2c0>
   			case dns :
   				p++;                  
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	617a      	str	r2, [r7, #20]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	617a      	str	r2, [r7, #20]
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <parseDHCPMSG+0x25c>)
 8002236:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	617a      	str	r2, [r7, #20]
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parseDHCPMSG+0x25c>)
 8002242:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	617a      	str	r2, [r7, #20]
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <parseDHCPMSG+0x25c>)
 800224e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	617a      	str	r2, [r7, #20]
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <parseDHCPMSG+0x25c>)
 800225a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800225c:	7afb      	ldrb	r3, [r7, #11]
 800225e:	3b04      	subs	r3, #4
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	4413      	add	r3, r2
 8002264:	617b      	str	r3, [r7, #20]
   				break;
 8002266:	e069      	b.n	800233c <parseDHCPMSG+0x2c0>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3301      	adds	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	617a      	str	r2, [r7, #20]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	617a      	str	r2, [r7, #20]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <parseDHCPMSG+0x260>)
 8002284:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <parseDHCPMSG+0x260>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	021a      	lsls	r2, r3, #8
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	1c59      	adds	r1, r3, #1
 8002290:	6179      	str	r1, [r7, #20]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4413      	add	r3, r2
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <parseDHCPMSG+0x260>)
 8002298:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <parseDHCPMSG+0x260>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	021a      	lsls	r2, r3, #8
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	6179      	str	r1, [r7, #20]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <parseDHCPMSG+0x260>)
 80022ac:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <parseDHCPMSG+0x260>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	021a      	lsls	r2, r3, #8
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	1c59      	adds	r1, r3, #1
 80022b8:	6179      	str	r1, [r7, #20]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <parseDHCPMSG+0x260>)
 80022c0:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 80022c2:	e03b      	b.n	800233c <parseDHCPMSG+0x2c0>
 80022c4:	200002b8 	.word	0x200002b8
 80022c8:	200002b4 	.word	0x200002b4
 80022cc:	200002a4 	.word	0x200002a4
 80022d0:	20000264 	.word	0x20000264
 80022d4:	20000260 	.word	0x20000260
 80022d8:	20000268 	.word	0x20000268
 80022dc:	20000000 	.word	0x20000000
   			case dhcpServerIdentifier :
   				p++;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	617a      	str	r2, [r7, #20]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	617a      	str	r2, [r7, #20]
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <parseDHCPMSG+0x2d8>)
 80022fa:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	617a      	str	r2, [r7, #20]
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <parseDHCPMSG+0x2d8>)
 8002306:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	617a      	str	r2, [r7, #20]
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <parseDHCPMSG+0x2d8>)
 8002312:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	617a      	str	r2, [r7, #20]
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <parseDHCPMSG+0x2d8>)
 800231e:	70da      	strb	r2, [r3, #3]
   				break;
 8002320:	e00c      	b.n	800233c <parseDHCPMSG+0x2c0>
   			default :
   				p++;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	617a      	str	r2, [r7, #20]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8002332:	7afb      	ldrb	r3, [r7, #11]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
   				break;
 800233a:	bf00      	nop
		while ( p < e ) {
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	429a      	cmp	r2, r3
 8002342:	f4ff aef8 	bcc.w	8002136 <parseDHCPMSG+0xba>
			} // switch
		} // while
	} // if
	return	type;
 8002346:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800234a:	4618      	mov	r0, r3
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd90      	pop	{r4, r7, pc}
 8002352:	bf00      	nop
 8002354:	200002b0 	.word	0x200002b0

08002358 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800235e:	4b7f      	ldr	r3, [pc, #508]	; (800255c <DHCP_run+0x204>)
 8002360:	f993 3000 	ldrsb.w	r3, [r3]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d101      	bne.n	800236c <DHCP_run+0x14>
 8002368:	2305      	movs	r3, #5
 800236a:	e0f3      	b.n	8002554 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 800236c:	4b7c      	ldr	r3, [pc, #496]	; (8002560 <DHCP_run+0x208>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	3301      	adds	r3, #1
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fd1e 	bl	8000dbc <WIZCHIP_READ>
 8002380:	4603      	mov	r3, r0
 8002382:	2b22      	cmp	r3, #34	; 0x22
 8002384:	d006      	beq.n	8002394 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8002386:	4b76      	ldr	r3, [pc, #472]	; (8002560 <DHCP_run+0x208>)
 8002388:	7818      	ldrb	r0, [r3, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	2244      	movs	r2, #68	; 0x44
 800238e:	2102      	movs	r1, #2
 8002390:	f000 faa6 	bl	80028e0 <socket>

	ret = DHCP_RUNNING;
 8002394:	2301      	movs	r3, #1
 8002396:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002398:	f7ff fe70 	bl	800207c <parseDHCPMSG>
 800239c:	4603      	mov	r3, r0
 800239e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80023a0:	4b6e      	ldr	r3, [pc, #440]	; (800255c <DHCP_run+0x204>)
 80023a2:	f993 3000 	ldrsb.w	r3, [r3]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	f200 80d0 	bhi.w	800254c <DHCP_run+0x1f4>
 80023ac:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <DHCP_run+0x5c>)
 80023ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b2:	bf00      	nop
 80023b4:	080023c9 	.word	0x080023c9
 80023b8:	080023ed 	.word	0x080023ed
 80023bc:	08002431 	.word	0x08002431
 80023c0:	08002481 	.word	0x08002481
 80023c4:	080024db 	.word	0x080024db
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80023c8:	4b66      	ldr	r3, [pc, #408]	; (8002564 <DHCP_run+0x20c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80023ce:	4b65      	ldr	r3, [pc, #404]	; (8002564 <DHCP_run+0x20c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80023d4:	4b63      	ldr	r3, [pc, #396]	; (8002564 <DHCP_run+0x20c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80023da:	4b62      	ldr	r3, [pc, #392]	; (8002564 <DHCP_run+0x20c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80023e0:	f7ff f94a 	bl	8001678 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80023e4:	4b5d      	ldr	r3, [pc, #372]	; (800255c <DHCP_run+0x204>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
   		break;
 80023ea:	e0b2      	b.n	8002552 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80023ec:	79bb      	ldrb	r3, [r7, #6]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d119      	bne.n	8002426 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80023f2:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <DHCP_run+0x210>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	7c1a      	ldrb	r2, [r3, #16]
 80023f8:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <DHCP_run+0x20c>)
 80023fa:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80023fc:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <DHCP_run+0x210>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	7c5a      	ldrb	r2, [r3, #17]
 8002402:	4b58      	ldr	r3, [pc, #352]	; (8002564 <DHCP_run+0x20c>)
 8002404:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002406:	4b58      	ldr	r3, [pc, #352]	; (8002568 <DHCP_run+0x210>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	7c9a      	ldrb	r2, [r3, #18]
 800240c:	4b55      	ldr	r3, [pc, #340]	; (8002564 <DHCP_run+0x20c>)
 800240e:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002410:	4b55      	ldr	r3, [pc, #340]	; (8002568 <DHCP_run+0x210>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	7cda      	ldrb	r2, [r3, #19]
 8002416:	4b53      	ldr	r3, [pc, #332]	; (8002564 <DHCP_run+0x20c>)
 8002418:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800241a:	f7ff fa93 	bl	8001944 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800241e:	4b4f      	ldr	r3, [pc, #316]	; (800255c <DHCP_run+0x204>)
 8002420:	2202      	movs	r2, #2
 8002422:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002424:	e095      	b.n	8002552 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002426:	f000 f8c1 	bl	80025ac <check_DHCP_timeout>
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
         break;
 800242e:	e090      	b.n	8002552 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	2b05      	cmp	r3, #5
 8002434:	d116      	bne.n	8002464 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8002436:	f000 f913 	bl	8002660 <check_DHCP_leasedIP>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8002440:	4b4a      	ldr	r3, [pc, #296]	; (800256c <DHCP_run+0x214>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4798      	blx	r3
					reset_DHCP_timeout();
 8002446:	f000 f9bd 	bl	80027c4 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800244a:	4b44      	ldr	r3, [pc, #272]	; (800255c <DHCP_run+0x204>)
 800244c:	2203      	movs	r2, #3
 800244e:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8002450:	e07f      	b.n	8002552 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8002452:	f000 f9b7 	bl	80027c4 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8002456:	4b46      	ldr	r3, [pc, #280]	; (8002570 <DHCP_run+0x218>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <DHCP_run+0x204>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
		break;
 8002462:	e076      	b.n	8002552 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002464:	79bb      	ldrb	r3, [r7, #6]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d105      	bne.n	8002476 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800246a:	f000 f9ab 	bl	80027c4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <DHCP_run+0x204>)
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
		break;
 8002474:	e06d      	b.n	8002552 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002476:	f000 f899 	bl	80025ac <check_DHCP_timeout>
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
		break;
 800247e:	e068      	b.n	8002552 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8002480:	2304      	movs	r3, #4
 8002482:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8002484:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <DHCP_run+0x21c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d060      	beq.n	8002550 <DHCP_run+0x1f8>
 800248e:	4b39      	ldr	r3, [pc, #228]	; (8002574 <DHCP_run+0x21c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	085a      	lsrs	r2, r3, #1
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <DHCP_run+0x220>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d259      	bcs.n	8002550 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80024a0:	4b30      	ldr	r3, [pc, #192]	; (8002564 <DHCP_run+0x20c>)
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	4b35      	ldr	r3, [pc, #212]	; (800257c <DHCP_run+0x224>)
 80024a6:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <DHCP_run+0x20c>)
 80024aa:	785a      	ldrb	r2, [r3, #1]
 80024ac:	4b33      	ldr	r3, [pc, #204]	; (800257c <DHCP_run+0x224>)
 80024ae:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80024b0:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <DHCP_run+0x20c>)
 80024b2:	789a      	ldrb	r2, [r3, #2]
 80024b4:	4b31      	ldr	r3, [pc, #196]	; (800257c <DHCP_run+0x224>)
 80024b6:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <DHCP_run+0x20c>)
 80024ba:	78da      	ldrb	r2, [r3, #3]
 80024bc:	4b2f      	ldr	r3, [pc, #188]	; (800257c <DHCP_run+0x224>)
 80024be:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80024c0:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <DHCP_run+0x228>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <DHCP_run+0x228>)
 80024c8:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80024ca:	f7ff fa3b 	bl	8001944 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80024ce:	f000 f979 	bl	80027c4 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80024d2:	4b22      	ldr	r3, [pc, #136]	; (800255c <DHCP_run+0x204>)
 80024d4:	2204      	movs	r2, #4
 80024d6:	701a      	strb	r2, [r3, #0]
			}
		break;
 80024d8:	e03a      	b.n	8002550 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80024da:	2304      	movs	r3, #4
 80024dc:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80024de:	79bb      	ldrb	r3, [r7, #6]
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d125      	bne.n	8002530 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <DHCP_run+0x22c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <DHCP_run+0x224>)
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <DHCP_run+0x20c>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d111      	bne.n	800251a <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <DHCP_run+0x224>)
 80024f8:	785a      	ldrb	r2, [r3, #1]
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <DHCP_run+0x20c>)
 80024fc:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80024fe:	429a      	cmp	r2, r3
 8002500:	d10b      	bne.n	800251a <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <DHCP_run+0x224>)
 8002504:	789a      	ldrb	r2, [r3, #2]
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <DHCP_run+0x20c>)
 8002508:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d105      	bne.n	800251a <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <DHCP_run+0x224>)
 8002510:	78da      	ldrb	r2, [r3, #3]
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <DHCP_run+0x20c>)
 8002514:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d004      	beq.n	8002524 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800251a:	2303      	movs	r3, #3
 800251c:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <DHCP_run+0x230>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002524:	f000 f94e 	bl	80027c4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <DHCP_run+0x204>)
 800252a:	2203      	movs	r2, #3
 800252c:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800252e:	e010      	b.n	8002552 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002530:	79bb      	ldrb	r3, [r7, #6]
 8002532:	2b06      	cmp	r3, #6
 8002534:	d105      	bne.n	8002542 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8002536:	f000 f945 	bl	80027c4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <DHCP_run+0x204>)
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
	   	break;
 8002540:	e007      	b.n	8002552 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002542:	f000 f833 	bl	80025ac <check_DHCP_timeout>
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
	   	break;
 800254a:	e002      	b.n	8002552 <DHCP_run+0x1fa>
		default :
   		break;
 800254c:	bf00      	nop
 800254e:	e000      	b.n	8002552 <DHCP_run+0x1fa>
		break;
 8002550:	bf00      	nop
	}

	return ret;
 8002552:	79fb      	ldrb	r3, [r7, #7]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	2000026c 	.word	0x2000026c
 8002560:	200002b8 	.word	0x200002b8
 8002564:	2000025c 	.word	0x2000025c
 8002568:	200002b4 	.word	0x200002b4
 800256c:	20000010 	.word	0x20000010
 8002570:	20000018 	.word	0x20000018
 8002574:	20000000 	.word	0x20000000
 8002578:	20000270 	.word	0x20000270
 800257c:	20000258 	.word	0x20000258
 8002580:	200002ac 	.word	0x200002ac
 8002584:	2000026d 	.word	0x2000026d
 8002588:	20000014 	.word	0x20000014

0800258c <DHCP_stop>:

void    DHCP_stop(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <DHCP_stop+0x18>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fab9 	bl	8002b0c <close>
   dhcp_state = STATE_DHCP_STOP;
 800259a:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <DHCP_stop+0x1c>)
 800259c:	2206      	movs	r2, #6
 800259e:	701a      	strb	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200002b8 	.word	0x200002b8
 80025a8:	2000026c 	.word	0x2000026c

080025ac <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80025b2:	2301      	movs	r3, #1
 80025b4:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <check_DHCP_timeout+0xa4>)
 80025b8:	f993 3000 	ldrsb.w	r3, [r3]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	dc2a      	bgt.n	8002616 <check_DHCP_timeout+0x6a>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <check_DHCP_timeout+0xa8>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <check_DHCP_timeout+0xac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d23c      	bcs.n	8002646 <check_DHCP_timeout+0x9a>

			switch ( dhcp_state ) {
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <check_DHCP_timeout+0xb0>)
 80025ce:	f993 3000 	ldrsb.w	r3, [r3]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d007      	beq.n	80025e6 <check_DHCP_timeout+0x3a>
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d008      	beq.n	80025ec <check_DHCP_timeout+0x40>
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d000      	beq.n	80025e0 <check_DHCP_timeout+0x34>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80025de:	e008      	b.n	80025f2 <check_DHCP_timeout+0x46>
					send_DHCP_DISCOVER();
 80025e0:	f7ff f84a 	bl	8001678 <send_DHCP_DISCOVER>
				break;
 80025e4:	e005      	b.n	80025f2 <check_DHCP_timeout+0x46>
					send_DHCP_REQUEST();
 80025e6:	f7ff f9ad 	bl	8001944 <send_DHCP_REQUEST>
				break;
 80025ea:	e002      	b.n	80025f2 <check_DHCP_timeout+0x46>
					send_DHCP_REQUEST();
 80025ec:	f7ff f9aa 	bl	8001944 <send_DHCP_REQUEST>
				break;
 80025f0:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <check_DHCP_timeout+0xac>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <check_DHCP_timeout+0xac>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	330a      	adds	r3, #10
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <check_DHCP_timeout+0xa8>)
 8002600:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <check_DHCP_timeout+0xa4>)
 8002604:	f993 3000 	ldrsb.w	r3, [r3]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3301      	adds	r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	b25a      	sxtb	r2, r3
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <check_DHCP_timeout+0xa4>)
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e017      	b.n	8002646 <check_DHCP_timeout+0x9a>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <check_DHCP_timeout+0xb0>)
 8002618:	f993 3000 	ldrsb.w	r3, [r3]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d00a      	beq.n	8002636 <check_DHCP_timeout+0x8a>
 8002620:	2b04      	cmp	r3, #4
 8002622:	d008      	beq.n	8002636 <check_DHCP_timeout+0x8a>
 8002624:	2b01      	cmp	r3, #1
 8002626:	d000      	beq.n	800262a <check_DHCP_timeout+0x7e>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8002628:	e00b      	b.n	8002642 <check_DHCP_timeout+0x96>
				dhcp_state = STATE_DHCP_INIT;
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <check_DHCP_timeout+0xb0>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002630:	2300      	movs	r3, #0
 8002632:	71fb      	strb	r3, [r7, #7]
				break;
 8002634:	e005      	b.n	8002642 <check_DHCP_timeout+0x96>
				send_DHCP_DISCOVER();
 8002636:	f7ff f81f 	bl	8001678 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <check_DHCP_timeout+0xb0>)
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
				break;
 8002640:	bf00      	nop
		}
		reset_DHCP_timeout();
 8002642:	f000 f8bf 	bl	80027c4 <reset_DHCP_timeout>
	}
	return ret;
 8002646:	79fb      	ldrb	r3, [r7, #7]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	2000026d 	.word	0x2000026d
 8002654:	20000004 	.word	0x20000004
 8002658:	20000270 	.word	0x20000270
 800265c:	2000026c 	.word	0x2000026c

08002660 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8002666:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800266a:	f7fe fba7 	bl	8000dbc <WIZCHIP_READ>
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8002672:	2103      	movs	r1, #3
 8002674:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002678:	f7fe fbec 	bl	8000e54 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <check_DHCP_leasedIP+0x6c>)
 800267e:	7818      	ldrb	r0, [r3, #0]
 8002680:	f241 3388 	movw	r3, #5000	; 0x1388
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <check_DHCP_leasedIP+0x70>)
 8002688:	2211      	movs	r2, #17
 800268a:	4912      	ldr	r1, [pc, #72]	; (80026d4 <check_DHCP_leasedIP+0x74>)
 800268c:	f000 faac 	bl	8002be8 <sendto>
 8002690:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	4619      	mov	r1, r3
 8002696:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800269a:	f7fe fbdb 	bl	8000e54 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f113 0f0d 	cmn.w	r3, #13
 80026a4:	d101      	bne.n	80026aa <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00c      	b.n	80026c4 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80026aa:	f7ff fb95 	bl	8001dd8 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <check_DHCP_leasedIP+0x78>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80026b4:	bf00      	nop
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <check_DHCP_leasedIP+0x78>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d9f9      	bls.n	80026b6 <check_DHCP_leasedIP+0x56>

		return 0;
 80026c2:	2300      	movs	r3, #0
	}
}	
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200002b8 	.word	0x200002b8
 80026d0:	2000025c 	.word	0x2000025c
 80026d4:	080092c8 	.word	0x080092c8
 80026d8:	20000270 	.word	0x20000270

080026dc <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80026ec:	2206      	movs	r2, #6
 80026ee:	492f      	ldr	r1, [pc, #188]	; (80027ac <DHCP_init+0xd0>)
 80026f0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80026f4:	f7fe fbfc 	bl	8000ef0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80026f8:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <DHCP_init+0xd0>)
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <DHCP_init+0xd0>)
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	4313      	orrs	r3, r2
 8002702:	b2da      	uxtb	r2, r3
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <DHCP_init+0xd0>)
 8002706:	789b      	ldrb	r3, [r3, #2]
 8002708:	4313      	orrs	r3, r2
 800270a:	b2da      	uxtb	r2, r3
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <DHCP_init+0xd0>)
 800270e:	78db      	ldrb	r3, [r3, #3]
 8002710:	4313      	orrs	r3, r2
 8002712:	b2da      	uxtb	r2, r3
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <DHCP_init+0xd0>)
 8002716:	791b      	ldrb	r3, [r3, #4]
 8002718:	4313      	orrs	r3, r2
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b23      	ldr	r3, [pc, #140]	; (80027ac <DHCP_init+0xd0>)
 800271e:	795b      	ldrb	r3, [r3, #5]
 8002720:	4313      	orrs	r3, r2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d117      	bne.n	8002758 <DHCP_init+0x7c>
   {
      // assing temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <DHCP_init+0xd0>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <DHCP_init+0xd0>)
 8002730:	2208      	movs	r2, #8
 8002732:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <DHCP_init+0xd0>)
 8002736:	22dc      	movs	r2, #220	; 0xdc
 8002738:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <DHCP_init+0xd0>)
 800273c:	2200      	movs	r2, #0
 800273e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <DHCP_init+0xd0>)
 8002742:	2200      	movs	r2, #0
 8002744:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <DHCP_init+0xd0>)
 8002748:	2200      	movs	r2, #0
 800274a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800274c:	2206      	movs	r2, #6
 800274e:	4917      	ldr	r1, [pc, #92]	; (80027ac <DHCP_init+0xd0>)
 8002750:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002754:	f7fe fc2c 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002758:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <DHCP_init+0xd4>)
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800275e:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <DHCP_init+0xd8>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <DHCP_init+0xdc>)
 8002766:	4a15      	ldr	r2, [pc, #84]	; (80027bc <DHCP_init+0xe0>)
 8002768:	601a      	str	r2, [r3, #0]

	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	2204      	movs	r2, #4
 8002770:	4619      	mov	r1, r3
 8002772:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002776:	f7fe fc1b 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
	setSIPR(zeroip);
 800277a:	f107 030c 	add.w	r3, r7, #12
 800277e:	2204      	movs	r2, #4
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002786:	f7fe fc13 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	2204      	movs	r2, #4
 8002790:	4619      	mov	r1, r3
 8002792:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002796:	f7fe fc0b 	bl	8000fb0 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800279a:	f000 f813 	bl	80027c4 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <DHCP_init+0xe4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200002a4 	.word	0x200002a4
 80027b0:	200002b8 	.word	0x200002b8
 80027b4:	200002b4 	.word	0x200002b4
 80027b8:	200002ac 	.word	0x200002ac
 80027bc:	12345678 	.word	0x12345678
 80027c0:	2000026c 	.word	0x2000026c

080027c4 <reset_DHCP_timeout>:


/* Rset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <reset_DHCP_timeout+0x20>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <reset_DHCP_timeout+0x24>)
 80027d0:	220a      	movs	r2, #10
 80027d2:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <reset_DHCP_timeout+0x28>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000270 	.word	0x20000270
 80027e8:	20000004 	.word	0x20000004
 80027ec:	2000026d 	.word	0x2000026d

080027f0 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <getIPfromDHCP+0x38>)
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3301      	adds	r3, #1
 8002804:	4a08      	ldr	r2, [pc, #32]	; (8002828 <getIPfromDHCP+0x38>)
 8002806:	7852      	ldrb	r2, [r2, #1]
 8002808:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3302      	adds	r3, #2
 800280e:	4a06      	ldr	r2, [pc, #24]	; (8002828 <getIPfromDHCP+0x38>)
 8002810:	7892      	ldrb	r2, [r2, #2]
 8002812:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3303      	adds	r3, #3
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <getIPfromDHCP+0x38>)
 800281a:	78d2      	ldrb	r2, [r2, #3]
 800281c:	701a      	strb	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	2000025c 	.word	0x2000025c

0800282c <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <getGWfromDHCP+0x38>)
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3301      	adds	r3, #1
 8002840:	4a08      	ldr	r2, [pc, #32]	; (8002864 <getGWfromDHCP+0x38>)
 8002842:	7852      	ldrb	r2, [r2, #1]
 8002844:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3302      	adds	r3, #2
 800284a:	4a06      	ldr	r2, [pc, #24]	; (8002864 <getGWfromDHCP+0x38>)
 800284c:	7892      	ldrb	r2, [r2, #2]
 800284e:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3303      	adds	r3, #3
 8002854:	4a03      	ldr	r2, [pc, #12]	; (8002864 <getGWfromDHCP+0x38>)
 8002856:	78d2      	ldrb	r2, [r2, #3]
 8002858:	701a      	strb	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	20000260 	.word	0x20000260

08002868 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <getSNfromDHCP+0x38>)
 8002872:	781a      	ldrb	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3301      	adds	r3, #1
 800287c:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <getSNfromDHCP+0x38>)
 800287e:	7852      	ldrb	r2, [r2, #1]
 8002880:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3302      	adds	r3, #2
 8002886:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <getSNfromDHCP+0x38>)
 8002888:	7892      	ldrb	r2, [r2, #2]
 800288a:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3303      	adds	r3, #3
 8002890:	4a03      	ldr	r2, [pc, #12]	; (80028a0 <getSNfromDHCP+0x38>)
 8002892:	78d2      	ldrb	r2, [r2, #3]
 8002894:	701a      	strb	r2, [r3, #0]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	20000264 	.word	0x20000264

080028a4 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <getDNSfromDHCP+0x38>)
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3301      	adds	r3, #1
 80028b8:	4a08      	ldr	r2, [pc, #32]	; (80028dc <getDNSfromDHCP+0x38>)
 80028ba:	7852      	ldrb	r2, [r2, #1]
 80028bc:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3302      	adds	r3, #2
 80028c2:	4a06      	ldr	r2, [pc, #24]	; (80028dc <getDNSfromDHCP+0x38>)
 80028c4:	7892      	ldrb	r2, [r2, #2]
 80028c6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3303      	adds	r3, #3
 80028cc:	4a03      	ldr	r2, [pc, #12]	; (80028dc <getDNSfromDHCP+0x38>)
 80028ce:	78d2      	ldrb	r2, [r2, #3]
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000268 	.word	0x20000268

080028e0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4604      	mov	r4, r0
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	4603      	mov	r3, r0
 80028f4:	71bb      	strb	r3, [r7, #6]
 80028f6:	460b      	mov	r3, r1
 80028f8:	80bb      	strh	r3, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d902      	bls.n	800290a <socket+0x2a>
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	e0f1      	b.n	8002aee <socket+0x20e>
	switch(protocol)
 800290a:	79bb      	ldrb	r3, [r7, #6]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d004      	beq.n	800291a <socket+0x3a>
 8002910:	2b01      	cmp	r3, #1
 8002912:	db10      	blt.n	8002936 <socket+0x56>
 8002914:	2b04      	cmp	r3, #4
 8002916:	dc0e      	bgt.n	8002936 <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002918:	e010      	b.n	800293c <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	2204      	movs	r2, #4
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002926:	f7fe fae3 	bl	8000ef0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <socket+0x5c>
 8002930:	f06f 0302 	mvn.w	r3, #2
 8002934:	e0db      	b.n	8002aee <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002936:	f06f 0304 	mvn.w	r3, #4
 800293a:	e0d8      	b.n	8002aee <socket+0x20e>
         break;
 800293c:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <socket+0x6e>
 8002948:	f06f 0305 	mvn.w	r3, #5
 800294c:	e0cf      	b.n	8002aee <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d025      	beq.n	80029a0 <socket+0xc0>
	{
   	switch(protocol)
 8002954:	79bb      	ldrb	r3, [r7, #6]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d002      	beq.n	8002960 <socket+0x80>
 800295a:	2b02      	cmp	r3, #2
 800295c:	d008      	beq.n	8002970 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800295e:	e024      	b.n	80029aa <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002966:	2b00      	cmp	r3, #0
 8002968:	d11c      	bne.n	80029a4 <socket+0xc4>
 800296a:	f06f 0305 	mvn.w	r3, #5
 800296e:	e0be      	b.n	8002aee <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800297a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db02      	blt.n	8002988 <socket+0xa8>
 8002982:	f06f 0305 	mvn.w	r3, #5
 8002986:	e0b2      	b.n	8002aee <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002996:	2b00      	cmp	r3, #0
 8002998:	db06      	blt.n	80029a8 <socket+0xc8>
 800299a:	f06f 0305 	mvn.w	r3, #5
 800299e:	e0a6      	b.n	8002aee <socket+0x20e>
   	}
   }
 80029a0:	bf00      	nop
 80029a2:	e002      	b.n	80029aa <socket+0xca>
   	      break;
 80029a4:	bf00      	nop
 80029a6:	e000      	b.n	80029aa <socket+0xca>
   	      break;
 80029a8:	bf00      	nop
	close(sn);
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f8ad 	bl	8002b0c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3301      	adds	r3, #1
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c0:	f023 030f 	bic.w	r3, r3, #15
 80029c4:	b25a      	sxtb	r2, r3
 80029c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	f7fe fa3f 	bl	8000e54 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80029d6:	88bb      	ldrh	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d110      	bne.n	80029fe <socket+0x11e>
	{
	   port = sock_any_port++;
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <socket+0x218>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	b291      	uxth	r1, r2
 80029e4:	4a44      	ldr	r2, [pc, #272]	; (8002af8 <socket+0x218>)
 80029e6:	8011      	strh	r1, [r2, #0]
 80029e8:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <socket+0x218>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d103      	bne.n	80029fe <socket+0x11e>
 80029f6:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <socket+0x218>)
 80029f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80029fc:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	3301      	adds	r3, #1
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	88bb      	ldrh	r3, [r7, #4]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	4610      	mov	r0, r2
 8002a18:	f7fe fa1c 	bl	8000e54 <WIZCHIP_WRITE>
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	3301      	adds	r3, #1
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	88bb      	ldrh	r3, [r7, #4]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f7fe fa0f 	bl	8000e54 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a42:	2101      	movs	r1, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fa05 	bl	8000e54 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002a4a:	bf00      	nop
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	3301      	adds	r3, #1
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe f9af 	bl	8000dbc <WIZCHIP_READ>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f3      	bne.n	8002a4c <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	2201      	movs	r2, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	b21b      	sxth	r3, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	b21a      	sxth	r2, r3
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <socket+0x21c>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b21b      	sxth	r3, r3
 8002a78:	4013      	ands	r3, r2
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <socket+0x21c>)
 8002a80:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 0201 	and.w	r2, r3, #1
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <socket+0x21c>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b21b      	sxth	r3, r3
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <socket+0x21c>)
 8002a9e:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <socket+0x220>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b21b      	sxth	r3, r3
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <socket+0x220>)
 8002abc:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <socket+0x224>)
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <socket+0x228>)
 8002acc:	2100      	movs	r1, #0
 8002ace:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002ad0:	bf00      	nop
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe f96c 	bl	8000dbc <WIZCHIP_READ>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f3      	beq.n	8002ad2 <socket+0x1f2>
   return (int8_t)sn;
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000001c 	.word	0x2000001c
 8002afc:	20000274 	.word	0x20000274
 8002b00:	20000276 	.word	0x20000276
 8002b04:	20000278 	.word	0x20000278
 8002b08:	20000288 	.word	0x20000288

08002b0c <close>:

int8_t close(uint8_t sn)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d902      	bls.n	8002b22 <close+0x16>
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	e055      	b.n	8002bce <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	3301      	adds	r3, #1
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b2e:	2110      	movs	r1, #16
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f98f 	bl	8000e54 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002b36:	bf00      	nop
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe f939 	bl	8000dbc <WIZCHIP_READ>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f3      	bne.n	8002b38 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	3301      	adds	r3, #1
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b5c:	211f      	movs	r1, #31
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe f978 	bl	8000e54 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	2201      	movs	r2, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	b21b      	sxth	r3, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <close+0xcc>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <close+0xcc>)
 8002b80:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2201      	movs	r2, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	b21a      	sxth	r2, r3
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <close+0xd0>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	4013      	ands	r3, r2
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <close+0xd0>)
 8002b9e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <close+0xd4>)
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <close+0xd8>)
 8002bae:	2100      	movs	r1, #0
 8002bb0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002bb2:	bf00      	nop
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	3301      	adds	r3, #1
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe f8fb 	bl	8000dbc <WIZCHIP_READ>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f3      	bne.n	8002bb4 <close+0xa8>
	return SOCK_OK;
 8002bcc:	2301      	movs	r3, #1
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000274 	.word	0x20000274
 8002bdc:	20000276 	.word	0x20000276
 8002be0:	20000278 	.word	0x20000278
 8002be4:	20000288 	.word	0x20000288

08002be8 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d902      	bls.n	8002c0e <sendto+0x26>
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0c:	e11b      	b.n	8002e46 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	3301      	adds	r3, #1
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f8d0 	bl	8000dbc <WIZCHIP_READ>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3b02      	subs	r3, #2
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d902      	bls.n	8002c2e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002c28:	f06f 0304 	mvn.w	r3, #4
 8002c2c:	e10b      	b.n	8002e46 <sendto+0x25e>
         break;
 8002c2e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002c30:	89bb      	ldrh	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <sendto+0x54>
 8002c36:	f06f 030d 	mvn.w	r3, #13
 8002c3a:	e104      	b.n	8002e46 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	3201      	adds	r2, #1
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	3202      	adds	r2, #2
 8002c58:	7812      	ldrb	r2, [r2, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	3203      	adds	r2, #3
 8002c66:	7812      	ldrb	r2, [r2, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10e      	bne.n	8002c90 <sendto+0xa8>
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3301      	adds	r3, #1
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f89e 	bl	8000dbc <WIZCHIP_READ>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d002      	beq.n	8002c90 <sendto+0xa8>
 8002c8a:	f06f 030b 	mvn.w	r3, #11
 8002c8e:	e0da      	b.n	8002e46 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002c90:	8c3b      	ldrh	r3, [r7, #32]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10e      	bne.n	8002cb4 <sendto+0xcc>
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f88c 	bl	8000dbc <WIZCHIP_READ>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d002      	beq.n	8002cb4 <sendto+0xcc>
 8002cae:	f06f 030a 	mvn.w	r3, #10
 8002cb2:	e0c8      	b.n	8002e46 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	3301      	adds	r3, #1
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe f87b 	bl	8000dbc <WIZCHIP_READ>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b42      	cmp	r3, #66	; 0x42
 8002cce:	d008      	beq.n	8002ce2 <sendto+0xfa>
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b22      	cmp	r3, #34	; 0x22
 8002cd4:	d005      	beq.n	8002ce2 <sendto+0xfa>
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	2b32      	cmp	r3, #50	; 0x32
 8002cda:	d002      	beq.n	8002ce2 <sendto+0xfa>
 8002cdc:	f06f 0306 	mvn.w	r3, #6
 8002ce0:	e0b1      	b.n	8002e46 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002cee:	2204      	movs	r2, #4
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe f95c 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d04:	461a      	mov	r2, r3
 8002d06:	8c3b      	ldrh	r3, [r7, #32]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f7fe f89f 	bl	8000e54 <WIZCHIP_WRITE>
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002d22:	461a      	mov	r2, r3
 8002d24:	8c3b      	ldrh	r3, [r7, #32]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f7fe f892 	bl	8000e54 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	3301      	adds	r3, #1
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f83d 	bl	8000dbc <WIZCHIP_READ>
 8002d42:	4603      	mov	r3, r0
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	029b      	lsls	r3, r3, #10
 8002d48:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002d4a:	89ba      	ldrh	r2, [r7, #12]
 8002d4c:	8abb      	ldrh	r3, [r7, #20]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d901      	bls.n	8002d56 <sendto+0x16e>
 8002d52:	8abb      	ldrh	r3, [r7, #20]
 8002d54:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe f989 	bl	8001070 <getSn_TX_FSR>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	3301      	adds	r3, #1
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe f824 	bl	8000dbc <WIZCHIP_READ>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <sendto+0x198>
 8002d7a:	f06f 0303 	mvn.w	r3, #3
 8002d7e:	e062      	b.n	8002e46 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002d80:	4b33      	ldr	r3, [pc, #204]	; (8002e50 <sendto+0x268>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	fa42 f303 	asr.w	r3, r2, r3
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <sendto+0x1b8>
 8002d94:	89ba      	ldrh	r2, [r7, #12]
 8002d96:	8abb      	ldrh	r3, [r7, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d901      	bls.n	8002da0 <sendto+0x1b8>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e052      	b.n	8002e46 <sendto+0x25e>
      if(len <= freesize) break;
 8002da0:	89ba      	ldrh	r2, [r7, #12]
 8002da2:	8abb      	ldrh	r3, [r7, #20]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d900      	bls.n	8002daa <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8002da8:	e7d5      	b.n	8002d56 <sendto+0x16e>
      if(len <= freesize) break;
 8002daa:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8002dac:	89ba      	ldrh	r2, [r7, #12]
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f9f2 	bl	800119c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dc4:	2120      	movs	r1, #32
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe f844 	bl	8000e54 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002dcc:	bf00      	nop
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd ffee 	bl	8000dbc <WIZCHIP_READ>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f3      	bne.n	8002dce <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	3301      	adds	r3, #1
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd ffe2 	bl	8000dbc <WIZCHIP_READ>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00c      	beq.n	8002e24 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	3301      	adds	r3, #1
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e16:	2110      	movs	r1, #16
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe f81b 	bl	8000e54 <WIZCHIP_WRITE>
         break;
 8002e1e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002e20:	89bb      	ldrh	r3, [r7, #12]
 8002e22:	e010      	b.n	8002e46 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0db      	beq.n	8002de6 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	3301      	adds	r3, #1
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e3a:	2108      	movs	r1, #8
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe f809 	bl	8000e54 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8002e42:	f06f 030c 	mvn.w	r3, #12
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000274 	.word	0x20000274

08002e54 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	4603      	mov	r3, r0
 8002e60:	73fb      	strb	r3, [r7, #15]
 8002e62:	4613      	mov	r3, r2
 8002e64:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d902      	bls.n	8002e76 <recvfrom+0x22>
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295
 8002e74:	e1d1      	b.n	800321a <recvfrom+0x3c6>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd ff9c 	bl	8000dbc <WIZCHIP_READ>
 8002e84:	4603      	mov	r3, r0
 8002e86:	777b      	strb	r3, [r7, #29]
 8002e88:	7f7b      	ldrb	r3, [r7, #29]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	3b02      	subs	r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d902      	bls.n	8002e9a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002e94:	f06f 0304 	mvn.w	r3, #4
 8002e98:	e1bf      	b.n	800321a <recvfrom+0x3c6>
         break;
 8002e9a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002e9c:	89bb      	ldrh	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <recvfrom+0x54>
 8002ea2:	f06f 030d 	mvn.w	r3, #13
 8002ea6:	e1b8      	b.n	800321a <recvfrom+0x3c6>
   if(sock_remained_size[sn] == 0)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	4ab1      	ldr	r2, [pc, #708]	; (8003170 <recvfrom+0x31c>)
 8002eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d128      	bne.n	8002f06 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe f925 	bl	8001106 <getSn_RX_RSR>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd ff75 	bl	8000dbc <WIZCHIP_READ>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <recvfrom+0x8a>
 8002ed8:	f06f 0303 	mvn.w	r3, #3
 8002edc:	e19d      	b.n	800321a <recvfrom+0x3c6>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8002ede:	4ba5      	ldr	r3, [pc, #660]	; (8003174 <recvfrom+0x320>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	fa42 f303 	asr.w	r3, r2, r3
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d004      	beq.n	8002efc <recvfrom+0xa8>
 8002ef2:	8bfb      	ldrh	r3, [r7, #30]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <recvfrom+0xa8>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e18e      	b.n	800321a <recvfrom+0x3c6>
         if(pack_len != 0) break;
 8002efc:	8bfb      	ldrh	r3, [r7, #30]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d100      	bne.n	8002f04 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8002f02:	e7d7      	b.n	8002eb4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8002f04:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8002f06:	7f7b      	ldrb	r3, [r7, #29]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	f000 80d9 	beq.w	80030c4 <recvfrom+0x270>
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d073      	beq.n	8002ffe <recvfrom+0x1aa>
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	f040 813c 	bne.w	8003194 <recvfrom+0x340>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	4a94      	ldr	r2, [pc, #592]	; (8003170 <recvfrom+0x31c>)
 8002f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d152      	bne.n	8002fce <recvfrom+0x17a>
	      {
   			wiz_recv_data(sn, head, 8);
 8002f28:	f107 0114 	add.w	r1, r7, #20
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe f98f 	bl	8001254 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd ff85 	bl	8000e54 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002f4a:	bf00      	nop
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	3301      	adds	r3, #1
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd ff2f 	bl	8000dbc <WIZCHIP_READ>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f3      	bne.n	8002f4c <recvfrom+0xf8>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8002f64:	7d3a      	ldrb	r2, [r7, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	7d7a      	ldrb	r2, [r7, #21]
 8002f70:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3302      	adds	r3, #2
 8002f76:	7dba      	ldrb	r2, [r7, #22]
 8002f78:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3303      	adds	r3, #3
 8002f7e:	7dfa      	ldrb	r2, [r7, #23]
 8002f80:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8002f82:	7e3b      	ldrb	r3, [r7, #24]
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	7e7b      	ldrb	r3, [r7, #25]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8002f9e:	7eba      	ldrb	r2, [r7, #26]
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	b291      	uxth	r1, r2
 8002fa4:	4a72      	ldr	r2, [pc, #456]	; (8003170 <recvfrom+0x31c>)
 8002fa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	4a70      	ldr	r2, [pc, #448]	; (8003170 <recvfrom+0x31c>)
 8002fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	b299      	uxth	r1, r3
 8002fb6:	7efb      	ldrb	r3, [r7, #27]
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	440a      	add	r2, r1
 8002fbe:	b291      	uxth	r1, r2
 8002fc0:	4a6b      	ldr	r2, [pc, #428]	; (8003170 <recvfrom+0x31c>)
 8002fc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	4a6b      	ldr	r2, [pc, #428]	; (8003178 <recvfrom+0x324>)
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	4a67      	ldr	r2, [pc, #412]	; (8003170 <recvfrom+0x31c>)
 8002fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fd6:	89ba      	ldrh	r2, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d202      	bcs.n	8002fe2 <recvfrom+0x18e>
 8002fdc:	89bb      	ldrh	r3, [r7, #12]
 8002fde:	83fb      	strh	r3, [r7, #30]
 8002fe0:	e004      	b.n	8002fec <recvfrom+0x198>
			else pack_len = sock_remained_size[sn];
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	4a62      	ldr	r2, [pc, #392]	; (8003170 <recvfrom+0x31c>)
 8002fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fea:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8002fec:	8bfb      	ldrh	r3, [r7, #30]
 8002fee:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002ff0:	8bfa      	ldrh	r2, [r7, #30]
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f92c 	bl	8001254 <wiz_recv_data>
			break;
 8002ffc:	e0d6      	b.n	80031ac <recvfrom+0x358>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	4a5b      	ldr	r2, [pc, #364]	; (8003170 <recvfrom+0x31c>)
 8003002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d146      	bne.n	8003098 <recvfrom+0x244>
	      {
   			wiz_recv_data(sn, head, 2);
 800300a:	f107 0114 	add.w	r1, r7, #20
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2202      	movs	r2, #2
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe f91e 	bl	8001254 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	3301      	adds	r3, #1
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd ff14 	bl	8000e54 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800302c:	bf00      	nop
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	3301      	adds	r3, #1
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd febe 	bl	8000dbc <WIZCHIP_READ>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f3      	bne.n	800302e <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8003046:	7d3a      	ldrb	r2, [r7, #20]
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	b291      	uxth	r1, r2
 800304c:	4a48      	ldr	r2, [pc, #288]	; (8003170 <recvfrom+0x31c>)
 800304e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	4a46      	ldr	r2, [pc, #280]	; (8003170 <recvfrom+0x31c>)
 8003056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	b29a      	uxth	r2, r3
 800305e:	7d7b      	ldrb	r3, [r7, #21]
 8003060:	b29b      	uxth	r3, r3
 8003062:	4413      	add	r3, r2
 8003064:	b29a      	uxth	r2, r3
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	3a02      	subs	r2, #2
 800306a:	b291      	uxth	r1, r2
 800306c:	4a40      	ldr	r2, [pc, #256]	; (8003170 <recvfrom+0x31c>)
 800306e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	4a3e      	ldr	r2, [pc, #248]	; (8003170 <recvfrom+0x31c>)
 8003076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800307e:	4293      	cmp	r3, r2
 8003080:	d906      	bls.n	8003090 <recvfrom+0x23c>
   			{
   			   close(sn);
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fd41 	bl	8002b0c <close>
   			   return SOCKFATAL_PACKLEN;
 800308a:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800308e:	e0c4      	b.n	800321a <recvfrom+0x3c6>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	4a39      	ldr	r2, [pc, #228]	; (8003178 <recvfrom+0x324>)
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	4a35      	ldr	r2, [pc, #212]	; (8003170 <recvfrom+0x31c>)
 800309c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030a0:	89ba      	ldrh	r2, [r7, #12]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d202      	bcs.n	80030ac <recvfrom+0x258>
 80030a6:	89bb      	ldrh	r3, [r7, #12]
 80030a8:	83fb      	strh	r3, [r7, #30]
 80030aa:	e004      	b.n	80030b6 <recvfrom+0x262>
			else pack_len = sock_remained_size[sn];
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	4a30      	ldr	r2, [pc, #192]	; (8003170 <recvfrom+0x31c>)
 80030b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b4:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80030b6:	8bfa      	ldrh	r2, [r7, #30]
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe f8c9 	bl	8001254 <wiz_recv_data>
		   break;
 80030c2:	e073      	b.n	80031ac <recvfrom+0x358>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4a2a      	ldr	r2, [pc, #168]	; (8003170 <recvfrom+0x31c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d144      	bne.n	800315a <recvfrom+0x306>
		   {
   			wiz_recv_data(sn, head, 6);
 80030d0:	f107 0114 	add.w	r1, r7, #20
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2206      	movs	r2, #6
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe f8bb 	bl	8001254 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	3301      	adds	r3, #1
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80030ea:	2140      	movs	r1, #64	; 0x40
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd feb1 	bl	8000e54 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80030f2:	bf00      	nop
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	3301      	adds	r3, #1
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fe5b 	bl	8000dbc <WIZCHIP_READ>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f3      	bne.n	80030f4 <recvfrom+0x2a0>
   			addr[0] = head[0];
 800310c:	7d3a      	ldrb	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3301      	adds	r3, #1
 8003116:	7d7a      	ldrb	r2, [r7, #21]
 8003118:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3302      	adds	r3, #2
 800311e:	7dba      	ldrb	r2, [r7, #22]
 8003120:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3303      	adds	r3, #3
 8003126:	7dfa      	ldrb	r2, [r7, #23]
 8003128:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800312a:	7e3a      	ldrb	r2, [r7, #24]
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	b291      	uxth	r1, r2
 8003130:	4a0f      	ldr	r2, [pc, #60]	; (8003170 <recvfrom+0x31c>)
 8003132:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <recvfrom+0x31c>)
 800313a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	b299      	uxth	r1, r3
 8003142:	7e7b      	ldrb	r3, [r7, #25]
 8003144:	b29a      	uxth	r2, r3
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	440a      	add	r2, r1
 800314a:	b291      	uxth	r1, r2
 800314c:	4a08      	ldr	r2, [pc, #32]	; (8003170 <recvfrom+0x31c>)
 800314e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	4a08      	ldr	r2, [pc, #32]	; (8003178 <recvfrom+0x324>)
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <recvfrom+0x31c>)
 800315e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003162:	89ba      	ldrh	r2, [r7, #12]
 8003164:	429a      	cmp	r2, r3
 8003166:	d209      	bcs.n	800317c <recvfrom+0x328>
 8003168:	89bb      	ldrh	r3, [r7, #12]
 800316a:	83fb      	strh	r3, [r7, #30]
 800316c:	e00b      	b.n	8003186 <recvfrom+0x332>
 800316e:	bf00      	nop
 8003170:	20000278 	.word	0x20000278
 8003174:	20000274 	.word	0x20000274
 8003178:	20000288 	.word	0x20000288
			else pack_len = sock_remained_size[sn];
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	4a29      	ldr	r2, [pc, #164]	; (8003224 <recvfrom+0x3d0>)
 8003180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003184:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003186:	8bfa      	ldrh	r2, [r7, #30]
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe f861 	bl	8001254 <wiz_recv_data>
			break;
 8003192:	e00b      	b.n	80031ac <recvfrom+0x358>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8003194:	8bfa      	ldrh	r2, [r7, #30]
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe f8b6 	bl	800130c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	4920      	ldr	r1, [pc, #128]	; (8003224 <recvfrom+0x3d0>)
 80031a4:	8bfa      	ldrh	r2, [r7, #30]
 80031a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80031aa:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	3301      	adds	r3, #1
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd fe4a 	bl	8000e54 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80031c0:	bf00      	nop
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	3301      	adds	r3, #1
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd fdf4 	bl	8000dbc <WIZCHIP_READ>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f3      	bne.n	80031c2 <recvfrom+0x36e>
	sock_remained_size[sn] -= pack_len;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	4a11      	ldr	r2, [pc, #68]	; (8003224 <recvfrom+0x3d0>)
 80031de:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	8bfa      	ldrh	r2, [r7, #30]
 80031e6:	1a8a      	subs	r2, r1, r2
 80031e8:	b291      	uxth	r1, r2
 80031ea:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <recvfrom+0x3d0>)
 80031ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <recvfrom+0x3d0>)
 80031f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <recvfrom+0x3bc>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <recvfrom+0x3d4>)
 8003200:	5cd2      	ldrb	r2, [r2, r3]
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	b2d1      	uxtb	r1, r2
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <recvfrom+0x3d4>)
 800320c:	54d1      	strb	r1, [r2, r3]
 800320e:	e003      	b.n	8003218 <recvfrom+0x3c4>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <recvfrom+0x3d4>)
 8003214:	2100      	movs	r1, #0
 8003216:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8003218:	8bfb      	ldrh	r3, [r7, #30]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000278 	.word	0x20000278
 8003228:	20000288 	.word	0x20000288

0800322c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
 8003294:	2300      	movs	r3, #0
 8003296:	4618      	mov	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	71fb      	strb	r3, [r7, #7]
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
	...

080032b4 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <reg_wizchip_cris_cbfunc+0x16>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <reg_wizchip_cris_cbfunc+0x3c>)
 80032cc:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <reg_wizchip_cris_cbfunc+0x40>)
 80032ce:	609a      	str	r2, [r3, #8]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <reg_wizchip_cris_cbfunc+0x3c>)
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <reg_wizchip_cris_cbfunc+0x44>)
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e005      	b.n	80032e4 <reg_wizchip_cris_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 80032d8:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <reg_wizchip_cris_cbfunc+0x3c>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6093      	str	r3, [r2, #8]
      WIZCHIP.CRIS._exit  = cris_ex;
 80032de:	4a04      	ldr	r2, [pc, #16]	; (80032f0 <reg_wizchip_cris_cbfunc+0x3c>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	60d3      	str	r3, [r2, #12]
   }
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000020 	.word	0x20000020
 80032f4:	0800322d 	.word	0x0800322d
 80032f8:	08003239 	.word	0x08003239

080032fc <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <reg_wizchip_cs_cbfunc+0x16>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <reg_wizchip_cs_cbfunc+0x3c>)
 8003314:	4a09      	ldr	r2, [pc, #36]	; (800333c <reg_wizchip_cs_cbfunc+0x40>)
 8003316:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <reg_wizchip_cs_cbfunc+0x3c>)
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <reg_wizchip_cs_cbfunc+0x44>)
 800331c:	615a      	str	r2, [r3, #20]
 800331e:	e005      	b.n	800332c <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003320:	4a05      	ldr	r2, [pc, #20]	; (8003338 <reg_wizchip_cs_cbfunc+0x3c>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <reg_wizchip_cs_cbfunc+0x3c>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6153      	str	r3, [r2, #20]
   }
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000020 	.word	0x20000020
 800333c:	08003245 	.word	0x08003245
 8003340:	08003251 	.word	0x08003251

08003344 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800334e:	bf00      	nop
 8003350:	4b0e      	ldr	r3, [pc, #56]	; (800338c <reg_wizchip_spi_cbfunc+0x48>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f9      	beq.n	8003350 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <reg_wizchip_spi_cbfunc+0x24>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <reg_wizchip_spi_cbfunc+0x48>)
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <reg_wizchip_spi_cbfunc+0x4c>)
 800336c:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <reg_wizchip_spi_cbfunc+0x48>)
 8003370:	4a08      	ldr	r2, [pc, #32]	; (8003394 <reg_wizchip_spi_cbfunc+0x50>)
 8003372:	61da      	str	r2, [r3, #28]
 8003374:	e005      	b.n	8003382 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <reg_wizchip_spi_cbfunc+0x48>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800337c:	4a03      	ldr	r2, [pc, #12]	; (800338c <reg_wizchip_spi_cbfunc+0x48>)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	61d3      	str	r3, [r2, #28]
   }
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	20000020 	.word	0x20000020
 8003390:	08003291 	.word	0x08003291
 8003394:	0800329f 	.word	0x0800329f

08003398 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	f200 80c2 	bhi.w	800353c <ctlwizchip+0x1a4>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <ctlwizchip+0x28>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	08003401 	.word	0x08003401
 80033c4:	08003407 	.word	0x08003407
 80033c8:	08003433 	.word	0x08003433
 80033cc:	08003427 	.word	0x08003427
 80033d0:	08003441 	.word	0x08003441
 80033d4:	0800344d 	.word	0x0800344d
 80033d8:	0800345b 	.word	0x0800345b
 80033dc:	08003481 	.word	0x08003481
 80033e0:	080034a7 	.word	0x080034a7
 80033e4:	080034e1 	.word	0x080034e1
 80033e8:	080034e7 	.word	0x080034e7
 80033ec:	080034ef 	.word	0x080034ef
 80033f0:	08003543 	.word	0x08003543
 80033f4:	080034f7 	.word	0x080034f7
 80033f8:	08003505 	.word	0x08003505
 80033fc:	08003521 	.word	0x08003521
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003400:	f000 f8e6 	bl	80035d0 <wizchip_sw_reset>
         break;
 8003404:	e09e      	b.n	8003544 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3308      	adds	r3, #8
 8003414:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f923 	bl	8003668 <wizchip_init>
 8003422:	4603      	mov	r3, r0
 8003424:	e08f      	b.n	8003546 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f9a8 	bl	8003780 <wizchip_clrinterrupt>
         break;
 8003430:	e088      	b.n	8003544 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003432:	f000 f9c3 	bl	80037bc <wizchip_getinterrupt>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	801a      	strh	r2, [r3, #0]
         break;
 800343e:	e081      	b.n	8003544 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f9de 	bl	8003806 <wizchip_setinterruptmask>
         break;         
 800344a:	e07b      	b.n	8003544 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800344c:	f000 f9f6 	bl	800383c <wizchip_getinterruptmask>
 8003450:	4603      	mov	r3, r0
 8003452:	461a      	mov	r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	801a      	strh	r2, [r3, #0]
         break;
 8003458:	e074      	b.n	8003544 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	b29b      	uxth	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4619      	mov	r1, r3
 8003466:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800346a:	f7fd fcf3 	bl	8000e54 <WIZCHIP_WRITE>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4619      	mov	r1, r3
 8003476:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800347a:	f7fd fceb 	bl	8000e54 <WIZCHIP_WRITE>
         break;
 800347e:	e061      	b.n	8003544 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003480:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003484:	f7fd fc9a 	bl	8000dbc <WIZCHIP_READ>
 8003488:	4603      	mov	r3, r0
 800348a:	b29b      	uxth	r3, r3
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	b29c      	uxth	r4, r3
 8003490:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003494:	f7fd fc92 	bl	8000dbc <WIZCHIP_READ>
 8003498:	4603      	mov	r3, r0
 800349a:	b29b      	uxth	r3, r3
 800349c:	4423      	add	r3, r4
 800349e:	b29a      	uxth	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	801a      	strh	r2, [r3, #0]
         break;
 80034a4:	e04e      	b.n	8003544 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80034a6:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <ctlwizchip+0x1b8>)
 80034a8:	789a      	ldrb	r2, [r3, #2]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a27      	ldr	r2, [pc, #156]	; (8003550 <ctlwizchip+0x1b8>)
 80034b4:	78d2      	ldrb	r2, [r2, #3]
 80034b6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	3302      	adds	r3, #2
 80034bc:	4a24      	ldr	r2, [pc, #144]	; (8003550 <ctlwizchip+0x1b8>)
 80034be:	7912      	ldrb	r2, [r2, #4]
 80034c0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	3303      	adds	r3, #3
 80034c6:	4a22      	ldr	r2, [pc, #136]	; (8003550 <ctlwizchip+0x1b8>)
 80034c8:	7952      	ldrb	r2, [r2, #5]
 80034ca:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <ctlwizchip+0x1b8>)
 80034d2:	7992      	ldrb	r2, [r2, #6]
 80034d4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	3305      	adds	r3, #5
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
         break;
 80034de:	e031      	b.n	8003544 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80034e0:	f000 f9fe 	bl	80038e0 <wizphy_reset>
         break;
 80034e4:	e02e      	b.n	8003544 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	f000 fa21 	bl	800392e <wizphy_setphyconf>
         break;
 80034ec:	e02a      	b.n	8003544 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80034ee:	6838      	ldr	r0, [r7, #0]
 80034f0:	f000 fa5f 	bl	80039b2 <wizphy_getphyconf>
         break;
 80034f4:	e026      	b.n	8003544 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 faa2 	bl	8003a44 <wizphy_setphypmode>
 8003500:	4603      	mov	r3, r0
 8003502:	e020      	b.n	8003546 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003504:	f000 f9d3 	bl	80038ae <wizphy_getphypmode>
 8003508:	4603      	mov	r3, r0
 800350a:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	2bff      	cmp	r3, #255	; 0xff
 8003510:	d102      	bne.n	8003518 <ctlwizchip+0x180>
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e016      	b.n	8003546 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	7dfa      	ldrb	r2, [r7, #23]
 800351c:	701a      	strb	r2, [r3, #0]
         break;
 800351e:	e011      	b.n	8003544 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003520:	f000 f9af 	bl	8003882 <wizphy_getphylink>
 8003524:	4603      	mov	r3, r0
 8003526:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	2bff      	cmp	r3, #255	; 0xff
 800352c:	d102      	bne.n	8003534 <ctlwizchip+0x19c>
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	e008      	b.n	8003546 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	7dfa      	ldrb	r2, [r7, #23]
 8003538:	701a      	strb	r2, [r3, #0]
         break;
 800353a:	e003      	b.n	8003544 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	e001      	b.n	8003546 <ctlwizchip+0x1ae>
         break;
 8003542:	bf00      	nop
   }
   return 0;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	bd90      	pop	{r4, r7, pc}
 800354e:	bf00      	nop
 8003550:	20000020 	.word	0x20000020

08003554 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	2b05      	cmp	r3, #5
 8003564:	d82c      	bhi.n	80035c0 <ctlnetwork+0x6c>
 8003566:	a201      	add	r2, pc, #4	; (adr r2, 800356c <ctlnetwork+0x18>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	08003585 	.word	0x08003585
 8003570:	0800358d 	.word	0x0800358d
 8003574:	08003595 	.word	0x08003595
 8003578:	080035a3 	.word	0x080035a3
 800357c:	080035b1 	.word	0x080035b1
 8003580:	080035b9 	.word	0x080035b9
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003584:	6838      	ldr	r0, [r7, #0]
 8003586:	f000 faa7 	bl	8003ad8 <wizchip_setnetinfo>
         break;
 800358a:	e01c      	b.n	80035c6 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 800358c:	6838      	ldr	r0, [r7, #0]
 800358e:	f000 fae3 	bl	8003b58 <wizchip_getnetinfo>
         break;
 8003592:	e018      	b.n	80035c6 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fb1d 	bl	8003bd8 <wizchip_setnetmode>
 800359e:	4603      	mov	r3, r0
 80035a0:	e012      	b.n	80035c8 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80035a2:	f000 fb3b 	bl	8003c1c <wizchip_getnetmode>
 80035a6:	4603      	mov	r3, r0
 80035a8:	461a      	mov	r2, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	701a      	strb	r2, [r3, #0]
         break;
 80035ae:	e00a      	b.n	80035c6 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80035b0:	6838      	ldr	r0, [r7, #0]
 80035b2:	f000 fb3b 	bl	8003c2c <wizchip_settimeout>
         break;
 80035b6:	e006      	b.n	80035c6 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80035b8:	6838      	ldr	r0, [r7, #0]
 80035ba:	f000 fb58 	bl	8003c6e <wizchip_gettimeout>
         break;
 80035be:	e002      	b.n	80035c6 <ctlnetwork+0x72>
      default:
         return -1;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	e000      	b.n	80035c8 <ctlnetwork+0x74>
   }
   return 0;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2206      	movs	r2, #6
 80035da:	4619      	mov	r1, r3
 80035dc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80035e0:	f7fd fc86 	bl	8000ef0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	2204      	movs	r2, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035f0:	f7fd fc7e 	bl	8000ef0 <WIZCHIP_READ_BUF>
 80035f4:	f107 0310 	add.w	r3, r7, #16
 80035f8:	2204      	movs	r2, #4
 80035fa:	4619      	mov	r1, r3
 80035fc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003600:	f7fd fc76 	bl	8000ef0 <WIZCHIP_READ_BUF>
 8003604:	f107 030c 	add.w	r3, r7, #12
 8003608:	2204      	movs	r2, #4
 800360a:	4619      	mov	r1, r3
 800360c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003610:	f7fd fc6e 	bl	8000ef0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	2000      	movs	r0, #0
 8003618:	f7fd fc1c 	bl	8000e54 <WIZCHIP_WRITE>
   getMR(); // for delay
 800361c:	2000      	movs	r0, #0
 800361e:	f7fd fbcd 	bl	8000dbc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	2206      	movs	r2, #6
 8003626:	4619      	mov	r1, r3
 8003628:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800362c:	f7fd fcc0 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	2204      	movs	r2, #4
 8003636:	4619      	mov	r1, r3
 8003638:	f44f 7080 	mov.w	r0, #256	; 0x100
 800363c:	f7fd fcb8 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003640:	f107 0310 	add.w	r3, r7, #16
 8003644:	2204      	movs	r2, #4
 8003646:	4619      	mov	r1, r3
 8003648:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800364c:	f7fd fcb0 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	2204      	movs	r2, #4
 8003656:	4619      	mov	r1, r3
 8003658:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800365c:	f7fd fca8 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
}
 8003660:	bf00      	nop
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003676:	f7ff ffab 	bl	80035d0 <wizchip_sw_reset>
   if(txsize)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d03b      	beq.n	80036f8 <wizchip_init+0x90>
   {
      tmp = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	e015      	b.n	80036b6 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800368a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	7bbb      	ldrb	r3, [r7, #14]
 8003696:	4413      	add	r3, r2
 8003698:	b2db      	uxtb	r3, r3
 800369a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800369c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	dd02      	ble.n	80036aa <wizchip_init+0x42>
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295
 80036a8:	e066      	b.n	8003778 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ba:	2b07      	cmp	r3, #7
 80036bc:	dde5      	ble.n	800368a <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	e015      	b.n	80036f0 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80036c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	3301      	adds	r3, #1
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80036d2:	4618      	mov	r0, r3
 80036d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	4619      	mov	r1, r3
 80036e0:	f7fd fbb8 	bl	8000e54 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80036e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f4:	2b07      	cmp	r3, #7
 80036f6:	dde5      	ble.n	80036c4 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d03b      	beq.n	8003776 <wizchip_init+0x10e>
   {
      tmp = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	e015      	b.n	8003734 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	4413      	add	r3, r2
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	7bbb      	ldrb	r3, [r7, #14]
 8003714:	4413      	add	r3, r2
 8003716:	b2db      	uxtb	r3, r3
 8003718:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800371a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800371e:	2b10      	cmp	r3, #16
 8003720:	dd02      	ble.n	8003728 <wizchip_init+0xc0>
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	e027      	b.n	8003778 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	3301      	adds	r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	73fb      	strb	r3, [r7, #15]
 8003734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003738:	2b07      	cmp	r3, #7
 800373a:	dde5      	ble.n	8003708 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e015      	b.n	800376e <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3301      	adds	r3, #1
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003750:	4618      	mov	r0, r3
 8003752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	4413      	add	r3, r2
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	f7fd fb79 	bl	8000e54 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	b2db      	uxtb	r3, r3
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	2b07      	cmp	r3, #7
 8003774:	dde5      	ble.n	8003742 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	b29b      	uxth	r3, r3
 8003794:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	f023 030f 	bic.w	r3, r3, #15
 800379c:	b2db      	uxtb	r3, r3
 800379e:	4619      	mov	r1, r3
 80037a0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80037a4:	f7fd fb56 	bl	8000e54 <WIZCHIP_WRITE>
   setSIR(sir);
 80037a8:	7bbb      	ldrb	r3, [r7, #14]
 80037aa:	4619      	mov	r1, r3
 80037ac:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80037b0:	f7fd fb50 	bl	8000e54 <WIZCHIP_WRITE>
#endif   
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80037ce:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80037d2:	f7fd faf3 	bl	8000dbc <WIZCHIP_READ>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f023 030f 	bic.w	r3, r3, #15
 80037dc:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80037de:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80037e2:	f7fd faeb 	bl	8000dbc <WIZCHIP_READ>
 80037e6:	4603      	mov	r3, r0
 80037e8:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80037ea:	79bb      	ldrb	r3, [r7, #6]
 80037ec:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80037ee:	88bb      	ldrh	r3, [r7, #4]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80037fc:	88bb      	ldrh	r3, [r7, #4]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	b29b      	uxth	r3, r3
 800381a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	4619      	mov	r1, r3
 8003820:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003824:	f7fd fb16 	bl	8000e54 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003828:	7bbb      	ldrb	r3, [r7, #14]
 800382a:	4619      	mov	r1, r3
 800382c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003830:	f7fd fb10 	bl	8000e54 <WIZCHIP_WRITE>
#endif   
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800384e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003852:	f7fd fab3 	bl	8000dbc <WIZCHIP_READ>
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800385a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800385e:	f7fd faad 	bl	8000dbc <WIZCHIP_READ>
 8003862:	4603      	mov	r3, r0
 8003864:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003866:	79bb      	ldrb	r3, [r7, #6]
 8003868:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800386a:	88bb      	ldrh	r3, [r7, #4]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	b29a      	uxth	r2, r3
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4413      	add	r3, r2
 8003876:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003878:	88bb      	ldrh	r3, [r7, #4]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003888:	2300      	movs	r3, #0
 800388a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800388c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003890:	f7fd fa94 	bl	8000dbc <WIZCHIP_READ>
 8003894:	4603      	mov	r3, r0
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800389e:	2301      	movs	r3, #1
 80038a0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80038b8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80038bc:	f7fd fa7e 	bl	8000dbc <WIZCHIP_READ>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038c6:	2b30      	cmp	r3, #48	; 0x30
 80038c8:	d102      	bne.n	80038d0 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80038ca:	2301      	movs	r3, #1
 80038cc:	71fb      	strb	r3, [r7, #7]
 80038ce:	e001      	b.n	80038d4 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80038d0:	2300      	movs	r3, #0
 80038d2:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80038e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80038ea:	f7fd fa67 	bl	8000dbc <WIZCHIP_READ>
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	4619      	mov	r1, r3
 80038fe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003902:	f7fd faa7 	bl	8000e54 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003906:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800390a:	f7fd fa57 	bl	8000dbc <WIZCHIP_READ>
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003918:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	4619      	mov	r1, r3
 800391e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003922:	f7fd fa97 	bl	8000e54 <WIZCHIP_WRITE>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d104      	bne.n	800394c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003948:	73fb      	strb	r3, [r7, #15]
 800394a:	e003      	b.n	8003954 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003952:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d104      	bne.n	8003966 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	e019      	b.n	800399a <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	78db      	ldrb	r3, [r3, #3]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d10d      	bne.n	800398a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	789b      	ldrb	r3, [r3, #2]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d104      	bne.n	8003980 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	f043 0318 	orr.w	r3, r3, #24
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	e00c      	b.n	800399a <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	f043 0308 	orr.w	r3, r3, #8
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e007      	b.n	800399a <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	789b      	ldrb	r3, [r3, #2]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d103      	bne.n	800399a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	f043 0310 	orr.w	r3, r3, #16
 8003998:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	4619      	mov	r1, r3
 800399e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039a2:	f7fd fa57 	bl	8000e54 <WIZCHIP_WRITE>
   wizphy_reset();
 80039a6:	f7ff ff9b 	bl	80038e0 <wizphy_reset>
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80039be:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80039c2:	f7fd f9fb 	bl	8000dbc <WIZCHIP_READ>
 80039c6:	4603      	mov	r3, r0
 80039c8:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	119b      	asrs	r3, r3, #6
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d001      	beq.n	80039e8 <wizphy_getphyconf+0x36>
 80039e4:	2b38      	cmp	r3, #56	; 0x38
 80039e6:	d103      	bne.n	80039f0 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	705a      	strb	r2, [r3, #1]
         break;
 80039ee:	e003      	b.n	80039f8 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	705a      	strb	r2, [r3, #1]
         break;
 80039f6:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039fe:	2b18      	cmp	r3, #24
 8003a00:	d003      	beq.n	8003a0a <wizphy_getphyconf+0x58>
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d001      	beq.n	8003a0a <wizphy_getphyconf+0x58>
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d103      	bne.n	8003a12 <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	709a      	strb	r2, [r3, #2]
         break;
 8003a10:	e003      	b.n	8003a1a <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	709a      	strb	r2, [r3, #2]
         break;
 8003a18:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a20:	2b18      	cmp	r3, #24
 8003a22:	d003      	beq.n	8003a2c <wizphy_getphyconf+0x7a>
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d001      	beq.n	8003a2c <wizphy_getphyconf+0x7a>
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d103      	bne.n	8003a34 <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	70da      	strb	r2, [r3, #3]
         break;
 8003a32:	e003      	b.n	8003a3c <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	70da      	strb	r2, [r3, #3]
         break;
 8003a3a:	bf00      	nop
   }
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003a52:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a56:	f7fd f9b1 	bl	8000dbc <WIZCHIP_READ>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <wizphy_setphypmode+0x2a>
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	e030      	b.n	8003ad0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003a74:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d104      	bne.n	8003a86 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e003      	b.n	8003a8e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003a8c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	4619      	mov	r1, r3
 8003a92:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a96:	f7fd f9dd 	bl	8000e54 <WIZCHIP_WRITE>
   wizphy_reset();
 8003a9a:	f7ff ff21 	bl	80038e0 <wizphy_reset>
   tmp = getPHYCFGR();
 8003a9e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003aa2:	f7fd f98b 	bl	8000dbc <WIZCHIP_READ>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <wizphy_setphypmode+0x88>
 8003aba:	2300      	movs	r3, #0
 8003abc:	e008      	b.n	8003ad0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <wizphy_setphypmode+0x88>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e001      	b.n	8003ad0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2206      	movs	r2, #6
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003aea:	f7fd fa61 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	330e      	adds	r3, #14
 8003af2:	2204      	movs	r2, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003afa:	f7fd fa59 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	330a      	adds	r3, #10
 8003b02:	2204      	movs	r2, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003b0a:	f7fd fa51 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3306      	adds	r3, #6
 8003b12:	2204      	movs	r2, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003b1a:	f7fd fa49 	bl	8000fb0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	7c9a      	ldrb	r2, [r3, #18]
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <wizchip_setnetinfo+0x78>)
 8003b24:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	7cda      	ldrb	r2, [r3, #19]
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <wizchip_setnetinfo+0x78>)
 8003b2c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7d1a      	ldrb	r2, [r3, #20]
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <wizchip_setnetinfo+0x78>)
 8003b34:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7d5a      	ldrb	r2, [r3, #21]
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <wizchip_setnetinfo+0x78>)
 8003b3c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	7d9a      	ldrb	r2, [r3, #22]
 8003b42:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <wizchip_setnetinfo+0x7c>)
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000290 	.word	0x20000290
 8003b54:	20000294 	.word	0x20000294

08003b58 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2206      	movs	r2, #6
 8003b64:	4619      	mov	r1, r3
 8003b66:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003b6a:	f7fd f9c1 	bl	8000ef0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	330e      	adds	r3, #14
 8003b72:	2204      	movs	r2, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b7a:	f7fd f9b9 	bl	8000ef0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	330a      	adds	r3, #10
 8003b82:	2204      	movs	r2, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003b8a:	f7fd f9b1 	bl	8000ef0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3306      	adds	r3, #6
 8003b92:	2204      	movs	r2, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003b9a:	f7fd f9a9 	bl	8000ef0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <wizchip_getnetinfo+0x78>)
 8003ba0:	781a      	ldrb	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <wizchip_getnetinfo+0x78>)
 8003ba8:	785a      	ldrb	r2, [r3, #1]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <wizchip_getnetinfo+0x78>)
 8003bb0:	789a      	ldrb	r2, [r3, #2]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <wizchip_getnetinfo+0x78>)
 8003bb8:	78da      	ldrb	r2, [r3, #3]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <wizchip_getnetinfo+0x7c>)
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	759a      	strb	r2, [r3, #22]
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000290 	.word	0x20000290
 8003bd4:	20000294 	.word	0x20000294

08003bd8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <wizchip_setnetmode+0x1e>
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	e00e      	b.n	8003c14 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fd f8e0 	bl	8000dbc <WIZCHIP_READ>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7fd f921 	bl	8000e54 <WIZCHIP_WRITE>
   return 0;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7fd f8cb 	bl	8000dbc <WIZCHIP_READ>
 8003c26:	4603      	mov	r3, r0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003c3e:	f7fd f909 	bl	8000e54 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	885b      	ldrh	r3, [r3, #2]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003c52:	f7fd f8ff 	bl	8000e54 <WIZCHIP_WRITE>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	885b      	ldrh	r3, [r3, #2]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003c62:	f7fd f8f7 	bl	8000e54 <WIZCHIP_WRITE>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003c6e:	b590      	push	{r4, r7, lr}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003c76:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003c7a:	f7fd f89f 	bl	8000dbc <WIZCHIP_READ>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	461a      	mov	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003c86:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003c8a:	f7fd f897 	bl	8000dbc <WIZCHIP_READ>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	b29c      	uxth	r4, r3
 8003c96:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003c9a:	f7fd f88f 	bl	8000dbc <WIZCHIP_READ>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	4423      	add	r3, r4
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	805a      	strh	r2, [r3, #2]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd90      	pop	{r4, r7, pc}
	...

08003cb4 <__io_putchar>:
                            .sn = {255, 255, 255, 0},
                            .gw = {192, 168, 2, 1},
                            .dns = {8, 8, 8, 8},
                            .dhcp = NETINFO_DHCP };

int __io_putchar (int ch) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 8003cc2:	f107 010f 	add.w	r1, r7, #15
 8003cc6:	2364      	movs	r3, #100	; 0x64
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4804      	ldr	r0, [pc, #16]	; (8003cdc <__io_putchar+0x28>)
 8003ccc:	f002 fb3b 	bl	8006346 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*)&UART1_TxBuffer, countof(UART1_TxBuffer)-1);
	return ch;
 8003cd0:	687b      	ldr	r3, [r7, #4]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000abc 	.word	0x20000abc

08003ce0 <W5500_Network_Init>:

void W5500_Network_Init(void)
{
 8003ce0:	b5b0      	push	{r4, r5, r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af04      	add	r7, sp, #16
        uint8_t tmpstr[6] = {0,};
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	809a      	strh	r2, [r3, #4]
	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8003cf0:	4940      	ldr	r1, [pc, #256]	; (8003df4 <W5500_Network_Init+0x114>)
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f7ff fc2e 	bl	8003554 <ctlnetwork>

	ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 8003cf8:	493e      	ldr	r1, [pc, #248]	; (8003df4 <W5500_Network_Init+0x114>)
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	f7ff fc2a 	bl	8003554 <ctlnetwork>

	//Display Network Information use USART
	ctlwizchip(CW_GET_ID, (void*)tmpstr);
 8003d00:	f107 0308 	add.w	r3, r7, #8
 8003d04:	4619      	mov	r1, r3
 8003d06:	2008      	movs	r0, #8
 8003d08:	f7ff fb46 	bl	8003398 <ctlwizchip>
	printf("\r\n=== %s NET CONF ===\r\n", (char*)tmpstr);
 8003d0c:	f107 0308 	add.w	r3, r7, #8
 8003d10:	4619      	mov	r1, r3
 8003d12:	4839      	ldr	r0, [pc, #228]	; (8003df8 <W5500_Network_Init+0x118>)
 8003d14:	f003 fb92 	bl	800743c <iprintf>
	printf("MAC:%02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1],
 8003d18:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	4b35      	ldr	r3, [pc, #212]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d20:	785b      	ldrb	r3, [r3, #1]
 8003d22:	461c      	mov	r4, r3
	gWIZNETINFO.mac[2],  gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8003d24:	4b33      	ldr	r3, [pc, #204]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d26:	789b      	ldrb	r3, [r3, #2]
	printf("MAC:%02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1],
 8003d28:	461d      	mov	r5, r3
	gWIZNETINFO.mac[2],  gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8003d2a:	4b32      	ldr	r3, [pc, #200]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d2c:	78db      	ldrb	r3, [r3, #3]
	printf("MAC:%02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1],
 8003d2e:	461a      	mov	r2, r3
	gWIZNETINFO.mac[2],  gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8003d30:	4b30      	ldr	r3, [pc, #192]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d32:	791b      	ldrb	r3, [r3, #4]
	printf("MAC:%02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1],
 8003d34:	4619      	mov	r1, r3
	gWIZNETINFO.mac[2],  gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8003d36:	4b2f      	ldr	r3, [pc, #188]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d38:	795b      	ldrb	r3, [r3, #5]
	printf("MAC:%02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1],
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	9101      	str	r1, [sp, #4]
 8003d3e:	9200      	str	r2, [sp, #0]
 8003d40:	462b      	mov	r3, r5
 8003d42:	4622      	mov	r2, r4
 8003d44:	4601      	mov	r1, r0
 8003d46:	482d      	ldr	r0, [pc, #180]	; (8003dfc <W5500_Network_Init+0x11c>)
 8003d48:	f003 fb78 	bl	800743c <iprintf>
	printf("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 8003d4c:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d4e:	799b      	ldrb	r3, [r3, #6]
 8003d50:	4619      	mov	r1, r3
 8003d52:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d54:	79db      	ldrb	r3, [r3, #7]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d5a:	7a1b      	ldrb	r3, [r3, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d60:	7a5b      	ldrb	r3, [r3, #9]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4603      	mov	r3, r0
 8003d66:	4826      	ldr	r0, [pc, #152]	; (8003e00 <W5500_Network_Init+0x120>)
 8003d68:	f003 fb68 	bl	800743c <iprintf>
	printf("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d6e:	7b9b      	ldrb	r3, [r3, #14]
 8003d70:	4619      	mov	r1, r3
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d74:	7bdb      	ldrb	r3, [r3, #15]
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d7a:	7c1b      	ldrb	r3, [r3, #16]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d80:	7c5b      	ldrb	r3, [r3, #17]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	4603      	mov	r3, r0
 8003d86:	481f      	ldr	r0, [pc, #124]	; (8003e04 <W5500_Network_Init+0x124>)
 8003d88:	f003 fb58 	bl	800743c <iprintf>
	printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d8e:	7a9b      	ldrb	r3, [r3, #10]
 8003d90:	4619      	mov	r1, r3
 8003d92:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d94:	7adb      	ldrb	r3, [r3, #11]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <W5500_Network_Init+0x114>)
 8003d9a:	7b1b      	ldrb	r3, [r3, #12]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <W5500_Network_Init+0x114>)
 8003da0:	7b5b      	ldrb	r3, [r3, #13]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4603      	mov	r3, r0
 8003da6:	4818      	ldr	r0, [pc, #96]	; (8003e08 <W5500_Network_Init+0x128>)
 8003da8:	f003 fb48 	bl	800743c <iprintf>
	printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1], gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <W5500_Network_Init+0x114>)
 8003dae:	7c9b      	ldrb	r3, [r3, #18]
 8003db0:	4619      	mov	r1, r3
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <W5500_Network_Init+0x114>)
 8003db4:	7cdb      	ldrb	r3, [r3, #19]
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <W5500_Network_Init+0x114>)
 8003dba:	7d1b      	ldrb	r3, [r3, #20]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <W5500_Network_Init+0x114>)
 8003dc0:	7d5b      	ldrb	r3, [r3, #21]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4810      	ldr	r0, [pc, #64]	; (8003e08 <W5500_Network_Init+0x128>)
 8003dc8:	f003 fb38 	bl	800743c <iprintf>
	printf("==============================\r\n");
 8003dcc:	480f      	ldr	r0, [pc, #60]	; (8003e0c <W5500_Network_Init+0x12c>)
 8003dce:	f003 fba9 	bl	8007524 <puts>

	wizchip_init(0, 0);
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7ff fc47 	bl	8003668 <wizchip_init>

	wiz_NetTimeout w_NetTimeout;
	w_NetTimeout.retry_cnt = 50;
 8003dda:	2332      	movs	r3, #50	; 0x32
 8003ddc:	713b      	strb	r3, [r7, #4]
	w_NetTimeout.time_100us = 1000;
 8003dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003de2:	80fb      	strh	r3, [r7, #6]
	wizchip_settimeout(&w_NetTimeout);
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff20 	bl	8003c2c <wizchip_settimeout>
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bdb0      	pop	{r4, r5, r7, pc}
 8003df4:	20000048 	.word	0x20000048
 8003df8:	080092dc 	.word	0x080092dc
 8003dfc:	080092f4 	.word	0x080092f4
 8003e00:	08009318 	.word	0x08009318
 8003e04:	0800932c 	.word	0x0800932c
 8003e08:	08009340 	.word	0x08009340
 8003e0c:	08009354 	.word	0x08009354

08003e10 <my_ip_assign>:

void my_ip_assign(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  getIPfromDHCP(gWIZNETINFO.ip);
 8003e14:	480a      	ldr	r0, [pc, #40]	; (8003e40 <my_ip_assign+0x30>)
 8003e16:	f7fe fceb 	bl	80027f0 <getIPfromDHCP>
  getGWfromDHCP(gWIZNETINFO.gw);
 8003e1a:	480a      	ldr	r0, [pc, #40]	; (8003e44 <my_ip_assign+0x34>)
 8003e1c:	f7fe fd06 	bl	800282c <getGWfromDHCP>
  getSNfromDHCP(gWIZNETINFO.sn);
 8003e20:	4809      	ldr	r0, [pc, #36]	; (8003e48 <my_ip_assign+0x38>)
 8003e22:	f7fe fd21 	bl	8002868 <getSNfromDHCP>
  getDNSfromDHCP(gWIZNETINFO.dns);
 8003e26:	4809      	ldr	r0, [pc, #36]	; (8003e4c <my_ip_assign+0x3c>)
 8003e28:	f7fe fd3c 	bl	80028a4 <getDNSfromDHCP>
  gWIZNETINFO.dhcp = NETINFO_DHCP;
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <my_ip_assign+0x40>)
 8003e2e:	2202      	movs	r2, #2
 8003e30:	759a      	strb	r2, [r3, #22]

  ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8003e32:	4907      	ldr	r1, [pc, #28]	; (8003e50 <my_ip_assign+0x40>)
 8003e34:	2000      	movs	r0, #0
 8003e36:	f7ff fb8d 	bl	8003554 <ctlnetwork>
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000004e 	.word	0x2000004e
 8003e44:	20000056 	.word	0x20000056
 8003e48:	20000052 	.word	0x20000052
 8003e4c:	2000005a 	.word	0x2000005a
 8003e50:	20000048 	.word	0x20000048

08003e54 <my_ip_conflict>:

void my_ip_conflict(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  printf("CONFLICT IP from DHCP \r\n");
 8003e58:	4801      	ldr	r0, [pc, #4]	; (8003e60 <my_ip_conflict+0xc>)
 8003e5a:	f003 fb63 	bl	8007524 <puts>
  while(1);
 8003e5e:	e7fe      	b.n	8003e5e <my_ip_conflict+0xa>
 8003e60:	08009374 	.word	0x08009374

08003e64 <main>:
}

int main(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
	HAL_Init();
 8003e6a:	f000 fbe4 	bl	8004636 <HAL_Init>
	SystemClock_Config();
 8003e6e:	f000 f86b 	bl	8003f48 <SystemClock_Config>

	MX_GPIO_Init();
 8003e72:	f000 f8e1 	bl	8004038 <MX_GPIO_Init>
	//MX_SPI1_Init();
	MX_USART1_UART_Init();
 8003e76:	f000 f8b5 	bl	8003fe4 <MX_USART1_UART_Init>

	uint8_t dhcp_ret = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	71fb      	strb	r3, [r7, #7]

	printf("W5500_Init\n\r");
 8003e7e:	4820      	ldr	r0, [pc, #128]	; (8003f00 <main+0x9c>)
 8003e80:	f003 fadc 	bl	800743c <iprintf>

	W5500_Init();
 8003e84:	f000 f9d8 	bl	8004238 <W5500_Init>

	setSHAR(gWIZNETINFO.mac);
 8003e88:	2206      	movs	r2, #6
 8003e8a:	491e      	ldr	r1, [pc, #120]	; (8003f04 <main+0xa0>)
 8003e8c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003e90:	f7fd f88e 	bl	8000fb0 <WIZCHIP_WRITE_BUF>

	DHCP_init(socket_sn, gDataBuff);
 8003e94:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <main+0xa4>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	491c      	ldr	r1, [pc, #112]	; (8003f0c <main+0xa8>)
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fc1e 	bl	80026dc <DHCP_init>

	reg_dhcp_cbfunc(my_ip_assign, my_ip_assign, my_ip_conflict);
 8003ea0:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <main+0xac>)
 8003ea2:	491c      	ldr	r1, [pc, #112]	; (8003f14 <main+0xb0>)
 8003ea4:	481b      	ldr	r0, [pc, #108]	; (8003f14 <main+0xb0>)
 8003ea6:	f7fd fabf 	bl	8001428 <reg_dhcp_cbfunc>

	printf("W5500_OK\n\r");
 8003eaa:	481b      	ldr	r0, [pc, #108]	; (8003f18 <main+0xb4>)
 8003eac:	f003 fac6 	bl	800743c <iprintf>
		//spi_disable;
		//send_data++;
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
		//printf("Verson: %d, %f\n\r",200,99.909);
		//HAL_Delay(1000);
	    switch (DHCP_run())
 8003eb0:	f7fe fa52 	bl	8002358 <DHCP_run>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d81e      	bhi.n	8003ef8 <main+0x94>
 8003eba:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <main+0x5c>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003edf 	.word	0x08003edf
 8003ec4:	08003ef9 	.word	0x08003ef9
 8003ec8:	08003ef9 	.word	0x08003ef9
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003ed5 	.word	0x08003ed5
			case DHCP_IP_ASSIGN:
			case DHCP_IP_CHANGED:
			break;
			case DHCP_IP_LEASED:
			//Code cho chuong trinh thi viet vao day
			socket_sn = socket_sn;
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <main+0xa4>)
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <main+0xa4>)
 8003eda:	701a      	strb	r2, [r3, #0]
			break;
 8003edc:	e00f      	b.n	8003efe <main+0x9a>
			case DHCP_FAILED:
			dhcp_ret++;
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	71fb      	strb	r3, [r7, #7]
			if (dhcp_ret > MAX_DHCP_RET)
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d908      	bls.n	8003efc <main+0x98>
			{
				dhcp_ret = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	71fb      	strb	r3, [r7, #7]
				DHCP_stop(); //if restart, recall DHCP_init()
 8003eee:	f7fe fb4d 	bl	800258c <DHCP_stop>
				W5500_Network_Init();
 8003ef2:	f7ff fef5 	bl	8003ce0 <W5500_Network_Init>
			}
			break;
 8003ef6:	e001      	b.n	8003efc <main+0x98>
			default:
			break;
 8003ef8:	bf00      	nop
 8003efa:	e7d9      	b.n	8003eb0 <main+0x4c>
			break;
 8003efc:	bf00      	nop
	    switch (DHCP_run())
 8003efe:	e7d7      	b.n	8003eb0 <main+0x4c>
 8003f00:	0800938c 	.word	0x0800938c
 8003f04:	20000048 	.word	0x20000048
 8003f08:	20000295 	.word	0x20000295
 8003f0c:	200002bc 	.word	0x200002bc
 8003f10:	08003e55 	.word	0x08003e55
 8003f14:	08003e11 	.word	0x08003e11
 8003f18:	0800939c 	.word	0x0800939c

08003f1c <HAL_UART_TxCpltCallback>:
	    }
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_UART_TxCpltCallback+0x24>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d103      	bne.n	8003f38 <HAL_UART_TxCpltCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8003f30:	2140      	movs	r1, #64	; 0x40
 8003f32:	4804      	ldr	r0, [pc, #16]	; (8003f44 <HAL_UART_TxCpltCallback+0x28>)
 8003f34:	f000 fed2 	bl	8004cdc <HAL_GPIO_TogglePin>
	}
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000abc 	.word	0x20000abc
 8003f44:	40020400 	.word	0x40020400

08003f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b092      	sub	sp, #72	; 0x48
 8003f4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f4e:	f107 0314 	add.w	r3, r7, #20
 8003f52:	2234      	movs	r2, #52	; 0x34
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 fe18 	bl	8006b8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
 8003f68:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <SystemClock_Config+0x98>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <SystemClock_Config+0x98>)
 8003f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f78:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f82:	2310      	movs	r3, #16
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f86:	2302      	movs	r3, #2
 8003f88:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003f8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f92:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8003f94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f98:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 feb6 	bl	8004d10 <HAL_RCC_OscConfig>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <SystemClock_Config+0x66>
	{
	Error_Handler();
 8003faa:	f000 f8a5 	bl	80040f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fae:	230f      	movs	r3, #15
 8003fb0:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003fc2:	463b      	mov	r3, r7
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 f9d2 	bl	8005370 <HAL_RCC_ClockConfig>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <SystemClock_Config+0x8e>
	{
	Error_Handler();
 8003fd2:	f000 f891 	bl	80040f8 <Error_Handler>
	}
}
 8003fd6:	bf00      	nop
 8003fd8:	3748      	adds	r7, #72	; 0x48
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40007000 	.word	0x40007000

08003fe4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <MX_USART1_UART_Init+0x4c>)
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <MX_USART1_UART_Init+0x50>)
 8003fec:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <MX_USART1_UART_Init+0x4c>)
 8003ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ff4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ff6:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <MX_USART1_UART_Init+0x4c>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <MX_USART1_UART_Init+0x4c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <MX_USART1_UART_Init+0x4c>)
 8004004:	2200      	movs	r2, #0
 8004006:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <MX_USART1_UART_Init+0x4c>)
 800400a:	220c      	movs	r2, #12
 800400c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <MX_USART1_UART_Init+0x4c>)
 8004010:	2200      	movs	r2, #0
 8004012:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <MX_USART1_UART_Init+0x4c>)
 8004016:	2200      	movs	r2, #0
 8004018:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800401a:	4805      	ldr	r0, [pc, #20]	; (8004030 <MX_USART1_UART_Init+0x4c>)
 800401c:	f002 f946 	bl	80062ac <HAL_UART_Init>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <MX_USART1_UART_Init+0x46>
	{
	Error_Handler();
 8004026:	f000 f867 	bl	80040f8 <Error_Handler>
	}
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000abc 	.word	0x20000abc
 8004034:	40013800 	.word	0x40013800

08004038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403e:	f107 030c 	add.w	r3, r7, #12
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	609a      	str	r2, [r3, #8]
 800404a:	60da      	str	r2, [r3, #12]
 800404c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800404e:	4b27      	ldr	r3, [pc, #156]	; (80040ec <MX_GPIO_Init+0xb4>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4a26      	ldr	r2, [pc, #152]	; (80040ec <MX_GPIO_Init+0xb4>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	61d3      	str	r3, [r2, #28]
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <MX_GPIO_Init+0xb4>)
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004066:	4b21      	ldr	r3, [pc, #132]	; (80040ec <MX_GPIO_Init+0xb4>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	4a20      	ldr	r2, [pc, #128]	; (80040ec <MX_GPIO_Init+0xb4>)
 800406c:	f043 0308 	orr.w	r3, r3, #8
 8004070:	61d3      	str	r3, [r2, #28]
 8004072:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <MX_GPIO_Init+0xb4>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800407e:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <MX_GPIO_Init+0xb4>)
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <MX_GPIO_Init+0xb4>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	61d3      	str	r3, [r2, #28]
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <MX_GPIO_Init+0xb4>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8004096:	2201      	movs	r2, #1
 8004098:	2104      	movs	r1, #4
 800409a:	4815      	ldr	r0, [pc, #84]	; (80040f0 <MX_GPIO_Init+0xb8>)
 800409c:	f000 fe06 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80040a0:	2200      	movs	r2, #0
 80040a2:	21c0      	movs	r1, #192	; 0xc0
 80040a4:	4813      	ldr	r0, [pc, #76]	; (80040f4 <MX_GPIO_Init+0xbc>)
 80040a6:	f000 fe01 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040aa:	2304      	movs	r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ae:	2301      	movs	r3, #1
 80040b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b6:	2303      	movs	r3, #3
 80040b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040ba:	f107 030c 	add.w	r3, r7, #12
 80040be:	4619      	mov	r1, r3
 80040c0:	480b      	ldr	r0, [pc, #44]	; (80040f0 <MX_GPIO_Init+0xb8>)
 80040c2:	f000 fc75 	bl	80049b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040c6:	23c0      	movs	r3, #192	; 0xc0
 80040c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ca:	2301      	movs	r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d6:	f107 030c 	add.w	r3, r7, #12
 80040da:	4619      	mov	r1, r3
 80040dc:	4805      	ldr	r0, [pc, #20]	; (80040f4 <MX_GPIO_Init+0xbc>)
 80040de:	f000 fc67 	bl	80049b0 <HAL_GPIO_Init>

}
 80040e2:	bf00      	nop
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40020c00 	.word	0x40020c00
 80040f4:	40020400 	.word	0x40020400

080040f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <W5500_SPI_Init>:
		  PA5 --> W5500_SCK
		  PA6 --> W5500_MISO
		  PA7 --> W5500_MOSI
**********************************************/
static void W5500_SPI_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	hspi1.Instance 						= SPI1;
 8004108:	4b15      	ldr	r3, [pc, #84]	; (8004160 <W5500_SPI_Init+0x5c>)
 800410a:	4a16      	ldr	r2, [pc, #88]	; (8004164 <W5500_SPI_Init+0x60>)
 800410c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode 					= SPI_MODE_MASTER;
 800410e:	4b14      	ldr	r3, [pc, #80]	; (8004160 <W5500_SPI_Init+0x5c>)
 8004110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004114:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction 				= SPI_DIRECTION_2LINES;
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <W5500_SPI_Init+0x5c>)
 8004118:	2200      	movs	r2, #0
 800411a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize 				= SPI_DATASIZE_8BIT;
 800411c:	4b10      	ldr	r3, [pc, #64]	; (8004160 <W5500_SPI_Init+0x5c>)
 800411e:	2200      	movs	r2, #0
 8004120:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity 				= SPI_POLARITY_LOW;
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <W5500_SPI_Init+0x5c>)
 8004124:	2200      	movs	r2, #0
 8004126:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase 				= SPI_PHASE_1EDGE;
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <W5500_SPI_Init+0x5c>)
 800412a:	2200      	movs	r2, #0
 800412c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS 						= SPI_NSS_SOFT;
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <W5500_SPI_Init+0x5c>)
 8004130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004134:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler 		= SPI_BAUDRATEPRESCALER_8;
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <W5500_SPI_Init+0x5c>)
 8004138:	2210      	movs	r2, #16
 800413a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit 				= SPI_FIRSTBIT_MSB;
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <W5500_SPI_Init+0x5c>)
 800413e:	2200      	movs	r2, #0
 8004140:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode 					= SPI_TIMODE_DISABLE;
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <W5500_SPI_Init+0x5c>)
 8004144:	2200      	movs	r2, #0
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <W5500_SPI_Init+0x5c>)
 800414a:	2200      	movs	r2, #0
 800414c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial 			= 10;
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <W5500_SPI_Init+0x5c>)
 8004150:	220a      	movs	r2, #10
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c

	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004154:	4802      	ldr	r0, [pc, #8]	; (8004160 <W5500_SPI_Init+0x5c>)
 8004156:	f001 fb73 	bl	8005840 <HAL_SPI_Init>
	{
		//Error_Handler();
	}
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000b04 	.word	0x20000b04
 8004164:	40013000 	.word	0x40013000

08004168 <W5500_CS_Select>:
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void(*bus_wb)(uint32_t addr, iodata_t wb));
void reg_wizchip_spi_cbfunc(uint8_t(*spi_rb)(void), void(*spi_wb)(uint8_t wb));
void reg_wizchip_spiburst_cbfunc(void(*spi_rb)(uint8_t* pBuf, uint16_t len), void(*spi_wb)(uint8_t* pBuf, uint16_t len));

static void W5500_CS_Select(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //Chân select cần được đẩy về 0
 800416c:	2200      	movs	r2, #0
 800416e:	2104      	movs	r1, #4
 8004170:	4802      	ldr	r0, [pc, #8]	; (800417c <W5500_CS_Select+0x14>)
 8004172:	f000 fd9b 	bl	8004cac <HAL_GPIO_WritePin>
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40020c00 	.word	0x40020c00

08004180 <W5500_CS_Deselect>:

static void W5500_CS_Deselect(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);  //Khi đẩy select lên 1 thì sẽ deactive W5500
 8004184:	2201      	movs	r2, #1
 8004186:	2104      	movs	r1, #4
 8004188:	4802      	ldr	r0, [pc, #8]	; (8004194 <W5500_CS_Deselect+0x14>)
 800418a:	f000 fd8f 	bl	8004cac <HAL_GPIO_WritePin>
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40020c00 	.word	0x40020c00

08004198 <W5500_WriteByte>:

static void W5500_WriteByte(uint8_t byte)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
	 while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80041a2:	bf00      	nop
 80041a4:	4807      	ldr	r0, [pc, #28]	; (80041c4 <W5500_WriteByte+0x2c>)
 80041a6:	f001 ff96 	bl	80060d6 <HAL_SPI_GetState>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d1f9      	bne.n	80041a4 <W5500_WriteByte+0xc>
	 HAL_SPI_Transmit(&hspi1, (uint8_t *) &byte, 1, 10);
 80041b0:	1df9      	adds	r1, r7, #7
 80041b2:	230a      	movs	r3, #10
 80041b4:	2201      	movs	r2, #1
 80041b6:	4803      	ldr	r0, [pc, #12]	; (80041c4 <W5500_WriteByte+0x2c>)
 80041b8:	f001 fbbe 	bl	8005938 <HAL_SPI_Transmit>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000b04 	.word	0x20000b04

080041c8 <W5500_ReadByte>:

static uint8_t W5500_ReadByte(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af02      	add	r7, sp, #8
	uint8_t Dummy = 0xFF;
 80041ce:	23ff      	movs	r3, #255	; 0xff
 80041d0:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData;
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80041d2:	bf00      	nop
 80041d4:	4809      	ldr	r0, [pc, #36]	; (80041fc <W5500_ReadByte+0x34>)
 80041d6:	f001 ff7e 	bl	80060d6 <HAL_SPI_GetState>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d1f9      	bne.n	80041d4 <W5500_ReadByte+0xc>
	HAL_SPI_TransmitReceive(&hspi1,&Dummy,&RxData,1,10);
 80041e0:	1dba      	adds	r2, r7, #6
 80041e2:	1df9      	adds	r1, r7, #7
 80041e4:	230a      	movs	r3, #10
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2301      	movs	r3, #1
 80041ea:	4804      	ldr	r0, [pc, #16]	; (80041fc <W5500_ReadByte+0x34>)
 80041ec:	f001 fce0 	bl	8005bb0 <HAL_SPI_TransmitReceive>
	return RxData;
 80041f0:	79bb      	ldrb	r3, [r7, #6]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000b04 	.word	0x20000b04

08004200 <W5500_Mem_Init>:


static void W5500_Mem_Init(void)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
	uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <W5500_Mem_Init+0x30>)
 8004208:	463c      	mov	r4, r7
 800420a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800420c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize) == -1)
 8004210:	463b      	mov	r3, r7
 8004212:	4619      	mov	r1, r3
 8004214:	2001      	movs	r0, #1
 8004216:	f7ff f8bf 	bl	8003398 <ctlwizchip>
 800421a:	4603      	mov	r3, r0
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d102      	bne.n	8004228 <W5500_Mem_Init+0x28>
	{
		printf("WIZCHIP Initialized fail.\r\n");
 8004222:	4804      	ldr	r0, [pc, #16]	; (8004234 <W5500_Mem_Init+0x34>)
 8004224:	f003 f97e 	bl	8007524 <puts>
		return;
	}
}
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bd90      	pop	{r4, r7, pc}
 800422e:	bf00      	nop
 8004230:	080093c4 	.word	0x080093c4
 8004234:	080093a8 	.word	0x080093a8

08004238 <W5500_Init>:

//Khoi tao cai dat lien quan toi W5500
void W5500_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
	W5500_SPI_Init();
 800423e:	f7ff ff61 	bl	8004104 <W5500_SPI_Init>
	
	for (int i=0x5FFF; i>0; i--); //Delay mot khoang thoi gian de khoi tao
 8004242:	f645 73ff 	movw	r3, #24575	; 0x5fff
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	e002      	b.n	8004250 <W5500_Init+0x18>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3b01      	subs	r3, #1
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	dcf9      	bgt.n	800424a <W5500_Init+0x12>
	W5500_Mem_Init();
 8004256:	f7ff ffd3 	bl	8004200 <W5500_Mem_Init>
	reg_wizchip_cris_cbfunc(0, 0);
 800425a:	2100      	movs	r1, #0
 800425c:	2000      	movs	r0, #0
 800425e:	f7ff f829 	bl	80032b4 <reg_wizchip_cris_cbfunc>
	reg_wizchip_cs_cbfunc(W5500_CS_Select, W5500_CS_Deselect);
 8004262:	4906      	ldr	r1, [pc, #24]	; (800427c <W5500_Init+0x44>)
 8004264:	4806      	ldr	r0, [pc, #24]	; (8004280 <W5500_Init+0x48>)
 8004266:	f7ff f849 	bl	80032fc <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800426a:	4906      	ldr	r1, [pc, #24]	; (8004284 <W5500_Init+0x4c>)
 800426c:	4806      	ldr	r0, [pc, #24]	; (8004288 <W5500_Init+0x50>)
 800426e:	f7ff f869 	bl	8003344 <reg_wizchip_spi_cbfunc>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	08004181 	.word	0x08004181
 8004280:	08004169 	.word	0x08004169
 8004284:	08004199 	.word	0x08004199
 8004288:	080041c9 	.word	0x080041c9

0800428c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_MspInit+0x58>)
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <HAL_MspInit+0x58>)
 8004298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800429c:	6253      	str	r3, [r2, #36]	; 0x24
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <HAL_MspInit+0x58>)
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <HAL_MspInit+0x58>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a0d      	ldr	r2, [pc, #52]	; (80042e4 <HAL_MspInit+0x58>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6213      	str	r3, [r2, #32]
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_MspInit+0x58>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <HAL_MspInit+0x58>)
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <HAL_MspInit+0x58>)
 80042c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6253      	str	r3, [r2, #36]	; 0x24
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_MspInit+0x58>)
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	40023800 	.word	0x40023800

080042e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f0:	f107 0314 	add.w	r3, r7, #20
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	60da      	str	r2, [r3, #12]
 80042fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <HAL_SPI_MspInit+0x8c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d12f      	bne.n	800436a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800430a:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <HAL_SPI_MspInit+0x90>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <HAL_SPI_MspInit+0x90>)
 8004310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004314:	6213      	str	r3, [r2, #32]
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <HAL_SPI_MspInit+0x90>)
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <HAL_SPI_MspInit+0x90>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	4a14      	ldr	r2, [pc, #80]	; (8004378 <HAL_SPI_MspInit+0x90>)
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	61d3      	str	r3, [r2, #28]
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_SPI_MspInit+0x90>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800433a:	2338      	movs	r3, #56	; 0x38
 800433c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433e:	2302      	movs	r3, #2
 8004340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004346:	2303      	movs	r3, #3
 8004348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800434a:	2305      	movs	r3, #5
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434e:	f107 0314 	add.w	r3, r7, #20
 8004352:	4619      	mov	r1, r3
 8004354:	4809      	ldr	r0, [pc, #36]	; (800437c <HAL_SPI_MspInit+0x94>)
 8004356:	f000 fb2b 	bl	80049b0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	2023      	movs	r0, #35	; 0x23
 8004360:	f000 faaf 	bl	80048c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004364:	2023      	movs	r0, #35	; 0x23
 8004366:	f000 fac8 	bl	80048fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800436a:	bf00      	nop
 800436c:	3728      	adds	r7, #40	; 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40013000 	.word	0x40013000
 8004378:	40023800 	.word	0x40023800
 800437c:	40020400 	.word	0x40020400

08004380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1b      	ldr	r2, [pc, #108]	; (800440c <HAL_UART_MspInit+0x8c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d130      	bne.n	8004404 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_UART_MspInit+0x90>)
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4a1a      	ldr	r2, [pc, #104]	; (8004410 <HAL_UART_MspInit+0x90>)
 80043a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043ac:	6213      	str	r3, [r2, #32]
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <HAL_UART_MspInit+0x90>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b6:	613b      	str	r3, [r7, #16]
 80043b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <HAL_UART_MspInit+0x90>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4a14      	ldr	r2, [pc, #80]	; (8004410 <HAL_UART_MspInit+0x90>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	61d3      	str	r3, [r2, #28]
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_UART_MspInit+0x90>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d8:	2302      	movs	r3, #2
 80043da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e0:	2303      	movs	r3, #3
 80043e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043e4:	2307      	movs	r3, #7
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	f107 0314 	add.w	r3, r7, #20
 80043ec:	4619      	mov	r1, r3
 80043ee:	4809      	ldr	r0, [pc, #36]	; (8004414 <HAL_UART_MspInit+0x94>)
 80043f0:	f000 fade 	bl	80049b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2100      	movs	r1, #0
 80043f8:	2025      	movs	r0, #37	; 0x25
 80043fa:	f000 fa62 	bl	80048c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043fe:	2025      	movs	r0, #37	; 0x25
 8004400:	f000 fa7b 	bl	80048fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004404:	bf00      	nop
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40013800 	.word	0x40013800
 8004410:	40023800 	.word	0x40023800
 8004414:	40020000 	.word	0x40020000

08004418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004428:	e7fe      	b.n	8004428 <HardFault_Handler+0x4>

0800442a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800442e:	e7fe      	b.n	800442e <MemManage_Handler+0x4>

08004430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004434:	e7fe      	b.n	8004434 <BusFault_Handler+0x4>

08004436 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800443a:	e7fe      	b.n	800443a <UsageFault_Handler+0x4>

0800443c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004458:	bf00      	nop
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004464:	f000 f93a 	bl	80046dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004468:	bf00      	nop
 800446a:	bd80      	pop	{r7, pc}

0800446c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004470:	4802      	ldr	r0, [pc, #8]	; (800447c <SPI1_IRQHandler+0x10>)
 8004472:	f001 fd3f 	bl	8005ef4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004476:	bf00      	nop
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000b04 	.word	0x20000b04

08004480 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004484:	4802      	ldr	r0, [pc, #8]	; (8004490 <USART1_IRQHandler+0x10>)
 8004486:	f001 fff7 	bl	8006478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000abc 	.word	0x20000abc

08004494 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e00a      	b.n	80044bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80044a6:	f3af 8000 	nop.w
 80044aa:	4601      	mov	r1, r0
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	60ba      	str	r2, [r7, #8]
 80044b2:	b2ca      	uxtb	r2, r1
 80044b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	3301      	adds	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	dbf0      	blt.n	80044a6 <_read+0x12>
	}

return len;
 80044c4:	687b      	ldr	r3, [r7, #4]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e009      	b.n	80044f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	60ba      	str	r2, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fbe3 	bl	8003cb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	3301      	adds	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	dbf1      	blt.n	80044e0 <_write+0x12>
	}
	return len;
 80044fc:	687b      	ldr	r3, [r7, #4]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <_close>:

int _close(int file)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
	return -1;
 800450e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800452c:	605a      	str	r2, [r3, #4]
	return 0;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <_isatty>:

int _isatty(int file)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
	return 1;
 8004542:	2301      	movs	r3, #1
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
	return 0;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
	...

08004568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004570:	4a14      	ldr	r2, [pc, #80]	; (80045c4 <_sbrk+0x5c>)
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <_sbrk+0x60>)
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800457c:	4b13      	ldr	r3, [pc, #76]	; (80045cc <_sbrk+0x64>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <_sbrk+0x64>)
 8004586:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <_sbrk+0x68>)
 8004588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800458a:	4b10      	ldr	r3, [pc, #64]	; (80045cc <_sbrk+0x64>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	d207      	bcs.n	80045a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004598:	f002 face 	bl	8006b38 <__errno>
 800459c:	4602      	mov	r2, r0
 800459e:	230c      	movs	r3, #12
 80045a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	e009      	b.n	80045bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <_sbrk+0x64>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <_sbrk+0x64>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	4a05      	ldr	r2, [pc, #20]	; (80045cc <_sbrk+0x64>)
 80045b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045ba:	68fb      	ldr	r3, [r7, #12]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20004000 	.word	0x20004000
 80045c8:	00000400 	.word	0x00000400
 80045cc:	20000298 	.word	0x20000298
 80045d0:	20000b68 	.word	0x20000b68

080045d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <SystemInit+0x14>)
 80045da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045de:	609a      	str	r2, [r3, #8]
#endif
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80045ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80045ee:	e003      	b.n	80045f8 <LoopCopyDataInit>

080045f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80045f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80045f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80045f6:	3104      	adds	r1, #4

080045f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80045f8:	480a      	ldr	r0, [pc, #40]	; (8004624 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80045fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80045fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004600:	d3f6      	bcc.n	80045f0 <CopyDataInit>
  ldr r2, =_sbss
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004604:	e002      	b.n	800460c <LoopFillZerobss>

08004606 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004606:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004608:	f842 3b04 	str.w	r3, [r2], #4

0800460c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800460e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004610:	d3f9      	bcc.n	8004606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004612:	f7ff ffdf 	bl	80045d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004616:	f002 fa95 	bl	8006b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800461a:	f7ff fc23 	bl	8003e64 <main>
  bx lr
 800461e:	4770      	bx	lr
  ldr r3, =_sidata
 8004620:	080096c8 	.word	0x080096c8
  ldr r0, =_sdata
 8004624:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004628:	2000023c 	.word	0x2000023c
  ldr r2, =_sbss
 800462c:	2000023c 	.word	0x2000023c
  ldr r3, = _ebss
 8004630:	20000b64 	.word	0x20000b64

08004634 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004634:	e7fe      	b.n	8004634 <ADC1_IRQHandler>

08004636 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004640:	2003      	movs	r0, #3
 8004642:	f000 f933 	bl	80048ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004646:	2000      	movs	r0, #0
 8004648:	f000 f80e 	bl	8004668 <HAL_InitTick>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	71fb      	strb	r3, [r7, #7]
 8004656:	e001      	b.n	800465c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004658:	f7ff fe18 	bl	800428c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800465c:	79fb      	ldrb	r3, [r7, #7]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004674:	4b16      	ldr	r3, [pc, #88]	; (80046d0 <HAL_InitTick+0x68>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d022      	beq.n	80046c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800467c:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <HAL_InitTick+0x6c>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <HAL_InitTick+0x68>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004688:	fbb1 f3f3 	udiv	r3, r1, r3
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	4618      	mov	r0, r3
 8004692:	f000 f940 	bl	8004916 <HAL_SYSTICK_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10f      	bne.n	80046bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	d809      	bhi.n	80046b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046a2:	2200      	movs	r2, #0
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295
 80046aa:	f000 f90a 	bl	80048c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046ae:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <HAL_InitTick+0x70>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	e007      	b.n	80046c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
 80046ba:	e004      	b.n	80046c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	e001      	b.n	80046c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000068 	.word	0x20000068
 80046d4:	20000060 	.word	0x20000060
 80046d8:	20000064 	.word	0x20000064

080046dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_IncTick+0x1c>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_IncTick+0x20>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4413      	add	r3, r2
 80046ea:	4a03      	ldr	r2, [pc, #12]	; (80046f8 <HAL_IncTick+0x1c>)
 80046ec:	6013      	str	r3, [r2, #0]
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000b5c 	.word	0x20000b5c
 80046fc:	20000068 	.word	0x20000068

08004700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return uwTick;
 8004704:	4b02      	ldr	r3, [pc, #8]	; (8004710 <HAL_GetTick+0x10>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	20000b5c 	.word	0x20000b5c

08004714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <__NVIC_SetPriorityGrouping+0x44>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004730:	4013      	ands	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800473c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004746:	4a04      	ldr	r2, [pc, #16]	; (8004758 <__NVIC_SetPriorityGrouping+0x44>)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	60d3      	str	r3, [r2, #12]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <__NVIC_GetPriorityGrouping+0x18>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	0a1b      	lsrs	r3, r3, #8
 8004766:	f003 0307 	and.w	r3, r3, #7
}
 800476a:	4618      	mov	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	2b00      	cmp	r3, #0
 8004788:	db0b      	blt.n	80047a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	f003 021f 	and.w	r2, r3, #31
 8004790:	4906      	ldr	r1, [pc, #24]	; (80047ac <__NVIC_EnableIRQ+0x34>)
 8004792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2001      	movs	r0, #1
 800479a:	fa00 f202 	lsl.w	r2, r0, r2
 800479e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	e000e100 	.word	0xe000e100

080047b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	6039      	str	r1, [r7, #0]
 80047ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db0a      	blt.n	80047da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	490c      	ldr	r1, [pc, #48]	; (80047fc <__NVIC_SetPriority+0x4c>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	440b      	add	r3, r1
 80047d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d8:	e00a      	b.n	80047f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4908      	ldr	r1, [pc, #32]	; (8004800 <__NVIC_SetPriority+0x50>)
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	3b04      	subs	r3, #4
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	440b      	add	r3, r1
 80047ee:	761a      	strb	r2, [r3, #24]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	e000e100 	.word	0xe000e100
 8004800:	e000ed00 	.word	0xe000ed00

08004804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f1c3 0307 	rsb	r3, r3, #7
 800481e:	2b04      	cmp	r3, #4
 8004820:	bf28      	it	cs
 8004822:	2304      	movcs	r3, #4
 8004824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3304      	adds	r3, #4
 800482a:	2b06      	cmp	r3, #6
 800482c:	d902      	bls.n	8004834 <NVIC_EncodePriority+0x30>
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3b03      	subs	r3, #3
 8004832:	e000      	b.n	8004836 <NVIC_EncodePriority+0x32>
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004838:	f04f 32ff 	mov.w	r2, #4294967295
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43da      	mvns	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	401a      	ands	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800484c:	f04f 31ff 	mov.w	r1, #4294967295
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43d9      	mvns	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800485c:	4313      	orrs	r3, r2
         );
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004878:	d301      	bcc.n	800487e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800487a:	2301      	movs	r3, #1
 800487c:	e00f      	b.n	800489e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <SysTick_Config+0x40>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004886:	210f      	movs	r1, #15
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	f7ff ff90 	bl	80047b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <SysTick_Config+0x40>)
 8004892:	2200      	movs	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <SysTick_Config+0x40>)
 8004898:	2207      	movs	r2, #7
 800489a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	e000e010 	.word	0xe000e010

080048ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff2d 	bl	8004714 <__NVIC_SetPriorityGrouping>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	4603      	mov	r3, r0
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048d4:	f7ff ff42 	bl	800475c <__NVIC_GetPriorityGrouping>
 80048d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f7ff ff90 	bl	8004804 <NVIC_EncodePriority>
 80048e4:	4602      	mov	r2, r0
 80048e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff ff5f 	bl	80047b0 <__NVIC_SetPriority>
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	4603      	mov	r3, r0
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff35 	bl	8004778 <__NVIC_EnableIRQ>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ffa2 	bl	8004868 <SysTick_Config>
 8004924:	4603      	mov	r3, r0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d005      	beq.n	8004952 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2204      	movs	r2, #4
 800494a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
 8004950:	e029      	b.n	80049a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 020e 	bic.w	r2, r2, #14
 8004960:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 021c 	and.w	r2, r3, #28
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	2101      	movs	r1, #1
 8004980:	fa01 f202 	lsl.w	r2, r1, r2
 8004984:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
    }
  }
  return status;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80049c2:	2300      	movs	r3, #0
 80049c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80049c6:	e154      	b.n	8004c72 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	2101      	movs	r1, #1
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 8146 	beq.w	8004c6c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d00b      	beq.n	8004a00 <HAL_GPIO_Init+0x50>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d007      	beq.n	8004a00 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049f4:	2b11      	cmp	r3, #17
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b12      	cmp	r3, #18
 80049fe:	d130      	bne.n	8004a62 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004a36:	2201      	movs	r2, #1
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4013      	ands	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	f003 0201 	and.w	r2, r3, #1
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0xf2>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b12      	cmp	r3, #18
 8004aa0:	d123      	bne.n	8004aea <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	08da      	lsrs	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3208      	adds	r2, #8
 8004aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	220f      	movs	r2, #15
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	08da      	lsrs	r2, r3, #3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3208      	adds	r2, #8
 8004ae4:	6939      	ldr	r1, [r7, #16]
 8004ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	2203      	movs	r2, #3
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 0203 	and.w	r2, r3, #3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80a0 	beq.w	8004c6c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b2c:	4b57      	ldr	r3, [pc, #348]	; (8004c8c <HAL_GPIO_Init+0x2dc>)
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	4a56      	ldr	r2, [pc, #344]	; (8004c8c <HAL_GPIO_Init+0x2dc>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6213      	str	r3, [r2, #32]
 8004b38:	4b54      	ldr	r3, [pc, #336]	; (8004c8c <HAL_GPIO_Init+0x2dc>)
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b44:	4a52      	ldr	r2, [pc, #328]	; (8004c90 <HAL_GPIO_Init+0x2e0>)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	220f      	movs	r2, #15
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a4a      	ldr	r2, [pc, #296]	; (8004c94 <HAL_GPIO_Init+0x2e4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d019      	beq.n	8004ba4 <HAL_GPIO_Init+0x1f4>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a49      	ldr	r2, [pc, #292]	; (8004c98 <HAL_GPIO_Init+0x2e8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <HAL_GPIO_Init+0x1f0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a48      	ldr	r2, [pc, #288]	; (8004c9c <HAL_GPIO_Init+0x2ec>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00d      	beq.n	8004b9c <HAL_GPIO_Init+0x1ec>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a47      	ldr	r2, [pc, #284]	; (8004ca0 <HAL_GPIO_Init+0x2f0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <HAL_GPIO_Init+0x1e8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a46      	ldr	r2, [pc, #280]	; (8004ca4 <HAL_GPIO_Init+0x2f4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d101      	bne.n	8004b94 <HAL_GPIO_Init+0x1e4>
 8004b90:	2304      	movs	r3, #4
 8004b92:	e008      	b.n	8004ba6 <HAL_GPIO_Init+0x1f6>
 8004b94:	2305      	movs	r3, #5
 8004b96:	e006      	b.n	8004ba6 <HAL_GPIO_Init+0x1f6>
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e004      	b.n	8004ba6 <HAL_GPIO_Init+0x1f6>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e002      	b.n	8004ba6 <HAL_GPIO_Init+0x1f6>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_GPIO_Init+0x1f6>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	f002 0203 	and.w	r2, r2, #3
 8004bac:	0092      	lsls	r2, r2, #2
 8004bae:	4093      	lsls	r3, r2
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004bb6:	4936      	ldr	r1, [pc, #216]	; (8004c90 <HAL_GPIO_Init+0x2e0>)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <HAL_GPIO_Init+0x2f8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004be8:	4a2f      	ldr	r2, [pc, #188]	; (8004ca8 <HAL_GPIO_Init+0x2f8>)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bee:	4b2e      	ldr	r3, [pc, #184]	; (8004ca8 <HAL_GPIO_Init+0x2f8>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c12:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <HAL_GPIO_Init+0x2f8>)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c18:	4b23      	ldr	r3, [pc, #140]	; (8004ca8 <HAL_GPIO_Init+0x2f8>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4013      	ands	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ca8 <HAL_GPIO_Init+0x2f8>)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c42:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_GPIO_Init+0x2f8>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004c66:	4a10      	ldr	r2, [pc, #64]	; (8004ca8 <HAL_GPIO_Init+0x2f8>)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f47f aea3 	bne.w	80049c8 <HAL_GPIO_Init+0x18>
  }
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40020000 	.word	0x40020000
 8004c98:	40020400 	.word	0x40020400
 8004c9c:	40020800 	.word	0x40020800
 8004ca0:	40020c00 	.word	0x40020c00
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40010400 	.word	0x40010400

08004cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cbc:	787b      	ldrb	r3, [r7, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004cc8:	e003      	b.n	8004cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	041a      	lsls	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	619a      	str	r2, [r3, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cee:	887a      	ldrh	r2, [r7, #2]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	041a      	lsls	r2, r3, #16
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	43d9      	mvns	r1, r3
 8004cfa:	887b      	ldrh	r3, [r7, #2]
 8004cfc:	400b      	ands	r3, r1
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	619a      	str	r2, [r3, #24]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr
	...

08004d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e31d      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d22:	4b94      	ldr	r3, [pc, #592]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d2c:	4b91      	ldr	r3, [pc, #580]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d34:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d07b      	beq.n	8004e3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d006      	beq.n	8004d56 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d10f      	bne.n	8004d6e <HAL_RCC_OscConfig+0x5e>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d54:	d10b      	bne.n	8004d6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d56:	4b87      	ldr	r3, [pc, #540]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d06a      	beq.n	8004e38 <HAL_RCC_OscConfig+0x128>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d166      	bne.n	8004e38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e2f7      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d106      	bne.n	8004d84 <HAL_RCC_OscConfig+0x74>
 8004d76:	4b7f      	ldr	r3, [pc, #508]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a7e      	ldr	r2, [pc, #504]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e02d      	b.n	8004de0 <HAL_RCC_OscConfig+0xd0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10c      	bne.n	8004da6 <HAL_RCC_OscConfig+0x96>
 8004d8c:	4b79      	ldr	r3, [pc, #484]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a78      	ldr	r2, [pc, #480]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	4b76      	ldr	r3, [pc, #472]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a75      	ldr	r2, [pc, #468]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	e01c      	b.n	8004de0 <HAL_RCC_OscConfig+0xd0>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b05      	cmp	r3, #5
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0xb8>
 8004dae:	4b71      	ldr	r3, [pc, #452]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a70      	ldr	r2, [pc, #448]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b6e      	ldr	r3, [pc, #440]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6d      	ldr	r2, [pc, #436]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e00b      	b.n	8004de0 <HAL_RCC_OscConfig+0xd0>
 8004dc8:	4b6a      	ldr	r3, [pc, #424]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a69      	ldr	r2, [pc, #420]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	4b67      	ldr	r3, [pc, #412]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a66      	ldr	r2, [pc, #408]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d013      	beq.n	8004e10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de8:	f7ff fc8a 	bl	8004700 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df0:	f7ff fc86 	bl	8004700 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	; 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e2ad      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e02:	4b5c      	ldr	r3, [pc, #368]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0xe0>
 8004e0e:	e014      	b.n	8004e3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e10:	f7ff fc76 	bl	8004700 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e18:	f7ff fc72 	bl	8004700 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b64      	cmp	r3, #100	; 0x64
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e299      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e2a:	4b52      	ldr	r3, [pc, #328]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x108>
 8004e36:	e000      	b.n	8004e3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d05a      	beq.n	8004efc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d119      	bne.n	8004e86 <HAL_RCC_OscConfig+0x176>
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d116      	bne.n	8004e86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e58:	4b46      	ldr	r3, [pc, #280]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_OscConfig+0x160>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e276      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e70:	4b40      	ldr	r3, [pc, #256]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	493d      	ldr	r1, [pc, #244]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e84:	e03a      	b.n	8004efc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d020      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8e:	4b3a      	ldr	r3, [pc, #232]	; (8004f78 <HAL_RCC_OscConfig+0x268>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7ff fc34 	bl	8004700 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e9c:	f7ff fc30 	bl	8004700 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e257      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eae:	4b31      	ldr	r3, [pc, #196]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eba:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	492a      	ldr	r1, [pc, #168]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	604b      	str	r3, [r1, #4]
 8004ece:	e015      	b.n	8004efc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed0:	4b29      	ldr	r3, [pc, #164]	; (8004f78 <HAL_RCC_OscConfig+0x268>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed6:	f7ff fc13 	bl	8004700 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ede:	f7ff fc0f 	bl	8004700 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e236      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ef0:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f0      	bne.n	8004ede <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80b8 	beq.w	800507a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d170      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f10:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_OscConfig+0x218>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e21a      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1a      	ldr	r2, [r3, #32]
 8004f2c:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d921      	bls.n	8004f7c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fc1f 	bl	8005780 <RCC_SetFlashLatencyFromMSIRange>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e208      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f4c:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	4906      	ldr	r1, [pc, #24]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f5e:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	4901      	ldr	r1, [pc, #4]	; (8004f74 <HAL_RCC_OscConfig+0x264>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	604b      	str	r3, [r1, #4]
 8004f72:	e020      	b.n	8004fb6 <HAL_RCC_OscConfig+0x2a6>
 8004f74:	40023800 	.word	0x40023800
 8004f78:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f7c:	4ba4      	ldr	r3, [pc, #656]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	49a1      	ldr	r1, [pc, #644]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f8e:	4ba0      	ldr	r3, [pc, #640]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	061b      	lsls	r3, r3, #24
 8004f9c:	499c      	ldr	r1, [pc, #624]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fbea 	bl	8005780 <RCC_SetFlashLatencyFromMSIRange>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e1d3      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	0b5b      	lsrs	r3, r3, #13
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004fc6:	4a92      	ldr	r2, [pc, #584]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8004fc8:	6892      	ldr	r2, [r2, #8]
 8004fca:	0912      	lsrs	r2, r2, #4
 8004fcc:	f002 020f 	and.w	r2, r2, #15
 8004fd0:	4990      	ldr	r1, [pc, #576]	; (8005214 <HAL_RCC_OscConfig+0x504>)
 8004fd2:	5c8a      	ldrb	r2, [r1, r2]
 8004fd4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004fd6:	4a90      	ldr	r2, [pc, #576]	; (8005218 <HAL_RCC_OscConfig+0x508>)
 8004fd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fda:	4b90      	ldr	r3, [pc, #576]	; (800521c <HAL_RCC_OscConfig+0x50c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fb42 	bl	8004668 <HAL_InitTick>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d045      	beq.n	800507a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	e1b5      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d029      	beq.n	800504e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ffa:	4b89      	ldr	r3, [pc, #548]	; (8005220 <HAL_RCC_OscConfig+0x510>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7ff fb7e 	bl	8004700 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005008:	f7ff fb7a 	bl	8004700 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e1a1      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800501a:	4b7d      	ldr	r3, [pc, #500]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005026:	4b7a      	ldr	r3, [pc, #488]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	4977      	ldr	r1, [pc, #476]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005038:	4b75      	ldr	r3, [pc, #468]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	061b      	lsls	r3, r3, #24
 8005046:	4972      	ldr	r1, [pc, #456]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
 800504c:	e015      	b.n	800507a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800504e:	4b74      	ldr	r3, [pc, #464]	; (8005220 <HAL_RCC_OscConfig+0x510>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7ff fb54 	bl	8004700 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800505c:	f7ff fb50 	bl	8004700 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e177      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800506e:	4b68      	ldr	r3, [pc, #416]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d030      	beq.n	80050e8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508e:	4b65      	ldr	r3, [pc, #404]	; (8005224 <HAL_RCC_OscConfig+0x514>)
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005094:	f7ff fb34 	bl	8004700 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800509c:	f7ff fb30 	bl	8004700 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e157      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ae:	4b58      	ldr	r3, [pc, #352]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80050b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x38c>
 80050ba:	e015      	b.n	80050e8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050bc:	4b59      	ldr	r3, [pc, #356]	; (8005224 <HAL_RCC_OscConfig+0x514>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c2:	f7ff fb1d 	bl	8004700 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ca:	f7ff fb19 	bl	8004700 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e140      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050dc:	4b4c      	ldr	r3, [pc, #304]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80050de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80b5 	beq.w	8005260 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fa:	4b45      	ldr	r3, [pc, #276]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10d      	bne.n	8005122 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	4b42      	ldr	r3, [pc, #264]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	4a41      	ldr	r2, [pc, #260]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	6253      	str	r3, [r2, #36]	; 0x24
 8005112:	4b3f      	ldr	r3, [pc, #252]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b41      	ldr	r3, [pc, #260]	; (8005228 <HAL_RCC_OscConfig+0x518>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d118      	bne.n	8005160 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512e:	4b3e      	ldr	r3, [pc, #248]	; (8005228 <HAL_RCC_OscConfig+0x518>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a3d      	ldr	r2, [pc, #244]	; (8005228 <HAL_RCC_OscConfig+0x518>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7ff fae1 	bl	8004700 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005142:	f7ff fadd 	bl	8004700 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e104      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005154:	4b34      	ldr	r3, [pc, #208]	; (8005228 <HAL_RCC_OscConfig+0x518>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x466>
 8005168:	4b29      	ldr	r3, [pc, #164]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	4a28      	ldr	r2, [pc, #160]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 800516e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005172:	6353      	str	r3, [r2, #52]	; 0x34
 8005174:	e02d      	b.n	80051d2 <HAL_RCC_OscConfig+0x4c2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x488>
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	4a23      	ldr	r2, [pc, #140]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8005184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005188:	6353      	str	r3, [r2, #52]	; 0x34
 800518a:	4b21      	ldr	r3, [pc, #132]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 800518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518e:	4a20      	ldr	r2, [pc, #128]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 8005190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005194:	6353      	str	r3, [r2, #52]	; 0x34
 8005196:	e01c      	b.n	80051d2 <HAL_RCC_OscConfig+0x4c2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b05      	cmp	r3, #5
 800519e:	d10c      	bne.n	80051ba <HAL_RCC_OscConfig+0x4aa>
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a4:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051aa:	6353      	str	r3, [r2, #52]	; 0x34
 80051ac:	4b18      	ldr	r3, [pc, #96]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b0:	4a17      	ldr	r2, [pc, #92]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b6:	6353      	str	r3, [r2, #52]	; 0x34
 80051b8:	e00b      	b.n	80051d2 <HAL_RCC_OscConfig+0x4c2>
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051be:	4a14      	ldr	r2, [pc, #80]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c4:	6353      	str	r3, [r2, #52]	; 0x34
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	4a11      	ldr	r2, [pc, #68]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d015      	beq.n	8005206 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051da:	f7ff fa91 	bl	8004700 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7ff fa8d 	bl	8004700 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0b2      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ee      	beq.n	80051e2 <HAL_RCC_OscConfig+0x4d2>
 8005204:	e023      	b.n	800524e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7ff fa7b 	bl	8004700 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800520c:	e019      	b.n	8005242 <HAL_RCC_OscConfig+0x532>
 800520e:	bf00      	nop
 8005210:	40023800 	.word	0x40023800
 8005214:	080093e0 	.word	0x080093e0
 8005218:	20000060 	.word	0x20000060
 800521c:	20000064 	.word	0x20000064
 8005220:	42470020 	.word	0x42470020
 8005224:	42470680 	.word	0x42470680
 8005228:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800522c:	f7ff fa68 	bl	8004700 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	; 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e08d      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005242:	4b49      	ldr	r3, [pc, #292]	; (8005368 <HAL_RCC_OscConfig+0x658>)
 8005244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1ee      	bne.n	800522c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800524e:	7ffb      	ldrb	r3, [r7, #31]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d105      	bne.n	8005260 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005254:	4b44      	ldr	r3, [pc, #272]	; (8005368 <HAL_RCC_OscConfig+0x658>)
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	4a43      	ldr	r2, [pc, #268]	; (8005368 <HAL_RCC_OscConfig+0x658>)
 800525a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800525e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	d079      	beq.n	800535c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b0c      	cmp	r3, #12
 800526c:	d056      	beq.n	800531c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b02      	cmp	r3, #2
 8005274:	d13b      	bne.n	80052ee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005276:	4b3d      	ldr	r3, [pc, #244]	; (800536c <HAL_RCC_OscConfig+0x65c>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7ff fa40 	bl	8004700 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005284:	f7ff fa3c 	bl	8004700 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e063      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005296:	4b34      	ldr	r3, [pc, #208]	; (8005368 <HAL_RCC_OscConfig+0x658>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a2:	4b31      	ldr	r3, [pc, #196]	; (8005368 <HAL_RCC_OscConfig+0x658>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	4319      	orrs	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	430b      	orrs	r3, r1
 80052ba:	492b      	ldr	r1, [pc, #172]	; (8005368 <HAL_RCC_OscConfig+0x658>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c0:	4b2a      	ldr	r3, [pc, #168]	; (800536c <HAL_RCC_OscConfig+0x65c>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c6:	f7ff fa1b 	bl	8004700 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ce:	f7ff fa17 	bl	8004700 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e03e      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e0:	4b21      	ldr	r3, [pc, #132]	; (8005368 <HAL_RCC_OscConfig+0x658>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x5be>
 80052ec:	e036      	b.n	800535c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b1f      	ldr	r3, [pc, #124]	; (800536c <HAL_RCC_OscConfig+0x65c>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7ff fa04 	bl	8004700 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fc:	f7ff fa00 	bl	8004700 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e027      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800530e:	4b16      	ldr	r3, [pc, #88]	; (8005368 <HAL_RCC_OscConfig+0x658>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x5ec>
 800531a:	e01f      	b.n	800535c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e01a      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <HAL_RCC_OscConfig+0x658>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	429a      	cmp	r2, r3
 800533a:	d10d      	bne.n	8005358 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d106      	bne.n	8005358 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800
 800536c:	42470060 	.word	0x42470060

08005370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e11a      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005384:	4b8f      	ldr	r3, [pc, #572]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d919      	bls.n	80053c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x34>
 8005398:	4b8a      	ldr	r3, [pc, #552]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a89      	ldr	r2, [pc, #548]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 800539e:	f043 0304 	orr.w	r3, r3, #4
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b87      	ldr	r3, [pc, #540]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 0201 	bic.w	r2, r3, #1
 80053ac:	4985      	ldr	r1, [pc, #532]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b4:	4b83      	ldr	r3, [pc, #524]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d001      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e0f9      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d2:	4b7d      	ldr	r3, [pc, #500]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	497a      	ldr	r1, [pc, #488]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 808e 	beq.w	800550e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053fa:	4b73      	ldr	r3, [pc, #460]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d121      	bne.n	800544a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e0d7      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005412:	4b6d      	ldr	r3, [pc, #436]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d115      	bne.n	800544a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e0cb      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d107      	bne.n	800543a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800542a:	4b67      	ldr	r3, [pc, #412]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e0bf      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800543a:	4b63      	ldr	r3, [pc, #396]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e0b7      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800544a:	4b5f      	ldr	r3, [pc, #380]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 0203 	bic.w	r2, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	495c      	ldr	r1, [pc, #368]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 8005458:	4313      	orrs	r3, r2
 800545a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800545c:	f7ff f950 	bl	8004700 <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d112      	bne.n	8005490 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800546a:	e00a      	b.n	8005482 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7ff f948 	bl	8004700 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	; 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e09b      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005482:	4b51      	ldr	r3, [pc, #324]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b08      	cmp	r3, #8
 800548c:	d1ee      	bne.n	800546c <HAL_RCC_ClockConfig+0xfc>
 800548e:	e03e      	b.n	800550e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b03      	cmp	r3, #3
 8005496:	d112      	bne.n	80054be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005498:	e00a      	b.n	80054b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800549a:	f7ff f931 	bl	8004700 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e084      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054b0:	4b45      	ldr	r3, [pc, #276]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b0c      	cmp	r3, #12
 80054ba:	d1ee      	bne.n	800549a <HAL_RCC_ClockConfig+0x12a>
 80054bc:	e027      	b.n	800550e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d11d      	bne.n	8005502 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80054c6:	e00a      	b.n	80054de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c8:	f7ff f91a 	bl	8004700 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e06d      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80054de:	4b3a      	ldr	r3, [pc, #232]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d1ee      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x158>
 80054ea:	e010      	b.n	800550e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ec:	f7ff f908 	bl	8004700 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e05b      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005502:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1ee      	bne.n	80054ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800550e:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d219      	bcs.n	8005550 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d105      	bne.n	800552e <HAL_RCC_ClockConfig+0x1be>
 8005522:	4b28      	ldr	r3, [pc, #160]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a27      	ldr	r2, [pc, #156]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 8005528:	f043 0304 	orr.w	r3, r3, #4
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 0201 	bic.w	r2, r3, #1
 8005536:	4923      	ldr	r1, [pc, #140]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <HAL_RCC_ClockConfig+0x254>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e034      	b.n	80055ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800555c:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4917      	ldr	r1, [pc, #92]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	490f      	ldr	r1, [pc, #60]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800558e:	f000 f823 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8005592:	4601      	mov	r1, r0
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <HAL_RCC_ClockConfig+0x258>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	4a0b      	ldr	r2, [pc, #44]	; (80055cc <HAL_RCC_ClockConfig+0x25c>)
 80055a0:	5cd3      	ldrb	r3, [r2, r3]
 80055a2:	fa21 f303 	lsr.w	r3, r1, r3
 80055a6:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <HAL_RCC_ClockConfig+0x260>)
 80055a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCC_ClockConfig+0x264>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff f85a 	bl	8004668 <HAL_InitTick>
 80055b4:	4603      	mov	r3, r0
 80055b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80055b8:	7afb      	ldrb	r3, [r7, #11]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40023c00 	.word	0x40023c00
 80055c8:	40023800 	.word	0x40023800
 80055cc:	080093e0 	.word	0x080093e0
 80055d0:	20000060 	.word	0x20000060
 80055d4:	20000064 	.word	0x20000064

080055d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80055de:	4b4b      	ldr	r3, [pc, #300]	; (800570c <HAL_RCC_GetSysClockFreq+0x134>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d006      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0x24>
 80055ee:	2b0c      	cmp	r3, #12
 80055f0:	d007      	beq.n	8005602 <HAL_RCC_GetSysClockFreq+0x2a>
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d176      	bne.n	80056e4 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055f6:	4b46      	ldr	r3, [pc, #280]	; (8005710 <HAL_RCC_GetSysClockFreq+0x138>)
 80055f8:	613b      	str	r3, [r7, #16]
      break;
 80055fa:	e081      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055fc:	4b45      	ldr	r3, [pc, #276]	; (8005714 <HAL_RCC_GetSysClockFreq+0x13c>)
 80055fe:	613b      	str	r3, [r7, #16]
      break;
 8005600:	e07e      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	0c9b      	lsrs	r3, r3, #18
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	4a43      	ldr	r2, [pc, #268]	; (8005718 <HAL_RCC_GetSysClockFreq+0x140>)
 800560c:	5cd3      	ldrb	r3, [r2, r3]
 800560e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	0d9b      	lsrs	r3, r3, #22
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	3301      	adds	r3, #1
 800561a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800561c:	4b3b      	ldr	r3, [pc, #236]	; (800570c <HAL_RCC_GetSysClockFreq+0x134>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d019      	beq.n	800565c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f04f 0400 	mov.w	r4, #0
 800562e:	4a39      	ldr	r2, [pc, #228]	; (8005714 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005630:	fb02 f104 	mul.w	r1, r2, r4
 8005634:	2200      	movs	r2, #0
 8005636:	fb02 f203 	mul.w	r2, r2, r3
 800563a:	440a      	add	r2, r1
 800563c:	4935      	ldr	r1, [pc, #212]	; (8005714 <HAL_RCC_GetSysClockFreq+0x13c>)
 800563e:	fba3 0101 	umull	r0, r1, r3, r1
 8005642:	1853      	adds	r3, r2, r1
 8005644:	4619      	mov	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f04f 0400 	mov.w	r4, #0
 800564c:	461a      	mov	r2, r3
 800564e:	4623      	mov	r3, r4
 8005650:	f7fb fa32 	bl	8000ab8 <__aeabi_uldivmod>
 8005654:	4603      	mov	r3, r0
 8005656:	460c      	mov	r4, r1
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e040      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	461d      	mov	r5, r3
 8005660:	f04f 0600 	mov.w	r6, #0
 8005664:	4629      	mov	r1, r5
 8005666:	4632      	mov	r2, r6
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	f04f 0400 	mov.w	r4, #0
 8005670:	0154      	lsls	r4, r2, #5
 8005672:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005676:	014b      	lsls	r3, r1, #5
 8005678:	4619      	mov	r1, r3
 800567a:	4622      	mov	r2, r4
 800567c:	1b49      	subs	r1, r1, r5
 800567e:	eb62 0206 	sbc.w	r2, r2, r6
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	f04f 0400 	mov.w	r4, #0
 800568a:	0194      	lsls	r4, r2, #6
 800568c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005690:	018b      	lsls	r3, r1, #6
 8005692:	1a5b      	subs	r3, r3, r1
 8005694:	eb64 0402 	sbc.w	r4, r4, r2
 8005698:	f04f 0100 	mov.w	r1, #0
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	00e2      	lsls	r2, r4, #3
 80056a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056a6:	00d9      	lsls	r1, r3, #3
 80056a8:	460b      	mov	r3, r1
 80056aa:	4614      	mov	r4, r2
 80056ac:	195b      	adds	r3, r3, r5
 80056ae:	eb44 0406 	adc.w	r4, r4, r6
 80056b2:	f04f 0100 	mov.w	r1, #0
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	02a2      	lsls	r2, r4, #10
 80056bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80056c0:	0299      	lsls	r1, r3, #10
 80056c2:	460b      	mov	r3, r1
 80056c4:	4614      	mov	r4, r2
 80056c6:	4618      	mov	r0, r3
 80056c8:	4621      	mov	r1, r4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f04f 0400 	mov.w	r4, #0
 80056d0:	461a      	mov	r2, r3
 80056d2:	4623      	mov	r3, r4
 80056d4:	f7fb f9f0 	bl	8000ab8 <__aeabi_uldivmod>
 80056d8:	4603      	mov	r3, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	613b      	str	r3, [r7, #16]
      break;
 80056e2:	e00d      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <HAL_RCC_GetSysClockFreq+0x134>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	0b5b      	lsrs	r3, r3, #13
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	613b      	str	r3, [r7, #16]
      break;
 80056fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005700:	693b      	ldr	r3, [r7, #16]
}
 8005702:	4618      	mov	r0, r3
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570a:	bf00      	nop
 800570c:	40023800 	.word	0x40023800
 8005710:	00f42400 	.word	0x00f42400
 8005714:	016e3600 	.word	0x016e3600
 8005718:	080093d4 	.word	0x080093d4

0800571c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005720:	4b02      	ldr	r3, [pc, #8]	; (800572c <HAL_RCC_GetHCLKFreq+0x10>)
 8005722:	681b      	ldr	r3, [r3, #0]
}
 8005724:	4618      	mov	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr
 800572c:	20000060 	.word	0x20000060

08005730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005734:	f7ff fff2 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8005738:	4601      	mov	r1, r0
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4a03      	ldr	r2, [pc, #12]	; (8005754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005746:	5cd3      	ldrb	r3, [r2, r3]
 8005748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40023800 	.word	0x40023800
 8005754:	080093f0 	.word	0x080093f0

08005758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800575c:	f7ff ffde 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8005760:	4601      	mov	r1, r0
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	0adb      	lsrs	r3, r3, #11
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	4a03      	ldr	r2, [pc, #12]	; (800577c <HAL_RCC_GetPCLK2Freq+0x24>)
 800576e:	5cd3      	ldrb	r3, [r2, r3]
 8005770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40023800 	.word	0x40023800
 800577c:	080093f0 	.word	0x080093f0

08005780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800578c:	4b29      	ldr	r3, [pc, #164]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d12c      	bne.n	80057f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005798:	4b26      	ldr	r3, [pc, #152]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80057a4:	4b24      	ldr	r3, [pc, #144]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	e016      	b.n	80057de <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b0:	4b20      	ldr	r3, [pc, #128]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6253      	str	r3, [r2, #36]	; 0x24
 80057bc:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80057c8:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80057d0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d2:	4b18      	ldr	r3, [pc, #96]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	4a17      	ldr	r2, [pc, #92]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80057e4:	d105      	bne.n	80057f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057ec:	d101      	bne.n	80057f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80057ee:	2301      	movs	r3, #1
 80057f0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d105      	bne.n	8005804 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80057f8:	4b10      	ldr	r3, [pc, #64]	; (800583c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a0f      	ldr	r2, [pc, #60]	; (800583c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057fe:	f043 0304 	orr.w	r3, r3, #4
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	4b0d      	ldr	r3, [pc, #52]	; (800583c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f023 0201 	bic.w	r2, r3, #1
 800580c:	490b      	ldr	r1, [pc, #44]	; (800583c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	429a      	cmp	r2, r3
 8005820:	d001      	beq.n	8005826 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40023800 	.word	0x40023800
 8005838:	40007000 	.word	0x40007000
 800583c:	40023c00 	.word	0x40023c00

08005840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e06e      	b.n	8005930 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	d108      	bne.n	800586c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005862:	d009      	beq.n	8005878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	61da      	str	r2, [r3, #28]
 800586a:	e005      	b.n	8005878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fe fd28 	bl	80042e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fc:	ea42 0103 	orr.w	r1, r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	0c1a      	lsrs	r2, r3, #16
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f002 0204 	and.w	r2, r2, #4
 800591e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_SPI_Transmit+0x22>
 8005956:	2302      	movs	r3, #2
 8005958:	e126      	b.n	8005ba8 <HAL_SPI_Transmit+0x270>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005962:	f7fe fecd 	bl	8004700 <HAL_GetTick>
 8005966:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	d002      	beq.n	800597e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005978:	2302      	movs	r3, #2
 800597a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800597c:	e10b      	b.n	8005b96 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_SPI_Transmit+0x52>
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800598e:	e102      	b.n	8005b96 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2203      	movs	r2, #3
 8005994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	88fa      	ldrh	r2, [r7, #6]
 80059ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d6:	d10f      	bne.n	80059f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d007      	beq.n	8005a16 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1e:	d14b      	bne.n	8005ab8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_SPI_Transmit+0xf6>
 8005a28:	8afb      	ldrh	r3, [r7, #22]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d13e      	bne.n	8005aac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	881a      	ldrh	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	1c9a      	adds	r2, r3, #2
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a52:	e02b      	b.n	8005aac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d112      	bne.n	8005a88 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	881a      	ldrh	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	1c9a      	adds	r2, r3, #2
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a86:	e011      	b.n	8005aac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a88:	f7fe fe3a 	bl	8004700 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d803      	bhi.n	8005aa0 <HAL_SPI_Transmit+0x168>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d102      	bne.n	8005aa6 <HAL_SPI_Transmit+0x16e>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005aaa:	e074      	b.n	8005b96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1ce      	bne.n	8005a54 <HAL_SPI_Transmit+0x11c>
 8005ab6:	e04c      	b.n	8005b52 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_Transmit+0x18e>
 8005ac0:	8afb      	ldrh	r3, [r7, #22]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d140      	bne.n	8005b48 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	7812      	ldrb	r2, [r2, #0]
 8005ad2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005aec:	e02c      	b.n	8005b48 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d113      	bne.n	8005b24 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b22:	e011      	b.n	8005b48 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b24:	f7fe fdec 	bl	8004700 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d803      	bhi.n	8005b3c <HAL_SPI_Transmit+0x204>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d102      	bne.n	8005b42 <HAL_SPI_Transmit+0x20a>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b46:	e026      	b.n	8005b96 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1cd      	bne.n	8005aee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fb66 	bl	8006228 <SPI_EndRxTxTransaction>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	77fb      	strb	r3, [r7, #31]
 8005b92:	e000      	b.n	8005b96 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08c      	sub	sp, #48	; 0x30
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x26>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e18a      	b.n	8005eec <HAL_SPI_TransmitReceive+0x33c>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bde:	f7fe fd8f 	bl	8004700 <HAL_GetTick>
 8005be2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005bf4:	887b      	ldrh	r3, [r7, #2]
 8005bf6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d00f      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x70>
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c06:	d107      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d103      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x68>
 8005c10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d003      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c1e:	e15b      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x82>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x82>
 8005c2c:	887b      	ldrh	r3, [r7, #2]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c38:	e14e      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d003      	beq.n	8005c4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2205      	movs	r2, #5
 8005c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	887a      	ldrh	r2, [r7, #2]
 8005c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	887a      	ldrh	r2, [r7, #2]
 8005c70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	887a      	ldrh	r2, [r7, #2]
 8005c76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d007      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005caa:	d178      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x10a>
 8005cb4:	8b7b      	ldrh	r3, [r7, #26]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d166      	bne.n	8005d88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	881a      	ldrh	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	1c9a      	adds	r2, r3, #2
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cde:	e053      	b.n	8005d88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d11b      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x176>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d016      	beq.n	8005d26 <HAL_SPI_TransmitReceive+0x176>
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d113      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	881a      	ldrh	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d119      	bne.n	8005d68 <HAL_SPI_TransmitReceive+0x1b8>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d014      	beq.n	8005d68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	b292      	uxth	r2, r2
 8005d4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	1c9a      	adds	r2, r3, #2
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d64:	2301      	movs	r3, #1
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d68:	f7fe fcca 	bl	8004700 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d807      	bhi.n	8005d88 <HAL_SPI_TransmitReceive+0x1d8>
 8005d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d003      	beq.n	8005d88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d86:	e0a7      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1a6      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x130>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1a1      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x130>
 8005d9c:	e07c      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_SPI_TransmitReceive+0x1fc>
 8005da6:	8b7b      	ldrh	r3, [r7, #26]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d16b      	bne.n	8005e84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dd2:	e057      	b.n	8005e84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d11c      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x26c>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d017      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x26c>
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d114      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d119      	bne.n	8005e5e <HAL_SPI_TransmitReceive+0x2ae>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d014      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e5e:	f7fe fc4f 	bl	8004700 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d803      	bhi.n	8005e76 <HAL_SPI_TransmitReceive+0x2c6>
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d102      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x2cc>
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e82:	e029      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1a2      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x224>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d19d      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f9c3 	bl	8006228 <SPI_EndRxTxTransaction>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d006      	beq.n	8005eb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005eb4:	e010      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	e000      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ed6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ee8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3730      	adds	r7, #48	; 0x30
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	099b      	lsrs	r3, r3, #6
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10f      	bne.n	8005f38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	099b      	lsrs	r3, r3, #6
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
    return;
 8005f36:	e0bf      	b.n	80060b8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <HAL_SPI_IRQHandler+0x66>
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	09db      	lsrs	r3, r3, #7
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	4798      	blx	r3
    return;
 8005f58:	e0ae      	b.n	80060b8 <HAL_SPI_IRQHandler+0x1c4>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_SPI_IRQHandler+0x80>
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	099b      	lsrs	r3, r3, #6
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80a2 	beq.w	80060b8 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 809b 	beq.w	80060b8 <HAL_SPI_IRQHandler+0x1c4>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	099b      	lsrs	r3, r3, #6
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d023      	beq.n	8005fd6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d011      	beq.n	8005fbe <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	f043 0204 	orr.w	r2, r3, #4
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	e00b      	b.n	8005fd6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	693b      	ldr	r3, [r7, #16]
        return;
 8005fd4:	e070      	b.n	80060b8 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d014      	beq.n	800600c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	f043 0201 	orr.w	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	2b00      	cmp	r3, #0
 8006012:	d050      	beq.n	80060b6 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006022:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <HAL_SPI_IRQHandler+0x14c>
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d034      	beq.n	80060aa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0203 	bic.w	r2, r2, #3
 800604e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d011      	beq.n	800607c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605c:	4a18      	ldr	r2, [pc, #96]	; (80060c0 <HAL_SPI_IRQHandler+0x1cc>)
 800605e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe fc62 	bl	800492e <HAL_DMA_Abort_IT>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006074:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006080:	2b00      	cmp	r3, #0
 8006082:	d016      	beq.n	80060b2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006088:	4a0d      	ldr	r2, [pc, #52]	; (80060c0 <HAL_SPI_IRQHandler+0x1cc>)
 800608a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe fc4c 	bl	800492e <HAL_DMA_Abort_IT>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80060a8:	e003      	b.n	80060b2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f80a 	bl	80060c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060b0:	e000      	b.n	80060b4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80060b2:	bf00      	nop
    return;
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
  }
}
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	080060f1 	.word	0x080060f1

080060c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e4:	b2db      	uxtb	r3, r3
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr

080060f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff ffda 	bl	80060c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006128:	f7fe faea 	bl	8004700 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	4413      	add	r3, r2
 8006136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006138:	f7fe fae2 	bl	8004700 <HAL_GetTick>
 800613c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800613e:	4b39      	ldr	r3, [pc, #228]	; (8006224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	015b      	lsls	r3, r3, #5
 8006144:	0d1b      	lsrs	r3, r3, #20
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	fb02 f303 	mul.w	r3, r2, r3
 800614c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614e:	e054      	b.n	80061fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d050      	beq.n	80061fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006158:	f7fe fad2 	bl	8004700 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	429a      	cmp	r2, r3
 8006166:	d902      	bls.n	800616e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d13d      	bne.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800617c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006186:	d111      	bne.n	80061ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006190:	d004      	beq.n	800619c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619a:	d107      	bne.n	80061ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b4:	d10f      	bne.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e017      	b.n	800621a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4013      	ands	r3, r2
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	429a      	cmp	r2, r3
 8006208:	bf0c      	ite	eq
 800620a:	2301      	moveq	r3, #1
 800620c:	2300      	movne	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	429a      	cmp	r2, r3
 8006216:	d19b      	bne.n	8006150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000060 	.word	0x20000060

08006228 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af02      	add	r7, sp, #8
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006234:	4b1b      	ldr	r3, [pc, #108]	; (80062a4 <SPI_EndRxTxTransaction+0x7c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <SPI_EndRxTxTransaction+0x80>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	0d5b      	lsrs	r3, r3, #21
 8006240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006244:	fb02 f303 	mul.w	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006252:	d112      	bne.n	800627a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2200      	movs	r2, #0
 800625c:	2180      	movs	r1, #128	; 0x80
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff ff5a 	bl	8006118 <SPI_WaitFlagStateUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	f043 0220 	orr.w	r2, r3, #32
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e00f      	b.n	800629a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	3b01      	subs	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006290:	2b80      	cmp	r3, #128	; 0x80
 8006292:	d0f2      	beq.n	800627a <SPI_EndRxTxTransaction+0x52>
 8006294:	e000      	b.n	8006298 <SPI_EndRxTxTransaction+0x70>
        break;
 8006296:	bf00      	nop
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000060 	.word	0x20000060
 80062a8:	165e9f81 	.word	0x165e9f81

080062ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e03f      	b.n	800633e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fe f854 	bl	8004380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2224      	movs	r2, #36	; 0x24
 80062dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fb3d 	bl	8006970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695a      	ldr	r2, [r3, #20]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b088      	sub	sp, #32
 800634a:	af02      	add	r7, sp, #8
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	603b      	str	r3, [r7, #0]
 8006352:	4613      	mov	r3, r2
 8006354:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b20      	cmp	r3, #32
 8006364:	f040 8083 	bne.w	800646e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_UART_Transmit+0x2e>
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e07b      	b.n	8006470 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_UART_Transmit+0x40>
 8006382:	2302      	movs	r3, #2
 8006384:	e074      	b.n	8006470 <HAL_UART_Transmit+0x12a>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2221      	movs	r2, #33	; 0x21
 8006398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800639c:	f7fe f9b0 	bl	8004700 <HAL_GetTick>
 80063a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	88fa      	ldrh	r2, [r7, #6]
 80063ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80063b6:	e042      	b.n	800643e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	d122      	bne.n	8006416 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2200      	movs	r2, #0
 80063d8:	2180      	movs	r1, #128	; 0x80
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f95e 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e042      	b.n	8006470 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	3302      	adds	r3, #2
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	e017      	b.n	800643e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	3301      	adds	r3, #1
 8006412:	60bb      	str	r3, [r7, #8]
 8006414:	e013      	b.n	800643e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	2180      	movs	r1, #128	; 0x80
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f93b 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e01f      	b.n	8006470 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	60ba      	str	r2, [r7, #8]
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1b7      	bne.n	80063b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2200      	movs	r2, #0
 8006450:	2140      	movs	r1, #64	; 0x40
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f922 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e006      	b.n	8006470 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e000      	b.n	8006470 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800646e:	2302      	movs	r3, #2
  }
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10d      	bne.n	80064ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <HAL_UART_IRQHandler+0x52>
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f9d2 	bl	800686c <UART_Receive_IT>
      return;
 80064c8:	e0d1      	b.n	800666e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80b0 	beq.w	8006632 <HAL_UART_IRQHandler+0x1ba>
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d105      	bne.n	80064e8 <HAL_UART_IRQHandler+0x70>
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 80a5 	beq.w	8006632 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_UART_IRQHandler+0x90>
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006500:	f043 0201 	orr.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_UART_IRQHandler+0xb0>
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006520:	f043 0202 	orr.w	r2, r3, #2
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_UART_IRQHandler+0xd0>
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	f043 0204 	orr.w	r2, r3, #4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00f      	beq.n	8006572 <HAL_UART_IRQHandler+0xfa>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <HAL_UART_IRQHandler+0xee>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	f043 0208 	orr.w	r2, r3, #8
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d078      	beq.n	800666c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d007      	beq.n	8006594 <HAL_UART_IRQHandler+0x11c>
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f96c 	bl	800686c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	bf0c      	ite	eq
 80065a2:	2301      	moveq	r3, #1
 80065a4:	2300      	movne	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d102      	bne.n	80065bc <HAL_UART_IRQHandler+0x144>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d031      	beq.n	8006620 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f8b7 	bl	8006730 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	d123      	bne.n	8006618 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d013      	beq.n	8006610 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ec:	4a21      	ldr	r2, [pc, #132]	; (8006674 <HAL_UART_IRQHandler+0x1fc>)
 80065ee:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe f99a 	bl	800492e <HAL_DMA_Abort_IT>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d016      	beq.n	800662e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800660a:	4610      	mov	r0, r2
 800660c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660e:	e00e      	b.n	800662e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f83a 	bl	800668a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006616:	e00a      	b.n	800662e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f836 	bl	800668a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661e:	e006      	b.n	800662e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f832 	bl	800668a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800662c:	e01e      	b.n	800666c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662e:	bf00      	nop
    return;
 8006630:	e01c      	b.n	800666c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_UART_IRQHandler+0x1d6>
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8a3 	bl	8006792 <UART_Transmit_IT>
    return;
 800664c:	e00f      	b.n	800666e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <HAL_UART_IRQHandler+0x1f6>
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f8ea 	bl	800683c <UART_EndTransmit_IT>
    return;
 8006668:	bf00      	nop
 800666a:	e000      	b.n	800666e <HAL_UART_IRQHandler+0x1f6>
    return;
 800666c:	bf00      	nop
  }
}
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	0800676b 	.word	0x0800676b

08006678 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ac:	e02c      	b.n	8006708 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d028      	beq.n	8006708 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <UART_WaitOnFlagUntilTimeout+0x30>
 80066bc:	f7fe f820 	bl	8004700 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d21d      	bcs.n	8006708 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e00f      	b.n	8006728 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4013      	ands	r3, r2
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	429a      	cmp	r2, r3
 8006716:	bf0c      	ite	eq
 8006718:	2301      	moveq	r3, #1
 800671a:	2300      	movne	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	429a      	cmp	r2, r3
 8006724:	d0c3      	beq.n	80066ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006746:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695a      	ldr	r2, [r3, #20]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0201 	bic.w	r2, r2, #1
 8006756:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr

0800676a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff ff80 	bl	800668a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b21      	cmp	r3, #33	; 0x21
 80067a4:	d144      	bne.n	8006830 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ae:	d11a      	bne.n	80067e6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	1c9a      	adds	r2, r3, #2
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	621a      	str	r2, [r3, #32]
 80067d8:	e00e      	b.n	80067f8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	621a      	str	r2, [r3, #32]
 80067e4:	e008      	b.n	80067f8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	1c59      	adds	r1, r3, #1
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6211      	str	r1, [r2, #32]
 80067f0:	781a      	ldrb	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29b      	uxth	r3, r3
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4619      	mov	r1, r3
 8006806:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10f      	bne.n	800682c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800681a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800682a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	e000      	b.n	8006832 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006852:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fd fb5d 	bl	8003f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b22      	cmp	r3, #34	; 0x22
 800687e:	d171      	bne.n	8006964 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006888:	d123      	bne.n	80068d2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10e      	bne.n	80068b6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	1c9a      	adds	r2, r3, #2
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
 80068b4:	e029      	b.n	800690a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	629a      	str	r2, [r3, #40]	; 0x28
 80068d0:	e01b      	b.n	800690a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6858      	ldr	r0, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	1c59      	adds	r1, r3, #1
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6291      	str	r1, [r2, #40]	; 0x28
 80068ea:	b2c2      	uxtb	r2, r0
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	e00c      	b.n	800690a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	1c58      	adds	r0, r3, #1
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	6288      	str	r0, [r1, #40]	; 0x28
 8006902:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29b      	uxth	r3, r3
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	4619      	mov	r1, r3
 8006918:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800691a:	2b00      	cmp	r3, #0
 800691c:	d120      	bne.n	8006960 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0220 	bic.w	r2, r2, #32
 800692c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800693c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695a      	ldr	r2, [r3, #20]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fe8e 	bl	8006678 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	e002      	b.n	8006966 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	e000      	b.n	8006966 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006964:	2302      	movs	r3, #2
  }
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80069b0:	f023 030c 	bic.w	r3, r3, #12
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	430b      	orrs	r3, r1
 80069bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a55      	ldr	r2, [pc, #340]	; (8006b30 <UART_SetConfig+0x1c0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d103      	bne.n	80069e6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069de:	f7fe febb 	bl	8005758 <HAL_RCC_GetPCLK2Freq>
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	e002      	b.n	80069ec <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069e6:	f7fe fea3 	bl	8005730 <HAL_RCC_GetPCLK1Freq>
 80069ea:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f4:	d14c      	bne.n	8006a90 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	009a      	lsls	r2, r3, #2
 8006a00:	441a      	add	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	4a49      	ldr	r2, [pc, #292]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	0119      	lsls	r1, r3, #4
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009a      	lsls	r2, r3, #2
 8006a20:	441a      	add	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a2c:	4b41      	ldr	r3, [pc, #260]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	2064      	movs	r0, #100	; 0x64
 8006a36:	fb00 f303 	mul.w	r3, r0, r3
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	3332      	adds	r3, #50	; 0x32
 8006a40:	4a3c      	ldr	r2, [pc, #240]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a4e:	4419      	add	r1, r3
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009a      	lsls	r2, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a66:	4b33      	ldr	r3, [pc, #204]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006a68:	fba3 0302 	umull	r0, r3, r3, r2
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	2064      	movs	r0, #100	; 0x64
 8006a70:	fb00 f303 	mul.w	r3, r0, r3
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	3332      	adds	r3, #50	; 0x32
 8006a7a:	4a2e      	ldr	r2, [pc, #184]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	f003 0207 	and.w	r2, r3, #7
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a8e:	e04a      	b.n	8006b26 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009a      	lsls	r2, r3, #2
 8006a9a:	441a      	add	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	4a23      	ldr	r2, [pc, #140]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	0119      	lsls	r1, r3, #4
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009a      	lsls	r2, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006ac8:	fba3 0302 	umull	r0, r3, r3, r2
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	2064      	movs	r0, #100	; 0x64
 8006ad0:	fb00 f303 	mul.w	r3, r0, r3
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	3332      	adds	r3, #50	; 0x32
 8006ada:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006adc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae6:	4419      	add	r1, r3
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009a      	lsls	r2, r3, #2
 8006af2:	441a      	add	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	fbb2 f2f3 	udiv	r2, r2, r3
 8006afe:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006b00:	fba3 0302 	umull	r0, r3, r3, r2
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	2064      	movs	r0, #100	; 0x64
 8006b08:	fb00 f303 	mul.w	r3, r0, r3
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	3332      	adds	r3, #50	; 0x32
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <UART_SetConfig+0x1c4>)
 8006b14:	fba2 2303 	umull	r2, r3, r2, r3
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	f003 020f 	and.w	r2, r3, #15
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	440a      	add	r2, r1
 8006b24:	609a      	str	r2, [r3, #8]
}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40013800 	.word	0x40013800
 8006b34:	51eb851f 	.word	0x51eb851f

08006b38 <__errno>:
 8006b38:	4b01      	ldr	r3, [pc, #4]	; (8006b40 <__errno+0x8>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	2000006c 	.word	0x2000006c

08006b44 <__libc_init_array>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	2500      	movs	r5, #0
 8006b48:	4e0c      	ldr	r6, [pc, #48]	; (8006b7c <__libc_init_array+0x38>)
 8006b4a:	4c0d      	ldr	r4, [pc, #52]	; (8006b80 <__libc_init_array+0x3c>)
 8006b4c:	1ba4      	subs	r4, r4, r6
 8006b4e:	10a4      	asrs	r4, r4, #2
 8006b50:	42a5      	cmp	r5, r4
 8006b52:	d109      	bne.n	8006b68 <__libc_init_array+0x24>
 8006b54:	f002 fbaa 	bl	80092ac <_init>
 8006b58:	2500      	movs	r5, #0
 8006b5a:	4e0a      	ldr	r6, [pc, #40]	; (8006b84 <__libc_init_array+0x40>)
 8006b5c:	4c0a      	ldr	r4, [pc, #40]	; (8006b88 <__libc_init_array+0x44>)
 8006b5e:	1ba4      	subs	r4, r4, r6
 8006b60:	10a4      	asrs	r4, r4, #2
 8006b62:	42a5      	cmp	r5, r4
 8006b64:	d105      	bne.n	8006b72 <__libc_init_array+0x2e>
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b6c:	4798      	blx	r3
 8006b6e:	3501      	adds	r5, #1
 8006b70:	e7ee      	b.n	8006b50 <__libc_init_array+0xc>
 8006b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b76:	4798      	blx	r3
 8006b78:	3501      	adds	r5, #1
 8006b7a:	e7f2      	b.n	8006b62 <__libc_init_array+0x1e>
 8006b7c:	080096c0 	.word	0x080096c0
 8006b80:	080096c0 	.word	0x080096c0
 8006b84:	080096c0 	.word	0x080096c0
 8006b88:	080096c4 	.word	0x080096c4

08006b8c <memset>:
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	4402      	add	r2, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <__cvt>:
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba2:	461e      	mov	r6, r3
 8006ba4:	bfbb      	ittet	lt
 8006ba6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006baa:	461e      	movlt	r6, r3
 8006bac:	2300      	movge	r3, #0
 8006bae:	232d      	movlt	r3, #45	; 0x2d
 8006bb0:	b088      	sub	sp, #32
 8006bb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006bb4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006bb8:	f027 0720 	bic.w	r7, r7, #32
 8006bbc:	2f46      	cmp	r7, #70	; 0x46
 8006bbe:	4614      	mov	r4, r2
 8006bc0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006bc2:	700b      	strb	r3, [r1, #0]
 8006bc4:	d004      	beq.n	8006bd0 <__cvt+0x34>
 8006bc6:	2f45      	cmp	r7, #69	; 0x45
 8006bc8:	d100      	bne.n	8006bcc <__cvt+0x30>
 8006bca:	3501      	adds	r5, #1
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e000      	b.n	8006bd2 <__cvt+0x36>
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	aa07      	add	r2, sp, #28
 8006bd4:	9204      	str	r2, [sp, #16]
 8006bd6:	aa06      	add	r2, sp, #24
 8006bd8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006bdc:	e9cd 3500 	strd	r3, r5, [sp]
 8006be0:	4622      	mov	r2, r4
 8006be2:	4633      	mov	r3, r6
 8006be4:	f000 fdf4 	bl	80077d0 <_dtoa_r>
 8006be8:	2f47      	cmp	r7, #71	; 0x47
 8006bea:	4680      	mov	r8, r0
 8006bec:	d102      	bne.n	8006bf4 <__cvt+0x58>
 8006bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bf0:	07db      	lsls	r3, r3, #31
 8006bf2:	d526      	bpl.n	8006c42 <__cvt+0xa6>
 8006bf4:	2f46      	cmp	r7, #70	; 0x46
 8006bf6:	eb08 0905 	add.w	r9, r8, r5
 8006bfa:	d111      	bne.n	8006c20 <__cvt+0x84>
 8006bfc:	f898 3000 	ldrb.w	r3, [r8]
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	d10a      	bne.n	8006c1a <__cvt+0x7e>
 8006c04:	2200      	movs	r2, #0
 8006c06:	2300      	movs	r3, #0
 8006c08:	4620      	mov	r0, r4
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	f7f9 fee4 	bl	80009d8 <__aeabi_dcmpeq>
 8006c10:	b918      	cbnz	r0, 8006c1a <__cvt+0x7e>
 8006c12:	f1c5 0501 	rsb	r5, r5, #1
 8006c16:	f8ca 5000 	str.w	r5, [sl]
 8006c1a:	f8da 3000 	ldr.w	r3, [sl]
 8006c1e:	4499      	add	r9, r3
 8006c20:	2200      	movs	r2, #0
 8006c22:	2300      	movs	r3, #0
 8006c24:	4620      	mov	r0, r4
 8006c26:	4631      	mov	r1, r6
 8006c28:	f7f9 fed6 	bl	80009d8 <__aeabi_dcmpeq>
 8006c2c:	b938      	cbnz	r0, 8006c3e <__cvt+0xa2>
 8006c2e:	2230      	movs	r2, #48	; 0x30
 8006c30:	9b07      	ldr	r3, [sp, #28]
 8006c32:	454b      	cmp	r3, r9
 8006c34:	d205      	bcs.n	8006c42 <__cvt+0xa6>
 8006c36:	1c59      	adds	r1, r3, #1
 8006c38:	9107      	str	r1, [sp, #28]
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	e7f8      	b.n	8006c30 <__cvt+0x94>
 8006c3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c42:	4640      	mov	r0, r8
 8006c44:	9b07      	ldr	r3, [sp, #28]
 8006c46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c48:	eba3 0308 	sub.w	r3, r3, r8
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	b008      	add	sp, #32
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006c54 <__exponent>:
 8006c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c56:	2900      	cmp	r1, #0
 8006c58:	bfb4      	ite	lt
 8006c5a:	232d      	movlt	r3, #45	; 0x2d
 8006c5c:	232b      	movge	r3, #43	; 0x2b
 8006c5e:	4604      	mov	r4, r0
 8006c60:	bfb8      	it	lt
 8006c62:	4249      	neglt	r1, r1
 8006c64:	2909      	cmp	r1, #9
 8006c66:	f804 2b02 	strb.w	r2, [r4], #2
 8006c6a:	7043      	strb	r3, [r0, #1]
 8006c6c:	dd21      	ble.n	8006cb2 <__exponent+0x5e>
 8006c6e:	f10d 0307 	add.w	r3, sp, #7
 8006c72:	461f      	mov	r7, r3
 8006c74:	260a      	movs	r6, #10
 8006c76:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c7a:	fb06 1115 	mls	r1, r6, r5, r1
 8006c7e:	2d09      	cmp	r5, #9
 8006c80:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006c84:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c88:	f103 32ff 	add.w	r2, r3, #4294967295
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	dc09      	bgt.n	8006ca4 <__exponent+0x50>
 8006c90:	3130      	adds	r1, #48	; 0x30
 8006c92:	3b02      	subs	r3, #2
 8006c94:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c98:	42bb      	cmp	r3, r7
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	d304      	bcc.n	8006ca8 <__exponent+0x54>
 8006c9e:	1a10      	subs	r0, r2, r0
 8006ca0:	b003      	add	sp, #12
 8006ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	e7e6      	b.n	8006c76 <__exponent+0x22>
 8006ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cac:	f804 2b01 	strb.w	r2, [r4], #1
 8006cb0:	e7f2      	b.n	8006c98 <__exponent+0x44>
 8006cb2:	2330      	movs	r3, #48	; 0x30
 8006cb4:	4419      	add	r1, r3
 8006cb6:	7083      	strb	r3, [r0, #2]
 8006cb8:	1d02      	adds	r2, r0, #4
 8006cba:	70c1      	strb	r1, [r0, #3]
 8006cbc:	e7ef      	b.n	8006c9e <__exponent+0x4a>
	...

08006cc0 <_printf_float>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	b091      	sub	sp, #68	; 0x44
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006cca:	4693      	mov	fp, r2
 8006ccc:	461e      	mov	r6, r3
 8006cce:	4605      	mov	r5, r0
 8006cd0:	f001 fcac 	bl	800862c <_localeconv_r>
 8006cd4:	6803      	ldr	r3, [r0, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cda:	f7f9 fa51 	bl	8000180 <strlen>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	900a      	str	r0, [sp, #40]	; 0x28
 8006ce6:	3307      	adds	r3, #7
 8006ce8:	f023 0307 	bic.w	r3, r3, #7
 8006cec:	f103 0208 	add.w	r2, r3, #8
 8006cf0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006cf4:	f8d4 a000 	ldr.w	sl, [r4]
 8006cf8:	603a      	str	r2, [r7, #0]
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d02:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006d06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	4ba6      	ldr	r3, [pc, #664]	; (8006fac <_printf_float+0x2ec>)
 8006d12:	4638      	mov	r0, r7
 8006d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d16:	f7f9 fe91 	bl	8000a3c <__aeabi_dcmpun>
 8006d1a:	bb68      	cbnz	r0, 8006d78 <_printf_float+0xb8>
 8006d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d20:	4ba2      	ldr	r3, [pc, #648]	; (8006fac <_printf_float+0x2ec>)
 8006d22:	4638      	mov	r0, r7
 8006d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d26:	f7f9 fe6b 	bl	8000a00 <__aeabi_dcmple>
 8006d2a:	bb28      	cbnz	r0, 8006d78 <_printf_float+0xb8>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4638      	mov	r0, r7
 8006d32:	4649      	mov	r1, r9
 8006d34:	f7f9 fe5a 	bl	80009ec <__aeabi_dcmplt>
 8006d38:	b110      	cbz	r0, 8006d40 <_printf_float+0x80>
 8006d3a:	232d      	movs	r3, #45	; 0x2d
 8006d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d40:	4f9b      	ldr	r7, [pc, #620]	; (8006fb0 <_printf_float+0x2f0>)
 8006d42:	4b9c      	ldr	r3, [pc, #624]	; (8006fb4 <_printf_float+0x2f4>)
 8006d44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d48:	bf98      	it	ls
 8006d4a:	461f      	movls	r7, r3
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	f04f 0900 	mov.w	r9, #0
 8006d52:	6123      	str	r3, [r4, #16]
 8006d54:	f02a 0304 	bic.w	r3, sl, #4
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	9600      	str	r6, [sp, #0]
 8006d5c:	465b      	mov	r3, fp
 8006d5e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006d60:	4621      	mov	r1, r4
 8006d62:	4628      	mov	r0, r5
 8006d64:	f000 f9e2 	bl	800712c <_printf_common>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f040 8090 	bne.w	8006e8e <_printf_float+0x1ce>
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d72:	b011      	add	sp, #68	; 0x44
 8006d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d78:	463a      	mov	r2, r7
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	4649      	mov	r1, r9
 8006d80:	f7f9 fe5c 	bl	8000a3c <__aeabi_dcmpun>
 8006d84:	b110      	cbz	r0, 8006d8c <_printf_float+0xcc>
 8006d86:	4f8c      	ldr	r7, [pc, #560]	; (8006fb8 <_printf_float+0x2f8>)
 8006d88:	4b8c      	ldr	r3, [pc, #560]	; (8006fbc <_printf_float+0x2fc>)
 8006d8a:	e7db      	b.n	8006d44 <_printf_float+0x84>
 8006d8c:	6863      	ldr	r3, [r4, #4]
 8006d8e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006d92:	1c59      	adds	r1, r3, #1
 8006d94:	a80d      	add	r0, sp, #52	; 0x34
 8006d96:	a90e      	add	r1, sp, #56	; 0x38
 8006d98:	d140      	bne.n	8006e1c <_printf_float+0x15c>
 8006d9a:	2306      	movs	r3, #6
 8006d9c:	6063      	str	r3, [r4, #4]
 8006d9e:	f04f 0c00 	mov.w	ip, #0
 8006da2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006da6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8006daa:	6863      	ldr	r3, [r4, #4]
 8006dac:	6022      	str	r2, [r4, #0]
 8006dae:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	463a      	mov	r2, r7
 8006db6:	464b      	mov	r3, r9
 8006db8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f7ff feed 	bl	8006b9c <__cvt>
 8006dc2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8006dc6:	2b47      	cmp	r3, #71	; 0x47
 8006dc8:	4607      	mov	r7, r0
 8006dca:	d109      	bne.n	8006de0 <_printf_float+0x120>
 8006dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dce:	1cd8      	adds	r0, r3, #3
 8006dd0:	db02      	blt.n	8006dd8 <_printf_float+0x118>
 8006dd2:	6862      	ldr	r2, [r4, #4]
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	dd47      	ble.n	8006e68 <_printf_float+0x1a8>
 8006dd8:	f1a8 0802 	sub.w	r8, r8, #2
 8006ddc:	fa5f f888 	uxtb.w	r8, r8
 8006de0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006de4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006de6:	d824      	bhi.n	8006e32 <_printf_float+0x172>
 8006de8:	3901      	subs	r1, #1
 8006dea:	4642      	mov	r2, r8
 8006dec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006df0:	910d      	str	r1, [sp, #52]	; 0x34
 8006df2:	f7ff ff2f 	bl	8006c54 <__exponent>
 8006df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006df8:	4681      	mov	r9, r0
 8006dfa:	1813      	adds	r3, r2, r0
 8006dfc:	2a01      	cmp	r2, #1
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	dc02      	bgt.n	8006e08 <_printf_float+0x148>
 8006e02:	6822      	ldr	r2, [r4, #0]
 8006e04:	07d1      	lsls	r1, r2, #31
 8006e06:	d501      	bpl.n	8006e0c <_printf_float+0x14c>
 8006e08:	3301      	adds	r3, #1
 8006e0a:	6123      	str	r3, [r4, #16]
 8006e0c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0a2      	beq.n	8006d5a <_printf_float+0x9a>
 8006e14:	232d      	movs	r3, #45	; 0x2d
 8006e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e1a:	e79e      	b.n	8006d5a <_printf_float+0x9a>
 8006e1c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006e20:	f000 816e 	beq.w	8007100 <_printf_float+0x440>
 8006e24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e28:	d1b9      	bne.n	8006d9e <_printf_float+0xde>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1b7      	bne.n	8006d9e <_printf_float+0xde>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e7b4      	b.n	8006d9c <_printf_float+0xdc>
 8006e32:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006e36:	d119      	bne.n	8006e6c <_printf_float+0x1ac>
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	6863      	ldr	r3, [r4, #4]
 8006e3c:	dd0c      	ble.n	8006e58 <_printf_float+0x198>
 8006e3e:	6121      	str	r1, [r4, #16]
 8006e40:	b913      	cbnz	r3, 8006e48 <_printf_float+0x188>
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	07d2      	lsls	r2, r2, #31
 8006e46:	d502      	bpl.n	8006e4e <_printf_float+0x18e>
 8006e48:	3301      	adds	r3, #1
 8006e4a:	440b      	add	r3, r1
 8006e4c:	6123      	str	r3, [r4, #16]
 8006e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e50:	f04f 0900 	mov.w	r9, #0
 8006e54:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e56:	e7d9      	b.n	8006e0c <_printf_float+0x14c>
 8006e58:	b913      	cbnz	r3, 8006e60 <_printf_float+0x1a0>
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	07d0      	lsls	r0, r2, #31
 8006e5e:	d501      	bpl.n	8006e64 <_printf_float+0x1a4>
 8006e60:	3302      	adds	r3, #2
 8006e62:	e7f3      	b.n	8006e4c <_printf_float+0x18c>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e7f1      	b.n	8006e4c <_printf_float+0x18c>
 8006e68:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006e6c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006e70:	4293      	cmp	r3, r2
 8006e72:	db05      	blt.n	8006e80 <_printf_float+0x1c0>
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	6123      	str	r3, [r4, #16]
 8006e78:	07d1      	lsls	r1, r2, #31
 8006e7a:	d5e8      	bpl.n	8006e4e <_printf_float+0x18e>
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	e7e5      	b.n	8006e4c <_printf_float+0x18c>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bfcc      	ite	gt
 8006e84:	2301      	movgt	r3, #1
 8006e86:	f1c3 0302 	rsble	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	e7de      	b.n	8006e4c <_printf_float+0x18c>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	055a      	lsls	r2, r3, #21
 8006e92:	d407      	bmi.n	8006ea4 <_printf_float+0x1e4>
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	463a      	mov	r2, r7
 8006e98:	4659      	mov	r1, fp
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b0      	blx	r6
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d129      	bne.n	8006ef6 <_printf_float+0x236>
 8006ea2:	e764      	b.n	8006d6e <_printf_float+0xae>
 8006ea4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006ea8:	f240 80d7 	bls.w	800705a <_printf_float+0x39a>
 8006eac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f7f9 fd90 	bl	80009d8 <__aeabi_dcmpeq>
 8006eb8:	b388      	cbz	r0, 8006f1e <_printf_float+0x25e>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4a40      	ldr	r2, [pc, #256]	; (8006fc0 <_printf_float+0x300>)
 8006ebe:	4659      	mov	r1, fp
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b0      	blx	r6
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	f43f af52 	beq.w	8006d6e <_printf_float+0xae>
 8006eca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	db02      	blt.n	8006ed8 <_printf_float+0x218>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	07d8      	lsls	r0, r3, #31
 8006ed6:	d50e      	bpl.n	8006ef6 <_printf_float+0x236>
 8006ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006edc:	4659      	mov	r1, fp
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b0      	blx	r6
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f43f af43 	beq.w	8006d6e <_printf_float+0xae>
 8006ee8:	2700      	movs	r7, #0
 8006eea:	f104 081a 	add.w	r8, r4, #26
 8006eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	42bb      	cmp	r3, r7
 8006ef4:	dc09      	bgt.n	8006f0a <_printf_float+0x24a>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	079f      	lsls	r7, r3, #30
 8006efa:	f100 80fd 	bmi.w	80070f8 <_printf_float+0x438>
 8006efe:	68e0      	ldr	r0, [r4, #12]
 8006f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f02:	4298      	cmp	r0, r3
 8006f04:	bfb8      	it	lt
 8006f06:	4618      	movlt	r0, r3
 8006f08:	e733      	b.n	8006d72 <_printf_float+0xb2>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4659      	mov	r1, fp
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b0      	blx	r6
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f af2a 	beq.w	8006d6e <_printf_float+0xae>
 8006f1a:	3701      	adds	r7, #1
 8006f1c:	e7e7      	b.n	8006eee <_printf_float+0x22e>
 8006f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	dc2b      	bgt.n	8006f7c <_printf_float+0x2bc>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4a26      	ldr	r2, [pc, #152]	; (8006fc0 <_printf_float+0x300>)
 8006f28:	4659      	mov	r1, fp
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b0      	blx	r6
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f af1d 	beq.w	8006d6e <_printf_float+0xae>
 8006f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f36:	b923      	cbnz	r3, 8006f42 <_printf_float+0x282>
 8006f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f3a:	b913      	cbnz	r3, 8006f42 <_printf_float+0x282>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	07d9      	lsls	r1, r3, #31
 8006f40:	d5d9      	bpl.n	8006ef6 <_printf_float+0x236>
 8006f42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f46:	4659      	mov	r1, fp
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b0      	blx	r6
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	f43f af0e 	beq.w	8006d6e <_printf_float+0xae>
 8006f52:	f04f 0800 	mov.w	r8, #0
 8006f56:	f104 091a 	add.w	r9, r4, #26
 8006f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f5c:	425b      	negs	r3, r3
 8006f5e:	4543      	cmp	r3, r8
 8006f60:	dc01      	bgt.n	8006f66 <_printf_float+0x2a6>
 8006f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f64:	e797      	b.n	8006e96 <_printf_float+0x1d6>
 8006f66:	2301      	movs	r3, #1
 8006f68:	464a      	mov	r2, r9
 8006f6a:	4659      	mov	r1, fp
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b0      	blx	r6
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f aefc 	beq.w	8006d6e <_printf_float+0xae>
 8006f76:	f108 0801 	add.w	r8, r8, #1
 8006f7a:	e7ee      	b.n	8006f5a <_printf_float+0x29a>
 8006f7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f80:	429a      	cmp	r2, r3
 8006f82:	bfa8      	it	ge
 8006f84:	461a      	movge	r2, r3
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	4690      	mov	r8, r2
 8006f8a:	dd07      	ble.n	8006f9c <_printf_float+0x2dc>
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	4659      	mov	r1, fp
 8006f90:	463a      	mov	r2, r7
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b0      	blx	r6
 8006f96:	3001      	adds	r0, #1
 8006f98:	f43f aee9 	beq.w	8006d6e <_printf_float+0xae>
 8006f9c:	f104 031a 	add.w	r3, r4, #26
 8006fa0:	f04f 0a00 	mov.w	sl, #0
 8006fa4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006faa:	e015      	b.n	8006fd8 <_printf_float+0x318>
 8006fac:	7fefffff 	.word	0x7fefffff
 8006fb0:	08009400 	.word	0x08009400
 8006fb4:	080093fc 	.word	0x080093fc
 8006fb8:	08009408 	.word	0x08009408
 8006fbc:	08009404 	.word	0x08009404
 8006fc0:	0800940c 	.word	0x0800940c
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fc8:	4659      	mov	r1, fp
 8006fca:	4628      	mov	r0, r5
 8006fcc:	47b0      	blx	r6
 8006fce:	3001      	adds	r0, #1
 8006fd0:	f43f aecd 	beq.w	8006d6e <_printf_float+0xae>
 8006fd4:	f10a 0a01 	add.w	sl, sl, #1
 8006fd8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006fdc:	eba9 0308 	sub.w	r3, r9, r8
 8006fe0:	4553      	cmp	r3, sl
 8006fe2:	dcef      	bgt.n	8006fc4 <_printf_float+0x304>
 8006fe4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	444f      	add	r7, r9
 8006fec:	db14      	blt.n	8007018 <_printf_float+0x358>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	07da      	lsls	r2, r3, #31
 8006ff2:	d411      	bmi.n	8007018 <_printf_float+0x358>
 8006ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ff6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006ff8:	eba3 0209 	sub.w	r2, r3, r9
 8006ffc:	eba3 0901 	sub.w	r9, r3, r1
 8007000:	4591      	cmp	r9, r2
 8007002:	bfa8      	it	ge
 8007004:	4691      	movge	r9, r2
 8007006:	f1b9 0f00 	cmp.w	r9, #0
 800700a:	dc0d      	bgt.n	8007028 <_printf_float+0x368>
 800700c:	2700      	movs	r7, #0
 800700e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007012:	f104 081a 	add.w	r8, r4, #26
 8007016:	e018      	b.n	800704a <_printf_float+0x38a>
 8007018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800701c:	4659      	mov	r1, fp
 800701e:	4628      	mov	r0, r5
 8007020:	47b0      	blx	r6
 8007022:	3001      	adds	r0, #1
 8007024:	d1e6      	bne.n	8006ff4 <_printf_float+0x334>
 8007026:	e6a2      	b.n	8006d6e <_printf_float+0xae>
 8007028:	464b      	mov	r3, r9
 800702a:	463a      	mov	r2, r7
 800702c:	4659      	mov	r1, fp
 800702e:	4628      	mov	r0, r5
 8007030:	47b0      	blx	r6
 8007032:	3001      	adds	r0, #1
 8007034:	d1ea      	bne.n	800700c <_printf_float+0x34c>
 8007036:	e69a      	b.n	8006d6e <_printf_float+0xae>
 8007038:	2301      	movs	r3, #1
 800703a:	4642      	mov	r2, r8
 800703c:	4659      	mov	r1, fp
 800703e:	4628      	mov	r0, r5
 8007040:	47b0      	blx	r6
 8007042:	3001      	adds	r0, #1
 8007044:	f43f ae93 	beq.w	8006d6e <_printf_float+0xae>
 8007048:	3701      	adds	r7, #1
 800704a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	eba3 0309 	sub.w	r3, r3, r9
 8007054:	42bb      	cmp	r3, r7
 8007056:	dcef      	bgt.n	8007038 <_printf_float+0x378>
 8007058:	e74d      	b.n	8006ef6 <_printf_float+0x236>
 800705a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800705c:	2a01      	cmp	r2, #1
 800705e:	dc01      	bgt.n	8007064 <_printf_float+0x3a4>
 8007060:	07db      	lsls	r3, r3, #31
 8007062:	d538      	bpl.n	80070d6 <_printf_float+0x416>
 8007064:	2301      	movs	r3, #1
 8007066:	463a      	mov	r2, r7
 8007068:	4659      	mov	r1, fp
 800706a:	4628      	mov	r0, r5
 800706c:	47b0      	blx	r6
 800706e:	3001      	adds	r0, #1
 8007070:	f43f ae7d 	beq.w	8006d6e <_printf_float+0xae>
 8007074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007078:	4659      	mov	r1, fp
 800707a:	4628      	mov	r0, r5
 800707c:	47b0      	blx	r6
 800707e:	3001      	adds	r0, #1
 8007080:	f107 0701 	add.w	r7, r7, #1
 8007084:	f43f ae73 	beq.w	8006d6e <_printf_float+0xae>
 8007088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800708c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800708e:	2200      	movs	r2, #0
 8007090:	f103 38ff 	add.w	r8, r3, #4294967295
 8007094:	2300      	movs	r3, #0
 8007096:	f7f9 fc9f 	bl	80009d8 <__aeabi_dcmpeq>
 800709a:	b9c0      	cbnz	r0, 80070ce <_printf_float+0x40e>
 800709c:	4643      	mov	r3, r8
 800709e:	463a      	mov	r2, r7
 80070a0:	4659      	mov	r1, fp
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b0      	blx	r6
 80070a6:	3001      	adds	r0, #1
 80070a8:	d10d      	bne.n	80070c6 <_printf_float+0x406>
 80070aa:	e660      	b.n	8006d6e <_printf_float+0xae>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4642      	mov	r2, r8
 80070b0:	4659      	mov	r1, fp
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b0      	blx	r6
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f ae59 	beq.w	8006d6e <_printf_float+0xae>
 80070bc:	3701      	adds	r7, #1
 80070be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070c0:	3b01      	subs	r3, #1
 80070c2:	42bb      	cmp	r3, r7
 80070c4:	dcf2      	bgt.n	80070ac <_printf_float+0x3ec>
 80070c6:	464b      	mov	r3, r9
 80070c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070cc:	e6e4      	b.n	8006e98 <_printf_float+0x1d8>
 80070ce:	2700      	movs	r7, #0
 80070d0:	f104 081a 	add.w	r8, r4, #26
 80070d4:	e7f3      	b.n	80070be <_printf_float+0x3fe>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e7e1      	b.n	800709e <_printf_float+0x3de>
 80070da:	2301      	movs	r3, #1
 80070dc:	4642      	mov	r2, r8
 80070de:	4659      	mov	r1, fp
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b0      	blx	r6
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f ae42 	beq.w	8006d6e <_printf_float+0xae>
 80070ea:	3701      	adds	r7, #1
 80070ec:	68e3      	ldr	r3, [r4, #12]
 80070ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070f0:	1a9b      	subs	r3, r3, r2
 80070f2:	42bb      	cmp	r3, r7
 80070f4:	dcf1      	bgt.n	80070da <_printf_float+0x41a>
 80070f6:	e702      	b.n	8006efe <_printf_float+0x23e>
 80070f8:	2700      	movs	r7, #0
 80070fa:	f104 0819 	add.w	r8, r4, #25
 80070fe:	e7f5      	b.n	80070ec <_printf_float+0x42c>
 8007100:	2b00      	cmp	r3, #0
 8007102:	f43f ae94 	beq.w	8006e2e <_printf_float+0x16e>
 8007106:	f04f 0c00 	mov.w	ip, #0
 800710a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800710e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007112:	6022      	str	r2, [r4, #0]
 8007114:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007118:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	463a      	mov	r2, r7
 8007120:	464b      	mov	r3, r9
 8007122:	4628      	mov	r0, r5
 8007124:	f7ff fd3a 	bl	8006b9c <__cvt>
 8007128:	4607      	mov	r7, r0
 800712a:	e64f      	b.n	8006dcc <_printf_float+0x10c>

0800712c <_printf_common>:
 800712c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007130:	4691      	mov	r9, r2
 8007132:	461f      	mov	r7, r3
 8007134:	688a      	ldr	r2, [r1, #8]
 8007136:	690b      	ldr	r3, [r1, #16]
 8007138:	4606      	mov	r6, r0
 800713a:	4293      	cmp	r3, r2
 800713c:	bfb8      	it	lt
 800713e:	4613      	movlt	r3, r2
 8007140:	f8c9 3000 	str.w	r3, [r9]
 8007144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007148:	460c      	mov	r4, r1
 800714a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800714e:	b112      	cbz	r2, 8007156 <_printf_common+0x2a>
 8007150:	3301      	adds	r3, #1
 8007152:	f8c9 3000 	str.w	r3, [r9]
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	0699      	lsls	r1, r3, #26
 800715a:	bf42      	ittt	mi
 800715c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007160:	3302      	addmi	r3, #2
 8007162:	f8c9 3000 	strmi.w	r3, [r9]
 8007166:	6825      	ldr	r5, [r4, #0]
 8007168:	f015 0506 	ands.w	r5, r5, #6
 800716c:	d107      	bne.n	800717e <_printf_common+0x52>
 800716e:	f104 0a19 	add.w	sl, r4, #25
 8007172:	68e3      	ldr	r3, [r4, #12]
 8007174:	f8d9 2000 	ldr.w	r2, [r9]
 8007178:	1a9b      	subs	r3, r3, r2
 800717a:	42ab      	cmp	r3, r5
 800717c:	dc29      	bgt.n	80071d2 <_printf_common+0xa6>
 800717e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	3300      	adds	r3, #0
 8007186:	bf18      	it	ne
 8007188:	2301      	movne	r3, #1
 800718a:	0692      	lsls	r2, r2, #26
 800718c:	d42e      	bmi.n	80071ec <_printf_common+0xc0>
 800718e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007192:	4639      	mov	r1, r7
 8007194:	4630      	mov	r0, r6
 8007196:	47c0      	blx	r8
 8007198:	3001      	adds	r0, #1
 800719a:	d021      	beq.n	80071e0 <_printf_common+0xb4>
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	68e5      	ldr	r5, [r4, #12]
 80071a0:	f003 0306 	and.w	r3, r3, #6
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	bf18      	it	ne
 80071a8:	2500      	movne	r5, #0
 80071aa:	f8d9 2000 	ldr.w	r2, [r9]
 80071ae:	f04f 0900 	mov.w	r9, #0
 80071b2:	bf08      	it	eq
 80071b4:	1aad      	subeq	r5, r5, r2
 80071b6:	68a3      	ldr	r3, [r4, #8]
 80071b8:	6922      	ldr	r2, [r4, #16]
 80071ba:	bf08      	it	eq
 80071bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c0:	4293      	cmp	r3, r2
 80071c2:	bfc4      	itt	gt
 80071c4:	1a9b      	subgt	r3, r3, r2
 80071c6:	18ed      	addgt	r5, r5, r3
 80071c8:	341a      	adds	r4, #26
 80071ca:	454d      	cmp	r5, r9
 80071cc:	d11a      	bne.n	8007204 <_printf_common+0xd8>
 80071ce:	2000      	movs	r0, #0
 80071d0:	e008      	b.n	80071e4 <_printf_common+0xb8>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4652      	mov	r2, sl
 80071d6:	4639      	mov	r1, r7
 80071d8:	4630      	mov	r0, r6
 80071da:	47c0      	blx	r8
 80071dc:	3001      	adds	r0, #1
 80071de:	d103      	bne.n	80071e8 <_printf_common+0xbc>
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e8:	3501      	adds	r5, #1
 80071ea:	e7c2      	b.n	8007172 <_printf_common+0x46>
 80071ec:	2030      	movs	r0, #48	; 0x30
 80071ee:	18e1      	adds	r1, r4, r3
 80071f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071fa:	4422      	add	r2, r4
 80071fc:	3302      	adds	r3, #2
 80071fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007202:	e7c4      	b.n	800718e <_printf_common+0x62>
 8007204:	2301      	movs	r3, #1
 8007206:	4622      	mov	r2, r4
 8007208:	4639      	mov	r1, r7
 800720a:	4630      	mov	r0, r6
 800720c:	47c0      	blx	r8
 800720e:	3001      	adds	r0, #1
 8007210:	d0e6      	beq.n	80071e0 <_printf_common+0xb4>
 8007212:	f109 0901 	add.w	r9, r9, #1
 8007216:	e7d8      	b.n	80071ca <_printf_common+0x9e>

08007218 <_printf_i>:
 8007218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800721c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007220:	460c      	mov	r4, r1
 8007222:	7e09      	ldrb	r1, [r1, #24]
 8007224:	b085      	sub	sp, #20
 8007226:	296e      	cmp	r1, #110	; 0x6e
 8007228:	4617      	mov	r7, r2
 800722a:	4606      	mov	r6, r0
 800722c:	4698      	mov	r8, r3
 800722e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007230:	f000 80b3 	beq.w	800739a <_printf_i+0x182>
 8007234:	d822      	bhi.n	800727c <_printf_i+0x64>
 8007236:	2963      	cmp	r1, #99	; 0x63
 8007238:	d036      	beq.n	80072a8 <_printf_i+0x90>
 800723a:	d80a      	bhi.n	8007252 <_printf_i+0x3a>
 800723c:	2900      	cmp	r1, #0
 800723e:	f000 80b9 	beq.w	80073b4 <_printf_i+0x19c>
 8007242:	2958      	cmp	r1, #88	; 0x58
 8007244:	f000 8083 	beq.w	800734e <_printf_i+0x136>
 8007248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800724c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007250:	e032      	b.n	80072b8 <_printf_i+0xa0>
 8007252:	2964      	cmp	r1, #100	; 0x64
 8007254:	d001      	beq.n	800725a <_printf_i+0x42>
 8007256:	2969      	cmp	r1, #105	; 0x69
 8007258:	d1f6      	bne.n	8007248 <_printf_i+0x30>
 800725a:	6820      	ldr	r0, [r4, #0]
 800725c:	6813      	ldr	r3, [r2, #0]
 800725e:	0605      	lsls	r5, r0, #24
 8007260:	f103 0104 	add.w	r1, r3, #4
 8007264:	d52a      	bpl.n	80072bc <_printf_i+0xa4>
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6011      	str	r1, [r2, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	da03      	bge.n	8007276 <_printf_i+0x5e>
 800726e:	222d      	movs	r2, #45	; 0x2d
 8007270:	425b      	negs	r3, r3
 8007272:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007276:	486f      	ldr	r0, [pc, #444]	; (8007434 <_printf_i+0x21c>)
 8007278:	220a      	movs	r2, #10
 800727a:	e039      	b.n	80072f0 <_printf_i+0xd8>
 800727c:	2973      	cmp	r1, #115	; 0x73
 800727e:	f000 809d 	beq.w	80073bc <_printf_i+0x1a4>
 8007282:	d808      	bhi.n	8007296 <_printf_i+0x7e>
 8007284:	296f      	cmp	r1, #111	; 0x6f
 8007286:	d020      	beq.n	80072ca <_printf_i+0xb2>
 8007288:	2970      	cmp	r1, #112	; 0x70
 800728a:	d1dd      	bne.n	8007248 <_printf_i+0x30>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	f043 0320 	orr.w	r3, r3, #32
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	e003      	b.n	800729e <_printf_i+0x86>
 8007296:	2975      	cmp	r1, #117	; 0x75
 8007298:	d017      	beq.n	80072ca <_printf_i+0xb2>
 800729a:	2978      	cmp	r1, #120	; 0x78
 800729c:	d1d4      	bne.n	8007248 <_printf_i+0x30>
 800729e:	2378      	movs	r3, #120	; 0x78
 80072a0:	4865      	ldr	r0, [pc, #404]	; (8007438 <_printf_i+0x220>)
 80072a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072a6:	e055      	b.n	8007354 <_printf_i+0x13c>
 80072a8:	6813      	ldr	r3, [r2, #0]
 80072aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072ae:	1d19      	adds	r1, r3, #4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6011      	str	r1, [r2, #0]
 80072b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072b8:	2301      	movs	r3, #1
 80072ba:	e08c      	b.n	80073d6 <_printf_i+0x1be>
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072c2:	6011      	str	r1, [r2, #0]
 80072c4:	bf18      	it	ne
 80072c6:	b21b      	sxthne	r3, r3
 80072c8:	e7cf      	b.n	800726a <_printf_i+0x52>
 80072ca:	6813      	ldr	r3, [r2, #0]
 80072cc:	6825      	ldr	r5, [r4, #0]
 80072ce:	1d18      	adds	r0, r3, #4
 80072d0:	6010      	str	r0, [r2, #0]
 80072d2:	0628      	lsls	r0, r5, #24
 80072d4:	d501      	bpl.n	80072da <_printf_i+0xc2>
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	e002      	b.n	80072e0 <_printf_i+0xc8>
 80072da:	0668      	lsls	r0, r5, #25
 80072dc:	d5fb      	bpl.n	80072d6 <_printf_i+0xbe>
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	296f      	cmp	r1, #111	; 0x6f
 80072e2:	bf14      	ite	ne
 80072e4:	220a      	movne	r2, #10
 80072e6:	2208      	moveq	r2, #8
 80072e8:	4852      	ldr	r0, [pc, #328]	; (8007434 <_printf_i+0x21c>)
 80072ea:	2100      	movs	r1, #0
 80072ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072f0:	6865      	ldr	r5, [r4, #4]
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	60a5      	str	r5, [r4, #8]
 80072f6:	f2c0 8095 	blt.w	8007424 <_printf_i+0x20c>
 80072fa:	6821      	ldr	r1, [r4, #0]
 80072fc:	f021 0104 	bic.w	r1, r1, #4
 8007300:	6021      	str	r1, [r4, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d13d      	bne.n	8007382 <_printf_i+0x16a>
 8007306:	2d00      	cmp	r5, #0
 8007308:	f040 808e 	bne.w	8007428 <_printf_i+0x210>
 800730c:	4665      	mov	r5, ip
 800730e:	2a08      	cmp	r2, #8
 8007310:	d10b      	bne.n	800732a <_printf_i+0x112>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	07db      	lsls	r3, r3, #31
 8007316:	d508      	bpl.n	800732a <_printf_i+0x112>
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	6862      	ldr	r2, [r4, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	bfde      	ittt	le
 8007320:	2330      	movle	r3, #48	; 0x30
 8007322:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007326:	f105 35ff 	addle.w	r5, r5, #4294967295
 800732a:	ebac 0305 	sub.w	r3, ip, r5
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	f8cd 8000 	str.w	r8, [sp]
 8007334:	463b      	mov	r3, r7
 8007336:	aa03      	add	r2, sp, #12
 8007338:	4621      	mov	r1, r4
 800733a:	4630      	mov	r0, r6
 800733c:	f7ff fef6 	bl	800712c <_printf_common>
 8007340:	3001      	adds	r0, #1
 8007342:	d14d      	bne.n	80073e0 <_printf_i+0x1c8>
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	b005      	add	sp, #20
 800734a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800734e:	4839      	ldr	r0, [pc, #228]	; (8007434 <_printf_i+0x21c>)
 8007350:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007354:	6813      	ldr	r3, [r2, #0]
 8007356:	6821      	ldr	r1, [r4, #0]
 8007358:	1d1d      	adds	r5, r3, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6015      	str	r5, [r2, #0]
 800735e:	060a      	lsls	r2, r1, #24
 8007360:	d50b      	bpl.n	800737a <_printf_i+0x162>
 8007362:	07ca      	lsls	r2, r1, #31
 8007364:	bf44      	itt	mi
 8007366:	f041 0120 	orrmi.w	r1, r1, #32
 800736a:	6021      	strmi	r1, [r4, #0]
 800736c:	b91b      	cbnz	r3, 8007376 <_printf_i+0x15e>
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	f022 0220 	bic.w	r2, r2, #32
 8007374:	6022      	str	r2, [r4, #0]
 8007376:	2210      	movs	r2, #16
 8007378:	e7b7      	b.n	80072ea <_printf_i+0xd2>
 800737a:	064d      	lsls	r5, r1, #25
 800737c:	bf48      	it	mi
 800737e:	b29b      	uxthmi	r3, r3
 8007380:	e7ef      	b.n	8007362 <_printf_i+0x14a>
 8007382:	4665      	mov	r5, ip
 8007384:	fbb3 f1f2 	udiv	r1, r3, r2
 8007388:	fb02 3311 	mls	r3, r2, r1, r3
 800738c:	5cc3      	ldrb	r3, [r0, r3]
 800738e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007392:	460b      	mov	r3, r1
 8007394:	2900      	cmp	r1, #0
 8007396:	d1f5      	bne.n	8007384 <_printf_i+0x16c>
 8007398:	e7b9      	b.n	800730e <_printf_i+0xf6>
 800739a:	6813      	ldr	r3, [r2, #0]
 800739c:	6825      	ldr	r5, [r4, #0]
 800739e:	1d18      	adds	r0, r3, #4
 80073a0:	6961      	ldr	r1, [r4, #20]
 80073a2:	6010      	str	r0, [r2, #0]
 80073a4:	0628      	lsls	r0, r5, #24
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	d501      	bpl.n	80073ae <_printf_i+0x196>
 80073aa:	6019      	str	r1, [r3, #0]
 80073ac:	e002      	b.n	80073b4 <_printf_i+0x19c>
 80073ae:	066a      	lsls	r2, r5, #25
 80073b0:	d5fb      	bpl.n	80073aa <_printf_i+0x192>
 80073b2:	8019      	strh	r1, [r3, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	4665      	mov	r5, ip
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	e7b9      	b.n	8007330 <_printf_i+0x118>
 80073bc:	6813      	ldr	r3, [r2, #0]
 80073be:	1d19      	adds	r1, r3, #4
 80073c0:	6011      	str	r1, [r2, #0]
 80073c2:	681d      	ldr	r5, [r3, #0]
 80073c4:	6862      	ldr	r2, [r4, #4]
 80073c6:	2100      	movs	r1, #0
 80073c8:	4628      	mov	r0, r5
 80073ca:	f001 f9a9 	bl	8008720 <memchr>
 80073ce:	b108      	cbz	r0, 80073d4 <_printf_i+0x1bc>
 80073d0:	1b40      	subs	r0, r0, r5
 80073d2:	6060      	str	r0, [r4, #4]
 80073d4:	6863      	ldr	r3, [r4, #4]
 80073d6:	6123      	str	r3, [r4, #16]
 80073d8:	2300      	movs	r3, #0
 80073da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073de:	e7a7      	b.n	8007330 <_printf_i+0x118>
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	462a      	mov	r2, r5
 80073e4:	4639      	mov	r1, r7
 80073e6:	4630      	mov	r0, r6
 80073e8:	47c0      	blx	r8
 80073ea:	3001      	adds	r0, #1
 80073ec:	d0aa      	beq.n	8007344 <_printf_i+0x12c>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	079b      	lsls	r3, r3, #30
 80073f2:	d413      	bmi.n	800741c <_printf_i+0x204>
 80073f4:	68e0      	ldr	r0, [r4, #12]
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	4298      	cmp	r0, r3
 80073fa:	bfb8      	it	lt
 80073fc:	4618      	movlt	r0, r3
 80073fe:	e7a3      	b.n	8007348 <_printf_i+0x130>
 8007400:	2301      	movs	r3, #1
 8007402:	464a      	mov	r2, r9
 8007404:	4639      	mov	r1, r7
 8007406:	4630      	mov	r0, r6
 8007408:	47c0      	blx	r8
 800740a:	3001      	adds	r0, #1
 800740c:	d09a      	beq.n	8007344 <_printf_i+0x12c>
 800740e:	3501      	adds	r5, #1
 8007410:	68e3      	ldr	r3, [r4, #12]
 8007412:	9a03      	ldr	r2, [sp, #12]
 8007414:	1a9b      	subs	r3, r3, r2
 8007416:	42ab      	cmp	r3, r5
 8007418:	dcf2      	bgt.n	8007400 <_printf_i+0x1e8>
 800741a:	e7eb      	b.n	80073f4 <_printf_i+0x1dc>
 800741c:	2500      	movs	r5, #0
 800741e:	f104 0919 	add.w	r9, r4, #25
 8007422:	e7f5      	b.n	8007410 <_printf_i+0x1f8>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1ac      	bne.n	8007382 <_printf_i+0x16a>
 8007428:	7803      	ldrb	r3, [r0, #0]
 800742a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800742e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007432:	e76c      	b.n	800730e <_printf_i+0xf6>
 8007434:	0800940e 	.word	0x0800940e
 8007438:	0800941f 	.word	0x0800941f

0800743c <iprintf>:
 800743c:	b40f      	push	{r0, r1, r2, r3}
 800743e:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <iprintf+0x2c>)
 8007440:	b513      	push	{r0, r1, r4, lr}
 8007442:	681c      	ldr	r4, [r3, #0]
 8007444:	b124      	cbz	r4, 8007450 <iprintf+0x14>
 8007446:	69a3      	ldr	r3, [r4, #24]
 8007448:	b913      	cbnz	r3, 8007450 <iprintf+0x14>
 800744a:	4620      	mov	r0, r4
 800744c:	f001 f864 	bl	8008518 <__sinit>
 8007450:	ab05      	add	r3, sp, #20
 8007452:	9a04      	ldr	r2, [sp, #16]
 8007454:	68a1      	ldr	r1, [r4, #8]
 8007456:	4620      	mov	r0, r4
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	f001 fd33 	bl	8008ec4 <_vfiprintf_r>
 800745e:	b002      	add	sp, #8
 8007460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007464:	b004      	add	sp, #16
 8007466:	4770      	bx	lr
 8007468:	2000006c 	.word	0x2000006c

0800746c <_puts_r>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	460e      	mov	r6, r1
 8007470:	4605      	mov	r5, r0
 8007472:	b118      	cbz	r0, 800747c <_puts_r+0x10>
 8007474:	6983      	ldr	r3, [r0, #24]
 8007476:	b90b      	cbnz	r3, 800747c <_puts_r+0x10>
 8007478:	f001 f84e 	bl	8008518 <__sinit>
 800747c:	69ab      	ldr	r3, [r5, #24]
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	b913      	cbnz	r3, 8007488 <_puts_r+0x1c>
 8007482:	4628      	mov	r0, r5
 8007484:	f001 f848 	bl	8008518 <__sinit>
 8007488:	4b23      	ldr	r3, [pc, #140]	; (8007518 <_puts_r+0xac>)
 800748a:	429c      	cmp	r4, r3
 800748c:	d117      	bne.n	80074be <_puts_r+0x52>
 800748e:	686c      	ldr	r4, [r5, #4]
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	071b      	lsls	r3, r3, #28
 8007494:	d51d      	bpl.n	80074d2 <_puts_r+0x66>
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	b1db      	cbz	r3, 80074d2 <_puts_r+0x66>
 800749a:	3e01      	subs	r6, #1
 800749c:	68a3      	ldr	r3, [r4, #8]
 800749e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074a2:	3b01      	subs	r3, #1
 80074a4:	60a3      	str	r3, [r4, #8]
 80074a6:	b9e9      	cbnz	r1, 80074e4 <_puts_r+0x78>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	da2e      	bge.n	800750a <_puts_r+0x9e>
 80074ac:	4622      	mov	r2, r4
 80074ae:	210a      	movs	r1, #10
 80074b0:	4628      	mov	r0, r5
 80074b2:	f000 f83f 	bl	8007534 <__swbuf_r>
 80074b6:	3001      	adds	r0, #1
 80074b8:	d011      	beq.n	80074de <_puts_r+0x72>
 80074ba:	200a      	movs	r0, #10
 80074bc:	e011      	b.n	80074e2 <_puts_r+0x76>
 80074be:	4b17      	ldr	r3, [pc, #92]	; (800751c <_puts_r+0xb0>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	d101      	bne.n	80074c8 <_puts_r+0x5c>
 80074c4:	68ac      	ldr	r4, [r5, #8]
 80074c6:	e7e3      	b.n	8007490 <_puts_r+0x24>
 80074c8:	4b15      	ldr	r3, [pc, #84]	; (8007520 <_puts_r+0xb4>)
 80074ca:	429c      	cmp	r4, r3
 80074cc:	bf08      	it	eq
 80074ce:	68ec      	ldreq	r4, [r5, #12]
 80074d0:	e7de      	b.n	8007490 <_puts_r+0x24>
 80074d2:	4621      	mov	r1, r4
 80074d4:	4628      	mov	r0, r5
 80074d6:	f000 f87f 	bl	80075d8 <__swsetup_r>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d0dd      	beq.n	800749a <_puts_r+0x2e>
 80074de:	f04f 30ff 	mov.w	r0, #4294967295
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	da04      	bge.n	80074f2 <_puts_r+0x86>
 80074e8:	69a2      	ldr	r2, [r4, #24]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	dc06      	bgt.n	80074fc <_puts_r+0x90>
 80074ee:	290a      	cmp	r1, #10
 80074f0:	d004      	beq.n	80074fc <_puts_r+0x90>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	6022      	str	r2, [r4, #0]
 80074f8:	7019      	strb	r1, [r3, #0]
 80074fa:	e7cf      	b.n	800749c <_puts_r+0x30>
 80074fc:	4622      	mov	r2, r4
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 f818 	bl	8007534 <__swbuf_r>
 8007504:	3001      	adds	r0, #1
 8007506:	d1c9      	bne.n	800749c <_puts_r+0x30>
 8007508:	e7e9      	b.n	80074de <_puts_r+0x72>
 800750a:	200a      	movs	r0, #10
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	6022      	str	r2, [r4, #0]
 8007512:	7018      	strb	r0, [r3, #0]
 8007514:	e7e5      	b.n	80074e2 <_puts_r+0x76>
 8007516:	bf00      	nop
 8007518:	08009460 	.word	0x08009460
 800751c:	08009480 	.word	0x08009480
 8007520:	08009440 	.word	0x08009440

08007524 <puts>:
 8007524:	4b02      	ldr	r3, [pc, #8]	; (8007530 <puts+0xc>)
 8007526:	4601      	mov	r1, r0
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	f7ff bf9f 	b.w	800746c <_puts_r>
 800752e:	bf00      	nop
 8007530:	2000006c 	.word	0x2000006c

08007534 <__swbuf_r>:
 8007534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007536:	460e      	mov	r6, r1
 8007538:	4614      	mov	r4, r2
 800753a:	4605      	mov	r5, r0
 800753c:	b118      	cbz	r0, 8007546 <__swbuf_r+0x12>
 800753e:	6983      	ldr	r3, [r0, #24]
 8007540:	b90b      	cbnz	r3, 8007546 <__swbuf_r+0x12>
 8007542:	f000 ffe9 	bl	8008518 <__sinit>
 8007546:	4b21      	ldr	r3, [pc, #132]	; (80075cc <__swbuf_r+0x98>)
 8007548:	429c      	cmp	r4, r3
 800754a:	d12a      	bne.n	80075a2 <__swbuf_r+0x6e>
 800754c:	686c      	ldr	r4, [r5, #4]
 800754e:	69a3      	ldr	r3, [r4, #24]
 8007550:	60a3      	str	r3, [r4, #8]
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	071a      	lsls	r2, r3, #28
 8007556:	d52e      	bpl.n	80075b6 <__swbuf_r+0x82>
 8007558:	6923      	ldr	r3, [r4, #16]
 800755a:	b363      	cbz	r3, 80075b6 <__swbuf_r+0x82>
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	6820      	ldr	r0, [r4, #0]
 8007560:	b2f6      	uxtb	r6, r6
 8007562:	1ac0      	subs	r0, r0, r3
 8007564:	6963      	ldr	r3, [r4, #20]
 8007566:	4637      	mov	r7, r6
 8007568:	4283      	cmp	r3, r0
 800756a:	dc04      	bgt.n	8007576 <__swbuf_r+0x42>
 800756c:	4621      	mov	r1, r4
 800756e:	4628      	mov	r0, r5
 8007570:	f000 ff68 	bl	8008444 <_fflush_r>
 8007574:	bb28      	cbnz	r0, 80075c2 <__swbuf_r+0x8e>
 8007576:	68a3      	ldr	r3, [r4, #8]
 8007578:	3001      	adds	r0, #1
 800757a:	3b01      	subs	r3, #1
 800757c:	60a3      	str	r3, [r4, #8]
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	6022      	str	r2, [r4, #0]
 8007584:	701e      	strb	r6, [r3, #0]
 8007586:	6963      	ldr	r3, [r4, #20]
 8007588:	4283      	cmp	r3, r0
 800758a:	d004      	beq.n	8007596 <__swbuf_r+0x62>
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	07db      	lsls	r3, r3, #31
 8007590:	d519      	bpl.n	80075c6 <__swbuf_r+0x92>
 8007592:	2e0a      	cmp	r6, #10
 8007594:	d117      	bne.n	80075c6 <__swbuf_r+0x92>
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f000 ff53 	bl	8008444 <_fflush_r>
 800759e:	b190      	cbz	r0, 80075c6 <__swbuf_r+0x92>
 80075a0:	e00f      	b.n	80075c2 <__swbuf_r+0x8e>
 80075a2:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <__swbuf_r+0x9c>)
 80075a4:	429c      	cmp	r4, r3
 80075a6:	d101      	bne.n	80075ac <__swbuf_r+0x78>
 80075a8:	68ac      	ldr	r4, [r5, #8]
 80075aa:	e7d0      	b.n	800754e <__swbuf_r+0x1a>
 80075ac:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <__swbuf_r+0xa0>)
 80075ae:	429c      	cmp	r4, r3
 80075b0:	bf08      	it	eq
 80075b2:	68ec      	ldreq	r4, [r5, #12]
 80075b4:	e7cb      	b.n	800754e <__swbuf_r+0x1a>
 80075b6:	4621      	mov	r1, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 f80d 	bl	80075d8 <__swsetup_r>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d0cc      	beq.n	800755c <__swbuf_r+0x28>
 80075c2:	f04f 37ff 	mov.w	r7, #4294967295
 80075c6:	4638      	mov	r0, r7
 80075c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ca:	bf00      	nop
 80075cc:	08009460 	.word	0x08009460
 80075d0:	08009480 	.word	0x08009480
 80075d4:	08009440 	.word	0x08009440

080075d8 <__swsetup_r>:
 80075d8:	4b32      	ldr	r3, [pc, #200]	; (80076a4 <__swsetup_r+0xcc>)
 80075da:	b570      	push	{r4, r5, r6, lr}
 80075dc:	681d      	ldr	r5, [r3, #0]
 80075de:	4606      	mov	r6, r0
 80075e0:	460c      	mov	r4, r1
 80075e2:	b125      	cbz	r5, 80075ee <__swsetup_r+0x16>
 80075e4:	69ab      	ldr	r3, [r5, #24]
 80075e6:	b913      	cbnz	r3, 80075ee <__swsetup_r+0x16>
 80075e8:	4628      	mov	r0, r5
 80075ea:	f000 ff95 	bl	8008518 <__sinit>
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <__swsetup_r+0xd0>)
 80075f0:	429c      	cmp	r4, r3
 80075f2:	d10f      	bne.n	8007614 <__swsetup_r+0x3c>
 80075f4:	686c      	ldr	r4, [r5, #4]
 80075f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	0715      	lsls	r5, r2, #28
 80075fe:	d42c      	bmi.n	800765a <__swsetup_r+0x82>
 8007600:	06d0      	lsls	r0, r2, #27
 8007602:	d411      	bmi.n	8007628 <__swsetup_r+0x50>
 8007604:	2209      	movs	r2, #9
 8007606:	6032      	str	r2, [r6, #0]
 8007608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	f04f 30ff 	mov.w	r0, #4294967295
 8007612:	e03e      	b.n	8007692 <__swsetup_r+0xba>
 8007614:	4b25      	ldr	r3, [pc, #148]	; (80076ac <__swsetup_r+0xd4>)
 8007616:	429c      	cmp	r4, r3
 8007618:	d101      	bne.n	800761e <__swsetup_r+0x46>
 800761a:	68ac      	ldr	r4, [r5, #8]
 800761c:	e7eb      	b.n	80075f6 <__swsetup_r+0x1e>
 800761e:	4b24      	ldr	r3, [pc, #144]	; (80076b0 <__swsetup_r+0xd8>)
 8007620:	429c      	cmp	r4, r3
 8007622:	bf08      	it	eq
 8007624:	68ec      	ldreq	r4, [r5, #12]
 8007626:	e7e6      	b.n	80075f6 <__swsetup_r+0x1e>
 8007628:	0751      	lsls	r1, r2, #29
 800762a:	d512      	bpl.n	8007652 <__swsetup_r+0x7a>
 800762c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800762e:	b141      	cbz	r1, 8007642 <__swsetup_r+0x6a>
 8007630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007634:	4299      	cmp	r1, r3
 8007636:	d002      	beq.n	800763e <__swsetup_r+0x66>
 8007638:	4630      	mov	r0, r6
 800763a:	f001 fb75 	bl	8008d28 <_free_r>
 800763e:	2300      	movs	r3, #0
 8007640:	6363      	str	r3, [r4, #52]	; 0x34
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	2300      	movs	r3, #0
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f043 0308 	orr.w	r3, r3, #8
 8007658:	81a3      	strh	r3, [r4, #12]
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	b94b      	cbnz	r3, 8007672 <__swsetup_r+0x9a>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007668:	d003      	beq.n	8007672 <__swsetup_r+0x9a>
 800766a:	4621      	mov	r1, r4
 800766c:	4630      	mov	r0, r6
 800766e:	f001 f80f 	bl	8008690 <__smakebuf_r>
 8007672:	89a2      	ldrh	r2, [r4, #12]
 8007674:	f012 0301 	ands.w	r3, r2, #1
 8007678:	d00c      	beq.n	8007694 <__swsetup_r+0xbc>
 800767a:	2300      	movs	r3, #0
 800767c:	60a3      	str	r3, [r4, #8]
 800767e:	6963      	ldr	r3, [r4, #20]
 8007680:	425b      	negs	r3, r3
 8007682:	61a3      	str	r3, [r4, #24]
 8007684:	6923      	ldr	r3, [r4, #16]
 8007686:	b953      	cbnz	r3, 800769e <__swsetup_r+0xc6>
 8007688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007690:	d1ba      	bne.n	8007608 <__swsetup_r+0x30>
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	0792      	lsls	r2, r2, #30
 8007696:	bf58      	it	pl
 8007698:	6963      	ldrpl	r3, [r4, #20]
 800769a:	60a3      	str	r3, [r4, #8]
 800769c:	e7f2      	b.n	8007684 <__swsetup_r+0xac>
 800769e:	2000      	movs	r0, #0
 80076a0:	e7f7      	b.n	8007692 <__swsetup_r+0xba>
 80076a2:	bf00      	nop
 80076a4:	2000006c 	.word	0x2000006c
 80076a8:	08009460 	.word	0x08009460
 80076ac:	08009480 	.word	0x08009480
 80076b0:	08009440 	.word	0x08009440

080076b4 <quorem>:
 80076b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	6903      	ldr	r3, [r0, #16]
 80076ba:	690c      	ldr	r4, [r1, #16]
 80076bc:	4680      	mov	r8, r0
 80076be:	42a3      	cmp	r3, r4
 80076c0:	f2c0 8084 	blt.w	80077cc <quorem+0x118>
 80076c4:	3c01      	subs	r4, #1
 80076c6:	f101 0714 	add.w	r7, r1, #20
 80076ca:	f100 0614 	add.w	r6, r0, #20
 80076ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80076d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80076d6:	3501      	adds	r5, #1
 80076d8:	fbb0 f5f5 	udiv	r5, r0, r5
 80076dc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80076e0:	eb06 030c 	add.w	r3, r6, ip
 80076e4:	eb07 090c 	add.w	r9, r7, ip
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	b39d      	cbz	r5, 8007754 <quorem+0xa0>
 80076ec:	f04f 0a00 	mov.w	sl, #0
 80076f0:	4638      	mov	r0, r7
 80076f2:	46b6      	mov	lr, r6
 80076f4:	46d3      	mov	fp, sl
 80076f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80076fa:	b293      	uxth	r3, r2
 80076fc:	fb05 a303 	mla	r3, r5, r3, sl
 8007700:	0c12      	lsrs	r2, r2, #16
 8007702:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007706:	fb05 a202 	mla	r2, r5, r2, sl
 800770a:	b29b      	uxth	r3, r3
 800770c:	ebab 0303 	sub.w	r3, fp, r3
 8007710:	f8de b000 	ldr.w	fp, [lr]
 8007714:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007718:	fa1f fb8b 	uxth.w	fp, fp
 800771c:	445b      	add	r3, fp
 800771e:	fa1f fb82 	uxth.w	fp, r2
 8007722:	f8de 2000 	ldr.w	r2, [lr]
 8007726:	4581      	cmp	r9, r0
 8007728:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800772c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007730:	b29b      	uxth	r3, r3
 8007732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007736:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800773a:	f84e 3b04 	str.w	r3, [lr], #4
 800773e:	d2da      	bcs.n	80076f6 <quorem+0x42>
 8007740:	f856 300c 	ldr.w	r3, [r6, ip]
 8007744:	b933      	cbnz	r3, 8007754 <quorem+0xa0>
 8007746:	9b01      	ldr	r3, [sp, #4]
 8007748:	3b04      	subs	r3, #4
 800774a:	429e      	cmp	r6, r3
 800774c:	461a      	mov	r2, r3
 800774e:	d331      	bcc.n	80077b4 <quorem+0x100>
 8007750:	f8c8 4010 	str.w	r4, [r8, #16]
 8007754:	4640      	mov	r0, r8
 8007756:	f001 fa11 	bl	8008b7c <__mcmp>
 800775a:	2800      	cmp	r0, #0
 800775c:	db26      	blt.n	80077ac <quorem+0xf8>
 800775e:	4630      	mov	r0, r6
 8007760:	f04f 0c00 	mov.w	ip, #0
 8007764:	3501      	adds	r5, #1
 8007766:	f857 1b04 	ldr.w	r1, [r7], #4
 800776a:	f8d0 e000 	ldr.w	lr, [r0]
 800776e:	b28b      	uxth	r3, r1
 8007770:	ebac 0303 	sub.w	r3, ip, r3
 8007774:	fa1f f28e 	uxth.w	r2, lr
 8007778:	4413      	add	r3, r2
 800777a:	0c0a      	lsrs	r2, r1, #16
 800777c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007780:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007784:	b29b      	uxth	r3, r3
 8007786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800778a:	45b9      	cmp	r9, r7
 800778c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007790:	f840 3b04 	str.w	r3, [r0], #4
 8007794:	d2e7      	bcs.n	8007766 <quorem+0xb2>
 8007796:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800779a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800779e:	b92a      	cbnz	r2, 80077ac <quorem+0xf8>
 80077a0:	3b04      	subs	r3, #4
 80077a2:	429e      	cmp	r6, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	d30b      	bcc.n	80077c0 <quorem+0x10c>
 80077a8:	f8c8 4010 	str.w	r4, [r8, #16]
 80077ac:	4628      	mov	r0, r5
 80077ae:	b003      	add	sp, #12
 80077b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	3b04      	subs	r3, #4
 80077b8:	2a00      	cmp	r2, #0
 80077ba:	d1c9      	bne.n	8007750 <quorem+0x9c>
 80077bc:	3c01      	subs	r4, #1
 80077be:	e7c4      	b.n	800774a <quorem+0x96>
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	3b04      	subs	r3, #4
 80077c4:	2a00      	cmp	r2, #0
 80077c6:	d1ef      	bne.n	80077a8 <quorem+0xf4>
 80077c8:	3c01      	subs	r4, #1
 80077ca:	e7ea      	b.n	80077a2 <quorem+0xee>
 80077cc:	2000      	movs	r0, #0
 80077ce:	e7ee      	b.n	80077ae <quorem+0xfa>

080077d0 <_dtoa_r>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	4616      	mov	r6, r2
 80077d6:	461f      	mov	r7, r3
 80077d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077da:	b095      	sub	sp, #84	; 0x54
 80077dc:	4604      	mov	r4, r0
 80077de:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80077e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80077e6:	b93d      	cbnz	r5, 80077f8 <_dtoa_r+0x28>
 80077e8:	2010      	movs	r0, #16
 80077ea:	f000 ff91 	bl	8008710 <malloc>
 80077ee:	6260      	str	r0, [r4, #36]	; 0x24
 80077f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077f4:	6005      	str	r5, [r0, #0]
 80077f6:	60c5      	str	r5, [r0, #12]
 80077f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077fa:	6819      	ldr	r1, [r3, #0]
 80077fc:	b151      	cbz	r1, 8007814 <_dtoa_r+0x44>
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	2301      	movs	r3, #1
 8007802:	4093      	lsls	r3, r2
 8007804:	604a      	str	r2, [r1, #4]
 8007806:	608b      	str	r3, [r1, #8]
 8007808:	4620      	mov	r0, r4
 800780a:	f000 ffd6 	bl	80087ba <_Bfree>
 800780e:	2200      	movs	r2, #0
 8007810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	1e3b      	subs	r3, r7, #0
 8007816:	bfaf      	iteee	ge
 8007818:	2300      	movge	r3, #0
 800781a:	2201      	movlt	r2, #1
 800781c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007820:	9303      	strlt	r3, [sp, #12]
 8007822:	bfac      	ite	ge
 8007824:	f8c8 3000 	strge.w	r3, [r8]
 8007828:	f8c8 2000 	strlt.w	r2, [r8]
 800782c:	4bae      	ldr	r3, [pc, #696]	; (8007ae8 <_dtoa_r+0x318>)
 800782e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007832:	ea33 0308 	bics.w	r3, r3, r8
 8007836:	d11b      	bne.n	8007870 <_dtoa_r+0xa0>
 8007838:	f242 730f 	movw	r3, #9999	; 0x270f
 800783c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	9b02      	ldr	r3, [sp, #8]
 8007842:	b923      	cbnz	r3, 800784e <_dtoa_r+0x7e>
 8007844:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007848:	2800      	cmp	r0, #0
 800784a:	f000 8545 	beq.w	80082d8 <_dtoa_r+0xb08>
 800784e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007850:	b953      	cbnz	r3, 8007868 <_dtoa_r+0x98>
 8007852:	4ba6      	ldr	r3, [pc, #664]	; (8007aec <_dtoa_r+0x31c>)
 8007854:	e021      	b.n	800789a <_dtoa_r+0xca>
 8007856:	4ba6      	ldr	r3, [pc, #664]	; (8007af0 <_dtoa_r+0x320>)
 8007858:	9306      	str	r3, [sp, #24]
 800785a:	3308      	adds	r3, #8
 800785c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	9806      	ldr	r0, [sp, #24]
 8007862:	b015      	add	sp, #84	; 0x54
 8007864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007868:	4ba0      	ldr	r3, [pc, #640]	; (8007aec <_dtoa_r+0x31c>)
 800786a:	9306      	str	r3, [sp, #24]
 800786c:	3303      	adds	r3, #3
 800786e:	e7f5      	b.n	800785c <_dtoa_r+0x8c>
 8007870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	2300      	movs	r3, #0
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f9 f8ac 	bl	80009d8 <__aeabi_dcmpeq>
 8007880:	4682      	mov	sl, r0
 8007882:	b160      	cbz	r0, 800789e <_dtoa_r+0xce>
 8007884:	2301      	movs	r3, #1
 8007886:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 8520 	beq.w	80082d2 <_dtoa_r+0xb02>
 8007892:	4b98      	ldr	r3, [pc, #608]	; (8007af4 <_dtoa_r+0x324>)
 8007894:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	3b01      	subs	r3, #1
 800789a:	9306      	str	r3, [sp, #24]
 800789c:	e7e0      	b.n	8007860 <_dtoa_r+0x90>
 800789e:	ab12      	add	r3, sp, #72	; 0x48
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	ab13      	add	r3, sp, #76	; 0x4c
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	4632      	mov	r2, r6
 80078a8:	463b      	mov	r3, r7
 80078aa:	4620      	mov	r0, r4
 80078ac:	f001 f9de 	bl	8008c6c <__d2b>
 80078b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80078b4:	4683      	mov	fp, r0
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	d07d      	beq.n	80079b6 <_dtoa_r+0x1e6>
 80078ba:	46b0      	mov	r8, r6
 80078bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078c0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80078c4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80078c8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078cc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80078d0:	2200      	movs	r2, #0
 80078d2:	4b89      	ldr	r3, [pc, #548]	; (8007af8 <_dtoa_r+0x328>)
 80078d4:	4640      	mov	r0, r8
 80078d6:	4649      	mov	r1, r9
 80078d8:	f7f8 fc5e 	bl	8000198 <__aeabi_dsub>
 80078dc:	a37c      	add	r3, pc, #496	; (adr r3, 8007ad0 <_dtoa_r+0x300>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f8 fe11 	bl	8000508 <__aeabi_dmul>
 80078e6:	a37c      	add	r3, pc, #496	; (adr r3, 8007ad8 <_dtoa_r+0x308>)
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f7f8 fc56 	bl	800019c <__adddf3>
 80078f0:	4606      	mov	r6, r0
 80078f2:	4628      	mov	r0, r5
 80078f4:	460f      	mov	r7, r1
 80078f6:	f7f8 fd9d 	bl	8000434 <__aeabi_i2d>
 80078fa:	a379      	add	r3, pc, #484	; (adr r3, 8007ae0 <_dtoa_r+0x310>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f7f8 fe02 	bl	8000508 <__aeabi_dmul>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4630      	mov	r0, r6
 800790a:	4639      	mov	r1, r7
 800790c:	f7f8 fc46 	bl	800019c <__adddf3>
 8007910:	4606      	mov	r6, r0
 8007912:	460f      	mov	r7, r1
 8007914:	f7f9 f8a8 	bl	8000a68 <__aeabi_d2iz>
 8007918:	2200      	movs	r2, #0
 800791a:	4682      	mov	sl, r0
 800791c:	2300      	movs	r3, #0
 800791e:	4630      	mov	r0, r6
 8007920:	4639      	mov	r1, r7
 8007922:	f7f9 f863 	bl	80009ec <__aeabi_dcmplt>
 8007926:	b148      	cbz	r0, 800793c <_dtoa_r+0x16c>
 8007928:	4650      	mov	r0, sl
 800792a:	f7f8 fd83 	bl	8000434 <__aeabi_i2d>
 800792e:	4632      	mov	r2, r6
 8007930:	463b      	mov	r3, r7
 8007932:	f7f9 f851 	bl	80009d8 <__aeabi_dcmpeq>
 8007936:	b908      	cbnz	r0, 800793c <_dtoa_r+0x16c>
 8007938:	f10a 3aff 	add.w	sl, sl, #4294967295
 800793c:	f1ba 0f16 	cmp.w	sl, #22
 8007940:	d85a      	bhi.n	80079f8 <_dtoa_r+0x228>
 8007942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007946:	496d      	ldr	r1, [pc, #436]	; (8007afc <_dtoa_r+0x32c>)
 8007948:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800794c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007950:	f7f9 f86a 	bl	8000a28 <__aeabi_dcmpgt>
 8007954:	2800      	cmp	r0, #0
 8007956:	d051      	beq.n	80079fc <_dtoa_r+0x22c>
 8007958:	2300      	movs	r3, #0
 800795a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800795e:	930d      	str	r3, [sp, #52]	; 0x34
 8007960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007962:	1b5d      	subs	r5, r3, r5
 8007964:	1e6b      	subs	r3, r5, #1
 8007966:	9307      	str	r3, [sp, #28]
 8007968:	bf43      	ittte	mi
 800796a:	2300      	movmi	r3, #0
 800796c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007970:	9307      	strmi	r3, [sp, #28]
 8007972:	f04f 0900 	movpl.w	r9, #0
 8007976:	f1ba 0f00 	cmp.w	sl, #0
 800797a:	db41      	blt.n	8007a00 <_dtoa_r+0x230>
 800797c:	9b07      	ldr	r3, [sp, #28]
 800797e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007982:	4453      	add	r3, sl
 8007984:	9307      	str	r3, [sp, #28]
 8007986:	2300      	movs	r3, #0
 8007988:	9308      	str	r3, [sp, #32]
 800798a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800798c:	2b09      	cmp	r3, #9
 800798e:	f200 808f 	bhi.w	8007ab0 <_dtoa_r+0x2e0>
 8007992:	2b05      	cmp	r3, #5
 8007994:	bfc4      	itt	gt
 8007996:	3b04      	subgt	r3, #4
 8007998:	931e      	strgt	r3, [sp, #120]	; 0x78
 800799a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800799c:	bfc8      	it	gt
 800799e:	2500      	movgt	r5, #0
 80079a0:	f1a3 0302 	sub.w	r3, r3, #2
 80079a4:	bfd8      	it	le
 80079a6:	2501      	movle	r5, #1
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	f200 808d 	bhi.w	8007ac8 <_dtoa_r+0x2f8>
 80079ae:	e8df f003 	tbb	[pc, r3]
 80079b2:	7d7b      	.short	0x7d7b
 80079b4:	6f2f      	.short	0x6f2f
 80079b6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80079ba:	441d      	add	r5, r3
 80079bc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80079c0:	2820      	cmp	r0, #32
 80079c2:	dd13      	ble.n	80079ec <_dtoa_r+0x21c>
 80079c4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80079c8:	9b02      	ldr	r3, [sp, #8]
 80079ca:	fa08 f800 	lsl.w	r8, r8, r0
 80079ce:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80079d2:	fa23 f000 	lsr.w	r0, r3, r0
 80079d6:	ea48 0000 	orr.w	r0, r8, r0
 80079da:	f7f8 fd1b 	bl	8000414 <__aeabi_ui2d>
 80079de:	2301      	movs	r3, #1
 80079e0:	4680      	mov	r8, r0
 80079e2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80079e6:	3d01      	subs	r5, #1
 80079e8:	9310      	str	r3, [sp, #64]	; 0x40
 80079ea:	e771      	b.n	80078d0 <_dtoa_r+0x100>
 80079ec:	9b02      	ldr	r3, [sp, #8]
 80079ee:	f1c0 0020 	rsb	r0, r0, #32
 80079f2:	fa03 f000 	lsl.w	r0, r3, r0
 80079f6:	e7f0      	b.n	80079da <_dtoa_r+0x20a>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e7b0      	b.n	800795e <_dtoa_r+0x18e>
 80079fc:	900d      	str	r0, [sp, #52]	; 0x34
 80079fe:	e7af      	b.n	8007960 <_dtoa_r+0x190>
 8007a00:	f1ca 0300 	rsb	r3, sl, #0
 8007a04:	9308      	str	r3, [sp, #32]
 8007a06:	2300      	movs	r3, #0
 8007a08:	eba9 090a 	sub.w	r9, r9, sl
 8007a0c:	930c      	str	r3, [sp, #48]	; 0x30
 8007a0e:	e7bc      	b.n	800798a <_dtoa_r+0x1ba>
 8007a10:	2301      	movs	r3, #1
 8007a12:	9309      	str	r3, [sp, #36]	; 0x24
 8007a14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	dd74      	ble.n	8007b04 <_dtoa_r+0x334>
 8007a1a:	4698      	mov	r8, r3
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a22:	6072      	str	r2, [r6, #4]
 8007a24:	2204      	movs	r2, #4
 8007a26:	f102 0014 	add.w	r0, r2, #20
 8007a2a:	4298      	cmp	r0, r3
 8007a2c:	6871      	ldr	r1, [r6, #4]
 8007a2e:	d96e      	bls.n	8007b0e <_dtoa_r+0x33e>
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 fe8e 	bl	8008752 <_Balloc>
 8007a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a38:	6030      	str	r0, [r6, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f1b8 0f0e 	cmp.w	r8, #14
 8007a40:	9306      	str	r3, [sp, #24]
 8007a42:	f200 80ed 	bhi.w	8007c20 <_dtoa_r+0x450>
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	f000 80ea 	beq.w	8007c20 <_dtoa_r+0x450>
 8007a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a50:	f1ba 0f00 	cmp.w	sl, #0
 8007a54:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007a58:	dd77      	ble.n	8007b4a <_dtoa_r+0x37a>
 8007a5a:	4a28      	ldr	r2, [pc, #160]	; (8007afc <_dtoa_r+0x32c>)
 8007a5c:	f00a 030f 	and.w	r3, sl, #15
 8007a60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007a64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a68:	06f0      	lsls	r0, r6, #27
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007a72:	d568      	bpl.n	8007b46 <_dtoa_r+0x376>
 8007a74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007a78:	4b21      	ldr	r3, [pc, #132]	; (8007b00 <_dtoa_r+0x330>)
 8007a7a:	2503      	movs	r5, #3
 8007a7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a80:	f7f8 fe6c 	bl	800075c <__aeabi_ddiv>
 8007a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a88:	f006 060f 	and.w	r6, r6, #15
 8007a8c:	4f1c      	ldr	r7, [pc, #112]	; (8007b00 <_dtoa_r+0x330>)
 8007a8e:	e04f      	b.n	8007b30 <_dtoa_r+0x360>
 8007a90:	2301      	movs	r3, #1
 8007a92:	9309      	str	r3, [sp, #36]	; 0x24
 8007a94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a96:	4453      	add	r3, sl
 8007a98:	f103 0801 	add.w	r8, r3, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	4643      	mov	r3, r8
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	bfb8      	it	lt
 8007aa4:	2301      	movlt	r3, #1
 8007aa6:	e7ba      	b.n	8007a1e <_dtoa_r+0x24e>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e7b2      	b.n	8007a12 <_dtoa_r+0x242>
 8007aac:	2300      	movs	r3, #0
 8007aae:	e7f0      	b.n	8007a92 <_dtoa_r+0x2c2>
 8007ab0:	2501      	movs	r5, #1
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9509      	str	r5, [sp, #36]	; 0x24
 8007ab6:	931e      	str	r3, [sp, #120]	; 0x78
 8007ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8007abc:	2200      	movs	r2, #0
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	4698      	mov	r8, r3
 8007ac2:	2312      	movs	r3, #18
 8007ac4:	921f      	str	r2, [sp, #124]	; 0x7c
 8007ac6:	e7aa      	b.n	8007a1e <_dtoa_r+0x24e>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	9309      	str	r3, [sp, #36]	; 0x24
 8007acc:	e7f4      	b.n	8007ab8 <_dtoa_r+0x2e8>
 8007ace:	bf00      	nop
 8007ad0:	636f4361 	.word	0x636f4361
 8007ad4:	3fd287a7 	.word	0x3fd287a7
 8007ad8:	8b60c8b3 	.word	0x8b60c8b3
 8007adc:	3fc68a28 	.word	0x3fc68a28
 8007ae0:	509f79fb 	.word	0x509f79fb
 8007ae4:	3fd34413 	.word	0x3fd34413
 8007ae8:	7ff00000 	.word	0x7ff00000
 8007aec:	08009439 	.word	0x08009439
 8007af0:	08009430 	.word	0x08009430
 8007af4:	0800940d 	.word	0x0800940d
 8007af8:	3ff80000 	.word	0x3ff80000
 8007afc:	080094c8 	.word	0x080094c8
 8007b00:	080094a0 	.word	0x080094a0
 8007b04:	2301      	movs	r3, #1
 8007b06:	9304      	str	r3, [sp, #16]
 8007b08:	4698      	mov	r8, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	e7da      	b.n	8007ac4 <_dtoa_r+0x2f4>
 8007b0e:	3101      	adds	r1, #1
 8007b10:	6071      	str	r1, [r6, #4]
 8007b12:	0052      	lsls	r2, r2, #1
 8007b14:	e787      	b.n	8007a26 <_dtoa_r+0x256>
 8007b16:	07f1      	lsls	r1, r6, #31
 8007b18:	d508      	bpl.n	8007b2c <_dtoa_r+0x35c>
 8007b1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b22:	f7f8 fcf1 	bl	8000508 <__aeabi_dmul>
 8007b26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b2a:	3501      	adds	r5, #1
 8007b2c:	1076      	asrs	r6, r6, #1
 8007b2e:	3708      	adds	r7, #8
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	d1f0      	bne.n	8007b16 <_dtoa_r+0x346>
 8007b34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b3c:	f7f8 fe0e 	bl	800075c <__aeabi_ddiv>
 8007b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b44:	e01b      	b.n	8007b7e <_dtoa_r+0x3ae>
 8007b46:	2502      	movs	r5, #2
 8007b48:	e7a0      	b.n	8007a8c <_dtoa_r+0x2bc>
 8007b4a:	f000 80a4 	beq.w	8007c96 <_dtoa_r+0x4c6>
 8007b4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b52:	f1ca 0600 	rsb	r6, sl, #0
 8007b56:	4ba0      	ldr	r3, [pc, #640]	; (8007dd8 <_dtoa_r+0x608>)
 8007b58:	f006 020f 	and.w	r2, r6, #15
 8007b5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fcd0 	bl	8000508 <__aeabi_dmul>
 8007b68:	2502      	movs	r5, #2
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b70:	4f9a      	ldr	r7, [pc, #616]	; (8007ddc <_dtoa_r+0x60c>)
 8007b72:	1136      	asrs	r6, r6, #4
 8007b74:	2e00      	cmp	r6, #0
 8007b76:	f040 8083 	bne.w	8007c80 <_dtoa_r+0x4b0>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e0      	bne.n	8007b40 <_dtoa_r+0x370>
 8007b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 808a 	beq.w	8007c9a <_dtoa_r+0x4ca>
 8007b86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b92:	2200      	movs	r2, #0
 8007b94:	4b92      	ldr	r3, [pc, #584]	; (8007de0 <_dtoa_r+0x610>)
 8007b96:	f7f8 ff29 	bl	80009ec <__aeabi_dcmplt>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d07d      	beq.n	8007c9a <_dtoa_r+0x4ca>
 8007b9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ba2:	d07a      	beq.n	8007c9a <_dtoa_r+0x4ca>
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dd36      	ble.n	8007c18 <_dtoa_r+0x448>
 8007baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4b8c      	ldr	r3, [pc, #560]	; (8007de4 <_dtoa_r+0x614>)
 8007bb2:	f7f8 fca9 	bl	8000508 <__aeabi_dmul>
 8007bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bba:	9e04      	ldr	r6, [sp, #16]
 8007bbc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007bc0:	3501      	adds	r5, #1
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f7f8 fc36 	bl	8000434 <__aeabi_i2d>
 8007bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bcc:	f7f8 fc9c 	bl	8000508 <__aeabi_dmul>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4b85      	ldr	r3, [pc, #532]	; (8007de8 <_dtoa_r+0x618>)
 8007bd4:	f7f8 fae2 	bl	800019c <__adddf3>
 8007bd8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007bdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007be0:	950b      	str	r5, [sp, #44]	; 0x2c
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	d15c      	bne.n	8007ca0 <_dtoa_r+0x4d0>
 8007be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bea:	2200      	movs	r2, #0
 8007bec:	4b7f      	ldr	r3, [pc, #508]	; (8007dec <_dtoa_r+0x61c>)
 8007bee:	f7f8 fad3 	bl	8000198 <__aeabi_dsub>
 8007bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfa:	f7f8 ff15 	bl	8000a28 <__aeabi_dcmpgt>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	f040 8281 	bne.w	8008106 <_dtoa_r+0x936>
 8007c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c0a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007c0e:	f7f8 feed 	bl	80009ec <__aeabi_dcmplt>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f040 8275 	bne.w	8008102 <_dtoa_r+0x932>
 8007c18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007c1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f2c0 814b 	blt.w	8007ebe <_dtoa_r+0x6ee>
 8007c28:	f1ba 0f0e 	cmp.w	sl, #14
 8007c2c:	f300 8147 	bgt.w	8007ebe <_dtoa_r+0x6ee>
 8007c30:	4b69      	ldr	r3, [pc, #420]	; (8007dd8 <_dtoa_r+0x608>)
 8007c32:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f280 80d7 	bge.w	8007df4 <_dtoa_r+0x624>
 8007c46:	f1b8 0f00 	cmp.w	r8, #0
 8007c4a:	f300 80d3 	bgt.w	8007df4 <_dtoa_r+0x624>
 8007c4e:	f040 8257 	bne.w	8008100 <_dtoa_r+0x930>
 8007c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c56:	2200      	movs	r2, #0
 8007c58:	4b64      	ldr	r3, [pc, #400]	; (8007dec <_dtoa_r+0x61c>)
 8007c5a:	f7f8 fc55 	bl	8000508 <__aeabi_dmul>
 8007c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c62:	f7f8 fed7 	bl	8000a14 <__aeabi_dcmpge>
 8007c66:	4646      	mov	r6, r8
 8007c68:	4647      	mov	r7, r8
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f040 822d 	bne.w	80080ca <_dtoa_r+0x8fa>
 8007c70:	9b06      	ldr	r3, [sp, #24]
 8007c72:	9a06      	ldr	r2, [sp, #24]
 8007c74:	1c5d      	adds	r5, r3, #1
 8007c76:	2331      	movs	r3, #49	; 0x31
 8007c78:	f10a 0a01 	add.w	sl, sl, #1
 8007c7c:	7013      	strb	r3, [r2, #0]
 8007c7e:	e228      	b.n	80080d2 <_dtoa_r+0x902>
 8007c80:	07f2      	lsls	r2, r6, #31
 8007c82:	d505      	bpl.n	8007c90 <_dtoa_r+0x4c0>
 8007c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c88:	f7f8 fc3e 	bl	8000508 <__aeabi_dmul>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	3501      	adds	r5, #1
 8007c90:	1076      	asrs	r6, r6, #1
 8007c92:	3708      	adds	r7, #8
 8007c94:	e76e      	b.n	8007b74 <_dtoa_r+0x3a4>
 8007c96:	2502      	movs	r5, #2
 8007c98:	e771      	b.n	8007b7e <_dtoa_r+0x3ae>
 8007c9a:	4657      	mov	r7, sl
 8007c9c:	4646      	mov	r6, r8
 8007c9e:	e790      	b.n	8007bc2 <_dtoa_r+0x3f2>
 8007ca0:	4b4d      	ldr	r3, [pc, #308]	; (8007dd8 <_dtoa_r+0x608>)
 8007ca2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ca6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d048      	beq.n	8007d42 <_dtoa_r+0x572>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	494e      	ldr	r1, [pc, #312]	; (8007df0 <_dtoa_r+0x620>)
 8007cb8:	f7f8 fd50 	bl	800075c <__aeabi_ddiv>
 8007cbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cc0:	f7f8 fa6a 	bl	8000198 <__aeabi_dsub>
 8007cc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007cc8:	9d06      	ldr	r5, [sp, #24]
 8007cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cce:	f7f8 fecb 	bl	8000a68 <__aeabi_d2iz>
 8007cd2:	9011      	str	r0, [sp, #68]	; 0x44
 8007cd4:	f7f8 fbae 	bl	8000434 <__aeabi_i2d>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce0:	f7f8 fa5a 	bl	8000198 <__aeabi_dsub>
 8007ce4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cea:	3330      	adds	r3, #48	; 0x30
 8007cec:	f805 3b01 	strb.w	r3, [r5], #1
 8007cf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cf4:	f7f8 fe7a 	bl	80009ec <__aeabi_dcmplt>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d163      	bne.n	8007dc4 <_dtoa_r+0x5f4>
 8007cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d00:	2000      	movs	r0, #0
 8007d02:	4937      	ldr	r1, [pc, #220]	; (8007de0 <_dtoa_r+0x610>)
 8007d04:	f7f8 fa48 	bl	8000198 <__aeabi_dsub>
 8007d08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d0c:	f7f8 fe6e 	bl	80009ec <__aeabi_dcmplt>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f040 80b5 	bne.w	8007e80 <_dtoa_r+0x6b0>
 8007d16:	9b06      	ldr	r3, [sp, #24]
 8007d18:	1aeb      	subs	r3, r5, r3
 8007d1a:	429e      	cmp	r6, r3
 8007d1c:	f77f af7c 	ble.w	8007c18 <_dtoa_r+0x448>
 8007d20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d24:	2200      	movs	r2, #0
 8007d26:	4b2f      	ldr	r3, [pc, #188]	; (8007de4 <_dtoa_r+0x614>)
 8007d28:	f7f8 fbee 	bl	8000508 <__aeabi_dmul>
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d36:	4b2b      	ldr	r3, [pc, #172]	; (8007de4 <_dtoa_r+0x614>)
 8007d38:	f7f8 fbe6 	bl	8000508 <__aeabi_dmul>
 8007d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d40:	e7c3      	b.n	8007cca <_dtoa_r+0x4fa>
 8007d42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d46:	f7f8 fbdf 	bl	8000508 <__aeabi_dmul>
 8007d4a:	9b06      	ldr	r3, [sp, #24]
 8007d4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d50:	199d      	adds	r5, r3, r6
 8007d52:	461e      	mov	r6, r3
 8007d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d58:	f7f8 fe86 	bl	8000a68 <__aeabi_d2iz>
 8007d5c:	9011      	str	r0, [sp, #68]	; 0x44
 8007d5e:	f7f8 fb69 	bl	8000434 <__aeabi_i2d>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6a:	f7f8 fa15 	bl	8000198 <__aeabi_dsub>
 8007d6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d74:	3330      	adds	r3, #48	; 0x30
 8007d76:	f806 3b01 	strb.w	r3, [r6], #1
 8007d7a:	42ae      	cmp	r6, r5
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	d124      	bne.n	8007dcc <_dtoa_r+0x5fc>
 8007d82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d86:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <_dtoa_r+0x620>)
 8007d88:	f7f8 fa08 	bl	800019c <__adddf3>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d94:	f7f8 fe48 	bl	8000a28 <__aeabi_dcmpgt>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d171      	bne.n	8007e80 <_dtoa_r+0x6b0>
 8007d9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007da0:	2000      	movs	r0, #0
 8007da2:	4913      	ldr	r1, [pc, #76]	; (8007df0 <_dtoa_r+0x620>)
 8007da4:	f7f8 f9f8 	bl	8000198 <__aeabi_dsub>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007db0:	f7f8 fe1c 	bl	80009ec <__aeabi_dcmplt>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	f43f af2f 	beq.w	8007c18 <_dtoa_r+0x448>
 8007dba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dbe:	1e6a      	subs	r2, r5, #1
 8007dc0:	2b30      	cmp	r3, #48	; 0x30
 8007dc2:	d001      	beq.n	8007dc8 <_dtoa_r+0x5f8>
 8007dc4:	46ba      	mov	sl, r7
 8007dc6:	e04a      	b.n	8007e5e <_dtoa_r+0x68e>
 8007dc8:	4615      	mov	r5, r2
 8007dca:	e7f6      	b.n	8007dba <_dtoa_r+0x5ea>
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <_dtoa_r+0x614>)
 8007dce:	f7f8 fb9b 	bl	8000508 <__aeabi_dmul>
 8007dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd6:	e7bd      	b.n	8007d54 <_dtoa_r+0x584>
 8007dd8:	080094c8 	.word	0x080094c8
 8007ddc:	080094a0 	.word	0x080094a0
 8007de0:	3ff00000 	.word	0x3ff00000
 8007de4:	40240000 	.word	0x40240000
 8007de8:	401c0000 	.word	0x401c0000
 8007dec:	40140000 	.word	0x40140000
 8007df0:	3fe00000 	.word	0x3fe00000
 8007df4:	9d06      	ldr	r5, [sp, #24]
 8007df6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	f7f8 fcab 	bl	800075c <__aeabi_ddiv>
 8007e06:	f7f8 fe2f 	bl	8000a68 <__aeabi_d2iz>
 8007e0a:	4681      	mov	r9, r0
 8007e0c:	f7f8 fb12 	bl	8000434 <__aeabi_i2d>
 8007e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e14:	f7f8 fb78 	bl	8000508 <__aeabi_dmul>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 f9ba 	bl	8000198 <__aeabi_dsub>
 8007e24:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007e28:	f805 6b01 	strb.w	r6, [r5], #1
 8007e2c:	9e06      	ldr	r6, [sp, #24]
 8007e2e:	4602      	mov	r2, r0
 8007e30:	1bae      	subs	r6, r5, r6
 8007e32:	45b0      	cmp	r8, r6
 8007e34:	460b      	mov	r3, r1
 8007e36:	d135      	bne.n	8007ea4 <_dtoa_r+0x6d4>
 8007e38:	f7f8 f9b0 	bl	800019c <__adddf3>
 8007e3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e40:	4606      	mov	r6, r0
 8007e42:	460f      	mov	r7, r1
 8007e44:	f7f8 fdf0 	bl	8000a28 <__aeabi_dcmpgt>
 8007e48:	b9c8      	cbnz	r0, 8007e7e <_dtoa_r+0x6ae>
 8007e4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e4e:	4630      	mov	r0, r6
 8007e50:	4639      	mov	r1, r7
 8007e52:	f7f8 fdc1 	bl	80009d8 <__aeabi_dcmpeq>
 8007e56:	b110      	cbz	r0, 8007e5e <_dtoa_r+0x68e>
 8007e58:	f019 0f01 	tst.w	r9, #1
 8007e5c:	d10f      	bne.n	8007e7e <_dtoa_r+0x6ae>
 8007e5e:	4659      	mov	r1, fp
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fcaa 	bl	80087ba <_Bfree>
 8007e66:	2300      	movs	r3, #0
 8007e68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e6a:	702b      	strb	r3, [r5, #0]
 8007e6c:	f10a 0301 	add.w	r3, sl, #1
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f43f acf3 	beq.w	8007860 <_dtoa_r+0x90>
 8007e7a:	601d      	str	r5, [r3, #0]
 8007e7c:	e4f0      	b.n	8007860 <_dtoa_r+0x90>
 8007e7e:	4657      	mov	r7, sl
 8007e80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e84:	1e6b      	subs	r3, r5, #1
 8007e86:	2a39      	cmp	r2, #57	; 0x39
 8007e88:	d106      	bne.n	8007e98 <_dtoa_r+0x6c8>
 8007e8a:	9a06      	ldr	r2, [sp, #24]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d107      	bne.n	8007ea0 <_dtoa_r+0x6d0>
 8007e90:	2330      	movs	r3, #48	; 0x30
 8007e92:	7013      	strb	r3, [r2, #0]
 8007e94:	4613      	mov	r3, r2
 8007e96:	3701      	adds	r7, #1
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	3201      	adds	r2, #1
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e791      	b.n	8007dc4 <_dtoa_r+0x5f4>
 8007ea0:	461d      	mov	r5, r3
 8007ea2:	e7ed      	b.n	8007e80 <_dtoa_r+0x6b0>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4b99      	ldr	r3, [pc, #612]	; (800810c <_dtoa_r+0x93c>)
 8007ea8:	f7f8 fb2e 	bl	8000508 <__aeabi_dmul>
 8007eac:	2200      	movs	r2, #0
 8007eae:	2300      	movs	r3, #0
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	460f      	mov	r7, r1
 8007eb4:	f7f8 fd90 	bl	80009d8 <__aeabi_dcmpeq>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d09e      	beq.n	8007dfa <_dtoa_r+0x62a>
 8007ebc:	e7cf      	b.n	8007e5e <_dtoa_r+0x68e>
 8007ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec0:	2a00      	cmp	r2, #0
 8007ec2:	f000 8088 	beq.w	8007fd6 <_dtoa_r+0x806>
 8007ec6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ec8:	2a01      	cmp	r2, #1
 8007eca:	dc6d      	bgt.n	8007fa8 <_dtoa_r+0x7d8>
 8007ecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ece:	2a00      	cmp	r2, #0
 8007ed0:	d066      	beq.n	8007fa0 <_dtoa_r+0x7d0>
 8007ed2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ed6:	464d      	mov	r5, r9
 8007ed8:	9e08      	ldr	r6, [sp, #32]
 8007eda:	9a07      	ldr	r2, [sp, #28]
 8007edc:	2101      	movs	r1, #1
 8007ede:	441a      	add	r2, r3
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	4499      	add	r9, r3
 8007ee4:	9207      	str	r2, [sp, #28]
 8007ee6:	f000 fd08 	bl	80088fa <__i2b>
 8007eea:	4607      	mov	r7, r0
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	dd0b      	ble.n	8007f08 <_dtoa_r+0x738>
 8007ef0:	9b07      	ldr	r3, [sp, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dd08      	ble.n	8007f08 <_dtoa_r+0x738>
 8007ef6:	42ab      	cmp	r3, r5
 8007ef8:	bfa8      	it	ge
 8007efa:	462b      	movge	r3, r5
 8007efc:	9a07      	ldr	r2, [sp, #28]
 8007efe:	eba9 0903 	sub.w	r9, r9, r3
 8007f02:	1aed      	subs	r5, r5, r3
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	9307      	str	r3, [sp, #28]
 8007f08:	9b08      	ldr	r3, [sp, #32]
 8007f0a:	b1eb      	cbz	r3, 8007f48 <_dtoa_r+0x778>
 8007f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d065      	beq.n	8007fde <_dtoa_r+0x80e>
 8007f12:	b18e      	cbz	r6, 8007f38 <_dtoa_r+0x768>
 8007f14:	4639      	mov	r1, r7
 8007f16:	4632      	mov	r2, r6
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 fd8d 	bl	8008a38 <__pow5mult>
 8007f1e:	465a      	mov	r2, fp
 8007f20:	4601      	mov	r1, r0
 8007f22:	4607      	mov	r7, r0
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fcf1 	bl	800890c <__multiply>
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	900a      	str	r0, [sp, #40]	; 0x28
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f000 fc43 	bl	80087ba <_Bfree>
 8007f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f36:	469b      	mov	fp, r3
 8007f38:	9b08      	ldr	r3, [sp, #32]
 8007f3a:	1b9a      	subs	r2, r3, r6
 8007f3c:	d004      	beq.n	8007f48 <_dtoa_r+0x778>
 8007f3e:	4659      	mov	r1, fp
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 fd79 	bl	8008a38 <__pow5mult>
 8007f46:	4683      	mov	fp, r0
 8007f48:	2101      	movs	r1, #1
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 fcd5 	bl	80088fa <__i2b>
 8007f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f52:	4606      	mov	r6, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 81c6 	beq.w	80082e6 <_dtoa_r+0xb16>
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	4601      	mov	r1, r0
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 fd6a 	bl	8008a38 <__pow5mult>
 8007f64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007f66:	4606      	mov	r6, r0
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	dc3e      	bgt.n	8007fea <_dtoa_r+0x81a>
 8007f6c:	9b02      	ldr	r3, [sp, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d137      	bne.n	8007fe2 <_dtoa_r+0x812>
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d134      	bne.n	8007fe6 <_dtoa_r+0x816>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f82:	0d1b      	lsrs	r3, r3, #20
 8007f84:	051b      	lsls	r3, r3, #20
 8007f86:	b12b      	cbz	r3, 8007f94 <_dtoa_r+0x7c4>
 8007f88:	9b07      	ldr	r3, [sp, #28]
 8007f8a:	f109 0901 	add.w	r9, r9, #1
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9307      	str	r3, [sp, #28]
 8007f92:	2301      	movs	r3, #1
 8007f94:	9308      	str	r3, [sp, #32]
 8007f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d128      	bne.n	8007fee <_dtoa_r+0x81e>
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	e02e      	b.n	8007ffe <_dtoa_r+0x82e>
 8007fa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fa2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fa6:	e796      	b.n	8007ed6 <_dtoa_r+0x706>
 8007fa8:	9b08      	ldr	r3, [sp, #32]
 8007faa:	f108 36ff 	add.w	r6, r8, #4294967295
 8007fae:	42b3      	cmp	r3, r6
 8007fb0:	bfb7      	itett	lt
 8007fb2:	9b08      	ldrlt	r3, [sp, #32]
 8007fb4:	1b9e      	subge	r6, r3, r6
 8007fb6:	1af2      	sublt	r2, r6, r3
 8007fb8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007fba:	bfbf      	itttt	lt
 8007fbc:	9608      	strlt	r6, [sp, #32]
 8007fbe:	189b      	addlt	r3, r3, r2
 8007fc0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007fc2:	2600      	movlt	r6, #0
 8007fc4:	f1b8 0f00 	cmp.w	r8, #0
 8007fc8:	bfb9      	ittee	lt
 8007fca:	eba9 0508 	sublt.w	r5, r9, r8
 8007fce:	2300      	movlt	r3, #0
 8007fd0:	464d      	movge	r5, r9
 8007fd2:	4643      	movge	r3, r8
 8007fd4:	e781      	b.n	8007eda <_dtoa_r+0x70a>
 8007fd6:	9e08      	ldr	r6, [sp, #32]
 8007fd8:	464d      	mov	r5, r9
 8007fda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007fdc:	e786      	b.n	8007eec <_dtoa_r+0x71c>
 8007fde:	9a08      	ldr	r2, [sp, #32]
 8007fe0:	e7ad      	b.n	8007f3e <_dtoa_r+0x76e>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e7d6      	b.n	8007f94 <_dtoa_r+0x7c4>
 8007fe6:	9b02      	ldr	r3, [sp, #8]
 8007fe8:	e7d4      	b.n	8007f94 <_dtoa_r+0x7c4>
 8007fea:	2300      	movs	r3, #0
 8007fec:	9308      	str	r3, [sp, #32]
 8007fee:	6933      	ldr	r3, [r6, #16]
 8007ff0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ff4:	6918      	ldr	r0, [r3, #16]
 8007ff6:	f000 fc32 	bl	800885e <__hi0bits>
 8007ffa:	f1c0 0020 	rsb	r0, r0, #32
 8007ffe:	9b07      	ldr	r3, [sp, #28]
 8008000:	4418      	add	r0, r3
 8008002:	f010 001f 	ands.w	r0, r0, #31
 8008006:	d047      	beq.n	8008098 <_dtoa_r+0x8c8>
 8008008:	f1c0 0320 	rsb	r3, r0, #32
 800800c:	2b04      	cmp	r3, #4
 800800e:	dd3b      	ble.n	8008088 <_dtoa_r+0x8b8>
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	f1c0 001c 	rsb	r0, r0, #28
 8008016:	4481      	add	r9, r0
 8008018:	4405      	add	r5, r0
 800801a:	4403      	add	r3, r0
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	f1b9 0f00 	cmp.w	r9, #0
 8008022:	dd05      	ble.n	8008030 <_dtoa_r+0x860>
 8008024:	4659      	mov	r1, fp
 8008026:	464a      	mov	r2, r9
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fd53 	bl	8008ad4 <__lshift>
 800802e:	4683      	mov	fp, r0
 8008030:	9b07      	ldr	r3, [sp, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	dd05      	ble.n	8008042 <_dtoa_r+0x872>
 8008036:	4631      	mov	r1, r6
 8008038:	461a      	mov	r2, r3
 800803a:	4620      	mov	r0, r4
 800803c:	f000 fd4a 	bl	8008ad4 <__lshift>
 8008040:	4606      	mov	r6, r0
 8008042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008044:	b353      	cbz	r3, 800809c <_dtoa_r+0x8cc>
 8008046:	4631      	mov	r1, r6
 8008048:	4658      	mov	r0, fp
 800804a:	f000 fd97 	bl	8008b7c <__mcmp>
 800804e:	2800      	cmp	r0, #0
 8008050:	da24      	bge.n	800809c <_dtoa_r+0x8cc>
 8008052:	2300      	movs	r3, #0
 8008054:	4659      	mov	r1, fp
 8008056:	220a      	movs	r2, #10
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fbc5 	bl	80087e8 <__multadd>
 800805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008060:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008064:	4683      	mov	fp, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 8144 	beq.w	80082f4 <_dtoa_r+0xb24>
 800806c:	2300      	movs	r3, #0
 800806e:	4639      	mov	r1, r7
 8008070:	220a      	movs	r2, #10
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fbb8 	bl	80087e8 <__multadd>
 8008078:	9b04      	ldr	r3, [sp, #16]
 800807a:	4607      	mov	r7, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	dc4d      	bgt.n	800811c <_dtoa_r+0x94c>
 8008080:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008082:	2b02      	cmp	r3, #2
 8008084:	dd4a      	ble.n	800811c <_dtoa_r+0x94c>
 8008086:	e011      	b.n	80080ac <_dtoa_r+0x8dc>
 8008088:	d0c9      	beq.n	800801e <_dtoa_r+0x84e>
 800808a:	9a07      	ldr	r2, [sp, #28]
 800808c:	331c      	adds	r3, #28
 800808e:	441a      	add	r2, r3
 8008090:	4499      	add	r9, r3
 8008092:	441d      	add	r5, r3
 8008094:	4613      	mov	r3, r2
 8008096:	e7c1      	b.n	800801c <_dtoa_r+0x84c>
 8008098:	4603      	mov	r3, r0
 800809a:	e7f6      	b.n	800808a <_dtoa_r+0x8ba>
 800809c:	f1b8 0f00 	cmp.w	r8, #0
 80080a0:	dc36      	bgt.n	8008110 <_dtoa_r+0x940>
 80080a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	dd33      	ble.n	8008110 <_dtoa_r+0x940>
 80080a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80080ac:	9b04      	ldr	r3, [sp, #16]
 80080ae:	b963      	cbnz	r3, 80080ca <_dtoa_r+0x8fa>
 80080b0:	4631      	mov	r1, r6
 80080b2:	2205      	movs	r2, #5
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fb97 	bl	80087e8 <__multadd>
 80080ba:	4601      	mov	r1, r0
 80080bc:	4606      	mov	r6, r0
 80080be:	4658      	mov	r0, fp
 80080c0:	f000 fd5c 	bl	8008b7c <__mcmp>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f73f add3 	bgt.w	8007c70 <_dtoa_r+0x4a0>
 80080ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080cc:	9d06      	ldr	r5, [sp, #24]
 80080ce:	ea6f 0a03 	mvn.w	sl, r3
 80080d2:	f04f 0900 	mov.w	r9, #0
 80080d6:	4631      	mov	r1, r6
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 fb6e 	bl	80087ba <_Bfree>
 80080de:	2f00      	cmp	r7, #0
 80080e0:	f43f aebd 	beq.w	8007e5e <_dtoa_r+0x68e>
 80080e4:	f1b9 0f00 	cmp.w	r9, #0
 80080e8:	d005      	beq.n	80080f6 <_dtoa_r+0x926>
 80080ea:	45b9      	cmp	r9, r7
 80080ec:	d003      	beq.n	80080f6 <_dtoa_r+0x926>
 80080ee:	4649      	mov	r1, r9
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fb62 	bl	80087ba <_Bfree>
 80080f6:	4639      	mov	r1, r7
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fb5e 	bl	80087ba <_Bfree>
 80080fe:	e6ae      	b.n	8007e5e <_dtoa_r+0x68e>
 8008100:	2600      	movs	r6, #0
 8008102:	4637      	mov	r7, r6
 8008104:	e7e1      	b.n	80080ca <_dtoa_r+0x8fa>
 8008106:	46ba      	mov	sl, r7
 8008108:	4637      	mov	r7, r6
 800810a:	e5b1      	b.n	8007c70 <_dtoa_r+0x4a0>
 800810c:	40240000 	.word	0x40240000
 8008110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008112:	f8cd 8010 	str.w	r8, [sp, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 80f3 	beq.w	8008302 <_dtoa_r+0xb32>
 800811c:	2d00      	cmp	r5, #0
 800811e:	dd05      	ble.n	800812c <_dtoa_r+0x95c>
 8008120:	4639      	mov	r1, r7
 8008122:	462a      	mov	r2, r5
 8008124:	4620      	mov	r0, r4
 8008126:	f000 fcd5 	bl	8008ad4 <__lshift>
 800812a:	4607      	mov	r7, r0
 800812c:	9b08      	ldr	r3, [sp, #32]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d04c      	beq.n	80081cc <_dtoa_r+0x9fc>
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4620      	mov	r0, r4
 8008136:	f000 fb0c 	bl	8008752 <_Balloc>
 800813a:	4605      	mov	r5, r0
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	f107 010c 	add.w	r1, r7, #12
 8008142:	3202      	adds	r2, #2
 8008144:	0092      	lsls	r2, r2, #2
 8008146:	300c      	adds	r0, #12
 8008148:	f000 faf8 	bl	800873c <memcpy>
 800814c:	2201      	movs	r2, #1
 800814e:	4629      	mov	r1, r5
 8008150:	4620      	mov	r0, r4
 8008152:	f000 fcbf 	bl	8008ad4 <__lshift>
 8008156:	46b9      	mov	r9, r7
 8008158:	4607      	mov	r7, r0
 800815a:	9b06      	ldr	r3, [sp, #24]
 800815c:	9307      	str	r3, [sp, #28]
 800815e:	9b02      	ldr	r3, [sp, #8]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	9308      	str	r3, [sp, #32]
 8008166:	4631      	mov	r1, r6
 8008168:	4658      	mov	r0, fp
 800816a:	f7ff faa3 	bl	80076b4 <quorem>
 800816e:	4649      	mov	r1, r9
 8008170:	4605      	mov	r5, r0
 8008172:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008176:	4658      	mov	r0, fp
 8008178:	f000 fd00 	bl	8008b7c <__mcmp>
 800817c:	463a      	mov	r2, r7
 800817e:	9002      	str	r0, [sp, #8]
 8008180:	4631      	mov	r1, r6
 8008182:	4620      	mov	r0, r4
 8008184:	f000 fd14 	bl	8008bb0 <__mdiff>
 8008188:	68c3      	ldr	r3, [r0, #12]
 800818a:	4602      	mov	r2, r0
 800818c:	bb03      	cbnz	r3, 80081d0 <_dtoa_r+0xa00>
 800818e:	4601      	mov	r1, r0
 8008190:	9009      	str	r0, [sp, #36]	; 0x24
 8008192:	4658      	mov	r0, fp
 8008194:	f000 fcf2 	bl	8008b7c <__mcmp>
 8008198:	4603      	mov	r3, r0
 800819a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800819c:	4611      	mov	r1, r2
 800819e:	4620      	mov	r0, r4
 80081a0:	9309      	str	r3, [sp, #36]	; 0x24
 80081a2:	f000 fb0a 	bl	80087ba <_Bfree>
 80081a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a8:	b9a3      	cbnz	r3, 80081d4 <_dtoa_r+0xa04>
 80081aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081ac:	b992      	cbnz	r2, 80081d4 <_dtoa_r+0xa04>
 80081ae:	9a08      	ldr	r2, [sp, #32]
 80081b0:	b982      	cbnz	r2, 80081d4 <_dtoa_r+0xa04>
 80081b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081b6:	d029      	beq.n	800820c <_dtoa_r+0xa3c>
 80081b8:	9b02      	ldr	r3, [sp, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	dd01      	ble.n	80081c2 <_dtoa_r+0x9f2>
 80081be:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80081c2:	9b07      	ldr	r3, [sp, #28]
 80081c4:	1c5d      	adds	r5, r3, #1
 80081c6:	f883 8000 	strb.w	r8, [r3]
 80081ca:	e784      	b.n	80080d6 <_dtoa_r+0x906>
 80081cc:	4638      	mov	r0, r7
 80081ce:	e7c2      	b.n	8008156 <_dtoa_r+0x986>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e7e3      	b.n	800819c <_dtoa_r+0x9cc>
 80081d4:	9a02      	ldr	r2, [sp, #8]
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	db04      	blt.n	80081e4 <_dtoa_r+0xa14>
 80081da:	d123      	bne.n	8008224 <_dtoa_r+0xa54>
 80081dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081de:	bb0a      	cbnz	r2, 8008224 <_dtoa_r+0xa54>
 80081e0:	9a08      	ldr	r2, [sp, #32]
 80081e2:	b9fa      	cbnz	r2, 8008224 <_dtoa_r+0xa54>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	ddec      	ble.n	80081c2 <_dtoa_r+0x9f2>
 80081e8:	4659      	mov	r1, fp
 80081ea:	2201      	movs	r2, #1
 80081ec:	4620      	mov	r0, r4
 80081ee:	f000 fc71 	bl	8008ad4 <__lshift>
 80081f2:	4631      	mov	r1, r6
 80081f4:	4683      	mov	fp, r0
 80081f6:	f000 fcc1 	bl	8008b7c <__mcmp>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	dc03      	bgt.n	8008206 <_dtoa_r+0xa36>
 80081fe:	d1e0      	bne.n	80081c2 <_dtoa_r+0x9f2>
 8008200:	f018 0f01 	tst.w	r8, #1
 8008204:	d0dd      	beq.n	80081c2 <_dtoa_r+0x9f2>
 8008206:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800820a:	d1d8      	bne.n	80081be <_dtoa_r+0x9ee>
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	9a07      	ldr	r2, [sp, #28]
 8008210:	1c5d      	adds	r5, r3, #1
 8008212:	2339      	movs	r3, #57	; 0x39
 8008214:	7013      	strb	r3, [r2, #0]
 8008216:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800821a:	1e6a      	subs	r2, r5, #1
 800821c:	2b39      	cmp	r3, #57	; 0x39
 800821e:	d04d      	beq.n	80082bc <_dtoa_r+0xaec>
 8008220:	3301      	adds	r3, #1
 8008222:	e052      	b.n	80082ca <_dtoa_r+0xafa>
 8008224:	9a07      	ldr	r2, [sp, #28]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f102 0501 	add.w	r5, r2, #1
 800822c:	dd06      	ble.n	800823c <_dtoa_r+0xa6c>
 800822e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008232:	d0eb      	beq.n	800820c <_dtoa_r+0xa3c>
 8008234:	f108 0801 	add.w	r8, r8, #1
 8008238:	9b07      	ldr	r3, [sp, #28]
 800823a:	e7c4      	b.n	80081c6 <_dtoa_r+0x9f6>
 800823c:	9b06      	ldr	r3, [sp, #24]
 800823e:	9a04      	ldr	r2, [sp, #16]
 8008240:	1aeb      	subs	r3, r5, r3
 8008242:	4293      	cmp	r3, r2
 8008244:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008248:	d021      	beq.n	800828e <_dtoa_r+0xabe>
 800824a:	4659      	mov	r1, fp
 800824c:	2300      	movs	r3, #0
 800824e:	220a      	movs	r2, #10
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fac9 	bl	80087e8 <__multadd>
 8008256:	45b9      	cmp	r9, r7
 8008258:	4683      	mov	fp, r0
 800825a:	f04f 0300 	mov.w	r3, #0
 800825e:	f04f 020a 	mov.w	r2, #10
 8008262:	4649      	mov	r1, r9
 8008264:	4620      	mov	r0, r4
 8008266:	d105      	bne.n	8008274 <_dtoa_r+0xaa4>
 8008268:	f000 fabe 	bl	80087e8 <__multadd>
 800826c:	4681      	mov	r9, r0
 800826e:	4607      	mov	r7, r0
 8008270:	9507      	str	r5, [sp, #28]
 8008272:	e778      	b.n	8008166 <_dtoa_r+0x996>
 8008274:	f000 fab8 	bl	80087e8 <__multadd>
 8008278:	4639      	mov	r1, r7
 800827a:	4681      	mov	r9, r0
 800827c:	2300      	movs	r3, #0
 800827e:	220a      	movs	r2, #10
 8008280:	4620      	mov	r0, r4
 8008282:	f000 fab1 	bl	80087e8 <__multadd>
 8008286:	4607      	mov	r7, r0
 8008288:	e7f2      	b.n	8008270 <_dtoa_r+0xaa0>
 800828a:	f04f 0900 	mov.w	r9, #0
 800828e:	4659      	mov	r1, fp
 8008290:	2201      	movs	r2, #1
 8008292:	4620      	mov	r0, r4
 8008294:	f000 fc1e 	bl	8008ad4 <__lshift>
 8008298:	4631      	mov	r1, r6
 800829a:	4683      	mov	fp, r0
 800829c:	f000 fc6e 	bl	8008b7c <__mcmp>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	dcb8      	bgt.n	8008216 <_dtoa_r+0xa46>
 80082a4:	d102      	bne.n	80082ac <_dtoa_r+0xadc>
 80082a6:	f018 0f01 	tst.w	r8, #1
 80082aa:	d1b4      	bne.n	8008216 <_dtoa_r+0xa46>
 80082ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082b0:	1e6a      	subs	r2, r5, #1
 80082b2:	2b30      	cmp	r3, #48	; 0x30
 80082b4:	f47f af0f 	bne.w	80080d6 <_dtoa_r+0x906>
 80082b8:	4615      	mov	r5, r2
 80082ba:	e7f7      	b.n	80082ac <_dtoa_r+0xadc>
 80082bc:	9b06      	ldr	r3, [sp, #24]
 80082be:	4293      	cmp	r3, r2
 80082c0:	d105      	bne.n	80082ce <_dtoa_r+0xafe>
 80082c2:	2331      	movs	r3, #49	; 0x31
 80082c4:	9a06      	ldr	r2, [sp, #24]
 80082c6:	f10a 0a01 	add.w	sl, sl, #1
 80082ca:	7013      	strb	r3, [r2, #0]
 80082cc:	e703      	b.n	80080d6 <_dtoa_r+0x906>
 80082ce:	4615      	mov	r5, r2
 80082d0:	e7a1      	b.n	8008216 <_dtoa_r+0xa46>
 80082d2:	4b17      	ldr	r3, [pc, #92]	; (8008330 <_dtoa_r+0xb60>)
 80082d4:	f7ff bae1 	b.w	800789a <_dtoa_r+0xca>
 80082d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f47f aabb 	bne.w	8007856 <_dtoa_r+0x86>
 80082e0:	4b14      	ldr	r3, [pc, #80]	; (8008334 <_dtoa_r+0xb64>)
 80082e2:	f7ff bada 	b.w	800789a <_dtoa_r+0xca>
 80082e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	f77f ae3f 	ble.w	8007f6c <_dtoa_r+0x79c>
 80082ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082f0:	9308      	str	r3, [sp, #32]
 80082f2:	e653      	b.n	8007f9c <_dtoa_r+0x7cc>
 80082f4:	9b04      	ldr	r3, [sp, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	dc03      	bgt.n	8008302 <_dtoa_r+0xb32>
 80082fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	f73f aed5 	bgt.w	80080ac <_dtoa_r+0x8dc>
 8008302:	9d06      	ldr	r5, [sp, #24]
 8008304:	4631      	mov	r1, r6
 8008306:	4658      	mov	r0, fp
 8008308:	f7ff f9d4 	bl	80076b4 <quorem>
 800830c:	9b06      	ldr	r3, [sp, #24]
 800830e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008312:	f805 8b01 	strb.w	r8, [r5], #1
 8008316:	9a04      	ldr	r2, [sp, #16]
 8008318:	1aeb      	subs	r3, r5, r3
 800831a:	429a      	cmp	r2, r3
 800831c:	ddb5      	ble.n	800828a <_dtoa_r+0xaba>
 800831e:	4659      	mov	r1, fp
 8008320:	2300      	movs	r3, #0
 8008322:	220a      	movs	r2, #10
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fa5f 	bl	80087e8 <__multadd>
 800832a:	4683      	mov	fp, r0
 800832c:	e7ea      	b.n	8008304 <_dtoa_r+0xb34>
 800832e:	bf00      	nop
 8008330:	0800940c 	.word	0x0800940c
 8008334:	08009430 	.word	0x08009430

08008338 <__sflush_r>:
 8008338:	898a      	ldrh	r2, [r1, #12]
 800833a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833e:	4605      	mov	r5, r0
 8008340:	0710      	lsls	r0, r2, #28
 8008342:	460c      	mov	r4, r1
 8008344:	d458      	bmi.n	80083f8 <__sflush_r+0xc0>
 8008346:	684b      	ldr	r3, [r1, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	dc05      	bgt.n	8008358 <__sflush_r+0x20>
 800834c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	dc02      	bgt.n	8008358 <__sflush_r+0x20>
 8008352:	2000      	movs	r0, #0
 8008354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800835a:	2e00      	cmp	r6, #0
 800835c:	d0f9      	beq.n	8008352 <__sflush_r+0x1a>
 800835e:	2300      	movs	r3, #0
 8008360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008364:	682f      	ldr	r7, [r5, #0]
 8008366:	6a21      	ldr	r1, [r4, #32]
 8008368:	602b      	str	r3, [r5, #0]
 800836a:	d032      	beq.n	80083d2 <__sflush_r+0x9a>
 800836c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	075a      	lsls	r2, r3, #29
 8008372:	d505      	bpl.n	8008380 <__sflush_r+0x48>
 8008374:	6863      	ldr	r3, [r4, #4]
 8008376:	1ac0      	subs	r0, r0, r3
 8008378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800837a:	b10b      	cbz	r3, 8008380 <__sflush_r+0x48>
 800837c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800837e:	1ac0      	subs	r0, r0, r3
 8008380:	2300      	movs	r3, #0
 8008382:	4602      	mov	r2, r0
 8008384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008386:	6a21      	ldr	r1, [r4, #32]
 8008388:	4628      	mov	r0, r5
 800838a:	47b0      	blx	r6
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	d106      	bne.n	80083a0 <__sflush_r+0x68>
 8008392:	6829      	ldr	r1, [r5, #0]
 8008394:	291d      	cmp	r1, #29
 8008396:	d848      	bhi.n	800842a <__sflush_r+0xf2>
 8008398:	4a29      	ldr	r2, [pc, #164]	; (8008440 <__sflush_r+0x108>)
 800839a:	40ca      	lsrs	r2, r1
 800839c:	07d6      	lsls	r6, r2, #31
 800839e:	d544      	bpl.n	800842a <__sflush_r+0xf2>
 80083a0:	2200      	movs	r2, #0
 80083a2:	6062      	str	r2, [r4, #4]
 80083a4:	6922      	ldr	r2, [r4, #16]
 80083a6:	04d9      	lsls	r1, r3, #19
 80083a8:	6022      	str	r2, [r4, #0]
 80083aa:	d504      	bpl.n	80083b6 <__sflush_r+0x7e>
 80083ac:	1c42      	adds	r2, r0, #1
 80083ae:	d101      	bne.n	80083b4 <__sflush_r+0x7c>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b903      	cbnz	r3, 80083b6 <__sflush_r+0x7e>
 80083b4:	6560      	str	r0, [r4, #84]	; 0x54
 80083b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083b8:	602f      	str	r7, [r5, #0]
 80083ba:	2900      	cmp	r1, #0
 80083bc:	d0c9      	beq.n	8008352 <__sflush_r+0x1a>
 80083be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c2:	4299      	cmp	r1, r3
 80083c4:	d002      	beq.n	80083cc <__sflush_r+0x94>
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 fcae 	bl	8008d28 <_free_r>
 80083cc:	2000      	movs	r0, #0
 80083ce:	6360      	str	r0, [r4, #52]	; 0x34
 80083d0:	e7c0      	b.n	8008354 <__sflush_r+0x1c>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b0      	blx	r6
 80083d8:	1c41      	adds	r1, r0, #1
 80083da:	d1c8      	bne.n	800836e <__sflush_r+0x36>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0c5      	beq.n	800836e <__sflush_r+0x36>
 80083e2:	2b1d      	cmp	r3, #29
 80083e4:	d001      	beq.n	80083ea <__sflush_r+0xb2>
 80083e6:	2b16      	cmp	r3, #22
 80083e8:	d101      	bne.n	80083ee <__sflush_r+0xb6>
 80083ea:	602f      	str	r7, [r5, #0]
 80083ec:	e7b1      	b.n	8008352 <__sflush_r+0x1a>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	e7ad      	b.n	8008354 <__sflush_r+0x1c>
 80083f8:	690f      	ldr	r7, [r1, #16]
 80083fa:	2f00      	cmp	r7, #0
 80083fc:	d0a9      	beq.n	8008352 <__sflush_r+0x1a>
 80083fe:	0793      	lsls	r3, r2, #30
 8008400:	bf18      	it	ne
 8008402:	2300      	movne	r3, #0
 8008404:	680e      	ldr	r6, [r1, #0]
 8008406:	bf08      	it	eq
 8008408:	694b      	ldreq	r3, [r1, #20]
 800840a:	eba6 0807 	sub.w	r8, r6, r7
 800840e:	600f      	str	r7, [r1, #0]
 8008410:	608b      	str	r3, [r1, #8]
 8008412:	f1b8 0f00 	cmp.w	r8, #0
 8008416:	dd9c      	ble.n	8008352 <__sflush_r+0x1a>
 8008418:	4643      	mov	r3, r8
 800841a:	463a      	mov	r2, r7
 800841c:	6a21      	ldr	r1, [r4, #32]
 800841e:	4628      	mov	r0, r5
 8008420:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008422:	47b0      	blx	r6
 8008424:	2800      	cmp	r0, #0
 8008426:	dc06      	bgt.n	8008436 <__sflush_r+0xfe>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	e78e      	b.n	8008354 <__sflush_r+0x1c>
 8008436:	4407      	add	r7, r0
 8008438:	eba8 0800 	sub.w	r8, r8, r0
 800843c:	e7e9      	b.n	8008412 <__sflush_r+0xda>
 800843e:	bf00      	nop
 8008440:	20400001 	.word	0x20400001

08008444 <_fflush_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	690b      	ldr	r3, [r1, #16]
 8008448:	4605      	mov	r5, r0
 800844a:	460c      	mov	r4, r1
 800844c:	b1db      	cbz	r3, 8008486 <_fflush_r+0x42>
 800844e:	b118      	cbz	r0, 8008458 <_fflush_r+0x14>
 8008450:	6983      	ldr	r3, [r0, #24]
 8008452:	b90b      	cbnz	r3, 8008458 <_fflush_r+0x14>
 8008454:	f000 f860 	bl	8008518 <__sinit>
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <_fflush_r+0x48>)
 800845a:	429c      	cmp	r4, r3
 800845c:	d109      	bne.n	8008472 <_fflush_r+0x2e>
 800845e:	686c      	ldr	r4, [r5, #4]
 8008460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008464:	b17b      	cbz	r3, 8008486 <_fflush_r+0x42>
 8008466:	4621      	mov	r1, r4
 8008468:	4628      	mov	r0, r5
 800846a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800846e:	f7ff bf63 	b.w	8008338 <__sflush_r>
 8008472:	4b07      	ldr	r3, [pc, #28]	; (8008490 <_fflush_r+0x4c>)
 8008474:	429c      	cmp	r4, r3
 8008476:	d101      	bne.n	800847c <_fflush_r+0x38>
 8008478:	68ac      	ldr	r4, [r5, #8]
 800847a:	e7f1      	b.n	8008460 <_fflush_r+0x1c>
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <_fflush_r+0x50>)
 800847e:	429c      	cmp	r4, r3
 8008480:	bf08      	it	eq
 8008482:	68ec      	ldreq	r4, [r5, #12]
 8008484:	e7ec      	b.n	8008460 <_fflush_r+0x1c>
 8008486:	2000      	movs	r0, #0
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	08009460 	.word	0x08009460
 8008490:	08009480 	.word	0x08009480
 8008494:	08009440 	.word	0x08009440

08008498 <std>:
 8008498:	2300      	movs	r3, #0
 800849a:	b510      	push	{r4, lr}
 800849c:	4604      	mov	r4, r0
 800849e:	e9c0 3300 	strd	r3, r3, [r0]
 80084a2:	6083      	str	r3, [r0, #8]
 80084a4:	8181      	strh	r1, [r0, #12]
 80084a6:	6643      	str	r3, [r0, #100]	; 0x64
 80084a8:	81c2      	strh	r2, [r0, #14]
 80084aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ae:	6183      	str	r3, [r0, #24]
 80084b0:	4619      	mov	r1, r3
 80084b2:	2208      	movs	r2, #8
 80084b4:	305c      	adds	r0, #92	; 0x5c
 80084b6:	f7fe fb69 	bl	8006b8c <memset>
 80084ba:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <std+0x38>)
 80084bc:	6224      	str	r4, [r4, #32]
 80084be:	6263      	str	r3, [r4, #36]	; 0x24
 80084c0:	4b04      	ldr	r3, [pc, #16]	; (80084d4 <std+0x3c>)
 80084c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80084c4:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <std+0x40>)
 80084c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084c8:	4b04      	ldr	r3, [pc, #16]	; (80084dc <std+0x44>)
 80084ca:	6323      	str	r3, [r4, #48]	; 0x30
 80084cc:	bd10      	pop	{r4, pc}
 80084ce:	bf00      	nop
 80084d0:	08009111 	.word	0x08009111
 80084d4:	08009133 	.word	0x08009133
 80084d8:	0800916b 	.word	0x0800916b
 80084dc:	0800918f 	.word	0x0800918f

080084e0 <_cleanup_r>:
 80084e0:	4901      	ldr	r1, [pc, #4]	; (80084e8 <_cleanup_r+0x8>)
 80084e2:	f000 b885 	b.w	80085f0 <_fwalk_reent>
 80084e6:	bf00      	nop
 80084e8:	08008445 	.word	0x08008445

080084ec <__sfmoreglue>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	2568      	movs	r5, #104	; 0x68
 80084f0:	1e4a      	subs	r2, r1, #1
 80084f2:	4355      	muls	r5, r2
 80084f4:	460e      	mov	r6, r1
 80084f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084fa:	f000 fc61 	bl	8008dc0 <_malloc_r>
 80084fe:	4604      	mov	r4, r0
 8008500:	b140      	cbz	r0, 8008514 <__sfmoreglue+0x28>
 8008502:	2100      	movs	r1, #0
 8008504:	e9c0 1600 	strd	r1, r6, [r0]
 8008508:	300c      	adds	r0, #12
 800850a:	60a0      	str	r0, [r4, #8]
 800850c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008510:	f7fe fb3c 	bl	8006b8c <memset>
 8008514:	4620      	mov	r0, r4
 8008516:	bd70      	pop	{r4, r5, r6, pc}

08008518 <__sinit>:
 8008518:	6983      	ldr	r3, [r0, #24]
 800851a:	b510      	push	{r4, lr}
 800851c:	4604      	mov	r4, r0
 800851e:	bb33      	cbnz	r3, 800856e <__sinit+0x56>
 8008520:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008524:	6503      	str	r3, [r0, #80]	; 0x50
 8008526:	4b12      	ldr	r3, [pc, #72]	; (8008570 <__sinit+0x58>)
 8008528:	4a12      	ldr	r2, [pc, #72]	; (8008574 <__sinit+0x5c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6282      	str	r2, [r0, #40]	; 0x28
 800852e:	4298      	cmp	r0, r3
 8008530:	bf04      	itt	eq
 8008532:	2301      	moveq	r3, #1
 8008534:	6183      	streq	r3, [r0, #24]
 8008536:	f000 f81f 	bl	8008578 <__sfp>
 800853a:	6060      	str	r0, [r4, #4]
 800853c:	4620      	mov	r0, r4
 800853e:	f000 f81b 	bl	8008578 <__sfp>
 8008542:	60a0      	str	r0, [r4, #8]
 8008544:	4620      	mov	r0, r4
 8008546:	f000 f817 	bl	8008578 <__sfp>
 800854a:	2200      	movs	r2, #0
 800854c:	60e0      	str	r0, [r4, #12]
 800854e:	2104      	movs	r1, #4
 8008550:	6860      	ldr	r0, [r4, #4]
 8008552:	f7ff ffa1 	bl	8008498 <std>
 8008556:	2201      	movs	r2, #1
 8008558:	2109      	movs	r1, #9
 800855a:	68a0      	ldr	r0, [r4, #8]
 800855c:	f7ff ff9c 	bl	8008498 <std>
 8008560:	2202      	movs	r2, #2
 8008562:	2112      	movs	r1, #18
 8008564:	68e0      	ldr	r0, [r4, #12]
 8008566:	f7ff ff97 	bl	8008498 <std>
 800856a:	2301      	movs	r3, #1
 800856c:	61a3      	str	r3, [r4, #24]
 800856e:	bd10      	pop	{r4, pc}
 8008570:	080093f8 	.word	0x080093f8
 8008574:	080084e1 	.word	0x080084e1

08008578 <__sfp>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	4b1b      	ldr	r3, [pc, #108]	; (80085e8 <__sfp+0x70>)
 800857c:	4607      	mov	r7, r0
 800857e:	681e      	ldr	r6, [r3, #0]
 8008580:	69b3      	ldr	r3, [r6, #24]
 8008582:	b913      	cbnz	r3, 800858a <__sfp+0x12>
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff ffc7 	bl	8008518 <__sinit>
 800858a:	3648      	adds	r6, #72	; 0x48
 800858c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008590:	3b01      	subs	r3, #1
 8008592:	d503      	bpl.n	800859c <__sfp+0x24>
 8008594:	6833      	ldr	r3, [r6, #0]
 8008596:	b133      	cbz	r3, 80085a6 <__sfp+0x2e>
 8008598:	6836      	ldr	r6, [r6, #0]
 800859a:	e7f7      	b.n	800858c <__sfp+0x14>
 800859c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085a0:	b16d      	cbz	r5, 80085be <__sfp+0x46>
 80085a2:	3468      	adds	r4, #104	; 0x68
 80085a4:	e7f4      	b.n	8008590 <__sfp+0x18>
 80085a6:	2104      	movs	r1, #4
 80085a8:	4638      	mov	r0, r7
 80085aa:	f7ff ff9f 	bl	80084ec <__sfmoreglue>
 80085ae:	6030      	str	r0, [r6, #0]
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d1f1      	bne.n	8008598 <__sfp+0x20>
 80085b4:	230c      	movs	r3, #12
 80085b6:	4604      	mov	r4, r0
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	4620      	mov	r0, r4
 80085bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085be:	4b0b      	ldr	r3, [pc, #44]	; (80085ec <__sfp+0x74>)
 80085c0:	6665      	str	r5, [r4, #100]	; 0x64
 80085c2:	e9c4 5500 	strd	r5, r5, [r4]
 80085c6:	60a5      	str	r5, [r4, #8]
 80085c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80085cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80085d0:	2208      	movs	r2, #8
 80085d2:	4629      	mov	r1, r5
 80085d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085d8:	f7fe fad8 	bl	8006b8c <memset>
 80085dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085e4:	e7e9      	b.n	80085ba <__sfp+0x42>
 80085e6:	bf00      	nop
 80085e8:	080093f8 	.word	0x080093f8
 80085ec:	ffff0001 	.word	0xffff0001

080085f0 <_fwalk_reent>:
 80085f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f4:	4680      	mov	r8, r0
 80085f6:	4689      	mov	r9, r1
 80085f8:	2600      	movs	r6, #0
 80085fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085fe:	b914      	cbnz	r4, 8008606 <_fwalk_reent+0x16>
 8008600:	4630      	mov	r0, r6
 8008602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008606:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800860a:	3f01      	subs	r7, #1
 800860c:	d501      	bpl.n	8008612 <_fwalk_reent+0x22>
 800860e:	6824      	ldr	r4, [r4, #0]
 8008610:	e7f5      	b.n	80085fe <_fwalk_reent+0xe>
 8008612:	89ab      	ldrh	r3, [r5, #12]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d907      	bls.n	8008628 <_fwalk_reent+0x38>
 8008618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800861c:	3301      	adds	r3, #1
 800861e:	d003      	beq.n	8008628 <_fwalk_reent+0x38>
 8008620:	4629      	mov	r1, r5
 8008622:	4640      	mov	r0, r8
 8008624:	47c8      	blx	r9
 8008626:	4306      	orrs	r6, r0
 8008628:	3568      	adds	r5, #104	; 0x68
 800862a:	e7ee      	b.n	800860a <_fwalk_reent+0x1a>

0800862c <_localeconv_r>:
 800862c:	4b04      	ldr	r3, [pc, #16]	; (8008640 <_localeconv_r+0x14>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6a18      	ldr	r0, [r3, #32]
 8008632:	4b04      	ldr	r3, [pc, #16]	; (8008644 <_localeconv_r+0x18>)
 8008634:	2800      	cmp	r0, #0
 8008636:	bf08      	it	eq
 8008638:	4618      	moveq	r0, r3
 800863a:	30f0      	adds	r0, #240	; 0xf0
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	2000006c 	.word	0x2000006c
 8008644:	200000d0 	.word	0x200000d0

08008648 <__swhatbuf_r>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	460e      	mov	r6, r1
 800864c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008650:	b096      	sub	sp, #88	; 0x58
 8008652:	2900      	cmp	r1, #0
 8008654:	4614      	mov	r4, r2
 8008656:	461d      	mov	r5, r3
 8008658:	da07      	bge.n	800866a <__swhatbuf_r+0x22>
 800865a:	2300      	movs	r3, #0
 800865c:	602b      	str	r3, [r5, #0]
 800865e:	89b3      	ldrh	r3, [r6, #12]
 8008660:	061a      	lsls	r2, r3, #24
 8008662:	d410      	bmi.n	8008686 <__swhatbuf_r+0x3e>
 8008664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008668:	e00e      	b.n	8008688 <__swhatbuf_r+0x40>
 800866a:	466a      	mov	r2, sp
 800866c:	f000 fdb6 	bl	80091dc <_fstat_r>
 8008670:	2800      	cmp	r0, #0
 8008672:	dbf2      	blt.n	800865a <__swhatbuf_r+0x12>
 8008674:	9a01      	ldr	r2, [sp, #4]
 8008676:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800867a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800867e:	425a      	negs	r2, r3
 8008680:	415a      	adcs	r2, r3
 8008682:	602a      	str	r2, [r5, #0]
 8008684:	e7ee      	b.n	8008664 <__swhatbuf_r+0x1c>
 8008686:	2340      	movs	r3, #64	; 0x40
 8008688:	2000      	movs	r0, #0
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	b016      	add	sp, #88	; 0x58
 800868e:	bd70      	pop	{r4, r5, r6, pc}

08008690 <__smakebuf_r>:
 8008690:	898b      	ldrh	r3, [r1, #12]
 8008692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008694:	079d      	lsls	r5, r3, #30
 8008696:	4606      	mov	r6, r0
 8008698:	460c      	mov	r4, r1
 800869a:	d507      	bpl.n	80086ac <__smakebuf_r+0x1c>
 800869c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	6123      	str	r3, [r4, #16]
 80086a4:	2301      	movs	r3, #1
 80086a6:	6163      	str	r3, [r4, #20]
 80086a8:	b002      	add	sp, #8
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	ab01      	add	r3, sp, #4
 80086ae:	466a      	mov	r2, sp
 80086b0:	f7ff ffca 	bl	8008648 <__swhatbuf_r>
 80086b4:	9900      	ldr	r1, [sp, #0]
 80086b6:	4605      	mov	r5, r0
 80086b8:	4630      	mov	r0, r6
 80086ba:	f000 fb81 	bl	8008dc0 <_malloc_r>
 80086be:	b948      	cbnz	r0, 80086d4 <__smakebuf_r+0x44>
 80086c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c4:	059a      	lsls	r2, r3, #22
 80086c6:	d4ef      	bmi.n	80086a8 <__smakebuf_r+0x18>
 80086c8:	f023 0303 	bic.w	r3, r3, #3
 80086cc:	f043 0302 	orr.w	r3, r3, #2
 80086d0:	81a3      	strh	r3, [r4, #12]
 80086d2:	e7e3      	b.n	800869c <__smakebuf_r+0xc>
 80086d4:	4b0d      	ldr	r3, [pc, #52]	; (800870c <__smakebuf_r+0x7c>)
 80086d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	6020      	str	r0, [r4, #0]
 80086dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e0:	81a3      	strh	r3, [r4, #12]
 80086e2:	9b00      	ldr	r3, [sp, #0]
 80086e4:	6120      	str	r0, [r4, #16]
 80086e6:	6163      	str	r3, [r4, #20]
 80086e8:	9b01      	ldr	r3, [sp, #4]
 80086ea:	b15b      	cbz	r3, 8008704 <__smakebuf_r+0x74>
 80086ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086f0:	4630      	mov	r0, r6
 80086f2:	f000 fd85 	bl	8009200 <_isatty_r>
 80086f6:	b128      	cbz	r0, 8008704 <__smakebuf_r+0x74>
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	f023 0303 	bic.w	r3, r3, #3
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	431d      	orrs	r5, r3
 8008708:	81a5      	strh	r5, [r4, #12]
 800870a:	e7cd      	b.n	80086a8 <__smakebuf_r+0x18>
 800870c:	080084e1 	.word	0x080084e1

08008710 <malloc>:
 8008710:	4b02      	ldr	r3, [pc, #8]	; (800871c <malloc+0xc>)
 8008712:	4601      	mov	r1, r0
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	f000 bb53 	b.w	8008dc0 <_malloc_r>
 800871a:	bf00      	nop
 800871c:	2000006c 	.word	0x2000006c

08008720 <memchr>:
 8008720:	b510      	push	{r4, lr}
 8008722:	b2c9      	uxtb	r1, r1
 8008724:	4402      	add	r2, r0
 8008726:	4290      	cmp	r0, r2
 8008728:	4603      	mov	r3, r0
 800872a:	d101      	bne.n	8008730 <memchr+0x10>
 800872c:	2300      	movs	r3, #0
 800872e:	e003      	b.n	8008738 <memchr+0x18>
 8008730:	781c      	ldrb	r4, [r3, #0]
 8008732:	3001      	adds	r0, #1
 8008734:	428c      	cmp	r4, r1
 8008736:	d1f6      	bne.n	8008726 <memchr+0x6>
 8008738:	4618      	mov	r0, r3
 800873a:	bd10      	pop	{r4, pc}

0800873c <memcpy>:
 800873c:	b510      	push	{r4, lr}
 800873e:	1e43      	subs	r3, r0, #1
 8008740:	440a      	add	r2, r1
 8008742:	4291      	cmp	r1, r2
 8008744:	d100      	bne.n	8008748 <memcpy+0xc>
 8008746:	bd10      	pop	{r4, pc}
 8008748:	f811 4b01 	ldrb.w	r4, [r1], #1
 800874c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008750:	e7f7      	b.n	8008742 <memcpy+0x6>

08008752 <_Balloc>:
 8008752:	b570      	push	{r4, r5, r6, lr}
 8008754:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008756:	4604      	mov	r4, r0
 8008758:	460e      	mov	r6, r1
 800875a:	b93d      	cbnz	r5, 800876c <_Balloc+0x1a>
 800875c:	2010      	movs	r0, #16
 800875e:	f7ff ffd7 	bl	8008710 <malloc>
 8008762:	6260      	str	r0, [r4, #36]	; 0x24
 8008764:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008768:	6005      	str	r5, [r0, #0]
 800876a:	60c5      	str	r5, [r0, #12]
 800876c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800876e:	68eb      	ldr	r3, [r5, #12]
 8008770:	b183      	cbz	r3, 8008794 <_Balloc+0x42>
 8008772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800877a:	b9b8      	cbnz	r0, 80087ac <_Balloc+0x5a>
 800877c:	2101      	movs	r1, #1
 800877e:	fa01 f506 	lsl.w	r5, r1, r6
 8008782:	1d6a      	adds	r2, r5, #5
 8008784:	0092      	lsls	r2, r2, #2
 8008786:	4620      	mov	r0, r4
 8008788:	f000 fabf 	bl	8008d0a <_calloc_r>
 800878c:	b160      	cbz	r0, 80087a8 <_Balloc+0x56>
 800878e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008792:	e00e      	b.n	80087b2 <_Balloc+0x60>
 8008794:	2221      	movs	r2, #33	; 0x21
 8008796:	2104      	movs	r1, #4
 8008798:	4620      	mov	r0, r4
 800879a:	f000 fab6 	bl	8008d0a <_calloc_r>
 800879e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087a0:	60e8      	str	r0, [r5, #12]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e4      	bne.n	8008772 <_Balloc+0x20>
 80087a8:	2000      	movs	r0, #0
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	6802      	ldr	r2, [r0, #0]
 80087ae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80087b2:	2300      	movs	r3, #0
 80087b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087b8:	e7f7      	b.n	80087aa <_Balloc+0x58>

080087ba <_Bfree>:
 80087ba:	b570      	push	{r4, r5, r6, lr}
 80087bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80087be:	4606      	mov	r6, r0
 80087c0:	460d      	mov	r5, r1
 80087c2:	b93c      	cbnz	r4, 80087d4 <_Bfree+0x1a>
 80087c4:	2010      	movs	r0, #16
 80087c6:	f7ff ffa3 	bl	8008710 <malloc>
 80087ca:	6270      	str	r0, [r6, #36]	; 0x24
 80087cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087d0:	6004      	str	r4, [r0, #0]
 80087d2:	60c4      	str	r4, [r0, #12]
 80087d4:	b13d      	cbz	r5, 80087e6 <_Bfree+0x2c>
 80087d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80087d8:	686a      	ldr	r2, [r5, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087e0:	6029      	str	r1, [r5, #0]
 80087e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80087e6:	bd70      	pop	{r4, r5, r6, pc}

080087e8 <__multadd>:
 80087e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ec:	461f      	mov	r7, r3
 80087ee:	4606      	mov	r6, r0
 80087f0:	460c      	mov	r4, r1
 80087f2:	2300      	movs	r3, #0
 80087f4:	690d      	ldr	r5, [r1, #16]
 80087f6:	f101 0c14 	add.w	ip, r1, #20
 80087fa:	f8dc 0000 	ldr.w	r0, [ip]
 80087fe:	3301      	adds	r3, #1
 8008800:	b281      	uxth	r1, r0
 8008802:	fb02 7101 	mla	r1, r2, r1, r7
 8008806:	0c00      	lsrs	r0, r0, #16
 8008808:	0c0f      	lsrs	r7, r1, #16
 800880a:	fb02 7000 	mla	r0, r2, r0, r7
 800880e:	b289      	uxth	r1, r1
 8008810:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008814:	429d      	cmp	r5, r3
 8008816:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800881a:	f84c 1b04 	str.w	r1, [ip], #4
 800881e:	dcec      	bgt.n	80087fa <__multadd+0x12>
 8008820:	b1d7      	cbz	r7, 8008858 <__multadd+0x70>
 8008822:	68a3      	ldr	r3, [r4, #8]
 8008824:	42ab      	cmp	r3, r5
 8008826:	dc12      	bgt.n	800884e <__multadd+0x66>
 8008828:	6861      	ldr	r1, [r4, #4]
 800882a:	4630      	mov	r0, r6
 800882c:	3101      	adds	r1, #1
 800882e:	f7ff ff90 	bl	8008752 <_Balloc>
 8008832:	4680      	mov	r8, r0
 8008834:	6922      	ldr	r2, [r4, #16]
 8008836:	f104 010c 	add.w	r1, r4, #12
 800883a:	3202      	adds	r2, #2
 800883c:	0092      	lsls	r2, r2, #2
 800883e:	300c      	adds	r0, #12
 8008840:	f7ff ff7c 	bl	800873c <memcpy>
 8008844:	4621      	mov	r1, r4
 8008846:	4630      	mov	r0, r6
 8008848:	f7ff ffb7 	bl	80087ba <_Bfree>
 800884c:	4644      	mov	r4, r8
 800884e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008852:	3501      	adds	r5, #1
 8008854:	615f      	str	r7, [r3, #20]
 8008856:	6125      	str	r5, [r4, #16]
 8008858:	4620      	mov	r0, r4
 800885a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800885e <__hi0bits>:
 800885e:	0c02      	lsrs	r2, r0, #16
 8008860:	0412      	lsls	r2, r2, #16
 8008862:	4603      	mov	r3, r0
 8008864:	b9b2      	cbnz	r2, 8008894 <__hi0bits+0x36>
 8008866:	0403      	lsls	r3, r0, #16
 8008868:	2010      	movs	r0, #16
 800886a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800886e:	bf04      	itt	eq
 8008870:	021b      	lsleq	r3, r3, #8
 8008872:	3008      	addeq	r0, #8
 8008874:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008878:	bf04      	itt	eq
 800887a:	011b      	lsleq	r3, r3, #4
 800887c:	3004      	addeq	r0, #4
 800887e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008882:	bf04      	itt	eq
 8008884:	009b      	lsleq	r3, r3, #2
 8008886:	3002      	addeq	r0, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	db06      	blt.n	800889a <__hi0bits+0x3c>
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	d503      	bpl.n	8008898 <__hi0bits+0x3a>
 8008890:	3001      	adds	r0, #1
 8008892:	4770      	bx	lr
 8008894:	2000      	movs	r0, #0
 8008896:	e7e8      	b.n	800886a <__hi0bits+0xc>
 8008898:	2020      	movs	r0, #32
 800889a:	4770      	bx	lr

0800889c <__lo0bits>:
 800889c:	6803      	ldr	r3, [r0, #0]
 800889e:	4601      	mov	r1, r0
 80088a0:	f013 0207 	ands.w	r2, r3, #7
 80088a4:	d00b      	beq.n	80088be <__lo0bits+0x22>
 80088a6:	07da      	lsls	r2, r3, #31
 80088a8:	d423      	bmi.n	80088f2 <__lo0bits+0x56>
 80088aa:	0798      	lsls	r0, r3, #30
 80088ac:	bf49      	itett	mi
 80088ae:	085b      	lsrmi	r3, r3, #1
 80088b0:	089b      	lsrpl	r3, r3, #2
 80088b2:	2001      	movmi	r0, #1
 80088b4:	600b      	strmi	r3, [r1, #0]
 80088b6:	bf5c      	itt	pl
 80088b8:	600b      	strpl	r3, [r1, #0]
 80088ba:	2002      	movpl	r0, #2
 80088bc:	4770      	bx	lr
 80088be:	b298      	uxth	r0, r3
 80088c0:	b9a8      	cbnz	r0, 80088ee <__lo0bits+0x52>
 80088c2:	2010      	movs	r0, #16
 80088c4:	0c1b      	lsrs	r3, r3, #16
 80088c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80088ca:	bf04      	itt	eq
 80088cc:	0a1b      	lsreq	r3, r3, #8
 80088ce:	3008      	addeq	r0, #8
 80088d0:	071a      	lsls	r2, r3, #28
 80088d2:	bf04      	itt	eq
 80088d4:	091b      	lsreq	r3, r3, #4
 80088d6:	3004      	addeq	r0, #4
 80088d8:	079a      	lsls	r2, r3, #30
 80088da:	bf04      	itt	eq
 80088dc:	089b      	lsreq	r3, r3, #2
 80088de:	3002      	addeq	r0, #2
 80088e0:	07da      	lsls	r2, r3, #31
 80088e2:	d402      	bmi.n	80088ea <__lo0bits+0x4e>
 80088e4:	085b      	lsrs	r3, r3, #1
 80088e6:	d006      	beq.n	80088f6 <__lo0bits+0x5a>
 80088e8:	3001      	adds	r0, #1
 80088ea:	600b      	str	r3, [r1, #0]
 80088ec:	4770      	bx	lr
 80088ee:	4610      	mov	r0, r2
 80088f0:	e7e9      	b.n	80088c6 <__lo0bits+0x2a>
 80088f2:	2000      	movs	r0, #0
 80088f4:	4770      	bx	lr
 80088f6:	2020      	movs	r0, #32
 80088f8:	4770      	bx	lr

080088fa <__i2b>:
 80088fa:	b510      	push	{r4, lr}
 80088fc:	460c      	mov	r4, r1
 80088fe:	2101      	movs	r1, #1
 8008900:	f7ff ff27 	bl	8008752 <_Balloc>
 8008904:	2201      	movs	r2, #1
 8008906:	6144      	str	r4, [r0, #20]
 8008908:	6102      	str	r2, [r0, #16]
 800890a:	bd10      	pop	{r4, pc}

0800890c <__multiply>:
 800890c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	4614      	mov	r4, r2
 8008912:	690a      	ldr	r2, [r1, #16]
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	4688      	mov	r8, r1
 8008918:	429a      	cmp	r2, r3
 800891a:	bfbe      	ittt	lt
 800891c:	460b      	movlt	r3, r1
 800891e:	46a0      	movlt	r8, r4
 8008920:	461c      	movlt	r4, r3
 8008922:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008926:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800892a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800892e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008932:	eb07 0609 	add.w	r6, r7, r9
 8008936:	42b3      	cmp	r3, r6
 8008938:	bfb8      	it	lt
 800893a:	3101      	addlt	r1, #1
 800893c:	f7ff ff09 	bl	8008752 <_Balloc>
 8008940:	f100 0514 	add.w	r5, r0, #20
 8008944:	462b      	mov	r3, r5
 8008946:	2200      	movs	r2, #0
 8008948:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800894c:	4573      	cmp	r3, lr
 800894e:	d316      	bcc.n	800897e <__multiply+0x72>
 8008950:	f104 0214 	add.w	r2, r4, #20
 8008954:	f108 0114 	add.w	r1, r8, #20
 8008958:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800895c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	9b00      	ldr	r3, [sp, #0]
 8008964:	9201      	str	r2, [sp, #4]
 8008966:	4293      	cmp	r3, r2
 8008968:	d80c      	bhi.n	8008984 <__multiply+0x78>
 800896a:	2e00      	cmp	r6, #0
 800896c:	dd03      	ble.n	8008976 <__multiply+0x6a>
 800896e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008972:	2b00      	cmp	r3, #0
 8008974:	d05d      	beq.n	8008a32 <__multiply+0x126>
 8008976:	6106      	str	r6, [r0, #16]
 8008978:	b003      	add	sp, #12
 800897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897e:	f843 2b04 	str.w	r2, [r3], #4
 8008982:	e7e3      	b.n	800894c <__multiply+0x40>
 8008984:	f8b2 b000 	ldrh.w	fp, [r2]
 8008988:	f1bb 0f00 	cmp.w	fp, #0
 800898c:	d023      	beq.n	80089d6 <__multiply+0xca>
 800898e:	4689      	mov	r9, r1
 8008990:	46ac      	mov	ip, r5
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f859 4b04 	ldr.w	r4, [r9], #4
 800899a:	f8dc a000 	ldr.w	sl, [ip]
 800899e:	b2a3      	uxth	r3, r4
 80089a0:	fa1f fa8a 	uxth.w	sl, sl
 80089a4:	fb0b a303 	mla	r3, fp, r3, sl
 80089a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80089ac:	f8dc 4000 	ldr.w	r4, [ip]
 80089b0:	4443      	add	r3, r8
 80089b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80089b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80089ba:	46e2      	mov	sl, ip
 80089bc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80089c6:	454f      	cmp	r7, r9
 80089c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80089cc:	f84a 3b04 	str.w	r3, [sl], #4
 80089d0:	d82b      	bhi.n	8008a2a <__multiply+0x11e>
 80089d2:	f8cc 8004 	str.w	r8, [ip, #4]
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	3204      	adds	r2, #4
 80089da:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80089de:	f1ba 0f00 	cmp.w	sl, #0
 80089e2:	d020      	beq.n	8008a26 <__multiply+0x11a>
 80089e4:	4689      	mov	r9, r1
 80089e6:	46a8      	mov	r8, r5
 80089e8:	f04f 0b00 	mov.w	fp, #0
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	f8b9 c000 	ldrh.w	ip, [r9]
 80089f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	fb0a 440c 	mla	r4, sl, ip, r4
 80089fc:	46c4      	mov	ip, r8
 80089fe:	445c      	add	r4, fp
 8008a00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008a04:	f84c 3b04 	str.w	r3, [ip], #4
 8008a08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a0c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008a10:	0c1b      	lsrs	r3, r3, #16
 8008a12:	fb0a b303 	mla	r3, sl, r3, fp
 8008a16:	454f      	cmp	r7, r9
 8008a18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008a1c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008a20:	d805      	bhi.n	8008a2e <__multiply+0x122>
 8008a22:	f8c8 3004 	str.w	r3, [r8, #4]
 8008a26:	3504      	adds	r5, #4
 8008a28:	e79b      	b.n	8008962 <__multiply+0x56>
 8008a2a:	46d4      	mov	ip, sl
 8008a2c:	e7b3      	b.n	8008996 <__multiply+0x8a>
 8008a2e:	46e0      	mov	r8, ip
 8008a30:	e7dd      	b.n	80089ee <__multiply+0xe2>
 8008a32:	3e01      	subs	r6, #1
 8008a34:	e799      	b.n	800896a <__multiply+0x5e>
	...

08008a38 <__pow5mult>:
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	f012 0203 	ands.w	r2, r2, #3
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	d007      	beq.n	8008a58 <__pow5mult+0x20>
 8008a48:	4c21      	ldr	r4, [pc, #132]	; (8008ad0 <__pow5mult+0x98>)
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a52:	f7ff fec9 	bl	80087e8 <__multadd>
 8008a56:	4607      	mov	r7, r0
 8008a58:	10ad      	asrs	r5, r5, #2
 8008a5a:	d035      	beq.n	8008ac8 <__pow5mult+0x90>
 8008a5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a5e:	b93c      	cbnz	r4, 8008a70 <__pow5mult+0x38>
 8008a60:	2010      	movs	r0, #16
 8008a62:	f7ff fe55 	bl	8008710 <malloc>
 8008a66:	6270      	str	r0, [r6, #36]	; 0x24
 8008a68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a6c:	6004      	str	r4, [r0, #0]
 8008a6e:	60c4      	str	r4, [r0, #12]
 8008a70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a78:	b94c      	cbnz	r4, 8008a8e <__pow5mult+0x56>
 8008a7a:	f240 2171 	movw	r1, #625	; 0x271
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f7ff ff3b 	bl	80088fa <__i2b>
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a8c:	6003      	str	r3, [r0, #0]
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	07eb      	lsls	r3, r5, #31
 8008a94:	d50a      	bpl.n	8008aac <__pow5mult+0x74>
 8008a96:	4639      	mov	r1, r7
 8008a98:	4622      	mov	r2, r4
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7ff ff36 	bl	800890c <__multiply>
 8008aa0:	4681      	mov	r9, r0
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7ff fe88 	bl	80087ba <_Bfree>
 8008aaa:	464f      	mov	r7, r9
 8008aac:	106d      	asrs	r5, r5, #1
 8008aae:	d00b      	beq.n	8008ac8 <__pow5mult+0x90>
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	b938      	cbnz	r0, 8008ac4 <__pow5mult+0x8c>
 8008ab4:	4622      	mov	r2, r4
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7ff ff27 	bl	800890c <__multiply>
 8008abe:	6020      	str	r0, [r4, #0]
 8008ac0:	f8c0 8000 	str.w	r8, [r0]
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	e7e4      	b.n	8008a92 <__pow5mult+0x5a>
 8008ac8:	4638      	mov	r0, r7
 8008aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ace:	bf00      	nop
 8008ad0:	08009590 	.word	0x08009590

08008ad4 <__lshift>:
 8008ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	460c      	mov	r4, r1
 8008ada:	4607      	mov	r7, r0
 8008adc:	4616      	mov	r6, r2
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ae4:	eb0a 0903 	add.w	r9, sl, r3
 8008ae8:	6849      	ldr	r1, [r1, #4]
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	f109 0501 	add.w	r5, r9, #1
 8008af0:	42ab      	cmp	r3, r5
 8008af2:	db32      	blt.n	8008b5a <__lshift+0x86>
 8008af4:	4638      	mov	r0, r7
 8008af6:	f7ff fe2c 	bl	8008752 <_Balloc>
 8008afa:	2300      	movs	r3, #0
 8008afc:	4680      	mov	r8, r0
 8008afe:	461a      	mov	r2, r3
 8008b00:	f100 0114 	add.w	r1, r0, #20
 8008b04:	4553      	cmp	r3, sl
 8008b06:	db2b      	blt.n	8008b60 <__lshift+0x8c>
 8008b08:	6920      	ldr	r0, [r4, #16]
 8008b0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b0e:	f104 0314 	add.w	r3, r4, #20
 8008b12:	f016 021f 	ands.w	r2, r6, #31
 8008b16:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b1a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b1e:	d025      	beq.n	8008b6c <__lshift+0x98>
 8008b20:	2000      	movs	r0, #0
 8008b22:	f1c2 0e20 	rsb	lr, r2, #32
 8008b26:	468a      	mov	sl, r1
 8008b28:	681e      	ldr	r6, [r3, #0]
 8008b2a:	4096      	lsls	r6, r2
 8008b2c:	4330      	orrs	r0, r6
 8008b2e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b32:	f853 0b04 	ldr.w	r0, [r3], #4
 8008b36:	459c      	cmp	ip, r3
 8008b38:	fa20 f00e 	lsr.w	r0, r0, lr
 8008b3c:	d814      	bhi.n	8008b68 <__lshift+0x94>
 8008b3e:	6048      	str	r0, [r1, #4]
 8008b40:	b108      	cbz	r0, 8008b46 <__lshift+0x72>
 8008b42:	f109 0502 	add.w	r5, r9, #2
 8008b46:	3d01      	subs	r5, #1
 8008b48:	4638      	mov	r0, r7
 8008b4a:	f8c8 5010 	str.w	r5, [r8, #16]
 8008b4e:	4621      	mov	r1, r4
 8008b50:	f7ff fe33 	bl	80087ba <_Bfree>
 8008b54:	4640      	mov	r0, r8
 8008b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5a:	3101      	adds	r1, #1
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	e7c7      	b.n	8008af0 <__lshift+0x1c>
 8008b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008b64:	3301      	adds	r3, #1
 8008b66:	e7cd      	b.n	8008b04 <__lshift+0x30>
 8008b68:	4651      	mov	r1, sl
 8008b6a:	e7dc      	b.n	8008b26 <__lshift+0x52>
 8008b6c:	3904      	subs	r1, #4
 8008b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b72:	459c      	cmp	ip, r3
 8008b74:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b78:	d8f9      	bhi.n	8008b6e <__lshift+0x9a>
 8008b7a:	e7e4      	b.n	8008b46 <__lshift+0x72>

08008b7c <__mcmp>:
 8008b7c:	6903      	ldr	r3, [r0, #16]
 8008b7e:	690a      	ldr	r2, [r1, #16]
 8008b80:	b530      	push	{r4, r5, lr}
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	d10c      	bne.n	8008ba0 <__mcmp+0x24>
 8008b86:	0092      	lsls	r2, r2, #2
 8008b88:	3014      	adds	r0, #20
 8008b8a:	3114      	adds	r1, #20
 8008b8c:	1884      	adds	r4, r0, r2
 8008b8e:	4411      	add	r1, r2
 8008b90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b98:	4295      	cmp	r5, r2
 8008b9a:	d003      	beq.n	8008ba4 <__mcmp+0x28>
 8008b9c:	d305      	bcc.n	8008baa <__mcmp+0x2e>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	bd30      	pop	{r4, r5, pc}
 8008ba4:	42a0      	cmp	r0, r4
 8008ba6:	d3f3      	bcc.n	8008b90 <__mcmp+0x14>
 8008ba8:	e7fa      	b.n	8008ba0 <__mcmp+0x24>
 8008baa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bae:	e7f7      	b.n	8008ba0 <__mcmp+0x24>

08008bb0 <__mdiff>:
 8008bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4628      	mov	r0, r5
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	f7ff ffdd 	bl	8008b7c <__mcmp>
 8008bc2:	1e06      	subs	r6, r0, #0
 8008bc4:	d108      	bne.n	8008bd8 <__mdiff+0x28>
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4638      	mov	r0, r7
 8008bca:	f7ff fdc2 	bl	8008752 <_Balloc>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd8:	bfa4      	itt	ge
 8008bda:	4623      	movge	r3, r4
 8008bdc:	462c      	movge	r4, r5
 8008bde:	4638      	mov	r0, r7
 8008be0:	6861      	ldr	r1, [r4, #4]
 8008be2:	bfa6      	itte	ge
 8008be4:	461d      	movge	r5, r3
 8008be6:	2600      	movge	r6, #0
 8008be8:	2601      	movlt	r6, #1
 8008bea:	f7ff fdb2 	bl	8008752 <_Balloc>
 8008bee:	f04f 0e00 	mov.w	lr, #0
 8008bf2:	60c6      	str	r6, [r0, #12]
 8008bf4:	692b      	ldr	r3, [r5, #16]
 8008bf6:	6926      	ldr	r6, [r4, #16]
 8008bf8:	f104 0214 	add.w	r2, r4, #20
 8008bfc:	f105 0914 	add.w	r9, r5, #20
 8008c00:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008c04:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008c08:	f100 0114 	add.w	r1, r0, #20
 8008c0c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008c10:	f859 5b04 	ldr.w	r5, [r9], #4
 8008c14:	fa1f f38a 	uxth.w	r3, sl
 8008c18:	4473      	add	r3, lr
 8008c1a:	b2ac      	uxth	r4, r5
 8008c1c:	1b1b      	subs	r3, r3, r4
 8008c1e:	0c2c      	lsrs	r4, r5, #16
 8008c20:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008c24:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008c2e:	45c8      	cmp	r8, r9
 8008c30:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c34:	4694      	mov	ip, r2
 8008c36:	f841 4b04 	str.w	r4, [r1], #4
 8008c3a:	d8e7      	bhi.n	8008c0c <__mdiff+0x5c>
 8008c3c:	45bc      	cmp	ip, r7
 8008c3e:	d304      	bcc.n	8008c4a <__mdiff+0x9a>
 8008c40:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008c44:	b183      	cbz	r3, 8008c68 <__mdiff+0xb8>
 8008c46:	6106      	str	r6, [r0, #16]
 8008c48:	e7c4      	b.n	8008bd4 <__mdiff+0x24>
 8008c4a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008c4e:	b2a2      	uxth	r2, r4
 8008c50:	4472      	add	r2, lr
 8008c52:	1413      	asrs	r3, r2, #16
 8008c54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008c58:	b292      	uxth	r2, r2
 8008c5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c5e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008c62:	f841 2b04 	str.w	r2, [r1], #4
 8008c66:	e7e9      	b.n	8008c3c <__mdiff+0x8c>
 8008c68:	3e01      	subs	r6, #1
 8008c6a:	e7e9      	b.n	8008c40 <__mdiff+0x90>

08008c6c <__d2b>:
 8008c6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c70:	461c      	mov	r4, r3
 8008c72:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008c76:	2101      	movs	r1, #1
 8008c78:	4690      	mov	r8, r2
 8008c7a:	f7ff fd6a 	bl	8008752 <_Balloc>
 8008c7e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008c82:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008c86:	4607      	mov	r7, r0
 8008c88:	bb34      	cbnz	r4, 8008cd8 <__d2b+0x6c>
 8008c8a:	9201      	str	r2, [sp, #4]
 8008c8c:	f1b8 0200 	subs.w	r2, r8, #0
 8008c90:	d027      	beq.n	8008ce2 <__d2b+0x76>
 8008c92:	a802      	add	r0, sp, #8
 8008c94:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008c98:	f7ff fe00 	bl	800889c <__lo0bits>
 8008c9c:	9900      	ldr	r1, [sp, #0]
 8008c9e:	b1f0      	cbz	r0, 8008cde <__d2b+0x72>
 8008ca0:	9a01      	ldr	r2, [sp, #4]
 8008ca2:	f1c0 0320 	rsb	r3, r0, #32
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	430b      	orrs	r3, r1
 8008cac:	40c2      	lsrs	r2, r0
 8008cae:	617b      	str	r3, [r7, #20]
 8008cb0:	9201      	str	r2, [sp, #4]
 8008cb2:	9b01      	ldr	r3, [sp, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bf14      	ite	ne
 8008cb8:	2102      	movne	r1, #2
 8008cba:	2101      	moveq	r1, #1
 8008cbc:	61bb      	str	r3, [r7, #24]
 8008cbe:	6139      	str	r1, [r7, #16]
 8008cc0:	b1c4      	cbz	r4, 8008cf4 <__d2b+0x88>
 8008cc2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008cc6:	4404      	add	r4, r0
 8008cc8:	6034      	str	r4, [r6, #0]
 8008cca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cce:	6028      	str	r0, [r5, #0]
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	b002      	add	sp, #8
 8008cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008cdc:	e7d5      	b.n	8008c8a <__d2b+0x1e>
 8008cde:	6179      	str	r1, [r7, #20]
 8008ce0:	e7e7      	b.n	8008cb2 <__d2b+0x46>
 8008ce2:	a801      	add	r0, sp, #4
 8008ce4:	f7ff fdda 	bl	800889c <__lo0bits>
 8008ce8:	2101      	movs	r1, #1
 8008cea:	9b01      	ldr	r3, [sp, #4]
 8008cec:	6139      	str	r1, [r7, #16]
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	3020      	adds	r0, #32
 8008cf2:	e7e5      	b.n	8008cc0 <__d2b+0x54>
 8008cf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cf8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008cfc:	6030      	str	r0, [r6, #0]
 8008cfe:	6918      	ldr	r0, [r3, #16]
 8008d00:	f7ff fdad 	bl	800885e <__hi0bits>
 8008d04:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008d08:	e7e1      	b.n	8008cce <__d2b+0x62>

08008d0a <_calloc_r>:
 8008d0a:	b538      	push	{r3, r4, r5, lr}
 8008d0c:	fb02 f401 	mul.w	r4, r2, r1
 8008d10:	4621      	mov	r1, r4
 8008d12:	f000 f855 	bl	8008dc0 <_malloc_r>
 8008d16:	4605      	mov	r5, r0
 8008d18:	b118      	cbz	r0, 8008d22 <_calloc_r+0x18>
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	f7fd ff35 	bl	8006b8c <memset>
 8008d22:	4628      	mov	r0, r5
 8008d24:	bd38      	pop	{r3, r4, r5, pc}
	...

08008d28 <_free_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4605      	mov	r5, r0
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	d043      	beq.n	8008db8 <_free_r+0x90>
 8008d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d34:	1f0c      	subs	r4, r1, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	bfb8      	it	lt
 8008d3a:	18e4      	addlt	r4, r4, r3
 8008d3c:	f000 fa94 	bl	8009268 <__malloc_lock>
 8008d40:	4a1e      	ldr	r2, [pc, #120]	; (8008dbc <_free_r+0x94>)
 8008d42:	6813      	ldr	r3, [r2, #0]
 8008d44:	4610      	mov	r0, r2
 8008d46:	b933      	cbnz	r3, 8008d56 <_free_r+0x2e>
 8008d48:	6063      	str	r3, [r4, #4]
 8008d4a:	6014      	str	r4, [r2, #0]
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d52:	f000 ba8a 	b.w	800926a <__malloc_unlock>
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	d90b      	bls.n	8008d72 <_free_r+0x4a>
 8008d5a:	6821      	ldr	r1, [r4, #0]
 8008d5c:	1862      	adds	r2, r4, r1
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	bf01      	itttt	eq
 8008d62:	681a      	ldreq	r2, [r3, #0]
 8008d64:	685b      	ldreq	r3, [r3, #4]
 8008d66:	1852      	addeq	r2, r2, r1
 8008d68:	6022      	streq	r2, [r4, #0]
 8008d6a:	6063      	str	r3, [r4, #4]
 8008d6c:	6004      	str	r4, [r0, #0]
 8008d6e:	e7ed      	b.n	8008d4c <_free_r+0x24>
 8008d70:	4613      	mov	r3, r2
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	b10a      	cbz	r2, 8008d7a <_free_r+0x52>
 8008d76:	42a2      	cmp	r2, r4
 8008d78:	d9fa      	bls.n	8008d70 <_free_r+0x48>
 8008d7a:	6819      	ldr	r1, [r3, #0]
 8008d7c:	1858      	adds	r0, r3, r1
 8008d7e:	42a0      	cmp	r0, r4
 8008d80:	d10b      	bne.n	8008d9a <_free_r+0x72>
 8008d82:	6820      	ldr	r0, [r4, #0]
 8008d84:	4401      	add	r1, r0
 8008d86:	1858      	adds	r0, r3, r1
 8008d88:	4282      	cmp	r2, r0
 8008d8a:	6019      	str	r1, [r3, #0]
 8008d8c:	d1de      	bne.n	8008d4c <_free_r+0x24>
 8008d8e:	6810      	ldr	r0, [r2, #0]
 8008d90:	6852      	ldr	r2, [r2, #4]
 8008d92:	4401      	add	r1, r0
 8008d94:	6019      	str	r1, [r3, #0]
 8008d96:	605a      	str	r2, [r3, #4]
 8008d98:	e7d8      	b.n	8008d4c <_free_r+0x24>
 8008d9a:	d902      	bls.n	8008da2 <_free_r+0x7a>
 8008d9c:	230c      	movs	r3, #12
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	e7d4      	b.n	8008d4c <_free_r+0x24>
 8008da2:	6820      	ldr	r0, [r4, #0]
 8008da4:	1821      	adds	r1, r4, r0
 8008da6:	428a      	cmp	r2, r1
 8008da8:	bf01      	itttt	eq
 8008daa:	6811      	ldreq	r1, [r2, #0]
 8008dac:	6852      	ldreq	r2, [r2, #4]
 8008dae:	1809      	addeq	r1, r1, r0
 8008db0:	6021      	streq	r1, [r4, #0]
 8008db2:	6062      	str	r2, [r4, #4]
 8008db4:	605c      	str	r4, [r3, #4]
 8008db6:	e7c9      	b.n	8008d4c <_free_r+0x24>
 8008db8:	bd38      	pop	{r3, r4, r5, pc}
 8008dba:	bf00      	nop
 8008dbc:	2000029c 	.word	0x2000029c

08008dc0 <_malloc_r>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	1ccd      	adds	r5, r1, #3
 8008dc4:	f025 0503 	bic.w	r5, r5, #3
 8008dc8:	3508      	adds	r5, #8
 8008dca:	2d0c      	cmp	r5, #12
 8008dcc:	bf38      	it	cc
 8008dce:	250c      	movcc	r5, #12
 8008dd0:	2d00      	cmp	r5, #0
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	db01      	blt.n	8008dda <_malloc_r+0x1a>
 8008dd6:	42a9      	cmp	r1, r5
 8008dd8:	d903      	bls.n	8008de2 <_malloc_r+0x22>
 8008dda:	230c      	movs	r3, #12
 8008ddc:	6033      	str	r3, [r6, #0]
 8008dde:	2000      	movs	r0, #0
 8008de0:	bd70      	pop	{r4, r5, r6, pc}
 8008de2:	f000 fa41 	bl	8009268 <__malloc_lock>
 8008de6:	4a21      	ldr	r2, [pc, #132]	; (8008e6c <_malloc_r+0xac>)
 8008de8:	6814      	ldr	r4, [r2, #0]
 8008dea:	4621      	mov	r1, r4
 8008dec:	b991      	cbnz	r1, 8008e14 <_malloc_r+0x54>
 8008dee:	4c20      	ldr	r4, [pc, #128]	; (8008e70 <_malloc_r+0xb0>)
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	b91b      	cbnz	r3, 8008dfc <_malloc_r+0x3c>
 8008df4:	4630      	mov	r0, r6
 8008df6:	f000 f97b 	bl	80090f0 <_sbrk_r>
 8008dfa:	6020      	str	r0, [r4, #0]
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f000 f976 	bl	80090f0 <_sbrk_r>
 8008e04:	1c43      	adds	r3, r0, #1
 8008e06:	d124      	bne.n	8008e52 <_malloc_r+0x92>
 8008e08:	230c      	movs	r3, #12
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	6033      	str	r3, [r6, #0]
 8008e0e:	f000 fa2c 	bl	800926a <__malloc_unlock>
 8008e12:	e7e4      	b.n	8008dde <_malloc_r+0x1e>
 8008e14:	680b      	ldr	r3, [r1, #0]
 8008e16:	1b5b      	subs	r3, r3, r5
 8008e18:	d418      	bmi.n	8008e4c <_malloc_r+0x8c>
 8008e1a:	2b0b      	cmp	r3, #11
 8008e1c:	d90f      	bls.n	8008e3e <_malloc_r+0x7e>
 8008e1e:	600b      	str	r3, [r1, #0]
 8008e20:	18cc      	adds	r4, r1, r3
 8008e22:	50cd      	str	r5, [r1, r3]
 8008e24:	4630      	mov	r0, r6
 8008e26:	f000 fa20 	bl	800926a <__malloc_unlock>
 8008e2a:	f104 000b 	add.w	r0, r4, #11
 8008e2e:	1d23      	adds	r3, r4, #4
 8008e30:	f020 0007 	bic.w	r0, r0, #7
 8008e34:	1ac3      	subs	r3, r0, r3
 8008e36:	d0d3      	beq.n	8008de0 <_malloc_r+0x20>
 8008e38:	425a      	negs	r2, r3
 8008e3a:	50e2      	str	r2, [r4, r3]
 8008e3c:	e7d0      	b.n	8008de0 <_malloc_r+0x20>
 8008e3e:	684b      	ldr	r3, [r1, #4]
 8008e40:	428c      	cmp	r4, r1
 8008e42:	bf16      	itet	ne
 8008e44:	6063      	strne	r3, [r4, #4]
 8008e46:	6013      	streq	r3, [r2, #0]
 8008e48:	460c      	movne	r4, r1
 8008e4a:	e7eb      	b.n	8008e24 <_malloc_r+0x64>
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	6849      	ldr	r1, [r1, #4]
 8008e50:	e7cc      	b.n	8008dec <_malloc_r+0x2c>
 8008e52:	1cc4      	adds	r4, r0, #3
 8008e54:	f024 0403 	bic.w	r4, r4, #3
 8008e58:	42a0      	cmp	r0, r4
 8008e5a:	d005      	beq.n	8008e68 <_malloc_r+0xa8>
 8008e5c:	1a21      	subs	r1, r4, r0
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f000 f946 	bl	80090f0 <_sbrk_r>
 8008e64:	3001      	adds	r0, #1
 8008e66:	d0cf      	beq.n	8008e08 <_malloc_r+0x48>
 8008e68:	6025      	str	r5, [r4, #0]
 8008e6a:	e7db      	b.n	8008e24 <_malloc_r+0x64>
 8008e6c:	2000029c 	.word	0x2000029c
 8008e70:	200002a0 	.word	0x200002a0

08008e74 <__sfputc_r>:
 8008e74:	6893      	ldr	r3, [r2, #8]
 8008e76:	b410      	push	{r4}
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	6093      	str	r3, [r2, #8]
 8008e7e:	da07      	bge.n	8008e90 <__sfputc_r+0x1c>
 8008e80:	6994      	ldr	r4, [r2, #24]
 8008e82:	42a3      	cmp	r3, r4
 8008e84:	db01      	blt.n	8008e8a <__sfputc_r+0x16>
 8008e86:	290a      	cmp	r1, #10
 8008e88:	d102      	bne.n	8008e90 <__sfputc_r+0x1c>
 8008e8a:	bc10      	pop	{r4}
 8008e8c:	f7fe bb52 	b.w	8007534 <__swbuf_r>
 8008e90:	6813      	ldr	r3, [r2, #0]
 8008e92:	1c58      	adds	r0, r3, #1
 8008e94:	6010      	str	r0, [r2, #0]
 8008e96:	7019      	strb	r1, [r3, #0]
 8008e98:	4608      	mov	r0, r1
 8008e9a:	bc10      	pop	{r4}
 8008e9c:	4770      	bx	lr

08008e9e <__sfputs_r>:
 8008e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	460f      	mov	r7, r1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	18d5      	adds	r5, r2, r3
 8008ea8:	42ac      	cmp	r4, r5
 8008eaa:	d101      	bne.n	8008eb0 <__sfputs_r+0x12>
 8008eac:	2000      	movs	r0, #0
 8008eae:	e007      	b.n	8008ec0 <__sfputs_r+0x22>
 8008eb0:	463a      	mov	r2, r7
 8008eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff ffdc 	bl	8008e74 <__sfputc_r>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d1f3      	bne.n	8008ea8 <__sfputs_r+0xa>
 8008ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ec4 <_vfiprintf_r>:
 8008ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	460c      	mov	r4, r1
 8008eca:	b09d      	sub	sp, #116	; 0x74
 8008ecc:	4617      	mov	r7, r2
 8008ece:	461d      	mov	r5, r3
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	b118      	cbz	r0, 8008edc <_vfiprintf_r+0x18>
 8008ed4:	6983      	ldr	r3, [r0, #24]
 8008ed6:	b90b      	cbnz	r3, 8008edc <_vfiprintf_r+0x18>
 8008ed8:	f7ff fb1e 	bl	8008518 <__sinit>
 8008edc:	4b7c      	ldr	r3, [pc, #496]	; (80090d0 <_vfiprintf_r+0x20c>)
 8008ede:	429c      	cmp	r4, r3
 8008ee0:	d158      	bne.n	8008f94 <_vfiprintf_r+0xd0>
 8008ee2:	6874      	ldr	r4, [r6, #4]
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	0718      	lsls	r0, r3, #28
 8008ee8:	d55e      	bpl.n	8008fa8 <_vfiprintf_r+0xe4>
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d05b      	beq.n	8008fa8 <_vfiprintf_r+0xe4>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef4:	2320      	movs	r3, #32
 8008ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008efa:	2330      	movs	r3, #48	; 0x30
 8008efc:	f04f 0b01 	mov.w	fp, #1
 8008f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f04:	9503      	str	r5, [sp, #12]
 8008f06:	46b8      	mov	r8, r7
 8008f08:	4645      	mov	r5, r8
 8008f0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f0e:	b10b      	cbz	r3, 8008f14 <_vfiprintf_r+0x50>
 8008f10:	2b25      	cmp	r3, #37	; 0x25
 8008f12:	d154      	bne.n	8008fbe <_vfiprintf_r+0xfa>
 8008f14:	ebb8 0a07 	subs.w	sl, r8, r7
 8008f18:	d00b      	beq.n	8008f32 <_vfiprintf_r+0x6e>
 8008f1a:	4653      	mov	r3, sl
 8008f1c:	463a      	mov	r2, r7
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7ff ffbc 	bl	8008e9e <__sfputs_r>
 8008f26:	3001      	adds	r0, #1
 8008f28:	f000 80c2 	beq.w	80090b0 <_vfiprintf_r+0x1ec>
 8008f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2e:	4453      	add	r3, sl
 8008f30:	9309      	str	r3, [sp, #36]	; 0x24
 8008f32:	f898 3000 	ldrb.w	r3, [r8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 80ba 	beq.w	80090b0 <_vfiprintf_r+0x1ec>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	9307      	str	r3, [sp, #28]
 8008f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8008f50:	46a8      	mov	r8, r5
 8008f52:	2205      	movs	r2, #5
 8008f54:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008f58:	485e      	ldr	r0, [pc, #376]	; (80090d4 <_vfiprintf_r+0x210>)
 8008f5a:	f7ff fbe1 	bl	8008720 <memchr>
 8008f5e:	9b04      	ldr	r3, [sp, #16]
 8008f60:	bb78      	cbnz	r0, 8008fc2 <_vfiprintf_r+0xfe>
 8008f62:	06d9      	lsls	r1, r3, #27
 8008f64:	bf44      	itt	mi
 8008f66:	2220      	movmi	r2, #32
 8008f68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f6c:	071a      	lsls	r2, r3, #28
 8008f6e:	bf44      	itt	mi
 8008f70:	222b      	movmi	r2, #43	; 0x2b
 8008f72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f76:	782a      	ldrb	r2, [r5, #0]
 8008f78:	2a2a      	cmp	r2, #42	; 0x2a
 8008f7a:	d02a      	beq.n	8008fd2 <_vfiprintf_r+0x10e>
 8008f7c:	46a8      	mov	r8, r5
 8008f7e:	2000      	movs	r0, #0
 8008f80:	250a      	movs	r5, #10
 8008f82:	9a07      	ldr	r2, [sp, #28]
 8008f84:	4641      	mov	r1, r8
 8008f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f8a:	3b30      	subs	r3, #48	; 0x30
 8008f8c:	2b09      	cmp	r3, #9
 8008f8e:	d969      	bls.n	8009064 <_vfiprintf_r+0x1a0>
 8008f90:	b360      	cbz	r0, 8008fec <_vfiprintf_r+0x128>
 8008f92:	e024      	b.n	8008fde <_vfiprintf_r+0x11a>
 8008f94:	4b50      	ldr	r3, [pc, #320]	; (80090d8 <_vfiprintf_r+0x214>)
 8008f96:	429c      	cmp	r4, r3
 8008f98:	d101      	bne.n	8008f9e <_vfiprintf_r+0xda>
 8008f9a:	68b4      	ldr	r4, [r6, #8]
 8008f9c:	e7a2      	b.n	8008ee4 <_vfiprintf_r+0x20>
 8008f9e:	4b4f      	ldr	r3, [pc, #316]	; (80090dc <_vfiprintf_r+0x218>)
 8008fa0:	429c      	cmp	r4, r3
 8008fa2:	bf08      	it	eq
 8008fa4:	68f4      	ldreq	r4, [r6, #12]
 8008fa6:	e79d      	b.n	8008ee4 <_vfiprintf_r+0x20>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7fe fb14 	bl	80075d8 <__swsetup_r>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d09d      	beq.n	8008ef0 <_vfiprintf_r+0x2c>
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	b01d      	add	sp, #116	; 0x74
 8008fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbe:	46a8      	mov	r8, r5
 8008fc0:	e7a2      	b.n	8008f08 <_vfiprintf_r+0x44>
 8008fc2:	4a44      	ldr	r2, [pc, #272]	; (80090d4 <_vfiprintf_r+0x210>)
 8008fc4:	4645      	mov	r5, r8
 8008fc6:	1a80      	subs	r0, r0, r2
 8008fc8:	fa0b f000 	lsl.w	r0, fp, r0
 8008fcc:	4318      	orrs	r0, r3
 8008fce:	9004      	str	r0, [sp, #16]
 8008fd0:	e7be      	b.n	8008f50 <_vfiprintf_r+0x8c>
 8008fd2:	9a03      	ldr	r2, [sp, #12]
 8008fd4:	1d11      	adds	r1, r2, #4
 8008fd6:	6812      	ldr	r2, [r2, #0]
 8008fd8:	9103      	str	r1, [sp, #12]
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	db01      	blt.n	8008fe2 <_vfiprintf_r+0x11e>
 8008fde:	9207      	str	r2, [sp, #28]
 8008fe0:	e004      	b.n	8008fec <_vfiprintf_r+0x128>
 8008fe2:	4252      	negs	r2, r2
 8008fe4:	f043 0302 	orr.w	r3, r3, #2
 8008fe8:	9207      	str	r2, [sp, #28]
 8008fea:	9304      	str	r3, [sp, #16]
 8008fec:	f898 3000 	ldrb.w	r3, [r8]
 8008ff0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ff2:	d10e      	bne.n	8009012 <_vfiprintf_r+0x14e>
 8008ff4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8008ffa:	d138      	bne.n	800906e <_vfiprintf_r+0x1aa>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	f108 0802 	add.w	r8, r8, #2
 8009002:	1d1a      	adds	r2, r3, #4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	9203      	str	r2, [sp, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	bfb8      	it	lt
 800900c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009010:	9305      	str	r3, [sp, #20]
 8009012:	4d33      	ldr	r5, [pc, #204]	; (80090e0 <_vfiprintf_r+0x21c>)
 8009014:	2203      	movs	r2, #3
 8009016:	f898 1000 	ldrb.w	r1, [r8]
 800901a:	4628      	mov	r0, r5
 800901c:	f7ff fb80 	bl	8008720 <memchr>
 8009020:	b140      	cbz	r0, 8009034 <_vfiprintf_r+0x170>
 8009022:	2340      	movs	r3, #64	; 0x40
 8009024:	1b40      	subs	r0, r0, r5
 8009026:	fa03 f000 	lsl.w	r0, r3, r0
 800902a:	9b04      	ldr	r3, [sp, #16]
 800902c:	f108 0801 	add.w	r8, r8, #1
 8009030:	4303      	orrs	r3, r0
 8009032:	9304      	str	r3, [sp, #16]
 8009034:	f898 1000 	ldrb.w	r1, [r8]
 8009038:	2206      	movs	r2, #6
 800903a:	482a      	ldr	r0, [pc, #168]	; (80090e4 <_vfiprintf_r+0x220>)
 800903c:	f108 0701 	add.w	r7, r8, #1
 8009040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009044:	f7ff fb6c 	bl	8008720 <memchr>
 8009048:	2800      	cmp	r0, #0
 800904a:	d037      	beq.n	80090bc <_vfiprintf_r+0x1f8>
 800904c:	4b26      	ldr	r3, [pc, #152]	; (80090e8 <_vfiprintf_r+0x224>)
 800904e:	bb1b      	cbnz	r3, 8009098 <_vfiprintf_r+0x1d4>
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	3307      	adds	r3, #7
 8009054:	f023 0307 	bic.w	r3, r3, #7
 8009058:	3308      	adds	r3, #8
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905e:	444b      	add	r3, r9
 8009060:	9309      	str	r3, [sp, #36]	; 0x24
 8009062:	e750      	b.n	8008f06 <_vfiprintf_r+0x42>
 8009064:	fb05 3202 	mla	r2, r5, r2, r3
 8009068:	2001      	movs	r0, #1
 800906a:	4688      	mov	r8, r1
 800906c:	e78a      	b.n	8008f84 <_vfiprintf_r+0xc0>
 800906e:	2300      	movs	r3, #0
 8009070:	250a      	movs	r5, #10
 8009072:	4619      	mov	r1, r3
 8009074:	f108 0801 	add.w	r8, r8, #1
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	4640      	mov	r0, r8
 800907c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009080:	3a30      	subs	r2, #48	; 0x30
 8009082:	2a09      	cmp	r2, #9
 8009084:	d903      	bls.n	800908e <_vfiprintf_r+0x1ca>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0c3      	beq.n	8009012 <_vfiprintf_r+0x14e>
 800908a:	9105      	str	r1, [sp, #20]
 800908c:	e7c1      	b.n	8009012 <_vfiprintf_r+0x14e>
 800908e:	fb05 2101 	mla	r1, r5, r1, r2
 8009092:	2301      	movs	r3, #1
 8009094:	4680      	mov	r8, r0
 8009096:	e7f0      	b.n	800907a <_vfiprintf_r+0x1b6>
 8009098:	ab03      	add	r3, sp, #12
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	4622      	mov	r2, r4
 800909e:	4b13      	ldr	r3, [pc, #76]	; (80090ec <_vfiprintf_r+0x228>)
 80090a0:	a904      	add	r1, sp, #16
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7fd fe0c 	bl	8006cc0 <_printf_float>
 80090a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80090ac:	4681      	mov	r9, r0
 80090ae:	d1d5      	bne.n	800905c <_vfiprintf_r+0x198>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	065b      	lsls	r3, r3, #25
 80090b4:	f53f af7e 	bmi.w	8008fb4 <_vfiprintf_r+0xf0>
 80090b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ba:	e77d      	b.n	8008fb8 <_vfiprintf_r+0xf4>
 80090bc:	ab03      	add	r3, sp, #12
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	4622      	mov	r2, r4
 80090c2:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <_vfiprintf_r+0x228>)
 80090c4:	a904      	add	r1, sp, #16
 80090c6:	4630      	mov	r0, r6
 80090c8:	f7fe f8a6 	bl	8007218 <_printf_i>
 80090cc:	e7ec      	b.n	80090a8 <_vfiprintf_r+0x1e4>
 80090ce:	bf00      	nop
 80090d0:	08009460 	.word	0x08009460
 80090d4:	0800959c 	.word	0x0800959c
 80090d8:	08009480 	.word	0x08009480
 80090dc:	08009440 	.word	0x08009440
 80090e0:	080095a2 	.word	0x080095a2
 80090e4:	080095a6 	.word	0x080095a6
 80090e8:	08006cc1 	.word	0x08006cc1
 80090ec:	08008e9f 	.word	0x08008e9f

080090f0 <_sbrk_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	2300      	movs	r3, #0
 80090f4:	4c05      	ldr	r4, [pc, #20]	; (800910c <_sbrk_r+0x1c>)
 80090f6:	4605      	mov	r5, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	f7fb fa34 	bl	8004568 <_sbrk>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_sbrk_r+0x1a>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	b103      	cbz	r3, 800910a <_sbrk_r+0x1a>
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	20000b60 	.word	0x20000b60

08009110 <__sread>:
 8009110:	b510      	push	{r4, lr}
 8009112:	460c      	mov	r4, r1
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	f000 f8a8 	bl	800926c <_read_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	bfab      	itete	ge
 8009120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009122:	89a3      	ldrhlt	r3, [r4, #12]
 8009124:	181b      	addge	r3, r3, r0
 8009126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800912a:	bfac      	ite	ge
 800912c:	6563      	strge	r3, [r4, #84]	; 0x54
 800912e:	81a3      	strhlt	r3, [r4, #12]
 8009130:	bd10      	pop	{r4, pc}

08009132 <__swrite>:
 8009132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009136:	461f      	mov	r7, r3
 8009138:	898b      	ldrh	r3, [r1, #12]
 800913a:	4605      	mov	r5, r0
 800913c:	05db      	lsls	r3, r3, #23
 800913e:	460c      	mov	r4, r1
 8009140:	4616      	mov	r6, r2
 8009142:	d505      	bpl.n	8009150 <__swrite+0x1e>
 8009144:	2302      	movs	r3, #2
 8009146:	2200      	movs	r2, #0
 8009148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914c:	f000 f868 	bl	8009220 <_lseek_r>
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	4632      	mov	r2, r6
 8009154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009158:	81a3      	strh	r3, [r4, #12]
 800915a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800915e:	463b      	mov	r3, r7
 8009160:	4628      	mov	r0, r5
 8009162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009166:	f000 b817 	b.w	8009198 <_write_r>

0800916a <__sseek>:
 800916a:	b510      	push	{r4, lr}
 800916c:	460c      	mov	r4, r1
 800916e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009172:	f000 f855 	bl	8009220 <_lseek_r>
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	bf15      	itete	ne
 800917c:	6560      	strne	r0, [r4, #84]	; 0x54
 800917e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009186:	81a3      	strheq	r3, [r4, #12]
 8009188:	bf18      	it	ne
 800918a:	81a3      	strhne	r3, [r4, #12]
 800918c:	bd10      	pop	{r4, pc}

0800918e <__sclose>:
 800918e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009192:	f000 b813 	b.w	80091bc <_close_r>
	...

08009198 <_write_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4605      	mov	r5, r0
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	2200      	movs	r2, #0
 80091a2:	4c05      	ldr	r4, [pc, #20]	; (80091b8 <_write_r+0x20>)
 80091a4:	6022      	str	r2, [r4, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f7fb f991 	bl	80044ce <_write>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_write_r+0x1e>
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_write_r+0x1e>
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	20000b60 	.word	0x20000b60

080091bc <_close_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	2300      	movs	r3, #0
 80091c0:	4c05      	ldr	r4, [pc, #20]	; (80091d8 <_close_r+0x1c>)
 80091c2:	4605      	mov	r5, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	f7fb f99d 	bl	8004506 <_close>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_close_r+0x1a>
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_close_r+0x1a>
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	20000b60 	.word	0x20000b60

080091dc <_fstat_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	2300      	movs	r3, #0
 80091e0:	4c06      	ldr	r4, [pc, #24]	; (80091fc <_fstat_r+0x20>)
 80091e2:	4605      	mov	r5, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	f7fb f997 	bl	800451c <_fstat>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	d102      	bne.n	80091f8 <_fstat_r+0x1c>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	b103      	cbz	r3, 80091f8 <_fstat_r+0x1c>
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	bd38      	pop	{r3, r4, r5, pc}
 80091fa:	bf00      	nop
 80091fc:	20000b60 	.word	0x20000b60

08009200 <_isatty_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	2300      	movs	r3, #0
 8009204:	4c05      	ldr	r4, [pc, #20]	; (800921c <_isatty_r+0x1c>)
 8009206:	4605      	mov	r5, r0
 8009208:	4608      	mov	r0, r1
 800920a:	6023      	str	r3, [r4, #0]
 800920c:	f7fb f995 	bl	800453a <_isatty>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_isatty_r+0x1a>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	b103      	cbz	r3, 800921a <_isatty_r+0x1a>
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20000b60 	.word	0x20000b60

08009220 <_lseek_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4605      	mov	r5, r0
 8009224:	4608      	mov	r0, r1
 8009226:	4611      	mov	r1, r2
 8009228:	2200      	movs	r2, #0
 800922a:	4c05      	ldr	r4, [pc, #20]	; (8009240 <_lseek_r+0x20>)
 800922c:	6022      	str	r2, [r4, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	f7fb f98d 	bl	800454e <_lseek>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d102      	bne.n	800923e <_lseek_r+0x1e>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	b103      	cbz	r3, 800923e <_lseek_r+0x1e>
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	20000b60 	.word	0x20000b60

08009244 <__ascii_mbtowc>:
 8009244:	b082      	sub	sp, #8
 8009246:	b901      	cbnz	r1, 800924a <__ascii_mbtowc+0x6>
 8009248:	a901      	add	r1, sp, #4
 800924a:	b142      	cbz	r2, 800925e <__ascii_mbtowc+0x1a>
 800924c:	b14b      	cbz	r3, 8009262 <__ascii_mbtowc+0x1e>
 800924e:	7813      	ldrb	r3, [r2, #0]
 8009250:	600b      	str	r3, [r1, #0]
 8009252:	7812      	ldrb	r2, [r2, #0]
 8009254:	1c10      	adds	r0, r2, #0
 8009256:	bf18      	it	ne
 8009258:	2001      	movne	r0, #1
 800925a:	b002      	add	sp, #8
 800925c:	4770      	bx	lr
 800925e:	4610      	mov	r0, r2
 8009260:	e7fb      	b.n	800925a <__ascii_mbtowc+0x16>
 8009262:	f06f 0001 	mvn.w	r0, #1
 8009266:	e7f8      	b.n	800925a <__ascii_mbtowc+0x16>

08009268 <__malloc_lock>:
 8009268:	4770      	bx	lr

0800926a <__malloc_unlock>:
 800926a:	4770      	bx	lr

0800926c <_read_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4605      	mov	r5, r0
 8009270:	4608      	mov	r0, r1
 8009272:	4611      	mov	r1, r2
 8009274:	2200      	movs	r2, #0
 8009276:	4c05      	ldr	r4, [pc, #20]	; (800928c <_read_r+0x20>)
 8009278:	6022      	str	r2, [r4, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	f7fb f90a 	bl	8004494 <_read>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_read_r+0x1e>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	b103      	cbz	r3, 800928a <_read_r+0x1e>
 8009288:	602b      	str	r3, [r5, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	20000b60 	.word	0x20000b60

08009290 <__ascii_wctomb>:
 8009290:	b149      	cbz	r1, 80092a6 <__ascii_wctomb+0x16>
 8009292:	2aff      	cmp	r2, #255	; 0xff
 8009294:	bf8b      	itete	hi
 8009296:	238a      	movhi	r3, #138	; 0x8a
 8009298:	700a      	strbls	r2, [r1, #0]
 800929a:	6003      	strhi	r3, [r0, #0]
 800929c:	2001      	movls	r0, #1
 800929e:	bf88      	it	hi
 80092a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80092a4:	4770      	bx	lr
 80092a6:	4608      	mov	r0, r1
 80092a8:	4770      	bx	lr
	...

080092ac <_init>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr

080092b8 <_fini>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	bf00      	nop
 80092bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092be:	bc08      	pop	{r3}
 80092c0:	469e      	mov	lr, r3
 80092c2:	4770      	bx	lr
