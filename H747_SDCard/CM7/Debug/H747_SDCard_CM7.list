
H747_SDCard_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000813c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080084d0  080084d0  000184d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080084d8  080084d8  000184d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080084dc  080084dc  000184dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080084e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000021b4  20000074  08008554  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002228  08008554  00022228  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fa23  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000380d  00000000  00000000  0003fac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010d0  00000000  00000000  000432d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f68  00000000  00000000  000443a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00041678  00000000  00000000  00045310  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00010e5e  00000000  00000000  00086988  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019ab79  00000000  00000000  000977e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0023235f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b78  00000000  00000000  002323dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080083c4 	.word	0x080083c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	080083c4 	.word	0x080083c4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SDMMC1_SD_Init(void);
static void MX_UART8_Init(void);

int __io_putchar (int ch) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1,1000);
 80007c2:	f107 010f 	add.w	r1, r7, #15
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	2201      	movs	r2, #1
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <__io_putchar+0x28>)
 80007ce:	f004 fc43 	bl	8005058 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*)&UART1_TxBuffer, countof(UART1_TxBuffer)-1);
	return ch;
 80007d2:	687b      	ldr	r3, [r7, #4]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000128 	.word	0x20000128

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

	int32_t timeout;

	timeout = 0xFFFF;
 80007e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ea:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007ec:	bf00      	nop
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <main+0xb4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <main+0x24>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	607a      	str	r2, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	dcf4      	bgt.n	80007ee <main+0xe>
	if ( timeout < 0 )
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	da01      	bge.n	800080e <main+0x2e>
	{
	Error_Handler();
 800080a:	f000 f9ad 	bl	8000b68 <Error_Handler>
	}

	HAL_Init();
 800080e:	f000 fb91 	bl	8000f34 <HAL_Init>


	SystemClock_Config();
 8000812:	f000 f845 	bl	80008a0 <SystemClock_Config>

	__HAL_RCC_HSEM_CLK_ENABLE();
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <main+0xb4>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <main+0xb4>)
 800081e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <main+0xb4>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

	HAL_HSEM_FastTake(HSEM_ID_0);
 8000834:	2000      	movs	r0, #0
 8000836:	f001 f975 	bl	8001b24 <HAL_HSEM_FastTake>

	HAL_HSEM_Release(HSEM_ID_0,0);
 800083a:	2100      	movs	r1, #0
 800083c:	2000      	movs	r0, #0
 800083e:	f001 f98b 	bl	8001b58 <HAL_HSEM_Release>

	timeout = 0xFFFF;
 8000842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000846:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000848:	bf00      	nop
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <main+0xb4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d104      	bne.n	8000860 <main+0x80>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	1e5a      	subs	r2, r3, #1
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	dcf4      	bgt.n	800084a <main+0x6a>
	if ( timeout < 0 )
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	da01      	bge.n	800086a <main+0x8a>
	{
	Error_Handler();
 8000866:	f000 f97f 	bl	8000b68 <Error_Handler>
	}

	MX_GPIO_Init();
 800086a:	f000 f909 	bl	8000a80 <MX_GPIO_Init>
	MX_SDMMC1_SD_Init();
 800086e:	f000 f895 	bl	800099c <MX_SDMMC1_SD_Init>
	MX_UART8_Init();
 8000872:	f000 f8b9 	bl	80009e8 <MX_UART8_Init>
	MX_FATFS_Init();
 8000876:	f006 fcaf 	bl	80071d8 <MX_FATFS_Init>

	while (1)
	{
		printf("W5500_Init\n\r");
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <main+0xb8>)
 800087c:	f006 febe 	bl	80075fc <iprintf>
		//HAL_UART_Transmit(&huart8, (uint8_t*)&UART1_TxBuffer, countof(UART1_TxBuffer)-1, 1000);
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 8000880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <main+0xbc>)
 8000886:	f001 f932 	bl	8001aee <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800088a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088e:	f000 fbe3 	bl	8001058 <HAL_Delay>
		printf("W5500_Init\n\r");
 8000892:	e7f2      	b.n	800087a <main+0x9a>
 8000894:	58024400 	.word	0x58024400
 8000898:	080083dc 	.word	0x080083dc
 800089c:	58022000 	.word	0x58022000

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09e      	sub	sp, #120	; 0x78
 80008a4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008ac:	2004      	movs	r0, #4
 80008ae:	f001 f967 	bl	8001b80 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b37      	ldr	r3, [pc, #220]	; (8000994 <SystemClock_Config+0xf4>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ba:	4a36      	ldr	r2, [pc, #216]	; (8000994 <SystemClock_Config+0xf4>)
 80008bc:	f023 0301 	bic.w	r3, r3, #1
 80008c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <SystemClock_Config+0xf4>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b32      	ldr	r3, [pc, #200]	; (8000998 <SystemClock_Config+0xf8>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a31      	ldr	r2, [pc, #196]	; (8000998 <SystemClock_Config+0xf8>)
 80008d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <SystemClock_Config+0xf8>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e4:	bf00      	nop
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <SystemClock_Config+0xf8>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f2:	d1f8      	bne.n	80008e6 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090a:	2302      	movs	r3, #2
 800090c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800090e:	2305      	movs	r3, #5
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000922:	2304      	movs	r3, #4
 8000924:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000926:	2300      	movs	r3, #0
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800092a:	2308      	movs	r3, #8
 800092c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4618      	mov	r0, r3
 8000934:	f001 f97e 	bl	8001c34 <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800093e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000946:	f000 f90f 	bl	8000b68 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800094a:	233f      	movs	r3, #63	; 0x3f
 800094c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2303      	movs	r3, #3
 8000950:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000956:	2308      	movs	r3, #8
 8000958:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800095a:	2340      	movs	r3, #64	; 0x40
 800095c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095e:	2340      	movs	r3, #64	; 0x40
 8000960:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000966:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800096c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000970:	2104      	movs	r1, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fd6e 	bl	8002454 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800097e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000986:	f000 f8ef 	bl	8000b68 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 800098a:	bf00      	nop
 800098c:	3778      	adds	r7, #120	; 0x78
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	58000400 	.word	0x58000400
 8000998:	58024800 	.word	0x58024800

0800099c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SDMMC1_SD_Init+0x44>)
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <MX_SDMMC1_SD_Init+0x48>)
 80009a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SDMMC1_SD_Init+0x44>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SDMMC1_SD_Init+0x44>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_SDMMC1_SD_Init+0x44>)
 80009b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SDMMC1_SD_Init+0x44>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_SDMMC1_SD_Init+0x44>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SDMMC1_SD_Init+0x44>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_SDMMC1_SD_Init+0x44>)
 80009ce:	f002 ff37 	bl	8003840 <HAL_SD_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 80009d8:	f000 f8c6 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000a8 	.word	0x200000a8
 80009e4:	52007000 	.word	0x52007000

080009e8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_UART8_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_UART8_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_UART8_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_UART8_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a32:	f004 fac1 	bl	8004fb8 <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f894 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a44:	f005 fcf7 	bl	8006436 <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f88b 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a56:	f005 fd2c 	bl	80064b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 f882 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_UART8_Init+0x90>)
 8000a66:	f005 fcad 	bl	80063c4 <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 f87a 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000128 	.word	0x20000128
 8000a7c:	40007c00 	.word	0x40007c00

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	4a30      	ldr	r2, [pc, #192]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	4a29      	ldr	r2, [pc, #164]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	4a1a      	ldr	r2, [pc, #104]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_GPIO_Init+0xe0>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <MX_GPIO_Init+0xe4>)
 8000b34:	f000 ffc2 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_GPIO_Init+0xe4>)
 8000b52:	f000 fe03 	bl	800175c <HAL_GPIO_Init>

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	58024400 	.word	0x58024400
 8000b64:	58022000 	.word	0x58022000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_MspInit+0x30>)
 8000b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b84:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x30>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x30>)
 8000b90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	58024400 	.word	0x58024400

08000bac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <HAL_SD_MspInit+0xc8>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d14d      	bne.n	8000c6a <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <HAL_SD_MspInit+0xcc>)
 8000bd0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bd4:	4a28      	ldr	r2, [pc, #160]	; (8000c78 <HAL_SD_MspInit+0xcc>)
 8000bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bda:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <HAL_SD_MspInit+0xcc>)
 8000be0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <HAL_SD_MspInit+0xcc>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <HAL_SD_MspInit+0xcc>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <HAL_SD_MspInit+0xcc>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_SD_MspInit+0xcc>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_SD_MspInit+0xcc>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_SD_MspInit+0xcc>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8000c28:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c2c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <HAL_SD_MspInit+0xd0>)
 8000c46:	f000 fd89 	bl	800175c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c5a:	230c      	movs	r3, #12
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <HAL_SD_MspInit+0xd4>)
 8000c66:	f000 fd79 	bl	800175c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	52007000 	.word	0x52007000
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	58020800 	.word	0x58020800
 8000c80:	58020c00 	.word	0x58020c00

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_UART_MspInit+0x98>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d136      	bne.n	8000d14 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000ccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_UART_MspInit+0x9c>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000ce2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <HAL_UART_MspInit+0xa0>)
 8000d00:	f000 fd2c 	bl	800175c <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	2053      	movs	r0, #83	; 0x53
 8000d0a:	f000 faae 	bl	800126a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000d0e:	2053      	movs	r0, #83	; 0x53
 8000d10:	f000 fac5 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40007c00 	.word	0x40007c00
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58022400 	.word	0x58022400

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f94c 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <UART8_IRQHandler+0x10>)
 8000d8a:	f004 f9fb 	bl	8005184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000128 	.word	0x20000128

08000d98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e00a      	b.n	8000dc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000daa:	f3af 8000 	nop.w
 8000dae:	4601      	mov	r1, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf0      	blt.n	8000daa <_read+0x12>
	}

return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e009      	b.n	8000df8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fce1 	bl	80007b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbf1      	blt.n	8000de4 <_write+0x12>
	}
	return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_close>:

int _close(int file)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	return -1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e32:	605a      	str	r2, [r3, #4]
	return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_isatty>:

int _isatty(int file)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <_sbrk+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <_sbrk+0x60>)
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <_sbrk+0x64>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <_sbrk+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d207      	bcs.n	8000eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea4:	f006 fb78 	bl	8007598 <__errno>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	230c      	movs	r3, #12
 8000eac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	e009      	b.n	8000ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <_sbrk+0x64>)
 8000ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20020000 	.word	0x20020000
 8000ed4:	00000400 	.word	0x00000400
 8000ed8:	20000090 	.word	0x20000090
 8000edc:	20002228 	.word	0x20002228

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ee4:	f7ff fbcc 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eea:	e003      	b.n	8000ef4 <LoopCopyDataInit>

08000eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ef2:	3104      	adds	r1, #4

08000ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000efc:	d3f6      	bcc.n	8000eec <CopyDataInit>
  ldr  r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000f00:	e002      	b.n	8000f08 <LoopFillZerobss>

08000f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f04:	f842 3b04 	str.w	r3, [r2], #4

08000f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f0c:	d3f9      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f006 fb49 	bl	80075a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fc65 	bl	80007e0 <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f1c:	080084e0 	.word	0x080084e0
  ldr  r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f24:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000f28:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000f2c:	20002228 	.word	0x20002228

08000f30 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC3_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	f000 f98a 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f40:	f001 fc3e 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8000f44:	4601      	mov	r1, r0
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_Init+0x68>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	f003 030f 	and.w	r3, r3, #15
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_Init+0x6c>)
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_Init+0x68>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_Init+0x6c>)
 8000f68:	5cd3      	ldrb	r3, [r2, r3]
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	fa22 f303 	lsr.w	r3, r2, r3
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_Init+0x70>)
 8000f76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_Init+0x74>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f814 	bl	8000fac <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e002      	b.n	8000f94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8e:	f7ff fdf3 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	080083fc 	.word	0x080083fc
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	20000000 	.word	0x20000000

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x60>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e021      	b.n	8001004 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_InitTick+0x64>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_InitTick+0x60>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f96f 	bl	80012ba <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f939 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_InitTick+0x68>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000000c 	.word	0x2000000c
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000000c 	.word	0x2000000c
 800103c:	200001b4 	.word	0x200001b4

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200001b4 	.word	0x200001b4

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_Delay+0x40>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffde 	bl	8001040 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000000c 	.word	0x2000000c

0800109c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetREVID+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0c1b      	lsrs	r3, r3, #16
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	5c001000 	.word	0x5c001000

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <__NVIC_SetPriorityGrouping+0x40>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x40>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00
 80010f8:	05fa0000 	.word	0x05fa0000

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff29 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff40 	bl	80010fc <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff90 	bl	80011a8 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5f 	bl	8001154 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff33 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa4 	bl	8001210 <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e205      	b.n	80016f2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d004      	beq.n	80012fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e1fa      	b.n	80016f2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a8c      	ldr	r2, [pc, #560]	; (8001534 <HAL_DMA_Abort_IT+0x260>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d04a      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a8b      	ldr	r2, [pc, #556]	; (8001538 <HAL_DMA_Abort_IT+0x264>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d045      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a89      	ldr	r2, [pc, #548]	; (800153c <HAL_DMA_Abort_IT+0x268>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d040      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a88      	ldr	r2, [pc, #544]	; (8001540 <HAL_DMA_Abort_IT+0x26c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d03b      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a86      	ldr	r2, [pc, #536]	; (8001544 <HAL_DMA_Abort_IT+0x270>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d036      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a85      	ldr	r2, [pc, #532]	; (8001548 <HAL_DMA_Abort_IT+0x274>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d031      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a83      	ldr	r2, [pc, #524]	; (800154c <HAL_DMA_Abort_IT+0x278>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d02c      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a82      	ldr	r2, [pc, #520]	; (8001550 <HAL_DMA_Abort_IT+0x27c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d027      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a80      	ldr	r2, [pc, #512]	; (8001554 <HAL_DMA_Abort_IT+0x280>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d022      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7f      	ldr	r2, [pc, #508]	; (8001558 <HAL_DMA_Abort_IT+0x284>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d01d      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a7d      	ldr	r2, [pc, #500]	; (800155c <HAL_DMA_Abort_IT+0x288>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d018      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7c      	ldr	r2, [pc, #496]	; (8001560 <HAL_DMA_Abort_IT+0x28c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d013      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a7a      	ldr	r2, [pc, #488]	; (8001564 <HAL_DMA_Abort_IT+0x290>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00e      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a79      	ldr	r2, [pc, #484]	; (8001568 <HAL_DMA_Abort_IT+0x294>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d009      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a77      	ldr	r2, [pc, #476]	; (800156c <HAL_DMA_Abort_IT+0x298>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d004      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a76      	ldr	r2, [pc, #472]	; (8001570 <HAL_DMA_Abort_IT+0x29c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d101      	bne.n	80013a0 <HAL_DMA_Abort_IT+0xcc>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <HAL_DMA_Abort_IT+0xce>
 80013a0:	2300      	movs	r3, #0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d065      	beq.n	8001472 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2204      	movs	r2, #4
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a60      	ldr	r2, [pc, #384]	; (8001534 <HAL_DMA_Abort_IT+0x260>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d04a      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a5e      	ldr	r2, [pc, #376]	; (8001538 <HAL_DMA_Abort_IT+0x264>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d045      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a5d      	ldr	r2, [pc, #372]	; (800153c <HAL_DMA_Abort_IT+0x268>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d040      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a5b      	ldr	r2, [pc, #364]	; (8001540 <HAL_DMA_Abort_IT+0x26c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d03b      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a5a      	ldr	r2, [pc, #360]	; (8001544 <HAL_DMA_Abort_IT+0x270>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d036      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a58      	ldr	r2, [pc, #352]	; (8001548 <HAL_DMA_Abort_IT+0x274>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d031      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a57      	ldr	r2, [pc, #348]	; (800154c <HAL_DMA_Abort_IT+0x278>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d02c      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a55      	ldr	r2, [pc, #340]	; (8001550 <HAL_DMA_Abort_IT+0x27c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d027      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a54      	ldr	r2, [pc, #336]	; (8001554 <HAL_DMA_Abort_IT+0x280>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d022      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a52      	ldr	r2, [pc, #328]	; (8001558 <HAL_DMA_Abort_IT+0x284>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01d      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a51      	ldr	r2, [pc, #324]	; (800155c <HAL_DMA_Abort_IT+0x288>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d018      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a4f      	ldr	r2, [pc, #316]	; (8001560 <HAL_DMA_Abort_IT+0x28c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_DMA_Abort_IT+0x290>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d00e      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_DMA_Abort_IT+0x294>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d009      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a4b      	ldr	r2, [pc, #300]	; (800156c <HAL_DMA_Abort_IT+0x298>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d004      	beq.n	800144e <HAL_DMA_Abort_IT+0x17a>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a49      	ldr	r2, [pc, #292]	; (8001570 <HAL_DMA_Abort_IT+0x29c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d108      	bne.n	8001460 <HAL_DMA_Abort_IT+0x18c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0201 	bic.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e147      	b.n	80016f0 <HAL_DMA_Abort_IT+0x41c>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e13e      	b.n	80016f0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 020e 	bic.w	r2, r2, #14
 8001480:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a2b      	ldr	r2, [pc, #172]	; (8001534 <HAL_DMA_Abort_IT+0x260>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d04a      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a29      	ldr	r2, [pc, #164]	; (8001538 <HAL_DMA_Abort_IT+0x264>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d045      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a28      	ldr	r2, [pc, #160]	; (800153c <HAL_DMA_Abort_IT+0x268>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d040      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_DMA_Abort_IT+0x26c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d03b      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a25      	ldr	r2, [pc, #148]	; (8001544 <HAL_DMA_Abort_IT+0x270>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d036      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_DMA_Abort_IT+0x274>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d031      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_DMA_Abort_IT+0x278>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d02c      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a20      	ldr	r2, [pc, #128]	; (8001550 <HAL_DMA_Abort_IT+0x27c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d027      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <HAL_DMA_Abort_IT+0x280>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d022      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_DMA_Abort_IT+0x284>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01d      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <HAL_DMA_Abort_IT+0x288>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d018      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_DMA_Abort_IT+0x28c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_DMA_Abort_IT+0x290>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00e      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a17      	ldr	r2, [pc, #92]	; (8001568 <HAL_DMA_Abort_IT+0x294>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d009      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a16      	ldr	r2, [pc, #88]	; (800156c <HAL_DMA_Abort_IT+0x298>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d004      	beq.n	8001522 <HAL_DMA_Abort_IT+0x24e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_DMA_Abort_IT+0x29c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d128      	bne.n	8001574 <HAL_DMA_Abort_IT+0x2a0>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e027      	b.n	8001584 <HAL_DMA_Abort_IT+0x2b0>
 8001534:	40020010 	.word	0x40020010
 8001538:	40020028 	.word	0x40020028
 800153c:	40020040 	.word	0x40020040
 8001540:	40020058 	.word	0x40020058
 8001544:	40020070 	.word	0x40020070
 8001548:	40020088 	.word	0x40020088
 800154c:	400200a0 	.word	0x400200a0
 8001550:	400200b8 	.word	0x400200b8
 8001554:	40020410 	.word	0x40020410
 8001558:	40020428 	.word	0x40020428
 800155c:	40020440 	.word	0x40020440
 8001560:	40020458 	.word	0x40020458
 8001564:	40020470 	.word	0x40020470
 8001568:	40020488 	.word	0x40020488
 800156c:	400204a0 	.word	0x400204a0
 8001570:	400204b8 	.word	0x400204b8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a5c      	ldr	r2, [pc, #368]	; (80016fc <HAL_DMA_Abort_IT+0x428>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d072      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a5b      	ldr	r2, [pc, #364]	; (8001700 <HAL_DMA_Abort_IT+0x42c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d06d      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a59      	ldr	r2, [pc, #356]	; (8001704 <HAL_DMA_Abort_IT+0x430>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d068      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_DMA_Abort_IT+0x434>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d063      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a56      	ldr	r2, [pc, #344]	; (800170c <HAL_DMA_Abort_IT+0x438>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d05e      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a55      	ldr	r2, [pc, #340]	; (8001710 <HAL_DMA_Abort_IT+0x43c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d059      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a53      	ldr	r2, [pc, #332]	; (8001714 <HAL_DMA_Abort_IT+0x440>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d054      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a52      	ldr	r2, [pc, #328]	; (8001718 <HAL_DMA_Abort_IT+0x444>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d04f      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a50      	ldr	r2, [pc, #320]	; (800171c <HAL_DMA_Abort_IT+0x448>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d04a      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a4f      	ldr	r2, [pc, #316]	; (8001720 <HAL_DMA_Abort_IT+0x44c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d045      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a4d      	ldr	r2, [pc, #308]	; (8001724 <HAL_DMA_Abort_IT+0x450>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d040      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a4c      	ldr	r2, [pc, #304]	; (8001728 <HAL_DMA_Abort_IT+0x454>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d03b      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a4a      	ldr	r2, [pc, #296]	; (800172c <HAL_DMA_Abort_IT+0x458>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d036      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a49      	ldr	r2, [pc, #292]	; (8001730 <HAL_DMA_Abort_IT+0x45c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d031      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a47      	ldr	r2, [pc, #284]	; (8001734 <HAL_DMA_Abort_IT+0x460>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d02c      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a46      	ldr	r2, [pc, #280]	; (8001738 <HAL_DMA_Abort_IT+0x464>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d027      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a44      	ldr	r2, [pc, #272]	; (800173c <HAL_DMA_Abort_IT+0x468>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d022      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a43      	ldr	r2, [pc, #268]	; (8001740 <HAL_DMA_Abort_IT+0x46c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d01d      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a41      	ldr	r2, [pc, #260]	; (8001744 <HAL_DMA_Abort_IT+0x470>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d018      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a40      	ldr	r2, [pc, #256]	; (8001748 <HAL_DMA_Abort_IT+0x474>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d013      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a3e      	ldr	r2, [pc, #248]	; (800174c <HAL_DMA_Abort_IT+0x478>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00e      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <HAL_DMA_Abort_IT+0x47c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d009      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a3b      	ldr	r2, [pc, #236]	; (8001754 <HAL_DMA_Abort_IT+0x480>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d004      	beq.n	8001674 <HAL_DMA_Abort_IT+0x3a0>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a3a      	ldr	r2, [pc, #232]	; (8001758 <HAL_DMA_Abort_IT+0x484>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d101      	bne.n	8001678 <HAL_DMA_Abort_IT+0x3a4>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_DMA_Abort_IT+0x3a6>
 8001678:	2300      	movs	r3, #0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d028      	beq.n	80016d0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800168c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	2201      	movs	r2, #1
 800169e:	409a      	lsls	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80016ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00c      	beq.n	80016d0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40020010 	.word	0x40020010
 8001700:	40020028 	.word	0x40020028
 8001704:	40020040 	.word	0x40020040
 8001708:	40020058 	.word	0x40020058
 800170c:	40020070 	.word	0x40020070
 8001710:	40020088 	.word	0x40020088
 8001714:	400200a0 	.word	0x400200a0
 8001718:	400200b8 	.word	0x400200b8
 800171c:	40020410 	.word	0x40020410
 8001720:	40020428 	.word	0x40020428
 8001724:	40020440 	.word	0x40020440
 8001728:	40020458 	.word	0x40020458
 800172c:	40020470 	.word	0x40020470
 8001730:	40020488 	.word	0x40020488
 8001734:	400204a0 	.word	0x400204a0
 8001738:	400204b8 	.word	0x400204b8
 800173c:	58025408 	.word	0x58025408
 8001740:	5802541c 	.word	0x5802541c
 8001744:	58025430 	.word	0x58025430
 8001748:	58025444 	.word	0x58025444
 800174c:	58025458 	.word	0x58025458
 8001750:	5802546c 	.word	0x5802546c
 8001754:	58025480 	.word	0x58025480
 8001758:	58025494 	.word	0x58025494

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800176a:	4b89      	ldr	r3, [pc, #548]	; (8001990 <HAL_GPIO_Init+0x234>)
 800176c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800176e:	e194      	b.n	8001a9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8186 	beq.w	8001a94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d00b      	beq.n	80017a8 <HAL_GPIO_Init+0x4c>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d007      	beq.n	80017a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179c:	2b11      	cmp	r3, #17
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b12      	cmp	r3, #18
 80017a6:	d130      	bne.n	800180a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017de:	2201      	movs	r2, #1
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	f003 0201 	and.w	r2, r3, #1
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0xee>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b12      	cmp	r3, #18
 8001848:	d123      	bne.n	8001892 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	69b9      	ldr	r1, [r7, #24]
 800188e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80e0 	beq.w	8001a94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_GPIO_Init+0x238>)
 80018d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018da:	4a2e      	ldr	r2, [pc, #184]	; (8001994 <HAL_GPIO_Init+0x238>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_GPIO_Init+0x238>)
 80018e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a29      	ldr	r2, [pc, #164]	; (8001998 <HAL_GPIO_Init+0x23c>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a20      	ldr	r2, [pc, #128]	; (800199c <HAL_GPIO_Init+0x240>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d052      	beq.n	80019c4 <HAL_GPIO_Init+0x268>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_GPIO_Init+0x244>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d031      	beq.n	800198a <HAL_GPIO_Init+0x22e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_GPIO_Init+0x248>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d02b      	beq.n	8001986 <HAL_GPIO_Init+0x22a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_GPIO_Init+0x24c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d025      	beq.n	8001982 <HAL_GPIO_Init+0x226>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_GPIO_Init+0x250>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01f      	beq.n	800197e <HAL_GPIO_Init+0x222>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_GPIO_Init+0x254>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d019      	beq.n	800197a <HAL_GPIO_Init+0x21e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a1a      	ldr	r2, [pc, #104]	; (80019b4 <HAL_GPIO_Init+0x258>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_GPIO_Init+0x25c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00d      	beq.n	8001972 <HAL_GPIO_Init+0x216>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x260>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x212>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <HAL_GPIO_Init+0x264>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_GPIO_Init+0x20e>
 8001966:	2309      	movs	r3, #9
 8001968:	e02d      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800196a:	230a      	movs	r3, #10
 800196c:	e02b      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800196e:	2308      	movs	r3, #8
 8001970:	e029      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 8001972:	2307      	movs	r3, #7
 8001974:	e027      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 8001976:	2306      	movs	r3, #6
 8001978:	e025      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800197a:	2305      	movs	r3, #5
 800197c:	e023      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800197e:	2304      	movs	r3, #4
 8001980:	e021      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 8001982:	2303      	movs	r3, #3
 8001984:	e01f      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 8001986:	2302      	movs	r3, #2
 8001988:	e01d      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800198a:	2301      	movs	r3, #1
 800198c:	e01b      	b.n	80019c6 <HAL_GPIO_Init+0x26a>
 800198e:	bf00      	nop
 8001990:	58000080 	.word	0x58000080
 8001994:	58024400 	.word	0x58024400
 8001998:	58000400 	.word	0x58000400
 800199c:	58020000 	.word	0x58020000
 80019a0:	58020400 	.word	0x58020400
 80019a4:	58020800 	.word	0x58020800
 80019a8:	58020c00 	.word	0x58020c00
 80019ac:	58021000 	.word	0x58021000
 80019b0:	58021400 	.word	0x58021400
 80019b4:	58021800 	.word	0x58021800
 80019b8:	58021c00 	.word	0x58021c00
 80019bc:	58022000 	.word	0x58022000
 80019c0:	58022400 	.word	0x58022400
 80019c4:	2300      	movs	r3, #0
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d6:	4938      	ldr	r1, [pc, #224]	; (8001ab8 <HAL_GPIO_Init+0x35c>)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae63 	bne.w	8001770 <HAL_GPIO_Init+0x14>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	58000400 	.word	0x58000400

08001abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ad8:	e003      	b.n	8001ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	041a      	lsls	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	401a      	ands	r2, r3
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d104      	bne.n	8001b12 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	041a      	lsls	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001b2c:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_HSEM_FastTake+0x2c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3320      	adds	r3, #32
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_HSEM_FastTake+0x30>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	58026400 	.word	0x58026400
 8001b54:	80000300 	.word	0x80000300

08001b58 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001b62:	4906      	ldr	r1, [pc, #24]	; (8001b7c <HAL_HSEM_Release+0x24>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	58026400 	.word	0x58026400

08001b80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	2b06      	cmp	r3, #6
 8001b92:	d00a      	beq.n	8001baa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e040      	b.n	8001c28 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e03e      	b.n	8001c28 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001bb2:	491f      	ldr	r1, [pc, #124]	; (8001c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001bba:	f7ff fa41 	bl	8001040 <HAL_GetTick>
 8001bbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bc0:	e009      	b.n	8001bd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bc2:	f7ff fa3d 	bl	8001040 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd0:	d901      	bls.n	8001bd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e028      	b.n	8001c28 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be2:	d1ee      	bne.n	8001bc2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b1e      	cmp	r3, #30
 8001be8:	d008      	beq.n	8001bfc <HAL_PWREx_ConfigSupply+0x7c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b2e      	cmp	r3, #46	; 0x2e
 8001bee:	d005      	beq.n	8001bfc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b1d      	cmp	r3, #29
 8001bf4:	d002      	beq.n	8001bfc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b2d      	cmp	r3, #45	; 0x2d
 8001bfa:	d114      	bne.n	8001c26 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001bfc:	f7ff fa20 	bl	8001040 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c02:	e009      	b.n	8001c18 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c04:	f7ff fa1c 	bl	8001040 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c12:	d901      	bls.n	8001c18 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e007      	b.n	8001c28 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d1ee      	bne.n	8001c04 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	58024800 	.word	0x58024800

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e3ff      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8087 	beq.w	8001d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c54:	4b99      	ldr	r3, [pc, #612]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c5e:	4b97      	ldr	r3, [pc, #604]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d007      	beq.n	8001c7a <HAL_RCC_OscConfig+0x46>
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	2b18      	cmp	r3, #24
 8001c6e:	d110      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5e>
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d10b      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	4b90      	ldr	r3, [pc, #576]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x12c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d168      	bne.n	8001d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e3d9      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x76>
 8001c9c:	4b87      	ldr	r3, [pc, #540]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a86      	ldr	r2, [pc, #536]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e02e      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x98>
 8001cb2:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a81      	ldr	r2, [pc, #516]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b7f      	ldr	r3, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7e      	ldr	r2, [pc, #504]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xbc>
 8001cd6:	4b79      	ldr	r3, [pc, #484]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a78      	ldr	r2, [pc, #480]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a75      	ldr	r2, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001cf0:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a71      	ldr	r2, [pc, #452]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6e      	ldr	r2, [pc, #440]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f996 	bl	8001040 <HAL_GetTick>
 8001d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff f992 	bl	8001040 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e38d      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d2a:	4b64      	ldr	r3, [pc, #400]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xe4>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff f982 	bl	8001040 <HAL_GetTick>
 8001d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff f97e 	bl	8001040 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e379      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d52:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x10c>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80ae 	beq.w	8001ecc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d70:	4b52      	ldr	r3, [pc, #328]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_RCC_OscConfig+0x162>
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	2b18      	cmp	r3, #24
 8001d8a:	d13a      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1ce>
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d135      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x17a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e34b      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	f7ff f975 	bl	800109c <HAL_GetREVID>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f241 0303 	movw	r3, #4099	; 0x1003
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d817      	bhi.n	8001dec <HAL_RCC_OscConfig+0x1b8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b40      	cmp	r3, #64	; 0x40
 8001dc2:	d108      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1a2>
 8001dc4:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001dcc:	4a3b      	ldr	r2, [pc, #236]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd4:	e07a      	b.n	8001ecc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	031b      	lsls	r3, r3, #12
 8001de4:	4935      	ldr	r1, [pc, #212]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dea:	e06f      	b.n	8001ecc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	4930      	ldr	r1, [pc, #192]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e00:	e064      	b.n	8001ecc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d045      	beq.n	8001e96 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 0219 	bic.w	r2, r3, #25
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	4929      	ldr	r1, [pc, #164]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f910 	bl	8001040 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff f90c 	bl	8001040 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e307      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	f7ff f92b 	bl	800109c <HAL_GetREVID>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d817      	bhi.n	8001e80 <HAL_RCC_OscConfig+0x24c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b40      	cmp	r3, #64	; 0x40
 8001e56:	d108      	bne.n	8001e6a <HAL_RCC_OscConfig+0x236>
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e60:	4a16      	ldr	r2, [pc, #88]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e66:	6053      	str	r3, [r2, #4]
 8001e68:	e030      	b.n	8001ecc <HAL_RCC_OscConfig+0x298>
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	031b      	lsls	r3, r3, #12
 8001e78:	4910      	ldr	r1, [pc, #64]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
 8001e7e:	e025      	b.n	8001ecc <HAL_RCC_OscConfig+0x298>
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	490b      	ldr	r1, [pc, #44]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
 8001e94:	e01a      	b.n	8001ecc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_RCC_OscConfig+0x288>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7ff f8cd 	bl	8001040 <HAL_GetTick>
 8001ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7ff f8c9 	bl	8001040 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d903      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e2c4      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
 8001ebc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ec0:	4ba4      	ldr	r3, [pc, #656]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ee      	bne.n	8001eaa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a9 	beq.w	800202c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eda:	4b9e      	ldr	r3, [pc, #632]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ee2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ee4:	4b9b      	ldr	r3, [pc, #620]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d007      	beq.n	8001f00 <HAL_RCC_OscConfig+0x2cc>
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b18      	cmp	r3, #24
 8001ef4:	d13a      	bne.n	8001f6c <HAL_RCC_OscConfig+0x338>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d135      	bne.n	8001f6c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f00:	4b94      	ldr	r3, [pc, #592]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2e4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e296      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f18:	f7ff f8c0 	bl	800109c <HAL_GetREVID>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d817      	bhi.n	8001f56 <HAL_RCC_OscConfig+0x322>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_OscConfig+0x30c>
 8001f2e:	4b89      	ldr	r3, [pc, #548]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f36:	4a87      	ldr	r2, [pc, #540]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f3c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f3e:	e075      	b.n	800202c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f40:	4b84      	ldr	r3, [pc, #528]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	069b      	lsls	r3, r3, #26
 8001f4e:	4981      	ldr	r1, [pc, #516]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f54:	e06a      	b.n	800202c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f56:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	061b      	lsls	r3, r3, #24
 8001f64:	497b      	ldr	r1, [pc, #492]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f6a:	e05f      	b.n	800202c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d042      	beq.n	8001ffa <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f74:	4b77      	ldr	r3, [pc, #476]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a76      	ldr	r2, [pc, #472]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff f85e 	bl	8001040 <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f88:	f7ff f85a 	bl	8001040 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e255      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f9a:	4b6e      	ldr	r3, [pc, #440]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fa6:	f7ff f879 	bl	800109c <HAL_GetREVID>
 8001faa:	4602      	mov	r2, r0
 8001fac:	f241 0303 	movw	r3, #4099	; 0x1003
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d817      	bhi.n	8001fe4 <HAL_RCC_OscConfig+0x3b0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d108      	bne.n	8001fce <HAL_RCC_OscConfig+0x39a>
 8001fbc:	4b65      	ldr	r3, [pc, #404]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fc4:	4a63      	ldr	r2, [pc, #396]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001fc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fca:	6053      	str	r3, [r2, #4]
 8001fcc:	e02e      	b.n	800202c <HAL_RCC_OscConfig+0x3f8>
 8001fce:	4b61      	ldr	r3, [pc, #388]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	069b      	lsls	r3, r3, #26
 8001fdc:	495d      	ldr	r1, [pc, #372]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
 8001fe2:	e023      	b.n	800202c <HAL_RCC_OscConfig+0x3f8>
 8001fe4:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	4958      	ldr	r1, [pc, #352]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
 8001ff8:	e018      	b.n	800202c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a55      	ldr	r2, [pc, #340]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8002000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7ff f81b 	bl	8001040 <HAL_GetTick>
 800200a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800200e:	f7ff f817 	bl	8001040 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e212      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002020:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d036      	beq.n	80020a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d019      	beq.n	8002074 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002040:	4b44      	ldr	r3, [pc, #272]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8002042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002044:	4a43      	ldr	r2, [pc, #268]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7fe fff8 	bl	8001040 <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002054:	f7fe fff4 	bl	8001040 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1ef      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002066:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x420>
 8002072:	e018      	b.n	80020a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002074:	4b37      	ldr	r3, [pc, #220]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8002076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002078:	4a36      	ldr	r2, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7fe ffde 	bl	8001040 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002088:	f7fe ffda 	bl	8001040 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1d5      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800209a:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d036      	beq.n	8002120 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d019      	beq.n	80020ee <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a25      	ldr	r2, [pc, #148]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 80020c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020c6:	f7fe ffbb 	bl	8001040 <HAL_GetTick>
 80020ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80020ce:	f7fe ffb7 	bl	8001040 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e1b2      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x49a>
 80020ec:	e018      	b.n	8002120 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 80020f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020fa:	f7fe ffa1 	bl	8001040 <HAL_GetTick>
 80020fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002102:	f7fe ff9d 	bl	8001040 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e198      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCC_OscConfig+0x520>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8085 	beq.w	8002238 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_OscConfig+0x524>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x524>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800213a:	f7fe ff81 	bl	8001040 <HAL_GetTick>
 800213e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002140:	e00c      	b.n	800215c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7fe ff7d 	bl	8001040 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d905      	bls.n	800215c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e178      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
 8002154:	58024400 	.word	0x58024400
 8002158:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800215c:	4b96      	ldr	r3, [pc, #600]	; (80023b8 <HAL_RCC_OscConfig+0x784>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ec      	beq.n	8002142 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x54a>
 8002170:	4b92      	ldr	r3, [pc, #584]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a91      	ldr	r2, [pc, #580]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	e02d      	b.n	80021da <HAL_RCC_OscConfig+0x5a6>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x56c>
 8002186:	4b8d      	ldr	r3, [pc, #564]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a8c      	ldr	r2, [pc, #560]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	4b8a      	ldr	r3, [pc, #552]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a89      	ldr	r2, [pc, #548]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	e01c      	b.n	80021da <HAL_RCC_OscConfig+0x5a6>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d10c      	bne.n	80021c2 <HAL_RCC_OscConfig+0x58e>
 80021a8:	4b84      	ldr	r3, [pc, #528]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a83      	ldr	r2, [pc, #524]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a80      	ldr	r2, [pc, #512]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	e00b      	b.n	80021da <HAL_RCC_OscConfig+0x5a6>
 80021c2:	4b7e      	ldr	r3, [pc, #504]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a7d      	ldr	r2, [pc, #500]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	4b7b      	ldr	r3, [pc, #492]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a7a      	ldr	r2, [pc, #488]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d015      	beq.n	800220e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7fe ff2d 	bl	8001040 <HAL_GetTick>
 80021e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7fe ff29 	bl	8001040 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e122      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002200:	4b6e      	ldr	r3, [pc, #440]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ee      	beq.n	80021ea <HAL_RCC_OscConfig+0x5b6>
 800220c:	e014      	b.n	8002238 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe ff17 	bl	8001040 <HAL_GetTick>
 8002212:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe ff13 	bl	8001040 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e10c      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800222c:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8101 	beq.w	8002444 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002242:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800224a:	2b18      	cmp	r3, #24
 800224c:	f000 80bc 	beq.w	80023c8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	2b02      	cmp	r3, #2
 8002256:	f040 8095 	bne.w	8002384 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b58      	ldr	r3, [pc, #352]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a57      	ldr	r2, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7fe feeb 	bl	8001040 <HAL_GetTick>
 800226a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe fee7 	bl	8001040 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0e2      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002280:	4b4e      	ldr	r3, [pc, #312]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228c:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800228e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002290:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <HAL_RCC_OscConfig+0x78c>)
 8002292:	4013      	ands	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	430a      	orrs	r2, r1
 80022a0:	4946      	ldr	r1, [pc, #280]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	628b      	str	r3, [r1, #40]	; 0x28
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b4:	3b01      	subs	r3, #1
 80022b6:	025b      	lsls	r3, r3, #9
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	3b01      	subs	r3, #1
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	3b01      	subs	r3, #1
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022d6:	4939      	ldr	r1, [pc, #228]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80022dc:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	4a36      	ldr	r2, [pc, #216]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022e8:	4b34      	ldr	r3, [pc, #208]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80022ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ec:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <HAL_RCC_OscConfig+0x790>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022f4:	00d2      	lsls	r2, r2, #3
 80022f6:	4931      	ldr	r1, [pc, #196]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f023 020c 	bic.w	r2, r3, #12
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	492c      	ldr	r1, [pc, #176]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800230a:	4313      	orrs	r3, r2
 800230c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800230e:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f023 0202 	bic.w	r2, r3, #2
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4928      	ldr	r1, [pc, #160]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800231c:	4313      	orrs	r3, r2
 800231e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	4a25      	ldr	r2, [pc, #148]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800233e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fe70 	bl	8001040 <HAL_GetTick>
 8002360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fe6c 	bl	8001040 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e067      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x730>
 8002382:	e05f      	b.n	8002444 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 800238a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fe56 	bl	8001040 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe fe52 	bl	8001040 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e04d      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_RCC_OscConfig+0x788>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x764>
 80023b6:	e045      	b.n	8002444 <HAL_RCC_OscConfig+0x810>
 80023b8:	58024800 	.word	0x58024800
 80023bc:	58024400 	.word	0x58024400
 80023c0:	fffffc0c 	.word	0xfffffc0c
 80023c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <HAL_RCC_OscConfig+0x81c>)
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_OscConfig+0x81c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d031      	beq.n	8002440 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d12a      	bne.n	8002440 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d122      	bne.n	8002440 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d11a      	bne.n	8002440 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	0a5b      	lsrs	r3, r3, #9
 800240e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002416:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d111      	bne.n	8002440 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	0c1b      	lsrs	r3, r3, #16
 8002420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d108      	bne.n	8002440 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0e1b      	lsrs	r3, r3, #24
 8002432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3730      	adds	r7, #48	; 0x30
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	58024400 	.word	0x58024400

08002454 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e19c      	b.n	80027a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b8a      	ldr	r3, [pc, #552]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d910      	bls.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b87      	ldr	r3, [pc, #540]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 020f 	bic.w	r2, r3, #15
 800247e:	4985      	ldr	r1, [pc, #532]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b83      	ldr	r3, [pc, #524]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e184      	b.n	80027a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d010      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	4b7b      	ldr	r3, [pc, #492]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d908      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024b4:	4b78      	ldr	r3, [pc, #480]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	4975      	ldr	r1, [pc, #468]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d010      	beq.n	80024f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024de:	429a      	cmp	r2, r3
 80024e0:	d908      	bls.n	80024f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024e2:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	496a      	ldr	r1, [pc, #424]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	4b64      	ldr	r3, [pc, #400]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800250c:	429a      	cmp	r2, r3
 800250e:	d908      	bls.n	8002522 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002510:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	495e      	ldr	r1, [pc, #376]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800251e:	4313      	orrs	r3, r2
 8002520:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d010      	beq.n	8002550 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800253a:	429a      	cmp	r2, r3
 800253c:	d908      	bls.n	8002550 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4953      	ldr	r1, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800254c:	4313      	orrs	r3, r2
 800254e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d010      	beq.n	800257e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	429a      	cmp	r2, r3
 800256a:	d908      	bls.n	800257e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256c:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f023 020f 	bic.w	r2, r3, #15
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4947      	ldr	r1, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800257a:	4313      	orrs	r3, r2
 800257c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d055      	beq.n	8002636 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4940      	ldr	r1, [pc, #256]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002598:	4313      	orrs	r3, r2
 800259a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a4:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d121      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0f6      	b.n	80027a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025bc:	4b36      	ldr	r3, [pc, #216]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d115      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0ea      	b.n	80027a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0de      	b.n	80027a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d6      	b.n	80027a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f023 0207 	bic.w	r2, r3, #7
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4925      	ldr	r1, [pc, #148]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002602:	4313      	orrs	r3, r2
 8002604:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7fe fd1b 	bl	8001040 <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260c:	e00a      	b.n	8002624 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260e:	f7fe fd17 	bl	8001040 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	; 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0be      	b.n	80027a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	429a      	cmp	r2, r3
 8002634:	d1eb      	bne.n	800260e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	429a      	cmp	r2, r3
 8002650:	d208      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f023 020f 	bic.w	r2, r3, #15
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	490e      	ldr	r1, [pc, #56]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002660:	4313      	orrs	r3, r2
 8002662:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d214      	bcs.n	800269c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 020f 	bic.w	r2, r3, #15
 800267a:	4906      	ldr	r1, [pc, #24]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e086      	b.n	80027a2 <HAL_RCC_ClockConfig+0x34e>
 8002694:	52002000 	.word	0x52002000
 8002698:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d010      	beq.n	80026ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d208      	bcs.n	80026ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026b8:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	4939      	ldr	r1, [pc, #228]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d010      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	4b34      	ldr	r3, [pc, #208]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d208      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026e6:	4b31      	ldr	r3, [pc, #196]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	492e      	ldr	r1, [pc, #184]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699a      	ldr	r2, [r3, #24]
 8002708:	4b28      	ldr	r3, [pc, #160]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002710:	429a      	cmp	r2, r3
 8002712:	d208      	bcs.n	8002726 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4922      	ldr	r1, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 8002722:	4313      	orrs	r3, r2
 8002724:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d010      	beq.n	8002754 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800273e:	429a      	cmp	r2, r3
 8002740:	d208      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4917      	ldr	r1, [pc, #92]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 8002750:	4313      	orrs	r3, r2
 8002752:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002754:	f000 f834 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8002758:	4601      	mov	r1, r0
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x35c>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	fa21 f303 	lsr.w	r3, r1, r3
 8002770:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x358>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <HAL_RCC_ClockConfig+0x35c>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x360>)
 800278a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x364>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x368>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fc08 	bl	8000fac <HAL_InitTick>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	58024400 	.word	0x58024400
 80027b0:	080083fc 	.word	0x080083fc
 80027b4:	20000004 	.word	0x20000004
 80027b8:	20000000 	.word	0x20000000
 80027bc:	20000008 	.word	0x20000008

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027c6:	4baf      	ldr	r3, [pc, #700]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ce:	2b18      	cmp	r3, #24
 80027d0:	f200 814e 	bhi.w	8002a70 <HAL_RCC_GetSysClockFreq+0x2b0>
 80027d4:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	08002841 	.word	0x08002841
 80027e0:	08002a71 	.word	0x08002a71
 80027e4:	08002a71 	.word	0x08002a71
 80027e8:	08002a71 	.word	0x08002a71
 80027ec:	08002a71 	.word	0x08002a71
 80027f0:	08002a71 	.word	0x08002a71
 80027f4:	08002a71 	.word	0x08002a71
 80027f8:	08002a71 	.word	0x08002a71
 80027fc:	08002867 	.word	0x08002867
 8002800:	08002a71 	.word	0x08002a71
 8002804:	08002a71 	.word	0x08002a71
 8002808:	08002a71 	.word	0x08002a71
 800280c:	08002a71 	.word	0x08002a71
 8002810:	08002a71 	.word	0x08002a71
 8002814:	08002a71 	.word	0x08002a71
 8002818:	08002a71 	.word	0x08002a71
 800281c:	0800286d 	.word	0x0800286d
 8002820:	08002a71 	.word	0x08002a71
 8002824:	08002a71 	.word	0x08002a71
 8002828:	08002a71 	.word	0x08002a71
 800282c:	08002a71 	.word	0x08002a71
 8002830:	08002a71 	.word	0x08002a71
 8002834:	08002a71 	.word	0x08002a71
 8002838:	08002a71 	.word	0x08002a71
 800283c:	08002873 	.word	0x08002873
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002840:	4b90      	ldr	r3, [pc, #576]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d009      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800284c:	4b8d      	ldr	r3, [pc, #564]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	4a8c      	ldr	r2, [pc, #560]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800285e:	e10a      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002860:	4b89      	ldr	r3, [pc, #548]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002862:	61bb      	str	r3, [r7, #24]
    break;
 8002864:	e107      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002866:	4b89      	ldr	r3, [pc, #548]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002868:	61bb      	str	r3, [r7, #24]
    break;
 800286a:	e104      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800286c:	4b88      	ldr	r3, [pc, #544]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800286e:	61bb      	str	r3, [r7, #24]
    break;
 8002870:	e101      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002872:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800287c:	4b81      	ldr	r3, [pc, #516]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002886:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002888:	4b7e      	ldr	r3, [pc, #504]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002892:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80da 	beq.w	8002a6a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d05a      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x1b2>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d302      	bcc.n	80028c6 <HAL_RCC_GetSysClockFreq+0x106>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d078      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80028c4:	e099      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028c6:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d02d      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028d2:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	08db      	lsrs	r3, r3, #3
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	4a6a      	ldr	r2, [pc, #424]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800290c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002910:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800291c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002928:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800292c:	e087      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002938:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002a98 <HAL_RCC_GetSysClockFreq+0x2d8>
 800293c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002950:	ed97 6a02 	vldr	s12, [r7, #8]
 8002954:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800295c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002970:	e065      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002a9c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002994:	ed97 6a02 	vldr	s12, [r7, #8]
 8002998:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 800299c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029b4:	e043      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002aa0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80029c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80029dc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 80029e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029f8:	e021      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a04:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002a9c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a14:	ee07 3a90 	vmov	s15, r3
 8002a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a20:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a3c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	0a5b      	lsrs	r3, r3, #9
 8002a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a48:	3301      	adds	r3, #1
 8002a4a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a62:	ee17 3a90 	vmov	r3, s15
 8002a66:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002a68:	e005      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
    break;
 8002a6e:	e002      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002a72:	61bb      	str	r3, [r7, #24]
    break;
 8002a74:	bf00      	nop
  }

  return sysclockfreq;
 8002a76:	69bb      	ldr	r3, [r7, #24]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3724      	adds	r7, #36	; 0x24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	58024400 	.word	0x58024400
 8002a88:	03d09000 	.word	0x03d09000
 8002a8c:	003d0900 	.word	0x003d0900
 8002a90:	017d7840 	.word	0x017d7840
 8002a94:	46000000 	.word	0x46000000
 8002a98:	4c742400 	.word	0x4c742400
 8002a9c:	4a742400 	.word	0x4a742400
 8002aa0:	4bbebc20 	.word	0x4bbebc20

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002aaa:	f7ff fe89 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <HAL_RCC_GetHCLKFreq+0x58>)
 8002ae0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ae2:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <HAL_RCC_GetHCLKFreq+0x58>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	58024400 	.word	0x58024400
 8002af8:	080083fc 	.word	0x080083fc
 8002afc:	20000004 	.word	0x20000004
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b08:	f7ff ffcc 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4601      	mov	r1, r0
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	080083fc 	.word	0x080083fc

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b34:	f7ff ffb6 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002b38:	4601      	mov	r1, r0
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	58024400 	.word	0x58024400
 8002b58:	080083fc 	.word	0x080083fc

08002b5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b090      	sub	sp, #64	; 0x40
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6a:	d150      	bne.n	8002c0e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002b6c:	4ba1      	ldr	r3, [pc, #644]	; (8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d844      	bhi.n	8002c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002b99 	.word	0x08002b99
 8002b88:	08002ba9 	.word	0x08002ba9
 8002b8c:	08002bb9 	.word	0x08002bb9
 8002b90:	08002c01 	.word	0x08002c01
 8002b94:	08002bc9 	.word	0x08002bc9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fd03 	bl	80035a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ba6:	e241      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ba8:	f107 0318 	add.w	r3, r7, #24
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fa63 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002bb6:	e239      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fba7 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002bc6:	e231      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002bc8:	4b8a      	ldr	r3, [pc, #552]	; (8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002bd8:	4b87      	ldr	r3, [pc, #540]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002bdc:	e226      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be4:	d102      	bne.n	8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8002be6:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002be8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002bea:	e21f      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf2:	d102      	bne.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8002bf4:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002bf8:	e218      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002bfe:	e215      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002c00:	4b80      	ldr	r3, [pc, #512]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c04:	e212      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c0a:	bf00      	nop
 8002c0c:	e20e      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c14:	d14f      	bne.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002c16:	4b77      	ldr	r3, [pc, #476]	; (8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d01c      	beq.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d804      	bhi.n	8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d00e      	beq.n	8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002c32:	e03c      	b.n	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8002c34:	2bc0      	cmp	r3, #192	; 0xc0
 8002c36:	d037      	beq.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8002c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3c:	d018      	beq.n	8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8002c3e:	e036      	b.n	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fcaf 	bl	80035a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c4e:	e1ed      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002c50:	f107 0318 	add.w	r3, r7, #24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fa0f 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c5e:	e1e5      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002c60:	f107 030c 	add.w	r3, r7, #12
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fb53 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c6e:	e1dd      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002c70:	4b60      	ldr	r3, [pc, #384]	; (8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002c80:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002c84:	e1d2      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c8c:	d102      	bne.n	8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002c92:	e1cb      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8002c9c:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ca0:	e1c4      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ca6:	e1c1      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ca8:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002cac:	e1be      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002cb2:	bf00      	nop
 8002cb4:	e1ba      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbc:	d153      	bne.n	8002d66 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8002cbe:	4b4d      	ldr	r3, [pc, #308]	; (8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cce:	d01f      	beq.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8002cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd4:	d805      	bhi.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8002cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cde:	d00f      	beq.n	8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002ce0:	e03d      	b.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8002ce2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ce6:	d037      	beq.n	8002d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8002ce8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cec:	d018      	beq.n	8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8002cee:	e036      	b.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fc57 	bl	80035a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002cfe:	e195      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002d00:	f107 0318 	add.w	r3, r7, #24
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 f9b7 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d0e:	e18d      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fafb 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d1e:	e185      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002d30:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002d34:	e17a      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d3c:	d102      	bne.n	8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8002d3e:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d42:	e173      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d50:	e16c      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d56:	e169      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d5c:	e166      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002d62:	bf00      	nop
 8002d64:	e162      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6c:	d15d      	bne.n	8002e2a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d7e:	d01f      	beq.n	8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8002d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d84:	d805      	bhi.n	8002d92 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8002d8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8e:	d00f      	beq.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8002d90:	e047      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8002d92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d96:	d041      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8002d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d9c:	d018      	beq.n	8002dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8002d9e:	e040      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fbff 	bl	80035a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002dae:	e13d      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002db0:	f107 0318 	add.w	r3, r7, #24
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f95f 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002dbe:	e135      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002dc0:	f107 030c 	add.w	r3, r7, #12
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 faa3 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002dce:	e12d      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002de4:	e122      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8002dee:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002df2:	e11b      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8002df4:	58024400 	.word	0x58024400
 8002df8:	03d09000 	.word	0x03d09000
 8002dfc:	003d0900 	.word	0x003d0900
 8002e00:	017d7840 	.word	0x017d7840
 8002e04:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8002e10:	4b89      	ldr	r3, [pc, #548]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e14:	e10a      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e1a:	e107      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002e1c:	4b87      	ldr	r3, [pc, #540]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e20:	e104      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e26:	bf00      	nop
 8002e28:	e100      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e30:	d153      	bne.n	8002eda <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8002e32:	4b83      	ldr	r3, [pc, #524]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8002e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e36:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002e3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e42:	d01f      	beq.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8002e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e48:	d805      	bhi.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e52:	d00f      	beq.n	8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8002e54:	e03d      	b.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8002e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e5a:	d037      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8002e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e60:	d018      	beq.n	8002e94 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8002e62:	e036      	b.n	8002ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fb9d 	bl	80035a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e72:	e0db      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002e74:	f107 0318 	add.w	r3, r7, #24
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f8fd 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e82:	e0d3      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fa41 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e92:	e0cb      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002ea4:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002ea8:	e0c0      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb0:	d102      	bne.n	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8002eb2:	4b65      	ldr	r3, [pc, #404]	; (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8002eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002eb6:	e0b9      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ebe:	d102      	bne.n	8002ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8002ec0:	4b5d      	ldr	r3, [pc, #372]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ec4:	e0b2      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002eca:	e0af      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8002ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ed0:	e0ac      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ed6:	bf00      	nop
 8002ed8:	e0a8      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ee0:	d13d      	bne.n	8002f5e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8002ee2:	4b57      	ldr	r3, [pc, #348]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef2:	d00c      	beq.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8002ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef8:	d011      	beq.n	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d12b      	bne.n	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002efe:	f107 0318 	add.w	r3, r7, #24
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f8b8 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f0c:	e08e      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f9fc 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f1c:	e086      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f1e:	4b48      	ldr	r3, [pc, #288]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002f2e:	4b45      	ldr	r3, [pc, #276]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002f32:	e07b      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8002f3c:	4b42      	ldr	r3, [pc, #264]	; (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f40:	e074      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f48:	d102      	bne.n	8002f50 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8002f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f4e:	e06d      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f54:	e06a      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f5a:	bf00      	nop
 8002f5c:	e066      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d11f      	bne.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8002f66:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8002f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8002f7c:	e00f      	b.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fb10 	bl	80035a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f8c:	e04e      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f8e:	f107 0318 	add.w	r3, r7, #24
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f870 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f9c:	e046      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fa2:	bf00      	nop
 8002fa4:	e042      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fac:	d13c      	bne.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002fb6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fbe:	d01e      	beq.n	8002ffe <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8002fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc4:	d805      	bhi.n	8002fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8002fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fce:	d00e      	beq.n	8002fee <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8002fd0:	e026      	b.n	8003020 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d01d      	beq.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8002fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fdc:	d01d      	beq.n	800301a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8002fde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fe2:	d014      	beq.n	800300e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8002fe4:	e01c      	b.n	8003020 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8002fe6:	f000 f831 	bl	800304c <HAL_RCCEx_GetD3PCLK1Freq>
 8002fea:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8002fec:	e01e      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002fee:	f107 0318 	add.w	r3, r7, #24
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f840 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ffc:	e016      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f984 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800300c:	e00e      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003012:	e00b      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003018:	e008      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800301e:	e005      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003024:	bf00      	nop
 8003026:	e001      	b.n	800302c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800302c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800302e:	4618      	mov	r0, r3
 8003030:	3740      	adds	r7, #64	; 0x40
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	017d7840 	.word	0x017d7840
 800303c:	00bb8000 	.word	0x00bb8000
 8003040:	58024400 	.word	0x58024400
 8003044:	03d09000 	.word	0x03d09000
 8003048:	003d0900 	.word	0x003d0900

0800304c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003050:	f7ff fd28 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8003054:	4601      	mov	r1, r0
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	58024400 	.word	0x58024400
 8003074:	080083fc 	.word	0x080083fc

08003078 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003080:	4b9d      	ldr	r3, [pc, #628]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800308a:	4b9b      	ldr	r3, [pc, #620]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	0b1b      	lsrs	r3, r3, #12
 8003090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003094:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003096:	4b98      	ldr	r3, [pc, #608]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80030a2:	4b95      	ldr	r3, [pc, #596]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	08db      	lsrs	r3, r3, #3
 80030a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 810a 	beq.w	80032da <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d05a      	beq.n	8003182 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d302      	bcc.n	80030d6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d078      	beq.n	80031c6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80030d4:	e099      	b.n	800320a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d6:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d02d      	beq.n	800313e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030e2:	4b85      	ldr	r3, [pc, #532]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	08db      	lsrs	r3, r3, #3
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	4a83      	ldr	r2, [pc, #524]	; (80032fc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80030ee:	fa22 f303 	lsr.w	r3, r2, r3
 80030f2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310c:	4b7a      	ldr	r3, [pc, #488]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800311c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003120:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003300 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800312c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003138:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800313c:	e087      	b.n	800324e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003148:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003304 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800314c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003150:	4b69      	ldr	r3, [pc, #420]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003160:	ed97 6a03 	vldr	s12, [r7, #12]
 8003164:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003300 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003180:	e065      	b.n	800324e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	ee07 3a90 	vmov	s15, r3
 8003188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003194:	4b58      	ldr	r3, [pc, #352]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80031a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003300 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80031ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80031c4:	e043      	b.n	800324e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800330c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80031d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d8:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80031ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003300 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80031f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003208:	e021      	b.n	800324e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003214:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003230:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003300 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003248:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800324c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	0a5b      	lsrs	r3, r3, #9
 8003254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003268:	edd7 6a07 	vldr	s13, [r7, #28]
 800326c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003274:	ee17 2a90 	vmov	r2, s15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003296:	edd7 6a07 	vldr	s13, [r7, #28]
 800329a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800329e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a2:	ee17 2a90 	vmov	r2, s15
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	0e1b      	lsrs	r3, r3, #24
 80032b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b4:	ee07 3a90 	vmov	s15, r3
 80032b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80032c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80032c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d0:	ee17 2a90 	vmov	r2, s15
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80032d8:	e008      	b.n	80032ec <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	3724      	adds	r7, #36	; 0x24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	58024400 	.word	0x58024400
 80032fc:	03d09000 	.word	0x03d09000
 8003300:	46000000 	.word	0x46000000
 8003304:	4c742400 	.word	0x4c742400
 8003308:	4a742400 	.word	0x4a742400
 800330c:	4bbebc20 	.word	0x4bbebc20

08003310 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003318:	4b9d      	ldr	r3, [pc, #628]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003322:	4b9b      	ldr	r3, [pc, #620]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	0d1b      	lsrs	r3, r3, #20
 8003328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800332e:	4b98      	ldr	r3, [pc, #608]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800333a:	4b95      	ldr	r3, [pc, #596]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	08db      	lsrs	r3, r3, #3
 8003340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 810a 	beq.w	8003572 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d05a      	beq.n	800341a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003364:	2b01      	cmp	r3, #1
 8003366:	d302      	bcc.n	800336e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003368:	2b02      	cmp	r3, #2
 800336a:	d078      	beq.n	800345e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800336c:	e099      	b.n	80034a2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800336e:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d02d      	beq.n	80033d6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800337a:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	08db      	lsrs	r3, r3, #3
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	4a83      	ldr	r2, [pc, #524]	; (8003594 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a4:	4b7a      	ldr	r3, [pc, #488]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ac:	ee07 3a90 	vmov	s15, r3
 80033b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80033b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003598 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80033bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80033d4:	e087      	b.n	80034e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	ee07 3a90 	vmov	s15, r3
 80033dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800359c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80033e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e8:	4b69      	ldr	r3, [pc, #420]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80033fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003598 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003414:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003418:	e065      	b.n	80034e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003424:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80035a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342c:	4b58      	ldr	r3, [pc, #352]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003440:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003598 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003458:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800345c:	e043      	b.n	80034e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003468:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80035a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800346c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003470:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003480:	ed97 6a03 	vldr	s12, [r7, #12]
 8003484:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003598 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034a0:	e021      	b.n	80034e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80035a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80034b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80034c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003598 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80034cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034e4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80034e6:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	0a5b      	lsrs	r3, r3, #9
 80034ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003500:	edd7 6a07 	vldr	s13, [r7, #28]
 8003504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800350c:	ee17 2a90 	vmov	r2, s15
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003514:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	0c1b      	lsrs	r3, r3, #16
 800351a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800352a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800352e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353a:	ee17 2a90 	vmov	r2, s15
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	0e1b      	lsrs	r3, r3, #24
 8003548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800355c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003568:	ee17 2a90 	vmov	r2, s15
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003570:	e008      	b.n	8003584 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	3724      	adds	r7, #36	; 0x24
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	58024400 	.word	0x58024400
 8003594:	03d09000 	.word	0x03d09000
 8003598:	46000000 	.word	0x46000000
 800359c:	4c742400 	.word	0x4c742400
 80035a0:	4a742400 	.word	0x4a742400
 80035a4:	4bbebc20 	.word	0x4bbebc20

080035a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035b0:	4b9d      	ldr	r3, [pc, #628]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80035ba:	4b9b      	ldr	r3, [pc, #620]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80035c6:	4b98      	ldr	r3, [pc, #608]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035d0:	4b95      	ldr	r3, [pc, #596]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	08db      	lsrs	r3, r3, #3
 80035d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 810a 	beq.w	8003808 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d05a      	beq.n	80036b0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d302      	bcc.n	8003604 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d078      	beq.n	80036f4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8003602:	e099      	b.n	8003738 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003604:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d02d      	beq.n	800366c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003610:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	08db      	lsrs	r3, r3, #3
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	4a84      	ldr	r2, [pc, #528]	; (800382c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800363a:	4b7b      	ldr	r3, [pc, #492]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364a:	ed97 6a03 	vldr	s12, [r7, #12]
 800364e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003830 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800365a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003666:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800366a:	e087      	b.n	800377c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003834 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800367a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367e:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003692:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003830 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800369a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ae:	e065      	b.n	800377c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003838 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80036be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c2:	4b59      	ldr	r3, [pc, #356]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003830 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80036da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036f2:	e043      	b.n	800377c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800383c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003706:	4b48      	ldr	r3, [pc, #288]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003716:	ed97 6a03 	vldr	s12, [r7, #12]
 800371a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003830 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800371e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003736:	e021      	b.n	800377c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003742:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003838 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8003746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374a:	4b37      	ldr	r3, [pc, #220]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375a:	ed97 6a03 	vldr	s12, [r7, #12]
 800375e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003830 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800376e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800377a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800377c:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	0a5b      	lsrs	r3, r3, #9
 8003782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003796:	edd7 6a07 	vldr	s13, [r7, #28]
 800379a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800379e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a2:	ee17 2a90 	vmov	r2, s15
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80037aa:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80037c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d0:	ee17 2a90 	vmov	r2, s15
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	0e1b      	lsrs	r3, r3, #24
 80037de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80037f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037fe:	ee17 2a90 	vmov	r2, s15
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003806:	e008      	b.n	800381a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
}
 800381a:	bf00      	nop
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	58024400 	.word	0x58024400
 800382c:	03d09000 	.word	0x03d09000
 8003830:	46000000 	.word	0x46000000
 8003834:	4c742400 	.word	0x4c742400
 8003838:	4a742400 	.word	0x4a742400
 800383c:	4bbebc20 	.word	0x4bbebc20

08003840 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07c      	b.n	800394c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10c      	bne.n	8003878 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd f99a 	bl	8000bac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2203      	movs	r2, #3
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f867 	bl	8003954 <HAL_SD_InitCard>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e05d      	b.n	800394c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	4619      	mov	r1, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fdbe 	bl	8004418 <HAL_SD_GetCardStatus>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e052      	b.n	800394c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80038a6:	7e3b      	ldrb	r3, [r7, #24]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80038ac:	7e7b      	ldrb	r3, [r7, #25]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d10a      	bne.n	80038d0 <HAL_SD_Init+0x90>
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <HAL_SD_Init+0x86>
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80038ce:	e00b      	b.n	80038e8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d104      	bne.n	80038e2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038de:	65da      	str	r2, [r3, #92]	; 0x5c
 80038e0:	e002      	b.n	80038e8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fe74 	bl	80045dc <HAL_SD_ConfigWideBusOperation>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e026      	b.n	800394c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80038fe:	f7fd fb9f 	bl	8001040 <HAL_GetTick>
 8003902:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003904:	e011      	b.n	800392a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8003906:	f7fd fb9b 	bl	8001040 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d109      	bne.n	800392a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e010      	b.n	800394c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 ff00 	bl	8004730 <HAL_SD_GetCardState>
 8003930:	4603      	mov	r3, r0
 8003932:	2b04      	cmp	r3, #4
 8003934:	d1e7      	bne.n	8003906 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3728      	adds	r7, #40	; 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003954:	b5b0      	push	{r4, r5, r7, lr}
 8003956:	b08e      	sub	sp, #56	; 0x38
 8003958:	af04      	add	r7, sp, #16
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800396c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003970:	f7ff f8f4 	bl	8002b5c <HAL_RCCEx_GetPeriphCLKFreq>
 8003974:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <HAL_SD_InitCard+0x128>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d107      	bne.n	800399c <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0210 	orr.w	r2, r2, #16
 800399a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681d      	ldr	r5, [r3, #0]
 80039a0:	466c      	mov	r4, sp
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80039aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039ae:	f107 0308 	add.w	r3, r7, #8
 80039b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039b4:	4628      	mov	r0, r5
 80039b6:	f002 fe23 	bl	8006600 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 fe66 	bl	8006690 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80039d6:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <HAL_SD_InitCard+0x12c>)
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd fb39 	bl	8001058 <HAL_Delay>
 80039e6:	e002      	b.n	80039ee <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 80039e8:	2002      	movs	r0, #2
 80039ea:	f7fd fb35 	bl	8001058 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 ff7c 	bl	80048ec <SD_PowerON>
 80039f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e02e      	b.n	8003a72 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 feab 	bl	8004770 <SD_InitCard>
 8003a1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01b      	b.n	8003a72 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 feba 	bl	80067bc <SDMMC_CmdBlockLength>
 8003a48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00f      	beq.n	8003a70 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <HAL_SD_InitCard+0x130>)
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3728      	adds	r7, #40	; 0x28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	014f8b59 	.word	0x014f8b59
 8003a80:	00012110 	.word	0x00012110
 8003a84:	1fe00fff 	.word	0x1fe00fff

08003a88 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b092      	sub	sp, #72	; 0x48
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a96:	f7fd fad3 	bl	8001040 <HAL_GetTick>
 8003a9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e167      	b.n	8003d8a <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	f040 815a 	bne.w	8003d7c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	441a      	add	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d907      	bls.n	8003aec <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e14e      	b.n	8003d8a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2203      	movs	r2, #3
 8003af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d002      	beq.n	8003b0a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b06:	025b      	lsls	r3, r3, #9
 8003b08:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	025b      	lsls	r3, r3, #9
 8003b14:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003b16:	2390      	movs	r3, #144	; 0x90
 8003b18:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f107 0214 	add.w	r2, r7, #20
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f002 fe17 	bl	8006764 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b44:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d90a      	bls.n	8003b62 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f002 fe75 	bl	8006848 <SDMMC_CmdReadMultiBlock>
 8003b5e:	6478      	str	r0, [r7, #68]	; 0x44
 8003b60:	e009      	b.n	8003b76 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f002 fe47 	bl	8006802 <SDMMC_CmdReadSingleBlock>
 8003b74:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d012      	beq.n	8003ba2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a84      	ldr	r2, [pc, #528]	; (8003d94 <HAL_SD_ReadBlocks+0x30c>)
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0f3      	b.n	8003d8a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003ba6:	e058      	b.n	8003c5a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d033      	beq.n	8003c1e <HAL_SD_ReadBlocks+0x196>
 8003bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb8:	2b1f      	cmp	r3, #31
 8003bba:	d930      	bls.n	8003c1e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc0:	e027      	b.n	8003c12 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 fd44 	bl	8006654 <SDMMC_ReadFIFO>
 8003bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	3301      	adds	r3, #1
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be8:	3301      	adds	r3, #1
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	0e1b      	lsrs	r3, r3, #24
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c04:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	3301      	adds	r3, #1
 8003c0a:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	3301      	adds	r3, #1
 8003c10:	643b      	str	r3, [r7, #64]	; 0x40
 8003c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d9d4      	bls.n	8003bc2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8003c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1a:	3b20      	subs	r3, #32
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003c1e:	f7fd fa0f 	bl	8001040 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d902      	bls.n	8003c34 <HAL_SD_ReadBlocks+0x1ac>
 8003c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d112      	bne.n	8003c5a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a56      	ldr	r2, [pc, #344]	; (8003d94 <HAL_SD_ReadBlocks+0x30c>)
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e097      	b.n	8003d8a <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d09f      	beq.n	8003ba8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c76:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d022      	beq.n	8003ccc <HAL_SD_ReadBlocks+0x244>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d91f      	bls.n	8003ccc <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d01b      	beq.n	8003ccc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f002 fe3f 	bl	800691c <SDMMC_CmdStopTransfer>
 8003c9e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d012      	beq.n	8003ccc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a3a      	ldr	r2, [pc, #232]	; (8003d94 <HAL_SD_ReadBlocks+0x30c>)
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e05e      	b.n	8003d8a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d012      	beq.n	8003d00 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2d      	ldr	r2, [pc, #180]	; (8003d94 <HAL_SD_ReadBlocks+0x30c>)
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	f043 0208 	orr.w	r2, r3, #8
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e044      	b.n	8003d8a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a20      	ldr	r2, [pc, #128]	; (8003d94 <HAL_SD_ReadBlocks+0x30c>)
 8003d14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	f043 0202 	orr.w	r2, r3, #2
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e02a      	b.n	8003d8a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d012      	beq.n	8003d68 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <HAL_SD_ReadBlocks+0x30c>)
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e010      	b.n	8003d8a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <HAL_SD_ReadBlocks+0x310>)
 8003d6e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e006      	b.n	8003d8a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3748      	adds	r7, #72	; 0x48
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	1fe00fff 	.word	0x1fe00fff
 8003d98:	18000f3a 	.word	0x18000f3a

08003d9c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b092      	sub	sp, #72	; 0x48
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003daa:	f7fd f949 	bl	8001040 <HAL_GetTick>
 8003dae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e16b      	b.n	80040a6 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	f040 815e 	bne.w	8004098 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	441a      	add	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d907      	bls.n	8003e00 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e152      	b.n	80040a6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2203      	movs	r2, #3
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d002      	beq.n	8003e1e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	025b      	lsls	r3, r3, #9
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e22:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	025b      	lsls	r3, r3, #9
 8003e28:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003e2a:	2390      	movs	r3, #144	; 0x90
 8003e2c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f107 0218 	add.w	r2, r7, #24
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f002 fc8d 	bl	8006764 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e58:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d90a      	bls.n	8003e76 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f002 fd31 	bl	80068d4 <SDMMC_CmdWriteMultiBlock>
 8003e72:	6478      	str	r0, [r7, #68]	; 0x44
 8003e74:	e009      	b.n	8003e8a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e82:	4618      	mov	r0, r3
 8003e84:	f002 fd03 	bl	800688e <SDMMC_CmdWriteSingleBlock>
 8003e88:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d012      	beq.n	8003eb6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a86      	ldr	r2, [pc, #536]	; (80040b0 <HAL_SD_WriteBlocks+0x314>)
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0f7      	b.n	80040a6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003eba:	e05c      	b.n	8003f76 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d037      	beq.n	8003f3a <HAL_SD_WriteBlocks+0x19e>
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	2b1f      	cmp	r3, #31
 8003ece:	d934      	bls.n	8003f3a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed4:	e02b      	b.n	8003f2e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	3301      	adds	r3, #1
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	021a      	lsls	r2, r3, #8
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	041a      	lsls	r2, r3, #16
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f02:	3301      	adds	r3, #1
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	061a      	lsls	r2, r3, #24
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	3301      	adds	r3, #1
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f107 0214 	add.w	r2, r7, #20
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f002 fba3 	bl	800666e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f30:	2b07      	cmp	r3, #7
 8003f32:	d9d0      	bls.n	8003ed6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8003f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f36:	3b20      	subs	r3, #32
 8003f38:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003f3a:	f7fd f881 	bl	8001040 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d902      	bls.n	8003f50 <HAL_SD_WriteBlocks+0x1b4>
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d112      	bne.n	8003f76 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a56      	ldr	r2, [pc, #344]	; (80040b0 <HAL_SD_WriteBlocks+0x314>)
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e097      	b.n	80040a6 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d09b      	beq.n	8003ebc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f92:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d022      	beq.n	8003fe8 <HAL_SD_WriteBlocks+0x24c>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d91f      	bls.n	8003fe8 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d01b      	beq.n	8003fe8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f002 fcb1 	bl	800691c <SDMMC_CmdStopTransfer>
 8003fba:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d012      	beq.n	8003fe8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a3a      	ldr	r2, [pc, #232]	; (80040b0 <HAL_SD_WriteBlocks+0x314>)
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e05e      	b.n	80040a6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d012      	beq.n	800401c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2d      	ldr	r2, [pc, #180]	; (80040b0 <HAL_SD_WriteBlocks+0x314>)
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	f043 0208 	orr.w	r2, r3, #8
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e044      	b.n	80040a6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d012      	beq.n	8004050 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a20      	ldr	r2, [pc, #128]	; (80040b0 <HAL_SD_WriteBlocks+0x314>)
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	f043 0202 	orr.w	r2, r3, #2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e02a      	b.n	80040a6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d012      	beq.n	8004084 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <HAL_SD_WriteBlocks+0x314>)
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	f043 0210 	orr.w	r2, r3, #16
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e010      	b.n	80040a6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <HAL_SD_WriteBlocks+0x318>)
 800408a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e006      	b.n	80040a6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3748      	adds	r7, #72	; 0x48
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	1fe00fff 	.word	0x1fe00fff
 80040b4:	18000f3a 	.word	0x18000f3a

080040b8 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	0f9b      	lsrs	r3, r3, #30
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ea:	0e9b      	lsrs	r3, r3, #26
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fc:	0e1b      	lsrs	r3, r3, #24
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	b2da      	uxtb	r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	b2da      	uxtb	r2, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	b2da      	uxtb	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004126:	b2da      	uxtb	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004130:	0d1b      	lsrs	r3, r3, #20
 8004132:	b29a      	uxth	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	b2da      	uxtb	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800414e:	0bdb      	lsrs	r3, r3, #15
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004160:	0b9b      	lsrs	r3, r3, #14
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	b2da      	uxtb	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004172:	0b5b      	lsrs	r3, r3, #13
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004184:	0b1b      	lsrs	r3, r3, #12
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	b2da      	uxtb	r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2200      	movs	r2, #0
 8004196:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d163      	bne.n	8004268 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a4:	009a      	lsls	r2, r3, #2
 80041a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041aa:	4013      	ands	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041b0:	0f92      	lsrs	r2, r2, #30
 80041b2:	431a      	orrs	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041bc:	0edb      	lsrs	r3, r3, #27
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ce:	0e1b      	lsrs	r3, r3, #24
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e0:	0d5b      	lsrs	r3, r3, #21
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f2:	0c9b      	lsrs	r3, r3, #18
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004204:	0bdb      	lsrs	r3, r3, #15
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	b2da      	uxtb	r2, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	7e1b      	ldrb	r3, [r3, #24]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	3302      	adds	r3, #2
 8004228:	2201      	movs	r2, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004232:	fb02 f203 	mul.w	r2, r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	7a1b      	ldrb	r3, [r3, #8]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004254:	0a52      	lsrs	r2, r2, #9
 8004256:	fb02 f203 	mul.w	r2, r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004264:	659a      	str	r2, [r3, #88]	; 0x58
 8004266:	e031      	b.n	80042cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d11d      	bne.n	80042ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004274:	041b      	lsls	r3, r3, #16
 8004276:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800427e:	0c1b      	lsrs	r3, r3, #16
 8004280:	431a      	orrs	r2, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	3301      	adds	r3, #1
 800428c:	029a      	lsls	r2, r3, #10
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	659a      	str	r2, [r3, #88]	; 0x58
 80042aa:	e00f      	b.n	80042cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a58      	ldr	r2, [pc, #352]	; (8004414 <HAL_SD_GetCardCSD+0x344>)
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e09d      	b.n	8004408 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d0:	0b9b      	lsrs	r3, r3, #14
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e2:	09db      	lsrs	r3, r3, #7
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004304:	0fdb      	lsrs	r3, r3, #31
 8004306:	b2da      	uxtb	r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004310:	0f5b      	lsrs	r3, r3, #29
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	b2da      	uxtb	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	b2da      	uxtb	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004334:	0d9b      	lsrs	r3, r3, #22
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	b2da      	uxtb	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004346:	0d5b      	lsrs	r3, r3, #21
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	b2da      	uxtb	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	b2da      	uxtb	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004376:	0bdb      	lsrs	r3, r3, #15
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	b2da      	uxtb	r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800438a:	0b9b      	lsrs	r3, r3, #14
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439e:	0b5b      	lsrs	r3, r3, #13
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b2:	0b1b      	lsrs	r3, r3, #12
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	1fe00fff 	.word	0x1fe00fff

08004418 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b094      	sub	sp, #80	; 0x50
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8004428:	f107 0308 	add.w	r3, r7, #8
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fb64 	bl	8004afc <SD_SendSDStatus>
 8004434:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8004436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004438:	2b00      	cmp	r3, #0
 800443a:	d011      	beq.n	8004460 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a4f      	ldr	r2, [pc, #316]	; (8004580 <HAL_SD_GetCardStatus+0x168>)
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800445e:	e070      	b.n	8004542 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	099b      	lsrs	r3, r3, #6
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	b2da      	uxtb	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	b29b      	uxth	r3, r3
 8004486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800448a:	b29a      	uxth	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	0e1b      	lsrs	r3, r3, #24
 8004490:	b29b      	uxth	r3, r3
 8004492:	4313      	orrs	r3, r2
 8004494:	b29a      	uxth	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	061a      	lsls	r2, r3, #24
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044a6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80044b0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	0e1b      	lsrs	r3, r3, #24
 80044b6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	0d1b      	lsrs	r3, r3, #20
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4313      	orrs	r3, r2
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	0a9b      	lsrs	r3, r3, #10
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004504:	b2da      	uxtb	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	b2da      	uxtb	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	b2da      	uxtb	r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	b2da      	uxtb	r2, r3
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	0e1b      	lsrs	r3, r3, #24
 800453c:	b2da      	uxtb	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800454a:	4618      	mov	r0, r3
 800454c:	f002 f936 	bl	80067bc <SDMMC_CmdBlockLength>
 8004550:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8004552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00d      	beq.n	8004574 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a08      	ldr	r2, [pc, #32]	; (8004580 <HAL_SD_GetCardStatus+0x168>)
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8004574:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004578:	4618      	mov	r0, r3
 800457a:	3750      	adds	r7, #80	; 0x50
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	1fe00fff 	.word	0x1fe00fff

08004584 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80045dc:	b5b0      	push	{r4, r5, r7, lr}
 80045de:	b08e      	sub	sp, #56	; 0x38
 80045e0:	af04      	add	r7, sp, #16
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2203      	movs	r2, #3
 80045f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d02e      	beq.n	800465a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004602:	d106      	bne.n	8004612 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	639a      	str	r2, [r3, #56]	; 0x38
 8004610:	e029      	b.n	8004666 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004618:	d10a      	bne.n	8004630 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fb66 	bl	8004cec <SD_WideBus_Enable>
 8004620:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
 800462e:	e01a      	b.n	8004666 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fba3 	bl	8004d82 <SD_WideBus_Disable>
 800463c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
 800464a:	e00c      	b.n	8004666 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
 8004658:	e005      	b.n	8004666 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a2e      	ldr	r2, [pc, #184]	; (800472c <HAL_SD_ConfigWideBusOperation+0x150>)
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800467c:	e034      	b.n	80046e8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d903      	bls.n	80046a4 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e012      	b.n	80046ca <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ac:	d103      	bne.n	80046b6 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	e009      	b.n	80046ca <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046be:	d102      	bne.n	80046c6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	e001      	b.n	80046ca <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80046c6:	2304      	movs	r3, #4
 80046c8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681d      	ldr	r5, [r3, #0]
 80046ce:	466c      	mov	r4, sp
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046dc:	f107 0308 	add.w	r3, r7, #8
 80046e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046e2:	4628      	mov	r0, r5
 80046e4:	f001 ff8c 	bl	8006600 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046f0:	4618      	mov	r0, r3
 80046f2:	f002 f863 	bl	80067bc <SDMMC_CmdBlockLength>
 80046f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <HAL_SD_ConfigWideBusOperation+0x150>)
 8004704:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004724:	4618      	mov	r0, r3
 8004726:	3728      	adds	r7, #40	; 0x28
 8004728:	46bd      	mov	sp, r7
 800472a:	bdb0      	pop	{r4, r5, r7, pc}
 800472c:	1fe00fff 	.word	0x1fe00fff

08004730 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800473c:	f107 030c 	add.w	r3, r7, #12
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 faaa 	bl	8004c9c <SD_SendStatus>
 8004748:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	0a5b      	lsrs	r3, r3, #9
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004766:	693b      	ldr	r3, [r7, #16]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b091      	sub	sp, #68	; 0x44
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004778:	2301      	movs	r3, #1
 800477a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f001 ff96 	bl	80066b2 <SDMMC_GetPowerState>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800478c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004790:	e0a8      	b.n	80048e4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	2b03      	cmp	r3, #3
 8004798:	d02e      	beq.n	80047f8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f002 f9e2 	bl	8006b68 <SDMMC_CmdSendCID>
 80047a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80047ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ae:	e099      	b.n	80048e4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 ffc1 	bl	800673e <SDMMC_GetResponse>
 80047bc:	4602      	mov	r2, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2104      	movs	r1, #4
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 ffb8 	bl	800673e <SDMMC_GetResponse>
 80047ce:	4602      	mov	r2, r0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2108      	movs	r1, #8
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 ffaf 	bl	800673e <SDMMC_GetResponse>
 80047e0:	4602      	mov	r2, r0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	210c      	movs	r1, #12
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 ffa6 	bl	800673e <SDMMC_GetResponse>
 80047f2:	4602      	mov	r2, r0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d00d      	beq.n	800481c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f107 020e 	add.w	r2, r7, #14
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f002 f9eb 	bl	8006be6 <SDMMC_CmdSetRelAdd>
 8004810:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <SD_InitCard+0xac>
    {
      return errorstate;
 8004818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481a:	e063      	b.n	80048e4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	2b03      	cmp	r3, #3
 8004822:	d036      	beq.n	8004892 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f002 f9b4 	bl	8006ba6 <SDMMC_CmdSendCSD>
 800483e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <SD_InitCard+0xda>
    {
      return errorstate;
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	e04c      	b.n	80048e4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f001 ff74 	bl	800673e <SDMMC_GetResponse>
 8004856:	4602      	mov	r2, r0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2104      	movs	r1, #4
 8004862:	4618      	mov	r0, r3
 8004864:	f001 ff6b 	bl	800673e <SDMMC_GetResponse>
 8004868:	4602      	mov	r2, r0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2108      	movs	r1, #8
 8004874:	4618      	mov	r0, r3
 8004876:	f001 ff62 	bl	800673e <SDMMC_GetResponse>
 800487a:	4602      	mov	r2, r0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	210c      	movs	r1, #12
 8004886:	4618      	mov	r0, r3
 8004888:	f001 ff59 	bl	800673e <SDMMC_GetResponse>
 800488c:	4602      	mov	r2, r0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2104      	movs	r1, #4
 8004898:	4618      	mov	r0, r3
 800489a:	f001 ff50 	bl	800673e <SDMMC_GetResponse>
 800489e:	4603      	mov	r3, r0
 80048a0:	0d1a      	lsrs	r2, r3, #20
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80048a6:	f107 0310 	add.w	r3, r7, #16
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fc0f 	bl	80040d0 <HAL_SD_GetCardCSD>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048bc:	e012      	b.n	80048e4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	f04f 0400 	mov.w	r4, #0
 80048cc:	461a      	mov	r2, r3
 80048ce:	4623      	mov	r3, r4
 80048d0:	4608      	mov	r0, r1
 80048d2:	f002 f85f 	bl	8006994 <SDMMC_CmdSelDesel>
 80048d6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <SD_InitCard+0x172>
  {
    return errorstate;
 80048de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e0:	e000      	b.n	80048e4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3744      	adds	r7, #68	; 0x44
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd90      	pop	{r4, r7, pc}

080048ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	2300      	movs	r3, #0
 80048fe:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8004900:	f7fc fb9e 	bl	8001040 <HAL_GetTick>
 8004904:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f002 f866 	bl	80069dc <SDMMC_CmdGoIdleState>
 8004910:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <SD_PowerON+0x30>
  {
    return errorstate;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	e0e9      	b.n	8004af0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f002 f879 	bl	8006a18 <SDMMC_CmdOperCond>
 8004926:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f002 f84f 	bl	80069dc <SDMMC_CmdGoIdleState>
 800493e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <SD_PowerON+0x64>
    {
      return errorstate;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	e0d2      	b.n	8004af0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b01      	cmp	r3, #1
 8004956:	d137      	bne.n	80049c8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2100      	movs	r1, #0
 800495e:	4618      	mov	r0, r3
 8004960:	f002 f87a 	bl	8006a58 <SDMMC_CmdAppCommand>
 8004964:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02d      	beq.n	80049c8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800496c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004970:	e0be      	b.n	8004af0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f002 f86d 	bl	8006a58 <SDMMC_CmdAppCommand>
 800497e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <SD_PowerON+0x9e>
    {
      return errorstate;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	e0b2      	b.n	8004af0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	495a      	ldr	r1, [pc, #360]	; (8004af8 <SD_PowerON+0x20c>)
 8004990:	4618      	mov	r0, r3
 8004992:	f002 f884 	bl	8006a9e <SDMMC_CmdAppOperCommand>
 8004996:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800499e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049a2:	e0a5      	b.n	8004af0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 fec7 	bl	800673e <SDMMC_GetResponse>
 80049b0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	0fdb      	lsrs	r3, r3, #31
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <SD_PowerON+0xd2>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <SD_PowerON+0xd4>
 80049be:	2300      	movs	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]

    count++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3301      	adds	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d802      	bhi.n	80049d8 <SD_PowerON+0xec>
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0cc      	beq.n	8004972 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049de:	4293      	cmp	r3, r2
 80049e0:	d902      	bls.n	80049e8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80049e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049e6:	e083      	b.n	8004af0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d07d      	beq.n	8004aee <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d176      	bne.n	8004aee <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d071      	beq.n	8004aee <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a10:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0208 	orr.w	r2, r2, #8
 8004a20:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f002 f944 	bl	8006cb4 <SDMMC_CmdVoltageSwitch>
 8004a2c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00c      	beq.n	8004a4e <SD_PowerON+0x162>
        {
          return errorstate;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	e05b      	b.n	8004af0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004a38:	f7fc fb02 	bl	8001040 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d102      	bne.n	8004a4e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8004a48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a4c:	e050      	b.n	8004af0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a5c:	d1ec      	bne.n	8004a38 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a76:	d002      	beq.n	8004a7e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8004a78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a7c:	e038      	b.n	8004af0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8004a7e:	2001      	movs	r0, #1
 8004a80:	f7ff fb1a 	bl	80040b8 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0204 	orr.w	r2, r2, #4
 8004a92:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004a94:	e00a      	b.n	8004aac <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004a96:	f7fc fad3 	bl	8001040 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d102      	bne.n	8004aac <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8004aa6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004aaa:	e021      	b.n	8004af0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aba:	d1ec      	bne.n	8004a96 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad4:	d102      	bne.n	8004adc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ada:	e009      	b.n	8004af0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2213      	movs	r2, #19
 8004ae2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	c1100000 	.word	0xc1100000

08004afc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08c      	sub	sp, #48	; 0x30
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004b06:	f7fc fa9b 	bl	8001040 <HAL_GetTick>
 8004b0a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 fe11 	bl	800673e <SDMMC_GetResponse>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b26:	d102      	bne.n	8004b2e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b2c:	e0b0      	b.n	8004c90 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2140      	movs	r1, #64	; 0x40
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 fe41 	bl	80067bc <SDMMC_CmdBlockLength>
 8004b3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	e0a0      	b.n	8004c90 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f001 ff7c 	bl	8006a58 <SDMMC_CmdAppCommand>
 8004b60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	e08d      	b.n	8004c90 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8004b7e:	2360      	movs	r3, #96	; 0x60
 8004b80:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b82:	2302      	movs	r3, #2
 8004b84:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f107 0208 	add.w	r2, r7, #8
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 fde3 	bl	8006764 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f002 f864 	bl	8006c70 <SDMMC_CmdStatusRegister>
 8004ba8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02b      	beq.n	8004c08 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	e069      	b.n	8004c90 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d013      	beq.n	8004bf2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bce:	e00d      	b.n	8004bec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 fd3d 	bl	8006654 <SDMMC_ReadFIFO>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	601a      	str	r2, [r3, #0]
        pData++;
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	3304      	adds	r3, #4
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	3301      	adds	r3, #1
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	2b07      	cmp	r3, #7
 8004bf0:	d9ee      	bls.n	8004bd0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004bf2:	f7fc fa25 	bl	8001040 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d102      	bne.n	8004c08 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004c02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c06:	e043      	b.n	8004c90 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0d2      	beq.n	8004bbc <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004c24:	2308      	movs	r3, #8
 8004c26:	e033      	b.n	8004c90 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c36:	2302      	movs	r3, #2
 8004c38:	e02a      	b.n	8004c90 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d017      	beq.n	8004c78 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8004c48:	2320      	movs	r3, #32
 8004c4a:	e021      	b.n	8004c90 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 fcff 	bl	8006654 <SDMMC_ReadFIFO>
 8004c56:	4602      	mov	r2, r0
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	601a      	str	r2, [r3, #0]
    pData++;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	3304      	adds	r3, #4
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004c62:	f7fc f9ed 	bl	8001040 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d102      	bne.n	8004c78 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004c72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c76:	e00b      	b.n	8004c90 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e2      	bne.n	8004c4c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <SD_SendSDStatus+0x19c>)
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3730      	adds	r7, #48	; 0x30
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	18000f3a 	.word	0x18000f3a

08004c9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cb0:	e018      	b.n	8004ce4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f001 ffb3 	bl	8006c2a <SDMMC_CmdSendStatus>
 8004cc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	e009      	b.n	8004ce4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 fd31 	bl	800673e <SDMMC_GetResponse>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 fd1b 	bl	800673e <SDMMC_GetResponse>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d12:	d102      	bne.n	8004d1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004d14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d18:	e02f      	b.n	8004d7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004d1a:	f107 030c 	add.w	r3, r7, #12
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f879 	bl	8004e18 <SD_FindSCR>
 8004d26:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	e023      	b.n	8004d7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01c      	beq.n	8004d76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f001 fe85 	bl	8006a58 <SDMMC_CmdAppCommand>
 8004d4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	e00f      	b.n	8004d7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2102      	movs	r1, #2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 febc 	bl	8006ade <SDMMC_CmdBusWidth>
 8004d66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	e003      	b.n	8004d7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e001      	b.n	8004d7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f001 fcd0 	bl	800673e <SDMMC_GetResponse>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da8:	d102      	bne.n	8004db0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dae:	e02f      	b.n	8004e10 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f82e 	bl	8004e18 <SD_FindSCR>
 8004dbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	e023      	b.n	8004e10 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01c      	beq.n	8004e0c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f001 fe3a 	bl	8006a58 <SDMMC_CmdAppCommand>
 8004de4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	e00f      	b.n	8004e10 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 fe71 	bl	8006ade <SDMMC_CmdBusWidth>
 8004dfc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	e003      	b.n	8004e10 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e001      	b.n	8004e10 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004e0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08e      	sub	sp, #56	; 0x38
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004e22:	f7fc f90d 	bl	8001040 <HAL_GetTick>
 8004e26:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2108      	movs	r1, #8
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fcbc 	bl	80067bc <SDMMC_CmdBlockLength>
 8004e44:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	e0ad      	b.n	8004fac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f001 fdfb 	bl	8006a58 <SDMMC_CmdAppCommand>
 8004e62:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	e09e      	b.n	8004fac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e72:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004e74:	2308      	movs	r3, #8
 8004e76:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004e78:	2330      	movs	r3, #48	; 0x30
 8004e7a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f107 0210 	add.w	r2, r7, #16
 8004e90:	4611      	mov	r1, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 fc66 	bl	8006764 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 fe41 	bl	8006b24 <SDMMC_CmdSendSCR>
 8004ea2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d027      	beq.n	8004efa <SD_FindSCR+0xe2>
  {
    return errorstate;
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	e07e      	b.n	8004fac <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d113      	bne.n	8004ee4 <SD_FindSCR+0xcc>
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d110      	bne.n	8004ee4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 fbc4 	bl	8006654 <SDMMC_ReadFIFO>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 fbbd 	bl	8006654 <SDMMC_ReadFIFO>
 8004eda:	4603      	mov	r3, r0
 8004edc:	60fb      	str	r3, [r7, #12]
      index++;
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ee4:	f7fc f8ac 	bl	8001040 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d102      	bne.n	8004efa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ef4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ef8:	e058      	b.n	8004fac <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f00:	f240 532a 	movw	r3, #1322	; 0x52a
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0d1      	beq.n	8004eae <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004f20:	2308      	movs	r3, #8
 8004f22:	e043      	b.n	8004fac <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2202      	movs	r2, #2
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e036      	b.n	8004fac <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2220      	movs	r2, #32
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004f54:	2320      	movs	r3, #32
 8004f56:	e029      	b.n	8004fac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <SD_FindSCR+0x19c>)
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	061a      	lsls	r2, r3, #24
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	0a1b      	lsrs	r3, r3, #8
 8004f72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	0e1b      	lsrs	r3, r3, #24
 8004f7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	601a      	str	r2, [r3, #0]
    scr++;
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	3304      	adds	r3, #4
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	061a      	lsls	r2, r3, #24
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	0e1b      	lsrs	r3, r3, #24
 8004fa4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3738      	adds	r7, #56	; 0x38
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	18000f3a 	.word	0x18000f3a

08004fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e042      	b.n	8005050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fb fe51 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2224      	movs	r2, #36	; 0x24
 8004fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fa56 	bl	80054ac <UART_SetConfig>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e022      	b.n	8005050 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fffa 	bl	800600c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f001 f881 	bl	8006150 <UART_CheckIdleState>
 800504e:	4603      	mov	r3, r0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506e:	2b20      	cmp	r3, #32
 8005070:	f040 8083 	bne.w	800517a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_UART_Transmit+0x28>
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e07b      	b.n	800517c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <HAL_UART_Transmit+0x3a>
 800508e:	2302      	movs	r3, #2
 8005090:	e074      	b.n	800517c <HAL_UART_Transmit+0x124>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2221      	movs	r2, #33	; 0x21
 80050a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80050aa:	f7fb ffc9 	bl	8001040 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d108      	bne.n	80050dc <HAL_UART_Transmit+0x84>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e003      	b.n	80050e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80050ec:	e02c      	b.n	8005148 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	2180      	movs	r1, #128	; 0x80
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f001 f871 	bl	80061e0 <UART_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e039      	b.n	800517c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10b      	bne.n	8005126 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	3302      	adds	r3, #2
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	e007      	b.n	8005136 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3301      	adds	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1cc      	bne.n	80050ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2200      	movs	r2, #0
 800515c:	2140      	movs	r1, #64	; 0x40
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f001 f83e 	bl	80061e0 <UART_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e006      	b.n	800517c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80051aa:	4013      	ands	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d118      	bne.n	80051e6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d013      	beq.n	80051e6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8145 	beq.w	8005466 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
      }
      return;
 80051e4:	e13f      	b.n	8005466 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80e8 	beq.w	80053be <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4ba1      	ldr	r3, [pc, #644]	; (8005478 <HAL_UART_IRQHandler+0x2f4>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4ba0      	ldr	r3, [pc, #640]	; (800547c <HAL_UART_IRQHandler+0x2f8>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80dd 	beq.w	80053be <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d010      	beq.n	8005230 <HAL_UART_IRQHandler+0xac>
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2201      	movs	r2, #1
 800521e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f043 0201 	orr.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d010      	beq.n	800525c <HAL_UART_IRQHandler+0xd8>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2202      	movs	r2, #2
 800524a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005252:	f043 0204 	orr.w	r2, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d010      	beq.n	8005288 <HAL_UART_IRQHandler+0x104>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2204      	movs	r2, #4
 8005276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f043 0202 	orr.w	r2, r3, #2
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d015      	beq.n	80052be <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4b76      	ldr	r3, [pc, #472]	; (8005478 <HAL_UART_IRQHandler+0x2f4>)
 80052a0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2208      	movs	r2, #8
 80052ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f043 0208 	orr.w	r2, r3, #8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d011      	beq.n	80052ec <HAL_UART_IRQHandler+0x168>
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80b9 	beq.w	800546a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d011      	beq.n	8005326 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d004      	beq.n	8005346 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005342:	2b00      	cmp	r3, #0
 8005344:	d031      	beq.n	80053aa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 ffca 	bl	80062e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d123      	bne.n	80053a2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005368:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536e:	2b00      	cmp	r3, #0
 8005370:	d013      	beq.n	800539a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005376:	4a42      	ldr	r2, [pc, #264]	; (8005480 <HAL_UART_IRQHandler+0x2fc>)
 8005378:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800537e:	4618      	mov	r0, r3
 8005380:	f7fb ffa8 	bl	80012d4 <HAL_DMA_Abort_IT>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d017      	beq.n	80053ba <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	e00f      	b.n	80053ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f87c 	bl	8005498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	e00b      	b.n	80053ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f878 	bl	8005498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	e007      	b.n	80053ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f874 	bl	8005498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80053b8:	e057      	b.n	800546a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ba:	bf00      	nop
    return;
 80053bc:	e055      	b.n	800546a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <HAL_UART_IRQHandler+0x260>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 ffd3 	bl	8006388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053e2:	e045      	b.n	8005470 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d012      	beq.n	8005414 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d008      	beq.n	8005414 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	2b00      	cmp	r3, #0
 8005408:	d031      	beq.n	800546e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	4798      	blx	r3
    }
    return;
 8005412:	e02c      	b.n	800546e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HAL_UART_IRQHandler+0x2ac>
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 ff93 	bl	8006354 <UART_EndTransmit_IT>
    return;
 800542e:	e01f      	b.n	8005470 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <HAL_UART_IRQHandler+0x2c8>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 ffb3 	bl	80063b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800544a:	e011      	b.n	8005470 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00c      	beq.n	8005470 <HAL_UART_IRQHandler+0x2ec>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	da09      	bge.n	8005470 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 ff9d 	bl	800639c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005462:	bf00      	nop
 8005464:	e004      	b.n	8005470 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005466:	bf00      	nop
 8005468:	e002      	b.n	8005470 <HAL_UART_IRQHandler+0x2ec>
    return;
 800546a:	bf00      	nop
 800546c:	e000      	b.n	8005470 <HAL_UART_IRQHandler+0x2ec>
    return;
 800546e:	bf00      	nop
  }
}
 8005470:	3720      	adds	r7, #32
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	10000001 	.word	0x10000001
 800547c:	04000120 	.word	0x04000120
 8005480:	08006329 	.word	0x08006329

08005484 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80054b0:	b08e      	sub	sp, #56	; 0x38
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054da:	4313      	orrs	r3, r2
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4bc1      	ldr	r3, [pc, #772]	; (80057ec <UART_SetConfig+0x340>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054ee:	430b      	orrs	r3, r1
 80054f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4ab7      	ldr	r2, [pc, #732]	; (80057f0 <UART_SetConfig+0x344>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551e:	4313      	orrs	r3, r2
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	4bb2      	ldr	r3, [pc, #712]	; (80057f4 <UART_SetConfig+0x348>)
 800552a:	4013      	ands	r3, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005532:	430b      	orrs	r3, r1
 8005534:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	f023 010f 	bic.w	r1, r3, #15
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4aa9      	ldr	r2, [pc, #676]	; (80057f8 <UART_SetConfig+0x34c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d177      	bne.n	8005646 <UART_SetConfig+0x19a>
 8005556:	4ba9      	ldr	r3, [pc, #676]	; (80057fc <UART_SetConfig+0x350>)
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555e:	2b28      	cmp	r3, #40	; 0x28
 8005560:	d86c      	bhi.n	800563c <UART_SetConfig+0x190>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <UART_SetConfig+0xbc>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	0800560d 	.word	0x0800560d
 800556c:	0800563d 	.word	0x0800563d
 8005570:	0800563d 	.word	0x0800563d
 8005574:	0800563d 	.word	0x0800563d
 8005578:	0800563d 	.word	0x0800563d
 800557c:	0800563d 	.word	0x0800563d
 8005580:	0800563d 	.word	0x0800563d
 8005584:	0800563d 	.word	0x0800563d
 8005588:	08005615 	.word	0x08005615
 800558c:	0800563d 	.word	0x0800563d
 8005590:	0800563d 	.word	0x0800563d
 8005594:	0800563d 	.word	0x0800563d
 8005598:	0800563d 	.word	0x0800563d
 800559c:	0800563d 	.word	0x0800563d
 80055a0:	0800563d 	.word	0x0800563d
 80055a4:	0800563d 	.word	0x0800563d
 80055a8:	0800561d 	.word	0x0800561d
 80055ac:	0800563d 	.word	0x0800563d
 80055b0:	0800563d 	.word	0x0800563d
 80055b4:	0800563d 	.word	0x0800563d
 80055b8:	0800563d 	.word	0x0800563d
 80055bc:	0800563d 	.word	0x0800563d
 80055c0:	0800563d 	.word	0x0800563d
 80055c4:	0800563d 	.word	0x0800563d
 80055c8:	08005625 	.word	0x08005625
 80055cc:	0800563d 	.word	0x0800563d
 80055d0:	0800563d 	.word	0x0800563d
 80055d4:	0800563d 	.word	0x0800563d
 80055d8:	0800563d 	.word	0x0800563d
 80055dc:	0800563d 	.word	0x0800563d
 80055e0:	0800563d 	.word	0x0800563d
 80055e4:	0800563d 	.word	0x0800563d
 80055e8:	0800562d 	.word	0x0800562d
 80055ec:	0800563d 	.word	0x0800563d
 80055f0:	0800563d 	.word	0x0800563d
 80055f4:	0800563d 	.word	0x0800563d
 80055f8:	0800563d 	.word	0x0800563d
 80055fc:	0800563d 	.word	0x0800563d
 8005600:	0800563d 	.word	0x0800563d
 8005604:	0800563d 	.word	0x0800563d
 8005608:	08005635 	.word	0x08005635
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e233      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e22f      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e22b      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e227      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800562c:	2320      	movs	r3, #32
 800562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005632:	e223      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563a:	e21f      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005642:	bf00      	nop
 8005644:	e21a      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a6d      	ldr	r2, [pc, #436]	; (8005800 <UART_SetConfig+0x354>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d132      	bne.n	80056b6 <UART_SetConfig+0x20a>
 8005650:	4b6a      	ldr	r3, [pc, #424]	; (80057fc <UART_SetConfig+0x350>)
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	2b05      	cmp	r3, #5
 800565a:	d827      	bhi.n	80056ac <UART_SetConfig+0x200>
 800565c:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <UART_SetConfig+0x1b8>)
 800565e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005662:	bf00      	nop
 8005664:	0800567d 	.word	0x0800567d
 8005668:	08005685 	.word	0x08005685
 800566c:	0800568d 	.word	0x0800568d
 8005670:	08005695 	.word	0x08005695
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a5 	.word	0x080056a5
 800567c:	2300      	movs	r3, #0
 800567e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005682:	e1fb      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568a:	e1f7      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005692:	e1f3      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800569a:	e1ef      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800569c:	2320      	movs	r3, #32
 800569e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056a2:	e1eb      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80056a4:	2340      	movs	r3, #64	; 0x40
 80056a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056aa:	e1e7      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b2:	bf00      	nop
 80056b4:	e1e2      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a52      	ldr	r2, [pc, #328]	; (8005804 <UART_SetConfig+0x358>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d132      	bne.n	8005726 <UART_SetConfig+0x27a>
 80056c0:	4b4e      	ldr	r3, [pc, #312]	; (80057fc <UART_SetConfig+0x350>)
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d827      	bhi.n	800571c <UART_SetConfig+0x270>
 80056cc:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <UART_SetConfig+0x228>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	080056ed 	.word	0x080056ed
 80056d8:	080056f5 	.word	0x080056f5
 80056dc:	080056fd 	.word	0x080056fd
 80056e0:	08005705 	.word	0x08005705
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005715 	.word	0x08005715
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f2:	e1c3      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fa:	e1bf      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80056fc:	2308      	movs	r3, #8
 80056fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005702:	e1bb      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005704:	2310      	movs	r3, #16
 8005706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800570a:	e1b7      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800570c:	2320      	movs	r3, #32
 800570e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005712:	e1b3      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005714:	2340      	movs	r3, #64	; 0x40
 8005716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571a:	e1af      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005722:	bf00      	nop
 8005724:	e1aa      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a37      	ldr	r2, [pc, #220]	; (8005808 <UART_SetConfig+0x35c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d132      	bne.n	8005796 <UART_SetConfig+0x2ea>
 8005730:	4b32      	ldr	r3, [pc, #200]	; (80057fc <UART_SetConfig+0x350>)
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	2b05      	cmp	r3, #5
 800573a:	d827      	bhi.n	800578c <UART_SetConfig+0x2e0>
 800573c:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <UART_SetConfig+0x298>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	0800575d 	.word	0x0800575d
 8005748:	08005765 	.word	0x08005765
 800574c:	0800576d 	.word	0x0800576d
 8005750:	08005775 	.word	0x08005775
 8005754:	0800577d 	.word	0x0800577d
 8005758:	08005785 	.word	0x08005785
 800575c:	2300      	movs	r3, #0
 800575e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005762:	e18b      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005764:	2304      	movs	r3, #4
 8005766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800576a:	e187      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800576c:	2308      	movs	r3, #8
 800576e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005772:	e183      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005774:	2310      	movs	r3, #16
 8005776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800577a:	e17f      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800577c:	2320      	movs	r3, #32
 800577e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005782:	e17b      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005784:	2340      	movs	r3, #64	; 0x40
 8005786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578a:	e177      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005792:	bf00      	nop
 8005794:	e172      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1c      	ldr	r2, [pc, #112]	; (800580c <UART_SetConfig+0x360>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d144      	bne.n	800582a <UART_SetConfig+0x37e>
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <UART_SetConfig+0x350>)
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	d839      	bhi.n	8005820 <UART_SetConfig+0x374>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <UART_SetConfig+0x308>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	080057cd 	.word	0x080057cd
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	080057dd 	.word	0x080057dd
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	08005811 	.word	0x08005811
 80057c8:	08005819 	.word	0x08005819
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d2:	e153      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057da:	e14f      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e2:	e14b      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ea:	e147      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80057ec:	cfff69f3 	.word	0xcfff69f3
 80057f0:	58000c00 	.word	0x58000c00
 80057f4:	11fff4ff 	.word	0x11fff4ff
 80057f8:	40011000 	.word	0x40011000
 80057fc:	58024400 	.word	0x58024400
 8005800:	40004400 	.word	0x40004400
 8005804:	40004800 	.word	0x40004800
 8005808:	40004c00 	.word	0x40004c00
 800580c:	40005000 	.word	0x40005000
 8005810:	2320      	movs	r3, #32
 8005812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005816:	e131      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005818:	2340      	movs	r3, #64	; 0x40
 800581a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581e:	e12d      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005826:	bf00      	nop
 8005828:	e128      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4ab6      	ldr	r2, [pc, #728]	; (8005b08 <UART_SetConfig+0x65c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d178      	bne.n	8005926 <UART_SetConfig+0x47a>
 8005834:	4bb5      	ldr	r3, [pc, #724]	; (8005b0c <UART_SetConfig+0x660>)
 8005836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583c:	2b28      	cmp	r3, #40	; 0x28
 800583e:	d86d      	bhi.n	800591c <UART_SetConfig+0x470>
 8005840:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0x39c>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	080058ed 	.word	0x080058ed
 800584c:	0800591d 	.word	0x0800591d
 8005850:	0800591d 	.word	0x0800591d
 8005854:	0800591d 	.word	0x0800591d
 8005858:	0800591d 	.word	0x0800591d
 800585c:	0800591d 	.word	0x0800591d
 8005860:	0800591d 	.word	0x0800591d
 8005864:	0800591d 	.word	0x0800591d
 8005868:	080058f5 	.word	0x080058f5
 800586c:	0800591d 	.word	0x0800591d
 8005870:	0800591d 	.word	0x0800591d
 8005874:	0800591d 	.word	0x0800591d
 8005878:	0800591d 	.word	0x0800591d
 800587c:	0800591d 	.word	0x0800591d
 8005880:	0800591d 	.word	0x0800591d
 8005884:	0800591d 	.word	0x0800591d
 8005888:	080058fd 	.word	0x080058fd
 800588c:	0800591d 	.word	0x0800591d
 8005890:	0800591d 	.word	0x0800591d
 8005894:	0800591d 	.word	0x0800591d
 8005898:	0800591d 	.word	0x0800591d
 800589c:	0800591d 	.word	0x0800591d
 80058a0:	0800591d 	.word	0x0800591d
 80058a4:	0800591d 	.word	0x0800591d
 80058a8:	08005905 	.word	0x08005905
 80058ac:	0800591d 	.word	0x0800591d
 80058b0:	0800591d 	.word	0x0800591d
 80058b4:	0800591d 	.word	0x0800591d
 80058b8:	0800591d 	.word	0x0800591d
 80058bc:	0800591d 	.word	0x0800591d
 80058c0:	0800591d 	.word	0x0800591d
 80058c4:	0800591d 	.word	0x0800591d
 80058c8:	0800590d 	.word	0x0800590d
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	0800591d 	.word	0x0800591d
 80058d4:	0800591d 	.word	0x0800591d
 80058d8:	0800591d 	.word	0x0800591d
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	0800591d 	.word	0x0800591d
 80058e8:	08005915 	.word	0x08005915
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e0c3      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80058f4:	2304      	movs	r3, #4
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e0bf      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80058fc:	2308      	movs	r3, #8
 80058fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005902:	e0bb      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005904:	2310      	movs	r3, #16
 8005906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800590a:	e0b7      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800590c:	2320      	movs	r3, #32
 800590e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005912:	e0b3      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005914:	2340      	movs	r3, #64	; 0x40
 8005916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591a:	e0af      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005922:	bf00      	nop
 8005924:	e0aa      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a79      	ldr	r2, [pc, #484]	; (8005b10 <UART_SetConfig+0x664>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d132      	bne.n	8005996 <UART_SetConfig+0x4ea>
 8005930:	4b76      	ldr	r3, [pc, #472]	; (8005b0c <UART_SetConfig+0x660>)
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	2b05      	cmp	r3, #5
 800593a:	d827      	bhi.n	800598c <UART_SetConfig+0x4e0>
 800593c:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <UART_SetConfig+0x498>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	0800595d 	.word	0x0800595d
 8005948:	08005965 	.word	0x08005965
 800594c:	0800596d 	.word	0x0800596d
 8005950:	08005975 	.word	0x08005975
 8005954:	0800597d 	.word	0x0800597d
 8005958:	08005985 	.word	0x08005985
 800595c:	2300      	movs	r3, #0
 800595e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005962:	e08b      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005964:	2304      	movs	r3, #4
 8005966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596a:	e087      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800596c:	2308      	movs	r3, #8
 800596e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005972:	e083      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005974:	2310      	movs	r3, #16
 8005976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597a:	e07f      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800597c:	2320      	movs	r3, #32
 800597e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005982:	e07b      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005984:	2340      	movs	r3, #64	; 0x40
 8005986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598a:	e077      	b.n	8005a7c <UART_SetConfig+0x5d0>
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005992:	bf00      	nop
 8005994:	e072      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a5e      	ldr	r2, [pc, #376]	; (8005b14 <UART_SetConfig+0x668>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d132      	bne.n	8005a06 <UART_SetConfig+0x55a>
 80059a0:	4b5a      	ldr	r3, [pc, #360]	; (8005b0c <UART_SetConfig+0x660>)
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	2b05      	cmp	r3, #5
 80059aa:	d827      	bhi.n	80059fc <UART_SetConfig+0x550>
 80059ac:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <UART_SetConfig+0x508>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059cd 	.word	0x080059cd
 80059b8:	080059d5 	.word	0x080059d5
 80059bc:	080059dd 	.word	0x080059dd
 80059c0:	080059e5 	.word	0x080059e5
 80059c4:	080059ed 	.word	0x080059ed
 80059c8:	080059f5 	.word	0x080059f5
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d2:	e053      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80059d4:	2304      	movs	r3, #4
 80059d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059da:	e04f      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80059dc:	2308      	movs	r3, #8
 80059de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059e2:	e04b      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80059e4:	2310      	movs	r3, #16
 80059e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ea:	e047      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80059ec:	2320      	movs	r3, #32
 80059ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f2:	e043      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80059f4:	2340      	movs	r3, #64	; 0x40
 80059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fa:	e03f      	b.n	8005a7c <UART_SetConfig+0x5d0>
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a02:	bf00      	nop
 8005a04:	e03a      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a43      	ldr	r2, [pc, #268]	; (8005b18 <UART_SetConfig+0x66c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d132      	bne.n	8005a76 <UART_SetConfig+0x5ca>
 8005a10:	4b3e      	ldr	r3, [pc, #248]	; (8005b0c <UART_SetConfig+0x660>)
 8005a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	2b05      	cmp	r3, #5
 8005a1a:	d827      	bhi.n	8005a6c <UART_SetConfig+0x5c0>
 8005a1c:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x578>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a3d 	.word	0x08005a3d
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a4d 	.word	0x08005a4d
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a42:	e01b      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005a44:	2304      	movs	r3, #4
 8005a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a4a:	e017      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a52:	e013      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005a54:	2310      	movs	r3, #16
 8005a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5a:	e00f      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005a5c:	2320      	movs	r3, #32
 8005a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a62:	e00b      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6a:	e007      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <UART_SetConfig+0x5d0>
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <UART_SetConfig+0x66c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	f040 80b8 	bne.w	8005bf8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d019      	beq.n	8005ac4 <UART_SetConfig+0x618>
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	dc04      	bgt.n	8005a9e <UART_SetConfig+0x5f2>
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d009      	beq.n	8005aac <UART_SetConfig+0x600>
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d00b      	beq.n	8005ab4 <UART_SetConfig+0x608>
 8005a9c:	e042      	b.n	8005b24 <UART_SetConfig+0x678>
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d02b      	beq.n	8005afa <UART_SetConfig+0x64e>
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	d02c      	beq.n	8005b00 <UART_SetConfig+0x654>
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d014      	beq.n	8005ad4 <UART_SetConfig+0x628>
 8005aaa:	e03b      	b.n	8005b24 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005aac:	f7fd face 	bl	800304c <HAL_RCCEx_GetD3PCLK1Freq>
 8005ab0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ab2:	e03d      	b.n	8005b30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ab4:	f107 0314 	add.w	r3, r7, #20
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fd fadd 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ac2:	e035      	b.n	8005b30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ac4:	f107 0308 	add.w	r3, r7, #8
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fd fc21 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ad2:	e02d      	b.n	8005b30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ad4:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <UART_SetConfig+0x660>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <UART_SetConfig+0x660>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	08db      	lsrs	r3, r3, #3
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	4a0c      	ldr	r2, [pc, #48]	; (8005b1c <UART_SetConfig+0x670>)
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005af2:	e01d      	b.n	8005b30 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <UART_SetConfig+0x670>)
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005af8:	e01a      	b.n	8005b30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <UART_SetConfig+0x674>)
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005afe:	e017      	b.n	8005b30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b06:	e013      	b.n	8005b30 <UART_SetConfig+0x684>
 8005b08:	40011400 	.word	0x40011400
 8005b0c:	58024400 	.word	0x58024400
 8005b10:	40007800 	.word	0x40007800
 8005b14:	40007c00 	.word	0x40007c00
 8005b18:	58000c00 	.word	0x58000c00
 8005b1c:	03d09000 	.word	0x03d09000
 8005b20:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 824d 	beq.w	8005fd2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	4aad      	ldr	r2, [pc, #692]	; (8005df4 <UART_SetConfig+0x948>)
 8005b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b42:	461a      	mov	r2, r3
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b4a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	4613      	mov	r3, r2
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	4413      	add	r3, r2
 8005b56:	6a3a      	ldr	r2, [r7, #32]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d305      	bcc.n	8005b68 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b62:	6a3a      	ldr	r2, [r7, #32]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d903      	bls.n	8005b70 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b6e:	e230      	b.n	8005fd2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	4618      	mov	r0, r3
 8005b74:	f04f 0100 	mov.w	r1, #0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	4a9d      	ldr	r2, [pc, #628]	; (8005df4 <UART_SetConfig+0x948>)
 8005b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f04f 0400 	mov.w	r4, #0
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	f7fa fbf8 	bl	8000380 <__aeabi_uldivmod>
 8005b90:	4603      	mov	r3, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	4619      	mov	r1, r3
 8005b96:	4622      	mov	r2, r4
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	f04f 0400 	mov.w	r4, #0
 8005ba0:	0214      	lsls	r4, r2, #8
 8005ba2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ba6:	020b      	lsls	r3, r1, #8
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6852      	ldr	r2, [r2, #4]
 8005bac:	0852      	lsrs	r2, r2, #1
 8005bae:	4611      	mov	r1, r2
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	eb13 0b01 	adds.w	fp, r3, r1
 8005bb8:	eb44 0c02 	adc.w	ip, r4, r2
 8005bbc:	4658      	mov	r0, fp
 8005bbe:	4661      	mov	r1, ip
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f04f 0400 	mov.w	r4, #0
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4623      	mov	r3, r4
 8005bcc:	f7fa fbd8 	bl	8000380 <__aeabi_uldivmod>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bdc:	d308      	bcc.n	8005bf0 <UART_SetConfig+0x744>
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be4:	d204      	bcs.n	8005bf0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bec:	60da      	str	r2, [r3, #12]
 8005bee:	e1f0      	b.n	8005fd2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005bf6:	e1ec      	b.n	8005fd2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c00:	f040 8100 	bne.w	8005e04 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	f200 80b7 	bhi.w	8005d7c <UART_SetConfig+0x8d0>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <UART_SetConfig+0x768>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005d19 	.word	0x08005d19
 8005c18:	08005d21 	.word	0x08005d21
 8005c1c:	08005d7d 	.word	0x08005d7d
 8005c20:	08005d7d 	.word	0x08005d7d
 8005c24:	08005d29 	.word	0x08005d29
 8005c28:	08005d7d 	.word	0x08005d7d
 8005c2c:	08005d7d 	.word	0x08005d7d
 8005c30:	08005d7d 	.word	0x08005d7d
 8005c34:	08005d39 	.word	0x08005d39
 8005c38:	08005d7d 	.word	0x08005d7d
 8005c3c:	08005d7d 	.word	0x08005d7d
 8005c40:	08005d7d 	.word	0x08005d7d
 8005c44:	08005d7d 	.word	0x08005d7d
 8005c48:	08005d7d 	.word	0x08005d7d
 8005c4c:	08005d7d 	.word	0x08005d7d
 8005c50:	08005d7d 	.word	0x08005d7d
 8005c54:	08005d49 	.word	0x08005d49
 8005c58:	08005d7d 	.word	0x08005d7d
 8005c5c:	08005d7d 	.word	0x08005d7d
 8005c60:	08005d7d 	.word	0x08005d7d
 8005c64:	08005d7d 	.word	0x08005d7d
 8005c68:	08005d7d 	.word	0x08005d7d
 8005c6c:	08005d7d 	.word	0x08005d7d
 8005c70:	08005d7d 	.word	0x08005d7d
 8005c74:	08005d7d 	.word	0x08005d7d
 8005c78:	08005d7d 	.word	0x08005d7d
 8005c7c:	08005d7d 	.word	0x08005d7d
 8005c80:	08005d7d 	.word	0x08005d7d
 8005c84:	08005d7d 	.word	0x08005d7d
 8005c88:	08005d7d 	.word	0x08005d7d
 8005c8c:	08005d7d 	.word	0x08005d7d
 8005c90:	08005d7d 	.word	0x08005d7d
 8005c94:	08005d6f 	.word	0x08005d6f
 8005c98:	08005d7d 	.word	0x08005d7d
 8005c9c:	08005d7d 	.word	0x08005d7d
 8005ca0:	08005d7d 	.word	0x08005d7d
 8005ca4:	08005d7d 	.word	0x08005d7d
 8005ca8:	08005d7d 	.word	0x08005d7d
 8005cac:	08005d7d 	.word	0x08005d7d
 8005cb0:	08005d7d 	.word	0x08005d7d
 8005cb4:	08005d7d 	.word	0x08005d7d
 8005cb8:	08005d7d 	.word	0x08005d7d
 8005cbc:	08005d7d 	.word	0x08005d7d
 8005cc0:	08005d7d 	.word	0x08005d7d
 8005cc4:	08005d7d 	.word	0x08005d7d
 8005cc8:	08005d7d 	.word	0x08005d7d
 8005ccc:	08005d7d 	.word	0x08005d7d
 8005cd0:	08005d7d 	.word	0x08005d7d
 8005cd4:	08005d7d 	.word	0x08005d7d
 8005cd8:	08005d7d 	.word	0x08005d7d
 8005cdc:	08005d7d 	.word	0x08005d7d
 8005ce0:	08005d7d 	.word	0x08005d7d
 8005ce4:	08005d7d 	.word	0x08005d7d
 8005ce8:	08005d7d 	.word	0x08005d7d
 8005cec:	08005d7d 	.word	0x08005d7d
 8005cf0:	08005d7d 	.word	0x08005d7d
 8005cf4:	08005d7d 	.word	0x08005d7d
 8005cf8:	08005d7d 	.word	0x08005d7d
 8005cfc:	08005d7d 	.word	0x08005d7d
 8005d00:	08005d7d 	.word	0x08005d7d
 8005d04:	08005d7d 	.word	0x08005d7d
 8005d08:	08005d7d 	.word	0x08005d7d
 8005d0c:	08005d7d 	.word	0x08005d7d
 8005d10:	08005d7d 	.word	0x08005d7d
 8005d14:	08005d75 	.word	0x08005d75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d18:	f7fc fef4 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8005d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d1e:	e033      	b.n	8005d88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d20:	f7fc ff06 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8005d24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d26:	e02f      	b.n	8005d88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d28:	f107 0314 	add.w	r3, r7, #20
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fd f9a3 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d36:	e027      	b.n	8005d88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d38:	f107 0308 	add.w	r3, r7, #8
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fd fae7 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d46:	e01f      	b.n	8005d88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d48:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <UART_SetConfig+0x94c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d54:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <UART_SetConfig+0x94c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	08db      	lsrs	r3, r3, #3
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <UART_SetConfig+0x950>)
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d66:	e00f      	b.n	8005d88 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005d68:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <UART_SetConfig+0x950>)
 8005d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d6c:	e00c      	b.n	8005d88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d6e:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <UART_SetConfig+0x954>)
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d72:	e009      	b.n	8005d88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d7a:	e005      	b.n	8005d88 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8121 	beq.w	8005fd2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	4a17      	ldr	r2, [pc, #92]	; (8005df4 <UART_SetConfig+0x948>)
 8005d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da2:	005a      	lsls	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	441a      	add	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	2b0f      	cmp	r3, #15
 8005dbc:	d916      	bls.n	8005dec <UART_SetConfig+0x940>
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc4:	d212      	bcs.n	8005dec <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f023 030f 	bic.w	r3, r3, #15
 8005dce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dde:	4313      	orrs	r3, r2
 8005de0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	e0f2      	b.n	8005fd2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005df2:	e0ee      	b.n	8005fd2 <UART_SetConfig+0xb26>
 8005df4:	0800840c 	.word	0x0800840c
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	03d09000 	.word	0x03d09000
 8005e00:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e08:	2b40      	cmp	r3, #64	; 0x40
 8005e0a:	f200 80b7 	bhi.w	8005f7c <UART_SetConfig+0xad0>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <UART_SetConfig+0x968>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005f19 	.word	0x08005f19
 8005e18:	08005f21 	.word	0x08005f21
 8005e1c:	08005f7d 	.word	0x08005f7d
 8005e20:	08005f7d 	.word	0x08005f7d
 8005e24:	08005f29 	.word	0x08005f29
 8005e28:	08005f7d 	.word	0x08005f7d
 8005e2c:	08005f7d 	.word	0x08005f7d
 8005e30:	08005f7d 	.word	0x08005f7d
 8005e34:	08005f39 	.word	0x08005f39
 8005e38:	08005f7d 	.word	0x08005f7d
 8005e3c:	08005f7d 	.word	0x08005f7d
 8005e40:	08005f7d 	.word	0x08005f7d
 8005e44:	08005f7d 	.word	0x08005f7d
 8005e48:	08005f7d 	.word	0x08005f7d
 8005e4c:	08005f7d 	.word	0x08005f7d
 8005e50:	08005f7d 	.word	0x08005f7d
 8005e54:	08005f49 	.word	0x08005f49
 8005e58:	08005f7d 	.word	0x08005f7d
 8005e5c:	08005f7d 	.word	0x08005f7d
 8005e60:	08005f7d 	.word	0x08005f7d
 8005e64:	08005f7d 	.word	0x08005f7d
 8005e68:	08005f7d 	.word	0x08005f7d
 8005e6c:	08005f7d 	.word	0x08005f7d
 8005e70:	08005f7d 	.word	0x08005f7d
 8005e74:	08005f7d 	.word	0x08005f7d
 8005e78:	08005f7d 	.word	0x08005f7d
 8005e7c:	08005f7d 	.word	0x08005f7d
 8005e80:	08005f7d 	.word	0x08005f7d
 8005e84:	08005f7d 	.word	0x08005f7d
 8005e88:	08005f7d 	.word	0x08005f7d
 8005e8c:	08005f7d 	.word	0x08005f7d
 8005e90:	08005f7d 	.word	0x08005f7d
 8005e94:	08005f6f 	.word	0x08005f6f
 8005e98:	08005f7d 	.word	0x08005f7d
 8005e9c:	08005f7d 	.word	0x08005f7d
 8005ea0:	08005f7d 	.word	0x08005f7d
 8005ea4:	08005f7d 	.word	0x08005f7d
 8005ea8:	08005f7d 	.word	0x08005f7d
 8005eac:	08005f7d 	.word	0x08005f7d
 8005eb0:	08005f7d 	.word	0x08005f7d
 8005eb4:	08005f7d 	.word	0x08005f7d
 8005eb8:	08005f7d 	.word	0x08005f7d
 8005ebc:	08005f7d 	.word	0x08005f7d
 8005ec0:	08005f7d 	.word	0x08005f7d
 8005ec4:	08005f7d 	.word	0x08005f7d
 8005ec8:	08005f7d 	.word	0x08005f7d
 8005ecc:	08005f7d 	.word	0x08005f7d
 8005ed0:	08005f7d 	.word	0x08005f7d
 8005ed4:	08005f7d 	.word	0x08005f7d
 8005ed8:	08005f7d 	.word	0x08005f7d
 8005edc:	08005f7d 	.word	0x08005f7d
 8005ee0:	08005f7d 	.word	0x08005f7d
 8005ee4:	08005f7d 	.word	0x08005f7d
 8005ee8:	08005f7d 	.word	0x08005f7d
 8005eec:	08005f7d 	.word	0x08005f7d
 8005ef0:	08005f7d 	.word	0x08005f7d
 8005ef4:	08005f7d 	.word	0x08005f7d
 8005ef8:	08005f7d 	.word	0x08005f7d
 8005efc:	08005f7d 	.word	0x08005f7d
 8005f00:	08005f7d 	.word	0x08005f7d
 8005f04:	08005f7d 	.word	0x08005f7d
 8005f08:	08005f7d 	.word	0x08005f7d
 8005f0c:	08005f7d 	.word	0x08005f7d
 8005f10:	08005f7d 	.word	0x08005f7d
 8005f14:	08005f75 	.word	0x08005f75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fc fdf4 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8005f1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f1e:	e033      	b.n	8005f88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7fc fe06 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8005f24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f26:	e02f      	b.n	8005f88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f28:	f107 0314 	add.w	r3, r7, #20
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fd f8a3 	bl	8003078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f36:	e027      	b.n	8005f88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f38:	f107 0308 	add.w	r3, r7, #8
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fd f9e7 	bl	8003310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f46:	e01f      	b.n	8005f88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f48:	4b2c      	ldr	r3, [pc, #176]	; (8005ffc <UART_SetConfig+0xb50>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f54:	4b29      	ldr	r3, [pc, #164]	; (8005ffc <UART_SetConfig+0xb50>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	08db      	lsrs	r3, r3, #3
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	4a28      	ldr	r2, [pc, #160]	; (8006000 <UART_SetConfig+0xb54>)
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
 8005f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f66:	e00f      	b.n	8005f88 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005f68:	4b25      	ldr	r3, [pc, #148]	; (8006000 <UART_SetConfig+0xb54>)
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f6c:	e00c      	b.n	8005f88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f6e:	4b25      	ldr	r3, [pc, #148]	; (8006004 <UART_SetConfig+0xb58>)
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f72:	e009      	b.n	8005f88 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f7a:	e005      	b.n	8005f88 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f86:	bf00      	nop
    }

    if (pclk != 0U)
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d021      	beq.n	8005fd2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <UART_SetConfig+0xb5c>)
 8005f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	441a      	add	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	2b0f      	cmp	r3, #15
 8005fb8:	d908      	bls.n	8005fcc <UART_SetConfig+0xb20>
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	d204      	bcs.n	8005fcc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fc8:	60da      	str	r2, [r3, #12]
 8005fca:	e002      	b.n	8005fd2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005fee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3738      	adds	r7, #56	; 0x38
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005ffc:	58024400 	.word	0x58024400
 8006000:	03d09000 	.word	0x03d09000
 8006004:	003d0900 	.word	0x003d0900
 8006008:	0800840c 	.word	0x0800840c

0800600c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01a      	beq.n	8006122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800610a:	d10a      	bne.n	8006122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
  }
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af02      	add	r7, sp, #8
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006160:	f7fa ff6e 	bl	8001040 <HAL_GetTick>
 8006164:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b08      	cmp	r3, #8
 8006172:	d10e      	bne.n	8006192 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f82c 	bl	80061e0 <UART_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e022      	b.n	80061d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b04      	cmp	r3, #4
 800619e:	d10e      	bne.n	80061be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f816 	bl	80061e0 <UART_WaitOnFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e00c      	b.n	80061d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	4613      	mov	r3, r2
 80061ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f0:	e062      	b.n	80062b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d05e      	beq.n	80062b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fa:	f7fa ff21 	bl	8001040 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	429a      	cmp	r2, r3
 8006208:	d302      	bcc.n	8006210 <UART_WaitOnFlagUntilTimeout+0x30>
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11d      	bne.n	800624c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800621e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e045      	b.n	80062d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b00      	cmp	r3, #0
 8006258:	d02e      	beq.n	80062b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006268:	d126      	bne.n	80062b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006272:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006282:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0201 	bic.w	r2, r2, #1
 8006292:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e00f      	b.n	80062d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69da      	ldr	r2, [r3, #28]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4013      	ands	r3, r2
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	bf0c      	ite	eq
 80062c8:	2301      	moveq	r3, #1
 80062ca:	2300      	movne	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	79fb      	ldrb	r3, [r7, #7]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d08d      	beq.n	80061f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6899      	ldr	r1, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <UART_EndRxTransfer+0x44>)
 8006304:	400b      	ands	r3, r1
 8006306:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	effffffe 	.word	0xeffffffe

08006328 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff f8a6 	bl	8005498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff f882 	bl	8005484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_UARTEx_DisableFifoMode+0x16>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e027      	b.n	800642a <HAL_UARTEx_DisableFifoMode+0x66>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2224      	movs	r2, #36	; 0x24
 80063e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006408:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800644a:	2302      	movs	r3, #2
 800644c:	e02d      	b.n	80064aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2224      	movs	r2, #36	; 0x24
 800645a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f850 	bl	8006530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e02d      	b.n	8006526 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2224      	movs	r2, #36	; 0x24
 80064d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f812 	bl	8006530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006530:	b480      	push	{r7}
 8006532:	b089      	sub	sp, #36	; 0x24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006538:	4a2f      	ldr	r2, [pc, #188]	; (80065f8 <UARTEx_SetNbDataToProcess+0xc8>)
 800653a:	f107 0314 	add.w	r3, r7, #20
 800653e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006542:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006546:	4a2d      	ldr	r2, [pc, #180]	; (80065fc <UARTEx_SetNbDataToProcess+0xcc>)
 8006548:	f107 030c 	add.w	r3, r7, #12
 800654c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006550:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006558:	2b00      	cmp	r3, #0
 800655a:	d108      	bne.n	800656e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800656c:	e03d      	b.n	80065ea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800656e:	2310      	movs	r3, #16
 8006570:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006572:	2310      	movs	r3, #16
 8006574:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	0e5b      	lsrs	r3, r3, #25
 800657e:	b2db      	uxtb	r3, r3
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	0f5b      	lsrs	r3, r3, #29
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006596:	7fbb      	ldrb	r3, [r7, #30]
 8006598:	7f3a      	ldrb	r2, [r7, #28]
 800659a:	f107 0120 	add.w	r1, r7, #32
 800659e:	440a      	add	r2, r1
 80065a0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
 80065a8:	7f3a      	ldrb	r2, [r7, #28]
 80065aa:	f107 0120 	add.w	r1, r7, #32
 80065ae:	440a      	add	r2, r1
 80065b0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80065b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80065c0:	7ffb      	ldrb	r3, [r7, #31]
 80065c2:	7f7a      	ldrb	r2, [r7, #29]
 80065c4:	f107 0120 	add.w	r1, r7, #32
 80065c8:	440a      	add	r2, r1
 80065ca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	7f7a      	ldrb	r2, [r7, #29]
 80065d4:	f107 0120 	add.w	r1, r7, #32
 80065d8:	440a      	add	r2, r1
 80065da:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80065de:	fb93 f3f2 	sdiv	r3, r3, r2
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065ea:	bf00      	nop
 80065ec:	3724      	adds	r7, #36	; 0x24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	080083ec 	.word	0x080083ec
 80065fc:	080083f4 	.word	0x080083f4

08006600 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006600:	b084      	sub	sp, #16
 8006602:	b480      	push	{r7}
 8006604:	b085      	sub	sp, #20
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	f107 001c 	add.w	r0, r7, #28
 800660e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006616:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006618:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800661a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800661e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8006622:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8006626:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	4b07      	ldr	r3, [pc, #28]	; (8006650 <SDMMC_Init+0x50>)
 8006634:	4013      	ands	r3, r2
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	b004      	add	sp, #16
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	ffc02c00 	.word	0xffc02c00

08006654 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006662:	4618      	mov	r0, r3
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f043 0203 	orr.w	r2, r3, #3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0303 	and.w	r3, r3, #3
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
	...

080066d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80066f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80066fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	4b06      	ldr	r3, [pc, #24]	; (8006720 <SDMMC_SendCommand+0x50>)
 8006708:	4013      	ands	r3, r2
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	fffee0c0 	.word	0xfffee0c0

08006724 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	b2db      	uxtb	r3, r3
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3314      	adds	r3, #20
 800674c:	461a      	mov	r2, r3
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	4413      	add	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800678a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006790:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006796:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0

}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80067ca:	2310      	movs	r3, #16
 80067cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067de:	f107 0308 	add.w	r3, r7, #8
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff ff73 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80067ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ee:	2110      	movs	r1, #16
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 faaf 	bl	8006d54 <SDMMC_GetCmdResp1>
 80067f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067f8:	69fb      	ldr	r3, [r7, #28]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b088      	sub	sp, #32
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006810:	2311      	movs	r3, #17
 8006812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800681e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006824:	f107 0308 	add.w	r3, r7, #8
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ff50 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006830:	f241 3288 	movw	r2, #5000	; 0x1388
 8006834:	2111      	movs	r1, #17
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa8c 	bl	8006d54 <SDMMC_GetCmdResp1>
 800683c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800683e:	69fb      	ldr	r3, [r7, #28]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006856:	2312      	movs	r3, #18
 8006858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800685a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800685e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800686a:	f107 0308 	add.w	r3, r7, #8
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff ff2d 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006876:	f241 3288 	movw	r2, #5000	; 0x1388
 800687a:	2112      	movs	r1, #18
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fa69 	bl	8006d54 <SDMMC_GetCmdResp1>
 8006882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006884:	69fb      	ldr	r3, [r7, #28]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3720      	adds	r7, #32
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b088      	sub	sp, #32
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800689c:	2318      	movs	r3, #24
 800689e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068b0:	f107 0308 	add.w	r3, r7, #8
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff ff0a 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80068bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c0:	2118      	movs	r1, #24
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fa46 	bl	8006d54 <SDMMC_GetCmdResp1>
 80068c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ca:	69fb      	ldr	r3, [r7, #28]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3720      	adds	r7, #32
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80068e2:	2319      	movs	r3, #25
 80068e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068f6:	f107 0308 	add.w	r3, r7, #8
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fee7 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006902:	f241 3288 	movw	r2, #5000	; 0x1388
 8006906:	2119      	movs	r1, #25
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa23 	bl	8006d54 <SDMMC_GetCmdResp1>
 800690e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006910:	69fb      	ldr	r3, [r7, #28]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006928:	230c      	movs	r3, #12
 800692a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800692c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800693a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff feb8 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006960:	4a0b      	ldr	r2, [pc, #44]	; (8006990 <SDMMC_CmdStopTransfer+0x74>)
 8006962:	210c      	movs	r1, #12
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f9f5 	bl	8006d54 <SDMMC_GetCmdResp1>
 800696a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800697e:	d101      	bne.n	8006984 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8006980:	2300      	movs	r3, #0
 8006982:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8006984:	69fb      	ldr	r3, [r7, #28]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	05f5e100 	.word	0x05f5e100

08006994 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08a      	sub	sp, #40	; 0x28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80069a4:	2307      	movs	r3, #7
 80069a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ac:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069b6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069b8:	f107 0310 	add.w	r3, r7, #16
 80069bc:	4619      	mov	r1, r3
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff fe86 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80069c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c8:	2107      	movs	r1, #7
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 f9c2 	bl	8006d54 <SDMMC_GetCmdResp1>
 80069d0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3728      	adds	r7, #40	; 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fe65 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f976 	bl	8006cf8 <SDMMC_GetCmdError>
 8006a0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a0e:	69fb      	ldr	r3, [r7, #28]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006a20:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006a26:	2308      	movs	r3, #8
 8006a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a30:	2300      	movs	r3, #0
 8006a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a3a:	f107 0308 	add.w	r3, r7, #8
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff fe45 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb78 	bl	800713c <SDMMC_GetCmdResp7>
 8006a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006a66:	2337      	movs	r3, #55	; 0x37
 8006a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fe25 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a8a:	2137      	movs	r1, #55	; 0x37
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f961 	bl	8006d54 <SDMMC_GetCmdResp1>
 8006a92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a94:	69fb      	ldr	r3, [r7, #28]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b088      	sub	sp, #32
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006aac:	2329      	movs	r3, #41	; 0x29
 8006aae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006abe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ac0:	f107 0308 	add.w	r3, r7, #8
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fe02 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fa7d 	bl	8006fcc <SDMMC_GetCmdResp3>
 8006ad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3720      	adds	r7, #32
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b088      	sub	sp, #32
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006aec:	2306      	movs	r3, #6
 8006aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006afe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b00:	f107 0308 	add.w	r3, r7, #8
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff fde2 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b10:	2106      	movs	r1, #6
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f91e 	bl	8006d54 <SDMMC_GetCmdResp1>
 8006b18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3720      	adds	r7, #32
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006b30:	2333      	movs	r3, #51	; 0x33
 8006b32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b44:	f107 0308 	add.w	r3, r7, #8
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fdc0 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b54:	2133      	movs	r1, #51	; 0x33
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f8fc 	bl	8006d54 <SDMMC_GetCmdResp1>
 8006b5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006b74:	2302      	movs	r3, #2
 8006b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006b78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b88:	f107 0308 	add.w	r3, r7, #8
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fd9e 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f9cf 	bl	8006f38 <SDMMC_GetCmdResp2>
 8006b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b088      	sub	sp, #32
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006bb4:	2309      	movs	r3, #9
 8006bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006bb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006bbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006bc8:	f107 0308 	add.w	r3, r7, #8
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff fd7e 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f9af 	bl	8006f38 <SDMMC_GetCmdResp2>
 8006bda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3720      	adds	r7, #32
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b088      	sub	sp, #32
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c08:	f107 0308 	add.w	r3, r7, #8
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fd5e 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	2103      	movs	r1, #3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa17 	bl	800704c <SDMMC_GetCmdResp6>
 8006c1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c20:	69fb      	ldr	r3, [r7, #28]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b088      	sub	sp, #32
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006c38:	230d      	movs	r3, #13
 8006c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c4c:	f107 0308 	add.w	r3, r7, #8
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff fd3c 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5c:	210d      	movs	r1, #13
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f878 	bl	8006d54 <SDMMC_GetCmdResp1>
 8006c64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c66:	69fb      	ldr	r3, [r7, #28]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006c7c:	230d      	movs	r3, #13
 8006c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c90:	f107 0308 	add.w	r3, r7, #8
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff fd1a 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca0:	210d      	movs	r1, #13
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f856 	bl	8006d54 <SDMMC_GetCmdResp1>
 8006ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006caa:	69fb      	ldr	r3, [r7, #28]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3720      	adds	r7, #32
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8006cc0:	230b      	movs	r3, #11
 8006cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cd4:	f107 0308 	add.w	r3, r7, #8
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fcf8 	bl	80066d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8006ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce4:	210b      	movs	r1, #11
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f834 	bl	8006d54 <SDMMC_GetCmdResp1>
 8006cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cee:	69fb      	ldr	r3, [r7, #28]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3720      	adds	r7, #32
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d00:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <SDMMC_GetCmdError+0x50>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <SDMMC_GetCmdError+0x54>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	0a5b      	lsrs	r3, r3, #9
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1e5a      	subs	r2, r3, #1
 8006d1a:	60fa      	str	r2, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d24:	e009      	b.n	8006d3a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f1      	beq.n	8006d16 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a06      	ldr	r2, [pc, #24]	; (8006d50 <SDMMC_GetCmdError+0x58>)
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000000 	.word	0x20000000
 8006d4c:	10624dd3 	.word	0x10624dd3
 8006d50:	002000c5 	.word	0x002000c5

08006d54 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d62:	4b70      	ldr	r3, [pc, #448]	; (8006f24 <SDMMC_GetCmdResp1+0x1d0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a70      	ldr	r2, [pc, #448]	; (8006f28 <SDMMC_GetCmdResp1+0x1d4>)
 8006d68:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6c:	0a5a      	lsrs	r2, r3, #9
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	1e5a      	subs	r2, r3, #1
 8006d7a:	61fa      	str	r2, [r7, #28]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d84:	e0c9      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	4b67      	ldr	r3, [pc, #412]	; (8006f2c <SDMMC_GetCmdResp1+0x1d8>)
 8006d90:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0ef      	beq.n	8006d76 <SDMMC_GetCmdResp1+0x22>
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1ea      	bne.n	8006d76 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d004      	beq.n	8006db6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2204      	movs	r2, #4
 8006db0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006db2:	2304      	movs	r3, #4
 8006db4:	e0b1      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0a6      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4a58      	ldr	r2, [pc, #352]	; (8006f30 <SDMMC_GetCmdResp1+0x1dc>)
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff fca6 	bl	8006724 <SDMMC_GetCommandResponse>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	461a      	mov	r2, r3
 8006ddc:	7afb      	ldrb	r3, [r7, #11]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d001      	beq.n	8006de6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e099      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006de6:	2100      	movs	r1, #0
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f7ff fca8 	bl	800673e <SDMMC_GetResponse>
 8006dee:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4b50      	ldr	r3, [pc, #320]	; (8006f34 <SDMMC_GetCmdResp1+0x1e0>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e08d      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	da02      	bge.n	8006e0a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e08:	e087      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	e080      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006e22:	2380      	movs	r3, #128	; 0x80
 8006e24:	e079      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e34:	e071      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e44:	e069      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e54:	e061      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e64:	e059      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e74:	e051      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e84:	e049      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006e90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e94:	e041      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ea4:	e039      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006eb4:	e031      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006ec0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ec4:	e029      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006ed0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ed4:	e021      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006ee0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ee4:	e019      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ef4:	e011      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006f00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f04:	e009      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006f10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f14:	e001      	b.n	8006f1a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000000 	.word	0x20000000
 8006f28:	10624dd3 	.word	0x10624dd3
 8006f2c:	00200045 	.word	0x00200045
 8006f30:	002000c5 	.word	0x002000c5
 8006f34:	fdffe008 	.word	0xfdffe008

08006f38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f40:	4b1f      	ldr	r3, [pc, #124]	; (8006fc0 <SDMMC_GetCmdResp2+0x88>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1f      	ldr	r2, [pc, #124]	; (8006fc4 <SDMMC_GetCmdResp2+0x8c>)
 8006f46:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4a:	0a5b      	lsrs	r3, r3, #9
 8006f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f50:	fb02 f303 	mul.w	r3, r2, r3
 8006f54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	1e5a      	subs	r2, r3, #1
 8006f5a:	60fa      	str	r2, [r7, #12]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f64:	e026      	b.n	8006fb4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0ef      	beq.n	8006f56 <SDMMC_GetCmdResp2+0x1e>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1ea      	bne.n	8006f56 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2204      	movs	r2, #4
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f92:	2304      	movs	r3, #4
 8006f94:	e00e      	b.n	8006fb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e003      	b.n	8006fb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a06      	ldr	r2, [pc, #24]	; (8006fc8 <SDMMC_GetCmdResp2+0x90>)
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	20000000 	.word	0x20000000
 8006fc4:	10624dd3 	.word	0x10624dd3
 8006fc8:	002000c5 	.word	0x002000c5

08006fcc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fd4:	4b1a      	ldr	r3, [pc, #104]	; (8007040 <SDMMC_GetCmdResp3+0x74>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <SDMMC_GetCmdResp3+0x78>)
 8006fda:	fba2 2303 	umull	r2, r3, r2, r3
 8006fde:	0a5b      	lsrs	r3, r3, #9
 8006fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
 8006fe8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1e5a      	subs	r2, r3, #1
 8006fee:	60fa      	str	r2, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ff8:	e01b      	b.n	8007032 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0ef      	beq.n	8006fea <SDMMC_GetCmdResp3+0x1e>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1ea      	bne.n	8006fea <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2204      	movs	r2, #4
 8007024:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007026:	2304      	movs	r3, #4
 8007028:	e003      	b.n	8007032 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a06      	ldr	r2, [pc, #24]	; (8007048 <SDMMC_GetCmdResp3+0x7c>)
 800702e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000000 	.word	0x20000000
 8007044:	10624dd3 	.word	0x10624dd3
 8007048:	002000c5 	.word	0x002000c5

0800704c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	460b      	mov	r3, r1
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800705a:	4b35      	ldr	r3, [pc, #212]	; (8007130 <SDMMC_GetCmdResp6+0xe4>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a35      	ldr	r2, [pc, #212]	; (8007134 <SDMMC_GetCmdResp6+0xe8>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	0a5b      	lsrs	r3, r3, #9
 8007066:	f241 3288 	movw	r2, #5000	; 0x1388
 800706a:	fb02 f303 	mul.w	r3, r2, r3
 800706e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	1e5a      	subs	r2, r3, #1
 8007074:	61fa      	str	r2, [r7, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800707a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800707e:	e052      	b.n	8007126 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007084:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0ef      	beq.n	8007070 <SDMMC_GetCmdResp6+0x24>
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1ea      	bne.n	8007070 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709e:	f003 0304 	and.w	r3, r3, #4
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2204      	movs	r2, #4
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070ac:	2304      	movs	r3, #4
 80070ae:	e03a      	b.n	8007126 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d004      	beq.n	80070c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e02f      	b.n	8007126 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fb2c 	bl	8006724 <SDMMC_GetCommandResponse>
 80070cc:	4603      	mov	r3, r0
 80070ce:	461a      	mov	r2, r3
 80070d0:	7afb      	ldrb	r3, [r7, #11]
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d001      	beq.n	80070da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e025      	b.n	8007126 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4a16      	ldr	r2, [pc, #88]	; (8007138 <SDMMC_GetCmdResp6+0xec>)
 80070de:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff fb2b 	bl	800673e <SDMMC_GetResponse>
 80070e8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d106      	bne.n	8007102 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	0c1b      	lsrs	r3, r3, #16
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80070fe:	2300      	movs	r3, #0
 8007100:	e011      	b.n	8007126 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800710c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007110:	e009      	b.n	8007126 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800711c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007120:	e001      	b.n	8007126 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007126:	4618      	mov	r0, r3
 8007128:	3720      	adds	r7, #32
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20000000 	.word	0x20000000
 8007134:	10624dd3 	.word	0x10624dd3
 8007138:	002000c5 	.word	0x002000c5

0800713c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007144:	4b22      	ldr	r3, [pc, #136]	; (80071d0 <SDMMC_GetCmdResp7+0x94>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a22      	ldr	r2, [pc, #136]	; (80071d4 <SDMMC_GetCmdResp7+0x98>)
 800714a:	fba2 2303 	umull	r2, r3, r2, r3
 800714e:	0a5b      	lsrs	r3, r3, #9
 8007150:	f241 3288 	movw	r2, #5000	; 0x1388
 8007154:	fb02 f303 	mul.w	r3, r2, r3
 8007158:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	1e5a      	subs	r2, r3, #1
 800715e:	60fa      	str	r2, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007164:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007168:	e02c      	b.n	80071c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0ef      	beq.n	800715a <SDMMC_GetCmdResp7+0x1e>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1ea      	bne.n	800715a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2204      	movs	r2, #4
 8007194:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007196:	2304      	movs	r3, #4
 8007198:	e014      	b.n	80071c4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e009      	b.n	80071c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2240      	movs	r2, #64	; 0x40
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80071c2:	2300      	movs	r3, #0

}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	20000000 	.word	0x20000000
 80071d4:	10624dd3 	.word	0x10624dd3

080071d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80071dc:	4904      	ldr	r1, [pc, #16]	; (80071f0 <MX_FATFS_Init+0x18>)
 80071de:	4805      	ldr	r0, [pc, #20]	; (80071f4 <MX_FATFS_Init+0x1c>)
 80071e0:	f000 f9ca 	bl	8007578 <FATFS_LinkDriver>
 80071e4:	4603      	mov	r3, r0
 80071e6:	461a      	mov	r2, r3
 80071e8:	4b03      	ldr	r3, [pc, #12]	; (80071f8 <MX_FATFS_Init+0x20>)
 80071ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80071ec:	bf00      	nop
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	200001bc 	.word	0x200001bc
 80071f4:	08008424 	.word	0x08008424
 80071f8:	200001b8 	.word	0x200001b8

080071fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007206:	f000 f879 	bl	80072fc <BSP_SD_IsDetected>
 800720a:	4603      	mov	r3, r0
 800720c:	2b01      	cmp	r3, #1
 800720e:	d001      	beq.n	8007214 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007210:	2302      	movs	r3, #2
 8007212:	e012      	b.n	800723a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007214:	480b      	ldr	r0, [pc, #44]	; (8007244 <BSP_SD_Init+0x48>)
 8007216:	f7fc fb13 	bl	8003840 <HAL_SD_Init>
 800721a:	4603      	mov	r3, r0
 800721c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d109      	bne.n	8007238 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007228:	4806      	ldr	r0, [pc, #24]	; (8007244 <BSP_SD_Init+0x48>)
 800722a:	f7fd f9d7 	bl	80045dc <HAL_SD_ConfigWideBusOperation>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007238:	79fb      	ldrb	r3, [r7, #7]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	200000a8 	.word	0x200000a8

08007248 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	68f9      	ldr	r1, [r7, #12]
 8007264:	4806      	ldr	r0, [pc, #24]	; (8007280 <BSP_SD_ReadBlocks+0x38>)
 8007266:	f7fc fc0f 	bl	8003a88 <HAL_SD_ReadBlocks>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	200000a8 	.word	0x200000a8

08007284 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af02      	add	r7, sp, #8
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	4806      	ldr	r0, [pc, #24]	; (80072bc <BSP_SD_WriteBlocks+0x38>)
 80072a2:	f7fc fd7b 	bl	8003d9c <HAL_SD_WriteBlocks>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	200000a8 	.word	0x200000a8

080072c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80072c4:	4805      	ldr	r0, [pc, #20]	; (80072dc <BSP_SD_GetCardState+0x1c>)
 80072c6:	f7fd fa33 	bl	8004730 <HAL_SD_GetCardState>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	bf14      	ite	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	2300      	moveq	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	200000a8 	.word	0x200000a8

080072e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4803      	ldr	r0, [pc, #12]	; (80072f8 <BSP_SD_GetCardInfo+0x18>)
 80072ec:	f7fd f94a 	bl	8004584 <HAL_SD_GetCardInfo>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	200000a8 	.word	0x200000a8

080072fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007302:	2301      	movs	r3, #1
 8007304:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8007306:	79fb      	ldrb	r3, [r7, #7]
 8007308:	b2db      	uxtb	r3, r3
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
	...

08007318 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007322:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <SD_CheckStatus+0x38>)
 8007324:	2201      	movs	r2, #1
 8007326:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007328:	f7ff ffca 	bl	80072c0 <BSP_SD_GetCardState>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d107      	bne.n	8007342 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007332:	4b07      	ldr	r3, [pc, #28]	; (8007350 <SD_CheckStatus+0x38>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	4b04      	ldr	r3, [pc, #16]	; (8007350 <SD_CheckStatus+0x38>)
 8007340:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007342:	4b03      	ldr	r3, [pc, #12]	; (8007350 <SD_CheckStatus+0x38>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	b2db      	uxtb	r3, r3
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	2000000d 	.word	0x2000000d

08007354 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <SD_initialize+0x38>)
 8007360:	2201      	movs	r2, #1
 8007362:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007364:	f7ff ff4a 	bl	80071fc <BSP_SD_Init>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d107      	bne.n	800737e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff ffd1 	bl	8007318 <SD_CheckStatus>
 8007376:	4603      	mov	r3, r0
 8007378:	461a      	mov	r2, r3
 800737a:	4b04      	ldr	r3, [pc, #16]	; (800738c <SD_initialize+0x38>)
 800737c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800737e:	4b03      	ldr	r3, [pc, #12]	; (800738c <SD_initialize+0x38>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	b2db      	uxtb	r3, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	2000000d 	.word	0x2000000d

08007390 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	4603      	mov	r3, r0
 8007398:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff ffbb 	bl	8007318 <SD_CheckStatus>
 80073a2:	4603      	mov	r3, r0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80073c0:	f04f 33ff 	mov.w	r3, #4294967295
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	68b8      	ldr	r0, [r7, #8]
 80073ca:	f7ff ff3d 	bl	8007248 <BSP_SD_ReadBlocks>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80073d4:	bf00      	nop
 80073d6:	f7ff ff73 	bl	80072c0 <BSP_SD_GetCardState>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1fa      	bne.n	80073d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b086      	sub	sp, #24
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
 80073fa:	4603      	mov	r3, r0
 80073fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007402:	f04f 33ff 	mov.w	r3, #4294967295
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	68b8      	ldr	r0, [r7, #8]
 800740c:	f7ff ff3a 	bl	8007284 <BSP_SD_WriteBlocks>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d107      	bne.n	8007426 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007416:	bf00      	nop
 8007418:	f7ff ff52 	bl	80072c0 <BSP_SD_GetCardState>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1fa      	bne.n	8007418 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08c      	sub	sp, #48	; 0x30
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	603a      	str	r2, [r7, #0]
 800743a:	71fb      	strb	r3, [r7, #7]
 800743c:	460b      	mov	r3, r1
 800743e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007446:	4b25      	ldr	r3, [pc, #148]	; (80074dc <SD_ioctl+0xac>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <SD_ioctl+0x28>
 8007454:	2303      	movs	r3, #3
 8007456:	e03c      	b.n	80074d2 <SD_ioctl+0xa2>

  switch (cmd)
 8007458:	79bb      	ldrb	r3, [r7, #6]
 800745a:	2b03      	cmp	r3, #3
 800745c:	d834      	bhi.n	80074c8 <SD_ioctl+0x98>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <SD_ioctl+0x34>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	08007475 	.word	0x08007475
 8007468:	0800747d 	.word	0x0800747d
 800746c:	08007495 	.word	0x08007495
 8007470:	080074af 	.word	0x080074af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800747a:	e028      	b.n	80074ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800747c:	f107 0308 	add.w	r3, r7, #8
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff ff2d 	bl	80072e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007486:	6a3a      	ldr	r2, [r7, #32]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007492:	e01c      	b.n	80074ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007494:	f107 0308 	add.w	r3, r7, #8
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff ff21 	bl	80072e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074ac:	e00f      	b.n	80074ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80074ae:	f107 0308 	add.w	r3, r7, #8
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff ff14 	bl	80072e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	0a5a      	lsrs	r2, r3, #9
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074c6:	e002      	b.n	80074ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80074ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3730      	adds	r7, #48	; 0x30
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	2000000d 	.word	0x2000000d

080074e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80074ee:	2301      	movs	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80074f6:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <FATFS_LinkDriverEx+0x94>)
 80074f8:	7a5b      	ldrb	r3, [r3, #9]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d131      	bne.n	8007564 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007500:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <FATFS_LinkDriverEx+0x94>)
 8007502:	7a5b      	ldrb	r3, [r3, #9]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	4b1a      	ldr	r3, [pc, #104]	; (8007574 <FATFS_LinkDriverEx+0x94>)
 800750a:	2100      	movs	r1, #0
 800750c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800750e:	4b19      	ldr	r3, [pc, #100]	; (8007574 <FATFS_LinkDriverEx+0x94>)
 8007510:	7a5b      	ldrb	r3, [r3, #9]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	4a17      	ldr	r2, [pc, #92]	; (8007574 <FATFS_LinkDriverEx+0x94>)
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800751e:	4b15      	ldr	r3, [pc, #84]	; (8007574 <FATFS_LinkDriverEx+0x94>)
 8007520:	7a5b      	ldrb	r3, [r3, #9]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	4b13      	ldr	r3, [pc, #76]	; (8007574 <FATFS_LinkDriverEx+0x94>)
 8007528:	4413      	add	r3, r2
 800752a:	79fa      	ldrb	r2, [r7, #7]
 800752c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800752e:	4b11      	ldr	r3, [pc, #68]	; (8007574 <FATFS_LinkDriverEx+0x94>)
 8007530:	7a5b      	ldrb	r3, [r3, #9]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	b2d1      	uxtb	r1, r2
 8007538:	4a0e      	ldr	r2, [pc, #56]	; (8007574 <FATFS_LinkDriverEx+0x94>)
 800753a:	7251      	strb	r1, [r2, #9]
 800753c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800753e:	7dbb      	ldrb	r3, [r7, #22]
 8007540:	3330      	adds	r3, #48	; 0x30
 8007542:	b2da      	uxtb	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	3301      	adds	r3, #1
 800754c:	223a      	movs	r2, #58	; 0x3a
 800754e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	3302      	adds	r3, #2
 8007554:	222f      	movs	r2, #47	; 0x2f
 8007556:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	3303      	adds	r3, #3
 800755c:	2200      	movs	r2, #0
 800755e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
}
 8007566:	4618      	mov	r0, r3
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000094 	.word	0x20000094

08007578 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007582:	2200      	movs	r2, #0
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff ffaa 	bl	80074e0 <FATFS_LinkDriverEx>
 800758c:	4603      	mov	r3, r0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <__errno>:
 8007598:	4b01      	ldr	r3, [pc, #4]	; (80075a0 <__errno+0x8>)
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20000010 	.word	0x20000010

080075a4 <__libc_init_array>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	4e0d      	ldr	r6, [pc, #52]	; (80075dc <__libc_init_array+0x38>)
 80075a8:	4c0d      	ldr	r4, [pc, #52]	; (80075e0 <__libc_init_array+0x3c>)
 80075aa:	1ba4      	subs	r4, r4, r6
 80075ac:	10a4      	asrs	r4, r4, #2
 80075ae:	2500      	movs	r5, #0
 80075b0:	42a5      	cmp	r5, r4
 80075b2:	d109      	bne.n	80075c8 <__libc_init_array+0x24>
 80075b4:	4e0b      	ldr	r6, [pc, #44]	; (80075e4 <__libc_init_array+0x40>)
 80075b6:	4c0c      	ldr	r4, [pc, #48]	; (80075e8 <__libc_init_array+0x44>)
 80075b8:	f000 ff04 	bl	80083c4 <_init>
 80075bc:	1ba4      	subs	r4, r4, r6
 80075be:	10a4      	asrs	r4, r4, #2
 80075c0:	2500      	movs	r5, #0
 80075c2:	42a5      	cmp	r5, r4
 80075c4:	d105      	bne.n	80075d2 <__libc_init_array+0x2e>
 80075c6:	bd70      	pop	{r4, r5, r6, pc}
 80075c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075cc:	4798      	blx	r3
 80075ce:	3501      	adds	r5, #1
 80075d0:	e7ee      	b.n	80075b0 <__libc_init_array+0xc>
 80075d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075d6:	4798      	blx	r3
 80075d8:	3501      	adds	r5, #1
 80075da:	e7f2      	b.n	80075c2 <__libc_init_array+0x1e>
 80075dc:	080084d8 	.word	0x080084d8
 80075e0:	080084d8 	.word	0x080084d8
 80075e4:	080084d8 	.word	0x080084d8
 80075e8:	080084dc 	.word	0x080084dc

080075ec <memset>:
 80075ec:	4402      	add	r2, r0
 80075ee:	4603      	mov	r3, r0
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d100      	bne.n	80075f6 <memset+0xa>
 80075f4:	4770      	bx	lr
 80075f6:	f803 1b01 	strb.w	r1, [r3], #1
 80075fa:	e7f9      	b.n	80075f0 <memset+0x4>

080075fc <iprintf>:
 80075fc:	b40f      	push	{r0, r1, r2, r3}
 80075fe:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <iprintf+0x2c>)
 8007600:	b513      	push	{r0, r1, r4, lr}
 8007602:	681c      	ldr	r4, [r3, #0]
 8007604:	b124      	cbz	r4, 8007610 <iprintf+0x14>
 8007606:	69a3      	ldr	r3, [r4, #24]
 8007608:	b913      	cbnz	r3, 8007610 <iprintf+0x14>
 800760a:	4620      	mov	r0, r4
 800760c:	f000 f84e 	bl	80076ac <__sinit>
 8007610:	ab05      	add	r3, sp, #20
 8007612:	9a04      	ldr	r2, [sp, #16]
 8007614:	68a1      	ldr	r1, [r4, #8]
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	4620      	mov	r0, r4
 800761a:	f000 f955 	bl	80078c8 <_vfiprintf_r>
 800761e:	b002      	add	sp, #8
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	b004      	add	sp, #16
 8007626:	4770      	bx	lr
 8007628:	20000010 	.word	0x20000010

0800762c <std>:
 800762c:	2300      	movs	r3, #0
 800762e:	b510      	push	{r4, lr}
 8007630:	4604      	mov	r4, r0
 8007632:	e9c0 3300 	strd	r3, r3, [r0]
 8007636:	6083      	str	r3, [r0, #8]
 8007638:	8181      	strh	r1, [r0, #12]
 800763a:	6643      	str	r3, [r0, #100]	; 0x64
 800763c:	81c2      	strh	r2, [r0, #14]
 800763e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007642:	6183      	str	r3, [r0, #24]
 8007644:	4619      	mov	r1, r3
 8007646:	2208      	movs	r2, #8
 8007648:	305c      	adds	r0, #92	; 0x5c
 800764a:	f7ff ffcf 	bl	80075ec <memset>
 800764e:	4b05      	ldr	r3, [pc, #20]	; (8007664 <std+0x38>)
 8007650:	6263      	str	r3, [r4, #36]	; 0x24
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <std+0x3c>)
 8007654:	62a3      	str	r3, [r4, #40]	; 0x28
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <std+0x40>)
 8007658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <std+0x44>)
 800765c:	6224      	str	r4, [r4, #32]
 800765e:	6323      	str	r3, [r4, #48]	; 0x30
 8007660:	bd10      	pop	{r4, pc}
 8007662:	bf00      	nop
 8007664:	08007e25 	.word	0x08007e25
 8007668:	08007e47 	.word	0x08007e47
 800766c:	08007e7f 	.word	0x08007e7f
 8007670:	08007ea3 	.word	0x08007ea3

08007674 <_cleanup_r>:
 8007674:	4901      	ldr	r1, [pc, #4]	; (800767c <_cleanup_r+0x8>)
 8007676:	f000 b885 	b.w	8007784 <_fwalk_reent>
 800767a:	bf00      	nop
 800767c:	0800817d 	.word	0x0800817d

08007680 <__sfmoreglue>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	1e4a      	subs	r2, r1, #1
 8007684:	2568      	movs	r5, #104	; 0x68
 8007686:	4355      	muls	r5, r2
 8007688:	460e      	mov	r6, r1
 800768a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800768e:	f000 f897 	bl	80077c0 <_malloc_r>
 8007692:	4604      	mov	r4, r0
 8007694:	b140      	cbz	r0, 80076a8 <__sfmoreglue+0x28>
 8007696:	2100      	movs	r1, #0
 8007698:	e9c0 1600 	strd	r1, r6, [r0]
 800769c:	300c      	adds	r0, #12
 800769e:	60a0      	str	r0, [r4, #8]
 80076a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076a4:	f7ff ffa2 	bl	80075ec <memset>
 80076a8:	4620      	mov	r0, r4
 80076aa:	bd70      	pop	{r4, r5, r6, pc}

080076ac <__sinit>:
 80076ac:	6983      	ldr	r3, [r0, #24]
 80076ae:	b510      	push	{r4, lr}
 80076b0:	4604      	mov	r4, r0
 80076b2:	bb33      	cbnz	r3, 8007702 <__sinit+0x56>
 80076b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80076b8:	6503      	str	r3, [r0, #80]	; 0x50
 80076ba:	4b12      	ldr	r3, [pc, #72]	; (8007704 <__sinit+0x58>)
 80076bc:	4a12      	ldr	r2, [pc, #72]	; (8007708 <__sinit+0x5c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6282      	str	r2, [r0, #40]	; 0x28
 80076c2:	4298      	cmp	r0, r3
 80076c4:	bf04      	itt	eq
 80076c6:	2301      	moveq	r3, #1
 80076c8:	6183      	streq	r3, [r0, #24]
 80076ca:	f000 f81f 	bl	800770c <__sfp>
 80076ce:	6060      	str	r0, [r4, #4]
 80076d0:	4620      	mov	r0, r4
 80076d2:	f000 f81b 	bl	800770c <__sfp>
 80076d6:	60a0      	str	r0, [r4, #8]
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 f817 	bl	800770c <__sfp>
 80076de:	2200      	movs	r2, #0
 80076e0:	60e0      	str	r0, [r4, #12]
 80076e2:	2104      	movs	r1, #4
 80076e4:	6860      	ldr	r0, [r4, #4]
 80076e6:	f7ff ffa1 	bl	800762c <std>
 80076ea:	2201      	movs	r2, #1
 80076ec:	2109      	movs	r1, #9
 80076ee:	68a0      	ldr	r0, [r4, #8]
 80076f0:	f7ff ff9c 	bl	800762c <std>
 80076f4:	2202      	movs	r2, #2
 80076f6:	2112      	movs	r1, #18
 80076f8:	68e0      	ldr	r0, [r4, #12]
 80076fa:	f7ff ff97 	bl	800762c <std>
 80076fe:	2301      	movs	r3, #1
 8007700:	61a3      	str	r3, [r4, #24]
 8007702:	bd10      	pop	{r4, pc}
 8007704:	08008438 	.word	0x08008438
 8007708:	08007675 	.word	0x08007675

0800770c <__sfp>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	4b1b      	ldr	r3, [pc, #108]	; (800777c <__sfp+0x70>)
 8007710:	681e      	ldr	r6, [r3, #0]
 8007712:	69b3      	ldr	r3, [r6, #24]
 8007714:	4607      	mov	r7, r0
 8007716:	b913      	cbnz	r3, 800771e <__sfp+0x12>
 8007718:	4630      	mov	r0, r6
 800771a:	f7ff ffc7 	bl	80076ac <__sinit>
 800771e:	3648      	adds	r6, #72	; 0x48
 8007720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007724:	3b01      	subs	r3, #1
 8007726:	d503      	bpl.n	8007730 <__sfp+0x24>
 8007728:	6833      	ldr	r3, [r6, #0]
 800772a:	b133      	cbz	r3, 800773a <__sfp+0x2e>
 800772c:	6836      	ldr	r6, [r6, #0]
 800772e:	e7f7      	b.n	8007720 <__sfp+0x14>
 8007730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007734:	b16d      	cbz	r5, 8007752 <__sfp+0x46>
 8007736:	3468      	adds	r4, #104	; 0x68
 8007738:	e7f4      	b.n	8007724 <__sfp+0x18>
 800773a:	2104      	movs	r1, #4
 800773c:	4638      	mov	r0, r7
 800773e:	f7ff ff9f 	bl	8007680 <__sfmoreglue>
 8007742:	6030      	str	r0, [r6, #0]
 8007744:	2800      	cmp	r0, #0
 8007746:	d1f1      	bne.n	800772c <__sfp+0x20>
 8007748:	230c      	movs	r3, #12
 800774a:	603b      	str	r3, [r7, #0]
 800774c:	4604      	mov	r4, r0
 800774e:	4620      	mov	r0, r4
 8007750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007752:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <__sfp+0x74>)
 8007754:	6665      	str	r5, [r4, #100]	; 0x64
 8007756:	e9c4 5500 	strd	r5, r5, [r4]
 800775a:	60a5      	str	r5, [r4, #8]
 800775c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007760:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007764:	2208      	movs	r2, #8
 8007766:	4629      	mov	r1, r5
 8007768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800776c:	f7ff ff3e 	bl	80075ec <memset>
 8007770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007778:	e7e9      	b.n	800774e <__sfp+0x42>
 800777a:	bf00      	nop
 800777c:	08008438 	.word	0x08008438
 8007780:	ffff0001 	.word	0xffff0001

08007784 <_fwalk_reent>:
 8007784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007788:	4680      	mov	r8, r0
 800778a:	4689      	mov	r9, r1
 800778c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007790:	2600      	movs	r6, #0
 8007792:	b914      	cbnz	r4, 800779a <_fwalk_reent+0x16>
 8007794:	4630      	mov	r0, r6
 8007796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800779e:	3f01      	subs	r7, #1
 80077a0:	d501      	bpl.n	80077a6 <_fwalk_reent+0x22>
 80077a2:	6824      	ldr	r4, [r4, #0]
 80077a4:	e7f5      	b.n	8007792 <_fwalk_reent+0xe>
 80077a6:	89ab      	ldrh	r3, [r5, #12]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d907      	bls.n	80077bc <_fwalk_reent+0x38>
 80077ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077b0:	3301      	adds	r3, #1
 80077b2:	d003      	beq.n	80077bc <_fwalk_reent+0x38>
 80077b4:	4629      	mov	r1, r5
 80077b6:	4640      	mov	r0, r8
 80077b8:	47c8      	blx	r9
 80077ba:	4306      	orrs	r6, r0
 80077bc:	3568      	adds	r5, #104	; 0x68
 80077be:	e7ee      	b.n	800779e <_fwalk_reent+0x1a>

080077c0 <_malloc_r>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	1ccd      	adds	r5, r1, #3
 80077c4:	f025 0503 	bic.w	r5, r5, #3
 80077c8:	3508      	adds	r5, #8
 80077ca:	2d0c      	cmp	r5, #12
 80077cc:	bf38      	it	cc
 80077ce:	250c      	movcc	r5, #12
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	4606      	mov	r6, r0
 80077d4:	db01      	blt.n	80077da <_malloc_r+0x1a>
 80077d6:	42a9      	cmp	r1, r5
 80077d8:	d903      	bls.n	80077e2 <_malloc_r+0x22>
 80077da:	230c      	movs	r3, #12
 80077dc:	6033      	str	r3, [r6, #0]
 80077de:	2000      	movs	r0, #0
 80077e0:	bd70      	pop	{r4, r5, r6, pc}
 80077e2:	f000 fd6b 	bl	80082bc <__malloc_lock>
 80077e6:	4a21      	ldr	r2, [pc, #132]	; (800786c <_malloc_r+0xac>)
 80077e8:	6814      	ldr	r4, [r2, #0]
 80077ea:	4621      	mov	r1, r4
 80077ec:	b991      	cbnz	r1, 8007814 <_malloc_r+0x54>
 80077ee:	4c20      	ldr	r4, [pc, #128]	; (8007870 <_malloc_r+0xb0>)
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	b91b      	cbnz	r3, 80077fc <_malloc_r+0x3c>
 80077f4:	4630      	mov	r0, r6
 80077f6:	f000 fb05 	bl	8007e04 <_sbrk_r>
 80077fa:	6020      	str	r0, [r4, #0]
 80077fc:	4629      	mov	r1, r5
 80077fe:	4630      	mov	r0, r6
 8007800:	f000 fb00 	bl	8007e04 <_sbrk_r>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d124      	bne.n	8007852 <_malloc_r+0x92>
 8007808:	230c      	movs	r3, #12
 800780a:	6033      	str	r3, [r6, #0]
 800780c:	4630      	mov	r0, r6
 800780e:	f000 fd56 	bl	80082be <__malloc_unlock>
 8007812:	e7e4      	b.n	80077de <_malloc_r+0x1e>
 8007814:	680b      	ldr	r3, [r1, #0]
 8007816:	1b5b      	subs	r3, r3, r5
 8007818:	d418      	bmi.n	800784c <_malloc_r+0x8c>
 800781a:	2b0b      	cmp	r3, #11
 800781c:	d90f      	bls.n	800783e <_malloc_r+0x7e>
 800781e:	600b      	str	r3, [r1, #0]
 8007820:	50cd      	str	r5, [r1, r3]
 8007822:	18cc      	adds	r4, r1, r3
 8007824:	4630      	mov	r0, r6
 8007826:	f000 fd4a 	bl	80082be <__malloc_unlock>
 800782a:	f104 000b 	add.w	r0, r4, #11
 800782e:	1d23      	adds	r3, r4, #4
 8007830:	f020 0007 	bic.w	r0, r0, #7
 8007834:	1ac3      	subs	r3, r0, r3
 8007836:	d0d3      	beq.n	80077e0 <_malloc_r+0x20>
 8007838:	425a      	negs	r2, r3
 800783a:	50e2      	str	r2, [r4, r3]
 800783c:	e7d0      	b.n	80077e0 <_malloc_r+0x20>
 800783e:	428c      	cmp	r4, r1
 8007840:	684b      	ldr	r3, [r1, #4]
 8007842:	bf16      	itet	ne
 8007844:	6063      	strne	r3, [r4, #4]
 8007846:	6013      	streq	r3, [r2, #0]
 8007848:	460c      	movne	r4, r1
 800784a:	e7eb      	b.n	8007824 <_malloc_r+0x64>
 800784c:	460c      	mov	r4, r1
 800784e:	6849      	ldr	r1, [r1, #4]
 8007850:	e7cc      	b.n	80077ec <_malloc_r+0x2c>
 8007852:	1cc4      	adds	r4, r0, #3
 8007854:	f024 0403 	bic.w	r4, r4, #3
 8007858:	42a0      	cmp	r0, r4
 800785a:	d005      	beq.n	8007868 <_malloc_r+0xa8>
 800785c:	1a21      	subs	r1, r4, r0
 800785e:	4630      	mov	r0, r6
 8007860:	f000 fad0 	bl	8007e04 <_sbrk_r>
 8007864:	3001      	adds	r0, #1
 8007866:	d0cf      	beq.n	8007808 <_malloc_r+0x48>
 8007868:	6025      	str	r5, [r4, #0]
 800786a:	e7db      	b.n	8007824 <_malloc_r+0x64>
 800786c:	200000a0 	.word	0x200000a0
 8007870:	200000a4 	.word	0x200000a4

08007874 <__sfputc_r>:
 8007874:	6893      	ldr	r3, [r2, #8]
 8007876:	3b01      	subs	r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	b410      	push	{r4}
 800787c:	6093      	str	r3, [r2, #8]
 800787e:	da08      	bge.n	8007892 <__sfputc_r+0x1e>
 8007880:	6994      	ldr	r4, [r2, #24]
 8007882:	42a3      	cmp	r3, r4
 8007884:	db01      	blt.n	800788a <__sfputc_r+0x16>
 8007886:	290a      	cmp	r1, #10
 8007888:	d103      	bne.n	8007892 <__sfputc_r+0x1e>
 800788a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800788e:	f000 bb0d 	b.w	8007eac <__swbuf_r>
 8007892:	6813      	ldr	r3, [r2, #0]
 8007894:	1c58      	adds	r0, r3, #1
 8007896:	6010      	str	r0, [r2, #0]
 8007898:	7019      	strb	r1, [r3, #0]
 800789a:	4608      	mov	r0, r1
 800789c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <__sfputs_r>:
 80078a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a4:	4606      	mov	r6, r0
 80078a6:	460f      	mov	r7, r1
 80078a8:	4614      	mov	r4, r2
 80078aa:	18d5      	adds	r5, r2, r3
 80078ac:	42ac      	cmp	r4, r5
 80078ae:	d101      	bne.n	80078b4 <__sfputs_r+0x12>
 80078b0:	2000      	movs	r0, #0
 80078b2:	e007      	b.n	80078c4 <__sfputs_r+0x22>
 80078b4:	463a      	mov	r2, r7
 80078b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7ff ffda 	bl	8007874 <__sfputc_r>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d1f3      	bne.n	80078ac <__sfputs_r+0xa>
 80078c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078c8 <_vfiprintf_r>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	460c      	mov	r4, r1
 80078ce:	b09d      	sub	sp, #116	; 0x74
 80078d0:	4617      	mov	r7, r2
 80078d2:	461d      	mov	r5, r3
 80078d4:	4606      	mov	r6, r0
 80078d6:	b118      	cbz	r0, 80078e0 <_vfiprintf_r+0x18>
 80078d8:	6983      	ldr	r3, [r0, #24]
 80078da:	b90b      	cbnz	r3, 80078e0 <_vfiprintf_r+0x18>
 80078dc:	f7ff fee6 	bl	80076ac <__sinit>
 80078e0:	4b7c      	ldr	r3, [pc, #496]	; (8007ad4 <_vfiprintf_r+0x20c>)
 80078e2:	429c      	cmp	r4, r3
 80078e4:	d158      	bne.n	8007998 <_vfiprintf_r+0xd0>
 80078e6:	6874      	ldr	r4, [r6, #4]
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	0718      	lsls	r0, r3, #28
 80078ec:	d55e      	bpl.n	80079ac <_vfiprintf_r+0xe4>
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d05b      	beq.n	80079ac <_vfiprintf_r+0xe4>
 80078f4:	2300      	movs	r3, #0
 80078f6:	9309      	str	r3, [sp, #36]	; 0x24
 80078f8:	2320      	movs	r3, #32
 80078fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078fe:	2330      	movs	r3, #48	; 0x30
 8007900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007904:	9503      	str	r5, [sp, #12]
 8007906:	f04f 0b01 	mov.w	fp, #1
 800790a:	46b8      	mov	r8, r7
 800790c:	4645      	mov	r5, r8
 800790e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007912:	b10b      	cbz	r3, 8007918 <_vfiprintf_r+0x50>
 8007914:	2b25      	cmp	r3, #37	; 0x25
 8007916:	d154      	bne.n	80079c2 <_vfiprintf_r+0xfa>
 8007918:	ebb8 0a07 	subs.w	sl, r8, r7
 800791c:	d00b      	beq.n	8007936 <_vfiprintf_r+0x6e>
 800791e:	4653      	mov	r3, sl
 8007920:	463a      	mov	r2, r7
 8007922:	4621      	mov	r1, r4
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff ffbc 	bl	80078a2 <__sfputs_r>
 800792a:	3001      	adds	r0, #1
 800792c:	f000 80c2 	beq.w	8007ab4 <_vfiprintf_r+0x1ec>
 8007930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007932:	4453      	add	r3, sl
 8007934:	9309      	str	r3, [sp, #36]	; 0x24
 8007936:	f898 3000 	ldrb.w	r3, [r8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80ba 	beq.w	8007ab4 <_vfiprintf_r+0x1ec>
 8007940:	2300      	movs	r3, #0
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800794a:	9304      	str	r3, [sp, #16]
 800794c:	9307      	str	r3, [sp, #28]
 800794e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007952:	931a      	str	r3, [sp, #104]	; 0x68
 8007954:	46a8      	mov	r8, r5
 8007956:	2205      	movs	r2, #5
 8007958:	f818 1b01 	ldrb.w	r1, [r8], #1
 800795c:	485e      	ldr	r0, [pc, #376]	; (8007ad8 <_vfiprintf_r+0x210>)
 800795e:	f7f8 fcbf 	bl	80002e0 <memchr>
 8007962:	9b04      	ldr	r3, [sp, #16]
 8007964:	bb78      	cbnz	r0, 80079c6 <_vfiprintf_r+0xfe>
 8007966:	06d9      	lsls	r1, r3, #27
 8007968:	bf44      	itt	mi
 800796a:	2220      	movmi	r2, #32
 800796c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007970:	071a      	lsls	r2, r3, #28
 8007972:	bf44      	itt	mi
 8007974:	222b      	movmi	r2, #43	; 0x2b
 8007976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800797a:	782a      	ldrb	r2, [r5, #0]
 800797c:	2a2a      	cmp	r2, #42	; 0x2a
 800797e:	d02a      	beq.n	80079d6 <_vfiprintf_r+0x10e>
 8007980:	9a07      	ldr	r2, [sp, #28]
 8007982:	46a8      	mov	r8, r5
 8007984:	2000      	movs	r0, #0
 8007986:	250a      	movs	r5, #10
 8007988:	4641      	mov	r1, r8
 800798a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798e:	3b30      	subs	r3, #48	; 0x30
 8007990:	2b09      	cmp	r3, #9
 8007992:	d969      	bls.n	8007a68 <_vfiprintf_r+0x1a0>
 8007994:	b360      	cbz	r0, 80079f0 <_vfiprintf_r+0x128>
 8007996:	e024      	b.n	80079e2 <_vfiprintf_r+0x11a>
 8007998:	4b50      	ldr	r3, [pc, #320]	; (8007adc <_vfiprintf_r+0x214>)
 800799a:	429c      	cmp	r4, r3
 800799c:	d101      	bne.n	80079a2 <_vfiprintf_r+0xda>
 800799e:	68b4      	ldr	r4, [r6, #8]
 80079a0:	e7a2      	b.n	80078e8 <_vfiprintf_r+0x20>
 80079a2:	4b4f      	ldr	r3, [pc, #316]	; (8007ae0 <_vfiprintf_r+0x218>)
 80079a4:	429c      	cmp	r4, r3
 80079a6:	bf08      	it	eq
 80079a8:	68f4      	ldreq	r4, [r6, #12]
 80079aa:	e79d      	b.n	80078e8 <_vfiprintf_r+0x20>
 80079ac:	4621      	mov	r1, r4
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 fae0 	bl	8007f74 <__swsetup_r>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d09d      	beq.n	80078f4 <_vfiprintf_r+0x2c>
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	b01d      	add	sp, #116	; 0x74
 80079be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c2:	46a8      	mov	r8, r5
 80079c4:	e7a2      	b.n	800790c <_vfiprintf_r+0x44>
 80079c6:	4a44      	ldr	r2, [pc, #272]	; (8007ad8 <_vfiprintf_r+0x210>)
 80079c8:	1a80      	subs	r0, r0, r2
 80079ca:	fa0b f000 	lsl.w	r0, fp, r0
 80079ce:	4318      	orrs	r0, r3
 80079d0:	9004      	str	r0, [sp, #16]
 80079d2:	4645      	mov	r5, r8
 80079d4:	e7be      	b.n	8007954 <_vfiprintf_r+0x8c>
 80079d6:	9a03      	ldr	r2, [sp, #12]
 80079d8:	1d11      	adds	r1, r2, #4
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	9103      	str	r1, [sp, #12]
 80079de:	2a00      	cmp	r2, #0
 80079e0:	db01      	blt.n	80079e6 <_vfiprintf_r+0x11e>
 80079e2:	9207      	str	r2, [sp, #28]
 80079e4:	e004      	b.n	80079f0 <_vfiprintf_r+0x128>
 80079e6:	4252      	negs	r2, r2
 80079e8:	f043 0302 	orr.w	r3, r3, #2
 80079ec:	9207      	str	r2, [sp, #28]
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	f898 3000 	ldrb.w	r3, [r8]
 80079f4:	2b2e      	cmp	r3, #46	; 0x2e
 80079f6:	d10e      	bne.n	8007a16 <_vfiprintf_r+0x14e>
 80079f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079fc:	2b2a      	cmp	r3, #42	; 0x2a
 80079fe:	d138      	bne.n	8007a72 <_vfiprintf_r+0x1aa>
 8007a00:	9b03      	ldr	r3, [sp, #12]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	9203      	str	r2, [sp, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	bfb8      	it	lt
 8007a0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a10:	f108 0802 	add.w	r8, r8, #2
 8007a14:	9305      	str	r3, [sp, #20]
 8007a16:	4d33      	ldr	r5, [pc, #204]	; (8007ae4 <_vfiprintf_r+0x21c>)
 8007a18:	f898 1000 	ldrb.w	r1, [r8]
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f7f8 fc5e 	bl	80002e0 <memchr>
 8007a24:	b140      	cbz	r0, 8007a38 <_vfiprintf_r+0x170>
 8007a26:	2340      	movs	r3, #64	; 0x40
 8007a28:	1b40      	subs	r0, r0, r5
 8007a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8007a2e:	9b04      	ldr	r3, [sp, #16]
 8007a30:	4303      	orrs	r3, r0
 8007a32:	f108 0801 	add.w	r8, r8, #1
 8007a36:	9304      	str	r3, [sp, #16]
 8007a38:	f898 1000 	ldrb.w	r1, [r8]
 8007a3c:	482a      	ldr	r0, [pc, #168]	; (8007ae8 <_vfiprintf_r+0x220>)
 8007a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a42:	2206      	movs	r2, #6
 8007a44:	f108 0701 	add.w	r7, r8, #1
 8007a48:	f7f8 fc4a 	bl	80002e0 <memchr>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d037      	beq.n	8007ac0 <_vfiprintf_r+0x1f8>
 8007a50:	4b26      	ldr	r3, [pc, #152]	; (8007aec <_vfiprintf_r+0x224>)
 8007a52:	bb1b      	cbnz	r3, 8007a9c <_vfiprintf_r+0x1d4>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	3307      	adds	r3, #7
 8007a58:	f023 0307 	bic.w	r3, r3, #7
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	9303      	str	r3, [sp, #12]
 8007a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a62:	444b      	add	r3, r9
 8007a64:	9309      	str	r3, [sp, #36]	; 0x24
 8007a66:	e750      	b.n	800790a <_vfiprintf_r+0x42>
 8007a68:	fb05 3202 	mla	r2, r5, r2, r3
 8007a6c:	2001      	movs	r0, #1
 8007a6e:	4688      	mov	r8, r1
 8007a70:	e78a      	b.n	8007988 <_vfiprintf_r+0xc0>
 8007a72:	2300      	movs	r3, #0
 8007a74:	f108 0801 	add.w	r8, r8, #1
 8007a78:	9305      	str	r3, [sp, #20]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	250a      	movs	r5, #10
 8007a7e:	4640      	mov	r0, r8
 8007a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a84:	3a30      	subs	r2, #48	; 0x30
 8007a86:	2a09      	cmp	r2, #9
 8007a88:	d903      	bls.n	8007a92 <_vfiprintf_r+0x1ca>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0c3      	beq.n	8007a16 <_vfiprintf_r+0x14e>
 8007a8e:	9105      	str	r1, [sp, #20]
 8007a90:	e7c1      	b.n	8007a16 <_vfiprintf_r+0x14e>
 8007a92:	fb05 2101 	mla	r1, r5, r1, r2
 8007a96:	2301      	movs	r3, #1
 8007a98:	4680      	mov	r8, r0
 8007a9a:	e7f0      	b.n	8007a7e <_vfiprintf_r+0x1b6>
 8007a9c:	ab03      	add	r3, sp, #12
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	4622      	mov	r2, r4
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <_vfiprintf_r+0x228>)
 8007aa4:	a904      	add	r1, sp, #16
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f3af 8000 	nop.w
 8007aac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ab0:	4681      	mov	r9, r0
 8007ab2:	d1d5      	bne.n	8007a60 <_vfiprintf_r+0x198>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	065b      	lsls	r3, r3, #25
 8007ab8:	f53f af7e 	bmi.w	80079b8 <_vfiprintf_r+0xf0>
 8007abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007abe:	e77d      	b.n	80079bc <_vfiprintf_r+0xf4>
 8007ac0:	ab03      	add	r3, sp, #12
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <_vfiprintf_r+0x228>)
 8007ac8:	a904      	add	r1, sp, #16
 8007aca:	4630      	mov	r0, r6
 8007acc:	f000 f888 	bl	8007be0 <_printf_i>
 8007ad0:	e7ec      	b.n	8007aac <_vfiprintf_r+0x1e4>
 8007ad2:	bf00      	nop
 8007ad4:	0800845c 	.word	0x0800845c
 8007ad8:	0800849c 	.word	0x0800849c
 8007adc:	0800847c 	.word	0x0800847c
 8007ae0:	0800843c 	.word	0x0800843c
 8007ae4:	080084a2 	.word	0x080084a2
 8007ae8:	080084a6 	.word	0x080084a6
 8007aec:	00000000 	.word	0x00000000
 8007af0:	080078a3 	.word	0x080078a3

08007af4 <_printf_common>:
 8007af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af8:	4691      	mov	r9, r2
 8007afa:	461f      	mov	r7, r3
 8007afc:	688a      	ldr	r2, [r1, #8]
 8007afe:	690b      	ldr	r3, [r1, #16]
 8007b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b04:	4293      	cmp	r3, r2
 8007b06:	bfb8      	it	lt
 8007b08:	4613      	movlt	r3, r2
 8007b0a:	f8c9 3000 	str.w	r3, [r9]
 8007b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b12:	4606      	mov	r6, r0
 8007b14:	460c      	mov	r4, r1
 8007b16:	b112      	cbz	r2, 8007b1e <_printf_common+0x2a>
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f8c9 3000 	str.w	r3, [r9]
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	0699      	lsls	r1, r3, #26
 8007b22:	bf42      	ittt	mi
 8007b24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007b28:	3302      	addmi	r3, #2
 8007b2a:	f8c9 3000 	strmi.w	r3, [r9]
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	f015 0506 	ands.w	r5, r5, #6
 8007b34:	d107      	bne.n	8007b46 <_printf_common+0x52>
 8007b36:	f104 0a19 	add.w	sl, r4, #25
 8007b3a:	68e3      	ldr	r3, [r4, #12]
 8007b3c:	f8d9 2000 	ldr.w	r2, [r9]
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	42ab      	cmp	r3, r5
 8007b44:	dc28      	bgt.n	8007b98 <_printf_common+0xa4>
 8007b46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	3300      	adds	r3, #0
 8007b4e:	bf18      	it	ne
 8007b50:	2301      	movne	r3, #1
 8007b52:	0692      	lsls	r2, r2, #26
 8007b54:	d42d      	bmi.n	8007bb2 <_printf_common+0xbe>
 8007b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	47c0      	blx	r8
 8007b60:	3001      	adds	r0, #1
 8007b62:	d020      	beq.n	8007ba6 <_printf_common+0xb2>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	68e5      	ldr	r5, [r4, #12]
 8007b68:	f8d9 2000 	ldr.w	r2, [r9]
 8007b6c:	f003 0306 	and.w	r3, r3, #6
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	bf08      	it	eq
 8007b74:	1aad      	subeq	r5, r5, r2
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	6922      	ldr	r2, [r4, #16]
 8007b7a:	bf0c      	ite	eq
 8007b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b80:	2500      	movne	r5, #0
 8007b82:	4293      	cmp	r3, r2
 8007b84:	bfc4      	itt	gt
 8007b86:	1a9b      	subgt	r3, r3, r2
 8007b88:	18ed      	addgt	r5, r5, r3
 8007b8a:	f04f 0900 	mov.w	r9, #0
 8007b8e:	341a      	adds	r4, #26
 8007b90:	454d      	cmp	r5, r9
 8007b92:	d11a      	bne.n	8007bca <_printf_common+0xd6>
 8007b94:	2000      	movs	r0, #0
 8007b96:	e008      	b.n	8007baa <_printf_common+0xb6>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	47c0      	blx	r8
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d103      	bne.n	8007bae <_printf_common+0xba>
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bae:	3501      	adds	r5, #1
 8007bb0:	e7c3      	b.n	8007b3a <_printf_common+0x46>
 8007bb2:	18e1      	adds	r1, r4, r3
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	2030      	movs	r0, #48	; 0x30
 8007bb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bbc:	4422      	add	r2, r4
 8007bbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bc6:	3302      	adds	r3, #2
 8007bc8:	e7c5      	b.n	8007b56 <_printf_common+0x62>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4622      	mov	r2, r4
 8007bce:	4639      	mov	r1, r7
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	47c0      	blx	r8
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d0e6      	beq.n	8007ba6 <_printf_common+0xb2>
 8007bd8:	f109 0901 	add.w	r9, r9, #1
 8007bdc:	e7d8      	b.n	8007b90 <_printf_common+0x9c>
	...

08007be0 <_printf_i>:
 8007be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007be4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007be8:	460c      	mov	r4, r1
 8007bea:	7e09      	ldrb	r1, [r1, #24]
 8007bec:	b085      	sub	sp, #20
 8007bee:	296e      	cmp	r1, #110	; 0x6e
 8007bf0:	4617      	mov	r7, r2
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	4698      	mov	r8, r3
 8007bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf8:	f000 80b3 	beq.w	8007d62 <_printf_i+0x182>
 8007bfc:	d822      	bhi.n	8007c44 <_printf_i+0x64>
 8007bfe:	2963      	cmp	r1, #99	; 0x63
 8007c00:	d036      	beq.n	8007c70 <_printf_i+0x90>
 8007c02:	d80a      	bhi.n	8007c1a <_printf_i+0x3a>
 8007c04:	2900      	cmp	r1, #0
 8007c06:	f000 80b9 	beq.w	8007d7c <_printf_i+0x19c>
 8007c0a:	2958      	cmp	r1, #88	; 0x58
 8007c0c:	f000 8083 	beq.w	8007d16 <_printf_i+0x136>
 8007c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c18:	e032      	b.n	8007c80 <_printf_i+0xa0>
 8007c1a:	2964      	cmp	r1, #100	; 0x64
 8007c1c:	d001      	beq.n	8007c22 <_printf_i+0x42>
 8007c1e:	2969      	cmp	r1, #105	; 0x69
 8007c20:	d1f6      	bne.n	8007c10 <_printf_i+0x30>
 8007c22:	6820      	ldr	r0, [r4, #0]
 8007c24:	6813      	ldr	r3, [r2, #0]
 8007c26:	0605      	lsls	r5, r0, #24
 8007c28:	f103 0104 	add.w	r1, r3, #4
 8007c2c:	d52a      	bpl.n	8007c84 <_printf_i+0xa4>
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6011      	str	r1, [r2, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da03      	bge.n	8007c3e <_printf_i+0x5e>
 8007c36:	222d      	movs	r2, #45	; 0x2d
 8007c38:	425b      	negs	r3, r3
 8007c3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c3e:	486f      	ldr	r0, [pc, #444]	; (8007dfc <_printf_i+0x21c>)
 8007c40:	220a      	movs	r2, #10
 8007c42:	e039      	b.n	8007cb8 <_printf_i+0xd8>
 8007c44:	2973      	cmp	r1, #115	; 0x73
 8007c46:	f000 809d 	beq.w	8007d84 <_printf_i+0x1a4>
 8007c4a:	d808      	bhi.n	8007c5e <_printf_i+0x7e>
 8007c4c:	296f      	cmp	r1, #111	; 0x6f
 8007c4e:	d020      	beq.n	8007c92 <_printf_i+0xb2>
 8007c50:	2970      	cmp	r1, #112	; 0x70
 8007c52:	d1dd      	bne.n	8007c10 <_printf_i+0x30>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	f043 0320 	orr.w	r3, r3, #32
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	e003      	b.n	8007c66 <_printf_i+0x86>
 8007c5e:	2975      	cmp	r1, #117	; 0x75
 8007c60:	d017      	beq.n	8007c92 <_printf_i+0xb2>
 8007c62:	2978      	cmp	r1, #120	; 0x78
 8007c64:	d1d4      	bne.n	8007c10 <_printf_i+0x30>
 8007c66:	2378      	movs	r3, #120	; 0x78
 8007c68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c6c:	4864      	ldr	r0, [pc, #400]	; (8007e00 <_printf_i+0x220>)
 8007c6e:	e055      	b.n	8007d1c <_printf_i+0x13c>
 8007c70:	6813      	ldr	r3, [r2, #0]
 8007c72:	1d19      	adds	r1, r3, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6011      	str	r1, [r2, #0]
 8007c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c80:	2301      	movs	r3, #1
 8007c82:	e08c      	b.n	8007d9e <_printf_i+0x1be>
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6011      	str	r1, [r2, #0]
 8007c88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c8c:	bf18      	it	ne
 8007c8e:	b21b      	sxthne	r3, r3
 8007c90:	e7cf      	b.n	8007c32 <_printf_i+0x52>
 8007c92:	6813      	ldr	r3, [r2, #0]
 8007c94:	6825      	ldr	r5, [r4, #0]
 8007c96:	1d18      	adds	r0, r3, #4
 8007c98:	6010      	str	r0, [r2, #0]
 8007c9a:	0628      	lsls	r0, r5, #24
 8007c9c:	d501      	bpl.n	8007ca2 <_printf_i+0xc2>
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	e002      	b.n	8007ca8 <_printf_i+0xc8>
 8007ca2:	0668      	lsls	r0, r5, #25
 8007ca4:	d5fb      	bpl.n	8007c9e <_printf_i+0xbe>
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	4854      	ldr	r0, [pc, #336]	; (8007dfc <_printf_i+0x21c>)
 8007caa:	296f      	cmp	r1, #111	; 0x6f
 8007cac:	bf14      	ite	ne
 8007cae:	220a      	movne	r2, #10
 8007cb0:	2208      	moveq	r2, #8
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cb8:	6865      	ldr	r5, [r4, #4]
 8007cba:	60a5      	str	r5, [r4, #8]
 8007cbc:	2d00      	cmp	r5, #0
 8007cbe:	f2c0 8095 	blt.w	8007dec <_printf_i+0x20c>
 8007cc2:	6821      	ldr	r1, [r4, #0]
 8007cc4:	f021 0104 	bic.w	r1, r1, #4
 8007cc8:	6021      	str	r1, [r4, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d13d      	bne.n	8007d4a <_printf_i+0x16a>
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	f040 808e 	bne.w	8007df0 <_printf_i+0x210>
 8007cd4:	4665      	mov	r5, ip
 8007cd6:	2a08      	cmp	r2, #8
 8007cd8:	d10b      	bne.n	8007cf2 <_printf_i+0x112>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	07db      	lsls	r3, r3, #31
 8007cde:	d508      	bpl.n	8007cf2 <_printf_i+0x112>
 8007ce0:	6923      	ldr	r3, [r4, #16]
 8007ce2:	6862      	ldr	r2, [r4, #4]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	bfde      	ittt	le
 8007ce8:	2330      	movle	r3, #48	; 0x30
 8007cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cf2:	ebac 0305 	sub.w	r3, ip, r5
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	f8cd 8000 	str.w	r8, [sp]
 8007cfc:	463b      	mov	r3, r7
 8007cfe:	aa03      	add	r2, sp, #12
 8007d00:	4621      	mov	r1, r4
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff fef6 	bl	8007af4 <_printf_common>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d14d      	bne.n	8007da8 <_printf_i+0x1c8>
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	b005      	add	sp, #20
 8007d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d16:	4839      	ldr	r0, [pc, #228]	; (8007dfc <_printf_i+0x21c>)
 8007d18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007d1c:	6813      	ldr	r3, [r2, #0]
 8007d1e:	6821      	ldr	r1, [r4, #0]
 8007d20:	1d1d      	adds	r5, r3, #4
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6015      	str	r5, [r2, #0]
 8007d26:	060a      	lsls	r2, r1, #24
 8007d28:	d50b      	bpl.n	8007d42 <_printf_i+0x162>
 8007d2a:	07ca      	lsls	r2, r1, #31
 8007d2c:	bf44      	itt	mi
 8007d2e:	f041 0120 	orrmi.w	r1, r1, #32
 8007d32:	6021      	strmi	r1, [r4, #0]
 8007d34:	b91b      	cbnz	r3, 8007d3e <_printf_i+0x15e>
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	f022 0220 	bic.w	r2, r2, #32
 8007d3c:	6022      	str	r2, [r4, #0]
 8007d3e:	2210      	movs	r2, #16
 8007d40:	e7b7      	b.n	8007cb2 <_printf_i+0xd2>
 8007d42:	064d      	lsls	r5, r1, #25
 8007d44:	bf48      	it	mi
 8007d46:	b29b      	uxthmi	r3, r3
 8007d48:	e7ef      	b.n	8007d2a <_printf_i+0x14a>
 8007d4a:	4665      	mov	r5, ip
 8007d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d50:	fb02 3311 	mls	r3, r2, r1, r3
 8007d54:	5cc3      	ldrb	r3, [r0, r3]
 8007d56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	d1f5      	bne.n	8007d4c <_printf_i+0x16c>
 8007d60:	e7b9      	b.n	8007cd6 <_printf_i+0xf6>
 8007d62:	6813      	ldr	r3, [r2, #0]
 8007d64:	6825      	ldr	r5, [r4, #0]
 8007d66:	6961      	ldr	r1, [r4, #20]
 8007d68:	1d18      	adds	r0, r3, #4
 8007d6a:	6010      	str	r0, [r2, #0]
 8007d6c:	0628      	lsls	r0, r5, #24
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	d501      	bpl.n	8007d76 <_printf_i+0x196>
 8007d72:	6019      	str	r1, [r3, #0]
 8007d74:	e002      	b.n	8007d7c <_printf_i+0x19c>
 8007d76:	066a      	lsls	r2, r5, #25
 8007d78:	d5fb      	bpl.n	8007d72 <_printf_i+0x192>
 8007d7a:	8019      	strh	r1, [r3, #0]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	6123      	str	r3, [r4, #16]
 8007d80:	4665      	mov	r5, ip
 8007d82:	e7b9      	b.n	8007cf8 <_printf_i+0x118>
 8007d84:	6813      	ldr	r3, [r2, #0]
 8007d86:	1d19      	adds	r1, r3, #4
 8007d88:	6011      	str	r1, [r2, #0]
 8007d8a:	681d      	ldr	r5, [r3, #0]
 8007d8c:	6862      	ldr	r2, [r4, #4]
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4628      	mov	r0, r5
 8007d92:	f7f8 faa5 	bl	80002e0 <memchr>
 8007d96:	b108      	cbz	r0, 8007d9c <_printf_i+0x1bc>
 8007d98:	1b40      	subs	r0, r0, r5
 8007d9a:	6060      	str	r0, [r4, #4]
 8007d9c:	6863      	ldr	r3, [r4, #4]
 8007d9e:	6123      	str	r3, [r4, #16]
 8007da0:	2300      	movs	r3, #0
 8007da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da6:	e7a7      	b.n	8007cf8 <_printf_i+0x118>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	462a      	mov	r2, r5
 8007dac:	4639      	mov	r1, r7
 8007dae:	4630      	mov	r0, r6
 8007db0:	47c0      	blx	r8
 8007db2:	3001      	adds	r0, #1
 8007db4:	d0aa      	beq.n	8007d0c <_printf_i+0x12c>
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	079b      	lsls	r3, r3, #30
 8007dba:	d413      	bmi.n	8007de4 <_printf_i+0x204>
 8007dbc:	68e0      	ldr	r0, [r4, #12]
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	4298      	cmp	r0, r3
 8007dc2:	bfb8      	it	lt
 8007dc4:	4618      	movlt	r0, r3
 8007dc6:	e7a3      	b.n	8007d10 <_printf_i+0x130>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	464a      	mov	r2, r9
 8007dcc:	4639      	mov	r1, r7
 8007dce:	4630      	mov	r0, r6
 8007dd0:	47c0      	blx	r8
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	d09a      	beq.n	8007d0c <_printf_i+0x12c>
 8007dd6:	3501      	adds	r5, #1
 8007dd8:	68e3      	ldr	r3, [r4, #12]
 8007dda:	9a03      	ldr	r2, [sp, #12]
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	42ab      	cmp	r3, r5
 8007de0:	dcf2      	bgt.n	8007dc8 <_printf_i+0x1e8>
 8007de2:	e7eb      	b.n	8007dbc <_printf_i+0x1dc>
 8007de4:	2500      	movs	r5, #0
 8007de6:	f104 0919 	add.w	r9, r4, #25
 8007dea:	e7f5      	b.n	8007dd8 <_printf_i+0x1f8>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1ac      	bne.n	8007d4a <_printf_i+0x16a>
 8007df0:	7803      	ldrb	r3, [r0, #0]
 8007df2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007df6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dfa:	e76c      	b.n	8007cd6 <_printf_i+0xf6>
 8007dfc:	080084ad 	.word	0x080084ad
 8007e00:	080084be 	.word	0x080084be

08007e04 <_sbrk_r>:
 8007e04:	b538      	push	{r3, r4, r5, lr}
 8007e06:	4c06      	ldr	r4, [pc, #24]	; (8007e20 <_sbrk_r+0x1c>)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	f7f9 f830 	bl	8000e74 <_sbrk>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_sbrk_r+0x1a>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_sbrk_r+0x1a>
 8007e1c:	602b      	str	r3, [r5, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	20002224 	.word	0x20002224

08007e24 <__sread>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	460c      	mov	r4, r1
 8007e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2c:	f000 fa96 	bl	800835c <_read_r>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	bfab      	itete	ge
 8007e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e36:	89a3      	ldrhlt	r3, [r4, #12]
 8007e38:	181b      	addge	r3, r3, r0
 8007e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e3e:	bfac      	ite	ge
 8007e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e42:	81a3      	strhlt	r3, [r4, #12]
 8007e44:	bd10      	pop	{r4, pc}

08007e46 <__swrite>:
 8007e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4a:	461f      	mov	r7, r3
 8007e4c:	898b      	ldrh	r3, [r1, #12]
 8007e4e:	05db      	lsls	r3, r3, #23
 8007e50:	4605      	mov	r5, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	4616      	mov	r6, r2
 8007e56:	d505      	bpl.n	8007e64 <__swrite+0x1e>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e60:	f000 f9b6 	bl	80081d0 <_lseek_r>
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e6e:	81a3      	strh	r3, [r4, #12]
 8007e70:	4632      	mov	r2, r6
 8007e72:	463b      	mov	r3, r7
 8007e74:	4628      	mov	r0, r5
 8007e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7a:	f000 b869 	b.w	8007f50 <_write_r>

08007e7e <__sseek>:
 8007e7e:	b510      	push	{r4, lr}
 8007e80:	460c      	mov	r4, r1
 8007e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e86:	f000 f9a3 	bl	80081d0 <_lseek_r>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	bf15      	itete	ne
 8007e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e9a:	81a3      	strheq	r3, [r4, #12]
 8007e9c:	bf18      	it	ne
 8007e9e:	81a3      	strhne	r3, [r4, #12]
 8007ea0:	bd10      	pop	{r4, pc}

08007ea2 <__sclose>:
 8007ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea6:	f000 b8d3 	b.w	8008050 <_close_r>
	...

08007eac <__swbuf_r>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	460e      	mov	r6, r1
 8007eb0:	4614      	mov	r4, r2
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	b118      	cbz	r0, 8007ebe <__swbuf_r+0x12>
 8007eb6:	6983      	ldr	r3, [r0, #24]
 8007eb8:	b90b      	cbnz	r3, 8007ebe <__swbuf_r+0x12>
 8007eba:	f7ff fbf7 	bl	80076ac <__sinit>
 8007ebe:	4b21      	ldr	r3, [pc, #132]	; (8007f44 <__swbuf_r+0x98>)
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	d12a      	bne.n	8007f1a <__swbuf_r+0x6e>
 8007ec4:	686c      	ldr	r4, [r5, #4]
 8007ec6:	69a3      	ldr	r3, [r4, #24]
 8007ec8:	60a3      	str	r3, [r4, #8]
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	071a      	lsls	r2, r3, #28
 8007ece:	d52e      	bpl.n	8007f2e <__swbuf_r+0x82>
 8007ed0:	6923      	ldr	r3, [r4, #16]
 8007ed2:	b363      	cbz	r3, 8007f2e <__swbuf_r+0x82>
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	6820      	ldr	r0, [r4, #0]
 8007ed8:	1ac0      	subs	r0, r0, r3
 8007eda:	6963      	ldr	r3, [r4, #20]
 8007edc:	b2f6      	uxtb	r6, r6
 8007ede:	4283      	cmp	r3, r0
 8007ee0:	4637      	mov	r7, r6
 8007ee2:	dc04      	bgt.n	8007eee <__swbuf_r+0x42>
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 f948 	bl	800817c <_fflush_r>
 8007eec:	bb28      	cbnz	r0, 8007f3a <__swbuf_r+0x8e>
 8007eee:	68a3      	ldr	r3, [r4, #8]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	60a3      	str	r3, [r4, #8]
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	6022      	str	r2, [r4, #0]
 8007efa:	701e      	strb	r6, [r3, #0]
 8007efc:	6963      	ldr	r3, [r4, #20]
 8007efe:	3001      	adds	r0, #1
 8007f00:	4283      	cmp	r3, r0
 8007f02:	d004      	beq.n	8007f0e <__swbuf_r+0x62>
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	07db      	lsls	r3, r3, #31
 8007f08:	d519      	bpl.n	8007f3e <__swbuf_r+0x92>
 8007f0a:	2e0a      	cmp	r6, #10
 8007f0c:	d117      	bne.n	8007f3e <__swbuf_r+0x92>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 f933 	bl	800817c <_fflush_r>
 8007f16:	b190      	cbz	r0, 8007f3e <__swbuf_r+0x92>
 8007f18:	e00f      	b.n	8007f3a <__swbuf_r+0x8e>
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <__swbuf_r+0x9c>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d101      	bne.n	8007f24 <__swbuf_r+0x78>
 8007f20:	68ac      	ldr	r4, [r5, #8]
 8007f22:	e7d0      	b.n	8007ec6 <__swbuf_r+0x1a>
 8007f24:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <__swbuf_r+0xa0>)
 8007f26:	429c      	cmp	r4, r3
 8007f28:	bf08      	it	eq
 8007f2a:	68ec      	ldreq	r4, [r5, #12]
 8007f2c:	e7cb      	b.n	8007ec6 <__swbuf_r+0x1a>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4628      	mov	r0, r5
 8007f32:	f000 f81f 	bl	8007f74 <__swsetup_r>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0cc      	beq.n	8007ed4 <__swbuf_r+0x28>
 8007f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8007f3e:	4638      	mov	r0, r7
 8007f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f42:	bf00      	nop
 8007f44:	0800845c 	.word	0x0800845c
 8007f48:	0800847c 	.word	0x0800847c
 8007f4c:	0800843c 	.word	0x0800843c

08007f50 <_write_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4c07      	ldr	r4, [pc, #28]	; (8007f70 <_write_r+0x20>)
 8007f54:	4605      	mov	r5, r0
 8007f56:	4608      	mov	r0, r1
 8007f58:	4611      	mov	r1, r2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	6022      	str	r2, [r4, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f7f8 ff37 	bl	8000dd2 <_write>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_write_r+0x1e>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_write_r+0x1e>
 8007f6c:	602b      	str	r3, [r5, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	20002224 	.word	0x20002224

08007f74 <__swsetup_r>:
 8007f74:	4b32      	ldr	r3, [pc, #200]	; (8008040 <__swsetup_r+0xcc>)
 8007f76:	b570      	push	{r4, r5, r6, lr}
 8007f78:	681d      	ldr	r5, [r3, #0]
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	b125      	cbz	r5, 8007f8a <__swsetup_r+0x16>
 8007f80:	69ab      	ldr	r3, [r5, #24]
 8007f82:	b913      	cbnz	r3, 8007f8a <__swsetup_r+0x16>
 8007f84:	4628      	mov	r0, r5
 8007f86:	f7ff fb91 	bl	80076ac <__sinit>
 8007f8a:	4b2e      	ldr	r3, [pc, #184]	; (8008044 <__swsetup_r+0xd0>)
 8007f8c:	429c      	cmp	r4, r3
 8007f8e:	d10f      	bne.n	8007fb0 <__swsetup_r+0x3c>
 8007f90:	686c      	ldr	r4, [r5, #4]
 8007f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	0715      	lsls	r5, r2, #28
 8007f9a:	d42c      	bmi.n	8007ff6 <__swsetup_r+0x82>
 8007f9c:	06d0      	lsls	r0, r2, #27
 8007f9e:	d411      	bmi.n	8007fc4 <__swsetup_r+0x50>
 8007fa0:	2209      	movs	r2, #9
 8007fa2:	6032      	str	r2, [r6, #0]
 8007fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa8:	81a3      	strh	r3, [r4, #12]
 8007faa:	f04f 30ff 	mov.w	r0, #4294967295
 8007fae:	e03e      	b.n	800802e <__swsetup_r+0xba>
 8007fb0:	4b25      	ldr	r3, [pc, #148]	; (8008048 <__swsetup_r+0xd4>)
 8007fb2:	429c      	cmp	r4, r3
 8007fb4:	d101      	bne.n	8007fba <__swsetup_r+0x46>
 8007fb6:	68ac      	ldr	r4, [r5, #8]
 8007fb8:	e7eb      	b.n	8007f92 <__swsetup_r+0x1e>
 8007fba:	4b24      	ldr	r3, [pc, #144]	; (800804c <__swsetup_r+0xd8>)
 8007fbc:	429c      	cmp	r4, r3
 8007fbe:	bf08      	it	eq
 8007fc0:	68ec      	ldreq	r4, [r5, #12]
 8007fc2:	e7e6      	b.n	8007f92 <__swsetup_r+0x1e>
 8007fc4:	0751      	lsls	r1, r2, #29
 8007fc6:	d512      	bpl.n	8007fee <__swsetup_r+0x7a>
 8007fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fca:	b141      	cbz	r1, 8007fde <__swsetup_r+0x6a>
 8007fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd0:	4299      	cmp	r1, r3
 8007fd2:	d002      	beq.n	8007fda <__swsetup_r+0x66>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f000 f973 	bl	80082c0 <_free_r>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6063      	str	r3, [r4, #4]
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f043 0308 	orr.w	r3, r3, #8
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	b94b      	cbnz	r3, 800800e <__swsetup_r+0x9a>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008004:	d003      	beq.n	800800e <__swsetup_r+0x9a>
 8008006:	4621      	mov	r1, r4
 8008008:	4630      	mov	r0, r6
 800800a:	f000 f917 	bl	800823c <__smakebuf_r>
 800800e:	89a2      	ldrh	r2, [r4, #12]
 8008010:	f012 0301 	ands.w	r3, r2, #1
 8008014:	d00c      	beq.n	8008030 <__swsetup_r+0xbc>
 8008016:	2300      	movs	r3, #0
 8008018:	60a3      	str	r3, [r4, #8]
 800801a:	6963      	ldr	r3, [r4, #20]
 800801c:	425b      	negs	r3, r3
 800801e:	61a3      	str	r3, [r4, #24]
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	b953      	cbnz	r3, 800803a <__swsetup_r+0xc6>
 8008024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008028:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800802c:	d1ba      	bne.n	8007fa4 <__swsetup_r+0x30>
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	0792      	lsls	r2, r2, #30
 8008032:	bf58      	it	pl
 8008034:	6963      	ldrpl	r3, [r4, #20]
 8008036:	60a3      	str	r3, [r4, #8]
 8008038:	e7f2      	b.n	8008020 <__swsetup_r+0xac>
 800803a:	2000      	movs	r0, #0
 800803c:	e7f7      	b.n	800802e <__swsetup_r+0xba>
 800803e:	bf00      	nop
 8008040:	20000010 	.word	0x20000010
 8008044:	0800845c 	.word	0x0800845c
 8008048:	0800847c 	.word	0x0800847c
 800804c:	0800843c 	.word	0x0800843c

08008050 <_close_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4c06      	ldr	r4, [pc, #24]	; (800806c <_close_r+0x1c>)
 8008054:	2300      	movs	r3, #0
 8008056:	4605      	mov	r5, r0
 8008058:	4608      	mov	r0, r1
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	f7f8 fed5 	bl	8000e0a <_close>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_close_r+0x1a>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	b103      	cbz	r3, 800806a <_close_r+0x1a>
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	20002224 	.word	0x20002224

08008070 <__sflush_r>:
 8008070:	898a      	ldrh	r2, [r1, #12]
 8008072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008076:	4605      	mov	r5, r0
 8008078:	0710      	lsls	r0, r2, #28
 800807a:	460c      	mov	r4, r1
 800807c:	d458      	bmi.n	8008130 <__sflush_r+0xc0>
 800807e:	684b      	ldr	r3, [r1, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	dc05      	bgt.n	8008090 <__sflush_r+0x20>
 8008084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	dc02      	bgt.n	8008090 <__sflush_r+0x20>
 800808a:	2000      	movs	r0, #0
 800808c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008092:	2e00      	cmp	r6, #0
 8008094:	d0f9      	beq.n	800808a <__sflush_r+0x1a>
 8008096:	2300      	movs	r3, #0
 8008098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800809c:	682f      	ldr	r7, [r5, #0]
 800809e:	6a21      	ldr	r1, [r4, #32]
 80080a0:	602b      	str	r3, [r5, #0]
 80080a2:	d032      	beq.n	800810a <__sflush_r+0x9a>
 80080a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	075a      	lsls	r2, r3, #29
 80080aa:	d505      	bpl.n	80080b8 <__sflush_r+0x48>
 80080ac:	6863      	ldr	r3, [r4, #4]
 80080ae:	1ac0      	subs	r0, r0, r3
 80080b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080b2:	b10b      	cbz	r3, 80080b8 <__sflush_r+0x48>
 80080b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080b6:	1ac0      	subs	r0, r0, r3
 80080b8:	2300      	movs	r3, #0
 80080ba:	4602      	mov	r2, r0
 80080bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080be:	6a21      	ldr	r1, [r4, #32]
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b0      	blx	r6
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	d106      	bne.n	80080d8 <__sflush_r+0x68>
 80080ca:	6829      	ldr	r1, [r5, #0]
 80080cc:	291d      	cmp	r1, #29
 80080ce:	d848      	bhi.n	8008162 <__sflush_r+0xf2>
 80080d0:	4a29      	ldr	r2, [pc, #164]	; (8008178 <__sflush_r+0x108>)
 80080d2:	40ca      	lsrs	r2, r1
 80080d4:	07d6      	lsls	r6, r2, #31
 80080d6:	d544      	bpl.n	8008162 <__sflush_r+0xf2>
 80080d8:	2200      	movs	r2, #0
 80080da:	6062      	str	r2, [r4, #4]
 80080dc:	04d9      	lsls	r1, r3, #19
 80080de:	6922      	ldr	r2, [r4, #16]
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	d504      	bpl.n	80080ee <__sflush_r+0x7e>
 80080e4:	1c42      	adds	r2, r0, #1
 80080e6:	d101      	bne.n	80080ec <__sflush_r+0x7c>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b903      	cbnz	r3, 80080ee <__sflush_r+0x7e>
 80080ec:	6560      	str	r0, [r4, #84]	; 0x54
 80080ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080f0:	602f      	str	r7, [r5, #0]
 80080f2:	2900      	cmp	r1, #0
 80080f4:	d0c9      	beq.n	800808a <__sflush_r+0x1a>
 80080f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080fa:	4299      	cmp	r1, r3
 80080fc:	d002      	beq.n	8008104 <__sflush_r+0x94>
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 f8de 	bl	80082c0 <_free_r>
 8008104:	2000      	movs	r0, #0
 8008106:	6360      	str	r0, [r4, #52]	; 0x34
 8008108:	e7c0      	b.n	800808c <__sflush_r+0x1c>
 800810a:	2301      	movs	r3, #1
 800810c:	4628      	mov	r0, r5
 800810e:	47b0      	blx	r6
 8008110:	1c41      	adds	r1, r0, #1
 8008112:	d1c8      	bne.n	80080a6 <__sflush_r+0x36>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0c5      	beq.n	80080a6 <__sflush_r+0x36>
 800811a:	2b1d      	cmp	r3, #29
 800811c:	d001      	beq.n	8008122 <__sflush_r+0xb2>
 800811e:	2b16      	cmp	r3, #22
 8008120:	d101      	bne.n	8008126 <__sflush_r+0xb6>
 8008122:	602f      	str	r7, [r5, #0]
 8008124:	e7b1      	b.n	800808a <__sflush_r+0x1a>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	e7ad      	b.n	800808c <__sflush_r+0x1c>
 8008130:	690f      	ldr	r7, [r1, #16]
 8008132:	2f00      	cmp	r7, #0
 8008134:	d0a9      	beq.n	800808a <__sflush_r+0x1a>
 8008136:	0793      	lsls	r3, r2, #30
 8008138:	680e      	ldr	r6, [r1, #0]
 800813a:	bf08      	it	eq
 800813c:	694b      	ldreq	r3, [r1, #20]
 800813e:	600f      	str	r7, [r1, #0]
 8008140:	bf18      	it	ne
 8008142:	2300      	movne	r3, #0
 8008144:	eba6 0807 	sub.w	r8, r6, r7
 8008148:	608b      	str	r3, [r1, #8]
 800814a:	f1b8 0f00 	cmp.w	r8, #0
 800814e:	dd9c      	ble.n	800808a <__sflush_r+0x1a>
 8008150:	4643      	mov	r3, r8
 8008152:	463a      	mov	r2, r7
 8008154:	6a21      	ldr	r1, [r4, #32]
 8008156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008158:	4628      	mov	r0, r5
 800815a:	47b0      	blx	r6
 800815c:	2800      	cmp	r0, #0
 800815e:	dc06      	bgt.n	800816e <__sflush_r+0xfe>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	f04f 30ff 	mov.w	r0, #4294967295
 800816c:	e78e      	b.n	800808c <__sflush_r+0x1c>
 800816e:	4407      	add	r7, r0
 8008170:	eba8 0800 	sub.w	r8, r8, r0
 8008174:	e7e9      	b.n	800814a <__sflush_r+0xda>
 8008176:	bf00      	nop
 8008178:	20400001 	.word	0x20400001

0800817c <_fflush_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	690b      	ldr	r3, [r1, #16]
 8008180:	4605      	mov	r5, r0
 8008182:	460c      	mov	r4, r1
 8008184:	b1db      	cbz	r3, 80081be <_fflush_r+0x42>
 8008186:	b118      	cbz	r0, 8008190 <_fflush_r+0x14>
 8008188:	6983      	ldr	r3, [r0, #24]
 800818a:	b90b      	cbnz	r3, 8008190 <_fflush_r+0x14>
 800818c:	f7ff fa8e 	bl	80076ac <__sinit>
 8008190:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <_fflush_r+0x48>)
 8008192:	429c      	cmp	r4, r3
 8008194:	d109      	bne.n	80081aa <_fflush_r+0x2e>
 8008196:	686c      	ldr	r4, [r5, #4]
 8008198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819c:	b17b      	cbz	r3, 80081be <_fflush_r+0x42>
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a6:	f7ff bf63 	b.w	8008070 <__sflush_r>
 80081aa:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <_fflush_r+0x4c>)
 80081ac:	429c      	cmp	r4, r3
 80081ae:	d101      	bne.n	80081b4 <_fflush_r+0x38>
 80081b0:	68ac      	ldr	r4, [r5, #8]
 80081b2:	e7f1      	b.n	8008198 <_fflush_r+0x1c>
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <_fflush_r+0x50>)
 80081b6:	429c      	cmp	r4, r3
 80081b8:	bf08      	it	eq
 80081ba:	68ec      	ldreq	r4, [r5, #12]
 80081bc:	e7ec      	b.n	8008198 <_fflush_r+0x1c>
 80081be:	2000      	movs	r0, #0
 80081c0:	bd38      	pop	{r3, r4, r5, pc}
 80081c2:	bf00      	nop
 80081c4:	0800845c 	.word	0x0800845c
 80081c8:	0800847c 	.word	0x0800847c
 80081cc:	0800843c 	.word	0x0800843c

080081d0 <_lseek_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4c07      	ldr	r4, [pc, #28]	; (80081f0 <_lseek_r+0x20>)
 80081d4:	4605      	mov	r5, r0
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	6022      	str	r2, [r4, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7f8 fe3a 	bl	8000e58 <_lseek>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_lseek_r+0x1e>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_lseek_r+0x1e>
 80081ec:	602b      	str	r3, [r5, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	20002224 	.word	0x20002224

080081f4 <__swhatbuf_r>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	460e      	mov	r6, r1
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	2900      	cmp	r1, #0
 80081fe:	b096      	sub	sp, #88	; 0x58
 8008200:	4614      	mov	r4, r2
 8008202:	461d      	mov	r5, r3
 8008204:	da07      	bge.n	8008216 <__swhatbuf_r+0x22>
 8008206:	2300      	movs	r3, #0
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	89b3      	ldrh	r3, [r6, #12]
 800820c:	061a      	lsls	r2, r3, #24
 800820e:	d410      	bmi.n	8008232 <__swhatbuf_r+0x3e>
 8008210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008214:	e00e      	b.n	8008234 <__swhatbuf_r+0x40>
 8008216:	466a      	mov	r2, sp
 8008218:	f000 f8b2 	bl	8008380 <_fstat_r>
 800821c:	2800      	cmp	r0, #0
 800821e:	dbf2      	blt.n	8008206 <__swhatbuf_r+0x12>
 8008220:	9a01      	ldr	r2, [sp, #4]
 8008222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800822a:	425a      	negs	r2, r3
 800822c:	415a      	adcs	r2, r3
 800822e:	602a      	str	r2, [r5, #0]
 8008230:	e7ee      	b.n	8008210 <__swhatbuf_r+0x1c>
 8008232:	2340      	movs	r3, #64	; 0x40
 8008234:	2000      	movs	r0, #0
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	b016      	add	sp, #88	; 0x58
 800823a:	bd70      	pop	{r4, r5, r6, pc}

0800823c <__smakebuf_r>:
 800823c:	898b      	ldrh	r3, [r1, #12]
 800823e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008240:	079d      	lsls	r5, r3, #30
 8008242:	4606      	mov	r6, r0
 8008244:	460c      	mov	r4, r1
 8008246:	d507      	bpl.n	8008258 <__smakebuf_r+0x1c>
 8008248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800824c:	6023      	str	r3, [r4, #0]
 800824e:	6123      	str	r3, [r4, #16]
 8008250:	2301      	movs	r3, #1
 8008252:	6163      	str	r3, [r4, #20]
 8008254:	b002      	add	sp, #8
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	ab01      	add	r3, sp, #4
 800825a:	466a      	mov	r2, sp
 800825c:	f7ff ffca 	bl	80081f4 <__swhatbuf_r>
 8008260:	9900      	ldr	r1, [sp, #0]
 8008262:	4605      	mov	r5, r0
 8008264:	4630      	mov	r0, r6
 8008266:	f7ff faab 	bl	80077c0 <_malloc_r>
 800826a:	b948      	cbnz	r0, 8008280 <__smakebuf_r+0x44>
 800826c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008270:	059a      	lsls	r2, r3, #22
 8008272:	d4ef      	bmi.n	8008254 <__smakebuf_r+0x18>
 8008274:	f023 0303 	bic.w	r3, r3, #3
 8008278:	f043 0302 	orr.w	r3, r3, #2
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	e7e3      	b.n	8008248 <__smakebuf_r+0xc>
 8008280:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <__smakebuf_r+0x7c>)
 8008282:	62b3      	str	r3, [r6, #40]	; 0x28
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	6020      	str	r0, [r4, #0]
 8008288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	9b00      	ldr	r3, [sp, #0]
 8008290:	6163      	str	r3, [r4, #20]
 8008292:	9b01      	ldr	r3, [sp, #4]
 8008294:	6120      	str	r0, [r4, #16]
 8008296:	b15b      	cbz	r3, 80082b0 <__smakebuf_r+0x74>
 8008298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829c:	4630      	mov	r0, r6
 800829e:	f000 f881 	bl	80083a4 <_isatty_r>
 80082a2:	b128      	cbz	r0, 80082b0 <__smakebuf_r+0x74>
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	431d      	orrs	r5, r3
 80082b4:	81a5      	strh	r5, [r4, #12]
 80082b6:	e7cd      	b.n	8008254 <__smakebuf_r+0x18>
 80082b8:	08007675 	.word	0x08007675

080082bc <__malloc_lock>:
 80082bc:	4770      	bx	lr

080082be <__malloc_unlock>:
 80082be:	4770      	bx	lr

080082c0 <_free_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4605      	mov	r5, r0
 80082c4:	2900      	cmp	r1, #0
 80082c6:	d045      	beq.n	8008354 <_free_r+0x94>
 80082c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082cc:	1f0c      	subs	r4, r1, #4
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bfb8      	it	lt
 80082d2:	18e4      	addlt	r4, r4, r3
 80082d4:	f7ff fff2 	bl	80082bc <__malloc_lock>
 80082d8:	4a1f      	ldr	r2, [pc, #124]	; (8008358 <_free_r+0x98>)
 80082da:	6813      	ldr	r3, [r2, #0]
 80082dc:	4610      	mov	r0, r2
 80082de:	b933      	cbnz	r3, 80082ee <_free_r+0x2e>
 80082e0:	6063      	str	r3, [r4, #4]
 80082e2:	6014      	str	r4, [r2, #0]
 80082e4:	4628      	mov	r0, r5
 80082e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ea:	f7ff bfe8 	b.w	80082be <__malloc_unlock>
 80082ee:	42a3      	cmp	r3, r4
 80082f0:	d90c      	bls.n	800830c <_free_r+0x4c>
 80082f2:	6821      	ldr	r1, [r4, #0]
 80082f4:	1862      	adds	r2, r4, r1
 80082f6:	4293      	cmp	r3, r2
 80082f8:	bf04      	itt	eq
 80082fa:	681a      	ldreq	r2, [r3, #0]
 80082fc:	685b      	ldreq	r3, [r3, #4]
 80082fe:	6063      	str	r3, [r4, #4]
 8008300:	bf04      	itt	eq
 8008302:	1852      	addeq	r2, r2, r1
 8008304:	6022      	streq	r2, [r4, #0]
 8008306:	6004      	str	r4, [r0, #0]
 8008308:	e7ec      	b.n	80082e4 <_free_r+0x24>
 800830a:	4613      	mov	r3, r2
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	b10a      	cbz	r2, 8008314 <_free_r+0x54>
 8008310:	42a2      	cmp	r2, r4
 8008312:	d9fa      	bls.n	800830a <_free_r+0x4a>
 8008314:	6819      	ldr	r1, [r3, #0]
 8008316:	1858      	adds	r0, r3, r1
 8008318:	42a0      	cmp	r0, r4
 800831a:	d10b      	bne.n	8008334 <_free_r+0x74>
 800831c:	6820      	ldr	r0, [r4, #0]
 800831e:	4401      	add	r1, r0
 8008320:	1858      	adds	r0, r3, r1
 8008322:	4282      	cmp	r2, r0
 8008324:	6019      	str	r1, [r3, #0]
 8008326:	d1dd      	bne.n	80082e4 <_free_r+0x24>
 8008328:	6810      	ldr	r0, [r2, #0]
 800832a:	6852      	ldr	r2, [r2, #4]
 800832c:	605a      	str	r2, [r3, #4]
 800832e:	4401      	add	r1, r0
 8008330:	6019      	str	r1, [r3, #0]
 8008332:	e7d7      	b.n	80082e4 <_free_r+0x24>
 8008334:	d902      	bls.n	800833c <_free_r+0x7c>
 8008336:	230c      	movs	r3, #12
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	e7d3      	b.n	80082e4 <_free_r+0x24>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	1821      	adds	r1, r4, r0
 8008340:	428a      	cmp	r2, r1
 8008342:	bf04      	itt	eq
 8008344:	6811      	ldreq	r1, [r2, #0]
 8008346:	6852      	ldreq	r2, [r2, #4]
 8008348:	6062      	str	r2, [r4, #4]
 800834a:	bf04      	itt	eq
 800834c:	1809      	addeq	r1, r1, r0
 800834e:	6021      	streq	r1, [r4, #0]
 8008350:	605c      	str	r4, [r3, #4]
 8008352:	e7c7      	b.n	80082e4 <_free_r+0x24>
 8008354:	bd38      	pop	{r3, r4, r5, pc}
 8008356:	bf00      	nop
 8008358:	200000a0 	.word	0x200000a0

0800835c <_read_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4c07      	ldr	r4, [pc, #28]	; (800837c <_read_r+0x20>)
 8008360:	4605      	mov	r5, r0
 8008362:	4608      	mov	r0, r1
 8008364:	4611      	mov	r1, r2
 8008366:	2200      	movs	r2, #0
 8008368:	6022      	str	r2, [r4, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	f7f8 fd14 	bl	8000d98 <_read>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_read_r+0x1e>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	b103      	cbz	r3, 800837a <_read_r+0x1e>
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20002224 	.word	0x20002224

08008380 <_fstat_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4c07      	ldr	r4, [pc, #28]	; (80083a0 <_fstat_r+0x20>)
 8008384:	2300      	movs	r3, #0
 8008386:	4605      	mov	r5, r0
 8008388:	4608      	mov	r0, r1
 800838a:	4611      	mov	r1, r2
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	f7f8 fd48 	bl	8000e22 <_fstat>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d102      	bne.n	800839c <_fstat_r+0x1c>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	b103      	cbz	r3, 800839c <_fstat_r+0x1c>
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	bd38      	pop	{r3, r4, r5, pc}
 800839e:	bf00      	nop
 80083a0:	20002224 	.word	0x20002224

080083a4 <_isatty_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4c06      	ldr	r4, [pc, #24]	; (80083c0 <_isatty_r+0x1c>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	4605      	mov	r5, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	f7f8 fd47 	bl	8000e42 <_isatty>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <_isatty_r+0x1a>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	b103      	cbz	r3, 80083be <_isatty_r+0x1a>
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	20002224 	.word	0x20002224

080083c4 <_init>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr

080083d0 <_fini>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr
