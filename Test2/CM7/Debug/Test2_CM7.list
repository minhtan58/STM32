
Test2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052bc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800558c  0800558c  0001558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  20000000  0800559c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  20000038  080055d4  00020038  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000210  080055d4  00020210  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   000161a9  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002573  00000000  00000000  0003620f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b98  00000000  00000000  00038788  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ab0  00000000  00000000  00039320  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003dacc  00000000  00000000  00039dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b3c2  00000000  00000000  0007789c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00191c3a  00000000  00000000  00082c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00214898  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f38  00000000  00000000  00214914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000038 	.word	0x20000038
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800553c 	.word	0x0800553c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000003c 	.word	0x2000003c
 80002d4:	0800553c 	.word	0x0800553c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	2b07      	cmp	r3, #7
 800063c:	d907      	bls.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 8000712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000716:	607b      	str	r3, [r7, #4]
    while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000718:	bf00      	nop
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <main+0xb4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000722:	2b00      	cmp	r3, #0
 8000724:	d004      	beq.n	8000730 <main+0x24>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	dcf4      	bgt.n	800071a <main+0xe>
    if ( timeout < 0 )
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	da01      	bge.n	800073a <main+0x2e>
    {
     Error_Handler();
 8000736:	f000 f9a5 	bl	8000a84 <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800073a:	f000 fac5 	bl	8000cc8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800073e:	f000 f849 	bl	80007d4 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <main+0xb4>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <main+0xb4>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <main+0xb4>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f001 f853 	bl	800180c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f001 f869 	bl	8001840 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <main+0xb4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x80>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6a>
	if ( timeout < 0 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8a>
	{
	Error_Handler();
 8000792:	f000 f977 	bl	8000a84 <Error_Handler>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000796:	f000 f94b 	bl	8000a30 <MX_GPIO_Init>
   //MX_DMA_Init();
   MX_UART8_Init();
 800079a:	f000 f8b1 	bl	8000900 <MX_UART8_Init>
   MX_USART1_UART_Init();
 800079e:	f000 f8fb 	bl	8000998 <MX_USART1_UART_Init>
   /* USER CODE BEGIN 2 */

   /* USER CODE END 2 */
   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   HAL_UART_Transmit(&huart1, (uint8_t*)&HeaderUART1_TxBuffer, countof(HeaderUART1_TxBuffer)-1, HAL_TIMEOUT_VALUE);
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2212      	movs	r2, #18
 80007a8:	4906      	ldr	r1, [pc, #24]	; (80007c4 <main+0xb8>)
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <main+0xbc>)
 80007ac:	f003 fbc6 	bl	8003f3c <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart8, (uint8_t*)&HeaderUART8_TxBuffer, countof(HeaderUART8_TxBuffer)-1, HAL_TIMEOUT_VALUE);
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	2212      	movs	r2, #18
 80007b6:	4905      	ldr	r1, [pc, #20]	; (80007cc <main+0xc0>)
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <main+0xc4>)
 80007ba:	f003 fbbf 	bl	8003f3c <HAL_UART_Transmit>

//   HAL_UART_Receive(&huart1, (uint8_t*)&HeaderUART1_RxBuffer, 1, HAL_TIMEOUT_VALUE);
//   HAL_UART_Receive(&huart8, (uint8_t*)&HeaderUART8_RxBuffer, 1, HAL_TIMEOUT_VALUE);

   while (1)
 80007be:	e7fe      	b.n	80007be <main+0xb2>
 80007c0:	58024400 	.word	0x58024400
 80007c4:	20000008 	.word	0x20000008
 80007c8:	200000f4 	.word	0x200000f4
 80007cc:	2000001c 	.word	0x2000001c
 80007d0:	20000180 	.word	0x20000180

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b0cc      	sub	sp, #304	; 0x130
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007de:	224c      	movs	r2, #76	; 0x4c
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fea2 	bl	800552c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007ec:	2220      	movs	r2, #32
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fe9b 	bl	800552c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	23c0      	movs	r3, #192	; 0xc0
 80007fc:	461a      	mov	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f004 fe94 	bl	800552c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f001 f82f 	bl	8001868 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <SystemClock_Config+0x124>)
 8000812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000814:	4a38      	ldr	r2, [pc, #224]	; (80008f8 <SystemClock_Config+0x124>)
 8000816:	f023 0301 	bic.w	r3, r3, #1
 800081a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800081c:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <SystemClock_Config+0x124>)
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	f003 0201 	and.w	r2, r3, #1
 8000824:	463b      	mov	r3, r7
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	4b34      	ldr	r3, [pc, #208]	; (80008fc <SystemClock_Config+0x128>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000830:	4a32      	ldr	r2, [pc, #200]	; (80008fc <SystemClock_Config+0x128>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b30      	ldr	r3, [pc, #192]	; (80008fc <SystemClock_Config+0x128>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000840:	463b      	mov	r3, r7
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	463b      	mov	r3, r7
 8000846:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000848:	bf00      	nop
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <SystemClock_Config+0x128>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000856:	d1f8      	bne.n	800084a <SystemClock_Config+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	2302      	movs	r3, #2
 800085a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800085e:	2301      	movs	r3, #1
 8000860:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000874:	4618      	mov	r0, r3
 8000876:	f001 f851 	bl	800191c <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000880:	f000 f900 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	233f      	movs	r3, #63	; 0x3f
 8000886:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fc3e 	bl	800213c <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80008c6:	f000 f8dd 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART8;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2203      	movs	r2, #3
 80008ce:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	67da      	str	r2, [r3, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 ffb0 	bl	8002844 <HAL_RCCEx_PeriphCLKConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80008ea:	f000 f8cb 	bl	8000a84 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	58000400 	.word	0x58000400
 80008fc:	58024800 	.word	0x58024800

08000900 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_UART8_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	; (8000994 <MX_UART8_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_UART8_Init+0x90>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_UART8_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_UART8_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_UART8_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_UART8_Init+0x90>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_UART8_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_UART8_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_UART8_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_UART8_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_UART8_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <MX_UART8_Init+0x90>)
 800094a:	f003 faa7 	bl	8003e9c <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 f896 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	480d      	ldr	r0, [pc, #52]	; (8000990 <MX_UART8_Init+0x90>)
 800095c:	f004 fcdd 	bl	800531a <HAL_UARTEx_SetTxFifoThreshold>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000966:	f000 f88d 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <MX_UART8_Init+0x90>)
 800096e:	f004 fd12 	bl	8005396 <HAL_UARTEx_SetRxFifoThreshold>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000978:	f000 f884 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_UART8_Init+0x90>)
 800097e:	f004 fc93 	bl	80052a8 <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 f87c 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000180 	.word	0x20000180
 8000994:	40007c00 	.word	0x40007c00

08000998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <MX_USART1_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009e2:	f003 fa5b 	bl	8003e9c <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f84a 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 80009f4:	f004 fc91 	bl	800531a <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f841 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 8000a06:	f004 fcc6 	bl	8005396 <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f838 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_USART1_UART_Init+0x90>)
 8000a16:	f004 fc47 	bl	80052a8 <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f830 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000f4 	.word	0x200000f4
 8000a2c:	40011000 	.word	0x40011000

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_GPIO_Init+0x50>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <MX_GPIO_Init+0x50>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_GPIO_Init+0x50>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_GPIO_Init+0x50>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <MX_GPIO_Init+0x50>)
 8000a5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_GPIO_Init+0x50>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	58024400 	.word	0x58024400

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_MspInit+0x30>)
 8000a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa0:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x30>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x30>)
 8000aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	58024400 	.word	0x58024400

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3d      	ldr	r2, [pc, #244]	; (8000bdc <HAL_UART_MspInit+0x114>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d137      	bne.n	8000b5a <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000aea:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000af0:	4a3b      	ldr	r2, [pc, #236]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	4a34      	ldr	r2, [pc, #208]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b18:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4828      	ldr	r0, [pc, #160]	; (8000be4 <HAL_UART_MspInit+0x11c>)
 8000b44:	f000 fcb2 	bl	80014ac <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2053      	movs	r0, #83	; 0x53
 8000b4e:	f000 fa34 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000b52:	2053      	movs	r0, #83	; 0x53
 8000b54:	f000 fa4b 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b58:	e03b      	b.n	8000bd2 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART1)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <HAL_UART_MspInit+0x120>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d136      	bne.n	8000bd2 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b6a:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_UART_MspInit+0x118>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ba0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <HAL_UART_MspInit+0x124>)
 8000bbe:	f000 fc75 	bl	80014ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2025      	movs	r0, #37	; 0x25
 8000bc8:	f000 f9f7 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bcc:	2025      	movs	r0, #37	; 0x25
 8000bce:	f000 fa0e 	bl	8000fee <HAL_NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3730      	adds	r7, #48	; 0x30
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40007c00 	.word	0x40007c00
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58022400 	.word	0x58022400
 8000be8:	40011000 	.word	0x40011000
 8000bec:	58020000 	.word	0x58020000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 f8b2 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <USART1_IRQHandler+0x10>)
 8000c52:	f003 fa09 	bl	8004068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000f4 	.word	0x200000f4

08000c60 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <UART8_IRQHandler+0x10>)
 8000c66:	f003 f9ff 	bl	8004068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000180 	.word	0x20000180

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c78:	f7ff fcae 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c7e:	e003      	b.n	8000c88 <LoopCopyDataInit>

08000c80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000c82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c86:	3104      	adds	r1, #4

08000c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c88:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000c8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c90:	d3f6      	bcc.n	8000c80 <CopyDataInit>
  ldr  r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000c94:	e002      	b.n	8000c9c <LoopFillZerobss>

08000c96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c98:	f842 3b04 	str.w	r3, [r2], #4

08000c9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000c9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ca0:	d3f9      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f004 fc1f 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fd31 	bl	800070c <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cb0:	0800559c 	.word	0x0800559c
  ldr  r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cb8:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8000cbc:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8000cc0:	20000210 	.word	0x20000210

08000cc4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC3_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f000 f968 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cd4:	f001 fbe8 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_Init+0x68>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <HAL_Init+0x6c>)
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	f003 031f 	and.w	r3, r3, #31
 8000cec:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_Init+0x68>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_Init+0x6c>)
 8000cfc:	5cd3      	ldrb	r3, [r2, r3]
 8000cfe:	f003 031f 	and.w	r3, r3, #31
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	fa22 f303 	lsr.w	r3, r2, r3
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <HAL_Init+0x70>)
 8000d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_Init+0x74>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f814 	bl	8000d40 <HAL_InitTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e002      	b.n	8000d28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f7ff feb7 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	58024400 	.word	0x58024400
 8000d34:	08005564 	.word	0x08005564
 8000d38:	20000004 	.word	0x20000004
 8000d3c:	20000000 	.word	0x20000000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_InitTick+0x60>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e021      	b.n	8000d98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <HAL_InitTick+0x64>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_InitTick+0x60>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f94d 	bl	800100a <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f917 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x68>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000034 	.word	0x20000034
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000030 	.word	0x20000030

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000034 	.word	0x20000034
 8000dd0:	2000020c 	.word	0x2000020c

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	2000020c 	.word	0x2000020c

08000dec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetREVID+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	0c1b      	lsrs	r3, r3, #16
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	5c001000 	.word	0x5c001000

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00
 8000e48:	05fa0000 	.word	0x05fa0000

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff40 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff90 	bl	8000ef8 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5f 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff33 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa4 	bl	8000f60 <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e205      	b.n	8001442 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d004      	beq.n	800104c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e1fa      	b.n	8001442 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a8c      	ldr	r2, [pc, #560]	; (8001284 <HAL_DMA_Abort_IT+0x260>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d04a      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a8b      	ldr	r2, [pc, #556]	; (8001288 <HAL_DMA_Abort_IT+0x264>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d045      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a89      	ldr	r2, [pc, #548]	; (800128c <HAL_DMA_Abort_IT+0x268>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d040      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a88      	ldr	r2, [pc, #544]	; (8001290 <HAL_DMA_Abort_IT+0x26c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d03b      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a86      	ldr	r2, [pc, #536]	; (8001294 <HAL_DMA_Abort_IT+0x270>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d036      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a85      	ldr	r2, [pc, #532]	; (8001298 <HAL_DMA_Abort_IT+0x274>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d031      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a83      	ldr	r2, [pc, #524]	; (800129c <HAL_DMA_Abort_IT+0x278>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d02c      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a82      	ldr	r2, [pc, #520]	; (80012a0 <HAL_DMA_Abort_IT+0x27c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d027      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a80      	ldr	r2, [pc, #512]	; (80012a4 <HAL_DMA_Abort_IT+0x280>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d022      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a7f      	ldr	r2, [pc, #508]	; (80012a8 <HAL_DMA_Abort_IT+0x284>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d01d      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a7d      	ldr	r2, [pc, #500]	; (80012ac <HAL_DMA_Abort_IT+0x288>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d018      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7c      	ldr	r2, [pc, #496]	; (80012b0 <HAL_DMA_Abort_IT+0x28c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d013      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a7a      	ldr	r2, [pc, #488]	; (80012b4 <HAL_DMA_Abort_IT+0x290>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00e      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a79      	ldr	r2, [pc, #484]	; (80012b8 <HAL_DMA_Abort_IT+0x294>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d009      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a77      	ldr	r2, [pc, #476]	; (80012bc <HAL_DMA_Abort_IT+0x298>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d004      	beq.n	80010ec <HAL_DMA_Abort_IT+0xc8>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a76      	ldr	r2, [pc, #472]	; (80012c0 <HAL_DMA_Abort_IT+0x29c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d101      	bne.n	80010f0 <HAL_DMA_Abort_IT+0xcc>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <HAL_DMA_Abort_IT+0xce>
 80010f0:	2300      	movs	r3, #0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d065      	beq.n	80011c2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2204      	movs	r2, #4
 80010fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a60      	ldr	r2, [pc, #384]	; (8001284 <HAL_DMA_Abort_IT+0x260>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d04a      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a5e      	ldr	r2, [pc, #376]	; (8001288 <HAL_DMA_Abort_IT+0x264>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d045      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a5d      	ldr	r2, [pc, #372]	; (800128c <HAL_DMA_Abort_IT+0x268>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d040      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a5b      	ldr	r2, [pc, #364]	; (8001290 <HAL_DMA_Abort_IT+0x26c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d03b      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a5a      	ldr	r2, [pc, #360]	; (8001294 <HAL_DMA_Abort_IT+0x270>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d036      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a58      	ldr	r2, [pc, #352]	; (8001298 <HAL_DMA_Abort_IT+0x274>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d031      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a57      	ldr	r2, [pc, #348]	; (800129c <HAL_DMA_Abort_IT+0x278>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d02c      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a55      	ldr	r2, [pc, #340]	; (80012a0 <HAL_DMA_Abort_IT+0x27c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d027      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a54      	ldr	r2, [pc, #336]	; (80012a4 <HAL_DMA_Abort_IT+0x280>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d022      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_DMA_Abort_IT+0x284>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01d      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a51      	ldr	r2, [pc, #324]	; (80012ac <HAL_DMA_Abort_IT+0x288>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d018      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_DMA_Abort_IT+0x28c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <HAL_DMA_Abort_IT+0x290>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d00e      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a4c      	ldr	r2, [pc, #304]	; (80012b8 <HAL_DMA_Abort_IT+0x294>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d009      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <HAL_DMA_Abort_IT+0x298>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d004      	beq.n	800119e <HAL_DMA_Abort_IT+0x17a>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a49      	ldr	r2, [pc, #292]	; (80012c0 <HAL_DMA_Abort_IT+0x29c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d108      	bne.n	80011b0 <HAL_DMA_Abort_IT+0x18c>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e147      	b.n	8001440 <HAL_DMA_Abort_IT+0x41c>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e13e      	b.n	8001440 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 020e 	bic.w	r2, r2, #14
 80011d0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a2b      	ldr	r2, [pc, #172]	; (8001284 <HAL_DMA_Abort_IT+0x260>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d04a      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a29      	ldr	r2, [pc, #164]	; (8001288 <HAL_DMA_Abort_IT+0x264>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d045      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a28      	ldr	r2, [pc, #160]	; (800128c <HAL_DMA_Abort_IT+0x268>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d040      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a26      	ldr	r2, [pc, #152]	; (8001290 <HAL_DMA_Abort_IT+0x26c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d03b      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a25      	ldr	r2, [pc, #148]	; (8001294 <HAL_DMA_Abort_IT+0x270>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d036      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <HAL_DMA_Abort_IT+0x274>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d031      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a22      	ldr	r2, [pc, #136]	; (800129c <HAL_DMA_Abort_IT+0x278>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d02c      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <HAL_DMA_Abort_IT+0x27c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d027      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_DMA_Abort_IT+0x280>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d022      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_DMA_Abort_IT+0x284>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01d      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_DMA_Abort_IT+0x288>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d018      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_DMA_Abort_IT+0x28c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <HAL_DMA_Abort_IT+0x290>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d00e      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <HAL_DMA_Abort_IT+0x294>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d009      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <HAL_DMA_Abort_IT+0x298>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d004      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24e>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <HAL_DMA_Abort_IT+0x29c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d128      	bne.n	80012c4 <HAL_DMA_Abort_IT+0x2a0>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0201 	bic.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e027      	b.n	80012d4 <HAL_DMA_Abort_IT+0x2b0>
 8001284:	40020010 	.word	0x40020010
 8001288:	40020028 	.word	0x40020028
 800128c:	40020040 	.word	0x40020040
 8001290:	40020058 	.word	0x40020058
 8001294:	40020070 	.word	0x40020070
 8001298:	40020088 	.word	0x40020088
 800129c:	400200a0 	.word	0x400200a0
 80012a0:	400200b8 	.word	0x400200b8
 80012a4:	40020410 	.word	0x40020410
 80012a8:	40020428 	.word	0x40020428
 80012ac:	40020440 	.word	0x40020440
 80012b0:	40020458 	.word	0x40020458
 80012b4:	40020470 	.word	0x40020470
 80012b8:	40020488 	.word	0x40020488
 80012bc:	400204a0 	.word	0x400204a0
 80012c0:	400204b8 	.word	0x400204b8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a5c      	ldr	r2, [pc, #368]	; (800144c <HAL_DMA_Abort_IT+0x428>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d072      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a5b      	ldr	r2, [pc, #364]	; (8001450 <HAL_DMA_Abort_IT+0x42c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d06d      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a59      	ldr	r2, [pc, #356]	; (8001454 <HAL_DMA_Abort_IT+0x430>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d068      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_DMA_Abort_IT+0x434>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d063      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a56      	ldr	r2, [pc, #344]	; (800145c <HAL_DMA_Abort_IT+0x438>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d05e      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a55      	ldr	r2, [pc, #340]	; (8001460 <HAL_DMA_Abort_IT+0x43c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d059      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_DMA_Abort_IT+0x440>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d054      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_DMA_Abort_IT+0x444>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d04f      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_DMA_Abort_IT+0x448>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d04a      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a4f      	ldr	r2, [pc, #316]	; (8001470 <HAL_DMA_Abort_IT+0x44c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d045      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <HAL_DMA_Abort_IT+0x450>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d040      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a4c      	ldr	r2, [pc, #304]	; (8001478 <HAL_DMA_Abort_IT+0x454>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d03b      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a4a      	ldr	r2, [pc, #296]	; (800147c <HAL_DMA_Abort_IT+0x458>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d036      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a49      	ldr	r2, [pc, #292]	; (8001480 <HAL_DMA_Abort_IT+0x45c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d031      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_DMA_Abort_IT+0x460>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02c      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a46      	ldr	r2, [pc, #280]	; (8001488 <HAL_DMA_Abort_IT+0x464>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d027      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a44      	ldr	r2, [pc, #272]	; (800148c <HAL_DMA_Abort_IT+0x468>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d022      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_DMA_Abort_IT+0x46c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d01d      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a41      	ldr	r2, [pc, #260]	; (8001494 <HAL_DMA_Abort_IT+0x470>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d018      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <HAL_DMA_Abort_IT+0x474>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d013      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a3e      	ldr	r2, [pc, #248]	; (800149c <HAL_DMA_Abort_IT+0x478>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00e      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a3d      	ldr	r2, [pc, #244]	; (80014a0 <HAL_DMA_Abort_IT+0x47c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d009      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <HAL_DMA_Abort_IT+0x480>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d004      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x3a0>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a3a      	ldr	r2, [pc, #232]	; (80014a8 <HAL_DMA_Abort_IT+0x484>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_DMA_Abort_IT+0x3a4>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <HAL_DMA_Abort_IT+0x3a6>
 80013c8:	2300      	movs	r3, #0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d028      	beq.n	8001420 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2201      	movs	r2, #1
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80013fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001414:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800141e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40020010 	.word	0x40020010
 8001450:	40020028 	.word	0x40020028
 8001454:	40020040 	.word	0x40020040
 8001458:	40020058 	.word	0x40020058
 800145c:	40020070 	.word	0x40020070
 8001460:	40020088 	.word	0x40020088
 8001464:	400200a0 	.word	0x400200a0
 8001468:	400200b8 	.word	0x400200b8
 800146c:	40020410 	.word	0x40020410
 8001470:	40020428 	.word	0x40020428
 8001474:	40020440 	.word	0x40020440
 8001478:	40020458 	.word	0x40020458
 800147c:	40020470 	.word	0x40020470
 8001480:	40020488 	.word	0x40020488
 8001484:	400204a0 	.word	0x400204a0
 8001488:	400204b8 	.word	0x400204b8
 800148c:	58025408 	.word	0x58025408
 8001490:	5802541c 	.word	0x5802541c
 8001494:	58025430 	.word	0x58025430
 8001498:	58025444 	.word	0x58025444
 800149c:	58025458 	.word	0x58025458
 80014a0:	5802546c 	.word	0x5802546c
 80014a4:	58025480 	.word	0x58025480
 80014a8:	58025494 	.word	0x58025494

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014ba:	4b89      	ldr	r3, [pc, #548]	; (80016e0 <HAL_GPIO_Init+0x234>)
 80014bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014be:	e194      	b.n	80017ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8186 	beq.w	80017e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d00b      	beq.n	80014f8 <HAL_GPIO_Init+0x4c>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d007      	beq.n	80014f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ec:	2b11      	cmp	r3, #17
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b12      	cmp	r3, #18
 80014f6:	d130      	bne.n	800155a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152e:	2201      	movs	r2, #1
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 0201 	and.w	r2, r3, #1
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0xee>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b12      	cmp	r3, #18
 8001598:	d123      	bne.n	80015e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	69b9      	ldr	r1, [r7, #24]
 80015de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0203 	and.w	r2, r3, #3
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80e0 	beq.w	80017e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_GPIO_Init+0x238>)
 8001626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800162a:	4a2e      	ldr	r2, [pc, #184]	; (80016e4 <HAL_GPIO_Init+0x238>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_GPIO_Init+0x238>)
 8001636:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001642:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <HAL_GPIO_Init+0x23c>)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a20      	ldr	r2, [pc, #128]	; (80016ec <HAL_GPIO_Init+0x240>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d052      	beq.n	8001714 <HAL_GPIO_Init+0x268>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <HAL_GPIO_Init+0x244>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d031      	beq.n	80016da <HAL_GPIO_Init+0x22e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <HAL_GPIO_Init+0x248>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d02b      	beq.n	80016d6 <HAL_GPIO_Init+0x22a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <HAL_GPIO_Init+0x24c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d025      	beq.n	80016d2 <HAL_GPIO_Init+0x226>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <HAL_GPIO_Init+0x250>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01f      	beq.n	80016ce <HAL_GPIO_Init+0x222>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <HAL_GPIO_Init+0x254>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x21e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <HAL_GPIO_Init+0x258>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x21a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_GPIO_Init+0x25c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x216>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <HAL_GPIO_Init+0x260>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x212>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_GPIO_Init+0x264>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x20e>
 80016b6:	2309      	movs	r3, #9
 80016b8:	e02d      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016ba:	230a      	movs	r3, #10
 80016bc:	e02b      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016be:	2308      	movs	r3, #8
 80016c0:	e029      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016c2:	2307      	movs	r3, #7
 80016c4:	e027      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e025      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016ca:	2305      	movs	r3, #5
 80016cc:	e023      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e021      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e01f      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e01d      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016da:	2301      	movs	r3, #1
 80016dc:	e01b      	b.n	8001716 <HAL_GPIO_Init+0x26a>
 80016de:	bf00      	nop
 80016e0:	58000080 	.word	0x58000080
 80016e4:	58024400 	.word	0x58024400
 80016e8:	58000400 	.word	0x58000400
 80016ec:	58020000 	.word	0x58020000
 80016f0:	58020400 	.word	0x58020400
 80016f4:	58020800 	.word	0x58020800
 80016f8:	58020c00 	.word	0x58020c00
 80016fc:	58021000 	.word	0x58021000
 8001700:	58021400 	.word	0x58021400
 8001704:	58021800 	.word	0x58021800
 8001708:	58021c00 	.word	0x58021c00
 800170c:	58022000 	.word	0x58022000
 8001710:	58022400 	.word	0x58022400
 8001714:	2300      	movs	r3, #0
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	f002 0203 	and.w	r2, r2, #3
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	4093      	lsls	r3, r2
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001726:	4938      	ldr	r1, [pc, #224]	; (8001808 <HAL_GPIO_Init+0x35c>)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	3301      	adds	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f47f ae63 	bne.w	80014c0 <HAL_GPIO_Init+0x14>
  }
}
 80017fa:	bf00      	nop
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	58000400 	.word	0x58000400

0800180c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_HSEM_FastTake+0x2c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3320      	adds	r3, #32
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_HSEM_FastTake+0x30>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e000      	b.n	800182a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	58026400 	.word	0x58026400
 800183c:	80000300 	.word	0x80000300

08001840 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800184a:	4906      	ldr	r1, [pc, #24]	; (8001864 <HAL_HSEM_Release+0x24>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	58026400 	.word	0x58026400

08001868 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	2b06      	cmp	r3, #6
 800187a:	d00a      	beq.n	8001892 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e040      	b.n	8001910 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e03e      	b.n	8001910 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800189a:	491f      	ldr	r1, [pc, #124]	; (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018a2:	f7ff fa97 	bl	8000dd4 <HAL_GetTick>
 80018a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018a8:	e009      	b.n	80018be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018aa:	f7ff fa93 	bl	8000dd4 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b8:	d901      	bls.n	80018be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e028      	b.n	8001910 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ca:	d1ee      	bne.n	80018aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b1e      	cmp	r3, #30
 80018d0:	d008      	beq.n	80018e4 <HAL_PWREx_ConfigSupply+0x7c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b2e      	cmp	r3, #46	; 0x2e
 80018d6:	d005      	beq.n	80018e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b1d      	cmp	r3, #29
 80018dc:	d002      	beq.n	80018e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b2d      	cmp	r3, #45	; 0x2d
 80018e2:	d114      	bne.n	800190e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018e4:	f7ff fa76 	bl	8000dd4 <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018ea:	e009      	b.n	8001900 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018ec:	f7ff fa72 	bl	8000dd4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018fa:	d901      	bls.n	8001900 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e007      	b.n	8001910 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_PWREx_ConfigSupply+0xb0>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190c:	d1ee      	bne.n	80018ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58024800 	.word	0x58024800

0800191c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e3ff      	b.n	800212e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8087 	beq.w	8001a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193c:	4b99      	ldr	r3, [pc, #612]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001946:	4b97      	ldr	r3, [pc, #604]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194e:	2b10      	cmp	r3, #16
 8001950:	d007      	beq.n	8001962 <HAL_RCC_OscConfig+0x46>
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	2b18      	cmp	r3, #24
 8001956:	d110      	bne.n	800197a <HAL_RCC_OscConfig+0x5e>
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d10b      	bne.n	800197a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001962:	4b90      	ldr	r3, [pc, #576]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d06c      	beq.n	8001a48 <HAL_RCC_OscConfig+0x12c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d168      	bne.n	8001a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e3d9      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x76>
 8001984:	4b87      	ldr	r3, [pc, #540]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a86      	ldr	r2, [pc, #536]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 800198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e02e      	b.n	80019f0 <HAL_RCC_OscConfig+0xd4>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x98>
 800199a:	4b82      	ldr	r3, [pc, #520]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a81      	ldr	r2, [pc, #516]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b7f      	ldr	r3, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7e      	ldr	r2, [pc, #504]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e01d      	b.n	80019f0 <HAL_RCC_OscConfig+0xd4>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0xbc>
 80019be:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a78      	ldr	r2, [pc, #480]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a75      	ldr	r2, [pc, #468]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e00b      	b.n	80019f0 <HAL_RCC_OscConfig+0xd4>
 80019d8:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a71      	ldr	r2, [pc, #452]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f9ec 	bl	8000dd4 <HAL_GetTick>
 80019fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff f9e8 	bl	8000dd4 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e38d      	b.n	800212e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a12:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0xe4>
 8001a1e:	e014      	b.n	8001a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f9d8 	bl	8000dd4 <HAL_GetTick>
 8001a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff f9d4 	bl	8000dd4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e379      	b.n	800212e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x10c>
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80ae 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a58:	4b52      	ldr	r3, [pc, #328]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_RCC_OscConfig+0x162>
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	2b18      	cmp	r3, #24
 8001a72:	d13a      	bne.n	8001aea <HAL_RCC_OscConfig+0x1ce>
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d135      	bne.n	8001aea <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x17a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e34b      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	f7ff f9a9 	bl	8000dec <HAL_GetREVID>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d817      	bhi.n	8001ad4 <HAL_RCC_OscConfig+0x1b8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b40      	cmp	r3, #64	; 0x40
 8001aaa:	d108      	bne.n	8001abe <HAL_RCC_OscConfig+0x1a2>
 8001aac:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ab4:	4a3b      	ldr	r2, [pc, #236]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001abc:	e07a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	031b      	lsls	r3, r3, #12
 8001acc:	4935      	ldr	r1, [pc, #212]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad2:	e06f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	4930      	ldr	r1, [pc, #192]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae8:	e064      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d045      	beq.n	8001b7e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001af2:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 0219 	bic.w	r2, r3, #25
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4929      	ldr	r1, [pc, #164]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f966 	bl	8000dd4 <HAL_GetTick>
 8001b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f962 	bl	8000dd4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e307      	b.n	800212e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	f7ff f95f 	bl	8000dec <HAL_GetREVID>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d817      	bhi.n	8001b68 <HAL_RCC_OscConfig+0x24c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b40      	cmp	r3, #64	; 0x40
 8001b3e:	d108      	bne.n	8001b52 <HAL_RCC_OscConfig+0x236>
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4e:	6053      	str	r3, [r2, #4]
 8001b50:	e030      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	031b      	lsls	r3, r3, #12
 8001b60:	4910      	ldr	r1, [pc, #64]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
 8001b66:	e025      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	490b      	ldr	r1, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
 8001b7c:	e01a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_RCC_OscConfig+0x288>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8a:	f7ff f923 	bl	8000dd4 <HAL_GetTick>
 8001b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b92:	f7ff f91f 	bl	8000dd4 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d903      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e2c4      	b.n	800212e <HAL_RCC_OscConfig+0x812>
 8001ba4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ba8:	4ba4      	ldr	r3, [pc, #656]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ee      	bne.n	8001b92 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a9 	beq.w	8001d14 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bc2:	4b9e      	ldr	r3, [pc, #632]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bcc:	4b9b      	ldr	r3, [pc, #620]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d007      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2cc>
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b18      	cmp	r3, #24
 8001bdc:	d13a      	bne.n	8001c54 <HAL_RCC_OscConfig+0x338>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d135      	bne.n	8001c54 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001be8:	4b94      	ldr	r3, [pc, #592]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2e4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b80      	cmp	r3, #128	; 0x80
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e296      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c00:	f7ff f8f4 	bl	8000dec <HAL_GetREVID>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d817      	bhi.n	8001c3e <HAL_RCC_OscConfig+0x322>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d108      	bne.n	8001c28 <HAL_RCC_OscConfig+0x30c>
 8001c16:	4b89      	ldr	r3, [pc, #548]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c1e:	4a87      	ldr	r2, [pc, #540]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c24:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c26:	e075      	b.n	8001d14 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c28:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	069b      	lsls	r3, r3, #26
 8001c36:	4981      	ldr	r1, [pc, #516]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c3c:	e06a      	b.n	8001d14 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	061b      	lsls	r3, r3, #24
 8001c4c:	497b      	ldr	r1, [pc, #492]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c52:	e05f      	b.n	8001d14 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d042      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c5c:	4b77      	ldr	r3, [pc, #476]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a76      	ldr	r2, [pc, #472]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f8b4 	bl	8000dd4 <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c70:	f7ff f8b0 	bl	8000dd4 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e255      	b.n	800212e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c82:	4b6e      	ldr	r3, [pc, #440]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c8e:	f7ff f8ad 	bl	8000dec <HAL_GetREVID>
 8001c92:	4602      	mov	r2, r0
 8001c94:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d817      	bhi.n	8001ccc <HAL_RCC_OscConfig+0x3b0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d108      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x39a>
 8001ca4:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cac:	4a63      	ldr	r2, [pc, #396]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cb2:	6053      	str	r3, [r2, #4]
 8001cb4:	e02e      	b.n	8001d14 <HAL_RCC_OscConfig+0x3f8>
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	069b      	lsls	r3, r3, #26
 8001cc4:	495d      	ldr	r1, [pc, #372]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
 8001cca:	e023      	b.n	8001d14 <HAL_RCC_OscConfig+0x3f8>
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	4958      	ldr	r1, [pc, #352]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
 8001ce0:	e018      	b.n	8001d14 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ce2:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a55      	ldr	r2, [pc, #340]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff f871 	bl	8000dd4 <HAL_GetTick>
 8001cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f86d 	bl	8000dd4 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e212      	b.n	800212e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d08:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d036      	beq.n	8001d8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d019      	beq.n	8001d5c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d28:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2c:	4a43      	ldr	r2, [pc, #268]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f84e 	bl	8000dd4 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff f84a 	bl	8000dd4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1ef      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x420>
 8001d5a:	e018      	b.n	8001d8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5c:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d60:	4a36      	ldr	r2, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff f834 	bl	8000dd4 <HAL_GetTick>
 8001d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff f830 	bl	8000dd4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1d5      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d82:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d036      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d019      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f811 	bl	8000dd4 <HAL_GetTick>
 8001db2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001db6:	f7ff f80d 	bl	8000dd4 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e1b2      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x49a>
 8001dd4:	e018      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001de0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001de2:	f7fe fff7 	bl	8000dd4 <HAL_GetTick>
 8001de6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001dea:	f7fe fff3 	bl	8000dd4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e198      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_RCC_OscConfig+0x520>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8085 	beq.w	8001f20 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x524>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <HAL_RCC_OscConfig+0x524>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e22:	f7fe ffd7 	bl	8000dd4 <HAL_GetTick>
 8001e26:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e28:	e00c      	b.n	8001e44 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7fe ffd3 	bl	8000dd4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b64      	cmp	r3, #100	; 0x64
 8001e36:	d905      	bls.n	8001e44 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e178      	b.n	800212e <HAL_RCC_OscConfig+0x812>
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e44:	4b96      	ldr	r3, [pc, #600]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ec      	beq.n	8001e2a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x54a>
 8001e58:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a91      	ldr	r2, [pc, #580]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
 8001e64:	e02d      	b.n	8001ec2 <HAL_RCC_OscConfig+0x5a6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x56c>
 8001e6e:	4b8d      	ldr	r3, [pc, #564]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a8c      	ldr	r2, [pc, #560]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	4b8a      	ldr	r3, [pc, #552]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a89      	ldr	r2, [pc, #548]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	e01c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x5a6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d10c      	bne.n	8001eaa <HAL_RCC_OscConfig+0x58e>
 8001e90:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	4a83      	ldr	r2, [pc, #524]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9c:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a80      	ldr	r2, [pc, #512]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	e00b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x5a6>
 8001eaa:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	4a7d      	ldr	r2, [pc, #500]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a7a      	ldr	r2, [pc, #488]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d015      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7fe ff83 	bl	8000dd4 <HAL_GetTick>
 8001ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe ff7f 	bl	8000dd4 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e122      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee8:	4b6e      	ldr	r3, [pc, #440]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ee      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x5b6>
 8001ef4:	e014      	b.n	8001f20 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7fe ff6d 	bl	8000dd4 <HAL_GetTick>
 8001efa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe ff69 	bl	8000dd4 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e10c      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f14:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ee      	bne.n	8001efe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8101 	beq.w	800212c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f2a:	4b5e      	ldr	r3, [pc, #376]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f32:	2b18      	cmp	r3, #24
 8001f34:	f000 80bc 	beq.w	80020b0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	f040 8095 	bne.w	800206c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a57      	ldr	r2, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001f48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7fe ff41 	bl	8000dd4 <HAL_GetTick>
 8001f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f56:	f7fe ff3d 	bl	8000dd4 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0e2      	b.n	800212e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f68:	4b4e      	ldr	r3, [pc, #312]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f0      	bne.n	8001f56 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x78c>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	430a      	orrs	r2, r1
 8001f88:	4946      	ldr	r1, [pc, #280]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	628b      	str	r3, [r1, #40]	; 0x28
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fbe:	4939      	ldr	r1, [pc, #228]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	4a36      	ldr	r2, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_RCC_OscConfig+0x790>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fdc:	00d2      	lsls	r2, r2, #3
 8001fde:	4931      	ldr	r1, [pc, #196]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	f023 020c 	bic.w	r2, r3, #12
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	492c      	ldr	r1, [pc, #176]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	f023 0202 	bic.w	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4928      	ldr	r1, [pc, #160]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8002004:	4313      	orrs	r3, r2
 8002006:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002008:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002014:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 800201a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002020:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8002026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800202a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fec6 	bl	8000dd4 <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe fec2 	bl	8000dd4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e067      	b.n	800212e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x730>
 800206a:	e05f      	b.n	800212c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8002072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe feac 	bl	8000dd4 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe fea8 	bl	8000dd4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e04d      	b.n	800212e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x764>
 800209e:	e045      	b.n	800212c <HAL_RCC_OscConfig+0x810>
 80020a0:	58024800 	.word	0x58024800
 80020a4:	58024400 	.word	0x58024400
 80020a8:	fffffc0c 	.word	0xfffffc0c
 80020ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCC_OscConfig+0x81c>)
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_OscConfig+0x81c>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d031      	beq.n	8002128 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0203 	and.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d12a      	bne.n	8002128 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d122      	bne.n	8002128 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d11a      	bne.n	8002128 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	0a5b      	lsrs	r3, r3, #9
 80020f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d111      	bne.n	8002128 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d108      	bne.n	8002128 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0e1b      	lsrs	r3, r3, #24
 800211a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3730      	adds	r7, #48	; 0x30
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	58024400 	.word	0x58024400

0800213c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e19c      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b8a      	ldr	r3, [pc, #552]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d910      	bls.n	8002180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b87      	ldr	r3, [pc, #540]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 020f 	bic.w	r2, r3, #15
 8002166:	4985      	ldr	r1, [pc, #532]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b83      	ldr	r3, [pc, #524]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e184      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002198:	429a      	cmp	r2, r3
 800219a:	d908      	bls.n	80021ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800219c:	4b78      	ldr	r3, [pc, #480]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	4975      	ldr	r1, [pc, #468]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	4b70      	ldr	r3, [pc, #448]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	496a      	ldr	r1, [pc, #424]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	4b64      	ldr	r3, [pc, #400]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d908      	bls.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	495e      	ldr	r1, [pc, #376]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002206:	4313      	orrs	r3, r2
 8002208:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002222:	429a      	cmp	r2, r3
 8002224:	d908      	bls.n	8002238 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002226:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4953      	ldr	r1, [pc, #332]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002234:	4313      	orrs	r3, r2
 8002236:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	429a      	cmp	r2, r3
 8002252:	d908      	bls.n	8002266 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f023 020f 	bic.w	r2, r3, #15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4947      	ldr	r1, [pc, #284]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002262:	4313      	orrs	r3, r2
 8002264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d055      	beq.n	800231e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002272:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4940      	ldr	r1, [pc, #256]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002280:	4313      	orrs	r3, r2
 8002282:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800228c:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d121      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0f6      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d115      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0ea      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0de      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0d6      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f023 0207 	bic.w	r2, r3, #7
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4925      	ldr	r1, [pc, #148]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7fe fd71 	bl	8000dd4 <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f4:	e00a      	b.n	800230c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f6:	f7fe fd6d 	bl	8000dd4 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0be      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	429a      	cmp	r2, r3
 800231c:	d1eb      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	429a      	cmp	r2, r3
 8002338:	d208      	bcs.n	800234c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f023 020f 	bic.w	r2, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	490e      	ldr	r1, [pc, #56]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002348:	4313      	orrs	r3, r2
 800234a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d214      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	4906      	ldr	r1, [pc, #24]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e086      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
 800237c:	52002000 	.word	0x52002000
 8002380:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800239c:	429a      	cmp	r2, r3
 800239e:	d208      	bcs.n	80023b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023a0:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d208      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	492e      	ldr	r1, [pc, #184]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d010      	beq.n	800240e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d208      	bcs.n	800240e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4922      	ldr	r1, [pc, #136]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 800240a:	4313      	orrs	r3, r2
 800240c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d010      	beq.n	800243c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002426:	429a      	cmp	r2, r3
 8002428:	d208      	bcs.n	800243c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4917      	ldr	r1, [pc, #92]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002438:	4313      	orrs	r3, r2
 800243a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800243c:	f000 f834 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002440:	4601      	mov	r1, r0
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_RCC_ClockConfig+0x35c>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	fa21 f303 	lsr.w	r3, r1, r3
 8002458:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_RCC_ClockConfig+0x35c>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x360>)
 8002472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x364>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_ClockConfig+0x368>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fc5e 	bl	8000d40 <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	58024400 	.word	0x58024400
 8002498:	08005564 	.word	0x08005564
 800249c:	20000004 	.word	0x20000004
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000030 	.word	0x20000030

080024a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ae:	4baf      	ldr	r3, [pc, #700]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024b6:	2b18      	cmp	r3, #24
 80024b8:	f200 814e 	bhi.w	8002758 <HAL_RCC_GetSysClockFreq+0x2b0>
 80024bc:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	08002529 	.word	0x08002529
 80024c8:	08002759 	.word	0x08002759
 80024cc:	08002759 	.word	0x08002759
 80024d0:	08002759 	.word	0x08002759
 80024d4:	08002759 	.word	0x08002759
 80024d8:	08002759 	.word	0x08002759
 80024dc:	08002759 	.word	0x08002759
 80024e0:	08002759 	.word	0x08002759
 80024e4:	0800254f 	.word	0x0800254f
 80024e8:	08002759 	.word	0x08002759
 80024ec:	08002759 	.word	0x08002759
 80024f0:	08002759 	.word	0x08002759
 80024f4:	08002759 	.word	0x08002759
 80024f8:	08002759 	.word	0x08002759
 80024fc:	08002759 	.word	0x08002759
 8002500:	08002759 	.word	0x08002759
 8002504:	08002555 	.word	0x08002555
 8002508:	08002759 	.word	0x08002759
 800250c:	08002759 	.word	0x08002759
 8002510:	08002759 	.word	0x08002759
 8002514:	08002759 	.word	0x08002759
 8002518:	08002759 	.word	0x08002759
 800251c:	08002759 	.word	0x08002759
 8002520:	08002759 	.word	0x08002759
 8002524:	0800255b 	.word	0x0800255b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002528:	4b90      	ldr	r3, [pc, #576]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002534:	4b8d      	ldr	r3, [pc, #564]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	4a8c      	ldr	r2, [pc, #560]	; (8002770 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002546:	e10a      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002548:	4b89      	ldr	r3, [pc, #548]	; (8002770 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800254a:	61bb      	str	r3, [r7, #24]
    break;
 800254c:	e107      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002550:	61bb      	str	r3, [r7, #24]
    break;
 8002552:	e104      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002554:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002556:	61bb      	str	r3, [r7, #24]
    break;
 8002558:	e101      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800255a:	4b84      	ldr	r3, [pc, #528]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002564:	4b81      	ldr	r3, [pc, #516]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800256e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002570:	4b7e      	ldr	r3, [pc, #504]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800257a:	4b7c      	ldr	r3, [pc, #496]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002592:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80da 	beq.w	8002752 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d05a      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x1b2>
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d302      	bcc.n	80025ae <HAL_RCC_GetSysClockFreq+0x106>
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d078      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x1f6>
 80025ac:	e099      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025ae:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d02d      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025ba:	4b6c      	ldr	r3, [pc, #432]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	08db      	lsrs	r3, r3, #3
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	4a6a      	ldr	r2, [pc, #424]	; (8002770 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025e4:	4b61      	ldr	r3, [pc, #388]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80025f8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800277c <HAL_RCC_GetSysClockFreq+0x2d4>
 80025fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800260c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002610:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002614:	e087      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002620:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002780 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002628:	4b50      	ldr	r3, [pc, #320]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002638:	ed97 6a02 	vldr	s12, [r7, #8]
 800263c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800277c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800264c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002658:	e065      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002664:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002784 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800267c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002680:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800277c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800268c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002698:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800269c:	e043      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	ee07 3a90 	vmov	s15, r3
 80026a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002788 <HAL_RCC_GetSysClockFreq+0x2e0>
 80026ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026b0:	4b2e      	ldr	r3, [pc, #184]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80026c4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800277c <HAL_RCC_GetSysClockFreq+0x2d4>
 80026c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026e0:	e021      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002784 <HAL_RCC_GetSysClockFreq+0x2dc>
 80026f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fc:	ee07 3a90 	vmov	s15, r3
 8002700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002704:	ed97 6a02 	vldr	s12, [r7, #8]
 8002708:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800277c <HAL_RCC_GetSysClockFreq+0x2d4>
 800270c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800271c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002720:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002724:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	0a5b      	lsrs	r3, r3, #9
 800272c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002730:	3301      	adds	r3, #1
 8002732:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800273e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800274a:	ee17 3a90 	vmov	r3, s15
 800274e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002750:	e005      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
    break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800275a:	61bb      	str	r3, [r7, #24]
    break;
 800275c:	bf00      	nop
  }

  return sysclockfreq;
 800275e:	69bb      	ldr	r3, [r7, #24]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3724      	adds	r7, #36	; 0x24
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	58024400 	.word	0x58024400
 8002770:	03d09000 	.word	0x03d09000
 8002774:	003d0900 	.word	0x003d0900
 8002778:	017d7840 	.word	0x017d7840
 800277c:	46000000 	.word	0x46000000
 8002780:	4c742400 	.word	0x4c742400
 8002784:	4a742400 	.word	0x4a742400
 8002788:	4bbebc20 	.word	0x4bbebc20

0800278c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002792:	f7ff fe89 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCC_GetHCLKFreq+0x50>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	fa21 f303 	lsr.w	r3, r1, r3
 80027ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_RCC_GetHCLKFreq+0x50>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80027c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027ca:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	58024400 	.word	0x58024400
 80027e0:	08005564 	.word	0x08005564
 80027e4:	20000004 	.word	0x20000004
 80027e8:	20000000 	.word	0x20000000

080027ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027f0:	f7ff ffcc 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027f4:	4601      	mov	r1, r0
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	58024400 	.word	0x58024400
 8002814:	08005564 	.word	0x08005564

08002818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800281c:	f7ff ffb6 	bl	800278c <HAL_RCC_GetHCLKFreq>
 8002820:	4601      	mov	r1, r0
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x28>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	58024400 	.word	0x58024400
 8002840:	08005564 	.word	0x08005564

08002844 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800284c:	2300      	movs	r3, #0
 800284e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002850:	2300      	movs	r3, #0
 8002852:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d03d      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002868:	d013      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800286a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800286e:	d802      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002874:	e01f      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800287a:	d013      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800287c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002880:	d01c      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002882:	e018      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002884:	4baf      	ldr	r3, [pc, #700]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	4aae      	ldr	r2, [pc, #696]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800288a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002890:	e015      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	2102      	movs	r1, #2
 8002898:	4618      	mov	r0, r3
 800289a:	f001 f99b 	bl	8003bd4 <RCCEx_PLL2_Config>
 800289e:	4603      	mov	r3, r0
 80028a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028a2:	e00c      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3324      	adds	r3, #36	; 0x24
 80028a8:	2102      	movs	r1, #2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 fa44 	bl	8003d38 <RCCEx_PLL3_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028b4:	e003      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	75fb      	strb	r3, [r7, #23]
      break;
 80028ba:	e000      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80028bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028c4:	4b9f      	ldr	r3, [pc, #636]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028d0:	499c      	ldr	r1, [pc, #624]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	650b      	str	r3, [r1, #80]	; 0x50
 80028d6:	e001      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03d      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d826      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	0800290d 	.word	0x0800290d
 80028fc:	0800291b 	.word	0x0800291b
 8002900:	0800292d 	.word	0x0800292d
 8002904:	08002945 	.word	0x08002945
 8002908:	08002945 	.word	0x08002945
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800290c:	4b8d      	ldr	r3, [pc, #564]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	4a8c      	ldr	r2, [pc, #560]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002918:	e015      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f001 f957 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002926:	4603      	mov	r3, r0
 8002928:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800292a:	e00c      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3324      	adds	r3, #36	; 0x24
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f001 fa00 	bl	8003d38 <RCCEx_PLL3_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800293c:	e003      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
      break;
 8002942:	e000      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800294c:	4b7d      	ldr	r3, [pc, #500]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800294e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002950:	f023 0207 	bic.w	r2, r3, #7
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	497a      	ldr	r1, [pc, #488]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800295a:	4313      	orrs	r3, r2
 800295c:	650b      	str	r3, [r1, #80]	; 0x50
 800295e:	e001      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296c:	2b00      	cmp	r3, #0
 800296e:	d03e      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d01c      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d804      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d00d      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002984:	e01e      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002986:	2bc0      	cmp	r3, #192	; 0xc0
 8002988:	d01f      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	d01e      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002990:	e018      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002992:	4b6c      	ldr	r3, [pc, #432]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	4a6b      	ldr	r2, [pc, #428]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800299e:	e017      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 f914 	bl	8003bd4 <RCCEx_PLL2_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029b0:	e00e      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3324      	adds	r3, #36	; 0x24
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 f9bd 	bl	8003d38 <RCCEx_PLL3_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029c2:	e005      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	75fb      	strb	r3, [r7, #23]
      break;
 80029c8:	e002      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80029ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80029d6:	4b5b      	ldr	r3, [pc, #364]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	4958      	ldr	r1, [pc, #352]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	650b      	str	r3, [r1, #80]	; 0x50
 80029e8:	e001      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d044      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a04:	d01f      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0a:	d805      	bhi.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a14:	d00e      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002a16:	e01f      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002a18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a1c:	d01f      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002a1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a22:	d01e      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002a24:	e018      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	4a46      	ldr	r2, [pc, #280]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a32:	e017      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 f8ca 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a44:	e00e      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3324      	adds	r3, #36	; 0x24
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f001 f973 	bl	8003d38 <RCCEx_PLL3_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a56:	e005      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5c:	e002      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a78:	4932      	ldr	r1, [pc, #200]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	658b      	str	r3, [r1, #88]	; 0x58
 8002a7e:	e001      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d044      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a9a:	d01f      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aa0:	d805      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aaa:	d00e      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002aac:	e01f      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002aae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ab2:	d01f      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab8:	d01e      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002aba:	e018      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ac8:	e017      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 f87f 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002ada:	e00e      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3324      	adds	r3, #36	; 0x24
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 f928 	bl	8003d38 <RCCEx_PLL3_Config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aec:	e005      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
      break;
 8002af2:	e002      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002af4:	bf00      	nop
 8002af6:	e000      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10a      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b0e:	490d      	ldr	r1, [pc, #52]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	658b      	str	r3, [r1, #88]	; 0x58
 8002b14:	e001      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d035      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d00c      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d802      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01b      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002b36:	e017      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d00c      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002b3c:	2b30      	cmp	r3, #48	; 0x30
 8002b3e:	d018      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002b40:	e012      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002b42:	bf00      	nop
 8002b44:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b48:	4bae      	ldr	r3, [pc, #696]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	4aad      	ldr	r2, [pc, #692]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b54:	e00e      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 f839 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b66:	e005      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6c:	e002      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e000      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b7a:	4ba2      	ldr	r3, [pc, #648]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	499f      	ldr	r1, [pc, #636]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b8c:	e001      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d042      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba6:	d01f      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bac:	d805      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002bb8:	e01f      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002bba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bbe:	d01f      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc4:	d01e      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002bc6:	e018      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc8:	4b8e      	ldr	r3, [pc, #568]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	4a8d      	ldr	r2, [pc, #564]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bd4:	e017      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fff9 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002be6:	e00e      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3324      	adds	r3, #36	; 0x24
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f8a2 	bl	8003d38 <RCCEx_PLL3_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bf8:	e005      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002c00:	bf00      	nop
 8002c02:	e000      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c0c:	4b7d      	ldr	r3, [pc, #500]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c18:	497a      	ldr	r1, [pc, #488]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c1e:	e001      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d042      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c38:	d01b      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c3e:	d805      	bhi.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d022      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c4a:	e01b      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002c4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c50:	d01d      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002c52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c56:	d01c      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002c58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c5c:	d01b      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002c5e:	e011      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 ffb4 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c70:	e012      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3324      	adds	r3, #36	; 0x24
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f001 f85d 	bl	8003d38 <RCCEx_PLL3_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c82:	e009      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	75fb      	strb	r3, [r7, #23]
      break;
 8002c88:	e006      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e004      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c9e:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002caa:	4956      	ldr	r1, [pc, #344]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	650b      	str	r3, [r1, #80]	; 0x50
 8002cb0:	e001      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d044      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ccc:	d01b      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd2:	d805      	bhi.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d022      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002cde:	e01b      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d01d      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cea:	d01c      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002cec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cf0:	d01b      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002cf2:	e011      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 ff6a 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d04:	e012      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3324      	adds	r3, #36	; 0x24
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 f813 	bl	8003d38 <RCCEx_PLL3_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d16:	e009      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d1c:	e006      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e004      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e002      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d40:	4930      	ldr	r1, [pc, #192]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	658b      	str	r3, [r1, #88]	; 0x58
 8002d46:	e001      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d022      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x55a>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00e      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8002d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d64:	d108      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 ff31 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002d76:	e003      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d7c:	e000      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      break;
 8002d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x556>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002d86:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	491c      	ldr	r1, [pc, #112]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d98:	e001      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d030      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db8:	d009      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d013      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002dbe:	e00f      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dcc:	e00c      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fefd 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dde:	e003      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
      break;
 8002de4:	e000      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      break;
 8002de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4902      	ldr	r1, [pc, #8]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	650b      	str	r3, [r1, #80]	; 0x50
 8002e00:	e004      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002e02:	bf00      	nop
 8002e04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d032      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x63a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d81b      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e5f 	.word	0x08002e5f
 8002e2c:	08002e39 	.word	0x08002e39
 8002e30:	08002e47 	.word	0x08002e47
 8002e34:	08002e5f 	.word	0x08002e5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e38:	4bb8      	ldr	r3, [pc, #736]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	4ab7      	ldr	r2, [pc, #732]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e44:	e00c      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x61c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fec1 	bl	8003bd4 <RCCEx_PLL2_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e56:	e003      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5c:	e000      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      break;
 8002e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e66:	4bad      	ldr	r3, [pc, #692]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	49aa      	ldr	r1, [pc, #680]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e78:	e001      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8086 	beq.w	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e8c:	4ba4      	ldr	r3, [pc, #656]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4aa3      	ldr	r2, [pc, #652]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e98:	f7fd ff9c 	bl	8000dd4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e9e:	e009      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7fd ff98 	bl	8000dd4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x670>
      {
        ret = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	75fb      	strb	r3, [r7, #23]
        break;
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eb4:	4b9a      	ldr	r3, [pc, #616]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ef      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      }
    }

    if(ret == HAL_OK)
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d166      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ec6:	4b95      	ldr	r3, [pc, #596]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ec8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ed0:	4053      	eors	r3, r2
 8002ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d013      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eda:	4b90      	ldr	r3, [pc, #576]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee4:	4b8d      	ldr	r3, [pc, #564]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a8c      	ldr	r2, [pc, #560]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef0:	4b8a      	ldr	r3, [pc, #552]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a89      	ldr	r2, [pc, #548]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002efc:	4a87      	ldr	r2, [pc, #540]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0c:	d115      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fd ff61 	bl	8000dd4 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f14:	e00b      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fd ff5d 	bl	8000dd4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d902      	bls.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
          {
            ret = HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	75fb      	strb	r3, [r7, #23]
            break;
 8002f2c:	e005      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f2e:	4b7b      	ldr	r3, [pc, #492]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0ed      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
          }
        }
      }

      if(ret == HAL_OK)
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d126      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f4e:	d10d      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002f50:	4b72      	ldr	r3, [pc, #456]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f5e:	0919      	lsrs	r1, r3, #4
 8002f60:	4b70      	ldr	r3, [pc, #448]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002f62:	400b      	ands	r3, r1
 8002f64:	496d      	ldr	r1, [pc, #436]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	610b      	str	r3, [r1, #16]
 8002f6a:	e005      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8002f6c:	4b6b      	ldr	r3, [pc, #428]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	4a6a      	ldr	r2, [pc, #424]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002f72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f76:	6113      	str	r3, [r2, #16]
 8002f78:	4b68      	ldr	r3, [pc, #416]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f86:	4965      	ldr	r1, [pc, #404]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	670b      	str	r3, [r1, #112]	; 0x70
 8002f8c:	e004      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	75bb      	strb	r3, [r7, #22]
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x754>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d07e      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa8:	2b28      	cmp	r3, #40	; 0x28
 8002faa:	d867      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08003083 	.word	0x08003083
 8002fb8:	0800307d 	.word	0x0800307d
 8002fbc:	0800307d 	.word	0x0800307d
 8002fc0:	0800307d 	.word	0x0800307d
 8002fc4:	0800307d 	.word	0x0800307d
 8002fc8:	0800307d 	.word	0x0800307d
 8002fcc:	0800307d 	.word	0x0800307d
 8002fd0:	0800307d 	.word	0x0800307d
 8002fd4:	08003059 	.word	0x08003059
 8002fd8:	0800307d 	.word	0x0800307d
 8002fdc:	0800307d 	.word	0x0800307d
 8002fe0:	0800307d 	.word	0x0800307d
 8002fe4:	0800307d 	.word	0x0800307d
 8002fe8:	0800307d 	.word	0x0800307d
 8002fec:	0800307d 	.word	0x0800307d
 8002ff0:	0800307d 	.word	0x0800307d
 8002ff4:	0800306b 	.word	0x0800306b
 8002ff8:	0800307d 	.word	0x0800307d
 8002ffc:	0800307d 	.word	0x0800307d
 8003000:	0800307d 	.word	0x0800307d
 8003004:	0800307d 	.word	0x0800307d
 8003008:	0800307d 	.word	0x0800307d
 800300c:	0800307d 	.word	0x0800307d
 8003010:	0800307d 	.word	0x0800307d
 8003014:	08003083 	.word	0x08003083
 8003018:	0800307d 	.word	0x0800307d
 800301c:	0800307d 	.word	0x0800307d
 8003020:	0800307d 	.word	0x0800307d
 8003024:	0800307d 	.word	0x0800307d
 8003028:	0800307d 	.word	0x0800307d
 800302c:	0800307d 	.word	0x0800307d
 8003030:	0800307d 	.word	0x0800307d
 8003034:	08003083 	.word	0x08003083
 8003038:	0800307d 	.word	0x0800307d
 800303c:	0800307d 	.word	0x0800307d
 8003040:	0800307d 	.word	0x0800307d
 8003044:	0800307d 	.word	0x0800307d
 8003048:	0800307d 	.word	0x0800307d
 800304c:	0800307d 	.word	0x0800307d
 8003050:	0800307d 	.word	0x0800307d
 8003054:	08003083 	.word	0x08003083
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fdb8 	bl	8003bd4 <RCCEx_PLL2_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003068:	e00c      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x840>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3324      	adds	r3, #36	; 0x24
 800306e:	2101      	movs	r1, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fe61 	bl	8003d38 <RCCEx_PLL3_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800307a:	e003      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x840>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
      break;
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x840>
      break;
 8003082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003096:	4921      	ldr	r1, [pc, #132]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003098:	4313      	orrs	r3, r2
 800309a:	654b      	str	r3, [r1, #84]	; 0x54
 800309c:	e001      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d03e      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d820      	bhi.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_RCCEx_PeriphCLKConfig+0x878>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030ff 	.word	0x080030ff
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	080030e7 	.word	0x080030e7
 80030c8:	080030ff 	.word	0x080030ff
 80030cc:	080030ff 	.word	0x080030ff
 80030d0:	080030ff 	.word	0x080030ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	2101      	movs	r1, #1
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fd7a 	bl	8003bd4 <RCCEx_PLL2_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80030e4:	e00c      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3324      	adds	r3, #36	; 0x24
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fe23 	bl	8003d38 <RCCEx_PLL3_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80030f6:	e003      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]
      break;
 80030fc:	e000      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      break;
 80030fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d110      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003112:	4902      	ldr	r1, [pc, #8]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d8>)
 8003114:	4313      	orrs	r3, r2
 8003116:	654b      	str	r3, [r1, #84]	; 0x54
 8003118:	e008      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 800311a:	bf00      	nop
 800311c:	58024400 	.word	0x58024400
 8003120:	58024800 	.word	0x58024800
 8003124:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d039      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x968>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313e:	2b05      	cmp	r3, #5
 8003140:	d820      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800318b 	.word	0x0800318b
 800314c:	08003161 	.word	0x08003161
 8003150:	08003173 	.word	0x08003173
 8003154:	0800318b 	.word	0x0800318b
 8003158:	0800318b 	.word	0x0800318b
 800315c:	0800318b 	.word	0x0800318b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	2101      	movs	r1, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fd34 	bl	8003bd4 <RCCEx_PLL2_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003170:	e00c      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x948>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3324      	adds	r3, #36	; 0x24
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fddd 	bl	8003d38 <RCCEx_PLL3_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003182:	e003      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x948>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
      break;
 8003188:	e000      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x948>
      break;
 800318a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x964>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003192:	4bb2      	ldr	r3, [pc, #712]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	f023 0207 	bic.w	r2, r3, #7
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a0:	49ae      	ldr	r1, [pc, #696]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	658b      	str	r3, [r1, #88]	; 0x58
 80031a6:	e001      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x968>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d044      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c2:	d01b      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 80031c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c8:	d805      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x992>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d022      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80031ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80031d4:	e01b      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031da:	d01d      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80031dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031e0:	d01c      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 80031e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031e6:	d01b      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 80031e8:	e011      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fcef 	bl	8003bd4 <RCCEx_PLL2_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80031fa:	e012      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x9de>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3324      	adds	r3, #36	; 0x24
 8003200:	2102      	movs	r1, #2
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fd98 	bl	8003d38 <RCCEx_PLL3_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800320c:	e009      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
      break;
 8003212:	e006      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003214:	bf00      	nop
 8003216:	e004      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003218:	bf00      	nop
 800321a:	e002      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      break;
 8003220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003228:	4b8c      	ldr	r3, [pc, #560]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	4989      	ldr	r1, [pc, #548]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003238:	4313      	orrs	r3, r2
 800323a:	654b      	str	r3, [r1, #84]	; 0x54
 800323c:	e001      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d044      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003258:	d01b      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 800325a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325e:	d805      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d022      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800326a:	e01b      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003270:	d01d      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003272:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003276:	d01c      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8003278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800327c:	d01b      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800327e:	e011      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fca4 	bl	8003bd4 <RCCEx_PLL2_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003290:	e012      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3324      	adds	r3, #36	; 0x24
 8003296:	2102      	movs	r1, #2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fd4d 	bl	8003d38 <RCCEx_PLL3_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032a2:	e009      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
      break;
 80032a8:	e006      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      break;
 80032b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032be:	4b67      	ldr	r3, [pc, #412]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032cc:	4963      	ldr	r1, [pc, #396]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	658b      	str	r3, [r1, #88]	; 0x58
 80032d2:	e001      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d044      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ee:	d01b      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xae4>
 80032f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f4:	d805      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d022      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fe:	d00a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003300:	e01b      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003306:	d01d      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8003308:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800330c:	d01c      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 800330e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003312:	d01b      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8003314:	e011      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3304      	adds	r3, #4
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fc59 	bl	8003bd4 <RCCEx_PLL2_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003326:	e012      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xb0a>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3324      	adds	r3, #36	; 0x24
 800332c:	2102      	movs	r1, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fd02 	bl	8003d38 <RCCEx_PLL3_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003338:	e009      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	75fb      	strb	r3, [r7, #23]
      break;
 800333e:	e006      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003340:	bf00      	nop
 8003342:	e004      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003344:	bf00      	nop
 8003346:	e002      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 8003348:	bf00      	nop
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
      break;
 800334c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xb26>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003362:	493e      	ldr	r1, [pc, #248]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003364:	4313      	orrs	r3, r2
 8003366:	658b      	str	r3, [r1, #88]	; 0x58
 8003368:	e001      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003384:	d10a      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3324      	adds	r3, #36	; 0x24
 800338a:	2102      	movs	r1, #2
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fcd3 	bl	8003d38 <RCCEx_PLL3_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xb58>
        {
          status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800339c:	4b2f      	ldr	r3, [pc, #188]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	492c      	ldr	r1, [pc, #176]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c6:	d10a      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xb9a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3324      	adds	r3, #36	; 0x24
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fcb2 	bl	8003d38 <RCCEx_PLL3_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xb9a>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033de:	4b1f      	ldr	r3, [pc, #124]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ec:	491b      	ldr	r1, [pc, #108]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d032      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d00d      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800340a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800340e:	d016      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d111      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fbda 	bl	8003bd4 <RCCEx_PLL2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003424:	e00c      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xbfc>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3324      	adds	r3, #36	; 0x24
 800342a:	2102      	movs	r1, #2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fc83 	bl	8003d38 <RCCEx_PLL3_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003436:	e003      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	75fb      	strb	r3, [r7, #23]
      break;
 800343c:	e000      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      break;
 800343e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003454:	4901      	ldr	r1, [pc, #4]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xc18>)
 8003456:	4313      	orrs	r3, r2
 8003458:	658b      	str	r3, [r1, #88]	; 0x58
 800345a:	e003      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800345c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02f      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800347a:	d00c      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800347c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003480:	d015      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
 8003482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003486:	d10f      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003488:	4b7a      	ldr	r3, [pc, #488]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	4a79      	ldr	r2, [pc, #484]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800348e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003494:	e00c      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fc4b 	bl	8003d38 <RCCEx_PLL3_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80034a6:	e003      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
      break;
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
      break;
 80034ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b6:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	496b      	ldr	r1, [pc, #428]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	654b      	str	r3, [r1, #84]	; 0x54
 80034ca:	e001      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d029      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d007      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 80034ea:	e00f      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ec:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80034f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034f8:	e00b      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fb67 	bl	8003bd4 <RCCEx_PLL2_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800350a:	e002      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xcce>

    default:
      ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	75fb      	strb	r3, [r7, #23]
      break;
 8003510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xce8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003518:	4b56      	ldr	r3, [pc, #344]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800351a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	4953      	ldr	r1, [pc, #332]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003526:	4313      	orrs	r3, r2
 8003528:	64cb      	str	r3, [r1, #76]	; 0x4c
 800352a:	e001      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xcec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3324      	adds	r3, #36	; 0x24
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fbf8 	bl	8003d38 <RCCEx_PLL3_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      status=HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d031      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {

    switch(PeriphClkInit->RngClockSelection)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003568:	d00c      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 800356a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356e:	d802      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd32>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xd54>
 8003574:	e00d      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357a:	d00f      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xd58>
 800357c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003580:	d00e      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8003582:	e006      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	4a3a      	ldr	r2, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003590:	e007      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
      break;
 8003596:	e004      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 8003598:	bf00      	nop
 800359a:	e002      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
      break;
 80035a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xd7a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a8:	4b32      	ldr	r3, [pc, #200]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b6:	492f      	ldr	r1, [pc, #188]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	654b      	str	r3, [r1, #84]	; 0x54
 80035bc:	e001      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035ce:	4b29      	ldr	r3, [pc, #164]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035da:	4926      	ldr	r1, [pc, #152]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035fa:	491e      	ldr	r1, [pc, #120]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800361a:	4313      	orrs	r3, r2
 800361c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe02>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	4a11      	ldr	r2, [pc, #68]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003630:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003634:	6113      	str	r3, [r2, #16]
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003640:	490c      	ldr	r1, [pc, #48]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003642:	4313      	orrs	r3, r2
 8003644:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	da08      	bge.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	4906      	ldr	r1, [pc, #24]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0xe30>)
 800365c:	4313      	orrs	r3, r2
 800365e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003660:	7dbb      	ldrb	r3, [r7, #22]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xe28>
  }
  return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	58024400 	.word	0x58024400

08003678 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800367c:	f7ff f886 	bl	800278c <HAL_RCC_GetHCLKFreq>
 8003680:	4601      	mov	r1, r0
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	58024400 	.word	0x58024400
 80036a0:	08005564 	.word	0x08005564

080036a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b089      	sub	sp, #36	; 0x24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ac:	4b9d      	ldr	r3, [pc, #628]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80036b6:	4b9b      	ldr	r3, [pc, #620]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	0b1b      	lsrs	r3, r3, #12
 80036bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80036c2:	4b98      	ldr	r3, [pc, #608]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80036ce:	4b95      	ldr	r3, [pc, #596]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	08db      	lsrs	r3, r3, #3
 80036d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 810a 	beq.w	8003906 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d05a      	beq.n	80037ae <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d302      	bcc.n	8003702 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d078      	beq.n	80037f2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003700:	e099      	b.n	8003836 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003702:	4b88      	ldr	r3, [pc, #544]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d02d      	beq.n	800376a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800370e:	4b85      	ldr	r3, [pc, #532]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	4a83      	ldr	r2, [pc, #524]	; (8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	ee07 3a90 	vmov	s15, r3
 8003730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003738:	4b7a      	ldr	r3, [pc, #488]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003740:	ee07 3a90 	vmov	s15, r3
 8003744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003748:	ed97 6a03 	vldr	s12, [r7, #12]
 800374c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800392c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800375c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003764:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003768:	e087      	b.n	800387a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	ee07 3a90 	vmov	s15, r3
 8003770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003774:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377c:	4b69      	ldr	r3, [pc, #420]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	ee07 3a90 	vmov	s15, r3
 8003788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800378c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003790:	eddf 5a66 	vldr	s11, [pc, #408]	; 800392c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800379c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037ac:	e065      	b.n	800387a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80037bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037c0:	4b58      	ldr	r3, [pc, #352]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80037d4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800392c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80037d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037f0:	e043      	b.n	800387a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003938 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003804:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003814:	ed97 6a03 	vldr	s12, [r7, #12]
 8003818:	eddf 5a44 	vldr	s11, [pc, #272]	; 800392c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800381c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003830:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003834:	e021      	b.n	800387a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003840:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003848:	4b36      	ldr	r3, [pc, #216]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003858:	ed97 6a03 	vldr	s12, [r7, #12]
 800385c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800392c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800386c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003874:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003878:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800387a:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	0a5b      	lsrs	r3, r3, #9
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003894:	edd7 6a07 	vldr	s13, [r7, #28]
 8003898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800389c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a0:	ee17 2a90 	vmov	r2, s15
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80038a8:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ce:	ee17 2a90 	vmov	r2, s15
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80038d6:	4b13      	ldr	r3, [pc, #76]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	0e1b      	lsrs	r3, r3, #24
 80038dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e0:	ee07 3a90 	vmov	s15, r3
 80038e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80038f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038fc:	ee17 2a90 	vmov	r2, s15
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003904:	e008      	b.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
}
 8003918:	bf00      	nop
 800391a:	3724      	adds	r7, #36	; 0x24
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	58024400 	.word	0x58024400
 8003928:	03d09000 	.word	0x03d09000
 800392c:	46000000 	.word	0x46000000
 8003930:	4c742400 	.word	0x4c742400
 8003934:	4a742400 	.word	0x4a742400
 8003938:	4bbebc20 	.word	0x4bbebc20

0800393c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003944:	4b9d      	ldr	r3, [pc, #628]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800394e:	4b9b      	ldr	r3, [pc, #620]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	0d1b      	lsrs	r3, r3, #20
 8003954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003958:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800395a:	4b98      	ldr	r3, [pc, #608]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003966:	4b95      	ldr	r3, [pc, #596]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	08db      	lsrs	r3, r3, #3
 800396c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 810a 	beq.w	8003b9e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d05a      	beq.n	8003a46 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003990:	2b01      	cmp	r3, #1
 8003992:	d302      	bcc.n	800399a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003994:	2b02      	cmp	r3, #2
 8003996:	d078      	beq.n	8003a8a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003998:	e099      	b.n	8003ace <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800399a:	4b88      	ldr	r3, [pc, #544]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02d      	beq.n	8003a02 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039a6:	4b85      	ldr	r3, [pc, #532]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	08db      	lsrs	r3, r3, #3
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	4a83      	ldr	r2, [pc, #524]	; (8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d0:	4b7a      	ldr	r3, [pc, #488]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80039e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80039e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a00:	e087      	b.n	8003b12 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a14:	4b69      	ldr	r3, [pc, #420]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a24:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a28:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003a2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a44:	e065      	b.n	8003b12 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a50:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a58:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a68:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a6c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a88:	e043      	b.n	8003b12 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	ee07 3a90 	vmov	s15, r3
 8003a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9c:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aac:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ab0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003abc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003acc:	e021      	b.n	8003b12 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae0:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af0:	ed97 6a03 	vldr	s12, [r7, #12]
 8003af4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b10:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003b12:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	0a5b      	lsrs	r3, r3, #9
 8003b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1c:	ee07 3a90 	vmov	s15, r3
 8003b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b38:	ee17 2a90 	vmov	r2, s15
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003b40:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b66:	ee17 2a90 	vmov	r2, s15
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	0e1b      	lsrs	r3, r3, #24
 8003b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b94:	ee17 2a90 	vmov	r2, s15
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
}
 8003bb0:	bf00      	nop
 8003bb2:	3724      	adds	r7, #36	; 0x24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	03d09000 	.word	0x03d09000
 8003bc4:	46000000 	.word	0x46000000
 8003bc8:	4c742400 	.word	0x4c742400
 8003bcc:	4a742400 	.word	0x4a742400
 8003bd0:	4bbebc20 	.word	0x4bbebc20

08003bd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003be2:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d101      	bne.n	8003bf2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e099      	b.n	8003d26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003bf2:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a4e      	ldr	r2, [pc, #312]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003bf8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfe:	f7fd f8e9 	bl	8000dd4 <HAL_GetTick>
 8003c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c06:	f7fd f8e5 	bl	8000dd4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e086      	b.n	8003d26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c18:	4b45      	ldr	r3, [pc, #276]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c24:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	031b      	lsls	r3, r3, #12
 8003c32:	493f      	ldr	r1, [pc, #252]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	628b      	str	r3, [r1, #40]	; 0x28
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	025b      	lsls	r3, r3, #9
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	041b      	lsls	r3, r3, #16
 8003c56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	061b      	lsls	r3, r3, #24
 8003c64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c68:	4931      	ldr	r1, [pc, #196]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	492d      	ldr	r1, [pc, #180]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c80:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f023 0220 	bic.w	r2, r3, #32
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	4928      	ldr	r1, [pc, #160]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c92:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003c98:	f023 0310 	bic.w	r3, r3, #16
 8003c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003ca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca2:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <RCCEx_PLL2_Config+0x160>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	69d2      	ldr	r2, [r2, #28]
 8003caa:	00d2      	lsls	r2, r2, #3
 8003cac:	4920      	ldr	r1, [pc, #128]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003cb2:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cb8:	f043 0310 	orr.w	r3, r3, #16
 8003cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cd0:	e00f      	b.n	8003cf2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d106      	bne.n	8003ce6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ce4:	e005      	b.n	8003cf2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	4a11      	ldr	r2, [pc, #68]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003cf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfe:	f7fd f869 	bl	8000dd4 <HAL_GetTick>
 8003d02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d04:	e008      	b.n	8003d18 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d06:	f7fd f865 	bl	8000dd4 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e006      	b.n	8003d26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <RCCEx_PLL2_Config+0x15c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	58024400 	.word	0x58024400
 8003d34:	ffff0007 	.word	0xffff0007

08003d38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d46:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d101      	bne.n	8003d56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e099      	b.n	8003e8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d56:	4b4f      	ldr	r3, [pc, #316]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a4e      	ldr	r2, [pc, #312]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d62:	f7fd f837 	bl	8000dd4 <HAL_GetTick>
 8003d66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d68:	e008      	b.n	8003d7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d6a:	f7fd f833 	bl	8000dd4 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e086      	b.n	8003e8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d7c:	4b45      	ldr	r3, [pc, #276]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f0      	bne.n	8003d6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d88:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	051b      	lsls	r3, r3, #20
 8003d96:	493f      	ldr	r1, [pc, #252]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	025b      	lsls	r3, r3, #9
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	061b      	lsls	r3, r3, #24
 8003dc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dcc:	4931      	ldr	r1, [pc, #196]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003dd2:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	492d      	ldr	r1, [pc, #180]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003de4:	4b2b      	ldr	r3, [pc, #172]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4928      	ldr	r1, [pc, #160]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003df6:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e06:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <RCCEx_PLL3_Config+0x160>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	69d2      	ldr	r2, [r2, #28]
 8003e0e:	00d2      	lsls	r2, r2, #3
 8003e10:	4920      	ldr	r1, [pc, #128]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d106      	bne.n	8003e36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e28:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e34:	e00f      	b.n	8003e56 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d106      	bne.n	8003e4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e3c:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e48:	e005      	b.n	8003e56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e62:	f7fc ffb7 	bl	8000dd4 <HAL_GetTick>
 8003e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e68:	e008      	b.n	8003e7c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e6a:	f7fc ffb3 	bl	8000dd4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e006      	b.n	8003e8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <RCCEx_PLL3_Config+0x15c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	58024400 	.word	0x58024400
 8003e98:	ffff0007 	.word	0xffff0007

08003e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e042      	b.n	8003f34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fc fe01 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2224      	movs	r2, #36	; 0x24
 8003eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa56 	bl	8004390 <UART_SetConfig>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e022      	b.n	8003f34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fffa 	bl	8004ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f001 f881 	bl	8005034 <UART_CheckIdleState>
 8003f32:	4603      	mov	r3, r0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	f040 8083 	bne.w	800405e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_UART_Transmit+0x28>
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e07b      	b.n	8004060 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Transmit+0x3a>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e074      	b.n	8004060 <HAL_UART_Transmit+0x124>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2221      	movs	r2, #33	; 0x21
 8003f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f8e:	f7fc ff21 	bl	8000dd4 <HAL_GetTick>
 8003f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d108      	bne.n	8003fc0 <HAL_UART_Transmit+0x84>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e003      	b.n	8003fc8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003fd0:	e02c      	b.n	800402c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f001 f871 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e039      	b.n	8004060 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3302      	adds	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e007      	b.n	800401a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1cc      	bne.n	8003fd2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2200      	movs	r2, #0
 8004040:	2140      	movs	r1, #64	; 0x40
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f001 f83e 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e006      	b.n	8004060 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	f640 030f 	movw	r3, #2063	; 0x80f
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d118      	bne.n	80040ca <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d013      	beq.n	80040ca <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8145 	beq.w	800434a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
      }
      return;
 80040c8:	e13f      	b.n	800434a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80e8 	beq.w	80042a2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4ba1      	ldr	r3, [pc, #644]	; (800435c <HAL_UART_IRQHandler+0x2f4>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4ba0      	ldr	r3, [pc, #640]	; (8004360 <HAL_UART_IRQHandler+0x2f8>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80dd 	beq.w	80042a2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d010      	beq.n	8004114 <HAL_UART_IRQHandler+0xac>
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00b      	beq.n	8004114 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2201      	movs	r2, #1
 8004102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_UART_IRQHandler+0xd8>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2202      	movs	r2, #2
 800412e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d010      	beq.n	800416c <HAL_UART_IRQHandler+0x104>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00b      	beq.n	800416c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2204      	movs	r2, #4
 800415a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f043 0202 	orr.w	r2, r3, #2
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d015      	beq.n	80041a2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_UART_IRQHandler+0x2f4>)
 8004184:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2208      	movs	r2, #8
 8004190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f043 0208 	orr.w	r2, r3, #8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d011      	beq.n	80041d0 <HAL_UART_IRQHandler+0x168>
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80b9 	beq.w	800434e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d011      	beq.n	800420a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d004      	beq.n	800422a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004226:	2b00      	cmp	r3, #0
 8004228:	d031      	beq.n	800428e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 ffca 	bl	80051c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d123      	bne.n	8004286 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425a:	4a42      	ldr	r2, [pc, #264]	; (8004364 <HAL_UART_IRQHandler+0x2fc>)
 800425c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc fede 	bl	8001024 <HAL_DMA_Abort_IT>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d017      	beq.n	800429e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004278:	4610      	mov	r0, r2
 800427a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	e00f      	b.n	800429e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f87c 	bl	800437c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	e00b      	b.n	800429e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f878 	bl	800437c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	e007      	b.n	800429e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f874 	bl	800437c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800429c:	e057      	b.n	800434e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429e:	bf00      	nop
    return;
 80042a0:	e055      	b.n	800434e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <HAL_UART_IRQHandler+0x260>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 ffd3 	bl	800526c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042c6:	e045      	b.n	8004354 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d012      	beq.n	80042f8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d104      	bne.n	80042e6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d031      	beq.n	8004352 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
    }
    return;
 80042f6:	e02c      	b.n	8004352 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_UART_IRQHandler+0x2ac>
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 ff93 	bl	8005238 <UART_EndTransmit_IT>
    return;
 8004312:	e01f      	b.n	8004354 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_UART_IRQHandler+0x2c8>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 ffb3 	bl	8005294 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800432e:	e011      	b.n	8004354 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00c      	beq.n	8004354 <HAL_UART_IRQHandler+0x2ec>
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	da09      	bge.n	8004354 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 ff9d 	bl	8005280 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004346:	bf00      	nop
 8004348:	e004      	b.n	8004354 <HAL_UART_IRQHandler+0x2ec>
      return;
 800434a:	bf00      	nop
 800434c:	e002      	b.n	8004354 <HAL_UART_IRQHandler+0x2ec>
    return;
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <HAL_UART_IRQHandler+0x2ec>
    return;
 8004352:	bf00      	nop
  }
}
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	10000001 	.word	0x10000001
 8004360:	04000120 	.word	0x04000120
 8004364:	0800520d 	.word	0x0800520d

08004368 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004394:	b08e      	sub	sp, #56	; 0x38
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043be:	4313      	orrs	r3, r2
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4bc1      	ldr	r3, [pc, #772]	; (80046d0 <UART_SetConfig+0x340>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4ab7      	ldr	r2, [pc, #732]	; (80046d4 <UART_SetConfig+0x344>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004402:	4313      	orrs	r3, r2
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	4bb2      	ldr	r3, [pc, #712]	; (80046d8 <UART_SetConfig+0x348>)
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004416:	430b      	orrs	r3, r1
 8004418:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	f023 010f 	bic.w	r1, r3, #15
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4aa9      	ldr	r2, [pc, #676]	; (80046dc <UART_SetConfig+0x34c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d177      	bne.n	800452a <UART_SetConfig+0x19a>
 800443a:	4ba9      	ldr	r3, [pc, #676]	; (80046e0 <UART_SetConfig+0x350>)
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004442:	2b28      	cmp	r3, #40	; 0x28
 8004444:	d86c      	bhi.n	8004520 <UART_SetConfig+0x190>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0xbc>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	080044f1 	.word	0x080044f1
 8004450:	08004521 	.word	0x08004521
 8004454:	08004521 	.word	0x08004521
 8004458:	08004521 	.word	0x08004521
 800445c:	08004521 	.word	0x08004521
 8004460:	08004521 	.word	0x08004521
 8004464:	08004521 	.word	0x08004521
 8004468:	08004521 	.word	0x08004521
 800446c:	080044f9 	.word	0x080044f9
 8004470:	08004521 	.word	0x08004521
 8004474:	08004521 	.word	0x08004521
 8004478:	08004521 	.word	0x08004521
 800447c:	08004521 	.word	0x08004521
 8004480:	08004521 	.word	0x08004521
 8004484:	08004521 	.word	0x08004521
 8004488:	08004521 	.word	0x08004521
 800448c:	08004501 	.word	0x08004501
 8004490:	08004521 	.word	0x08004521
 8004494:	08004521 	.word	0x08004521
 8004498:	08004521 	.word	0x08004521
 800449c:	08004521 	.word	0x08004521
 80044a0:	08004521 	.word	0x08004521
 80044a4:	08004521 	.word	0x08004521
 80044a8:	08004521 	.word	0x08004521
 80044ac:	08004509 	.word	0x08004509
 80044b0:	08004521 	.word	0x08004521
 80044b4:	08004521 	.word	0x08004521
 80044b8:	08004521 	.word	0x08004521
 80044bc:	08004521 	.word	0x08004521
 80044c0:	08004521 	.word	0x08004521
 80044c4:	08004521 	.word	0x08004521
 80044c8:	08004521 	.word	0x08004521
 80044cc:	08004511 	.word	0x08004511
 80044d0:	08004521 	.word	0x08004521
 80044d4:	08004521 	.word	0x08004521
 80044d8:	08004521 	.word	0x08004521
 80044dc:	08004521 	.word	0x08004521
 80044e0:	08004521 	.word	0x08004521
 80044e4:	08004521 	.word	0x08004521
 80044e8:	08004521 	.word	0x08004521
 80044ec:	08004519 	.word	0x08004519
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044f6:	e233      	b.n	8004960 <UART_SetConfig+0x5d0>
 80044f8:	2304      	movs	r3, #4
 80044fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044fe:	e22f      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004500:	2308      	movs	r3, #8
 8004502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004506:	e22b      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004508:	2310      	movs	r3, #16
 800450a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800450e:	e227      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004510:	2320      	movs	r3, #32
 8004512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004516:	e223      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004518:	2340      	movs	r3, #64	; 0x40
 800451a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800451e:	e21f      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004526:	bf00      	nop
 8004528:	e21a      	b.n	8004960 <UART_SetConfig+0x5d0>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6d      	ldr	r2, [pc, #436]	; (80046e4 <UART_SetConfig+0x354>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d132      	bne.n	800459a <UART_SetConfig+0x20a>
 8004534:	4b6a      	ldr	r3, [pc, #424]	; (80046e0 <UART_SetConfig+0x350>)
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	2b05      	cmp	r3, #5
 800453e:	d827      	bhi.n	8004590 <UART_SetConfig+0x200>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x1b8>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	08004561 	.word	0x08004561
 800454c:	08004569 	.word	0x08004569
 8004550:	08004571 	.word	0x08004571
 8004554:	08004579 	.word	0x08004579
 8004558:	08004581 	.word	0x08004581
 800455c:	08004589 	.word	0x08004589
 8004560:	2300      	movs	r3, #0
 8004562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004566:	e1fb      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004568:	2304      	movs	r3, #4
 800456a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800456e:	e1f7      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004570:	2308      	movs	r3, #8
 8004572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004576:	e1f3      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004578:	2310      	movs	r3, #16
 800457a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800457e:	e1ef      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004580:	2320      	movs	r3, #32
 8004582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004586:	e1eb      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004588:	2340      	movs	r3, #64	; 0x40
 800458a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800458e:	e1e7      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004596:	bf00      	nop
 8004598:	e1e2      	b.n	8004960 <UART_SetConfig+0x5d0>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a52      	ldr	r2, [pc, #328]	; (80046e8 <UART_SetConfig+0x358>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d132      	bne.n	800460a <UART_SetConfig+0x27a>
 80045a4:	4b4e      	ldr	r3, [pc, #312]	; (80046e0 <UART_SetConfig+0x350>)
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	2b05      	cmp	r3, #5
 80045ae:	d827      	bhi.n	8004600 <UART_SetConfig+0x270>
 80045b0:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0x228>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045d1 	.word	0x080045d1
 80045bc:	080045d9 	.word	0x080045d9
 80045c0:	080045e1 	.word	0x080045e1
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045d6:	e1c3      	b.n	8004960 <UART_SetConfig+0x5d0>
 80045d8:	2304      	movs	r3, #4
 80045da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045de:	e1bf      	b.n	8004960 <UART_SetConfig+0x5d0>
 80045e0:	2308      	movs	r3, #8
 80045e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045e6:	e1bb      	b.n	8004960 <UART_SetConfig+0x5d0>
 80045e8:	2310      	movs	r3, #16
 80045ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ee:	e1b7      	b.n	8004960 <UART_SetConfig+0x5d0>
 80045f0:	2320      	movs	r3, #32
 80045f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045f6:	e1b3      	b.n	8004960 <UART_SetConfig+0x5d0>
 80045f8:	2340      	movs	r3, #64	; 0x40
 80045fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045fe:	e1af      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004606:	bf00      	nop
 8004608:	e1aa      	b.n	8004960 <UART_SetConfig+0x5d0>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a37      	ldr	r2, [pc, #220]	; (80046ec <UART_SetConfig+0x35c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d132      	bne.n	800467a <UART_SetConfig+0x2ea>
 8004614:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <UART_SetConfig+0x350>)
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	2b05      	cmp	r3, #5
 800461e:	d827      	bhi.n	8004670 <UART_SetConfig+0x2e0>
 8004620:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <UART_SetConfig+0x298>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	08004641 	.word	0x08004641
 800462c:	08004649 	.word	0x08004649
 8004630:	08004651 	.word	0x08004651
 8004634:	08004659 	.word	0x08004659
 8004638:	08004661 	.word	0x08004661
 800463c:	08004669 	.word	0x08004669
 8004640:	2300      	movs	r3, #0
 8004642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004646:	e18b      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004648:	2304      	movs	r3, #4
 800464a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800464e:	e187      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004650:	2308      	movs	r3, #8
 8004652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004656:	e183      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004658:	2310      	movs	r3, #16
 800465a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800465e:	e17f      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004660:	2320      	movs	r3, #32
 8004662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004666:	e17b      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004668:	2340      	movs	r3, #64	; 0x40
 800466a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800466e:	e177      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004676:	bf00      	nop
 8004678:	e172      	b.n	8004960 <UART_SetConfig+0x5d0>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <UART_SetConfig+0x360>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d144      	bne.n	800470e <UART_SetConfig+0x37e>
 8004684:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <UART_SetConfig+0x350>)
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	2b05      	cmp	r3, #5
 800468e:	d839      	bhi.n	8004704 <UART_SetConfig+0x374>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0x308>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046b1 	.word	0x080046b1
 800469c:	080046b9 	.word	0x080046b9
 80046a0:	080046c1 	.word	0x080046c1
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	080046f5 	.word	0x080046f5
 80046ac:	080046fd 	.word	0x080046fd
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046b6:	e153      	b.n	8004960 <UART_SetConfig+0x5d0>
 80046b8:	2304      	movs	r3, #4
 80046ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046be:	e14f      	b.n	8004960 <UART_SetConfig+0x5d0>
 80046c0:	2308      	movs	r3, #8
 80046c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046c6:	e14b      	b.n	8004960 <UART_SetConfig+0x5d0>
 80046c8:	2310      	movs	r3, #16
 80046ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ce:	e147      	b.n	8004960 <UART_SetConfig+0x5d0>
 80046d0:	cfff69f3 	.word	0xcfff69f3
 80046d4:	58000c00 	.word	0x58000c00
 80046d8:	11fff4ff 	.word	0x11fff4ff
 80046dc:	40011000 	.word	0x40011000
 80046e0:	58024400 	.word	0x58024400
 80046e4:	40004400 	.word	0x40004400
 80046e8:	40004800 	.word	0x40004800
 80046ec:	40004c00 	.word	0x40004c00
 80046f0:	40005000 	.word	0x40005000
 80046f4:	2320      	movs	r3, #32
 80046f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046fa:	e131      	b.n	8004960 <UART_SetConfig+0x5d0>
 80046fc:	2340      	movs	r3, #64	; 0x40
 80046fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004702:	e12d      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800470a:	bf00      	nop
 800470c:	e128      	b.n	8004960 <UART_SetConfig+0x5d0>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4ab6      	ldr	r2, [pc, #728]	; (80049ec <UART_SetConfig+0x65c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d178      	bne.n	800480a <UART_SetConfig+0x47a>
 8004718:	4bb5      	ldr	r3, [pc, #724]	; (80049f0 <UART_SetConfig+0x660>)
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004720:	2b28      	cmp	r3, #40	; 0x28
 8004722:	d86d      	bhi.n	8004800 <UART_SetConfig+0x470>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <UART_SetConfig+0x39c>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	080047d1 	.word	0x080047d1
 8004730:	08004801 	.word	0x08004801
 8004734:	08004801 	.word	0x08004801
 8004738:	08004801 	.word	0x08004801
 800473c:	08004801 	.word	0x08004801
 8004740:	08004801 	.word	0x08004801
 8004744:	08004801 	.word	0x08004801
 8004748:	08004801 	.word	0x08004801
 800474c:	080047d9 	.word	0x080047d9
 8004750:	08004801 	.word	0x08004801
 8004754:	08004801 	.word	0x08004801
 8004758:	08004801 	.word	0x08004801
 800475c:	08004801 	.word	0x08004801
 8004760:	08004801 	.word	0x08004801
 8004764:	08004801 	.word	0x08004801
 8004768:	08004801 	.word	0x08004801
 800476c:	080047e1 	.word	0x080047e1
 8004770:	08004801 	.word	0x08004801
 8004774:	08004801 	.word	0x08004801
 8004778:	08004801 	.word	0x08004801
 800477c:	08004801 	.word	0x08004801
 8004780:	08004801 	.word	0x08004801
 8004784:	08004801 	.word	0x08004801
 8004788:	08004801 	.word	0x08004801
 800478c:	080047e9 	.word	0x080047e9
 8004790:	08004801 	.word	0x08004801
 8004794:	08004801 	.word	0x08004801
 8004798:	08004801 	.word	0x08004801
 800479c:	08004801 	.word	0x08004801
 80047a0:	08004801 	.word	0x08004801
 80047a4:	08004801 	.word	0x08004801
 80047a8:	08004801 	.word	0x08004801
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	08004801 	.word	0x08004801
 80047b4:	08004801 	.word	0x08004801
 80047b8:	08004801 	.word	0x08004801
 80047bc:	08004801 	.word	0x08004801
 80047c0:	08004801 	.word	0x08004801
 80047c4:	08004801 	.word	0x08004801
 80047c8:	08004801 	.word	0x08004801
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047d6:	e0c3      	b.n	8004960 <UART_SetConfig+0x5d0>
 80047d8:	2304      	movs	r3, #4
 80047da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047de:	e0bf      	b.n	8004960 <UART_SetConfig+0x5d0>
 80047e0:	2308      	movs	r3, #8
 80047e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e6:	e0bb      	b.n	8004960 <UART_SetConfig+0x5d0>
 80047e8:	2310      	movs	r3, #16
 80047ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ee:	e0b7      	b.n	8004960 <UART_SetConfig+0x5d0>
 80047f0:	2320      	movs	r3, #32
 80047f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047f6:	e0b3      	b.n	8004960 <UART_SetConfig+0x5d0>
 80047f8:	2340      	movs	r3, #64	; 0x40
 80047fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047fe:	e0af      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004806:	bf00      	nop
 8004808:	e0aa      	b.n	8004960 <UART_SetConfig+0x5d0>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a79      	ldr	r2, [pc, #484]	; (80049f4 <UART_SetConfig+0x664>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d132      	bne.n	800487a <UART_SetConfig+0x4ea>
 8004814:	4b76      	ldr	r3, [pc, #472]	; (80049f0 <UART_SetConfig+0x660>)
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	2b05      	cmp	r3, #5
 800481e:	d827      	bhi.n	8004870 <UART_SetConfig+0x4e0>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <UART_SetConfig+0x498>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	08004841 	.word	0x08004841
 800482c:	08004849 	.word	0x08004849
 8004830:	08004851 	.word	0x08004851
 8004834:	08004859 	.word	0x08004859
 8004838:	08004861 	.word	0x08004861
 800483c:	08004869 	.word	0x08004869
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004846:	e08b      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004848:	2304      	movs	r3, #4
 800484a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484e:	e087      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004850:	2308      	movs	r3, #8
 8004852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004856:	e083      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004858:	2310      	movs	r3, #16
 800485a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800485e:	e07f      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004860:	2320      	movs	r3, #32
 8004862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004866:	e07b      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004868:	2340      	movs	r3, #64	; 0x40
 800486a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800486e:	e077      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004876:	bf00      	nop
 8004878:	e072      	b.n	8004960 <UART_SetConfig+0x5d0>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a5e      	ldr	r2, [pc, #376]	; (80049f8 <UART_SetConfig+0x668>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d132      	bne.n	80048ea <UART_SetConfig+0x55a>
 8004884:	4b5a      	ldr	r3, [pc, #360]	; (80049f0 <UART_SetConfig+0x660>)
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	2b05      	cmp	r3, #5
 800488e:	d827      	bhi.n	80048e0 <UART_SetConfig+0x550>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0x508>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048b1 	.word	0x080048b1
 800489c:	080048b9 	.word	0x080048b9
 80048a0:	080048c1 	.word	0x080048c1
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b6:	e053      	b.n	8004960 <UART_SetConfig+0x5d0>
 80048b8:	2304      	movs	r3, #4
 80048ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048be:	e04f      	b.n	8004960 <UART_SetConfig+0x5d0>
 80048c0:	2308      	movs	r3, #8
 80048c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048c6:	e04b      	b.n	8004960 <UART_SetConfig+0x5d0>
 80048c8:	2310      	movs	r3, #16
 80048ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ce:	e047      	b.n	8004960 <UART_SetConfig+0x5d0>
 80048d0:	2320      	movs	r3, #32
 80048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048d6:	e043      	b.n	8004960 <UART_SetConfig+0x5d0>
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048de:	e03f      	b.n	8004960 <UART_SetConfig+0x5d0>
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048e6:	bf00      	nop
 80048e8:	e03a      	b.n	8004960 <UART_SetConfig+0x5d0>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a43      	ldr	r2, [pc, #268]	; (80049fc <UART_SetConfig+0x66c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d132      	bne.n	800495a <UART_SetConfig+0x5ca>
 80048f4:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <UART_SetConfig+0x660>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	2b05      	cmp	r3, #5
 80048fe:	d827      	bhi.n	8004950 <UART_SetConfig+0x5c0>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x578>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004921 	.word	0x08004921
 800490c:	08004929 	.word	0x08004929
 8004910:	08004931 	.word	0x08004931
 8004914:	08004939 	.word	0x08004939
 8004918:	08004941 	.word	0x08004941
 800491c:	08004949 	.word	0x08004949
 8004920:	2302      	movs	r3, #2
 8004922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004926:	e01b      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004928:	2304      	movs	r3, #4
 800492a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800492e:	e017      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004930:	2308      	movs	r3, #8
 8004932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004936:	e013      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004940:	2320      	movs	r3, #32
 8004942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004946:	e00b      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004948:	2340      	movs	r3, #64	; 0x40
 800494a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800494e:	e007      	b.n	8004960 <UART_SetConfig+0x5d0>
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <UART_SetConfig+0x5d0>
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a25      	ldr	r2, [pc, #148]	; (80049fc <UART_SetConfig+0x66c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	f040 80b8 	bne.w	8004adc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800496c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004970:	2b08      	cmp	r3, #8
 8004972:	d019      	beq.n	80049a8 <UART_SetConfig+0x618>
 8004974:	2b08      	cmp	r3, #8
 8004976:	dc04      	bgt.n	8004982 <UART_SetConfig+0x5f2>
 8004978:	2b02      	cmp	r3, #2
 800497a:	d009      	beq.n	8004990 <UART_SetConfig+0x600>
 800497c:	2b04      	cmp	r3, #4
 800497e:	d00b      	beq.n	8004998 <UART_SetConfig+0x608>
 8004980:	e042      	b.n	8004a08 <UART_SetConfig+0x678>
 8004982:	2b20      	cmp	r3, #32
 8004984:	d02b      	beq.n	80049de <UART_SetConfig+0x64e>
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d02c      	beq.n	80049e4 <UART_SetConfig+0x654>
 800498a:	2b10      	cmp	r3, #16
 800498c:	d014      	beq.n	80049b8 <UART_SetConfig+0x628>
 800498e:	e03b      	b.n	8004a08 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004990:	f7fe fe72 	bl	8003678 <HAL_RCCEx_GetD3PCLK1Freq>
 8004994:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004996:	e03d      	b.n	8004a14 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004998:	f107 0314 	add.w	r3, r7, #20
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe fe81 	bl	80036a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049a6:	e035      	b.n	8004a14 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe ffc5 	bl	800393c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049b6:	e02d      	b.n	8004a14 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <UART_SetConfig+0x660>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <UART_SetConfig+0x660>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	08db      	lsrs	r3, r3, #3
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <UART_SetConfig+0x670>)
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049d6:	e01d      	b.n	8004a14 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80049d8:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <UART_SetConfig+0x670>)
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049dc:	e01a      	b.n	8004a14 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <UART_SetConfig+0x674>)
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049e2:	e017      	b.n	8004a14 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ea:	e013      	b.n	8004a14 <UART_SetConfig+0x684>
 80049ec:	40011400 	.word	0x40011400
 80049f0:	58024400 	.word	0x58024400
 80049f4:	40007800 	.word	0x40007800
 80049f8:	40007c00 	.word	0x40007c00
 80049fc:	58000c00 	.word	0x58000c00
 8004a00:	03d09000 	.word	0x03d09000
 8004a04:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004a12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 824d 	beq.w	8004eb6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	4aad      	ldr	r2, [pc, #692]	; (8004cd8 <UART_SetConfig+0x948>)
 8004a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a2e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	6a3a      	ldr	r2, [r7, #32]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d305      	bcc.n	8004a4c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a46:	6a3a      	ldr	r2, [r7, #32]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d903      	bls.n	8004a54 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004a52:	e230      	b.n	8004eb6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	4618      	mov	r0, r3
 8004a58:	f04f 0100 	mov.w	r1, #0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	4a9d      	ldr	r2, [pc, #628]	; (8004cd8 <UART_SetConfig+0x948>)
 8004a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f04f 0400 	mov.w	r4, #0
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4623      	mov	r3, r4
 8004a70:	f7fb fc32 	bl	80002d8 <__aeabi_uldivmod>
 8004a74:	4603      	mov	r3, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	f04f 0400 	mov.w	r4, #0
 8004a84:	0214      	lsls	r4, r2, #8
 8004a86:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a8a:	020b      	lsls	r3, r1, #8
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6852      	ldr	r2, [r2, #4]
 8004a90:	0852      	lsrs	r2, r2, #1
 8004a92:	4611      	mov	r1, r2
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	eb13 0b01 	adds.w	fp, r3, r1
 8004a9c:	eb44 0c02 	adc.w	ip, r4, r2
 8004aa0:	4658      	mov	r0, fp
 8004aa2:	4661      	mov	r1, ip
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	461a      	mov	r2, r3
 8004aae:	4623      	mov	r3, r4
 8004ab0:	f7fb fc12 	bl	80002d8 <__aeabi_uldivmod>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac0:	d308      	bcc.n	8004ad4 <UART_SetConfig+0x744>
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac8:	d204      	bcs.n	8004ad4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	e1f0      	b.n	8004eb6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ada:	e1ec      	b.n	8004eb6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae4:	f040 8100 	bne.w	8004ce8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8004ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	f200 80b7 	bhi.w	8004c60 <UART_SetConfig+0x8d0>
 8004af2:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <UART_SetConfig+0x768>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004bfd 	.word	0x08004bfd
 8004afc:	08004c05 	.word	0x08004c05
 8004b00:	08004c61 	.word	0x08004c61
 8004b04:	08004c61 	.word	0x08004c61
 8004b08:	08004c0d 	.word	0x08004c0d
 8004b0c:	08004c61 	.word	0x08004c61
 8004b10:	08004c61 	.word	0x08004c61
 8004b14:	08004c61 	.word	0x08004c61
 8004b18:	08004c1d 	.word	0x08004c1d
 8004b1c:	08004c61 	.word	0x08004c61
 8004b20:	08004c61 	.word	0x08004c61
 8004b24:	08004c61 	.word	0x08004c61
 8004b28:	08004c61 	.word	0x08004c61
 8004b2c:	08004c61 	.word	0x08004c61
 8004b30:	08004c61 	.word	0x08004c61
 8004b34:	08004c61 	.word	0x08004c61
 8004b38:	08004c2d 	.word	0x08004c2d
 8004b3c:	08004c61 	.word	0x08004c61
 8004b40:	08004c61 	.word	0x08004c61
 8004b44:	08004c61 	.word	0x08004c61
 8004b48:	08004c61 	.word	0x08004c61
 8004b4c:	08004c61 	.word	0x08004c61
 8004b50:	08004c61 	.word	0x08004c61
 8004b54:	08004c61 	.word	0x08004c61
 8004b58:	08004c61 	.word	0x08004c61
 8004b5c:	08004c61 	.word	0x08004c61
 8004b60:	08004c61 	.word	0x08004c61
 8004b64:	08004c61 	.word	0x08004c61
 8004b68:	08004c61 	.word	0x08004c61
 8004b6c:	08004c61 	.word	0x08004c61
 8004b70:	08004c61 	.word	0x08004c61
 8004b74:	08004c61 	.word	0x08004c61
 8004b78:	08004c53 	.word	0x08004c53
 8004b7c:	08004c61 	.word	0x08004c61
 8004b80:	08004c61 	.word	0x08004c61
 8004b84:	08004c61 	.word	0x08004c61
 8004b88:	08004c61 	.word	0x08004c61
 8004b8c:	08004c61 	.word	0x08004c61
 8004b90:	08004c61 	.word	0x08004c61
 8004b94:	08004c61 	.word	0x08004c61
 8004b98:	08004c61 	.word	0x08004c61
 8004b9c:	08004c61 	.word	0x08004c61
 8004ba0:	08004c61 	.word	0x08004c61
 8004ba4:	08004c61 	.word	0x08004c61
 8004ba8:	08004c61 	.word	0x08004c61
 8004bac:	08004c61 	.word	0x08004c61
 8004bb0:	08004c61 	.word	0x08004c61
 8004bb4:	08004c61 	.word	0x08004c61
 8004bb8:	08004c61 	.word	0x08004c61
 8004bbc:	08004c61 	.word	0x08004c61
 8004bc0:	08004c61 	.word	0x08004c61
 8004bc4:	08004c61 	.word	0x08004c61
 8004bc8:	08004c61 	.word	0x08004c61
 8004bcc:	08004c61 	.word	0x08004c61
 8004bd0:	08004c61 	.word	0x08004c61
 8004bd4:	08004c61 	.word	0x08004c61
 8004bd8:	08004c61 	.word	0x08004c61
 8004bdc:	08004c61 	.word	0x08004c61
 8004be0:	08004c61 	.word	0x08004c61
 8004be4:	08004c61 	.word	0x08004c61
 8004be8:	08004c61 	.word	0x08004c61
 8004bec:	08004c61 	.word	0x08004c61
 8004bf0:	08004c61 	.word	0x08004c61
 8004bf4:	08004c61 	.word	0x08004c61
 8004bf8:	08004c59 	.word	0x08004c59
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bfc:	f7fd fdf6 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 8004c00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004c02:	e033      	b.n	8004c6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c04:	f7fd fe08 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 8004c08:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004c0a:	e02f      	b.n	8004c6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe fd47 	bl	80036a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c1a:	e027      	b.n	8004c6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c1c:	f107 0308 	add.w	r3, r7, #8
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe fe8b 	bl	800393c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c2a:	e01f      	b.n	8004c6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <UART_SetConfig+0x94c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <UART_SetConfig+0x94c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	08db      	lsrs	r3, r3, #3
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <UART_SetConfig+0x950>)
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c4a:	e00f      	b.n	8004c6c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <UART_SetConfig+0x950>)
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c50:	e00c      	b.n	8004c6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <UART_SetConfig+0x954>)
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c56:	e009      	b.n	8004c6c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c5e:	e005      	b.n	8004c6c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004c6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8121 	beq.w	8004eb6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	4a17      	ldr	r2, [pc, #92]	; (8004cd8 <UART_SetConfig+0x948>)
 8004c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c86:	005a      	lsls	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	441a      	add	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	d916      	bls.n	8004cd0 <UART_SetConfig+0x940>
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d212      	bcs.n	8004cd0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f023 030f 	bic.w	r3, r3, #15
 8004cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	e0f2      	b.n	8004eb6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004cd6:	e0ee      	b.n	8004eb6 <UART_SetConfig+0xb26>
 8004cd8:	08005574 	.word	0x08005574
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	03d09000 	.word	0x03d09000
 8004ce4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	f200 80b7 	bhi.w	8004e60 <UART_SetConfig+0xad0>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0x968>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004dfd 	.word	0x08004dfd
 8004cfc:	08004e05 	.word	0x08004e05
 8004d00:	08004e61 	.word	0x08004e61
 8004d04:	08004e61 	.word	0x08004e61
 8004d08:	08004e0d 	.word	0x08004e0d
 8004d0c:	08004e61 	.word	0x08004e61
 8004d10:	08004e61 	.word	0x08004e61
 8004d14:	08004e61 	.word	0x08004e61
 8004d18:	08004e1d 	.word	0x08004e1d
 8004d1c:	08004e61 	.word	0x08004e61
 8004d20:	08004e61 	.word	0x08004e61
 8004d24:	08004e61 	.word	0x08004e61
 8004d28:	08004e61 	.word	0x08004e61
 8004d2c:	08004e61 	.word	0x08004e61
 8004d30:	08004e61 	.word	0x08004e61
 8004d34:	08004e61 	.word	0x08004e61
 8004d38:	08004e2d 	.word	0x08004e2d
 8004d3c:	08004e61 	.word	0x08004e61
 8004d40:	08004e61 	.word	0x08004e61
 8004d44:	08004e61 	.word	0x08004e61
 8004d48:	08004e61 	.word	0x08004e61
 8004d4c:	08004e61 	.word	0x08004e61
 8004d50:	08004e61 	.word	0x08004e61
 8004d54:	08004e61 	.word	0x08004e61
 8004d58:	08004e61 	.word	0x08004e61
 8004d5c:	08004e61 	.word	0x08004e61
 8004d60:	08004e61 	.word	0x08004e61
 8004d64:	08004e61 	.word	0x08004e61
 8004d68:	08004e61 	.word	0x08004e61
 8004d6c:	08004e61 	.word	0x08004e61
 8004d70:	08004e61 	.word	0x08004e61
 8004d74:	08004e61 	.word	0x08004e61
 8004d78:	08004e53 	.word	0x08004e53
 8004d7c:	08004e61 	.word	0x08004e61
 8004d80:	08004e61 	.word	0x08004e61
 8004d84:	08004e61 	.word	0x08004e61
 8004d88:	08004e61 	.word	0x08004e61
 8004d8c:	08004e61 	.word	0x08004e61
 8004d90:	08004e61 	.word	0x08004e61
 8004d94:	08004e61 	.word	0x08004e61
 8004d98:	08004e61 	.word	0x08004e61
 8004d9c:	08004e61 	.word	0x08004e61
 8004da0:	08004e61 	.word	0x08004e61
 8004da4:	08004e61 	.word	0x08004e61
 8004da8:	08004e61 	.word	0x08004e61
 8004dac:	08004e61 	.word	0x08004e61
 8004db0:	08004e61 	.word	0x08004e61
 8004db4:	08004e61 	.word	0x08004e61
 8004db8:	08004e61 	.word	0x08004e61
 8004dbc:	08004e61 	.word	0x08004e61
 8004dc0:	08004e61 	.word	0x08004e61
 8004dc4:	08004e61 	.word	0x08004e61
 8004dc8:	08004e61 	.word	0x08004e61
 8004dcc:	08004e61 	.word	0x08004e61
 8004dd0:	08004e61 	.word	0x08004e61
 8004dd4:	08004e61 	.word	0x08004e61
 8004dd8:	08004e61 	.word	0x08004e61
 8004ddc:	08004e61 	.word	0x08004e61
 8004de0:	08004e61 	.word	0x08004e61
 8004de4:	08004e61 	.word	0x08004e61
 8004de8:	08004e61 	.word	0x08004e61
 8004dec:	08004e61 	.word	0x08004e61
 8004df0:	08004e61 	.word	0x08004e61
 8004df4:	08004e61 	.word	0x08004e61
 8004df8:	08004e59 	.word	0x08004e59
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dfc:	f7fd fcf6 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 8004e00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004e02:	e033      	b.n	8004e6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e04:	f7fd fd08 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 8004e08:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004e0a:	e02f      	b.n	8004e6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fc47 	bl	80036a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e1a:	e027      	b.n	8004e6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e1c:	f107 0308 	add.w	r3, r7, #8
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fd8b 	bl	800393c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e2a:	e01f      	b.n	8004e6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <UART_SetConfig+0xb50>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e38:	4b29      	ldr	r3, [pc, #164]	; (8004ee0 <UART_SetConfig+0xb50>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	08db      	lsrs	r3, r3, #3
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <UART_SetConfig+0xb54>)
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
 8004e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e4a:	e00f      	b.n	8004e6c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8004e4c:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <UART_SetConfig+0xb54>)
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e50:	e00c      	b.n	8004e6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e52:	4b25      	ldr	r3, [pc, #148]	; (8004ee8 <UART_SetConfig+0xb58>)
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e56:	e009      	b.n	8004e6c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e5e:	e005      	b.n	8004e6c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004e6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d021      	beq.n	8004eb6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <UART_SetConfig+0xb5c>)
 8004e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	441a      	add	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	2b0f      	cmp	r3, #15
 8004e9c:	d908      	bls.n	8004eb0 <UART_SetConfig+0xb20>
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea4:	d204      	bcs.n	8004eb0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	e002      	b.n	8004eb6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004ed2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3738      	adds	r7, #56	; 0x38
 8004eda:	46bd      	mov	sp, r7
 8004edc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	03d09000 	.word	0x03d09000
 8004ee8:	003d0900 	.word	0x003d0900
 8004eec:	08005574 	.word	0x08005574

08004ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01a      	beq.n	8005006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fee:	d10a      	bne.n	8005006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005044:	f7fb fec6 	bl	8000dd4 <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b08      	cmp	r3, #8
 8005056:	d10e      	bne.n	8005076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f82c 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e022      	b.n	80050bc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d10e      	bne.n	80050a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f816 	bl	80050c4 <UART_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e00c      	b.n	80050bc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d4:	e062      	b.n	800519c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d05e      	beq.n	800519c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fb fe79 	bl	8000dd4 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11d      	bne.n	8005130 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005102:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e045      	b.n	80051bc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d02e      	beq.n	800519c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514c:	d126      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005156:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005166:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e00f      	b.n	80051bc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4013      	ands	r3, r2
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d08d      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6899      	ldr	r1, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <UART_EndRxTransfer+0x44>)
 80051e8:	400b      	ands	r3, r1
 80051ea:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	effffffe 	.word	0xeffffffe

0800520c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff f8a6 	bl	800437c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff f882 	bl	8004368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_UARTEx_DisableFifoMode+0x16>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e027      	b.n	800530e <HAL_UARTEx_DisableFifoMode+0x66>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2224      	movs	r2, #36	; 0x24
 80052ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800532e:	2302      	movs	r3, #2
 8005330:	e02d      	b.n	800538e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2224      	movs	r2, #36	; 0x24
 800533e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f850 	bl	8005414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e02d      	b.n	800540a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2224      	movs	r2, #36	; 0x24
 80053ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0201 	bic.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f812 	bl	8005414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800541c:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <UARTEx_SetNbDataToProcess+0xc8>)
 800541e:	f107 0314 	add.w	r3, r7, #20
 8005422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005426:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800542a:	4a2d      	ldr	r2, [pc, #180]	; (80054e0 <UARTEx_SetNbDataToProcess+0xcc>)
 800542c:	f107 030c 	add.w	r3, r7, #12
 8005430:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005434:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005450:	e03d      	b.n	80054ce <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005452:	2310      	movs	r3, #16
 8005454:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005456:	2310      	movs	r3, #16
 8005458:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	0e5b      	lsrs	r3, r3, #25
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	0f5b      	lsrs	r3, r3, #29
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800547a:	7fbb      	ldrb	r3, [r7, #30]
 800547c:	7f3a      	ldrb	r2, [r7, #28]
 800547e:	f107 0120 	add.w	r1, r7, #32
 8005482:	440a      	add	r2, r1
 8005484:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005488:	fb02 f303 	mul.w	r3, r2, r3
 800548c:	7f3a      	ldrb	r2, [r7, #28]
 800548e:	f107 0120 	add.w	r1, r7, #32
 8005492:	440a      	add	r2, r1
 8005494:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005498:	fb93 f3f2 	sdiv	r3, r3, r2
 800549c:	b29a      	uxth	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80054a4:	7ffb      	ldrb	r3, [r7, #31]
 80054a6:	7f7a      	ldrb	r2, [r7, #29]
 80054a8:	f107 0120 	add.w	r1, r7, #32
 80054ac:	440a      	add	r2, r1
 80054ae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	7f7a      	ldrb	r2, [r7, #29]
 80054b8:	f107 0120 	add.w	r1, r7, #32
 80054bc:	440a      	add	r2, r1
 80054be:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80054c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80054ce:	bf00      	nop
 80054d0:	3724      	adds	r7, #36	; 0x24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	08005554 	.word	0x08005554
 80054e0:	0800555c 	.word	0x0800555c

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4e0d      	ldr	r6, [pc, #52]	; (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	; (8005520 <__libc_init_array+0x3c>)
 80054ea:	1ba4      	subs	r4, r4, r6
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2500      	movs	r5, #0
 80054f0:	42a5      	cmp	r5, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4e0b      	ldr	r6, [pc, #44]	; (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	; (8005528 <__libc_init_array+0x44>)
 80054f8:	f000 f820 	bl	800553c <_init>
 80054fc:	1ba4      	subs	r4, r4, r6
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2500      	movs	r5, #0
 8005502:	42a5      	cmp	r5, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800550c:	4798      	blx	r3
 800550e:	3501      	adds	r5, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005516:	4798      	blx	r3
 8005518:	3501      	adds	r5, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	08005594 	.word	0x08005594
 8005520:	08005594 	.word	0x08005594
 8005524:	08005594 	.word	0x08005594
 8005528:	08005598 	.word	0x08005598

0800552c <memset>:
 800552c:	4402      	add	r2, r0
 800552e:	4603      	mov	r3, r0
 8005530:	4293      	cmp	r3, r2
 8005532:	d100      	bne.n	8005536 <memset+0xa>
 8005534:	4770      	bx	lr
 8005536:	f803 1b01 	strb.w	r1, [r3], #1
 800553a:	e7f9      	b.n	8005530 <memset+0x4>

0800553c <_init>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	bf00      	nop
 8005540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005542:	bc08      	pop	{r3}
 8005544:	469e      	mov	lr, r3
 8005546:	4770      	bx	lr

08005548 <_fini>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	bf00      	nop
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr
