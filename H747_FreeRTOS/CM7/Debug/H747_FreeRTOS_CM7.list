
H747_FreeRTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009844  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08009ae4  08009ae4  00019ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ba0  08009ba0  00019ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ba8  08009ba8  00019ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08009bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000046fc  20000014  08009bc4  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004710  08009bc4  00024710  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a00a  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004a99  00000000  00000000  0004a04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000017d0  00000000  00000000  0004eae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001608  00000000  00000000  000502b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004311b  00000000  00000000  000518c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00017306  00000000  00000000  000949db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001a7a0e  00000000  00000000  000abce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002536ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000624c  00000000  00000000  0025376c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009acc 	.word	0x08009acc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	08009acc 	.word	0x08009acc

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e4:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <SystemInit+0x104>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ea:	4a3e      	ldr	r2, [pc, #248]	; (80006e4 <SystemInit+0x104>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f4:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <SystemInit+0x104>)
 80005f6:	691b      	ldr	r3, [r3, #16]
 80005f8:	4a3a      	ldr	r2, [pc, #232]	; (80006e4 <SystemInit+0x104>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0x108>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f003 030f 	and.w	r3, r3, #15
 8000608:	2b06      	cmp	r3, #6
 800060a:	d807      	bhi.n	800061c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800060c:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <SystemInit+0x108>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f023 030f 	bic.w	r3, r3, #15
 8000614:	4a34      	ldr	r2, [pc, #208]	; (80006e8 <SystemInit+0x108>)
 8000616:	f043 0307 	orr.w	r3, r3, #7
 800061a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800061c:	4b33      	ldr	r3, [pc, #204]	; (80006ec <SystemInit+0x10c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x10c>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <SystemInit+0x10c>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062e:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <SystemInit+0x10c>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	492e      	ldr	r1, [pc, #184]	; (80006ec <SystemInit+0x10c>)
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x110>)
 8000636:	4013      	ands	r3, r2
 8000638:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemInit+0x108>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	2b07      	cmp	r3, #7
 8000644:	d907      	bls.n	8000656 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemInit+0x108>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f023 030f 	bic.w	r3, r3, #15
 800064e:	4a26      	ldr	r2, [pc, #152]	; (80006e8 <SystemInit+0x108>)
 8000650:	f043 0307 	orr.w	r3, r3, #7
 8000654:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000656:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemInit+0x10c>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemInit+0x10c>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemInit+0x10c>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <SystemInit+0x10c>)
 800066a:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SystemInit+0x114>)
 800066c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemInit+0x10c>)
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemInit+0x118>)
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <SystemInit+0x10c>)
 8000676:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemInit+0x11c>)
 8000678:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <SystemInit+0x10c>)
 800067c:	2200      	movs	r2, #0
 800067e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <SystemInit+0x10c>)
 8000682:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <SystemInit+0x11c>)
 8000684:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <SystemInit+0x10c>)
 8000688:	2200      	movs	r2, #0
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <SystemInit+0x10c>)
 800068e:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <SystemInit+0x11c>)
 8000690:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <SystemInit+0x10c>)
 8000694:	2200      	movs	r2, #0
 8000696:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <SystemInit+0x10c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <SystemInit+0x10c>)
 800069e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <SystemInit+0x10c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <SystemInit+0x120>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <SystemInit+0x120>)
 80006b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x124>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <SystemInit+0x128>)
 80006bc:	4013      	ands	r3, r2
 80006be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c2:	d202      	bcs.n	80006ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x12c>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <SystemInit+0x130>)
 80006cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <SystemInit+0x104>)
 80006d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	52002000 	.word	0x52002000
 80006ec:	58024400 	.word	0x58024400
 80006f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f4:	02020200 	.word	0x02020200
 80006f8:	01ff0000 	.word	0x01ff0000
 80006fc:	01010280 	.word	0x01010280
 8000700:	580000c0 	.word	0x580000c0
 8000704:	5c001000 	.word	0x5c001000
 8000708:	ffff0000 	.word	0xffff0000
 800070c:	51008108 	.word	0x51008108
 8000710:	52004000 	.word	0x52004000

08000714 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4a07      	ldr	r2, [pc, #28]	; (8000740 <vApplicationGetIdleTaskMemory+0x2c>)
 8000724:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	4a06      	ldr	r2, [pc, #24]	; (8000744 <vApplicationGetIdleTaskMemory+0x30>)
 800072a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000030 	.word	0x20000030
 8000744:	20000084 	.word	0x20000084

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b5b0      	push	{r4, r5, r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800074e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000754:	bf00      	nop
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <main+0xd4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d004      	beq.n	800076c <main+0x24>
 8000762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000764:	1e5a      	subs	r2, r3, #1
 8000766:	627a      	str	r2, [r7, #36]	; 0x24
 8000768:	2b00      	cmp	r3, #0
 800076a:	dcf4      	bgt.n	8000756 <main+0xe>
	if ( timeout < 0 )
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	2b00      	cmp	r3, #0
 8000770:	da01      	bge.n	8000776 <main+0x2e>
	{
	Error_Handler();
 8000772:	f000 fad1 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000776:	f000 fd1b 	bl	80011b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800077a:	f000 f855 	bl	8000828 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <main+0xd4>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	4a25      	ldr	r2, [pc, #148]	; (800081c <main+0xd4>)
 8000786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <main+0xd4>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800079c:	2000      	movs	r0, #0
 800079e:	f001 fae5 	bl	8001d6c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80007a2:	2100      	movs	r1, #0
 80007a4:	2000      	movs	r0, #0
 80007a6:	f001 fafb 	bl	8001da0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80007aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007b0:	bf00      	nop
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <main+0xd4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d104      	bne.n	80007c8 <main+0x80>
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	1e5a      	subs	r2, r3, #1
 80007c2:	627a      	str	r2, [r7, #36]	; 0x24
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dcf4      	bgt.n	80007b2 <main+0x6a>
	if ( timeout < 0 )
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	da01      	bge.n	80007d2 <main+0x8a>
	{
	Error_Handler();
 80007ce:	f000 faa3 	bl	8000d18 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007d2:	f000 f9f3 	bl	8000bbc <MX_GPIO_Init>
	MX_SDMMC1_SD_Init();
 80007d6:	f000 f8a5 	bl	8000924 <MX_SDMMC1_SD_Init>
	MX_SPI5_Init();
 80007da:	f000 f8c9 	bl	8000970 <MX_SPI5_Init>
	MX_UART8_Init();
 80007de:	f000 f909 	bl	80009f4 <MX_UART8_Init>
	MX_USART1_UART_Init();
 80007e2:	f000 f953 	bl	8000a8c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80007e6:	f000 f99d 	bl	8000b24 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 80007ea:	f006 ff45 	bl	8007678 <MX_FATFS_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <main+0xd8>)
 80007f0:	f107 0408 	add.w	r4, r7, #8
 80007f4:	461d      	mov	r5, r3
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f007 f9eb 	bl	8007be4 <osThreadCreate>
 800080e:	4602      	mov	r2, r0
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <main+0xdc>)
 8000812:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000814:	f007 f9c3 	bl	8007b9e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000818:	e7fe      	b.n	8000818 <main+0xd0>
 800081a:	bf00      	nop
 800081c:	58024400 	.word	0x58024400
 8000820:	08009b20 	.word	0x08009b20
 8000824:	20003fe4 	.word	0x20003fe4

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09e      	sub	sp, #120	; 0x78
 800082c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	/*!< Supply configuration update enable */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000834:	2004      	movs	r0, #4
 8000836:	f001 fac7 	bl	8001dc8 <HAL_PWREx_ConfigSupply>

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <SystemClock_Config+0xf4>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	4a36      	ldr	r2, [pc, #216]	; (800091c <SystemClock_Config+0xf4>)
 8000844:	f023 0301 	bic.w	r3, r3, #1
 8000848:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084a:	4b34      	ldr	r3, [pc, #208]	; (800091c <SystemClock_Config+0xf4>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b32      	ldr	r3, [pc, #200]	; (8000920 <SystemClock_Config+0xf8>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a31      	ldr	r2, [pc, #196]	; (8000920 <SystemClock_Config+0xf8>)
 800085a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <SystemClock_Config+0xf8>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <SystemClock_Config+0xf8>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087a:	d1f8      	bne.n	800086e <SystemClock_Config+0x46>

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	2302      	movs	r3, #2
 8000894:	633b      	str	r3, [r7, #48]	; 0x30

	RCC_OscInitStruct.PLL.PLLM = 5;
 8000896:	2305      	movs	r3, #5
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 160;
 800089a:	23a0      	movs	r3, #160	; 0xa0
 800089c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80008aa:	2304      	movs	r3, #4
 80008ac:	643b      	str	r3, [r7, #64]	; 0x40

	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008b2:	2308      	movs	r3, #8
 80008b4:	64bb      	str	r3, [r7, #72]	; 0x48
	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fade 	bl	8001e7c <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 80008c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xaa>
	{
	Error_Handler();
 80008ce:	f000 fa23 	bl	8000d18 <Error_Handler>
	}

	/* Select PLL as system clock source and configure  bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	657b      	str	r3, [r7, #84]	; 0x54
								 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2303      	movs	r3, #3
 80008d8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008de:	2308      	movs	r3, #8
 80008e0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	673b      	str	r3, [r7, #112]	; 0x70
	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80008f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f8:	2104      	movs	r1, #4
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fece 	bl	800269c <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 8000906:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xea>
	{
	Error_Handler();
 800090e:	f000 fa03 	bl	8000d18 <Error_Handler>

	__HAL_RCC_SYSCFG_CLK_ENABLE() ;

	HAL_EnableCompensationCell();
	*/
}
 8000912:	bf00      	nop
 8000914:	3778      	adds	r7, #120	; 0x78
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	58000400 	.word	0x58000400
 8000920:	58024800 	.word	0x58024800

08000924 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_SDMMC1_SD_Init+0x44>)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <MX_SDMMC1_SD_Init+0x48>)
 800092c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_SDMMC1_SD_Init+0x44>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_SDMMC1_SD_Init+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_SDMMC1_SD_Init+0x44>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_SDMMC1_SD_Init+0x44>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_SDMMC1_SD_Init+0x44>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_SDMMC1_SD_Init+0x44>)
 800094e:	2201      	movs	r2, #1
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_SDMMC1_SD_Init+0x44>)
 8000954:	f003 f898 	bl	8003a88 <HAL_SD_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800095e:	f000 f9db 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20004070 	.word	0x20004070
 800096c:	52007000 	.word	0x52007000

08000970 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
//  if (HAL_SPI_Init(&hspi5) != HAL_OK)
//  {
//    Error_Handler();
//  }
  /* USER CODE BEGIN SPI5_Init 2 */
	hspi5.Instance               = SPI5;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_SPI5_Init+0x7c>)
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <MX_SPI5_Init+0x80>)
 8000978:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode              = SPI_MODE_MASTER;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_SPI5_Init+0x7c>)
 800097c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000980:	605a      	str	r2, [r3, #4]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_SPI5_Init+0x7c>)
 8000984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000988:	61da      	str	r2, [r3, #28]
	hspi5.Init.Direction         = SPI_DIRECTION_2LINES;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_SPI5_Init+0x7c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
	hspi5.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_SPI5_Init+0x7c>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
	hspi5.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_SPI5_Init+0x7c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
	hspi5.Init.DataSize          = SPI_DATASIZE_8BIT;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_SPI5_Init+0x7c>)
 800099e:	2207      	movs	r2, #7
 80009a0:	60da      	str	r2, [r3, #12]
	hspi5.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_SPI5_Init+0x7c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode            = SPI_TIMODE_DISABLE;
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_SPI5_Init+0x7c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_SPI5_Init+0x7c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial     = 7;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <MX_SPI5_Init+0x7c>)
 80009b6:	2207      	movs	r2, #7
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi5.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_SPI5_Init+0x7c>)
 80009bc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
	hspi5.Init.NSS               = SPI_NSS_SOFT;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_SPI5_Init+0x7c>)
 80009c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009c8:	619a      	str	r2, [r3, #24]
	hspi5.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_SPI5_Init+0x7c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
	hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_SPI5_Init+0x7c>)
 80009d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80009d6:	655a      	str	r2, [r3, #84]	; 0x54
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_SPI5_Init+0x7c>)
 80009da:	f004 fa49 	bl	8004e70 <HAL_SPI_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_SPI5_Init+0x78>
	{
	Error_Handler();
 80009e4:	f000 f998 	bl	8000d18 <Error_Handler>
	}
  /* USER CODE END SPI5_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20003fe8 	.word	0x20003fe8
 80009f0:	40015000 	.word	0x40015000

080009f4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_UART8_Init+0x90>)
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <MX_UART8_Init+0x94>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a3e:	f004 fdee 	bl	800561e <HAL_UART_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000a48:	f000 f966 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a50:	f005 ff8f 	bl	8006972 <HAL_UARTEx_SetTxFifoThreshold>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000a5a:	f000 f95d 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a62:	f005 ffc4 	bl	80069ee <HAL_UARTEx_SetRxFifoThreshold>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000a6c:	f000 f954 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_UART8_Init+0x90>)
 8000a72:	f005 ff45 	bl	8006900 <HAL_UARTEx_DisableFifoMode>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000a7c:	f000 f94c 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20004184 	.word	0x20004184
 8000a88:	40007c00 	.word	0x40007c00

08000a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ad6:	f004 fda2 	bl	800561e <HAL_UART_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ae0:	f000 f91a 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ae8:	f005 ff43 	bl	8006972 <HAL_UARTEx_SetTxFifoThreshold>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000af2:	f000 f911 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000afa:	f005 ff78 	bl	80069ee <HAL_UARTEx_SetRxFifoThreshold>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b04:	f000 f908 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000b0a:	f005 fef9 	bl	8006900 <HAL_UARTEx_DisableFifoMode>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b14:	f000 f900 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200040f4 	.word	0x200040f4
 8000b20:	40011000 	.word	0x40011000

08000b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b6e:	f004 fd56 	bl	800561e <HAL_UART_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b78:	f000 f8ce 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b80:	f005 fef7 	bl	8006972 <HAL_UARTEx_SetTxFifoThreshold>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8a:	f000 f8c5 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b92:	f005 ff2c 	bl	80069ee <HAL_UARTEx_SetRxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 f8bc 	bl	8000d18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000ba2:	f005 fead 	bl	8006900 <HAL_UARTEx_DisableFifoMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 f8b4 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20004210 	.word	0x20004210
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	; 0x30
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a48      	ldr	r2, [pc, #288]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	4a41      	ldr	r2, [pc, #260]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c00:	4b3e      	ldr	r3, [pc, #248]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	4a39      	ldr	r2, [pc, #228]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a32      	ldr	r2, [pc, #200]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_GPIO_Init+0x140>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000caa:	4815      	ldr	r0, [pc, #84]	; (8000d00 <MX_GPIO_Init+0x144>)
 8000cac:	f001 f844 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <MX_GPIO_Init+0x148>)
 8000cb6:	f001 f83f 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <MX_GPIO_Init+0x144>)
 8000cd4:	f000 fe80 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cd8:	2320      	movs	r3, #32
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_GPIO_Init+0x148>)
 8000cf0:	f000 fe72 	bl	80019d8 <HAL_GPIO_Init>

}
 8000cf4:	bf00      	nop
 8000cf6:	3730      	adds	r7, #48	; 0x30
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58022000 	.word	0x58022000
 8000d04:	58022400 	.word	0x58022400

08000d08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f006 ffb3 	bl	8007c7c <osDelay>
 8000d16:	e7fb      	b.n	8000d10 <StartDefaultTask+0x8>

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <Error_Handler+0x6>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_MspInit+0x38>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_MspInit+0x38>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_MspInit+0x38>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	210f      	movs	r1, #15
 8000d48:	f06f 0001 	mvn.w	r0, #1
 8000d4c:	f000 fbcb 	bl	80014e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	58024400 	.word	0x58024400

08000d5c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <HAL_SD_MspInit+0xc8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d14d      	bne.n	8000e1a <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <HAL_SD_MspInit+0xcc>)
 8000d80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_SD_MspInit+0xcc>)
 8000d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_SD_MspInit+0xcc>)
 8000d90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <HAL_SD_MspInit+0xcc>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <HAL_SD_MspInit+0xcc>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <HAL_SD_MspInit+0xcc>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_SD_MspInit+0xcc>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_SD_MspInit+0xcc>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_SD_MspInit+0xcc>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000dd8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000dea:	230c      	movs	r3, #12
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <HAL_SD_MspInit+0xd0>)
 8000df6:	f000 fdef 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <HAL_SD_MspInit+0xd4>)
 8000e16:	f000 fddf 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	52007000 	.word	0x52007000
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020800 	.word	0x58020800
 8000e30:	58020c00 	.word	0x58020c00

08000e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2e      	ldr	r2, [pc, #184]	; (8000f0c <HAL_SPI_MspInit+0xd8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d155      	bne.n	8000f02 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000e56:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <HAL_SPI_MspInit+0xdc>)
 8000e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e5c:	4a2c      	ldr	r2, [pc, #176]	; (8000f10 <HAL_SPI_MspInit+0xdc>)
 8000e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <HAL_SPI_MspInit+0xdc>)
 8000e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_SPI_MspInit+0xdc>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7a:	4a25      	ldr	r2, [pc, #148]	; (8000f10 <HAL_SPI_MspInit+0xdc>)
 8000e7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_SPI_MspInit+0xdc>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_SPI_MspInit+0xdc>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <HAL_SPI_MspInit+0xdc>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_SPI_MspInit+0xdc>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <HAL_SPI_MspInit+0xe0>)
 8000ecc:	f000 fd84 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000ed0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	480a      	ldr	r0, [pc, #40]	; (8000f18 <HAL_SPI_MspInit+0xe4>)
 8000eee:	f000 fd73 	bl	80019d8 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	2055      	movs	r0, #85	; 0x55
 8000ef8:	f000 faf5 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8000efc:	2055      	movs	r0, #85	; 0x55
 8000efe:	f000 fb0c 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40015000 	.word	0x40015000
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58022800 	.word	0x58022800
 8000f18:	58022400 	.word	0x58022400

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	; 0x38
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a5b      	ldr	r2, [pc, #364]	; (80010a8 <HAL_UART_MspInit+0x18c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d137      	bne.n	8000fae <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000f3e:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f44:	4a59      	ldr	r2, [pc, #356]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f4e:	4b57      	ldr	r3, [pc, #348]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f58:	623b      	str	r3, [r7, #32]
 8000f5a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f5c:	4b53      	ldr	r3, [pc, #332]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	4a52      	ldr	r2, [pc, #328]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6c:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000f7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4846      	ldr	r0, [pc, #280]	; (80010b0 <HAL_UART_MspInit+0x194>)
 8000f98:	f000 fd1e 	bl	80019d8 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2105      	movs	r1, #5
 8000fa0:	2053      	movs	r0, #83	; 0x53
 8000fa2:	f000 faa0 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000fa6:	2053      	movs	r0, #83	; 0x53
 8000fa8:	f000 fab7 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fac:	e077      	b.n	800109e <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a40      	ldr	r2, [pc, #256]	; (80010b4 <HAL_UART_MspInit+0x198>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d137      	bne.n	8001028 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb8:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fbe:	4a3b      	ldr	r2, [pc, #236]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fc8:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	61bb      	str	r3, [r7, #24]
 8000fd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a33      	ldr	r2, [pc, #204]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <HAL_UART_MspInit+0x190>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ff4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001006:	2307      	movs	r3, #7
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	4829      	ldr	r0, [pc, #164]	; (80010b8 <HAL_UART_MspInit+0x19c>)
 8001012:	f000 fce1 	bl	80019d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2105      	movs	r1, #5
 800101a:	2025      	movs	r0, #37	; 0x25
 800101c:	f000 fa63 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001020:	2025      	movs	r0, #37	; 0x25
 8001022:	f000 fa7a 	bl	800151a <HAL_NVIC_EnableIRQ>
}
 8001026:	e03a      	b.n	800109e <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a23      	ldr	r2, [pc, #140]	; (80010bc <HAL_UART_MspInit+0x1a0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d135      	bne.n	800109e <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_UART_MspInit+0x190>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001038:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <HAL_UART_MspInit+0x190>)
 800103a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_UART_MspInit+0x190>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_UART_MspInit+0x190>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <HAL_UART_MspInit+0x190>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_UART_MspInit+0x190>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800106e:	2360      	movs	r3, #96	; 0x60
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107e:	2307      	movs	r3, #7
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <HAL_UART_MspInit+0x1a4>)
 800108a:	f000 fca5 	bl	80019d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2105      	movs	r1, #5
 8001092:	2026      	movs	r0, #38	; 0x26
 8001094:	f000 fa27 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001098:	2026      	movs	r0, #38	; 0x26
 800109a:	f000 fa3e 	bl	800151a <HAL_NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3738      	adds	r7, #56	; 0x38
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40007c00 	.word	0x40007c00
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58022400 	.word	0x58022400
 80010b4:	40011000 	.word	0x40011000
 80010b8:	58020000 	.word	0x58020000
 80010bc:	40004400 	.word	0x40004400
 80010c0:	58020c00 	.word	0x58020c00

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f8ce 	bl	8001294 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010f8:	f008 fc34 	bl	8009964 <xTaskGetSchedulerState>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d001      	beq.n	8001106 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001102:	f007 faa9 	bl	8008658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <USART1_IRQHandler+0x10>)
 8001112:	f004 fad5 	bl	80056c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200040f4 	.word	0x200040f4

08001120 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <USART2_IRQHandler+0x10>)
 8001126:	f004 facb 	bl	80056c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20004210 	.word	0x20004210

08001134 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <UART8_IRQHandler+0x10>)
 800113a:	f004 fac1 	bl	80056c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20004184 	.word	0x20004184

08001148 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <SPI5_IRQHandler+0x10>)
 800114e:	f003 ff87 	bl	8005060 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20003fe8 	.word	0x20003fe8

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001160:	f7ff fa3e 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001164:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001166:	e003      	b.n	8001170 <LoopCopyDataInit>

08001168 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800116a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800116c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800116e:	3104      	adds	r1, #4

08001170 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001174:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001176:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001178:	d3f6      	bcc.n	8001168 <CopyDataInit>
  ldr  r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800117c:	e002      	b.n	8001184 <LoopFillZerobss>

0800117e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800117e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001180:	f842 3b04 	str.w	r3, [r2], #4

08001184 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001186:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001188:	d3f9      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118a:	f008 fc6f 	bl	8009a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff fadb 	bl	8000748 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001198:	08009bb0 	.word	0x08009bb0
  ldr  r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011a0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80011a4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80011a8:	20004710 	.word	0x20004710

080011ac <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC3_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f000 f98a 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011bc:	f001 fc24 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80011c0:	4601      	mov	r1, r0
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_Init+0x68>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <HAL_Init+0x6c>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	fa21 f303 	lsr.w	r3, r1, r3
 80011d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_Init+0x68>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_Init+0x6c>)
 80011e4:	5cd3      	ldrb	r3, [r2, r3]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	fa22 f303 	lsr.w	r3, r2, r3
 80011f0:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <HAL_Init+0x70>)
 80011f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_Init+0x74>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f814 	bl	8001228 <HAL_InitTick>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e002      	b.n	8001210 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800120a:	f7ff fd89 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	58024400 	.word	0x58024400
 800121c:	08009b64 	.word	0x08009b64
 8001220:	20000004 	.word	0x20000004
 8001224:	20000000 	.word	0x20000000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_InitTick+0x60>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e021      	b.n	8001280 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_InitTick+0x64>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_InitTick+0x60>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f96f 	bl	8001536 <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f939 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x68>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20000000 	.word	0x20000000
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000000c 	.word	0x2000000c
 80012b8:	200042a0 	.word	0x200042a0

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200042a0 	.word	0x200042a0

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_Delay+0x40>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000000c 	.word	0x2000000c

08001318 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetREVID+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0c1b      	lsrs	r3, r3, #16
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	5c001000 	.word	0x5c001000

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	4313      	orrs	r3, r2
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	05fa0000 	.word	0x05fa0000

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff8e 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff29 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff40 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff90 	bl	8001424 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5f 	bl	80013d0 <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff33 	bl	8001394 <__NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffa4 	bl	800148c <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e205      	b.n	800196e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d004      	beq.n	8001578 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e1fa      	b.n	800196e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a8c      	ldr	r2, [pc, #560]	; (80017b0 <HAL_DMA_Abort_IT+0x260>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d04a      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a8b      	ldr	r2, [pc, #556]	; (80017b4 <HAL_DMA_Abort_IT+0x264>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d045      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a89      	ldr	r2, [pc, #548]	; (80017b8 <HAL_DMA_Abort_IT+0x268>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d040      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a88      	ldr	r2, [pc, #544]	; (80017bc <HAL_DMA_Abort_IT+0x26c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d03b      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a86      	ldr	r2, [pc, #536]	; (80017c0 <HAL_DMA_Abort_IT+0x270>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d036      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a85      	ldr	r2, [pc, #532]	; (80017c4 <HAL_DMA_Abort_IT+0x274>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d031      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a83      	ldr	r2, [pc, #524]	; (80017c8 <HAL_DMA_Abort_IT+0x278>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d02c      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a82      	ldr	r2, [pc, #520]	; (80017cc <HAL_DMA_Abort_IT+0x27c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d027      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a80      	ldr	r2, [pc, #512]	; (80017d0 <HAL_DMA_Abort_IT+0x280>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d022      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7f      	ldr	r2, [pc, #508]	; (80017d4 <HAL_DMA_Abort_IT+0x284>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d01d      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a7d      	ldr	r2, [pc, #500]	; (80017d8 <HAL_DMA_Abort_IT+0x288>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d018      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a7c      	ldr	r2, [pc, #496]	; (80017dc <HAL_DMA_Abort_IT+0x28c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d013      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a7a      	ldr	r2, [pc, #488]	; (80017e0 <HAL_DMA_Abort_IT+0x290>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00e      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a79      	ldr	r2, [pc, #484]	; (80017e4 <HAL_DMA_Abort_IT+0x294>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d009      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a77      	ldr	r2, [pc, #476]	; (80017e8 <HAL_DMA_Abort_IT+0x298>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d004      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a76      	ldr	r2, [pc, #472]	; (80017ec <HAL_DMA_Abort_IT+0x29c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_DMA_Abort_IT+0xcc>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_DMA_Abort_IT+0xce>
 800161c:	2300      	movs	r3, #0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d065      	beq.n	80016ee <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2204      	movs	r2, #4
 8001626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a60      	ldr	r2, [pc, #384]	; (80017b0 <HAL_DMA_Abort_IT+0x260>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d04a      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a5e      	ldr	r2, [pc, #376]	; (80017b4 <HAL_DMA_Abort_IT+0x264>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d045      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a5d      	ldr	r2, [pc, #372]	; (80017b8 <HAL_DMA_Abort_IT+0x268>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d040      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <HAL_DMA_Abort_IT+0x26c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d03b      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a5a      	ldr	r2, [pc, #360]	; (80017c0 <HAL_DMA_Abort_IT+0x270>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d036      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_DMA_Abort_IT+0x274>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d031      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_DMA_Abort_IT+0x278>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d02c      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a55      	ldr	r2, [pc, #340]	; (80017cc <HAL_DMA_Abort_IT+0x27c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d027      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <HAL_DMA_Abort_IT+0x280>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d022      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_DMA_Abort_IT+0x284>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01d      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a51      	ldr	r2, [pc, #324]	; (80017d8 <HAL_DMA_Abort_IT+0x288>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d018      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <HAL_DMA_Abort_IT+0x28c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a4e      	ldr	r2, [pc, #312]	; (80017e0 <HAL_DMA_Abort_IT+0x290>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00e      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a4c      	ldr	r2, [pc, #304]	; (80017e4 <HAL_DMA_Abort_IT+0x294>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d009      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a4b      	ldr	r2, [pc, #300]	; (80017e8 <HAL_DMA_Abort_IT+0x298>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d004      	beq.n	80016ca <HAL_DMA_Abort_IT+0x17a>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a49      	ldr	r2, [pc, #292]	; (80017ec <HAL_DMA_Abort_IT+0x29c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d108      	bne.n	80016dc <HAL_DMA_Abort_IT+0x18c>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e147      	b.n	800196c <HAL_DMA_Abort_IT+0x41c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e13e      	b.n	800196c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 020e 	bic.w	r2, r2, #14
 80016fc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a2b      	ldr	r2, [pc, #172]	; (80017b0 <HAL_DMA_Abort_IT+0x260>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d04a      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <HAL_DMA_Abort_IT+0x264>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d045      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <HAL_DMA_Abort_IT+0x268>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d040      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <HAL_DMA_Abort_IT+0x26c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d03b      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <HAL_DMA_Abort_IT+0x270>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d036      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <HAL_DMA_Abort_IT+0x274>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d031      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <HAL_DMA_Abort_IT+0x278>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d02c      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <HAL_DMA_Abort_IT+0x27c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d027      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_DMA_Abort_IT+0x280>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d022      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_DMA_Abort_IT+0x284>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01d      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <HAL_DMA_Abort_IT+0x288>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d018      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_DMA_Abort_IT+0x28c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_DMA_Abort_IT+0x290>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00e      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_DMA_Abort_IT+0x294>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d009      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_DMA_Abort_IT+0x298>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d004      	beq.n	800179e <HAL_DMA_Abort_IT+0x24e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_DMA_Abort_IT+0x29c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d128      	bne.n	80017f0 <HAL_DMA_Abort_IT+0x2a0>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e027      	b.n	8001800 <HAL_DMA_Abort_IT+0x2b0>
 80017b0:	40020010 	.word	0x40020010
 80017b4:	40020028 	.word	0x40020028
 80017b8:	40020040 	.word	0x40020040
 80017bc:	40020058 	.word	0x40020058
 80017c0:	40020070 	.word	0x40020070
 80017c4:	40020088 	.word	0x40020088
 80017c8:	400200a0 	.word	0x400200a0
 80017cc:	400200b8 	.word	0x400200b8
 80017d0:	40020410 	.word	0x40020410
 80017d4:	40020428 	.word	0x40020428
 80017d8:	40020440 	.word	0x40020440
 80017dc:	40020458 	.word	0x40020458
 80017e0:	40020470 	.word	0x40020470
 80017e4:	40020488 	.word	0x40020488
 80017e8:	400204a0 	.word	0x400204a0
 80017ec:	400204b8 	.word	0x400204b8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5c      	ldr	r2, [pc, #368]	; (8001978 <HAL_DMA_Abort_IT+0x428>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d072      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a5b      	ldr	r2, [pc, #364]	; (800197c <HAL_DMA_Abort_IT+0x42c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d06d      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a59      	ldr	r2, [pc, #356]	; (8001980 <HAL_DMA_Abort_IT+0x430>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d068      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a58      	ldr	r2, [pc, #352]	; (8001984 <HAL_DMA_Abort_IT+0x434>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d063      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a56      	ldr	r2, [pc, #344]	; (8001988 <HAL_DMA_Abort_IT+0x438>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d05e      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a55      	ldr	r2, [pc, #340]	; (800198c <HAL_DMA_Abort_IT+0x43c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d059      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a53      	ldr	r2, [pc, #332]	; (8001990 <HAL_DMA_Abort_IT+0x440>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d054      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_DMA_Abort_IT+0x444>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d04f      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a50      	ldr	r2, [pc, #320]	; (8001998 <HAL_DMA_Abort_IT+0x448>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d04a      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a4f      	ldr	r2, [pc, #316]	; (800199c <HAL_DMA_Abort_IT+0x44c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d045      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a4d      	ldr	r2, [pc, #308]	; (80019a0 <HAL_DMA_Abort_IT+0x450>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d040      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_DMA_Abort_IT+0x454>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d03b      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <HAL_DMA_Abort_IT+0x458>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d036      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a49      	ldr	r2, [pc, #292]	; (80019ac <HAL_DMA_Abort_IT+0x45c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d031      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a47      	ldr	r2, [pc, #284]	; (80019b0 <HAL_DMA_Abort_IT+0x460>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d02c      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <HAL_DMA_Abort_IT+0x464>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d027      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <HAL_DMA_Abort_IT+0x468>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d022      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a43      	ldr	r2, [pc, #268]	; (80019bc <HAL_DMA_Abort_IT+0x46c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d01d      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a41      	ldr	r2, [pc, #260]	; (80019c0 <HAL_DMA_Abort_IT+0x470>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d018      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a40      	ldr	r2, [pc, #256]	; (80019c4 <HAL_DMA_Abort_IT+0x474>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d013      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <HAL_DMA_Abort_IT+0x478>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00e      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a3d      	ldr	r2, [pc, #244]	; (80019cc <HAL_DMA_Abort_IT+0x47c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d009      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3b      	ldr	r2, [pc, #236]	; (80019d0 <HAL_DMA_Abort_IT+0x480>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d004      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x3a0>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <HAL_DMA_Abort_IT+0x484>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_DMA_Abort_IT+0x3a4>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_DMA_Abort_IT+0x3a6>
 80018f4:	2300      	movs	r3, #0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d028      	beq.n	800194c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001908:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	2201      	movs	r2, #1
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001928:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00c      	beq.n	800194c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800193c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001940:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800194a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020010 	.word	0x40020010
 800197c:	40020028 	.word	0x40020028
 8001980:	40020040 	.word	0x40020040
 8001984:	40020058 	.word	0x40020058
 8001988:	40020070 	.word	0x40020070
 800198c:	40020088 	.word	0x40020088
 8001990:	400200a0 	.word	0x400200a0
 8001994:	400200b8 	.word	0x400200b8
 8001998:	40020410 	.word	0x40020410
 800199c:	40020428 	.word	0x40020428
 80019a0:	40020440 	.word	0x40020440
 80019a4:	40020458 	.word	0x40020458
 80019a8:	40020470 	.word	0x40020470
 80019ac:	40020488 	.word	0x40020488
 80019b0:	400204a0 	.word	0x400204a0
 80019b4:	400204b8 	.word	0x400204b8
 80019b8:	58025408 	.word	0x58025408
 80019bc:	5802541c 	.word	0x5802541c
 80019c0:	58025430 	.word	0x58025430
 80019c4:	58025444 	.word	0x58025444
 80019c8:	58025458 	.word	0x58025458
 80019cc:	5802546c 	.word	0x5802546c
 80019d0:	58025480 	.word	0x58025480
 80019d4:	58025494 	.word	0x58025494

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019e6:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <HAL_GPIO_Init+0x234>)
 80019e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ea:	e194      	b.n	8001d16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8186 	beq.w	8001d10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d00b      	beq.n	8001a24 <HAL_GPIO_Init+0x4c>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a18:	2b11      	cmp	r3, #17
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b12      	cmp	r3, #18
 8001a22:	d130      	bne.n	8001a86 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 0201 	and.w	r2, r3, #1
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0xee>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d123      	bne.n	8001b0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	69b9      	ldr	r1, [r7, #24]
 8001b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0203 	and.w	r2, r3, #3
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80e0 	beq.w	8001d10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b50:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_GPIO_Init+0x238>)
 8001b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b56:	4a2e      	ldr	r2, [pc, #184]	; (8001c10 <HAL_GPIO_Init+0x238>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_GPIO_Init+0x238>)
 8001b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6e:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <HAL_GPIO_Init+0x23c>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <HAL_GPIO_Init+0x240>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d052      	beq.n	8001c40 <HAL_GPIO_Init+0x268>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <HAL_GPIO_Init+0x244>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d031      	beq.n	8001c06 <HAL_GPIO_Init+0x22e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_GPIO_Init+0x248>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d02b      	beq.n	8001c02 <HAL_GPIO_Init+0x22a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <HAL_GPIO_Init+0x24c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d025      	beq.n	8001bfe <HAL_GPIO_Init+0x226>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_GPIO_Init+0x250>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01f      	beq.n	8001bfa <HAL_GPIO_Init+0x222>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_GPIO_Init+0x254>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0x21e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	; (8001c30 <HAL_GPIO_Init+0x258>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x21a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_GPIO_Init+0x25c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x216>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_GPIO_Init+0x260>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x212>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <HAL_GPIO_Init+0x264>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x20e>
 8001be2:	2309      	movs	r3, #9
 8001be4:	e02d      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001be6:	230a      	movs	r3, #10
 8001be8:	e02b      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bea:	2308      	movs	r3, #8
 8001bec:	e029      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bee:	2307      	movs	r3, #7
 8001bf0:	e027      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	e025      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e023      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e021      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e01f      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e01d      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e01b      	b.n	8001c42 <HAL_GPIO_Init+0x26a>
 8001c0a:	bf00      	nop
 8001c0c:	58000080 	.word	0x58000080
 8001c10:	58024400 	.word	0x58024400
 8001c14:	58000400 	.word	0x58000400
 8001c18:	58020000 	.word	0x58020000
 8001c1c:	58020400 	.word	0x58020400
 8001c20:	58020800 	.word	0x58020800
 8001c24:	58020c00 	.word	0x58020c00
 8001c28:	58021000 	.word	0x58021000
 8001c2c:	58021400 	.word	0x58021400
 8001c30:	58021800 	.word	0x58021800
 8001c34:	58021c00 	.word	0x58021c00
 8001c38:	58022000 	.word	0x58022000
 8001c3c:	58022400 	.word	0x58022400
 8001c40:	2300      	movs	r3, #0
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	f002 0203 	and.w	r2, r2, #3
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	4093      	lsls	r3, r2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c52:	4938      	ldr	r1, [pc, #224]	; (8001d34 <HAL_GPIO_Init+0x35c>)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f47f ae63 	bne.w	80019ec <HAL_GPIO_Init+0x14>
  }
}
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	58000400 	.word	0x58000400

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d54:	e003      	b.n	8001d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	041a      	lsls	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	619a      	str	r2, [r3, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001d74:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_HSEM_FastTake+0x2c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3320      	adds	r3, #32
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_HSEM_FastTake+0x30>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e000      	b.n	8001d8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	58026400 	.word	0x58026400
 8001d9c:	80000300 	.word	0x80000300

08001da0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001daa:	4906      	ldr	r1, [pc, #24]	; (8001dc4 <HAL_HSEM_Release+0x24>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	58026400 	.word	0x58026400

08001dc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d00a      	beq.n	8001df2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e040      	b.n	8001e70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e03e      	b.n	8001e70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001dfa:	491f      	ldr	r1, [pc, #124]	; (8001e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e02:	f7ff fa5b 	bl	80012bc <HAL_GetTick>
 8001e06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e08:	e009      	b.n	8001e1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e0a:	f7ff fa57 	bl	80012bc <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e18:	d901      	bls.n	8001e1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e028      	b.n	8001e70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2a:	d1ee      	bne.n	8001e0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b1e      	cmp	r3, #30
 8001e30:	d008      	beq.n	8001e44 <HAL_PWREx_ConfigSupply+0x7c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b2e      	cmp	r3, #46	; 0x2e
 8001e36:	d005      	beq.n	8001e44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b1d      	cmp	r3, #29
 8001e3c:	d002      	beq.n	8001e44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b2d      	cmp	r3, #45	; 0x2d
 8001e42:	d114      	bne.n	8001e6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001e44:	f7ff fa3a 	bl	80012bc <HAL_GetTick>
 8001e48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001e4a:	e009      	b.n	8001e60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e4c:	f7ff fa36 	bl	80012bc <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e5a:	d901      	bls.n	8001e60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e007      	b.n	8001e70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d1ee      	bne.n	8001e4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58024800 	.word	0x58024800

08001e7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e3ff      	b.n	800268e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8087 	beq.w	8001faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9c:	4b99      	ldr	r3, [pc, #612]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ea6:	4b97      	ldr	r3, [pc, #604]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d007      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x46>
 8001eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb4:	2b18      	cmp	r3, #24
 8001eb6:	d110      	bne.n	8001eda <HAL_RCC_OscConfig+0x5e>
 8001eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d10b      	bne.n	8001eda <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec2:	4b90      	ldr	r3, [pc, #576]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d06c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x12c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d168      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e3d9      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x76>
 8001ee4:	4b87      	ldr	r3, [pc, #540]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a86      	ldr	r2, [pc, #536]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e02e      	b.n	8001f50 <HAL_RCC_OscConfig+0xd4>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x98>
 8001efa:	4b82      	ldr	r3, [pc, #520]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a81      	ldr	r2, [pc, #516]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7e      	ldr	r2, [pc, #504]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xd4>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0xbc>
 8001f1e:	4b79      	ldr	r3, [pc, #484]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a78      	ldr	r2, [pc, #480]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b76      	ldr	r3, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a75      	ldr	r2, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xd4>
 8001f38:	4b72      	ldr	r3, [pc, #456]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a71      	ldr	r2, [pc, #452]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b6f      	ldr	r3, [pc, #444]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a6e      	ldr	r2, [pc, #440]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff f9b0 	bl	80012bc <HAL_GetTick>
 8001f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff f9ac 	bl	80012bc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e38d      	b.n	800268e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f72:	4b64      	ldr	r3, [pc, #400]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe4>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff f99c 	bl	80012bc <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff f998 	bl	80012bc <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e379      	b.n	800268e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x10c>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80ae 	beq.w	8002114 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb8:	4b52      	ldr	r3, [pc, #328]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fc2:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <HAL_RCC_OscConfig+0x162>
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	2b18      	cmp	r3, #24
 8001fd2:	d13a      	bne.n	800204a <HAL_RCC_OscConfig+0x1ce>
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d135      	bne.n	800204a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fde:	4b49      	ldr	r3, [pc, #292]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x17a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e34b      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	f7ff f98f 	bl	8001318 <HAL_GetREVID>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002000:	429a      	cmp	r2, r3
 8002002:	d817      	bhi.n	8002034 <HAL_RCC_OscConfig+0x1b8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b40      	cmp	r3, #64	; 0x40
 800200a:	d108      	bne.n	800201e <HAL_RCC_OscConfig+0x1a2>
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002014:	4a3b      	ldr	r2, [pc, #236]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8002016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800201c:	e07a      	b.n	8002114 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	031b      	lsls	r3, r3, #12
 800202c:	4935      	ldr	r1, [pc, #212]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002032:	e06f      	b.n	8002114 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b33      	ldr	r3, [pc, #204]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	4930      	ldr	r1, [pc, #192]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002048:	e064      	b.n	8002114 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d045      	beq.n	80020de <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0219 	bic.w	r2, r3, #25
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4929      	ldr	r1, [pc, #164]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff f92a 	bl	80012bc <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206c:	f7ff f926 	bl	80012bc <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e307      	b.n	800268e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	f7ff f945 	bl	8001318 <HAL_GetREVID>
 800208e:	4602      	mov	r2, r0
 8002090:	f241 0303 	movw	r3, #4099	; 0x1003
 8002094:	429a      	cmp	r2, r3
 8002096:	d817      	bhi.n	80020c8 <HAL_RCC_OscConfig+0x24c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d108      	bne.n	80020b2 <HAL_RCC_OscConfig+0x236>
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80020a8:	4a16      	ldr	r2, [pc, #88]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ae:	6053      	str	r3, [r2, #4]
 80020b0:	e030      	b.n	8002114 <HAL_RCC_OscConfig+0x298>
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	031b      	lsls	r3, r3, #12
 80020c0:	4910      	ldr	r1, [pc, #64]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
 80020c6:	e025      	b.n	8002114 <HAL_RCC_OscConfig+0x298>
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	490b      	ldr	r1, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	e01a      	b.n	8002114 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <HAL_RCC_OscConfig+0x288>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff f8e7 	bl	80012bc <HAL_GetTick>
 80020ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff f8e3 	bl	80012bc <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d903      	bls.n	8002108 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e2c4      	b.n	800268e <HAL_RCC_OscConfig+0x812>
 8002104:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002108:	4ba4      	ldr	r3, [pc, #656]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a9 	beq.w	8002274 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	4b9e      	ldr	r3, [pc, #632]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800212a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800212c:	4b9b      	ldr	r3, [pc, #620]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d007      	beq.n	8002148 <HAL_RCC_OscConfig+0x2cc>
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b18      	cmp	r3, #24
 800213c:	d13a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x338>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d135      	bne.n	80021b4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002148:	4b94      	ldr	r3, [pc, #592]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_OscConfig+0x2e4>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e296      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002160:	f7ff f8da 	bl	8001318 <HAL_GetREVID>
 8002164:	4602      	mov	r2, r0
 8002166:	f241 0303 	movw	r3, #4099	; 0x1003
 800216a:	429a      	cmp	r2, r3
 800216c:	d817      	bhi.n	800219e <HAL_RCC_OscConfig+0x322>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	2b20      	cmp	r3, #32
 8002174:	d108      	bne.n	8002188 <HAL_RCC_OscConfig+0x30c>
 8002176:	4b89      	ldr	r3, [pc, #548]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800217e:	4a87      	ldr	r2, [pc, #540]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002184:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002186:	e075      	b.n	8002274 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002188:	4b84      	ldr	r3, [pc, #528]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	069b      	lsls	r3, r3, #26
 8002196:	4981      	ldr	r1, [pc, #516]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800219c:	e06a      	b.n	8002274 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <HAL_RCC_OscConfig+0x520>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	061b      	lsls	r3, r3, #24
 80021ac:	497b      	ldr	r1, [pc, #492]	; (800239c <HAL_RCC_OscConfig+0x520>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021b2:	e05f      	b.n	8002274 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d042      	beq.n	8002242 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021bc:	4b77      	ldr	r3, [pc, #476]	; (800239c <HAL_RCC_OscConfig+0x520>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a76      	ldr	r2, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x520>)
 80021c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff f878 	bl	80012bc <HAL_GetTick>
 80021cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80021d0:	f7ff f874 	bl	80012bc <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e255      	b.n	800268e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021e2:	4b6e      	ldr	r3, [pc, #440]	; (800239c <HAL_RCC_OscConfig+0x520>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021ee:	f7ff f893 	bl	8001318 <HAL_GetREVID>
 80021f2:	4602      	mov	r2, r0
 80021f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d817      	bhi.n	800222c <HAL_RCC_OscConfig+0x3b0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	2b20      	cmp	r3, #32
 8002202:	d108      	bne.n	8002216 <HAL_RCC_OscConfig+0x39a>
 8002204:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800220c:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800220e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002212:	6053      	str	r3, [r2, #4]
 8002214:	e02e      	b.n	8002274 <HAL_RCC_OscConfig+0x3f8>
 8002216:	4b61      	ldr	r3, [pc, #388]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	069b      	lsls	r3, r3, #26
 8002224:	495d      	ldr	r1, [pc, #372]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
 800222a:	e023      	b.n	8002274 <HAL_RCC_OscConfig+0x3f8>
 800222c:	4b5b      	ldr	r3, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	061b      	lsls	r3, r3, #24
 800223a:	4958      	ldr	r1, [pc, #352]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800223c:	4313      	orrs	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
 8002240:	e018      	b.n	8002274 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002242:	4b56      	ldr	r3, [pc, #344]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a55      	ldr	r2, [pc, #340]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7ff f835 	bl	80012bc <HAL_GetTick>
 8002252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002256:	f7ff f831 	bl	80012bc <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e212      	b.n	800268e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d036      	beq.n	80022ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d019      	beq.n	80022bc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002288:	4b44      	ldr	r3, [pc, #272]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800228a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228c:	4a43      	ldr	r2, [pc, #268]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7ff f812 	bl	80012bc <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229c:	f7ff f80e 	bl	80012bc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1ef      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_OscConfig+0x520>)
 80022b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x420>
 80022ba:	e018      	b.n	80022ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022bc:	4b37      	ldr	r3, [pc, #220]	; (800239c <HAL_RCC_OscConfig+0x520>)
 80022be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c0:	4a36      	ldr	r2, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x520>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe fff8 	bl	80012bc <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d0:	f7fe fff4 	bl	80012bc <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1d5      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022e2:	4b2e      	ldr	r3, [pc, #184]	; (800239c <HAL_RCC_OscConfig+0x520>)
 80022e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d036      	beq.n	8002368 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d019      	beq.n	8002336 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800230c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800230e:	f7fe ffd5 	bl	80012bc <HAL_GetTick>
 8002312:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002316:	f7fe ffd1 	bl	80012bc <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e1b2      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002328:	4b1c      	ldr	r3, [pc, #112]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x49a>
 8002334:	e018      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_OscConfig+0x520>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a18      	ldr	r2, [pc, #96]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800233c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002340:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002342:	f7fe ffbb 	bl	80012bc <HAL_GetTick>
 8002346:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800234a:	f7fe ffb7 	bl	80012bc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e198      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCC_OscConfig+0x520>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8085 	beq.w	8002480 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_RCC_OscConfig+0x524>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_RCC_OscConfig+0x524>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002382:	f7fe ff9b 	bl	80012bc <HAL_GetTick>
 8002386:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002388:	e00c      	b.n	80023a4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7fe ff97 	bl	80012bc <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d905      	bls.n	80023a4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e178      	b.n	800268e <HAL_RCC_OscConfig+0x812>
 800239c:	58024400 	.word	0x58024400
 80023a0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a4:	4b96      	ldr	r3, [pc, #600]	; (8002600 <HAL_RCC_OscConfig+0x784>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ec      	beq.n	800238a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x54a>
 80023b8:	4b92      	ldr	r3, [pc, #584]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a91      	ldr	r2, [pc, #580]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	e02d      	b.n	8002422 <HAL_RCC_OscConfig+0x5a6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x56c>
 80023ce:	4b8d      	ldr	r3, [pc, #564]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a8c      	ldr	r2, [pc, #560]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	4b8a      	ldr	r3, [pc, #552]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	4a89      	ldr	r2, [pc, #548]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	6713      	str	r3, [r2, #112]	; 0x70
 80023e6:	e01c      	b.n	8002422 <HAL_RCC_OscConfig+0x5a6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d10c      	bne.n	800240a <HAL_RCC_OscConfig+0x58e>
 80023f0:	4b84      	ldr	r3, [pc, #528]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a83      	ldr	r2, [pc, #524]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	4b81      	ldr	r3, [pc, #516]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a80      	ldr	r2, [pc, #512]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	e00b      	b.n	8002422 <HAL_RCC_OscConfig+0x5a6>
 800240a:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a7d      	ldr	r2, [pc, #500]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
 8002416:	4b7b      	ldr	r3, [pc, #492]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a7a      	ldr	r2, [pc, #488]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d015      	beq.n	8002456 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7fe ff47 	bl	80012bc <HAL_GetTick>
 800242e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe ff43 	bl	80012bc <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e122      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002448:	4b6e      	ldr	r3, [pc, #440]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ee      	beq.n	8002432 <HAL_RCC_OscConfig+0x5b6>
 8002454:	e014      	b.n	8002480 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7fe ff31 	bl	80012bc <HAL_GetTick>
 800245a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe ff2d 	bl	80012bc <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e10c      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002474:	4b63      	ldr	r3, [pc, #396]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ee      	bne.n	800245e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8101 	beq.w	800268c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800248a:	4b5e      	ldr	r3, [pc, #376]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002492:	2b18      	cmp	r3, #24
 8002494:	f000 80bc 	beq.w	8002610 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	2b02      	cmp	r3, #2
 800249e:	f040 8095 	bne.w	80025cc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b58      	ldr	r3, [pc, #352]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a57      	ldr	r2, [pc, #348]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80024a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe ff05 	bl	80012bc <HAL_GetTick>
 80024b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe ff01 	bl	80012bc <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0e2      	b.n	800268e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80024d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024d8:	4b4b      	ldr	r3, [pc, #300]	; (8002608 <HAL_RCC_OscConfig+0x78c>)
 80024da:	4013      	ands	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	430a      	orrs	r2, r1
 80024e8:	4946      	ldr	r1, [pc, #280]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	628b      	str	r3, [r1, #40]	; 0x28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	3b01      	subs	r3, #1
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	b29b      	uxth	r3, r3
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	3b01      	subs	r3, #1
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	3b01      	subs	r3, #1
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800251e:	4939      	ldr	r1, [pc, #228]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002520:	4313      	orrs	r3, r2
 8002522:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002524:	4b37      	ldr	r3, [pc, #220]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	4a36      	ldr	r2, [pc, #216]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002530:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <HAL_RCC_OscConfig+0x790>)
 8002536:	4013      	ands	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800253c:	00d2      	lsls	r2, r2, #3
 800253e:	4931      	ldr	r1, [pc, #196]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002540:	4313      	orrs	r3, r2
 8002542:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	f023 020c 	bic.w	r2, r3, #12
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	492c      	ldr	r1, [pc, #176]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002552:	4313      	orrs	r3, r2
 8002554:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002556:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	f023 0202 	bic.w	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4928      	ldr	r1, [pc, #160]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002564:	4313      	orrs	r3, r2
 8002566:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	4a25      	ldr	r2, [pc, #148]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fe8a 	bl	80012bc <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fe86 	bl	80012bc <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e067      	b.n	800268e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x730>
 80025ca:	e05f      	b.n	800268c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80025d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fe70 	bl	80012bc <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fe6c 	bl	80012bc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e04d      	b.n	800268e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_RCC_OscConfig+0x788>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x764>
 80025fe:	e045      	b.n	800268c <HAL_RCC_OscConfig+0x810>
 8002600:	58024800 	.word	0x58024800
 8002604:	58024400 	.word	0x58024400
 8002608:	fffffc0c 	.word	0xfffffc0c
 800260c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_RCC_OscConfig+0x81c>)
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCC_OscConfig+0x81c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2b01      	cmp	r3, #1
 8002622:	d031      	beq.n	8002688 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0203 	and.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d12a      	bne.n	8002688 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d122      	bne.n	8002688 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d11a      	bne.n	8002688 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0a5b      	lsrs	r3, r3, #9
 8002656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d111      	bne.n	8002688 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	0c1b      	lsrs	r3, r3, #16
 8002668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d108      	bne.n	8002688 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	0e1b      	lsrs	r3, r3, #24
 800267a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3730      	adds	r7, #48	; 0x30
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	58024400 	.word	0x58024400

0800269c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e19c      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b8a      	ldr	r3, [pc, #552]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d910      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b87      	ldr	r3, [pc, #540]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 020f 	bic.w	r2, r3, #15
 80026c6:	4985      	ldr	r1, [pc, #532]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b83      	ldr	r3, [pc, #524]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e184      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d010      	beq.n	800270e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d908      	bls.n	800270e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026fc:	4b78      	ldr	r3, [pc, #480]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4975      	ldr	r1, [pc, #468]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800270a:	4313      	orrs	r3, r2
 800270c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d010      	beq.n	800273c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002726:	429a      	cmp	r2, r3
 8002728:	d908      	bls.n	800273c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800272a:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	496a      	ldr	r1, [pc, #424]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002738:	4313      	orrs	r3, r2
 800273a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d010      	beq.n	800276a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002754:	429a      	cmp	r2, r3
 8002756:	d908      	bls.n	800276a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002758:	4b61      	ldr	r3, [pc, #388]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	495e      	ldr	r1, [pc, #376]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002766:	4313      	orrs	r3, r2
 8002768:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	4b59      	ldr	r3, [pc, #356]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002782:	429a      	cmp	r2, r3
 8002784:	d908      	bls.n	8002798 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002786:	4b56      	ldr	r3, [pc, #344]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4953      	ldr	r1, [pc, #332]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002794:	4313      	orrs	r3, r2
 8002796:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	4b4d      	ldr	r3, [pc, #308]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d908      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f023 020f 	bic.w	r2, r3, #15
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4947      	ldr	r1, [pc, #284]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d055      	beq.n	800287e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80027d2:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4940      	ldr	r1, [pc, #256]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027ec:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d121      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0f6      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d107      	bne.n	8002814 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d115      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0ea      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800281c:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0de      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800282c:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0d6      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800283c:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f023 0207 	bic.w	r2, r3, #7
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4925      	ldr	r1, [pc, #148]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800284a:	4313      	orrs	r3, r2
 800284c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe fd35 	bl	80012bc <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002854:	e00a      	b.n	800286c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002856:	f7fe fd31 	bl	80012bc <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0be      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	429a      	cmp	r2, r3
 800287c:	d1eb      	bne.n	8002856 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	429a      	cmp	r2, r3
 8002898:	d208      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f023 020f 	bic.w	r2, r3, #15
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	490e      	ldr	r1, [pc, #56]	; (80028e0 <HAL_RCC_ClockConfig+0x244>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d214      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 020f 	bic.w	r2, r3, #15
 80028c2:	4906      	ldr	r1, [pc, #24]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_RCC_ClockConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e086      	b.n	80029ea <HAL_RCC_ClockConfig+0x34e>
 80028dc:	52002000 	.word	0x52002000
 80028e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d208      	bcs.n	8002912 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002900:	4b3c      	ldr	r3, [pc, #240]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	4939      	ldr	r1, [pc, #228]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800290e:	4313      	orrs	r3, r2
 8002910:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	4b34      	ldr	r3, [pc, #208]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800292a:	429a      	cmp	r2, r3
 800292c:	d208      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	492e      	ldr	r1, [pc, #184]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800293c:	4313      	orrs	r3, r2
 800293e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d010      	beq.n	800296e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002958:	429a      	cmp	r2, r3
 800295a:	d208      	bcs.n	800296e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4922      	ldr	r1, [pc, #136]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800296a:	4313      	orrs	r3, r2
 800296c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d010      	beq.n	800299c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002986:	429a      	cmp	r2, r3
 8002988:	d208      	bcs.n	800299c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4917      	ldr	r1, [pc, #92]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 8002998:	4313      	orrs	r3, r2
 800299a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800299c:	f000 f834 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80029a0:	4601      	mov	r1, r0
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_RCC_ClockConfig+0x35c>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	fa21 f303 	lsr.w	r3, r1, r3
 80029b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_RCC_ClockConfig+0x358>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_RCC_ClockConfig+0x35c>)
 80029c4:	5cd3      	ldrb	r3, [r2, r3]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <HAL_RCC_ClockConfig+0x360>)
 80029d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_RCC_ClockConfig+0x364>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_RCC_ClockConfig+0x368>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fc22 	bl	8001228 <HAL_InitTick>
 80029e4:	4603      	mov	r3, r0
 80029e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	58024400 	.word	0x58024400
 80029f8:	08009b64 	.word	0x08009b64
 80029fc:	20000004 	.word	0x20000004
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000008 	.word	0x20000008

08002a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0e:	4baf      	ldr	r3, [pc, #700]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a16:	2b18      	cmp	r3, #24
 8002a18:	f200 814e 	bhi.w	8002cb8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002a1c:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a89 	.word	0x08002a89
 8002a28:	08002cb9 	.word	0x08002cb9
 8002a2c:	08002cb9 	.word	0x08002cb9
 8002a30:	08002cb9 	.word	0x08002cb9
 8002a34:	08002cb9 	.word	0x08002cb9
 8002a38:	08002cb9 	.word	0x08002cb9
 8002a3c:	08002cb9 	.word	0x08002cb9
 8002a40:	08002cb9 	.word	0x08002cb9
 8002a44:	08002aaf 	.word	0x08002aaf
 8002a48:	08002cb9 	.word	0x08002cb9
 8002a4c:	08002cb9 	.word	0x08002cb9
 8002a50:	08002cb9 	.word	0x08002cb9
 8002a54:	08002cb9 	.word	0x08002cb9
 8002a58:	08002cb9 	.word	0x08002cb9
 8002a5c:	08002cb9 	.word	0x08002cb9
 8002a60:	08002cb9 	.word	0x08002cb9
 8002a64:	08002ab5 	.word	0x08002ab5
 8002a68:	08002cb9 	.word	0x08002cb9
 8002a6c:	08002cb9 	.word	0x08002cb9
 8002a70:	08002cb9 	.word	0x08002cb9
 8002a74:	08002cb9 	.word	0x08002cb9
 8002a78:	08002cb9 	.word	0x08002cb9
 8002a7c:	08002cb9 	.word	0x08002cb9
 8002a80:	08002cb9 	.word	0x08002cb9
 8002a84:	08002abb 	.word	0x08002abb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a88:	4b90      	ldr	r3, [pc, #576]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a94:	4b8d      	ldr	r3, [pc, #564]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	08db      	lsrs	r3, r3, #3
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	4a8c      	ldr	r2, [pc, #560]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002aa6:	e10a      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002aa8:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002aaa:	61bb      	str	r3, [r7, #24]
    break;
 8002aac:	e107      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002aae:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002ab0:	61bb      	str	r3, [r7, #24]
    break;
 8002ab2:	e104      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ab4:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002ab6:	61bb      	str	r3, [r7, #24]
    break;
 8002ab8:	e101      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002aba:	4b84      	ldr	r3, [pc, #528]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ac4:	4b81      	ldr	r3, [pc, #516]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ace:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ad0:	4b7e      	ldr	r3, [pc, #504]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ada:	4b7c      	ldr	r3, [pc, #496]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ade:	08db      	lsrs	r3, r3, #3
 8002ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80da 	beq.w	8002cb2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d05a      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x1b2>
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d302      	bcc.n	8002b0e <HAL_RCC_GetSysClockFreq+0x106>
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d078      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x1f6>
 8002b0c:	e099      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b0e:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02d      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	08db      	lsrs	r3, r3, #3
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	4a6a      	ldr	r2, [pc, #424]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	ee07 3a90 	vmov	s15, r3
 8002b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b54:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b58:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002cdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002b5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b70:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002b74:	e087      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b80:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002ce0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b98:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b9c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002cdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bb8:	e065      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002ce4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd4:	ee07 3a90 	vmov	s15, r3
 8002bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002be0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002cdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bfc:	e043      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002ce8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c10:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c20:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c24:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002cdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c40:	e021      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002ce4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c64:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c68:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002cdc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c84:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c90:	3301      	adds	r3, #1
 8002c92:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002caa:	ee17 3a90 	vmov	r3, s15
 8002cae:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002cb0:	e005      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61bb      	str	r3, [r7, #24]
    break;
 8002cb6:	e002      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002cba:	61bb      	str	r3, [r7, #24]
    break;
 8002cbc:	bf00      	nop
  }

  return sysclockfreq;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3724      	adds	r7, #36	; 0x24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	03d09000 	.word	0x03d09000
 8002cd4:	003d0900 	.word	0x003d0900
 8002cd8:	017d7840 	.word	0x017d7840
 8002cdc:	46000000 	.word	0x46000000
 8002ce0:	4c742400 	.word	0x4c742400
 8002ce4:	4a742400 	.word	0x4a742400
 8002ce8:	4bbebc20 	.word	0x4bbebc20

08002cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cf2:	f7ff fe89 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4601      	mov	r1, r0
 8002cf8:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d04:	5cd3      	ldrb	r3, [r2, r3]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d2a:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	58024400 	.word	0x58024400
 8002d40:	08009b64 	.word	0x08009b64
 8002d44:	20000004 	.word	0x20000004
 8002d48:	20000000 	.word	0x20000000

08002d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d50:	f7ff ffcc 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d54:	4601      	mov	r1, r0
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	58024400 	.word	0x58024400
 8002d74:	08009b64 	.word	0x08009b64

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002d7c:	f7ff ffb6 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d80:	4601      	mov	r1, r0
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	08009b64 	.word	0x08009b64

08002da4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b090      	sub	sp, #64	; 0x40
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db2:	d150      	bne.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8002db4:	4ba1      	ldr	r3, [pc, #644]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d844      	bhi.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8002dc4:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002de1 	.word	0x08002de1
 8002dd0:	08002df1 	.word	0x08002df1
 8002dd4:	08002e01 	.word	0x08002e01
 8002dd8:	08002e49 	.word	0x08002e49
 8002ddc:	08002e11 	.word	0x08002e11
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fd03 	bl	80037f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002dee:	e241      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002df0:	f107 0318 	add.w	r3, r7, #24
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fa63 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002dfe:	e239      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002e00:	f107 030c 	add.w	r3, r7, #12
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fba7 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e0e:	e231      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002e10:	4b8a      	ldr	r3, [pc, #552]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002e20:	4b87      	ldr	r3, [pc, #540]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002e24:	e226      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e2c:	d102      	bne.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8002e2e:	4b85      	ldr	r3, [pc, #532]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e32:	e21f      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8002e3c:	4b82      	ldr	r3, [pc, #520]	; (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e40:	e218      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e46:	e215      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002e48:	4b80      	ldr	r3, [pc, #512]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e4c:	e212      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e52:	bf00      	nop
 8002e54:	e20e      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5c:	d14f      	bne.n	8002efe <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8002e5e:	4b77      	ldr	r3, [pc, #476]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	2b80      	cmp	r3, #128	; 0x80
 8002e6c:	d01c      	beq.n	8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8002e6e:	2b80      	cmp	r3, #128	; 0x80
 8002e70:	d804      	bhi.n	8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d00e      	beq.n	8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002e7a:	e03c      	b.n	8002ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8002e7c:	2bc0      	cmp	r3, #192	; 0xc0
 8002e7e:	d037      	beq.n	8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8002e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e84:	d018      	beq.n	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8002e86:	e036      	b.n	8002ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fcaf 	bl	80037f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002e96:	e1ed      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002e98:	f107 0318 	add.w	r3, r7, #24
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fa0f 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ea6:	e1e5      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fb53 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002eb6:	e1dd      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002eb8:	4b60      	ldr	r3, [pc, #384]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002ec8:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002ecc:	e1d2      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ed4:	d102      	bne.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002eda:	e1cb      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee2:	d102      	bne.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8002ee4:	4b58      	ldr	r3, [pc, #352]	; (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ee8:	e1c4      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002eee:	e1c1      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ef0:	4b56      	ldr	r3, [pc, #344]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ef4:	e1be      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002efa:	bf00      	nop
 8002efc:	e1ba      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f04:	d153      	bne.n	8002fae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8002f06:	4b4d      	ldr	r3, [pc, #308]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8002f0e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f16:	d01f      	beq.n	8002f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8002f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1c:	d805      	bhi.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8002f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f26:	d00f      	beq.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002f28:	e03d      	b.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8002f2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f2e:	d037      	beq.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8002f30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f34:	d018      	beq.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8002f36:	e036      	b.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fc57 	bl	80037f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f46:	e195      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f48:	f107 0318 	add.w	r3, r7, #24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f9b7 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f56:	e18d      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fafb 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f66:	e185      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8002f7c:	e17a      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f84:	d102      	bne.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8002f86:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f8a:	e173      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f92:	d102      	bne.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8002f94:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8002f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f98:	e16c      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002f9e:	e169      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002fa4:	e166      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002faa:	bf00      	nop
 8002fac:	e162      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb4:	d15d      	bne.n	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fc6:	d01f      	beq.n	8003008 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8002fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fcc:	d805      	bhi.n	8002fda <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8002fd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fd6:	d00f      	beq.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8002fd8:	e047      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8002fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fde:	d041      	beq.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8002fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fe4:	d018      	beq.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8002fe6:	e040      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8002fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fbff 	bl	80037f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002ff6:	e13d      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ff8:	f107 0318 	add.w	r3, r7, #24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f95f 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003006:	e135      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003008:	f107 030c 	add.w	r3, r7, #12
 800300c:	4618      	mov	r0, r3
 800300e:	f000 faa3 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003016:	e12d      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003020:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800302c:	e122      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003034:	d10c      	bne.n	8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8003036:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800303a:	e11b      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800303c:	58024400 	.word	0x58024400
 8003040:	03d09000 	.word	0x03d09000
 8003044:	003d0900 	.word	0x003d0900
 8003048:	017d7840 	.word	0x017d7840
 800304c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003056:	d102      	bne.n	800305e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8003058:	4b89      	ldr	r3, [pc, #548]	; (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800305c:	e10a      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003062:	e107      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003064:	4b87      	ldr	r3, [pc, #540]	; (8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003068:	e104      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800306e:	bf00      	nop
 8003070:	e100      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003078:	d153      	bne.n	8003122 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800307a:	4b83      	ldr	r3, [pc, #524]	; (8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800307c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003082:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308a:	d01f      	beq.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800308c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003090:	d805      	bhi.n	800309e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d00f      	beq.n	80030bc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800309c:	e03d      	b.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800309e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030a2:	d037      	beq.n	8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80030a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a8:	d018      	beq.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80030aa:	e036      	b.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80030ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fb9d 	bl	80037f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030ba:	e0db      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80030bc:	f107 0318 	add.w	r3, r7, #24
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f8fd 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030ca:	e0d3      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fa41 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030da:	e0cb      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80030dc:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80030de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80030e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80030ec:	4b67      	ldr	r3, [pc, #412]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80030ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80030f0:	e0c0      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030f8:	d102      	bne.n	8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80030fe:	e0b9      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003106:	d102      	bne.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8003108:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800310c:	e0b2      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003112:	e0af      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003114:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8003116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003118:	e0ac      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800311e:	bf00      	nop
 8003120:	e0a8      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003128:	d13d      	bne.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800312a:	4b57      	ldr	r3, [pc, #348]	; (8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313a:	d00c      	beq.n	8003156 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800313c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003140:	d011      	beq.n	8003166 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d12b      	bne.n	800319e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003146:	f107 0318 	add.w	r3, r7, #24
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f8b8 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003154:	e08e      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003156:	f107 030c 	add.w	r3, r7, #12
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f9fc 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003164:	e086      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003166:	4b48      	ldr	r3, [pc, #288]	; (8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800316e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003176:	4b45      	ldr	r3, [pc, #276]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800317a:	e07b      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003182:	d102      	bne.n	800318a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8003184:	4b42      	ldr	r3, [pc, #264]	; (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003188:	e074      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800318a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003190:	d102      	bne.n	8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003196:	e06d      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800319c:	e06a      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031a2:	bf00      	nop
 80031a4:	e066      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d11f      	bne.n	80031ee <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80031ae:	4b36      	ldr	r3, [pc, #216]	; (8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c2:	d008      	beq.n	80031d6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80031c4:	e00f      	b.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80031c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fb10 	bl	80037f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031d4:	e04e      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80031d6:	f107 0318 	add.w	r3, r7, #24
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 f870 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031e4:	e046      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80031ea:	bf00      	nop
 80031ec:	e042      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f4:	d13c      	bne.n	8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80031f6:	4b24      	ldr	r3, [pc, #144]	; (8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80031fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003206:	d01e      	beq.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8003208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800320c:	d805      	bhi.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003216:	d00e      	beq.n	8003236 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8003218:	e026      	b.n	8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321e:	d01d      	beq.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8003220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003224:	d01d      	beq.n	8003262 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003226:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800322a:	d014      	beq.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800322c:	e01c      	b.n	8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800322e:	f000 f831 	bl	8003294 <HAL_RCCEx_GetD3PCLK1Freq>
 8003232:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8003234:	e01e      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003236:	f107 0318 	add.w	r3, r7, #24
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f840 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003244:	e016      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f984 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003254:	e00e      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800325a:	e00b      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800325e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003260:	e008      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003266:	e005      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800326c:	bf00      	nop
 800326e:	e001      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8003274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003276:	4618      	mov	r0, r3
 8003278:	3740      	adds	r7, #64	; 0x40
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	017d7840 	.word	0x017d7840
 8003284:	00bb8000 	.word	0x00bb8000
 8003288:	58024400 	.word	0x58024400
 800328c:	03d09000 	.word	0x03d09000
 8003290:	003d0900 	.word	0x003d0900

08003294 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003298:	f7ff fd28 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 800329c:	4601      	mov	r1, r0
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	58024400 	.word	0x58024400
 80032bc:	08009b64 	.word	0x08009b64

080032c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032c8:	4b9d      	ldr	r3, [pc, #628]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80032d2:	4b9b      	ldr	r3, [pc, #620]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	0b1b      	lsrs	r3, r3, #12
 80032d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80032de:	4b98      	ldr	r3, [pc, #608]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80032ea:	4b95      	ldr	r3, [pc, #596]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	08db      	lsrs	r3, r3, #3
 80032f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 810a 	beq.w	8003522 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d05a      	beq.n	80033ca <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003314:	2b01      	cmp	r3, #1
 8003316:	d302      	bcc.n	800331e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003318:	2b02      	cmp	r3, #2
 800331a:	d078      	beq.n	800340e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800331c:	e099      	b.n	8003452 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d02d      	beq.n	8003386 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800332a:	4b85      	ldr	r3, [pc, #532]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	08db      	lsrs	r3, r3, #3
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	4a83      	ldr	r2, [pc, #524]	; (8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003354:	4b7a      	ldr	r3, [pc, #488]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003364:	ed97 6a03 	vldr	s12, [r7, #12]
 8003368:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003548 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800336c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003380:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003384:	e087      	b.n	8003496 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	ee07 3a90 	vmov	s15, r3
 800338c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003390:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003398:	4b69      	ldr	r3, [pc, #420]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80033ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003548 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80033b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033c8:	e065      	b.n	8003496 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80033d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033dc:	4b58      	ldr	r3, [pc, #352]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e4:	ee07 3a90 	vmov	s15, r3
 80033e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80033f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003548 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80033f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003408:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800340c:	e043      	b.n	8003496 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003418:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800341c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003420:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003430:	ed97 6a03 	vldr	s12, [r7, #12]
 8003434:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003548 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003450:	e021      	b.n	8003496 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003474:	ed97 6a03 	vldr	s12, [r7, #12]
 8003478:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003548 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800347c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003490:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003494:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	0a5b      	lsrs	r3, r3, #9
 800349c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80034b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034bc:	ee17 2a90 	vmov	r2, s15
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80034c4:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034de:	edd7 6a07 	vldr	s13, [r7, #28]
 80034e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ea:	ee17 2a90 	vmov	r2, s15
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	0e1b      	lsrs	r3, r3, #24
 80034f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800350c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003518:	ee17 2a90 	vmov	r2, s15
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003520:	e008      	b.n	8003534 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	3724      	adds	r7, #36	; 0x24
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	58024400 	.word	0x58024400
 8003544:	03d09000 	.word	0x03d09000
 8003548:	46000000 	.word	0x46000000
 800354c:	4c742400 	.word	0x4c742400
 8003550:	4a742400 	.word	0x4a742400
 8003554:	4bbebc20 	.word	0x4bbebc20

08003558 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003560:	4b9d      	ldr	r3, [pc, #628]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800356a:	4b9b      	ldr	r3, [pc, #620]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	0d1b      	lsrs	r3, r3, #20
 8003570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003574:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003576:	4b98      	ldr	r3, [pc, #608]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003582:	4b95      	ldr	r3, [pc, #596]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	08db      	lsrs	r3, r3, #3
 8003588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 810a 	beq.w	80037ba <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d05a      	beq.n	8003662 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d302      	bcc.n	80035b6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d078      	beq.n	80036a6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80035b4:	e099      	b.n	80036ea <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035b6:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02d      	beq.n	800361e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035c2:	4b85      	ldr	r3, [pc, #532]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	08db      	lsrs	r3, r3, #3
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	4a83      	ldr	r2, [pc, #524]	; (80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ec:	4b7a      	ldr	r3, [pc, #488]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8003600:	eddf 5a77 	vldr	s11, [pc, #476]	; 80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800360c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003618:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800361c:	e087      	b.n	800372e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003628:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800362c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003630:	4b69      	ldr	r3, [pc, #420]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003640:	ed97 6a03 	vldr	s12, [r7, #12]
 8003644:	eddf 5a66 	vldr	s11, [pc, #408]	; 80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800364c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003660:	e065      	b.n	800372e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80037e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003674:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003684:	ed97 6a03 	vldr	s12, [r7, #12]
 8003688:	eddf 5a55 	vldr	s11, [pc, #340]	; 80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800368c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036a4:	e043      	b.n	800372e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80036b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b8:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80036cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80036d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036e8:	e021      	b.n	800372e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80037e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80036f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003710:	eddf 5a33 	vldr	s11, [pc, #204]	; 80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003728:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800372c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	0a5b      	lsrs	r3, r3, #9
 8003734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003744:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003748:	edd7 6a07 	vldr	s13, [r7, #28]
 800374c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003754:	ee17 2a90 	vmov	r2, s15
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800375c:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003776:	edd7 6a07 	vldr	s13, [r7, #28]
 800377a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800377e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003782:	ee17 2a90 	vmov	r2, s15
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	0e1b      	lsrs	r3, r3, #24
 8003790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80037a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b0:	ee17 2a90 	vmov	r2, s15
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	3724      	adds	r7, #36	; 0x24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	58024400 	.word	0x58024400
 80037dc:	03d09000 	.word	0x03d09000
 80037e0:	46000000 	.word	0x46000000
 80037e4:	4c742400 	.word	0x4c742400
 80037e8:	4a742400 	.word	0x4a742400
 80037ec:	4bbebc20 	.word	0x4bbebc20

080037f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037f8:	4b9d      	ldr	r3, [pc, #628]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003802:	4b9b      	ldr	r3, [pc, #620]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800380c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800380e:	4b98      	ldr	r3, [pc, #608]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003818:	4b95      	ldr	r3, [pc, #596]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	08db      	lsrs	r3, r3, #3
 800381e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003830:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 810a 	beq.w	8003a50 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d05a      	beq.n	80038f8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8003842:	2b01      	cmp	r3, #1
 8003844:	d302      	bcc.n	800384c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8003846:	2b02      	cmp	r3, #2
 8003848:	d078      	beq.n	800393c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800384a:	e099      	b.n	8003980 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800384c:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d02d      	beq.n	80038b4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003858:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	4a84      	ldr	r2, [pc, #528]	; (8003a74 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	ee07 3a90 	vmov	s15, r3
 8003870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003882:	4b7b      	ldr	r3, [pc, #492]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003892:	ed97 6a03 	vldr	s12, [r7, #12]
 8003896:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80038b2:	e087      	b.n	80039c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80038c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c6:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80038de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038f6:	e065      	b.n	80039c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a03 	vldr	s12, [r7, #12]
 800391e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800393a:	e043      	b.n	80039c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b48      	ldr	r3, [pc, #288]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003962:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800397e:	e021      	b.n	80039c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039c2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	0a5b      	lsrs	r3, r3, #9
 80039ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039de:	edd7 6a07 	vldr	s13, [r7, #28]
 80039e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ea:	ee17 2a90 	vmov	r2, s15
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80039f2:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a18:	ee17 2a90 	vmov	r2, s15
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	0e1b      	lsrs	r3, r3, #24
 8003a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a46:	ee17 2a90 	vmov	r2, s15
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003a4e:	e008      	b.n	8003a62 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	3724      	adds	r7, #36	; 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	58024400 	.word	0x58024400
 8003a74:	03d09000 	.word	0x03d09000
 8003a78:	46000000 	.word	0x46000000
 8003a7c:	4c742400 	.word	0x4c742400
 8003a80:	4a742400 	.word	0x4a742400
 8003a84:	4bbebc20 	.word	0x4bbebc20

08003a88 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07c      	b.n	8003b94 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd f94e 	bl	8000d5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f867 	bl	8003b9c <HAL_SD_InitCard>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e05d      	b.n	8003b94 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8003ad8:	f107 0308 	add.w	r3, r7, #8
 8003adc:	4619      	mov	r1, r3
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fbf6 	bl	80042d0 <HAL_SD_GetCardStatus>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e052      	b.n	8003b94 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8003aee:	7e3b      	ldrb	r3, [r7, #24]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8003af4:	7e7b      	ldrb	r3, [r7, #25]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d10a      	bne.n	8003b18 <HAL_SD_Init+0x90>
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <HAL_SD_Init+0x86>
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b14:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b16:	e00b      	b.n	8003b30 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d104      	bne.n	8003b2a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b28:	e002      	b.n	8003b30 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4619      	mov	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fcac 	bl	8004494 <HAL_SD_ConfigWideBusOperation>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e026      	b.n	8003b94 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8003b46:	f7fd fbb9 	bl	80012bc <HAL_GetTick>
 8003b4a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003b4c:	e011      	b.n	8003b72 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8003b4e:	f7fd fbb5 	bl	80012bc <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d109      	bne.n	8003b72 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e010      	b.n	8003b94 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fd38 	bl	80045e8 <HAL_SD_GetCardState>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d1e7      	bne.n	8003b4e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003b9c:	b5b0      	push	{r4, r5, r7, lr}
 8003b9e:	b08e      	sub	sp, #56	; 0x38
 8003ba0:	af04      	add	r7, sp, #16
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8003bb4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003bb8:	f7ff f8f4 	bl	8002da4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bbc:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	4a40      	ldr	r2, [pc, #256]	; (8003cc4 <HAL_SD_InitCard+0x128>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d107      	bne.n	8003be4 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0210 	orr.w	r2, r2, #16
 8003be2:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681d      	ldr	r5, [r3, #0]
 8003be8:	466c      	mov	r4, sp
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003bf6:	f107 0308 	add.w	r3, r7, #8
 8003bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f002 ff9d 	bl	8006b3c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f002 ffcf 	bl	8006baa <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003c1e:	4a2a      	ldr	r2, [pc, #168]	; (8003cc8 <HAL_SD_InitCard+0x12c>)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fd fb53 	bl	80012d4 <HAL_Delay>
 8003c2e:	e002      	b.n	8003c36 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8003c30:	2002      	movs	r0, #2
 8003c32:	f7fd fb4f 	bl	80012d4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fdb4 	bl	80047a4 <SD_PowerON>
 8003c3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e02e      	b.n	8003cba <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fce3 	bl	8004628 <SD_InitCard>
 8003c62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e01b      	b.n	8003cba <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f003 f822 	bl	8006cd4 <SDMMC_CmdBlockLength>
 8003c90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00f      	beq.n	8003cb8 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ccc <HAL_SD_InitCard+0x130>)
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3728      	adds	r7, #40	; 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	014f8b59 	.word	0x014f8b59
 8003cc8:	00012110 	.word	0x00012110
 8003ccc:	1fe00fff 	.word	0x1fe00fff

08003cd0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	; 0x30
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d107      	bne.n	8003cf8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e08d      	b.n	8003e14 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	f040 8086 	bne.w	8003e12 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	441a      	add	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d907      	bls.n	8003d2a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e074      	b.n	8003e14 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	025a      	lsls	r2, r3, #9
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d002      	beq.n	8003d56 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	025b      	lsls	r3, r3, #9
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	025b      	lsls	r3, r3, #9
 8003d60:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003d62:	2390      	movs	r3, #144	; 0x90
 8003d64:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003d66:	2302      	movs	r3, #2
 8003d68:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f107 0210 	add.w	r2, r7, #16
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f002 ff7d 	bl	8006c7c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d90:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d90a      	bls.n	8003dbe <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2282      	movs	r2, #130	; 0x82
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db4:	4618      	mov	r0, r3
 8003db6:	f002 ffd3 	bl	8006d60 <SDMMC_CmdReadMultiBlock>
 8003dba:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003dbc:	e009      	b.n	8003dd2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2281      	movs	r2, #129	; 0x81
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 ffa5 	bl	8006d1a <SDMMC_CmdReadSingleBlock>
 8003dd0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d012      	beq.n	8003dfe <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0f      	ldr	r2, [pc, #60]	; (8003e1c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00a      	b.n	8003e14 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3730      	adds	r7, #48	; 0x30
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	1fe00fff 	.word	0x1fe00fff

08003e20 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e08d      	b.n	8003f64 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	f040 8086 	bne.w	8003f62 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	441a      	add	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d907      	bls.n	8003e7a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e074      	b.n	8003f64 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2200      	movs	r2, #0
 8003e88:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	025a      	lsls	r2, r3, #9
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d002      	beq.n	8003ea6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	025b      	lsls	r3, r3, #9
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	025b      	lsls	r3, r3, #9
 8003eb0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003eb2:	2390      	movs	r3, #144	; 0x90
 8003eb4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f107 0210 	add.w	r2, r7, #16
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 fed5 	bl	8006c7c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d90a      	bls.n	8003f0e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	22a0      	movs	r2, #160	; 0xa0
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f04:	4618      	mov	r0, r3
 8003f06:	f002 ff71 	bl	8006dec <SDMMC_CmdWriteMultiBlock>
 8003f0a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003f0c:	e009      	b.n	8003f22 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2290      	movs	r2, #144	; 0x90
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f002 ff43 	bl	8006da6 <SDMMC_CmdWriteSingleBlock>
 8003f20:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d012      	beq.n	8003f4e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0f      	ldr	r2, [pc, #60]	; (8003f6c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f36:	431a      	orrs	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e00a      	b.n	8003f64 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8003f5c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e000      	b.n	8003f64 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
  }
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3730      	adds	r7, #48	; 0x30
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	1fe00fff 	.word	0x1fe00fff

08003f70 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f96:	0f9b      	lsrs	r3, r3, #30
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	0e9b      	lsrs	r3, r3, #26
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	0e1b      	lsrs	r3, r3, #24
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe8:	0d1b      	lsrs	r3, r3, #20
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004006:	0bdb      	lsrs	r3, r3, #15
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	b2da      	uxtb	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004018:	0b9b      	lsrs	r3, r3, #14
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	b2da      	uxtb	r2, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800402a:	0b5b      	lsrs	r3, r3, #13
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800403c:	0b1b      	lsrs	r3, r3, #12
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	b2da      	uxtb	r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2200      	movs	r2, #0
 800404e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d163      	bne.n	8004120 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405c:	009a      	lsls	r2, r3, #2
 800405e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004062:	4013      	ands	r3, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004068:	0f92      	lsrs	r2, r2, #30
 800406a:	431a      	orrs	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004074:	0edb      	lsrs	r3, r3, #27
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	b2da      	uxtb	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004086:	0e1b      	lsrs	r3, r3, #24
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	b2da      	uxtb	r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004098:	0d5b      	lsrs	r3, r3, #21
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040aa:	0c9b      	lsrs	r3, r3, #18
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040bc:	0bdb      	lsrs	r3, r3, #15
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	7e1b      	ldrb	r3, [r3, #24]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	3302      	adds	r3, #2
 80040e0:	2201      	movs	r2, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80040ea:	fb02 f203 	mul.w	r2, r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	7a1b      	ldrb	r3, [r3, #8]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	2201      	movs	r2, #1
 80040fe:	409a      	lsls	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800410c:	0a52      	lsrs	r2, r2, #9
 800410e:	fb02 f203 	mul.w	r2, r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411c:	659a      	str	r2, [r3, #88]	; 0x58
 800411e:	e031      	b.n	8004184 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d11d      	bne.n	8004164 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	431a      	orrs	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	3301      	adds	r3, #1
 8004144:	029a      	lsls	r2, r3, #10
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004158:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	659a      	str	r2, [r3, #88]	; 0x58
 8004162:	e00f      	b.n	8004184 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a58      	ldr	r2, [pc, #352]	; (80042cc <HAL_SD_GetCardCSD+0x344>)
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e09d      	b.n	80042c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004188:	0b9b      	lsrs	r3, r3, #14
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	b2da      	uxtb	r2, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419a:	09db      	lsrs	r3, r3, #7
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041bc:	0fdb      	lsrs	r3, r3, #31
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c8:	0f5b      	lsrs	r3, r3, #29
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041da:	0e9b      	lsrs	r3, r3, #26
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ec:	0d9b      	lsrs	r3, r3, #22
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fe:	0d5b      	lsrs	r3, r3, #21
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421a:	0c1b      	lsrs	r3, r3, #16
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422e:	0bdb      	lsrs	r3, r3, #15
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004242:	0b9b      	lsrs	r3, r3, #14
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	b2da      	uxtb	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004256:	0b5b      	lsrs	r3, r3, #13
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	b2da      	uxtb	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426a:	0b1b      	lsrs	r3, r3, #12
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	b2da      	uxtb	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800427e:	0a9b      	lsrs	r3, r3, #10
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	b2da      	uxtb	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004292:	0a1b      	lsrs	r3, r3, #8
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	b2da      	uxtb	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	1fe00fff 	.word	0x1fe00fff

080042d0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b094      	sub	sp, #80	; 0x50
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80042e0:	f107 0308 	add.w	r3, r7, #8
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fb64 	bl	80049b4 <SD_SendSDStatus>
 80042ec:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80042ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d011      	beq.n	8004318 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a4f      	ldr	r2, [pc, #316]	; (8004438 <HAL_SD_GetCardStatus+0x168>)
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004316:	e070      	b.n	80043fa <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	b2da      	uxtb	r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	b2da      	uxtb	r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	b29b      	uxth	r3, r3
 800433e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004342:	b29a      	uxth	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	0e1b      	lsrs	r3, r3, #24
 8004348:	b29b      	uxth	r3, r3
 800434a:	4313      	orrs	r3, r2
 800434c:	b29a      	uxth	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	061a      	lsls	r2, r3, #24
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800435e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004368:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0e1b      	lsrs	r3, r3, #24
 800436e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	b2da      	uxtb	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	0d1b      	lsrs	r3, r3, #20
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	b2da      	uxtb	r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	b29b      	uxth	r3, r3
 800439c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	4313      	orrs	r3, r2
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	0a9b      	lsrs	r3, r3, #10
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	0a1b      	lsrs	r3, r3, #8
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	0e1b      	lsrs	r3, r3, #24
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004402:	4618      	mov	r0, r3
 8004404:	f002 fc66 	bl	8006cd4 <SDMMC_CmdBlockLength>
 8004408:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800440a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00d      	beq.n	800442c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a08      	ldr	r2, [pc, #32]	; (8004438 <HAL_SD_GetCardStatus+0x168>)
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800442c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004430:	4618      	mov	r0, r3
 8004432:	3750      	adds	r7, #80	; 0x50
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	1fe00fff 	.word	0x1fe00fff

0800443c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004494:	b5b0      	push	{r4, r5, r7, lr}
 8004496:	b08e      	sub	sp, #56	; 0x38
 8004498:	af04      	add	r7, sp, #16
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2203      	movs	r2, #3
 80044a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d02e      	beq.n	8004512 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ba:	d106      	bne.n	80044ca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38
 80044c8:	e029      	b.n	800451e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d0:	d10a      	bne.n	80044e8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fb66 	bl	8004ba4 <SD_WideBus_Enable>
 80044d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
 80044e6:	e01a      	b.n	800451e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fba3 	bl	8004c3a <SD_WideBus_Disable>
 80044f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
 8004502:	e00c      	b.n	800451e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
 8004510:	e005      	b.n	800451e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2e      	ldr	r2, [pc, #184]	; (80045e4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004534:	e034      	b.n	80045a0 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d903      	bls.n	800455c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e012      	b.n	8004582 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004564:	d103      	bne.n	800456e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e009      	b.n	8004582 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004576:	d102      	bne.n	800457e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8004578:	2302      	movs	r3, #2
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	e001      	b.n	8004582 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800457e:	2304      	movs	r3, #4
 8004580:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681d      	ldr	r5, [r3, #0]
 8004586:	466c      	mov	r4, sp
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004594:	f107 0308 	add.w	r3, r7, #8
 8004598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800459a:	4628      	mov	r0, r5
 800459c:	f002 face 	bl	8006b3c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045a8:	4618      	mov	r0, r3
 80045aa:	f002 fb93 	bl	8006cd4 <SDMMC_CmdBlockLength>
 80045ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00c      	beq.n	80045d0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <HAL_SD_ConfigWideBusOperation+0x150>)
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80045d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3728      	adds	r7, #40	; 0x28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bdb0      	pop	{r4, r5, r7, pc}
 80045e4:	1fe00fff 	.word	0x1fe00fff

080045e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80045f4:	f107 030c 	add.w	r3, r7, #12
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 faaa 	bl	8004b54 <SD_SendStatus>
 8004600:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	0a5b      	lsrs	r3, r3, #9
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800461e:	693b      	ldr	r3, [r7, #16]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b091      	sub	sp, #68	; 0x44
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004630:	2301      	movs	r3, #1
 8004632:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f002 fac7 	bl	8006bcc <SDMMC_GetPowerState>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004644:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004648:	e0a8      	b.n	800479c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	2b03      	cmp	r3, #3
 8004650:	d02e      	beq.n	80046b0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f002 fcd5 	bl	8007006 <SDMMC_CmdSendCID>
 800465c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800465e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <SD_InitCard+0x40>
    {
      return errorstate;
 8004664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004666:	e099      	b.n	800479c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f002 faf1 	bl	8006c56 <SDMMC_GetResponse>
 8004674:	4602      	mov	r2, r0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2104      	movs	r1, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f002 fae8 	bl	8006c56 <SDMMC_GetResponse>
 8004686:	4602      	mov	r2, r0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2108      	movs	r1, #8
 8004692:	4618      	mov	r0, r3
 8004694:	f002 fadf 	bl	8006c56 <SDMMC_GetResponse>
 8004698:	4602      	mov	r2, r0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	210c      	movs	r1, #12
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 fad6 	bl	8006c56 <SDMMC_GetResponse>
 80046aa:	4602      	mov	r2, r0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d00d      	beq.n	80046d4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f107 020e 	add.w	r2, r7, #14
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f002 fcde 	bl	8007084 <SDMMC_CmdSetRelAdd>
 80046c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <SD_InitCard+0xac>
    {
      return errorstate;
 80046d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d2:	e063      	b.n	800479c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d036      	beq.n	800474a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80046dc:	89fb      	ldrh	r3, [r7, #14]
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f002 fca7 	bl	8007044 <SDMMC_CmdSendCSD>
 80046f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <SD_InitCard+0xda>
    {
      return errorstate;
 80046fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004700:	e04c      	b.n	800479c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f002 faa4 	bl	8006c56 <SDMMC_GetResponse>
 800470e:	4602      	mov	r2, r0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2104      	movs	r1, #4
 800471a:	4618      	mov	r0, r3
 800471c:	f002 fa9b 	bl	8006c56 <SDMMC_GetResponse>
 8004720:	4602      	mov	r2, r0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2108      	movs	r1, #8
 800472c:	4618      	mov	r0, r3
 800472e:	f002 fa92 	bl	8006c56 <SDMMC_GetResponse>
 8004732:	4602      	mov	r2, r0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	210c      	movs	r1, #12
 800473e:	4618      	mov	r0, r3
 8004740:	f002 fa89 	bl	8006c56 <SDMMC_GetResponse>
 8004744:	4602      	mov	r2, r0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2104      	movs	r1, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f002 fa80 	bl	8006c56 <SDMMC_GetResponse>
 8004756:	4603      	mov	r3, r0
 8004758:	0d1a      	lsrs	r2, r3, #20
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800475e:	f107 0310 	add.w	r3, r7, #16
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff fc0f 	bl	8003f88 <HAL_SD_GetCardCSD>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004770:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004774:	e012      	b.n	800479c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	f04f 0400 	mov.w	r4, #0
 8004784:	461a      	mov	r2, r3
 8004786:	4623      	mov	r3, r4
 8004788:	4608      	mov	r0, r1
 800478a:	f002 fb52 	bl	8006e32 <SDMMC_CmdSelDesel>
 800478e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <SD_InitCard+0x172>
  {
    return errorstate;
 8004796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004798:	e000      	b.n	800479c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3744      	adds	r7, #68	; 0x44
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd90      	pop	{r4, r7, pc}

080047a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7fc fd80 	bl	80012bc <HAL_GetTick>
 80047bc:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f002 fb59 	bl	8006e7a <SDMMC_CmdGoIdleState>
 80047c8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <SD_PowerON+0x30>
  {
    return errorstate;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	e0e9      	b.n	80049a8 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f002 fb6c 	bl	8006eb6 <SDMMC_CmdOperCond>
 80047de:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f002 fb42 	bl	8006e7a <SDMMC_CmdGoIdleState>
 80047f6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <SD_PowerON+0x64>
    {
      return errorstate;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	e0d2      	b.n	80049a8 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	2b01      	cmp	r3, #1
 800480e:	d137      	bne.n	8004880 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2100      	movs	r1, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f002 fb6d 	bl	8006ef6 <SDMMC_CmdAppCommand>
 800481c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02d      	beq.n	8004880 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004824:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004828:	e0be      	b.n	80049a8 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f002 fb60 	bl	8006ef6 <SDMMC_CmdAppCommand>
 8004836:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <SD_PowerON+0x9e>
    {
      return errorstate;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	e0b2      	b.n	80049a8 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	495a      	ldr	r1, [pc, #360]	; (80049b0 <SD_PowerON+0x20c>)
 8004848:	4618      	mov	r0, r3
 800484a:	f002 fb77 	bl	8006f3c <SDMMC_CmdAppOperCommand>
 800484e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004856:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800485a:	e0a5      	b.n	80049a8 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f002 f9f7 	bl	8006c56 <SDMMC_GetResponse>
 8004868:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	0fdb      	lsrs	r3, r3, #31
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <SD_PowerON+0xd2>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <SD_PowerON+0xd4>
 8004876:	2300      	movs	r3, #0
 8004878:	61bb      	str	r3, [r7, #24]

    count++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004886:	4293      	cmp	r3, r2
 8004888:	d802      	bhi.n	8004890 <SD_PowerON+0xec>
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0cc      	beq.n	800482a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004896:	4293      	cmp	r3, r2
 8004898:	d902      	bls.n	80048a0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800489a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800489e:	e083      	b.n	80049a8 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d07d      	beq.n	80049a6 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d176      	bne.n	80049a6 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d071      	beq.n	80049a6 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0208 	orr.w	r2, r2, #8
 80048d8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f002 fc37 	bl	8007152 <SDMMC_CmdVoltageSwitch>
 80048e4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00c      	beq.n	8004906 <SD_PowerON+0x162>
        {
          return errorstate;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	e05b      	b.n	80049a8 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80048f0:	f7fc fce4 	bl	80012bc <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d102      	bne.n	8004906 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8004900:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004904:	e050      	b.n	80049a8 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004914:	d1ec      	bne.n	80048f0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800491e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492e:	d002      	beq.n	8004936 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8004930:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004934:	e038      	b.n	80049a8 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8004936:	2001      	movs	r0, #1
 8004938:	f7ff fb1a 	bl	8003f70 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0204 	orr.w	r2, r2, #4
 800494a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800494c:	e00a      	b.n	8004964 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800494e:	f7fc fcb5 	bl	80012bc <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d102      	bne.n	8004964 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800495e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004962:	e021      	b.n	80049a8 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004972:	d1ec      	bne.n	800494e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800497c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498c:	d102      	bne.n	8004994 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800498e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004992:	e009      	b.n	80049a8 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2213      	movs	r2, #19
 800499a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	c1100000 	.word	0xc1100000

080049b4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	; 0x30
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80049be:	f7fc fc7d 	bl	80012bc <HAL_GetTick>
 80049c2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f002 f941 	bl	8006c56 <SDMMC_GetResponse>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049de:	d102      	bne.n	80049e6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049e4:	e0b0      	b.n	8004b48 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2140      	movs	r1, #64	; 0x40
 80049ec:	4618      	mov	r0, r3
 80049ee:	f002 f971 	bl	8006cd4 <SDMMC_CmdBlockLength>
 80049f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	e0a0      	b.n	8004b48 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f002 fa6f 	bl	8006ef6 <SDMMC_CmdAppCommand>
 8004a18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	e08d      	b.n	8004b48 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8004a32:	2340      	movs	r3, #64	; 0x40
 8004a34:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8004a36:	2360      	movs	r3, #96	; 0x60
 8004a38:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004a42:	2301      	movs	r3, #1
 8004a44:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f107 0208 	add.w	r2, r7, #8
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f002 f913 	bl	8006c7c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f002 fb57 	bl	800710e <SDMMC_CmdStatusRegister>
 8004a60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02b      	beq.n	8004ac0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	e069      	b.n	8004b48 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d013      	beq.n	8004aaa <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8004a82:	2300      	movs	r3, #0
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a86:	e00d      	b.n	8004aa4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f002 f87f 	bl	8006b90 <SDMMC_ReadFIFO>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	601a      	str	r2, [r3, #0]
        pData++;
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	2b07      	cmp	r3, #7
 8004aa8:	d9ee      	bls.n	8004a88 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004aaa:	f7fc fc07 	bl	80012bc <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d102      	bne.n	8004ac0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004aba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004abe:	e043      	b.n	8004b48 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0d2      	beq.n	8004a74 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004adc:	2308      	movs	r3, #8
 8004ade:	e033      	b.n	8004b48 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004aee:	2302      	movs	r3, #2
 8004af0:	e02a      	b.n	8004b48 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d017      	beq.n	8004b30 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8004b00:	2320      	movs	r3, #32
 8004b02:	e021      	b.n	8004b48 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f002 f841 	bl	8006b90 <SDMMC_ReadFIFO>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	601a      	str	r2, [r3, #0]
    pData++;
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	3304      	adds	r3, #4
 8004b18:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b1a:	f7fc fbcf 	bl	80012bc <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d102      	bne.n	8004b30 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004b2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b2e:	e00b      	b.n	8004b48 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e2      	bne.n	8004b04 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a03      	ldr	r2, [pc, #12]	; (8004b50 <SD_SendSDStatus+0x19c>)
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3730      	adds	r7, #48	; 0x30
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	18000f3a 	.word	0x18000f3a

08004b54 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b68:	e018      	b.n	8004b9c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f002 faa6 	bl	80070c8 <SDMMC_CmdSendStatus>
 8004b7c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	e009      	b.n	8004b9c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f002 f861 	bl	8006c56 <SDMMC_GetResponse>
 8004b94:	4602      	mov	r2, r0
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f002 f84b 	bl	8006c56 <SDMMC_GetResponse>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bca:	d102      	bne.n	8004bd2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bd0:	e02f      	b.n	8004c32 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004bd2:	f107 030c 	add.w	r3, r7, #12
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f879 	bl	8004cd0 <SD_FindSCR>
 8004bde:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	e023      	b.n	8004c32 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01c      	beq.n	8004c2e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f002 f978 	bl	8006ef6 <SDMMC_CmdAppCommand>
 8004c06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	e00f      	b.n	8004c32 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2102      	movs	r1, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f002 f9af 	bl	8006f7c <SDMMC_CmdBusWidth>
 8004c1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	e003      	b.n	8004c32 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e001      	b.n	8004c32 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f002 f800 	bl	8006c56 <SDMMC_GetResponse>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c60:	d102      	bne.n	8004c68 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c66:	e02f      	b.n	8004cc8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c68:	f107 030c 	add.w	r3, r7, #12
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f82e 	bl	8004cd0 <SD_FindSCR>
 8004c74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	e023      	b.n	8004cc8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01c      	beq.n	8004cc4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f002 f92d 	bl	8006ef6 <SDMMC_CmdAppCommand>
 8004c9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	e00f      	b.n	8004cc8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f002 f964 	bl	8006f7c <SDMMC_CmdBusWidth>
 8004cb4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	e003      	b.n	8004cc8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e001      	b.n	8004cc8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08e      	sub	sp, #56	; 0x38
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004cda:	f7fc faef 	bl	80012bc <HAL_GetTick>
 8004cde:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2108      	movs	r1, #8
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 ffec 	bl	8006cd4 <SDMMC_CmdBlockLength>
 8004cfc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	e0ad      	b.n	8004e64 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f002 f8ee 	bl	8006ef6 <SDMMC_CmdAppCommand>
 8004d1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	e09e      	b.n	8004e64 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004d30:	2330      	movs	r3, #48	; 0x30
 8004d32:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d34:	2302      	movs	r3, #2
 8004d36:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f107 0210 	add.w	r2, r7, #16
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 ff96 	bl	8006c7c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f002 f934 	bl	8006fc2 <SDMMC_CmdSendSCR>
 8004d5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d027      	beq.n	8004db2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	e07e      	b.n	8004e64 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d113      	bne.n	8004d9c <SD_FindSCR+0xcc>
 8004d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d110      	bne.n	8004d9c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 ff06 	bl	8006b90 <SDMMC_ReadFIFO>
 8004d84:	4603      	mov	r3, r0
 8004d86:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f001 feff 	bl	8006b90 <SDMMC_ReadFIFO>
 8004d92:	4603      	mov	r3, r0
 8004d94:	60fb      	str	r3, [r7, #12]
      index++;
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	3301      	adds	r3, #1
 8004d9a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d9c:	f7fc fa8e 	bl	80012bc <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d102      	bne.n	8004db2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004db0:	e058      	b.n	8004e64 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db8:	f240 532a 	movw	r3, #1322	; 0x52a
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0d1      	beq.n	8004d66 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004dd8:	2308      	movs	r3, #8
 8004dda:	e043      	b.n	8004e64 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2202      	movs	r2, #2
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004df2:	2302      	movs	r3, #2
 8004df4:	e036      	b.n	8004e64 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e0c:	2320      	movs	r3, #32
 8004e0e:	e029      	b.n	8004e64 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <SD_FindSCR+0x19c>)
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	061a      	lsls	r2, r3, #24
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e24:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e2e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	0e1b      	lsrs	r3, r3, #24
 8004e34:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	601a      	str	r2, [r3, #0]
    scr++;
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	061a      	lsls	r2, r3, #24
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e4c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	0a1b      	lsrs	r3, r3, #8
 8004e52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e56:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	0e1b      	lsrs	r3, r3, #24
 8004e5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3738      	adds	r7, #56	; 0x38
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	18000f3a 	.word	0x18000f3a

08004e70 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e0e2      	b.n	800504c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a70      	ldr	r2, [pc, #448]	; (8005054 <HAL_SPI_Init+0x1e4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00f      	beq.n	8004eb6 <HAL_SPI_Init+0x46>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6f      	ldr	r2, [pc, #444]	; (8005058 <HAL_SPI_Init+0x1e8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_SPI_Init+0x46>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a6d      	ldr	r2, [pc, #436]	; (800505c <HAL_SPI_Init+0x1ec>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d005      	beq.n	8004eb6 <HAL_SPI_Init+0x46>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	2b0f      	cmp	r3, #15
 8004eb0:	d901      	bls.n	8004eb6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e0ca      	b.n	800504c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fb96 	bl	80055e8 <SPI_GetPacketSize>
 8004ebc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a64      	ldr	r2, [pc, #400]	; (8005054 <HAL_SPI_Init+0x1e4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00c      	beq.n	8004ee2 <HAL_SPI_Init+0x72>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a62      	ldr	r2, [pc, #392]	; (8005058 <HAL_SPI_Init+0x1e8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d007      	beq.n	8004ee2 <HAL_SPI_Init+0x72>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a61      	ldr	r2, [pc, #388]	; (800505c <HAL_SPI_Init+0x1ec>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d002      	beq.n	8004ee2 <HAL_SPI_Init+0x72>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d811      	bhi.n	8004f06 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004ee6:	4a5b      	ldr	r2, [pc, #364]	; (8005054 <HAL_SPI_Init+0x1e4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a59      	ldr	r2, [pc, #356]	; (8005058 <HAL_SPI_Init+0x1e8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_SPI_Init+0x90>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a58      	ldr	r2, [pc, #352]	; (800505c <HAL_SPI_Init+0x1ec>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d104      	bne.n	8004f0a <HAL_SPI_Init+0x9a>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b10      	cmp	r3, #16
 8004f04:	d901      	bls.n	8004f0a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0a0      	b.n	800504c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fb ff88 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f44:	d110      	bne.n	8004f68 <HAL_SPI_Init+0xf8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f4e:	d10b      	bne.n	8004f68 <HAL_SPI_Init+0xf8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d107      	bne.n	8004f68 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f66:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	431a      	orrs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	ea42 0103 	orr.w	r1, r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc8:	ea42 0103 	orr.w	r1, r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d113      	bne.n	8005008 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005006:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40013000 	.word	0x40013000
 8005058:	40003800 	.word	0x40003800
 800505c:	40003c00 	.word	0x40003c00

08005060 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005078:	6a3a      	ldr	r2, [r7, #32]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4013      	ands	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005088:	2300      	movs	r3, #0
 800508a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005092:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3330      	adds	r3, #48	; 0x30
 800509a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <HAL_SPI_IRQHandler+0x6e>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10e      	bne.n	80050ce <HAL_SPI_IRQHandler+0x6e>
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
    handled = 1UL;
 80050ca:	2301      	movs	r3, #1
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10f      	bne.n	80050f8 <HAL_SPI_IRQHandler+0x98>
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_SPI_IRQHandler+0x98>
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
    handled = 1UL;
 80050f4:	2301      	movs	r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <HAL_SPI_IRQHandler+0xc2>
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <HAL_SPI_IRQHandler+0xc2>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d105      	bne.n	8005122 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
    handled = 1UL;
 800511e:	2301      	movs	r3, #1
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 8170 	bne.w	800540a <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a0 	beq.w	8005276 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0208 	orr.w	r2, r2, #8
 8005144:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0210 	orr.w	r2, r2, #16
 8005154:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005164:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0208 	bic.w	r2, r2, #8
 8005174:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00f      	beq.n	80051a0 <HAL_SPI_IRQHandler+0x140>
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	2b04      	cmp	r3, #4
 8005184:	d004      	beq.n	8005190 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <HAL_SPI_IRQHandler+0x140>
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	2b03      	cmp	r3, #3
 8005194:	d059      	beq.n	800524a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d154      	bne.n	800524a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d13d      	bne.n	800522a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 80051ae:	e036      	b.n	800521e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2b0f      	cmp	r3, #15
 80051b6:	d90b      	bls.n	80051d0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051c2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c8:	1d1a      	adds	r2, r3, #4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	665a      	str	r2, [r3, #100]	; 0x64
 80051ce:	e01d      	b.n	800520c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b07      	cmp	r3, #7
 80051d6:	d90b      	bls.n	80051f0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	8812      	ldrh	r2, [r2, #0]
 80051e0:	b292      	uxth	r2, r2
 80051e2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e8:	1c9a      	adds	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	665a      	str	r2, [r3, #100]	; 0x64
 80051ee:	e00d      	b.n	800520c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fc:	7812      	ldrb	r2, [r2, #0]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1c2      	bne.n	80051b0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f93c 	bl	80054a8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f90c 	bl	8005460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8005248:	e0e4      	b.n	8005414 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800524a:	7cfb      	ldrb	r3, [r7, #19]
 800524c:	2b05      	cmp	r3, #5
 800524e:	d103      	bne.n	8005258 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8fb 	bl	800544c <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8005256:	e0da      	b.n	800540e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	2b04      	cmp	r3, #4
 800525c:	d103      	bne.n	8005266 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8ea 	bl	8005438 <HAL_SPI_RxCpltCallback>
    return;
 8005264:	e0d3      	b.n	800540e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	2b03      	cmp	r3, #3
 800526a:	f040 80d0 	bne.w	800540e <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8d8 	bl	8005424 <HAL_SPI_TxCpltCallback>
    return;
 8005274:	e0cb      	b.n	800540e <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00d      	beq.n	800529c <HAL_SPI_IRQHandler+0x23c>
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005298:	619a      	str	r2, [r3, #24]

    return;
 800529a:	e0bb      	b.n	8005414 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80b6 	beq.w	8005414 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00f      	beq.n	80052d2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b8:	f043 0204 	orr.w	r2, r3, #4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699a      	ldr	r2, [r3, #24]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00f      	beq.n	80052fc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e2:	f043 0201 	orr.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00f      	beq.n	8005326 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530c:	f043 0208 	orr.w	r2, r3, #8
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005324:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00f      	beq.n	8005350 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005336:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0220 	orr.w	r2, r2, #32
 800534e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005356:	2b00      	cmp	r3, #0
 8005358:	d05b      	beq.n	8005412 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6919      	ldr	r1, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4b29      	ldr	r3, [pc, #164]	; (800541c <HAL_SPI_IRQHandler+0x3bc>)
 8005376:	400b      	ands	r3, r1
 8005378:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005380:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005384:	d138      	bne.n	80053f8 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005394:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d013      	beq.n	80053c6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_SPI_IRQHandler+0x3c0>)
 80053a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fc f8d0 	bl	8001550 <HAL_DMA_Abort_IT>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d021      	beq.n	8005412 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053d2:	4a13      	ldr	r2, [pc, #76]	; (8005420 <HAL_SPI_IRQHandler+0x3c0>)
 80053d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fc f8b8 	bl	8001550 <HAL_DMA_Abort_IT>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d015      	beq.n	8005412 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80053f6:	e00c      	b.n	8005412 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f82d 	bl	8005460 <HAL_SPI_ErrorCallback>
    return;
 8005406:	bf00      	nop
 8005408:	e003      	b.n	8005412 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800540a:	bf00      	nop
 800540c:	e002      	b.n	8005414 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800540e:	bf00      	nop
 8005410:	e000      	b.n	8005414 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8005412:	bf00      	nop
  }
}
 8005414:	3728      	adds	r7, #40	; 0x28
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	fffffc94 	.word	0xfffffc94
 8005420:	08005475 	.word	0x08005475

08005424 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7ff ffe0 	bl	8005460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0208 	orr.w	r2, r2, #8
 80054c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0210 	orr.w	r2, r2, #16
 80054d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6919      	ldr	r1, [r3, #16]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4b3c      	ldr	r3, [pc, #240]	; (80055e4 <SPI_CloseTransfer+0x13c>)
 80054f4:	400b      	ands	r3, r1
 80054f6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005506:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b04      	cmp	r3, #4
 8005512:	d014      	beq.n	800553e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00f      	beq.n	800553e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005524:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0220 	orr.w	r2, r2, #32
 800553c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b03      	cmp	r3, #3
 8005548:	d014      	beq.n	8005574 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00f      	beq.n	8005574 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800555a:	f043 0204 	orr.w	r2, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005572:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00f      	beq.n	800559e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005584:	f043 0201 	orr.w	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00f      	beq.n	80055c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ae:	f043 0208 	orr.w	r2, r3, #8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	fffffc90 	.word	0xfffffc90

080055e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	3307      	adds	r3, #7
 8005606:	08db      	lsrs	r3, r3, #3
 8005608:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e042      	b.n	80056b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fb fc6a 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2224      	movs	r2, #36	; 0x24
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f9c1 	bl	80059e8 <UART_SetConfig>
 8005666:	4603      	mov	r3, r0
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e022      	b.n	80056b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 ff65 	bl	8006548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800568c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800569c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 ffec 	bl	800668c <UART_CheckIdleState>
 80056b4:	4603      	mov	r3, r0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80056e6:	4013      	ands	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d118      	bne.n	8005722 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d013      	beq.n	8005722 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8145 	beq.w	80059a2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
      }
      return;
 8005720:	e13f      	b.n	80059a2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 80e8 	beq.w	80058fa <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4ba1      	ldr	r3, [pc, #644]	; (80059b4 <HAL_UART_IRQHandler+0x2f4>)
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4ba0      	ldr	r3, [pc, #640]	; (80059b8 <HAL_UART_IRQHandler+0x2f8>)
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80dd 	beq.w	80058fa <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d010      	beq.n	800576c <HAL_UART_IRQHandler+0xac>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2201      	movs	r2, #1
 800575a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <HAL_UART_IRQHandler+0xd8>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2202      	movs	r2, #2
 8005786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	f043 0204 	orr.w	r2, r3, #4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d010      	beq.n	80057c4 <HAL_UART_IRQHandler+0x104>
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2204      	movs	r2, #4
 80057b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	f043 0202 	orr.w	r2, r3, #2
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d015      	beq.n	80057fa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4b76      	ldr	r3, [pc, #472]	; (80059b4 <HAL_UART_IRQHandler+0x2f4>)
 80057dc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2208      	movs	r2, #8
 80057e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f043 0208 	orr.w	r2, r3, #8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005800:	2b00      	cmp	r3, #0
 8005802:	d011      	beq.n	8005828 <HAL_UART_IRQHandler+0x168>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	f043 0220 	orr.w	r2, r3, #32
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80b9 	beq.w	80059a6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d011      	beq.n	8005862 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d104      	bne.n	8005852 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d007      	beq.n	8005862 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005868:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d004      	beq.n	8005882 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800587e:	2b00      	cmp	r3, #0
 8005880:	d031      	beq.n	80058e6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 ffca 	bl	800681c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d123      	bne.n	80058de <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d013      	beq.n	80058d6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058b2:	4a42      	ldr	r2, [pc, #264]	; (80059bc <HAL_UART_IRQHandler+0x2fc>)
 80058b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fb fe48 	bl	8001550 <HAL_DMA_Abort_IT>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d017      	beq.n	80058f6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80058d0:	4610      	mov	r0, r2
 80058d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	e00f      	b.n	80058f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f87c 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058dc:	e00b      	b.n	80058f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f878 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	e007      	b.n	80058f6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f874 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80058f4:	e057      	b.n	80059a6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f6:	bf00      	nop
    return;
 80058f8:	e055      	b.n	80059a6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <HAL_UART_IRQHandler+0x260>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005916:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 ffd3 	bl	80068c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800591e:	e045      	b.n	80059ac <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d012      	beq.n	8005950 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	2b00      	cmp	r3, #0
 8005944:	d031      	beq.n	80059aa <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	4798      	blx	r3
    }
    return;
 800594e:	e02c      	b.n	80059aa <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d008      	beq.n	800596c <HAL_UART_IRQHandler+0x2ac>
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 ff93 	bl	8006890 <UART_EndTransmit_IT>
    return;
 800596a:	e01f      	b.n	80059ac <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d008      	beq.n	8005988 <HAL_UART_IRQHandler+0x2c8>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 ffb3 	bl	80068ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005986:	e011      	b.n	80059ac <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00c      	beq.n	80059ac <HAL_UART_IRQHandler+0x2ec>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	da09      	bge.n	80059ac <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 ff9d 	bl	80068d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800599e:	bf00      	nop
 80059a0:	e004      	b.n	80059ac <HAL_UART_IRQHandler+0x2ec>
      return;
 80059a2:	bf00      	nop
 80059a4:	e002      	b.n	80059ac <HAL_UART_IRQHandler+0x2ec>
    return;
 80059a6:	bf00      	nop
 80059a8:	e000      	b.n	80059ac <HAL_UART_IRQHandler+0x2ec>
    return;
 80059aa:	bf00      	nop
  }
}
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	10000001 	.word	0x10000001
 80059b8:	04000120 	.word	0x04000120
 80059bc:	08006865 	.word	0x08006865

080059c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80059ec:	b08e      	sub	sp, #56	; 0x38
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a16:	4313      	orrs	r3, r2
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4bc1      	ldr	r3, [pc, #772]	; (8005d28 <UART_SetConfig+0x340>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4ab7      	ldr	r2, [pc, #732]	; (8005d2c <UART_SetConfig+0x344>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	4bb2      	ldr	r3, [pc, #712]	; (8005d30 <UART_SetConfig+0x348>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f023 010f 	bic.w	r1, r3, #15
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4aa9      	ldr	r2, [pc, #676]	; (8005d34 <UART_SetConfig+0x34c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d177      	bne.n	8005b82 <UART_SetConfig+0x19a>
 8005a92:	4ba9      	ldr	r3, [pc, #676]	; (8005d38 <UART_SetConfig+0x350>)
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a9a:	2b28      	cmp	r3, #40	; 0x28
 8005a9c:	d86c      	bhi.n	8005b78 <UART_SetConfig+0x190>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0xbc>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005b49 	.word	0x08005b49
 8005aa8:	08005b79 	.word	0x08005b79
 8005aac:	08005b79 	.word	0x08005b79
 8005ab0:	08005b79 	.word	0x08005b79
 8005ab4:	08005b79 	.word	0x08005b79
 8005ab8:	08005b79 	.word	0x08005b79
 8005abc:	08005b79 	.word	0x08005b79
 8005ac0:	08005b79 	.word	0x08005b79
 8005ac4:	08005b51 	.word	0x08005b51
 8005ac8:	08005b79 	.word	0x08005b79
 8005acc:	08005b79 	.word	0x08005b79
 8005ad0:	08005b79 	.word	0x08005b79
 8005ad4:	08005b79 	.word	0x08005b79
 8005ad8:	08005b79 	.word	0x08005b79
 8005adc:	08005b79 	.word	0x08005b79
 8005ae0:	08005b79 	.word	0x08005b79
 8005ae4:	08005b59 	.word	0x08005b59
 8005ae8:	08005b79 	.word	0x08005b79
 8005aec:	08005b79 	.word	0x08005b79
 8005af0:	08005b79 	.word	0x08005b79
 8005af4:	08005b79 	.word	0x08005b79
 8005af8:	08005b79 	.word	0x08005b79
 8005afc:	08005b79 	.word	0x08005b79
 8005b00:	08005b79 	.word	0x08005b79
 8005b04:	08005b61 	.word	0x08005b61
 8005b08:	08005b79 	.word	0x08005b79
 8005b0c:	08005b79 	.word	0x08005b79
 8005b10:	08005b79 	.word	0x08005b79
 8005b14:	08005b79 	.word	0x08005b79
 8005b18:	08005b79 	.word	0x08005b79
 8005b1c:	08005b79 	.word	0x08005b79
 8005b20:	08005b79 	.word	0x08005b79
 8005b24:	08005b69 	.word	0x08005b69
 8005b28:	08005b79 	.word	0x08005b79
 8005b2c:	08005b79 	.word	0x08005b79
 8005b30:	08005b79 	.word	0x08005b79
 8005b34:	08005b79 	.word	0x08005b79
 8005b38:	08005b79 	.word	0x08005b79
 8005b3c:	08005b79 	.word	0x08005b79
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005b71 	.word	0x08005b71
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e233      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005b50:	2304      	movs	r3, #4
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e22f      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005b58:	2308      	movs	r3, #8
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e22b      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005b60:	2310      	movs	r3, #16
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	e227      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005b68:	2320      	movs	r3, #32
 8005b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6e:	e223      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005b70:	2340      	movs	r3, #64	; 0x40
 8005b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b76:	e21f      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7e:	bf00      	nop
 8005b80:	e21a      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6d      	ldr	r2, [pc, #436]	; (8005d3c <UART_SetConfig+0x354>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d132      	bne.n	8005bf2 <UART_SetConfig+0x20a>
 8005b8c:	4b6a      	ldr	r3, [pc, #424]	; (8005d38 <UART_SetConfig+0x350>)
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	2b05      	cmp	r3, #5
 8005b96:	d827      	bhi.n	8005be8 <UART_SetConfig+0x200>
 8005b98:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <UART_SetConfig+0x1b8>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005bb9 	.word	0x08005bb9
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	08005bc9 	.word	0x08005bc9
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e1fb      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e1f7      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e1f3      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	e1ef      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005bd8:	2320      	movs	r3, #32
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	e1eb      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005be0:	2340      	movs	r3, #64	; 0x40
 8005be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be6:	e1e7      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bee:	bf00      	nop
 8005bf0:	e1e2      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a52      	ldr	r2, [pc, #328]	; (8005d40 <UART_SetConfig+0x358>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d132      	bne.n	8005c62 <UART_SetConfig+0x27a>
 8005bfc:	4b4e      	ldr	r3, [pc, #312]	; (8005d38 <UART_SetConfig+0x350>)
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d827      	bhi.n	8005c58 <UART_SetConfig+0x270>
 8005c08:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <UART_SetConfig+0x228>)
 8005c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0e:	bf00      	nop
 8005c10:	08005c29 	.word	0x08005c29
 8005c14:	08005c31 	.word	0x08005c31
 8005c18:	08005c39 	.word	0x08005c39
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c51 	.word	0x08005c51
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e1c3      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005c30:	2304      	movs	r3, #4
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e1bf      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3e:	e1bb      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005c40:	2310      	movs	r3, #16
 8005c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c46:	e1b7      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005c48:	2320      	movs	r3, #32
 8005c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4e:	e1b3      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005c50:	2340      	movs	r3, #64	; 0x40
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e1af      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5e:	bf00      	nop
 8005c60:	e1aa      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a37      	ldr	r2, [pc, #220]	; (8005d44 <UART_SetConfig+0x35c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d132      	bne.n	8005cd2 <UART_SetConfig+0x2ea>
 8005c6c:	4b32      	ldr	r3, [pc, #200]	; (8005d38 <UART_SetConfig+0x350>)
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	2b05      	cmp	r3, #5
 8005c76:	d827      	bhi.n	8005cc8 <UART_SetConfig+0x2e0>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <UART_SetConfig+0x298>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005c99 	.word	0x08005c99
 8005c84:	08005ca1 	.word	0x08005ca1
 8005c88:	08005ca9 	.word	0x08005ca9
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9e:	e18b      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca6:	e187      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005ca8:	2308      	movs	r3, #8
 8005caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cae:	e183      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cb6:	e17f      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005cb8:	2320      	movs	r3, #32
 8005cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cbe:	e17b      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005cc0:	2340      	movs	r3, #64	; 0x40
 8005cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cc6:	e177      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cce:	bf00      	nop
 8005cd0:	e172      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <UART_SetConfig+0x360>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d144      	bne.n	8005d66 <UART_SetConfig+0x37e>
 8005cdc:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <UART_SetConfig+0x350>)
 8005cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	2b05      	cmp	r3, #5
 8005ce6:	d839      	bhi.n	8005d5c <UART_SetConfig+0x374>
 8005ce8:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x308>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d09 	.word	0x08005d09
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d4d 	.word	0x08005d4d
 8005d04:	08005d55 	.word	0x08005d55
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0e:	e153      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d16:	e14f      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005d18:	2308      	movs	r3, #8
 8005d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1e:	e14b      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d26:	e147      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005d28:	cfff69f3 	.word	0xcfff69f3
 8005d2c:	58000c00 	.word	0x58000c00
 8005d30:	11fff4ff 	.word	0x11fff4ff
 8005d34:	40011000 	.word	0x40011000
 8005d38:	58024400 	.word	0x58024400
 8005d3c:	40004400 	.word	0x40004400
 8005d40:	40004800 	.word	0x40004800
 8005d44:	40004c00 	.word	0x40004c00
 8005d48:	40005000 	.word	0x40005000
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e131      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e12d      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	bf00      	nop
 8005d64:	e128      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4ab6      	ldr	r2, [pc, #728]	; (8006044 <UART_SetConfig+0x65c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d178      	bne.n	8005e62 <UART_SetConfig+0x47a>
 8005d70:	4bb5      	ldr	r3, [pc, #724]	; (8006048 <UART_SetConfig+0x660>)
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d78:	2b28      	cmp	r3, #40	; 0x28
 8005d7a:	d86d      	bhi.n	8005e58 <UART_SetConfig+0x470>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <UART_SetConfig+0x39c>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005e29 	.word	0x08005e29
 8005d88:	08005e59 	.word	0x08005e59
 8005d8c:	08005e59 	.word	0x08005e59
 8005d90:	08005e59 	.word	0x08005e59
 8005d94:	08005e59 	.word	0x08005e59
 8005d98:	08005e59 	.word	0x08005e59
 8005d9c:	08005e59 	.word	0x08005e59
 8005da0:	08005e59 	.word	0x08005e59
 8005da4:	08005e31 	.word	0x08005e31
 8005da8:	08005e59 	.word	0x08005e59
 8005dac:	08005e59 	.word	0x08005e59
 8005db0:	08005e59 	.word	0x08005e59
 8005db4:	08005e59 	.word	0x08005e59
 8005db8:	08005e59 	.word	0x08005e59
 8005dbc:	08005e59 	.word	0x08005e59
 8005dc0:	08005e59 	.word	0x08005e59
 8005dc4:	08005e39 	.word	0x08005e39
 8005dc8:	08005e59 	.word	0x08005e59
 8005dcc:	08005e59 	.word	0x08005e59
 8005dd0:	08005e59 	.word	0x08005e59
 8005dd4:	08005e59 	.word	0x08005e59
 8005dd8:	08005e59 	.word	0x08005e59
 8005ddc:	08005e59 	.word	0x08005e59
 8005de0:	08005e59 	.word	0x08005e59
 8005de4:	08005e41 	.word	0x08005e41
 8005de8:	08005e59 	.word	0x08005e59
 8005dec:	08005e59 	.word	0x08005e59
 8005df0:	08005e59 	.word	0x08005e59
 8005df4:	08005e59 	.word	0x08005e59
 8005df8:	08005e59 	.word	0x08005e59
 8005dfc:	08005e59 	.word	0x08005e59
 8005e00:	08005e59 	.word	0x08005e59
 8005e04:	08005e49 	.word	0x08005e49
 8005e08:	08005e59 	.word	0x08005e59
 8005e0c:	08005e59 	.word	0x08005e59
 8005e10:	08005e59 	.word	0x08005e59
 8005e14:	08005e59 	.word	0x08005e59
 8005e18:	08005e59 	.word	0x08005e59
 8005e1c:	08005e59 	.word	0x08005e59
 8005e20:	08005e59 	.word	0x08005e59
 8005e24:	08005e51 	.word	0x08005e51
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2e:	e0c3      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005e30:	2304      	movs	r3, #4
 8005e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e36:	e0bf      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e0bb      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005e40:	2310      	movs	r3, #16
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e0b7      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005e48:	2320      	movs	r3, #32
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	e0b3      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005e50:	2340      	movs	r3, #64	; 0x40
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e0af      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5e:	bf00      	nop
 8005e60:	e0aa      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a79      	ldr	r2, [pc, #484]	; (800604c <UART_SetConfig+0x664>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d132      	bne.n	8005ed2 <UART_SetConfig+0x4ea>
 8005e6c:	4b76      	ldr	r3, [pc, #472]	; (8006048 <UART_SetConfig+0x660>)
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	2b05      	cmp	r3, #5
 8005e76:	d827      	bhi.n	8005ec8 <UART_SetConfig+0x4e0>
 8005e78:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <UART_SetConfig+0x498>)
 8005e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7e:	bf00      	nop
 8005e80:	08005e99 	.word	0x08005e99
 8005e84:	08005ea1 	.word	0x08005ea1
 8005e88:	08005ea9 	.word	0x08005ea9
 8005e8c:	08005eb1 	.word	0x08005eb1
 8005e90:	08005eb9 	.word	0x08005eb9
 8005e94:	08005ec1 	.word	0x08005ec1
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e08b      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e087      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	e083      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	e07f      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005eb8:	2320      	movs	r3, #32
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ebe:	e07b      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005ec0:	2340      	movs	r3, #64	; 0x40
 8005ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec6:	e077      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ece:	bf00      	nop
 8005ed0:	e072      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a5e      	ldr	r2, [pc, #376]	; (8006050 <UART_SetConfig+0x668>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d132      	bne.n	8005f42 <UART_SetConfig+0x55a>
 8005edc:	4b5a      	ldr	r3, [pc, #360]	; (8006048 <UART_SetConfig+0x660>)
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	2b05      	cmp	r3, #5
 8005ee6:	d827      	bhi.n	8005f38 <UART_SetConfig+0x550>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x508>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f09 	.word	0x08005f09
 8005ef4:	08005f11 	.word	0x08005f11
 8005ef8:	08005f19 	.word	0x08005f19
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f29 	.word	0x08005f29
 8005f04:	08005f31 	.word	0x08005f31
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0e:	e053      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f10:	2304      	movs	r3, #4
 8005f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f16:	e04f      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f18:	2308      	movs	r3, #8
 8005f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1e:	e04b      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f20:	2310      	movs	r3, #16
 8005f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f26:	e047      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f28:	2320      	movs	r3, #32
 8005f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f2e:	e043      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f30:	2340      	movs	r3, #64	; 0x40
 8005f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f36:	e03f      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3e:	bf00      	nop
 8005f40:	e03a      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a43      	ldr	r2, [pc, #268]	; (8006054 <UART_SetConfig+0x66c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d132      	bne.n	8005fb2 <UART_SetConfig+0x5ca>
 8005f4c:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <UART_SetConfig+0x660>)
 8005f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	2b05      	cmp	r3, #5
 8005f56:	d827      	bhi.n	8005fa8 <UART_SetConfig+0x5c0>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <UART_SetConfig+0x578>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f79 	.word	0x08005f79
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	08005f89 	.word	0x08005f89
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	2302      	movs	r3, #2
 8005f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7e:	e01b      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f80:	2304      	movs	r3, #4
 8005f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f86:	e017      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8e:	e013      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f96:	e00f      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005f98:	2320      	movs	r3, #32
 8005f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f9e:	e00b      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa6:	e007      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fae:	bf00      	nop
 8005fb0:	e002      	b.n	8005fb8 <UART_SetConfig+0x5d0>
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a25      	ldr	r2, [pc, #148]	; (8006054 <UART_SetConfig+0x66c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	f040 80b8 	bne.w	8006134 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d019      	beq.n	8006000 <UART_SetConfig+0x618>
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	dc04      	bgt.n	8005fda <UART_SetConfig+0x5f2>
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d009      	beq.n	8005fe8 <UART_SetConfig+0x600>
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d00b      	beq.n	8005ff0 <UART_SetConfig+0x608>
 8005fd8:	e042      	b.n	8006060 <UART_SetConfig+0x678>
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d02b      	beq.n	8006036 <UART_SetConfig+0x64e>
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d02c      	beq.n	800603c <UART_SetConfig+0x654>
 8005fe2:	2b10      	cmp	r3, #16
 8005fe4:	d014      	beq.n	8006010 <UART_SetConfig+0x628>
 8005fe6:	e03b      	b.n	8006060 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005fe8:	f7fd f954 	bl	8003294 <HAL_RCCEx_GetD3PCLK1Freq>
 8005fec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005fee:	e03d      	b.n	800606c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ff0:	f107 0314 	add.w	r3, r7, #20
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fd f963 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ffe:	e035      	b.n	800606c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006000:	f107 0308 	add.w	r3, r7, #8
 8006004:	4618      	mov	r0, r3
 8006006:	f7fd faa7 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800600e:	e02d      	b.n	800606c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006010:	4b0d      	ldr	r3, [pc, #52]	; (8006048 <UART_SetConfig+0x660>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800601c:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <UART_SetConfig+0x660>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	08db      	lsrs	r3, r3, #3
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	4a0c      	ldr	r2, [pc, #48]	; (8006058 <UART_SetConfig+0x670>)
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800602e:	e01d      	b.n	800606c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8006030:	4b09      	ldr	r3, [pc, #36]	; (8006058 <UART_SetConfig+0x670>)
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006034:	e01a      	b.n	800606c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <UART_SetConfig+0x674>)
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800603a:	e017      	b.n	800606c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006042:	e013      	b.n	800606c <UART_SetConfig+0x684>
 8006044:	40011400 	.word	0x40011400
 8006048:	58024400 	.word	0x58024400
 800604c:	40007800 	.word	0x40007800
 8006050:	40007c00 	.word	0x40007c00
 8006054:	58000c00 	.word	0x58000c00
 8006058:	03d09000 	.word	0x03d09000
 800605c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800606a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 824d 	beq.w	800650e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	4aad      	ldr	r2, [pc, #692]	; (8006330 <UART_SetConfig+0x948>)
 800607a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800607e:	461a      	mov	r2, r3
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	fbb3 f3f2 	udiv	r3, r3, r2
 8006086:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	4613      	mov	r3, r2
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	4413      	add	r3, r2
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	429a      	cmp	r2, r3
 8006096:	d305      	bcc.n	80060a4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800609e:	6a3a      	ldr	r2, [r7, #32]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d903      	bls.n	80060ac <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80060aa:	e230      	b.n	800650e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	4618      	mov	r0, r3
 80060b0:	f04f 0100 	mov.w	r1, #0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	4a9d      	ldr	r2, [pc, #628]	; (8006330 <UART_SetConfig+0x948>)
 80060ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f04f 0400 	mov.w	r4, #0
 80060c4:	461a      	mov	r2, r3
 80060c6:	4623      	mov	r3, r4
 80060c8:	f7fa f90a 	bl	80002e0 <__aeabi_uldivmod>
 80060cc:	4603      	mov	r3, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	4619      	mov	r1, r3
 80060d2:	4622      	mov	r2, r4
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	f04f 0400 	mov.w	r4, #0
 80060dc:	0214      	lsls	r4, r2, #8
 80060de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80060e2:	020b      	lsls	r3, r1, #8
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6852      	ldr	r2, [r2, #4]
 80060e8:	0852      	lsrs	r2, r2, #1
 80060ea:	4611      	mov	r1, r2
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	eb13 0b01 	adds.w	fp, r3, r1
 80060f4:	eb44 0c02 	adc.w	ip, r4, r2
 80060f8:	4658      	mov	r0, fp
 80060fa:	4661      	mov	r1, ip
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f04f 0400 	mov.w	r4, #0
 8006104:	461a      	mov	r2, r3
 8006106:	4623      	mov	r3, r4
 8006108:	f7fa f8ea 	bl	80002e0 <__aeabi_uldivmod>
 800610c:	4603      	mov	r3, r0
 800610e:	460c      	mov	r4, r1
 8006110:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006118:	d308      	bcc.n	800612c <UART_SetConfig+0x744>
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006120:	d204      	bcs.n	800612c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006128:	60da      	str	r2, [r3, #12]
 800612a:	e1f0      	b.n	800650e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006132:	e1ec      	b.n	800650e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800613c:	f040 8100 	bne.w	8006340 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006140:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	f200 80b7 	bhi.w	80062b8 <UART_SetConfig+0x8d0>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x768>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006255 	.word	0x08006255
 8006154:	0800625d 	.word	0x0800625d
 8006158:	080062b9 	.word	0x080062b9
 800615c:	080062b9 	.word	0x080062b9
 8006160:	08006265 	.word	0x08006265
 8006164:	080062b9 	.word	0x080062b9
 8006168:	080062b9 	.word	0x080062b9
 800616c:	080062b9 	.word	0x080062b9
 8006170:	08006275 	.word	0x08006275
 8006174:	080062b9 	.word	0x080062b9
 8006178:	080062b9 	.word	0x080062b9
 800617c:	080062b9 	.word	0x080062b9
 8006180:	080062b9 	.word	0x080062b9
 8006184:	080062b9 	.word	0x080062b9
 8006188:	080062b9 	.word	0x080062b9
 800618c:	080062b9 	.word	0x080062b9
 8006190:	08006285 	.word	0x08006285
 8006194:	080062b9 	.word	0x080062b9
 8006198:	080062b9 	.word	0x080062b9
 800619c:	080062b9 	.word	0x080062b9
 80061a0:	080062b9 	.word	0x080062b9
 80061a4:	080062b9 	.word	0x080062b9
 80061a8:	080062b9 	.word	0x080062b9
 80061ac:	080062b9 	.word	0x080062b9
 80061b0:	080062b9 	.word	0x080062b9
 80061b4:	080062b9 	.word	0x080062b9
 80061b8:	080062b9 	.word	0x080062b9
 80061bc:	080062b9 	.word	0x080062b9
 80061c0:	080062b9 	.word	0x080062b9
 80061c4:	080062b9 	.word	0x080062b9
 80061c8:	080062b9 	.word	0x080062b9
 80061cc:	080062b9 	.word	0x080062b9
 80061d0:	080062ab 	.word	0x080062ab
 80061d4:	080062b9 	.word	0x080062b9
 80061d8:	080062b9 	.word	0x080062b9
 80061dc:	080062b9 	.word	0x080062b9
 80061e0:	080062b9 	.word	0x080062b9
 80061e4:	080062b9 	.word	0x080062b9
 80061e8:	080062b9 	.word	0x080062b9
 80061ec:	080062b9 	.word	0x080062b9
 80061f0:	080062b9 	.word	0x080062b9
 80061f4:	080062b9 	.word	0x080062b9
 80061f8:	080062b9 	.word	0x080062b9
 80061fc:	080062b9 	.word	0x080062b9
 8006200:	080062b9 	.word	0x080062b9
 8006204:	080062b9 	.word	0x080062b9
 8006208:	080062b9 	.word	0x080062b9
 800620c:	080062b9 	.word	0x080062b9
 8006210:	080062b9 	.word	0x080062b9
 8006214:	080062b9 	.word	0x080062b9
 8006218:	080062b9 	.word	0x080062b9
 800621c:	080062b9 	.word	0x080062b9
 8006220:	080062b9 	.word	0x080062b9
 8006224:	080062b9 	.word	0x080062b9
 8006228:	080062b9 	.word	0x080062b9
 800622c:	080062b9 	.word	0x080062b9
 8006230:	080062b9 	.word	0x080062b9
 8006234:	080062b9 	.word	0x080062b9
 8006238:	080062b9 	.word	0x080062b9
 800623c:	080062b9 	.word	0x080062b9
 8006240:	080062b9 	.word	0x080062b9
 8006244:	080062b9 	.word	0x080062b9
 8006248:	080062b9 	.word	0x080062b9
 800624c:	080062b9 	.word	0x080062b9
 8006250:	080062b1 	.word	0x080062b1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006254:	f7fc fd7a 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 8006258:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800625a:	e033      	b.n	80062c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800625c:	f7fc fd8c 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8006260:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006262:	e02f      	b.n	80062c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	4618      	mov	r0, r3
 800626a:	f7fd f829 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006272:	e027      	b.n	80062c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006274:	f107 0308 	add.w	r3, r7, #8
 8006278:	4618      	mov	r0, r3
 800627a:	f7fd f96d 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006282:	e01f      	b.n	80062c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006284:	4b2b      	ldr	r3, [pc, #172]	; (8006334 <UART_SetConfig+0x94c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <UART_SetConfig+0x94c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	08db      	lsrs	r3, r3, #3
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	4a27      	ldr	r2, [pc, #156]	; (8006338 <UART_SetConfig+0x950>)
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062a2:	e00f      	b.n	80062c4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80062a4:	4b24      	ldr	r3, [pc, #144]	; (8006338 <UART_SetConfig+0x950>)
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062a8:	e00c      	b.n	80062c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062aa:	4b24      	ldr	r3, [pc, #144]	; (800633c <UART_SetConfig+0x954>)
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ae:	e009      	b.n	80062c4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062b6:	e005      	b.n	80062c4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80062c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 8121 	beq.w	800650e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	4a17      	ldr	r2, [pc, #92]	; (8006330 <UART_SetConfig+0x948>)
 80062d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	fbb3 f3f2 	udiv	r3, r3, r2
 80062de:	005a      	lsls	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	085b      	lsrs	r3, r3, #1
 80062e6:	441a      	add	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	2b0f      	cmp	r3, #15
 80062f8:	d916      	bls.n	8006328 <UART_SetConfig+0x940>
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006300:	d212      	bcs.n	8006328 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	b29b      	uxth	r3, r3
 8006306:	f023 030f 	bic.w	r3, r3, #15
 800630a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	085b      	lsrs	r3, r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	b29a      	uxth	r2, r3
 8006318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800631a:	4313      	orrs	r3, r2
 800631c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	e0f2      	b.n	800650e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800632e:	e0ee      	b.n	800650e <UART_SetConfig+0xb26>
 8006330:	08009b74 	.word	0x08009b74
 8006334:	58024400 	.word	0x58024400
 8006338:	03d09000 	.word	0x03d09000
 800633c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006340:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	f200 80b7 	bhi.w	80064b8 <UART_SetConfig+0xad0>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0x968>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006455 	.word	0x08006455
 8006354:	0800645d 	.word	0x0800645d
 8006358:	080064b9 	.word	0x080064b9
 800635c:	080064b9 	.word	0x080064b9
 8006360:	08006465 	.word	0x08006465
 8006364:	080064b9 	.word	0x080064b9
 8006368:	080064b9 	.word	0x080064b9
 800636c:	080064b9 	.word	0x080064b9
 8006370:	08006475 	.word	0x08006475
 8006374:	080064b9 	.word	0x080064b9
 8006378:	080064b9 	.word	0x080064b9
 800637c:	080064b9 	.word	0x080064b9
 8006380:	080064b9 	.word	0x080064b9
 8006384:	080064b9 	.word	0x080064b9
 8006388:	080064b9 	.word	0x080064b9
 800638c:	080064b9 	.word	0x080064b9
 8006390:	08006485 	.word	0x08006485
 8006394:	080064b9 	.word	0x080064b9
 8006398:	080064b9 	.word	0x080064b9
 800639c:	080064b9 	.word	0x080064b9
 80063a0:	080064b9 	.word	0x080064b9
 80063a4:	080064b9 	.word	0x080064b9
 80063a8:	080064b9 	.word	0x080064b9
 80063ac:	080064b9 	.word	0x080064b9
 80063b0:	080064b9 	.word	0x080064b9
 80063b4:	080064b9 	.word	0x080064b9
 80063b8:	080064b9 	.word	0x080064b9
 80063bc:	080064b9 	.word	0x080064b9
 80063c0:	080064b9 	.word	0x080064b9
 80063c4:	080064b9 	.word	0x080064b9
 80063c8:	080064b9 	.word	0x080064b9
 80063cc:	080064b9 	.word	0x080064b9
 80063d0:	080064ab 	.word	0x080064ab
 80063d4:	080064b9 	.word	0x080064b9
 80063d8:	080064b9 	.word	0x080064b9
 80063dc:	080064b9 	.word	0x080064b9
 80063e0:	080064b9 	.word	0x080064b9
 80063e4:	080064b9 	.word	0x080064b9
 80063e8:	080064b9 	.word	0x080064b9
 80063ec:	080064b9 	.word	0x080064b9
 80063f0:	080064b9 	.word	0x080064b9
 80063f4:	080064b9 	.word	0x080064b9
 80063f8:	080064b9 	.word	0x080064b9
 80063fc:	080064b9 	.word	0x080064b9
 8006400:	080064b9 	.word	0x080064b9
 8006404:	080064b9 	.word	0x080064b9
 8006408:	080064b9 	.word	0x080064b9
 800640c:	080064b9 	.word	0x080064b9
 8006410:	080064b9 	.word	0x080064b9
 8006414:	080064b9 	.word	0x080064b9
 8006418:	080064b9 	.word	0x080064b9
 800641c:	080064b9 	.word	0x080064b9
 8006420:	080064b9 	.word	0x080064b9
 8006424:	080064b9 	.word	0x080064b9
 8006428:	080064b9 	.word	0x080064b9
 800642c:	080064b9 	.word	0x080064b9
 8006430:	080064b9 	.word	0x080064b9
 8006434:	080064b9 	.word	0x080064b9
 8006438:	080064b9 	.word	0x080064b9
 800643c:	080064b9 	.word	0x080064b9
 8006440:	080064b9 	.word	0x080064b9
 8006444:	080064b9 	.word	0x080064b9
 8006448:	080064b9 	.word	0x080064b9
 800644c:	080064b9 	.word	0x080064b9
 8006450:	080064b1 	.word	0x080064b1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006454:	f7fc fc7a 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 8006458:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800645a:	e033      	b.n	80064c4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800645c:	f7fc fc8c 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8006460:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006462:	e02f      	b.n	80064c4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	4618      	mov	r0, r3
 800646a:	f7fc ff29 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006472:	e027      	b.n	80064c4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006474:	f107 0308 	add.w	r3, r7, #8
 8006478:	4618      	mov	r0, r3
 800647a:	f7fd f86d 	bl	8003558 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006482:	e01f      	b.n	80064c4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006484:	4b2c      	ldr	r3, [pc, #176]	; (8006538 <UART_SetConfig+0xb50>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006490:	4b29      	ldr	r3, [pc, #164]	; (8006538 <UART_SetConfig+0xb50>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	08db      	lsrs	r3, r3, #3
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	4a28      	ldr	r2, [pc, #160]	; (800653c <UART_SetConfig+0xb54>)
 800649c:	fa22 f303 	lsr.w	r3, r2, r3
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064a2:	e00f      	b.n	80064c4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80064a4:	4b25      	ldr	r3, [pc, #148]	; (800653c <UART_SetConfig+0xb54>)
 80064a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064a8:	e00c      	b.n	80064c4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064aa:	4b25      	ldr	r3, [pc, #148]	; (8006540 <UART_SetConfig+0xb58>)
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064ae:	e009      	b.n	80064c4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064b6:	e005      	b.n	80064c4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80064c2:	bf00      	nop
    }

    if (pclk != 0U)
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d021      	beq.n	800650e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <UART_SetConfig+0xb5c>)
 80064d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d4:	461a      	mov	r2, r3
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	441a      	add	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	2b0f      	cmp	r3, #15
 80064f4:	d908      	bls.n	8006508 <UART_SetConfig+0xb20>
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fc:	d204      	bcs.n	8006508 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	e002      	b.n	800650e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800652a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800652e:	4618      	mov	r0, r3
 8006530:	3738      	adds	r7, #56	; 0x38
 8006532:	46bd      	mov	sp, r7
 8006534:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006538:	58024400 	.word	0x58024400
 800653c:	03d09000 	.word	0x03d09000
 8006540:	003d0900 	.word	0x003d0900
 8006544:	08009b74 	.word	0x08009b74

08006548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01a      	beq.n	800665e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006646:	d10a      	bne.n	800665e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	605a      	str	r2, [r3, #4]
  }
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af02      	add	r7, sp, #8
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800669c:	f7fa fe0e 	bl	80012bc <HAL_GetTick>
 80066a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d10e      	bne.n	80066ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f82c 	bl	800671c <UART_WaitOnFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e022      	b.n	8006714 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d10e      	bne.n	80066fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f816 	bl	800671c <UART_WaitOnFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e00c      	b.n	8006714 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800672c:	e062      	b.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d05e      	beq.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006736:	f7fa fdc1 	bl	80012bc <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	429a      	cmp	r2, r3
 8006744:	d302      	bcc.n	800674c <UART_WaitOnFlagUntilTimeout+0x30>
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d11d      	bne.n	8006788 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800675a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0201 	bic.w	r2, r2, #1
 800676a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e045      	b.n	8006814 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d02e      	beq.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a4:	d126      	bne.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067be:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0201 	bic.w	r2, r2, #1
 80067ce:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2220      	movs	r2, #32
 80067dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e00f      	b.n	8006814 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4013      	ands	r3, r2
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	bf0c      	ite	eq
 8006804:	2301      	moveq	r3, #1
 8006806:	2300      	movne	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	429a      	cmp	r2, r3
 8006810:	d08d      	beq.n	800672e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006832:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6899      	ldr	r1, [r3, #8]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4b08      	ldr	r3, [pc, #32]	; (8006860 <UART_EndRxTransfer+0x44>)
 8006840:	400b      	ands	r3, r1
 8006842:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2220      	movs	r2, #32
 8006848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	effffffe 	.word	0xeffffffe

08006864 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7ff f8a6 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff f882 	bl	80059c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_UARTEx_DisableFifoMode+0x16>
 8006912:	2302      	movs	r3, #2
 8006914:	e027      	b.n	8006966 <HAL_UARTEx_DisableFifoMode+0x66>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2224      	movs	r2, #36	; 0x24
 8006922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006986:	2302      	movs	r3, #2
 8006988:	e02d      	b.n	80069e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2224      	movs	r2, #36	; 0x24
 8006996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0201 	bic.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f850 	bl	8006a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e02d      	b.n	8006a62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2224      	movs	r2, #36	; 0x24
 8006a12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f812 	bl	8006a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b089      	sub	sp, #36	; 0x24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a74:	4a2f      	ldr	r2, [pc, #188]	; (8006b34 <UARTEx_SetNbDataToProcess+0xc8>)
 8006a76:	f107 0314 	add.w	r3, r7, #20
 8006a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a7e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a82:	4a2d      	ldr	r2, [pc, #180]	; (8006b38 <UARTEx_SetNbDataToProcess+0xcc>)
 8006a84:	f107 030c 	add.w	r3, r7, #12
 8006a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a8c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d108      	bne.n	8006aaa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006aa8:	e03d      	b.n	8006b26 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aaa:	2310      	movs	r3, #16
 8006aac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006aae:	2310      	movs	r3, #16
 8006ab0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	0e5b      	lsrs	r3, r3, #25
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0f5b      	lsrs	r3, r3, #29
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006ad2:	7fbb      	ldrb	r3, [r7, #30]
 8006ad4:	7f3a      	ldrb	r2, [r7, #28]
 8006ad6:	f107 0120 	add.w	r1, r7, #32
 8006ada:	440a      	add	r2, r1
 8006adc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	7f3a      	ldrb	r2, [r7, #28]
 8006ae6:	f107 0120 	add.w	r1, r7, #32
 8006aea:	440a      	add	r2, r1
 8006aec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006afc:	7ffb      	ldrb	r3, [r7, #31]
 8006afe:	7f7a      	ldrb	r2, [r7, #29]
 8006b00:	f107 0120 	add.w	r1, r7, #32
 8006b04:	440a      	add	r2, r1
 8006b06:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	7f7a      	ldrb	r2, [r7, #29]
 8006b10:	f107 0120 	add.w	r1, r7, #32
 8006b14:	440a      	add	r2, r1
 8006b16:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006b1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b26:	bf00      	nop
 8006b28:	3724      	adds	r7, #36	; 0x24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	08009b3c 	.word	0x08009b3c
 8006b38:	08009b44 	.word	0x08009b44

08006b3c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	f107 001c 	add.w	r0, r7, #28
 8006b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006b52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8006b54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006b56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8006b5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8006b5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8006b62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <SDMMC_Init+0x50>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	b004      	add	sp, #16
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	ffc02c00 	.word	0xffc02c00

08006b90 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f043 0203 	orr.w	r2, r3, #3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0303 	and.w	r3, r3, #3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c06:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006c0c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006c12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <SDMMC_SendCommand+0x50>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	fffee0c0 	.word	0xfffee0c0

08006c3c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	b2db      	uxtb	r3, r3
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3314      	adds	r3, #20
 8006c64:	461a      	mov	r2, r3
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	4413      	add	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006ca2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006ca8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006cae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0

}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cf6:	f107 0308 	add.w	r3, r7, #8
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff ff73 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d06:	2110      	movs	r1, #16
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fa73 	bl	80071f4 <SDMMC_GetCmdResp1>
 8006d0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d10:	69fb      	ldr	r3, [r7, #28]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3720      	adds	r7, #32
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b088      	sub	sp, #32
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006d28:	2311      	movs	r3, #17
 8006d2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d32:	2300      	movs	r3, #0
 8006d34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d3c:	f107 0308 	add.w	r3, r7, #8
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff ff50 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d4c:	2111      	movs	r1, #17
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa50 	bl	80071f4 <SDMMC_GetCmdResp1>
 8006d54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d56:	69fb      	ldr	r3, [r7, #28]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006d6e:	2312      	movs	r3, #18
 8006d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d82:	f107 0308 	add.w	r3, r7, #8
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ff2d 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d92:	2112      	movs	r1, #18
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fa2d 	bl	80071f4 <SDMMC_GetCmdResp1>
 8006d9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3720      	adds	r7, #32
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b088      	sub	sp, #32
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006db4:	2318      	movs	r3, #24
 8006db6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006dc8:	f107 0308 	add.w	r3, r7, #8
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ff0a 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd8:	2118      	movs	r1, #24
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa0a 	bl	80071f4 <SDMMC_GetCmdResp1>
 8006de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006de2:	69fb      	ldr	r3, [r7, #28]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006dfa:	2319      	movs	r3, #25
 8006dfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e0e:	f107 0308 	add.w	r3, r7, #8
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff fee7 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e1e:	2119      	movs	r1, #25
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9e7 	bl	80071f4 <SDMMC_GetCmdResp1>
 8006e26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e28:	69fb      	ldr	r3, [r7, #28]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3720      	adds	r7, #32
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b08a      	sub	sp, #40	; 0x28
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006e42:	2307      	movs	r3, #7
 8006e44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e54:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e56:	f107 0310 	add.w	r3, r7, #16
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff fec3 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e66:	2107      	movs	r1, #7
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f9c3 	bl	80071f4 <SDMMC_GetCmdResp1>
 8006e6e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3728      	adds	r7, #40	; 0x28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b088      	sub	sp, #32
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e98:	f107 0308 	add.w	r3, r7, #8
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff fea2 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f977 	bl	8007198 <SDMMC_GetCmdError>
 8006eaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eac:	69fb      	ldr	r3, [r7, #28]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b088      	sub	sp, #32
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006ebe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006ec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ed6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ed8:	f107 0308 	add.w	r3, r7, #8
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff fe82 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fb79 	bl	80075dc <SDMMC_GetCmdResp7>
 8006eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eec:	69fb      	ldr	r3, [r7, #28]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b088      	sub	sp, #32
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006f04:	2337      	movs	r3, #55	; 0x37
 8006f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f18:	f107 0308 	add.w	r3, r7, #8
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff fe62 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f28:	2137      	movs	r1, #55	; 0x37
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f962 	bl	80071f4 <SDMMC_GetCmdResp1>
 8006f30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f32:	69fb      	ldr	r3, [r7, #28]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3720      	adds	r7, #32
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006f4a:	2329      	movs	r3, #41	; 0x29
 8006f4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f5e:	f107 0308 	add.w	r3, r7, #8
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7ff fe3f 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa7e 	bl	800746c <SDMMC_GetCmdResp3>
 8006f70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f72:	69fb      	ldr	r3, [r7, #28]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006f8a:	2306      	movs	r3, #6
 8006f8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fe1f 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fae:	2106      	movs	r1, #6
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f91f 	bl	80071f4 <SDMMC_GetCmdResp1>
 8006fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b088      	sub	sp, #32
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006fce:	2333      	movs	r3, #51	; 0x33
 8006fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fe0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fe2:	f107 0308 	add.w	r3, r7, #8
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fdfd 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff2:	2133      	movs	r1, #51	; 0x33
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f8fd 	bl	80071f4 <SDMMC_GetCmdResp1>
 8006ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b088      	sub	sp, #32
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007012:	2302      	movs	r3, #2
 8007014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800701a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007024:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007026:	f107 0308 	add.w	r3, r7, #8
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fddb 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f9d0 	bl	80073d8 <SDMMC_GetCmdResp2>
 8007038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800703a:	69fb      	ldr	r3, [r7, #28]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3720      	adds	r7, #32
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007052:	2309      	movs	r3, #9
 8007054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800705a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007064:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007066:	f107 0308 	add.w	r3, r7, #8
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff fdbb 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9b0 	bl	80073d8 <SDMMC_GetCmdResp2>
 8007078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800707a:	69fb      	ldr	r3, [r7, #28]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007092:	2303      	movs	r3, #3
 8007094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800709a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800709c:	2300      	movs	r3, #0
 800709e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070a6:	f107 0308 	add.w	r3, r7, #8
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fd9b 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	2103      	movs	r1, #3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa18 	bl	80074ec <SDMMC_GetCmdResp6>
 80070bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070be:	69fb      	ldr	r3, [r7, #28]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80070d6:	230d      	movs	r3, #13
 80070d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80070da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80070e0:	2300      	movs	r3, #0
 80070e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80070e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80070ea:	f107 0308 	add.w	r3, r7, #8
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff fd79 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80070f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fa:	210d      	movs	r1, #13
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f879 	bl	80071f4 <SDMMC_GetCmdResp1>
 8007102:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007104:	69fb      	ldr	r3, [r7, #28]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b088      	sub	sp, #32
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800711a:	230d      	movs	r3, #13
 800711c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800711e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800712c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800712e:	f107 0308 	add.w	r3, r7, #8
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff fd57 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800713a:	f241 3288 	movw	r2, #5000	; 0x1388
 800713e:	210d      	movs	r1, #13
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f857 	bl	80071f4 <SDMMC_GetCmdResp1>
 8007146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007148:	69fb      	ldr	r3, [r7, #28]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b088      	sub	sp, #32
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800715e:	230b      	movs	r3, #11
 8007160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800716c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007170:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fd35 	bl	8006be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800717e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007182:	210b      	movs	r1, #11
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f835 	bl	80071f4 <SDMMC_GetCmdResp1>
 800718a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800718c:	69fb      	ldr	r3, [r7, #28]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3720      	adds	r7, #32
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071a0:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <SDMMC_GetCmdError+0x50>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a11      	ldr	r2, [pc, #68]	; (80071ec <SDMMC_GetCmdError+0x54>)
 80071a6:	fba2 2303 	umull	r2, r3, r2, r3
 80071aa:	0a5b      	lsrs	r3, r3, #9
 80071ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b0:	fb02 f303 	mul.w	r3, r2, r3
 80071b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	1e5a      	subs	r2, r3, #1
 80071ba:	60fa      	str	r2, [r7, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071c4:	e009      	b.n	80071da <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f1      	beq.n	80071b6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a06      	ldr	r2, [pc, #24]	; (80071f0 <SDMMC_GetCmdError+0x58>)
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	20000000 	.word	0x20000000
 80071ec:	10624dd3 	.word	0x10624dd3
 80071f0:	002000c5 	.word	0x002000c5

080071f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	460b      	mov	r3, r1
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007202:	4b70      	ldr	r3, [pc, #448]	; (80073c4 <SDMMC_GetCmdResp1+0x1d0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a70      	ldr	r2, [pc, #448]	; (80073c8 <SDMMC_GetCmdResp1+0x1d4>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	0a5a      	lsrs	r2, r3, #9
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	fb02 f303 	mul.w	r3, r2, r3
 8007214:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	1e5a      	subs	r2, r3, #1
 800721a:	61fa      	str	r2, [r7, #28]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007224:	e0c9      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4b67      	ldr	r3, [pc, #412]	; (80073cc <SDMMC_GetCmdResp1+0x1d8>)
 8007230:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0ef      	beq.n	8007216 <SDMMC_GetCmdResp1+0x22>
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1ea      	bne.n	8007216 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2204      	movs	r2, #4
 8007250:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007252:	2304      	movs	r3, #4
 8007254:	e0b1      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d004      	beq.n	800726c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2201      	movs	r2, #1
 8007266:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007268:	2301      	movs	r3, #1
 800726a:	e0a6      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4a58      	ldr	r2, [pc, #352]	; (80073d0 <SDMMC_GetCmdResp1+0x1dc>)
 8007270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff fce2 	bl	8006c3c <SDMMC_GetCommandResponse>
 8007278:	4603      	mov	r3, r0
 800727a:	461a      	mov	r2, r3
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	4293      	cmp	r3, r2
 8007280:	d001      	beq.n	8007286 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007282:	2301      	movs	r3, #1
 8007284:	e099      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007286:	2100      	movs	r1, #0
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f7ff fce4 	bl	8006c56 <SDMMC_GetResponse>
 800728e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4b50      	ldr	r3, [pc, #320]	; (80073d4 <SDMMC_GetCmdResp1+0x1e0>)
 8007294:	4013      	ands	r3, r2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800729a:	2300      	movs	r3, #0
 800729c:	e08d      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	da02      	bge.n	80072aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80072a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072a8:	e087      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80072b4:	2340      	movs	r3, #64	; 0x40
 80072b6:	e080      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80072c2:	2380      	movs	r3, #128	; 0x80
 80072c4:	e079      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80072d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072d4:	e071      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80072e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072e4:	e069      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80072f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072f4:	e061      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007304:	e059      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007314:	e051      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007324:	e049      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007334:	e041      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007344:	e039      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007354:	e031      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007364:	e029      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007370:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007374:	e021      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007380:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007384:	e019      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007394:	e011      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80073a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80073a4:	e009      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80073b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80073b4:	e001      	b.n	80073ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80073b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000000 	.word	0x20000000
 80073c8:	10624dd3 	.word	0x10624dd3
 80073cc:	00200045 	.word	0x00200045
 80073d0:	002000c5 	.word	0x002000c5
 80073d4:	fdffe008 	.word	0xfdffe008

080073d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073e0:	4b1f      	ldr	r3, [pc, #124]	; (8007460 <SDMMC_GetCmdResp2+0x88>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <SDMMC_GetCmdResp2+0x8c>)
 80073e6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ea:	0a5b      	lsrs	r3, r3, #9
 80073ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f0:	fb02 f303 	mul.w	r3, r2, r3
 80073f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	60fa      	str	r2, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007404:	e026      	b.n	8007454 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0ef      	beq.n	80073f6 <SDMMC_GetCmdResp2+0x1e>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1ea      	bne.n	80073f6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2204      	movs	r2, #4
 8007430:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007432:	2304      	movs	r3, #4
 8007434:	e00e      	b.n	8007454 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007448:	2301      	movs	r3, #1
 800744a:	e003      	b.n	8007454 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a06      	ldr	r2, [pc, #24]	; (8007468 <SDMMC_GetCmdResp2+0x90>)
 8007450:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	20000000 	.word	0x20000000
 8007464:	10624dd3 	.word	0x10624dd3
 8007468:	002000c5 	.word	0x002000c5

0800746c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007474:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <SDMMC_GetCmdResp3+0x74>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <SDMMC_GetCmdResp3+0x78>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	0a5b      	lsrs	r3, r3, #9
 8007480:	f241 3288 	movw	r2, #5000	; 0x1388
 8007484:	fb02 f303 	mul.w	r3, r2, r3
 8007488:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1e5a      	subs	r2, r3, #1
 800748e:	60fa      	str	r2, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d102      	bne.n	800749a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007494:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007498:	e01b      	b.n	80074d2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0ef      	beq.n	800748a <SDMMC_GetCmdResp3+0x1e>
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1ea      	bne.n	800748a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d004      	beq.n	80074ca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2204      	movs	r2, #4
 80074c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074c6:	2304      	movs	r3, #4
 80074c8:	e003      	b.n	80074d2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a06      	ldr	r2, [pc, #24]	; (80074e8 <SDMMC_GetCmdResp3+0x7c>)
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20000000 	.word	0x20000000
 80074e4:	10624dd3 	.word	0x10624dd3
 80074e8:	002000c5 	.word	0x002000c5

080074ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	460b      	mov	r3, r1
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074fa:	4b35      	ldr	r3, [pc, #212]	; (80075d0 <SDMMC_GetCmdResp6+0xe4>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a35      	ldr	r2, [pc, #212]	; (80075d4 <SDMMC_GetCmdResp6+0xe8>)
 8007500:	fba2 2303 	umull	r2, r3, r2, r3
 8007504:	0a5b      	lsrs	r3, r3, #9
 8007506:	f241 3288 	movw	r2, #5000	; 0x1388
 800750a:	fb02 f303 	mul.w	r3, r2, r3
 800750e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	1e5a      	subs	r2, r3, #1
 8007514:	61fa      	str	r2, [r7, #28]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d102      	bne.n	8007520 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800751a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800751e:	e052      	b.n	80075c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007524:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0ef      	beq.n	8007510 <SDMMC_GetCmdResp6+0x24>
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1ea      	bne.n	8007510 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d004      	beq.n	8007550 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2204      	movs	r2, #4
 800754a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800754c:	2304      	movs	r3, #4
 800754e:	e03a      	b.n	80075c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007562:	2301      	movs	r3, #1
 8007564:	e02f      	b.n	80075c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7ff fb68 	bl	8006c3c <SDMMC_GetCommandResponse>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	4293      	cmp	r3, r2
 8007574:	d001      	beq.n	800757a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007576:	2301      	movs	r3, #1
 8007578:	e025      	b.n	80075c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4a16      	ldr	r2, [pc, #88]	; (80075d8 <SDMMC_GetCmdResp6+0xec>)
 800757e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007580:	2100      	movs	r1, #0
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fb67 	bl	8006c56 <SDMMC_GetResponse>
 8007588:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	0c1b      	lsrs	r3, r3, #16
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800759e:	2300      	movs	r3, #0
 80075a0:	e011      	b.n	80075c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80075ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075b0:	e009      	b.n	80075c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80075bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075c0:	e001      	b.n	80075c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80075c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3720      	adds	r7, #32
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000000 	.word	0x20000000
 80075d4:	10624dd3 	.word	0x10624dd3
 80075d8:	002000c5 	.word	0x002000c5

080075dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075e4:	4b22      	ldr	r3, [pc, #136]	; (8007670 <SDMMC_GetCmdResp7+0x94>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a22      	ldr	r2, [pc, #136]	; (8007674 <SDMMC_GetCmdResp7+0x98>)
 80075ea:	fba2 2303 	umull	r2, r3, r2, r3
 80075ee:	0a5b      	lsrs	r3, r3, #9
 80075f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f4:	fb02 f303 	mul.w	r3, r2, r3
 80075f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	1e5a      	subs	r2, r3, #1
 80075fe:	60fa      	str	r2, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007608:	e02c      	b.n	8007664 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0ef      	beq.n	80075fa <SDMMC_GetCmdResp7+0x1e>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1ea      	bne.n	80075fa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d004      	beq.n	800763a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2204      	movs	r2, #4
 8007634:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007636:	2304      	movs	r3, #4
 8007638:	e014      	b.n	8007664 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800764c:	2301      	movs	r3, #1
 800764e:	e009      	b.n	8007664 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2240      	movs	r2, #64	; 0x40
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007662:	2300      	movs	r3, #0

}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	20000000 	.word	0x20000000
 8007674:	10624dd3 	.word	0x10624dd3

08007678 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800767c:	4904      	ldr	r1, [pc, #16]	; (8007690 <MX_FATFS_Init+0x18>)
 800767e:	4805      	ldr	r0, [pc, #20]	; (8007694 <MX_FATFS_Init+0x1c>)
 8007680:	f000 fa54 	bl	8007b2c <FATFS_LinkDriver>
 8007684:	4603      	mov	r3, r0
 8007686:	461a      	mov	r2, r3
 8007688:	4b03      	ldr	r3, [pc, #12]	; (8007698 <MX_FATFS_Init+0x20>)
 800768a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800768c:	bf00      	nop
 800768e:	bd80      	pop	{r7, pc}
 8007690:	200042a8 	.word	0x200042a8
 8007694:	08009b8c 	.word	0x08009b8c
 8007698:	200042a4 	.word	0x200042a4

0800769c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80076a6:	f000 f863 	bl	8007770 <BSP_SD_IsDetected>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d001      	beq.n	80076b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80076b0:	2302      	movs	r3, #2
 80076b2:	e005      	b.n	80076c0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80076b4:	4804      	ldr	r0, [pc, #16]	; (80076c8 <BSP_SD_Init+0x2c>)
 80076b6:	f7fc f9e7 	bl	8003a88 <HAL_SD_Init>
 80076ba:	4603      	mov	r3, r0
 80076bc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80076be:	79fb      	ldrb	r3, [r7, #7]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20004070 	.word	0x20004070

080076cc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	68f9      	ldr	r1, [r7, #12]
 80076e2:	4806      	ldr	r0, [pc, #24]	; (80076fc <BSP_SD_ReadBlocks_DMA+0x30>)
 80076e4:	f7fc faf4 	bl	8003cd0 <HAL_SD_ReadBlocks_DMA>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20004070 	.word	0x20004070

08007700 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	4806      	ldr	r0, [pc, #24]	; (8007730 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007718:	f7fc fb82 	bl	8003e20 <HAL_SD_WriteBlocks_DMA>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20004070 	.word	0x20004070

08007734 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007738:	4805      	ldr	r0, [pc, #20]	; (8007750 <BSP_SD_GetCardState+0x1c>)
 800773a:	f7fc ff55 	bl	80045e8 <HAL_SD_GetCardState>
 800773e:	4603      	mov	r3, r0
 8007740:	2b04      	cmp	r3, #4
 8007742:	bf14      	ite	ne
 8007744:	2301      	movne	r3, #1
 8007746:	2300      	moveq	r3, #0
 8007748:	b2db      	uxtb	r3, r3
}
 800774a:	4618      	mov	r0, r3
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20004070 	.word	0x20004070

08007754 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4803      	ldr	r0, [pc, #12]	; (800776c <BSP_SD_GetCardInfo+0x18>)
 8007760:	f7fc fe6c 	bl	800443c <HAL_SD_GetCardInfo>
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20004070 	.word	0x20004070

08007770 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007776:	2301      	movs	r3, #1
 8007778:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	b2db      	uxtb	r3, r3
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8007792:	f000 fa17 	bl	8007bc4 <osKernelSysTick>
 8007796:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8007798:	e006      	b.n	80077a8 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800779a:	f7ff ffcb 	bl	8007734 <BSP_SD_GetCardState>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	e009      	b.n	80077bc <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80077a8:	f000 fa0c 	bl	8007bc4 <osKernelSysTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d8f0      	bhi.n	800779a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80077ce:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <SD_CheckStatus+0x38>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80077d4:	f7ff ffae 	bl	8007734 <BSP_SD_GetCardState>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d107      	bne.n	80077ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80077de:	4b07      	ldr	r3, [pc, #28]	; (80077fc <SD_CheckStatus+0x38>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	4b04      	ldr	r3, [pc, #16]	; (80077fc <SD_CheckStatus+0x38>)
 80077ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80077ee:	4b03      	ldr	r3, [pc, #12]	; (80077fc <SD_CheckStatus+0x38>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	b2db      	uxtb	r3, r3
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	2000000d 	.word	0x2000000d

08007800 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	4603      	mov	r3, r0
 8007808:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800780a:	4b20      	ldr	r3, [pc, #128]	; (800788c <SD_initialize+0x8c>)
 800780c:	2201      	movs	r2, #1
 800780e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8007810:	f000 f9cc 	bl	8007bac <osKernelRunning>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d030      	beq.n	800787c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800781a:	f7ff ff3f 	bl	800769c <BSP_SD_Init>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d107      	bne.n	8007834 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff ffcc 	bl	80077c4 <SD_CheckStatus>
 800782c:	4603      	mov	r3, r0
 800782e:	461a      	mov	r2, r3
 8007830:	4b16      	ldr	r3, [pc, #88]	; (800788c <SD_initialize+0x8c>)
 8007832:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007834:	4b15      	ldr	r3, [pc, #84]	; (800788c <SD_initialize+0x8c>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b01      	cmp	r3, #1
 800783c:	d01e      	beq.n	800787c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800783e:	4b14      	ldr	r3, [pc, #80]	; (8007890 <SD_initialize+0x90>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10e      	bne.n	8007864 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007846:	4b13      	ldr	r3, [pc, #76]	; (8007894 <SD_initialize+0x94>)
 8007848:	f107 0408 	add.w	r4, r7, #8
 800784c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800784e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	2100      	movs	r1, #0
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fa23 	bl	8007ca4 <osMessageCreate>
 800785e:	4602      	mov	r2, r0
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <SD_initialize+0x90>)
 8007862:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8007864:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <SD_initialize+0x90>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d107      	bne.n	800787c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800786c:	4b07      	ldr	r3, [pc, #28]	; (800788c <SD_initialize+0x8c>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	b2da      	uxtb	r2, r3
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <SD_initialize+0x8c>)
 800787a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800787c:	4b03      	ldr	r3, [pc, #12]	; (800788c <SD_initialize+0x8c>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	b2db      	uxtb	r3, r3
}
 8007882:	4618      	mov	r0, r3
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	bd90      	pop	{r4, r7, pc}
 800788a:	bf00      	nop
 800788c:	2000000d 	.word	0x2000000d
 8007890:	20000284 	.word	0x20000284
 8007894:	08009b4c 	.word	0x08009b4c

08007898 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff ff8d 	bl	80077c4 <SD_CheckStatus>
 80078aa:	4603      	mov	r3, r0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	; 0x28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80078ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80078ce:	f7ff ff5c 	bl	800778a <SD_CheckStatusWithTimeout>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	da02      	bge.n	80078de <SD_read+0x2a>
  {
    return res;
 80078d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078dc:	e032      	b.n	8007944 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	68b8      	ldr	r0, [r7, #8]
 80078e4:	f7ff fef2 	bl	80076cc <BSP_SD_ReadBlocks_DMA>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80078ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d124      	bne.n	8007940 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80078f6:	4b15      	ldr	r3, [pc, #84]	; (800794c <SD_read+0x98>)
 80078f8:	6819      	ldr	r1, [r3, #0]
 80078fa:	f107 0314 	add.w	r3, r7, #20
 80078fe:	f247 5230 	movw	r2, #30000	; 0x7530
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f9f8 	bl	8007cf8 <osMessageGet>

    if (event.status == osEventMessage)
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2b10      	cmp	r3, #16
 800790c:	d118      	bne.n	8007940 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d115      	bne.n	8007940 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8007914:	f000 f956 	bl	8007bc4 <osKernelSysTick>
 8007918:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800791a:	e008      	b.n	800792e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800791c:	f7ff ff0a 	bl	8007734 <BSP_SD_GetCardState>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d103      	bne.n	800792e <SD_read+0x7a>
              {
                res = RES_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800792c:	e008      	b.n	8007940 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800792e:	f000 f949 	bl	8007bc4 <osKernelSysTick>
 8007932:	4602      	mov	r2, r0
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	f247 522f 	movw	r2, #29999	; 0x752f
 800793c:	4293      	cmp	r3, r2
 800793e:	d9ed      	bls.n	800791c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007944:	4618      	mov	r0, r3
 8007946:	3728      	adds	r7, #40	; 0x28
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000284 	.word	0x20000284

08007950 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08a      	sub	sp, #40	; 0x28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	4603      	mov	r3, r0
 800795e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007966:	f247 5030 	movw	r0, #30000	; 0x7530
 800796a:	f7ff ff0e 	bl	800778a <SD_CheckStatusWithTimeout>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	da02      	bge.n	800797a <SD_write+0x2a>
  {
    return res;
 8007974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007978:	e02e      	b.n	80079d8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	68b8      	ldr	r0, [r7, #8]
 8007980:	f7ff febe 	bl	8007700 <BSP_SD_WriteBlocks_DMA>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d124      	bne.n	80079d4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <SD_write+0x90>)
 800798c:	6819      	ldr	r1, [r3, #0]
 800798e:	f107 0314 	add.w	r3, r7, #20
 8007992:	f247 5230 	movw	r2, #30000	; 0x7530
 8007996:	4618      	mov	r0, r3
 8007998:	f000 f9ae 	bl	8007cf8 <osMessageGet>

    if (event.status == osEventMessage)
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2b10      	cmp	r3, #16
 80079a0:	d118      	bne.n	80079d4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d115      	bne.n	80079d4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80079a8:	f000 f90c 	bl	8007bc4 <osKernelSysTick>
 80079ac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80079ae:	e008      	b.n	80079c2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80079b0:	f7ff fec0 	bl	8007734 <BSP_SD_GetCardState>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d103      	bne.n	80079c2 <SD_write+0x72>
          {
            res = RES_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80079c0:	e008      	b.n	80079d4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80079c2:	f000 f8ff 	bl	8007bc4 <osKernelSysTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d9ed      	bls.n	80079b0 <SD_write+0x60>
    }

  }
#endif

  return res;
 80079d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3728      	adds	r7, #40	; 0x28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000284 	.word	0x20000284

080079e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08c      	sub	sp, #48	; 0x30
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	603a      	str	r2, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
 80079f0:	460b      	mov	r3, r1
 80079f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80079fa:	4b25      	ldr	r3, [pc, #148]	; (8007a90 <SD_ioctl+0xac>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <SD_ioctl+0x28>
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e03c      	b.n	8007a86 <SD_ioctl+0xa2>

  switch (cmd)
 8007a0c:	79bb      	ldrb	r3, [r7, #6]
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d834      	bhi.n	8007a7c <SD_ioctl+0x98>
 8007a12:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <SD_ioctl+0x34>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a29 	.word	0x08007a29
 8007a1c:	08007a31 	.word	0x08007a31
 8007a20:	08007a49 	.word	0x08007a49
 8007a24:	08007a63 	.word	0x08007a63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a2e:	e028      	b.n	8007a82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a30:	f107 0308 	add.w	r3, r7, #8
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fe8d 	bl	8007754 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007a3a:	6a3a      	ldr	r2, [r7, #32]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a46:	e01c      	b.n	8007a82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a48:	f107 0308 	add.w	r3, r7, #8
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff fe81 	bl	8007754 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a60:	e00f      	b.n	8007a82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fe74 	bl	8007754 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	0a5a      	lsrs	r2, r3, #9
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a7a:	e002      	b.n	8007a82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3730      	adds	r7, #48	; 0x30
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	2000000d 	.word	0x2000000d

08007a94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007aaa:	4b1f      	ldr	r3, [pc, #124]	; (8007b28 <FATFS_LinkDriverEx+0x94>)
 8007aac:	7a5b      	ldrb	r3, [r3, #9]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d131      	bne.n	8007b18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ab4:	4b1c      	ldr	r3, [pc, #112]	; (8007b28 <FATFS_LinkDriverEx+0x94>)
 8007ab6:	7a5b      	ldrb	r3, [r3, #9]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <FATFS_LinkDriverEx+0x94>)
 8007abe:	2100      	movs	r1, #0
 8007ac0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ac2:	4b19      	ldr	r3, [pc, #100]	; (8007b28 <FATFS_LinkDriverEx+0x94>)
 8007ac4:	7a5b      	ldrb	r3, [r3, #9]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <FATFS_LinkDriverEx+0x94>)
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007ad2:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <FATFS_LinkDriverEx+0x94>)
 8007ad4:	7a5b      	ldrb	r3, [r3, #9]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <FATFS_LinkDriverEx+0x94>)
 8007adc:	4413      	add	r3, r2
 8007ade:	79fa      	ldrb	r2, [r7, #7]
 8007ae0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007ae2:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <FATFS_LinkDriverEx+0x94>)
 8007ae4:	7a5b      	ldrb	r3, [r3, #9]
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	b2d1      	uxtb	r1, r2
 8007aec:	4a0e      	ldr	r2, [pc, #56]	; (8007b28 <FATFS_LinkDriverEx+0x94>)
 8007aee:	7251      	strb	r1, [r2, #9]
 8007af0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007af2:	7dbb      	ldrb	r3, [r7, #22]
 8007af4:	3330      	adds	r3, #48	; 0x30
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	3301      	adds	r3, #1
 8007b00:	223a      	movs	r2, #58	; 0x3a
 8007b02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	3302      	adds	r3, #2
 8007b08:	222f      	movs	r2, #47	; 0x2f
 8007b0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	3303      	adds	r3, #3
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	20000288 	.word	0x20000288

08007b2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007b36:	2200      	movs	r2, #0
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff ffaa 	bl	8007a94 <FATFS_LinkDriverEx>
 8007b40:	4603      	mov	r3, r0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	4603      	mov	r3, r0
 8007b52:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b5c:	2b84      	cmp	r3, #132	; 0x84
 8007b5e:	d005      	beq.n	8007b6c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	3303      	adds	r3, #3
 8007b6a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b80:	f3ef 8305 	mrs	r3, IPSR
 8007b84:	607b      	str	r3, [r7, #4]
  return(result);
 8007b86:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	bf14      	ite	ne
 8007b8c:	2301      	movne	r3, #1
 8007b8e:	2300      	moveq	r3, #0
 8007b90:	b2db      	uxtb	r3, r3
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007ba2:	f001 fac9 	bl	8009138 <vTaskStartScheduler>
  
  return osOK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	bd80      	pop	{r7, pc}

08007bac <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8007bb0:	f001 fed8 	bl	8009964 <xTaskGetSchedulerState>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d101      	bne.n	8007bbe <osKernelRunning+0x12>
    return 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e000      	b.n	8007bc0 <osKernelRunning+0x14>
  else
    return 1;
 8007bbe:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007bc8:	f7ff ffd7 	bl	8007b7a <inHandlerMode>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007bd2:	f001 fbc9 	bl	8009368 <xTaskGetTickCountFromISR>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	e002      	b.n	8007be0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007bda:	f001 fbb5 	bl	8009348 <xTaskGetTickCount>
 8007bde:	4603      	mov	r3, r0
  }
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be6:	b089      	sub	sp, #36	; 0x24
 8007be8:	af04      	add	r7, sp, #16
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d020      	beq.n	8007c38 <osThreadCreate+0x54>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01c      	beq.n	8007c38 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685c      	ldr	r4, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681d      	ldr	r5, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691e      	ldr	r6, [r3, #16]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff ff9a 	bl	8007b4a <makeFreeRtosPriority>
 8007c16:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c20:	9202      	str	r2, [sp, #8]
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	9100      	str	r1, [sp, #0]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	4632      	mov	r2, r6
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f001 f8c0 	bl	8008db2 <xTaskCreateStatic>
 8007c32:	4603      	mov	r3, r0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	e01c      	b.n	8007c72 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685c      	ldr	r4, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c44:	b29e      	uxth	r6, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff ff7c 	bl	8007b4a <makeFreeRtosPriority>
 8007c52:	4602      	mov	r2, r0
 8007c54:	f107 030c 	add.w	r3, r7, #12
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	9200      	str	r2, [sp, #0]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	4632      	mov	r2, r6
 8007c60:	4629      	mov	r1, r5
 8007c62:	4620      	mov	r0, r4
 8007c64:	f001 f8ff 	bl	8008e66 <xTaskCreate>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d001      	beq.n	8007c72 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e000      	b.n	8007c74 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c72:	68fb      	ldr	r3, [r7, #12]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <osDelay+0x16>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	e000      	b.n	8007c94 <osDelay+0x18>
 8007c92:	2301      	movs	r3, #1
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 fa1b 	bl	80090d0 <vTaskDelay>
  
  return osOK;
 8007c9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007ca4:	b590      	push	{r4, r7, lr}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d012      	beq.n	8007cdc <osMessageCreate+0x38>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00e      	beq.n	8007cdc <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6859      	ldr	r1, [r3, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68dc      	ldr	r4, [r3, #12]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4623      	mov	r3, r4
 8007cd4:	f000 fdb4 	bl	8008840 <xQueueGenericCreateStatic>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	e008      	b.n	8007cee <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	f000 fe1d 	bl	8008926 <xQueueGenericCreate>
 8007cec:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd90      	pop	{r4, r7, pc}
	...

08007cf8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007cf8:	b590      	push	{r4, r7, lr}
 8007cfa:	b08b      	sub	sp, #44	; 0x2c
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007d12:	2380      	movs	r3, #128	; 0x80
 8007d14:	617b      	str	r3, [r7, #20]
    return event;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	461c      	mov	r4, r3
 8007d1a:	f107 0314 	add.w	r3, r7, #20
 8007d1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d26:	e054      	b.n	8007dd2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d103      	bne.n	8007d40 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007d38:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3e:	e009      	b.n	8007d54 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d006      	beq.n	8007d54 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <osMessageGet+0x5c>
      ticks = 1;
 8007d50:	2301      	movs	r3, #1
 8007d52:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007d54:	f7ff ff11 	bl	8007b7a <inHandlerMode>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01c      	beq.n	8007d98 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007d5e:	f107 0220 	add.w	r2, r7, #32
 8007d62:	f107 0314 	add.w	r3, r7, #20
 8007d66:	3304      	adds	r3, #4
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68b8      	ldr	r0, [r7, #8]
 8007d6c:	f000 ff16 	bl	8008b9c <xQueueReceiveFromISR>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d102      	bne.n	8007d7c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007d76:	2310      	movs	r3, #16
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e001      	b.n	8007d80 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d01d      	beq.n	8007dc2 <osMessageGet+0xca>
 8007d86:	4b15      	ldr	r3, [pc, #84]	; (8007ddc <osMessageGet+0xe4>)
 8007d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	e014      	b.n	8007dc2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007d98:	f107 0314 	add.w	r3, r7, #20
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da0:	4619      	mov	r1, r3
 8007da2:	68b8      	ldr	r0, [r7, #8]
 8007da4:	f000 fe1e 	bl	80089e4 <xQueueReceive>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d102      	bne.n	8007db4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007dae:	2310      	movs	r3, #16
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	e006      	b.n	8007dc2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <osMessageGet+0xc6>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e000      	b.n	8007dc0 <osMessageGet+0xc8>
 8007dbe:	2340      	movs	r3, #64	; 0x40
 8007dc0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	461c      	mov	r4, r3
 8007dc6:	f107 0314 	add.w	r3, r7, #20
 8007dca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007dce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	372c      	adds	r7, #44	; 0x2c
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd90      	pop	{r4, r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	e000ed04 	.word	0xe000ed04

08007de0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08a      	sub	sp, #40	; 0x28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dec:	f001 fa02 	bl	80091f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007df0:	4b57      	ldr	r3, [pc, #348]	; (8007f50 <pvPortMalloc+0x170>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007df8:	f000 f90c 	bl	8008014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dfc:	4b55      	ldr	r3, [pc, #340]	; (8007f54 <pvPortMalloc+0x174>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4013      	ands	r3, r2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f040 808c 	bne.w	8007f22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01c      	beq.n	8007e4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007e10:	2208      	movs	r2, #8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4413      	add	r3, r2
 8007e16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f003 0307 	and.w	r3, r3, #7
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d013      	beq.n	8007e4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f023 0307 	bic.w	r3, r3, #7
 8007e28:	3308      	adds	r3, #8
 8007e2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e7fe      	b.n	8007e48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d068      	beq.n	8007f22 <pvPortMalloc+0x142>
 8007e50:	4b41      	ldr	r3, [pc, #260]	; (8007f58 <pvPortMalloc+0x178>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d863      	bhi.n	8007f22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e5a:	4b40      	ldr	r3, [pc, #256]	; (8007f5c <pvPortMalloc+0x17c>)
 8007e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e5e:	4b3f      	ldr	r3, [pc, #252]	; (8007f5c <pvPortMalloc+0x17c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e64:	e004      	b.n	8007e70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d903      	bls.n	8007e82 <pvPortMalloc+0xa2>
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f1      	bne.n	8007e66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e82:	4b33      	ldr	r3, [pc, #204]	; (8007f50 <pvPortMalloc+0x170>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d04a      	beq.n	8007f22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2208      	movs	r2, #8
 8007e92:	4413      	add	r3, r2
 8007e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	1ad2      	subs	r2, r2, r3
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d91e      	bls.n	8007eec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d009      	beq.n	8007ed4 <pvPortMalloc+0xf4>
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	613b      	str	r3, [r7, #16]
 8007ed2:	e7fe      	b.n	8007ed2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	1ad2      	subs	r2, r2, r3
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ee6:	69b8      	ldr	r0, [r7, #24]
 8007ee8:	f000 f8f6 	bl	80080d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007eec:	4b1a      	ldr	r3, [pc, #104]	; (8007f58 <pvPortMalloc+0x178>)
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	4a18      	ldr	r2, [pc, #96]	; (8007f58 <pvPortMalloc+0x178>)
 8007ef8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007efa:	4b17      	ldr	r3, [pc, #92]	; (8007f58 <pvPortMalloc+0x178>)
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b18      	ldr	r3, [pc, #96]	; (8007f60 <pvPortMalloc+0x180>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d203      	bcs.n	8007f0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f06:	4b14      	ldr	r3, [pc, #80]	; (8007f58 <pvPortMalloc+0x178>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a15      	ldr	r2, [pc, #84]	; (8007f60 <pvPortMalloc+0x180>)
 8007f0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <pvPortMalloc+0x174>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	431a      	orrs	r2, r3
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f22:	f001 f975 	bl	8009210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d009      	beq.n	8007f44 <pvPortMalloc+0x164>
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	e7fe      	b.n	8007f42 <pvPortMalloc+0x162>
	return pvReturn;
 8007f44:	69fb      	ldr	r3, [r7, #28]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3728      	adds	r7, #40	; 0x28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20003e9c 	.word	0x20003e9c
 8007f54:	20003ea8 	.word	0x20003ea8
 8007f58:	20003ea0 	.word	0x20003ea0
 8007f5c:	20003e94 	.word	0x20003e94
 8007f60:	20003ea4 	.word	0x20003ea4

08007f64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d046      	beq.n	8008004 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f76:	2308      	movs	r3, #8
 8007f78:	425b      	negs	r3, r3
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	4b20      	ldr	r3, [pc, #128]	; (800800c <vPortFree+0xa8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d109      	bne.n	8007fa6 <vPortFree+0x42>
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	e7fe      	b.n	8007fa4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <vPortFree+0x5e>
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	60bb      	str	r3, [r7, #8]
 8007fc0:	e7fe      	b.n	8007fc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	4b11      	ldr	r3, [pc, #68]	; (800800c <vPortFree+0xa8>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d019      	beq.n	8008004 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d115      	bne.n	8008004 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	; (800800c <vPortFree+0xa8>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	401a      	ands	r2, r3
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fe8:	f001 f904 	bl	80091f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <vPortFree+0xac>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	4a06      	ldr	r2, [pc, #24]	; (8008010 <vPortFree+0xac>)
 8007ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ffa:	6938      	ldr	r0, [r7, #16]
 8007ffc:	f000 f86c 	bl	80080d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008000:	f001 f906 	bl	8009210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008004:	bf00      	nop
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20003ea8 	.word	0x20003ea8
 8008010:	20003ea0 	.word	0x20003ea0

08008014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800801a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800801e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008020:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <prvHeapInit+0xac>)
 8008022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00c      	beq.n	8008048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3307      	adds	r3, #7
 8008032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0307 	bic.w	r3, r3, #7
 800803a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	4a1f      	ldr	r2, [pc, #124]	; (80080c0 <prvHeapInit+0xac>)
 8008044:	4413      	add	r3, r2
 8008046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800804c:	4a1d      	ldr	r2, [pc, #116]	; (80080c4 <prvHeapInit+0xb0>)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008052:	4b1c      	ldr	r3, [pc, #112]	; (80080c4 <prvHeapInit+0xb0>)
 8008054:	2200      	movs	r2, #0
 8008056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	4413      	add	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008060:	2208      	movs	r2, #8
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0307 	bic.w	r3, r3, #7
 800806e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a15      	ldr	r2, [pc, #84]	; (80080c8 <prvHeapInit+0xb4>)
 8008074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008076:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <prvHeapInit+0xb4>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2200      	movs	r2, #0
 800807c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800807e:	4b12      	ldr	r3, [pc, #72]	; (80080c8 <prvHeapInit+0xb4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008094:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <prvHeapInit+0xb4>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <prvHeapInit+0xb8>)
 80080a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <prvHeapInit+0xbc>)
 80080aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080ac:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <prvHeapInit+0xc0>)
 80080ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	20000294 	.word	0x20000294
 80080c4:	20003e94 	.word	0x20003e94
 80080c8:	20003e9c 	.word	0x20003e9c
 80080cc:	20003ea4 	.word	0x20003ea4
 80080d0:	20003ea0 	.word	0x20003ea0
 80080d4:	20003ea8 	.word	0x20003ea8

080080d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080e0:	4b28      	ldr	r3, [pc, #160]	; (8008184 <prvInsertBlockIntoFreeList+0xac>)
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e002      	b.n	80080ec <prvInsertBlockIntoFreeList+0x14>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d8f7      	bhi.n	80080e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	4413      	add	r3, r2
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	429a      	cmp	r2, r3
 8008106:	d108      	bne.n	800811a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	441a      	add	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	441a      	add	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d118      	bne.n	8008160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	4b15      	ldr	r3, [pc, #84]	; (8008188 <prvInsertBlockIntoFreeList+0xb0>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d00d      	beq.n	8008156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	441a      	add	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e008      	b.n	8008168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008156:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <prvInsertBlockIntoFreeList+0xb0>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	e003      	b.n	8008168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	429a      	cmp	r2, r3
 800816e:	d002      	beq.n	8008176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008176:	bf00      	nop
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20003e94 	.word	0x20003e94
 8008188:	20003e9c 	.word	0x20003e9c

0800818c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f103 0208 	add.w	r2, r3, #8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f04f 32ff 	mov.w	r2, #4294967295
 80081a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f103 0208 	add.w	r2, r3, #8
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f103 0208 	add.w	r2, r3, #8
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	601a      	str	r2, [r3, #0]
}
 8008222:	bf00      	nop
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d103      	bne.n	800824e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e00c      	b.n	8008268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3308      	adds	r3, #8
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e002      	b.n	800825c <vListInsert+0x2e>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	429a      	cmp	r2, r3
 8008266:	d2f6      	bcs.n	8008256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6892      	ldr	r2, [r2, #8]
 80082b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6852      	ldr	r2, [r2, #4]
 80082c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d103      	bne.n	80082d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	1e5a      	subs	r2, r3, #1
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3b04      	subs	r3, #4
 8008304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800830c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3b04      	subs	r3, #4
 8008312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f023 0201 	bic.w	r2, r3, #1
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3b04      	subs	r3, #4
 8008322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008324:	4a0c      	ldr	r2, [pc, #48]	; (8008358 <pxPortInitialiseStack+0x64>)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3b14      	subs	r3, #20
 800832e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3b04      	subs	r3, #4
 800833a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f06f 0202 	mvn.w	r2, #2
 8008342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3b20      	subs	r3, #32
 8008348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800834a:	68fb      	ldr	r3, [r7, #12]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	0800835d 	.word	0x0800835d

0800835c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008366:	4b11      	ldr	r3, [pc, #68]	; (80083ac <prvTaskExitError+0x50>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836e:	d009      	beq.n	8008384 <prvTaskExitError+0x28>
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	e7fe      	b.n	8008382 <prvTaskExitError+0x26>
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008396:	bf00      	nop
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0fc      	beq.n	8008398 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	20000010 	.word	0x20000010

080083b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <pxCurrentTCBConst2>)
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	6808      	ldr	r0, [r1, #0]
 80083b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	f380 8809 	msr	PSP, r0
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f04f 0000 	mov.w	r0, #0
 80083c6:	f380 8811 	msr	BASEPRI, r0
 80083ca:	4770      	bx	lr
 80083cc:	f3af 8000 	nop.w

080083d0 <pxCurrentTCBConst2>:
 80083d0:	20003eb4 	.word	0x20003eb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083d8:	4808      	ldr	r0, [pc, #32]	; (80083fc <prvPortStartFirstTask+0x24>)
 80083da:	6800      	ldr	r0, [r0, #0]
 80083dc:	6800      	ldr	r0, [r0, #0]
 80083de:	f380 8808 	msr	MSP, r0
 80083e2:	f04f 0000 	mov.w	r0, #0
 80083e6:	f380 8814 	msr	CONTROL, r0
 80083ea:	b662      	cpsie	i
 80083ec:	b661      	cpsie	f
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	df00      	svc	0
 80083f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083fa:	bf00      	nop
 80083fc:	e000ed08 	.word	0xe000ed08

08008400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008406:	4b44      	ldr	r3, [pc, #272]	; (8008518 <xPortStartScheduler+0x118>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a44      	ldr	r2, [pc, #272]	; (800851c <xPortStartScheduler+0x11c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d109      	bne.n	8008424 <xPortStartScheduler+0x24>
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	613b      	str	r3, [r7, #16]
 8008422:	e7fe      	b.n	8008422 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008424:	4b3c      	ldr	r3, [pc, #240]	; (8008518 <xPortStartScheduler+0x118>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a3d      	ldr	r2, [pc, #244]	; (8008520 <xPortStartScheduler+0x120>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d109      	bne.n	8008442 <xPortStartScheduler+0x42>
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	e7fe      	b.n	8008440 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008442:	4b38      	ldr	r3, [pc, #224]	; (8008524 <xPortStartScheduler+0x124>)
 8008444:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	22ff      	movs	r2, #255	; 0xff
 8008452:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008464:	b2da      	uxtb	r2, r3
 8008466:	4b30      	ldr	r3, [pc, #192]	; (8008528 <xPortStartScheduler+0x128>)
 8008468:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800846a:	4b30      	ldr	r3, [pc, #192]	; (800852c <xPortStartScheduler+0x12c>)
 800846c:	2207      	movs	r2, #7
 800846e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008470:	e009      	b.n	8008486 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008472:	4b2e      	ldr	r3, [pc, #184]	; (800852c <xPortStartScheduler+0x12c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3b01      	subs	r3, #1
 8008478:	4a2c      	ldr	r2, [pc, #176]	; (800852c <xPortStartScheduler+0x12c>)
 800847a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	b2db      	uxtb	r3, r3
 8008484:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848e:	2b80      	cmp	r3, #128	; 0x80
 8008490:	d0ef      	beq.n	8008472 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008492:	4b26      	ldr	r3, [pc, #152]	; (800852c <xPortStartScheduler+0x12c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f1c3 0307 	rsb	r3, r3, #7
 800849a:	2b04      	cmp	r3, #4
 800849c:	d009      	beq.n	80084b2 <xPortStartScheduler+0xb2>
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	60bb      	str	r3, [r7, #8]
 80084b0:	e7fe      	b.n	80084b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084b2:	4b1e      	ldr	r3, [pc, #120]	; (800852c <xPortStartScheduler+0x12c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	021b      	lsls	r3, r3, #8
 80084b8:	4a1c      	ldr	r2, [pc, #112]	; (800852c <xPortStartScheduler+0x12c>)
 80084ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084bc:	4b1b      	ldr	r3, [pc, #108]	; (800852c <xPortStartScheduler+0x12c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084c4:	4a19      	ldr	r2, [pc, #100]	; (800852c <xPortStartScheduler+0x12c>)
 80084c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084d0:	4b17      	ldr	r3, [pc, #92]	; (8008530 <xPortStartScheduler+0x130>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a16      	ldr	r2, [pc, #88]	; (8008530 <xPortStartScheduler+0x130>)
 80084d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084dc:	4b14      	ldr	r3, [pc, #80]	; (8008530 <xPortStartScheduler+0x130>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a13      	ldr	r2, [pc, #76]	; (8008530 <xPortStartScheduler+0x130>)
 80084e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084e8:	f000 f8d6 	bl	8008698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084ec:	4b11      	ldr	r3, [pc, #68]	; (8008534 <xPortStartScheduler+0x134>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084f2:	f000 f8f5 	bl	80086e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084f6:	4b10      	ldr	r3, [pc, #64]	; (8008538 <xPortStartScheduler+0x138>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a0f      	ldr	r2, [pc, #60]	; (8008538 <xPortStartScheduler+0x138>)
 80084fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008500:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008502:	f7ff ff69 	bl	80083d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008506:	f000 fff9 	bl	80094fc <vTaskSwitchContext>
	prvTaskExitError();
 800850a:	f7ff ff27 	bl	800835c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed00 	.word	0xe000ed00
 800851c:	410fc271 	.word	0x410fc271
 8008520:	410fc270 	.word	0x410fc270
 8008524:	e000e400 	.word	0xe000e400
 8008528:	20003eac 	.word	0x20003eac
 800852c:	20003eb0 	.word	0x20003eb0
 8008530:	e000ed20 	.word	0xe000ed20
 8008534:	20000010 	.word	0x20000010
 8008538:	e000ef34 	.word	0xe000ef34

0800853c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008554:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <vPortEnterCritical+0x54>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	4a0d      	ldr	r2, [pc, #52]	; (8008590 <vPortEnterCritical+0x54>)
 800855c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800855e:	4b0c      	ldr	r3, [pc, #48]	; (8008590 <vPortEnterCritical+0x54>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d10e      	bne.n	8008584 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008566:	4b0b      	ldr	r3, [pc, #44]	; (8008594 <vPortEnterCritical+0x58>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <vPortEnterCritical+0x48>
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	603b      	str	r3, [r7, #0]
 8008582:	e7fe      	b.n	8008582 <vPortEnterCritical+0x46>
	}
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	20000010 	.word	0x20000010
 8008594:	e000ed04 	.word	0xe000ed04

08008598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800859e:	4b11      	ldr	r3, [pc, #68]	; (80085e4 <vPortExitCritical+0x4c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <vPortExitCritical+0x22>
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	607b      	str	r3, [r7, #4]
 80085b8:	e7fe      	b.n	80085b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80085ba:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <vPortExitCritical+0x4c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3b01      	subs	r3, #1
 80085c0:	4a08      	ldr	r2, [pc, #32]	; (80085e4 <vPortExitCritical+0x4c>)
 80085c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085c4:	4b07      	ldr	r3, [pc, #28]	; (80085e4 <vPortExitCritical+0x4c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <vPortExitCritical+0x3e>
 80085cc:	2300      	movs	r3, #0
 80085ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	20000010 	.word	0x20000010
	...

080085f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085f0:	f3ef 8009 	mrs	r0, PSP
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	4b15      	ldr	r3, [pc, #84]	; (8008650 <pxCurrentTCBConst>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	f01e 0f10 	tst.w	lr, #16
 8008600:	bf08      	it	eq
 8008602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860a:	6010      	str	r0, [r2, #0]
 800860c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008614:	f380 8811 	msr	BASEPRI, r0
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f000 ff6c 	bl	80094fc <vTaskSwitchContext>
 8008624:	f04f 0000 	mov.w	r0, #0
 8008628:	f380 8811 	msr	BASEPRI, r0
 800862c:	bc09      	pop	{r0, r3}
 800862e:	6819      	ldr	r1, [r3, #0]
 8008630:	6808      	ldr	r0, [r1, #0]
 8008632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008636:	f01e 0f10 	tst.w	lr, #16
 800863a:	bf08      	it	eq
 800863c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008640:	f380 8809 	msr	PSP, r0
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	f3af 8000 	nop.w

08008650 <pxCurrentTCBConst>:
 8008650:	20003eb4 	.word	0x20003eb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop

08008658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008670:	f000 fe8c 	bl	800938c <xTaskIncrementTick>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800867a:	4b06      	ldr	r3, [pc, #24]	; (8008694 <xPortSysTickHandler+0x3c>)
 800867c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	2300      	movs	r3, #0
 8008684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	e000ed04 	.word	0xe000ed04

08008698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800869c:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <vPortSetupTimerInterrupt+0x34>)
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086a2:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <vPortSetupTimerInterrupt+0x38>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <vPortSetupTimerInterrupt+0x3c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <vPortSetupTimerInterrupt+0x40>)
 80086ae:	fba2 2303 	umull	r2, r3, r2, r3
 80086b2:	099b      	lsrs	r3, r3, #6
 80086b4:	4a09      	ldr	r2, [pc, #36]	; (80086dc <vPortSetupTimerInterrupt+0x44>)
 80086b6:	3b01      	subs	r3, #1
 80086b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086ba:	4b04      	ldr	r3, [pc, #16]	; (80086cc <vPortSetupTimerInterrupt+0x34>)
 80086bc:	2207      	movs	r2, #7
 80086be:	601a      	str	r2, [r3, #0]
}
 80086c0:	bf00      	nop
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	e000e010 	.word	0xe000e010
 80086d0:	e000e018 	.word	0xe000e018
 80086d4:	20000000 	.word	0x20000000
 80086d8:	10624dd3 	.word	0x10624dd3
 80086dc:	e000e014 	.word	0xe000e014

080086e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086f0 <vPortEnableVFP+0x10>
 80086e4:	6801      	ldr	r1, [r0, #0]
 80086e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ea:	6001      	str	r1, [r0, #0]
 80086ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086ee:	bf00      	nop
 80086f0:	e000ed88 	.word	0xe000ed88

080086f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086fa:	f3ef 8305 	mrs	r3, IPSR
 80086fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b0f      	cmp	r3, #15
 8008704:	d913      	bls.n	800872e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008706:	4a16      	ldr	r2, [pc, #88]	; (8008760 <vPortValidateInterruptPriority+0x6c>)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4413      	add	r3, r2
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008710:	4b14      	ldr	r3, [pc, #80]	; (8008764 <vPortValidateInterruptPriority+0x70>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	7afa      	ldrb	r2, [r7, #11]
 8008716:	429a      	cmp	r2, r3
 8008718:	d209      	bcs.n	800872e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	e7fe      	b.n	800872c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800872e:	4b0e      	ldr	r3, [pc, #56]	; (8008768 <vPortValidateInterruptPriority+0x74>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008736:	4b0d      	ldr	r3, [pc, #52]	; (800876c <vPortValidateInterruptPriority+0x78>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d909      	bls.n	8008752 <vPortValidateInterruptPriority+0x5e>
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	e7fe      	b.n	8008750 <vPortValidateInterruptPriority+0x5c>
	}
 8008752:	bf00      	nop
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	e000e3f0 	.word	0xe000e3f0
 8008764:	20003eac 	.word	0x20003eac
 8008768:	e000ed0c 	.word	0xe000ed0c
 800876c:	20003eb0 	.word	0x20003eb0

08008770 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d109      	bne.n	8008798 <xQueueGenericReset+0x28>
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	60bb      	str	r3, [r7, #8]
 8008796:	e7fe      	b.n	8008796 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008798:	f7ff fed0 	bl	800853c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a4:	68f9      	ldr	r1, [r7, #12]
 80087a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	441a      	add	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c8:	3b01      	subs	r3, #1
 80087ca:	68f9      	ldr	r1, [r7, #12]
 80087cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087ce:	fb01 f303 	mul.w	r3, r1, r3
 80087d2:	441a      	add	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	22ff      	movs	r2, #255	; 0xff
 80087dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	22ff      	movs	r2, #255	; 0xff
 80087e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d114      	bne.n	8008818 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d01a      	beq.n	800882c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3310      	adds	r3, #16
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fefc 	bl	80095f8 <xTaskRemoveFromEventList>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d012      	beq.n	800882c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008806:	4b0d      	ldr	r3, [pc, #52]	; (800883c <xQueueGenericReset+0xcc>)
 8008808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	e009      	b.n	800882c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3310      	adds	r3, #16
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff fcb5 	bl	800818c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3324      	adds	r3, #36	; 0x24
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff fcb0 	bl	800818c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800882c:	f7ff feb4 	bl	8008598 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008830:	2301      	movs	r3, #1
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	e000ed04 	.word	0xe000ed04

08008840 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08e      	sub	sp, #56	; 0x38
 8008844:	af02      	add	r7, sp, #8
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d109      	bne.n	8008868 <xQueueGenericCreateStatic+0x28>
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
 8008866:	e7fe      	b.n	8008866 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <xQueueGenericCreateStatic+0x42>
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
 8008880:	e7fe      	b.n	8008880 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <xQueueGenericCreateStatic+0x4e>
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <xQueueGenericCreateStatic+0x52>
 800888e:	2301      	movs	r3, #1
 8008890:	e000      	b.n	8008894 <xQueueGenericCreateStatic+0x54>
 8008892:	2300      	movs	r3, #0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <xQueueGenericCreateStatic+0x6c>
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	623b      	str	r3, [r7, #32]
 80088aa:	e7fe      	b.n	80088aa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <xQueueGenericCreateStatic+0x78>
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <xQueueGenericCreateStatic+0x7c>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <xQueueGenericCreateStatic+0x7e>
 80088bc:	2300      	movs	r3, #0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <xQueueGenericCreateStatic+0x96>
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	61fb      	str	r3, [r7, #28]
 80088d4:	e7fe      	b.n	80088d4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088d6:	2348      	movs	r3, #72	; 0x48
 80088d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2b48      	cmp	r3, #72	; 0x48
 80088de:	d009      	beq.n	80088f4 <xQueueGenericCreateStatic+0xb4>
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	61bb      	str	r3, [r7, #24]
 80088f2:	e7fe      	b.n	80088f2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00d      	beq.n	800891c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008908:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	4613      	mov	r3, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 f844 	bl	80089a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800891e:	4618      	mov	r0, r3
 8008920:	3730      	adds	r7, #48	; 0x30
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008926:	b580      	push	{r7, lr}
 8008928:	b08a      	sub	sp, #40	; 0x28
 800892a:	af02      	add	r7, sp, #8
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	4613      	mov	r3, r2
 8008932:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d109      	bne.n	800894e <xQueueGenericCreate+0x28>
 800893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	e7fe      	b.n	800894c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d102      	bne.n	800895a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]
 8008958:	e004      	b.n	8008964 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	fb02 f303 	mul.w	r3, r2, r3
 8008962:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	3348      	adds	r3, #72	; 0x48
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff fa39 	bl	8007de0 <pvPortMalloc>
 800896e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d011      	beq.n	800899a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	3348      	adds	r3, #72	; 0x48
 800897e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008988:	79fa      	ldrb	r2, [r7, #7]
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	4613      	mov	r3, r2
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 f805 	bl	80089a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800899a:	69bb      	ldr	r3, [r7, #24]
	}
 800899c:	4618      	mov	r0, r3
 800899e:	3720      	adds	r7, #32
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	e002      	b.n	80089c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089d2:	2101      	movs	r1, #1
 80089d4:	69b8      	ldr	r0, [r7, #24]
 80089d6:	f7ff fecb 	bl	8008770 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089da:	bf00      	nop
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08c      	sub	sp, #48	; 0x30
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d109      	bne.n	8008a12 <xQueueReceive+0x2e>
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	623b      	str	r3, [r7, #32]
 8008a10:	e7fe      	b.n	8008a10 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d103      	bne.n	8008a20 <xQueueReceive+0x3c>
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <xQueueReceive+0x40>
 8008a20:	2301      	movs	r3, #1
 8008a22:	e000      	b.n	8008a26 <xQueueReceive+0x42>
 8008a24:	2300      	movs	r3, #0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <xQueueReceive+0x5a>
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	e7fe      	b.n	8008a3c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a3e:	f000 ff91 	bl	8009964 <xTaskGetSchedulerState>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <xQueueReceive+0x6a>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <xQueueReceive+0x6e>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <xQueueReceive+0x70>
 8008a52:	2300      	movs	r3, #0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d109      	bne.n	8008a6c <xQueueReceive+0x88>
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	e7fe      	b.n	8008a6a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a6c:	f7ff fd66 	bl	800853c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01f      	beq.n	8008abc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a7c:	68b9      	ldr	r1, [r7, #8]
 8008a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a80:	f000 f909 	bl	8008c96 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	1e5a      	subs	r2, r3, #1
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00f      	beq.n	8008ab4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	3310      	adds	r3, #16
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fdad 	bl	80095f8 <xTaskRemoveFromEventList>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008aa4:	4b3c      	ldr	r3, [pc, #240]	; (8008b98 <xQueueReceive+0x1b4>)
 8008aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ab4:	f7ff fd70 	bl	8008598 <vPortExitCritical>
				return pdPASS;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e069      	b.n	8008b90 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d103      	bne.n	8008aca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ac2:	f7ff fd69 	bl	8008598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e062      	b.n	8008b90 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d106      	bne.n	8008ade <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ad0:	f107 0310 	add.w	r3, r7, #16
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fdf1 	bl	80096bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ada:	2301      	movs	r3, #1
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ade:	f7ff fd5b 	bl	8008598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ae2:	f000 fb87 	bl	80091f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ae6:	f7ff fd29 	bl	800853c <vPortEnterCritical>
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008af0:	b25b      	sxtb	r3, r3
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d103      	bne.n	8008b00 <xQueueReceive+0x11c>
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b06:	b25b      	sxtb	r3, r3
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d103      	bne.n	8008b16 <xQueueReceive+0x132>
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b16:	f7ff fd3f 	bl	8008598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b1a:	1d3a      	adds	r2, r7, #4
 8008b1c:	f107 0310 	add.w	r3, r7, #16
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fde0 	bl	80096e8 <xTaskCheckForTimeOut>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d123      	bne.n	8008b76 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b30:	f000 f929 	bl	8008d86 <prvIsQueueEmpty>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d017      	beq.n	8008b6a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	3324      	adds	r3, #36	; 0x24
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 fd34 	bl	80095b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b4a:	f000 f8ca 	bl	8008ce2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b4e:	f000 fb5f 	bl	8009210 <xTaskResumeAll>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d189      	bne.n	8008a6c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008b58:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <xQueueReceive+0x1b4>)
 8008b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	e780      	b.n	8008a6c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6c:	f000 f8b9 	bl	8008ce2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b70:	f000 fb4e 	bl	8009210 <xTaskResumeAll>
 8008b74:	e77a      	b.n	8008a6c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b78:	f000 f8b3 	bl	8008ce2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b7c:	f000 fb48 	bl	8009210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b82:	f000 f900 	bl	8008d86 <prvIsQueueEmpty>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f43f af6f 	beq.w	8008a6c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3730      	adds	r7, #48	; 0x30
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08e      	sub	sp, #56	; 0x38
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <xQueueReceiveFromISR+0x2a>
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	623b      	str	r3, [r7, #32]
 8008bc4:	e7fe      	b.n	8008bc4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d103      	bne.n	8008bd4 <xQueueReceiveFromISR+0x38>
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <xQueueReceiveFromISR+0x3c>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <xQueueReceiveFromISR+0x3e>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <xQueueReceiveFromISR+0x56>
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	61fb      	str	r3, [r7, #28]
 8008bf0:	e7fe      	b.n	8008bf0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bf2:	f7ff fd7f 	bl	80086f4 <vPortValidateInterruptPriority>
	__asm volatile
 8008bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	61ba      	str	r2, [r7, #24]
 8008c0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008c0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d02f      	beq.n	8008c7e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c2c:	f000 f833 	bl	8008c96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	1e5a      	subs	r2, r3, #1
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d112      	bne.n	8008c68 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d016      	beq.n	8008c78 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	3310      	adds	r3, #16
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 fcd2 	bl	80095f8 <xTaskRemoveFromEventList>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00e      	beq.n	8008c78 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00b      	beq.n	8008c78 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	e007      	b.n	8008c78 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	b25a      	sxtb	r2, r3
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c7c:	e001      	b.n	8008c82 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	637b      	str	r3, [r7, #52]	; 0x34
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3738      	adds	r7, #56	; 0x38
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d018      	beq.n	8008cda <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb0:	441a      	add	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d303      	bcc.n	8008cca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68d9      	ldr	r1, [r3, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6838      	ldr	r0, [r7, #0]
 8008cd6:	f000 feed 	bl	8009ab4 <memcpy>
	}
}
 8008cda:	bf00      	nop
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cea:	f7ff fc27 	bl	800853c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cf4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cf6:	e011      	b.n	8008d1c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d012      	beq.n	8008d26 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3324      	adds	r3, #36	; 0x24
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fc77 	bl	80095f8 <xTaskRemoveFromEventList>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d10:	f000 fd4a 	bl	80097a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dce9      	bgt.n	8008cf8 <prvUnlockQueue+0x16>
 8008d24:	e000      	b.n	8008d28 <prvUnlockQueue+0x46>
					break;
 8008d26:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	22ff      	movs	r2, #255	; 0xff
 8008d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d30:	f7ff fc32 	bl	8008598 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d34:	f7ff fc02 	bl	800853c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d3e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d40:	e011      	b.n	8008d66 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d012      	beq.n	8008d70 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3310      	adds	r3, #16
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fc52 	bl	80095f8 <xTaskRemoveFromEventList>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d5a:	f000 fd25 	bl	80097a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dce9      	bgt.n	8008d42 <prvUnlockQueue+0x60>
 8008d6e:	e000      	b.n	8008d72 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d70:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	22ff      	movs	r2, #255	; 0xff
 8008d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d7a:	f7ff fc0d 	bl	8008598 <vPortExitCritical>
}
 8008d7e:	bf00      	nop
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d8e:	f7ff fbd5 	bl	800853c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d102      	bne.n	8008da0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	60fb      	str	r3, [r7, #12]
 8008d9e:	e001      	b.n	8008da4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008da4:	f7ff fbf8 	bl	8008598 <vPortExitCritical>

	return xReturn;
 8008da8:	68fb      	ldr	r3, [r7, #12]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b08e      	sub	sp, #56	; 0x38
 8008db6:	af04      	add	r7, sp, #16
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
 8008dbe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <xTaskCreateStatic+0x28>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	623b      	str	r3, [r7, #32]
 8008dd8:	e7fe      	b.n	8008dd8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d109      	bne.n	8008df4 <xTaskCreateStatic+0x42>
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	61fb      	str	r3, [r7, #28]
 8008df2:	e7fe      	b.n	8008df2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008df4:	2354      	movs	r3, #84	; 0x54
 8008df6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	2b54      	cmp	r3, #84	; 0x54
 8008dfc:	d009      	beq.n	8008e12 <xTaskCreateStatic+0x60>
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	61bb      	str	r3, [r7, #24]
 8008e10:	e7fe      	b.n	8008e10 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d01e      	beq.n	8008e58 <xTaskCreateStatic+0xa6>
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01b      	beq.n	8008e58 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e32:	2300      	movs	r3, #0
 8008e34:	9303      	str	r3, [sp, #12]
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	9302      	str	r3, [sp, #8]
 8008e3a:	f107 0314 	add.w	r3, r7, #20
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 f850 	bl	8008ef0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e52:	f000 f8d3 	bl	8008ffc <prvAddNewTaskToReadyList>
 8008e56:	e001      	b.n	8008e5c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e5c:	697b      	ldr	r3, [r7, #20]
	}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3728      	adds	r7, #40	; 0x28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b08c      	sub	sp, #48	; 0x30
 8008e6a:	af04      	add	r7, sp, #16
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	603b      	str	r3, [r7, #0]
 8008e72:	4613      	mov	r3, r2
 8008e74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe ffb0 	bl	8007de0 <pvPortMalloc>
 8008e80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00e      	beq.n	8008ea6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e88:	2054      	movs	r0, #84	; 0x54
 8008e8a:	f7fe ffa9 	bl	8007de0 <pvPortMalloc>
 8008e8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8008e9c:	e005      	b.n	8008eaa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e9e:	6978      	ldr	r0, [r7, #20]
 8008ea0:	f7ff f860 	bl	8007f64 <vPortFree>
 8008ea4:	e001      	b.n	8008eaa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d017      	beq.n	8008ee0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eb8:	88fa      	ldrh	r2, [r7, #6]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9303      	str	r3, [sp, #12]
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	9302      	str	r3, [sp, #8]
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 f80e 	bl	8008ef0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ed4:	69f8      	ldr	r0, [r7, #28]
 8008ed6:	f000 f891 	bl	8008ffc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008eda:	2301      	movs	r3, #1
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	e002      	b.n	8008ee6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
	}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3720      	adds	r7, #32
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b088      	sub	sp, #32
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008f08:	440b      	add	r3, r1
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	f023 0307 	bic.w	r3, r3, #7
 8008f16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d009      	beq.n	8008f36 <prvInitialiseNewTask+0x46>
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e7fe      	b.n	8008f34 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01f      	beq.n	8008f7c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	e012      	b.n	8008f68 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	4413      	add	r3, r2
 8008f48:	7819      	ldrb	r1, [r3, #0]
 8008f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	4413      	add	r3, r2
 8008f50:	3334      	adds	r3, #52	; 0x34
 8008f52:	460a      	mov	r2, r1
 8008f54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d006      	beq.n	8008f70 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	3301      	adds	r3, #1
 8008f66:	61fb      	str	r3, [r7, #28]
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	2b0f      	cmp	r3, #15
 8008f6c:	d9e9      	bls.n	8008f42 <prvInitialiseNewTask+0x52>
 8008f6e:	e000      	b.n	8008f72 <prvInitialiseNewTask+0x82>
			{
				break;
 8008f70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f7a:	e003      	b.n	8008f84 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	2b06      	cmp	r3, #6
 8008f88:	d901      	bls.n	8008f8e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f8a:	2306      	movs	r3, #6
 8008f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f92:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f98:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff f911 	bl	80081cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	3318      	adds	r3, #24
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff f90c 	bl	80081cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fb8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	f1c3 0207 	rsb	r2, r3, #7
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fc8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	2200      	movs	r2, #0
 8008fce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	68f9      	ldr	r1, [r7, #12]
 8008fdc:	69b8      	ldr	r0, [r7, #24]
 8008fde:	f7ff f989 	bl	80082f4 <pxPortInitialiseStack>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ff4:	bf00      	nop
 8008ff6:	3720      	adds	r7, #32
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009004:	f7ff fa9a 	bl	800853c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009008:	4b2a      	ldr	r3, [pc, #168]	; (80090b4 <prvAddNewTaskToReadyList+0xb8>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3301      	adds	r3, #1
 800900e:	4a29      	ldr	r2, [pc, #164]	; (80090b4 <prvAddNewTaskToReadyList+0xb8>)
 8009010:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009012:	4b29      	ldr	r3, [pc, #164]	; (80090b8 <prvAddNewTaskToReadyList+0xbc>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d109      	bne.n	800902e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800901a:	4a27      	ldr	r2, [pc, #156]	; (80090b8 <prvAddNewTaskToReadyList+0xbc>)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009020:	4b24      	ldr	r3, [pc, #144]	; (80090b4 <prvAddNewTaskToReadyList+0xb8>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d110      	bne.n	800904a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009028:	f000 fbe2 	bl	80097f0 <prvInitialiseTaskLists>
 800902c:	e00d      	b.n	800904a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800902e:	4b23      	ldr	r3, [pc, #140]	; (80090bc <prvAddNewTaskToReadyList+0xc0>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d109      	bne.n	800904a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009036:	4b20      	ldr	r3, [pc, #128]	; (80090b8 <prvAddNewTaskToReadyList+0xbc>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	429a      	cmp	r2, r3
 8009042:	d802      	bhi.n	800904a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009044:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <prvAddNewTaskToReadyList+0xbc>)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800904a:	4b1d      	ldr	r3, [pc, #116]	; (80090c0 <prvAddNewTaskToReadyList+0xc4>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3301      	adds	r3, #1
 8009050:	4a1b      	ldr	r2, [pc, #108]	; (80090c0 <prvAddNewTaskToReadyList+0xc4>)
 8009052:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	2201      	movs	r2, #1
 800905a:	409a      	lsls	r2, r3
 800905c:	4b19      	ldr	r3, [pc, #100]	; (80090c4 <prvAddNewTaskToReadyList+0xc8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4313      	orrs	r3, r2
 8009062:	4a18      	ldr	r2, [pc, #96]	; (80090c4 <prvAddNewTaskToReadyList+0xc8>)
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a15      	ldr	r2, [pc, #84]	; (80090c8 <prvAddNewTaskToReadyList+0xcc>)
 8009074:	441a      	add	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3304      	adds	r3, #4
 800907a:	4619      	mov	r1, r3
 800907c:	4610      	mov	r0, r2
 800907e:	f7ff f8b2 	bl	80081e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009082:	f7ff fa89 	bl	8008598 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009086:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <prvAddNewTaskToReadyList+0xc0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00e      	beq.n	80090ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800908e:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <prvAddNewTaskToReadyList+0xbc>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	429a      	cmp	r2, r3
 800909a:	d207      	bcs.n	80090ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800909c:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <prvAddNewTaskToReadyList+0xd0>)
 800909e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20003fb4 	.word	0x20003fb4
 80090b8:	20003eb4 	.word	0x20003eb4
 80090bc:	20003fc0 	.word	0x20003fc0
 80090c0:	20003fd0 	.word	0x20003fd0
 80090c4:	20003fbc 	.word	0x20003fbc
 80090c8:	20003eb8 	.word	0x20003eb8
 80090cc:	e000ed04 	.word	0xe000ed04

080090d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d016      	beq.n	8009110 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090e2:	4b13      	ldr	r3, [pc, #76]	; (8009130 <vTaskDelay+0x60>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d009      	beq.n	80090fe <vTaskDelay+0x2e>
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	60bb      	str	r3, [r7, #8]
 80090fc:	e7fe      	b.n	80090fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80090fe:	f000 f879 	bl	80091f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009102:	2100      	movs	r1, #0
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fc4b 	bl	80099a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800910a:	f000 f881 	bl	8009210 <xTaskResumeAll>
 800910e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d107      	bne.n	8009126 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009116:	4b07      	ldr	r3, [pc, #28]	; (8009134 <vTaskDelay+0x64>)
 8009118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009126:	bf00      	nop
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20003fdc 	.word	0x20003fdc
 8009134:	e000ed04 	.word	0xe000ed04

08009138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	; 0x28
 800913c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009142:	2300      	movs	r3, #0
 8009144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009146:	463a      	mov	r2, r7
 8009148:	1d39      	adds	r1, r7, #4
 800914a:	f107 0308 	add.w	r3, r7, #8
 800914e:	4618      	mov	r0, r3
 8009150:	f7f7 fae0 	bl	8000714 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	9202      	str	r2, [sp, #8]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	2300      	movs	r3, #0
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	2300      	movs	r3, #0
 8009164:	460a      	mov	r2, r1
 8009166:	491d      	ldr	r1, [pc, #116]	; (80091dc <vTaskStartScheduler+0xa4>)
 8009168:	481d      	ldr	r0, [pc, #116]	; (80091e0 <vTaskStartScheduler+0xa8>)
 800916a:	f7ff fe22 	bl	8008db2 <xTaskCreateStatic>
 800916e:	4602      	mov	r2, r0
 8009170:	4b1c      	ldr	r3, [pc, #112]	; (80091e4 <vTaskStartScheduler+0xac>)
 8009172:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009174:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <vTaskStartScheduler+0xac>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800917c:	2301      	movs	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	e001      	b.n	8009186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d115      	bne.n	80091b8 <vTaskStartScheduler+0x80>
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800919e:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <vTaskStartScheduler+0xb0>)
 80091a0:	f04f 32ff 	mov.w	r2, #4294967295
 80091a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091a6:	4b11      	ldr	r3, [pc, #68]	; (80091ec <vTaskStartScheduler+0xb4>)
 80091a8:	2201      	movs	r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091ac:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <vTaskStartScheduler+0xb8>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091b2:	f7ff f925 	bl	8008400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091b6:	e00d      	b.n	80091d4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d109      	bne.n	80091d4 <vTaskStartScheduler+0x9c>
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	e7fe      	b.n	80091d2 <vTaskStartScheduler+0x9a>
}
 80091d4:	bf00      	nop
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	08009b5c 	.word	0x08009b5c
 80091e0:	080097c1 	.word	0x080097c1
 80091e4:	20003fd8 	.word	0x20003fd8
 80091e8:	20003fd4 	.word	0x20003fd4
 80091ec:	20003fc0 	.word	0x20003fc0
 80091f0:	20003fb8 	.word	0x20003fb8

080091f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80091f8:	4b04      	ldr	r3, [pc, #16]	; (800920c <vTaskSuspendAll+0x18>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	4a03      	ldr	r2, [pc, #12]	; (800920c <vTaskSuspendAll+0x18>)
 8009200:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009202:	bf00      	nop
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	20003fdc 	.word	0x20003fdc

08009210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800921a:	2300      	movs	r3, #0
 800921c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800921e:	4b41      	ldr	r3, [pc, #260]	; (8009324 <xTaskResumeAll+0x114>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <xTaskResumeAll+0x2a>
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	e7fe      	b.n	8009238 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800923a:	f7ff f97f 	bl	800853c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800923e:	4b39      	ldr	r3, [pc, #228]	; (8009324 <xTaskResumeAll+0x114>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3b01      	subs	r3, #1
 8009244:	4a37      	ldr	r2, [pc, #220]	; (8009324 <xTaskResumeAll+0x114>)
 8009246:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009248:	4b36      	ldr	r3, [pc, #216]	; (8009324 <xTaskResumeAll+0x114>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d161      	bne.n	8009314 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009250:	4b35      	ldr	r3, [pc, #212]	; (8009328 <xTaskResumeAll+0x118>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d05d      	beq.n	8009314 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009258:	e02e      	b.n	80092b8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800925a:	4b34      	ldr	r3, [pc, #208]	; (800932c <xTaskResumeAll+0x11c>)
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3318      	adds	r3, #24
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff f81a 	bl	80082a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3304      	adds	r3, #4
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff f815 	bl	80082a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	2201      	movs	r2, #1
 800927c:	409a      	lsls	r2, r3
 800927e:	4b2c      	ldr	r3, [pc, #176]	; (8009330 <xTaskResumeAll+0x120>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4313      	orrs	r3, r2
 8009284:	4a2a      	ldr	r2, [pc, #168]	; (8009330 <xTaskResumeAll+0x120>)
 8009286:	6013      	str	r3, [r2, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928c:	4613      	mov	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4a27      	ldr	r2, [pc, #156]	; (8009334 <xTaskResumeAll+0x124>)
 8009296:	441a      	add	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3304      	adds	r3, #4
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7fe ffa1 	bl	80081e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4b23      	ldr	r3, [pc, #140]	; (8009338 <xTaskResumeAll+0x128>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d302      	bcc.n	80092b8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80092b2:	4b22      	ldr	r3, [pc, #136]	; (800933c <xTaskResumeAll+0x12c>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092b8:	4b1c      	ldr	r3, [pc, #112]	; (800932c <xTaskResumeAll+0x11c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1cc      	bne.n	800925a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092c6:	f000 fb2d 	bl	8009924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80092ca:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <xTaskResumeAll+0x130>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d010      	beq.n	80092f8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092d6:	f000 f859 	bl	800938c <xTaskIncrementTick>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80092e0:	4b16      	ldr	r3, [pc, #88]	; (800933c <xTaskResumeAll+0x12c>)
 80092e2:	2201      	movs	r2, #1
 80092e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1f1      	bne.n	80092d6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80092f2:	4b13      	ldr	r3, [pc, #76]	; (8009340 <xTaskResumeAll+0x130>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092f8:	4b10      	ldr	r3, [pc, #64]	; (800933c <xTaskResumeAll+0x12c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d009      	beq.n	8009314 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009304:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <xTaskResumeAll+0x134>)
 8009306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009314:	f7ff f940 	bl	8008598 <vPortExitCritical>

	return xAlreadyYielded;
 8009318:	68bb      	ldr	r3, [r7, #8]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20003fdc 	.word	0x20003fdc
 8009328:	20003fb4 	.word	0x20003fb4
 800932c:	20003f74 	.word	0x20003f74
 8009330:	20003fbc 	.word	0x20003fbc
 8009334:	20003eb8 	.word	0x20003eb8
 8009338:	20003eb4 	.word	0x20003eb4
 800933c:	20003fc8 	.word	0x20003fc8
 8009340:	20003fc4 	.word	0x20003fc4
 8009344:	e000ed04 	.word	0xe000ed04

08009348 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800934e:	4b05      	ldr	r3, [pc, #20]	; (8009364 <xTaskGetTickCount+0x1c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009354:	687b      	ldr	r3, [r7, #4]
}
 8009356:	4618      	mov	r0, r3
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	20003fb8 	.word	0x20003fb8

08009368 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800936e:	f7ff f9c1 	bl	80086f4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009372:	2300      	movs	r3, #0
 8009374:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009376:	4b04      	ldr	r3, [pc, #16]	; (8009388 <xTaskGetTickCountFromISR+0x20>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800937c:	683b      	ldr	r3, [r7, #0]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20003fb8 	.word	0x20003fb8

0800938c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009392:	2300      	movs	r3, #0
 8009394:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009396:	4b4e      	ldr	r3, [pc, #312]	; (80094d0 <xTaskIncrementTick+0x144>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	f040 8087 	bne.w	80094ae <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093a0:	4b4c      	ldr	r3, [pc, #304]	; (80094d4 <xTaskIncrementTick+0x148>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3301      	adds	r3, #1
 80093a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093a8:	4a4a      	ldr	r2, [pc, #296]	; (80094d4 <xTaskIncrementTick+0x148>)
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d11f      	bne.n	80093f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80093b4:	4b48      	ldr	r3, [pc, #288]	; (80094d8 <xTaskIncrementTick+0x14c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <xTaskIncrementTick+0x46>
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	e7fe      	b.n	80093d0 <xTaskIncrementTick+0x44>
 80093d2:	4b41      	ldr	r3, [pc, #260]	; (80094d8 <xTaskIncrementTick+0x14c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	4b40      	ldr	r3, [pc, #256]	; (80094dc <xTaskIncrementTick+0x150>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a3e      	ldr	r2, [pc, #248]	; (80094d8 <xTaskIncrementTick+0x14c>)
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	4a3e      	ldr	r2, [pc, #248]	; (80094dc <xTaskIncrementTick+0x150>)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	4b3e      	ldr	r3, [pc, #248]	; (80094e0 <xTaskIncrementTick+0x154>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3301      	adds	r3, #1
 80093ec:	4a3c      	ldr	r2, [pc, #240]	; (80094e0 <xTaskIncrementTick+0x154>)
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	f000 fa98 	bl	8009924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093f4:	4b3b      	ldr	r3, [pc, #236]	; (80094e4 <xTaskIncrementTick+0x158>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	693a      	ldr	r2, [r7, #16]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d348      	bcc.n	8009490 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093fe:	4b36      	ldr	r3, [pc, #216]	; (80094d8 <xTaskIncrementTick+0x14c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d104      	bne.n	8009412 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009408:	4b36      	ldr	r3, [pc, #216]	; (80094e4 <xTaskIncrementTick+0x158>)
 800940a:	f04f 32ff 	mov.w	r2, #4294967295
 800940e:	601a      	str	r2, [r3, #0]
					break;
 8009410:	e03e      	b.n	8009490 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009412:	4b31      	ldr	r3, [pc, #196]	; (80094d8 <xTaskIncrementTick+0x14c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	429a      	cmp	r2, r3
 8009428:	d203      	bcs.n	8009432 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800942a:	4a2e      	ldr	r2, [pc, #184]	; (80094e4 <xTaskIncrementTick+0x158>)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009430:	e02e      	b.n	8009490 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	3304      	adds	r3, #4
 8009436:	4618      	mov	r0, r3
 8009438:	f7fe ff32 	bl	80082a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	2b00      	cmp	r3, #0
 8009442:	d004      	beq.n	800944e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	3318      	adds	r3, #24
 8009448:	4618      	mov	r0, r3
 800944a:	f7fe ff29 	bl	80082a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	2201      	movs	r2, #1
 8009454:	409a      	lsls	r2, r3
 8009456:	4b24      	ldr	r3, [pc, #144]	; (80094e8 <xTaskIncrementTick+0x15c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4313      	orrs	r3, r2
 800945c:	4a22      	ldr	r2, [pc, #136]	; (80094e8 <xTaskIncrementTick+0x15c>)
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4a1f      	ldr	r2, [pc, #124]	; (80094ec <xTaskIncrementTick+0x160>)
 800946e:	441a      	add	r2, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	3304      	adds	r3, #4
 8009474:	4619      	mov	r1, r3
 8009476:	4610      	mov	r0, r2
 8009478:	f7fe feb5 	bl	80081e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009480:	4b1b      	ldr	r3, [pc, #108]	; (80094f0 <xTaskIncrementTick+0x164>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	429a      	cmp	r2, r3
 8009488:	d3b9      	bcc.n	80093fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800948a:	2301      	movs	r3, #1
 800948c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800948e:	e7b6      	b.n	80093fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009490:	4b17      	ldr	r3, [pc, #92]	; (80094f0 <xTaskIncrementTick+0x164>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009496:	4915      	ldr	r1, [pc, #84]	; (80094ec <xTaskIncrementTick+0x160>)
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	440b      	add	r3, r1
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d907      	bls.n	80094b8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	e004      	b.n	80094b8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80094ae:	4b11      	ldr	r3, [pc, #68]	; (80094f4 <xTaskIncrementTick+0x168>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3301      	adds	r3, #1
 80094b4:	4a0f      	ldr	r2, [pc, #60]	; (80094f4 <xTaskIncrementTick+0x168>)
 80094b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80094b8:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <xTaskIncrementTick+0x16c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80094c0:	2301      	movs	r3, #1
 80094c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80094c4:	697b      	ldr	r3, [r7, #20]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20003fdc 	.word	0x20003fdc
 80094d4:	20003fb8 	.word	0x20003fb8
 80094d8:	20003f6c 	.word	0x20003f6c
 80094dc:	20003f70 	.word	0x20003f70
 80094e0:	20003fcc 	.word	0x20003fcc
 80094e4:	20003fd4 	.word	0x20003fd4
 80094e8:	20003fbc 	.word	0x20003fbc
 80094ec:	20003eb8 	.word	0x20003eb8
 80094f0:	20003eb4 	.word	0x20003eb4
 80094f4:	20003fc4 	.word	0x20003fc4
 80094f8:	20003fc8 	.word	0x20003fc8

080094fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009502:	4b26      	ldr	r3, [pc, #152]	; (800959c <vTaskSwitchContext+0xa0>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800950a:	4b25      	ldr	r3, [pc, #148]	; (80095a0 <vTaskSwitchContext+0xa4>)
 800950c:	2201      	movs	r2, #1
 800950e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009510:	e03e      	b.n	8009590 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009512:	4b23      	ldr	r3, [pc, #140]	; (80095a0 <vTaskSwitchContext+0xa4>)
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009518:	4b22      	ldr	r3, [pc, #136]	; (80095a4 <vTaskSwitchContext+0xa8>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	fab3 f383 	clz	r3, r3
 8009524:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	f1c3 031f 	rsb	r3, r3, #31
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	491e      	ldr	r1, [pc, #120]	; (80095a8 <vTaskSwitchContext+0xac>)
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	440b      	add	r3, r1
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d109      	bne.n	8009556 <vTaskSwitchContext+0x5a>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	607b      	str	r3, [r7, #4]
 8009554:	e7fe      	b.n	8009554 <vTaskSwitchContext+0x58>
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4a11      	ldr	r2, [pc, #68]	; (80095a8 <vTaskSwitchContext+0xac>)
 8009562:	4413      	add	r3, r2
 8009564:	613b      	str	r3, [r7, #16]
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	605a      	str	r2, [r3, #4]
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	3308      	adds	r3, #8
 8009578:	429a      	cmp	r2, r3
 800957a:	d104      	bne.n	8009586 <vTaskSwitchContext+0x8a>
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	605a      	str	r2, [r3, #4]
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	4a07      	ldr	r2, [pc, #28]	; (80095ac <vTaskSwitchContext+0xb0>)
 800958e:	6013      	str	r3, [r2, #0]
}
 8009590:	bf00      	nop
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	20003fdc 	.word	0x20003fdc
 80095a0:	20003fc8 	.word	0x20003fc8
 80095a4:	20003fbc 	.word	0x20003fbc
 80095a8:	20003eb8 	.word	0x20003eb8
 80095ac:	20003eb4 	.word	0x20003eb4

080095b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d109      	bne.n	80095d4 <vTaskPlaceOnEventList+0x24>
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	60fb      	str	r3, [r7, #12]
 80095d2:	e7fe      	b.n	80095d2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095d4:	4b07      	ldr	r3, [pc, #28]	; (80095f4 <vTaskPlaceOnEventList+0x44>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3318      	adds	r3, #24
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7fe fe26 	bl	800822e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095e2:	2101      	movs	r1, #1
 80095e4:	6838      	ldr	r0, [r7, #0]
 80095e6:	f000 f9db 	bl	80099a0 <prvAddCurrentTaskToDelayedList>
}
 80095ea:	bf00      	nop
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20003eb4 	.word	0x20003eb4

080095f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d109      	bne.n	8009622 <xTaskRemoveFromEventList+0x2a>
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	e7fe      	b.n	8009620 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	3318      	adds	r3, #24
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fe3a 	bl	80082a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800962c:	4b1d      	ldr	r3, [pc, #116]	; (80096a4 <xTaskRemoveFromEventList+0xac>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d11c      	bne.n	800966e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	3304      	adds	r3, #4
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fe31 	bl	80082a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009642:	2201      	movs	r2, #1
 8009644:	409a      	lsls	r2, r3
 8009646:	4b18      	ldr	r3, [pc, #96]	; (80096a8 <xTaskRemoveFromEventList+0xb0>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4313      	orrs	r3, r2
 800964c:	4a16      	ldr	r2, [pc, #88]	; (80096a8 <xTaskRemoveFromEventList+0xb0>)
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009654:	4613      	mov	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4a13      	ldr	r2, [pc, #76]	; (80096ac <xTaskRemoveFromEventList+0xb4>)
 800965e:	441a      	add	r2, r3
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	3304      	adds	r3, #4
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7fe fdbd 	bl	80081e6 <vListInsertEnd>
 800966c:	e005      	b.n	800967a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	3318      	adds	r3, #24
 8009672:	4619      	mov	r1, r3
 8009674:	480e      	ldr	r0, [pc, #56]	; (80096b0 <xTaskRemoveFromEventList+0xb8>)
 8009676:	f7fe fdb6 	bl	80081e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967e:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <xTaskRemoveFromEventList+0xbc>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	429a      	cmp	r2, r3
 8009686:	d905      	bls.n	8009694 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009688:	2301      	movs	r3, #1
 800968a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800968c:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <xTaskRemoveFromEventList+0xc0>)
 800968e:	2201      	movs	r2, #1
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	e001      	b.n	8009698 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009694:	2300      	movs	r3, #0
 8009696:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009698:	697b      	ldr	r3, [r7, #20]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20003fdc 	.word	0x20003fdc
 80096a8:	20003fbc 	.word	0x20003fbc
 80096ac:	20003eb8 	.word	0x20003eb8
 80096b0:	20003f74 	.word	0x20003f74
 80096b4:	20003eb4 	.word	0x20003eb4
 80096b8:	20003fc8 	.word	0x20003fc8

080096bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096c4:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <vTaskInternalSetTimeOutState+0x24>)
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <vTaskInternalSetTimeOutState+0x28>)
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	605a      	str	r2, [r3, #4]
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	20003fcc 	.word	0x20003fcc
 80096e4:	20003fb8 	.word	0x20003fb8

080096e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b088      	sub	sp, #32
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d109      	bne.n	800970c <xTaskCheckForTimeOut+0x24>
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	613b      	str	r3, [r7, #16]
 800970a:	e7fe      	b.n	800970a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <xTaskCheckForTimeOut+0x3e>
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	e7fe      	b.n	8009724 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009726:	f7fe ff09 	bl	800853c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800972a:	4b1d      	ldr	r3, [pc, #116]	; (80097a0 <xTaskCheckForTimeOut+0xb8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009742:	d102      	bne.n	800974a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e023      	b.n	8009792 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	4b15      	ldr	r3, [pc, #84]	; (80097a4 <xTaskCheckForTimeOut+0xbc>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	429a      	cmp	r2, r3
 8009754:	d007      	beq.n	8009766 <xTaskCheckForTimeOut+0x7e>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	429a      	cmp	r2, r3
 800975e:	d302      	bcc.n	8009766 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009760:	2301      	movs	r3, #1
 8009762:	61fb      	str	r3, [r7, #28]
 8009764:	e015      	b.n	8009792 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	429a      	cmp	r2, r3
 800976e:	d20b      	bcs.n	8009788 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	1ad2      	subs	r2, r2, r3
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff ff9d 	bl	80096bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009782:	2300      	movs	r3, #0
 8009784:	61fb      	str	r3, [r7, #28]
 8009786:	e004      	b.n	8009792 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2200      	movs	r2, #0
 800978c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800978e:	2301      	movs	r3, #1
 8009790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009792:	f7fe ff01 	bl	8008598 <vPortExitCritical>

	return xReturn;
 8009796:	69fb      	ldr	r3, [r7, #28]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3720      	adds	r7, #32
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20003fb8 	.word	0x20003fb8
 80097a4:	20003fcc 	.word	0x20003fcc

080097a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097a8:	b480      	push	{r7}
 80097aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097ac:	4b03      	ldr	r3, [pc, #12]	; (80097bc <vTaskMissedYield+0x14>)
 80097ae:	2201      	movs	r2, #1
 80097b0:	601a      	str	r2, [r3, #0]
}
 80097b2:	bf00      	nop
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	20003fc8 	.word	0x20003fc8

080097c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097c8:	f000 f852 	bl	8009870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097cc:	4b06      	ldr	r3, [pc, #24]	; (80097e8 <prvIdleTask+0x28>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d9f9      	bls.n	80097c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097d4:	4b05      	ldr	r3, [pc, #20]	; (80097ec <prvIdleTask+0x2c>)
 80097d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097e4:	e7f0      	b.n	80097c8 <prvIdleTask+0x8>
 80097e6:	bf00      	nop
 80097e8:	20003eb8 	.word	0x20003eb8
 80097ec:	e000ed04 	.word	0xe000ed04

080097f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097f6:	2300      	movs	r3, #0
 80097f8:	607b      	str	r3, [r7, #4]
 80097fa:	e00c      	b.n	8009816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4a12      	ldr	r2, [pc, #72]	; (8009850 <prvInitialiseTaskLists+0x60>)
 8009808:	4413      	add	r3, r2
 800980a:	4618      	mov	r0, r3
 800980c:	f7fe fcbe 	bl	800818c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3301      	adds	r3, #1
 8009814:	607b      	str	r3, [r7, #4]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b06      	cmp	r3, #6
 800981a:	d9ef      	bls.n	80097fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800981c:	480d      	ldr	r0, [pc, #52]	; (8009854 <prvInitialiseTaskLists+0x64>)
 800981e:	f7fe fcb5 	bl	800818c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009822:	480d      	ldr	r0, [pc, #52]	; (8009858 <prvInitialiseTaskLists+0x68>)
 8009824:	f7fe fcb2 	bl	800818c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009828:	480c      	ldr	r0, [pc, #48]	; (800985c <prvInitialiseTaskLists+0x6c>)
 800982a:	f7fe fcaf 	bl	800818c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800982e:	480c      	ldr	r0, [pc, #48]	; (8009860 <prvInitialiseTaskLists+0x70>)
 8009830:	f7fe fcac 	bl	800818c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009834:	480b      	ldr	r0, [pc, #44]	; (8009864 <prvInitialiseTaskLists+0x74>)
 8009836:	f7fe fca9 	bl	800818c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800983a:	4b0b      	ldr	r3, [pc, #44]	; (8009868 <prvInitialiseTaskLists+0x78>)
 800983c:	4a05      	ldr	r2, [pc, #20]	; (8009854 <prvInitialiseTaskLists+0x64>)
 800983e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <prvInitialiseTaskLists+0x7c>)
 8009842:	4a05      	ldr	r2, [pc, #20]	; (8009858 <prvInitialiseTaskLists+0x68>)
 8009844:	601a      	str	r2, [r3, #0]
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20003eb8 	.word	0x20003eb8
 8009854:	20003f44 	.word	0x20003f44
 8009858:	20003f58 	.word	0x20003f58
 800985c:	20003f74 	.word	0x20003f74
 8009860:	20003f88 	.word	0x20003f88
 8009864:	20003fa0 	.word	0x20003fa0
 8009868:	20003f6c 	.word	0x20003f6c
 800986c:	20003f70 	.word	0x20003f70

08009870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009876:	e019      	b.n	80098ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009878:	f7fe fe60 	bl	800853c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800987c:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <prvCheckTasksWaitingTermination+0x4c>)
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3304      	adds	r3, #4
 8009888:	4618      	mov	r0, r3
 800988a:	f7fe fd09 	bl	80082a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800988e:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <prvCheckTasksWaitingTermination+0x50>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3b01      	subs	r3, #1
 8009894:	4a0a      	ldr	r2, [pc, #40]	; (80098c0 <prvCheckTasksWaitingTermination+0x50>)
 8009896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009898:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <prvCheckTasksWaitingTermination+0x54>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3b01      	subs	r3, #1
 800989e:	4a09      	ldr	r2, [pc, #36]	; (80098c4 <prvCheckTasksWaitingTermination+0x54>)
 80098a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098a2:	f7fe fe79 	bl	8008598 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f80e 	bl	80098c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098ac:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <prvCheckTasksWaitingTermination+0x54>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e1      	bne.n	8009878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20003f88 	.word	0x20003f88
 80098c0:	20003fb4 	.word	0x20003fb4
 80098c4:	20003f9c 	.word	0x20003f9c

080098c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d108      	bne.n	80098ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe fb40 	bl	8007f64 <vPortFree>
				vPortFree( pxTCB );
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7fe fb3d 	bl	8007f64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098ea:	e017      	b.n	800991c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d103      	bne.n	80098fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7fe fb34 	bl	8007f64 <vPortFree>
	}
 80098fc:	e00e      	b.n	800991c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009904:	2b02      	cmp	r3, #2
 8009906:	d009      	beq.n	800991c <prvDeleteTCB+0x54>
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	60fb      	str	r3, [r7, #12]
 800991a:	e7fe      	b.n	800991a <prvDeleteTCB+0x52>
	}
 800991c:	bf00      	nop
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800992a:	4b0c      	ldr	r3, [pc, #48]	; (800995c <prvResetNextTaskUnblockTime+0x38>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009934:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <prvResetNextTaskUnblockTime+0x3c>)
 8009936:	f04f 32ff 	mov.w	r2, #4294967295
 800993a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800993c:	e008      	b.n	8009950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800993e:	4b07      	ldr	r3, [pc, #28]	; (800995c <prvResetNextTaskUnblockTime+0x38>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	4a04      	ldr	r2, [pc, #16]	; (8009960 <prvResetNextTaskUnblockTime+0x3c>)
 800994e:	6013      	str	r3, [r2, #0]
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	20003f6c 	.word	0x20003f6c
 8009960:	20003fd4 	.word	0x20003fd4

08009964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800996a:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <xTaskGetSchedulerState+0x34>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d102      	bne.n	8009978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009972:	2301      	movs	r3, #1
 8009974:	607b      	str	r3, [r7, #4]
 8009976:	e008      	b.n	800998a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009978:	4b08      	ldr	r3, [pc, #32]	; (800999c <xTaskGetSchedulerState+0x38>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009980:	2302      	movs	r3, #2
 8009982:	607b      	str	r3, [r7, #4]
 8009984:	e001      	b.n	800998a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009986:	2300      	movs	r3, #0
 8009988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800998a:	687b      	ldr	r3, [r7, #4]
	}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	20003fc0 	.word	0x20003fc0
 800999c:	20003fdc 	.word	0x20003fdc

080099a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099aa:	4b29      	ldr	r3, [pc, #164]	; (8009a50 <prvAddCurrentTaskToDelayedList+0xb0>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099b0:	4b28      	ldr	r3, [pc, #160]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3304      	adds	r3, #4
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fc72 	bl	80082a0 <uxListRemove>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10b      	bne.n	80099da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80099c2:	4b24      	ldr	r3, [pc, #144]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	2201      	movs	r2, #1
 80099ca:	fa02 f303 	lsl.w	r3, r2, r3
 80099ce:	43da      	mvns	r2, r3
 80099d0:	4b21      	ldr	r3, [pc, #132]	; (8009a58 <prvAddCurrentTaskToDelayedList+0xb8>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4013      	ands	r3, r2
 80099d6:	4a20      	ldr	r2, [pc, #128]	; (8009a58 <prvAddCurrentTaskToDelayedList+0xb8>)
 80099d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e0:	d10a      	bne.n	80099f8 <prvAddCurrentTaskToDelayedList+0x58>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d007      	beq.n	80099f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099e8:	4b1a      	ldr	r3, [pc, #104]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4619      	mov	r1, r3
 80099f0:	481a      	ldr	r0, [pc, #104]	; (8009a5c <prvAddCurrentTaskToDelayedList+0xbc>)
 80099f2:	f7fe fbf8 	bl	80081e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099f6:	e026      	b.n	8009a46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a00:	4b14      	ldr	r3, [pc, #80]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d209      	bcs.n	8009a24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a10:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f7fe fc06 	bl	800822e <vListInsert>
}
 8009a22:	e010      	b.n	8009a46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4610      	mov	r0, r2
 8009a32:	f7fe fbfc 	bl	800822e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a36:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d202      	bcs.n	8009a46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a40:	4a09      	ldr	r2, [pc, #36]	; (8009a68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	6013      	str	r3, [r2, #0]
}
 8009a46:	bf00      	nop
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20003fb8 	.word	0x20003fb8
 8009a54:	20003eb4 	.word	0x20003eb4
 8009a58:	20003fbc 	.word	0x20003fbc
 8009a5c:	20003fa0 	.word	0x20003fa0
 8009a60:	20003f70 	.word	0x20003f70
 8009a64:	20003f6c 	.word	0x20003f6c
 8009a68:	20003fd4 	.word	0x20003fd4

08009a6c <__libc_init_array>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4e0d      	ldr	r6, [pc, #52]	; (8009aa4 <__libc_init_array+0x38>)
 8009a70:	4c0d      	ldr	r4, [pc, #52]	; (8009aa8 <__libc_init_array+0x3c>)
 8009a72:	1ba4      	subs	r4, r4, r6
 8009a74:	10a4      	asrs	r4, r4, #2
 8009a76:	2500      	movs	r5, #0
 8009a78:	42a5      	cmp	r5, r4
 8009a7a:	d109      	bne.n	8009a90 <__libc_init_array+0x24>
 8009a7c:	4e0b      	ldr	r6, [pc, #44]	; (8009aac <__libc_init_array+0x40>)
 8009a7e:	4c0c      	ldr	r4, [pc, #48]	; (8009ab0 <__libc_init_array+0x44>)
 8009a80:	f000 f824 	bl	8009acc <_init>
 8009a84:	1ba4      	subs	r4, r4, r6
 8009a86:	10a4      	asrs	r4, r4, #2
 8009a88:	2500      	movs	r5, #0
 8009a8a:	42a5      	cmp	r5, r4
 8009a8c:	d105      	bne.n	8009a9a <__libc_init_array+0x2e>
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a94:	4798      	blx	r3
 8009a96:	3501      	adds	r5, #1
 8009a98:	e7ee      	b.n	8009a78 <__libc_init_array+0xc>
 8009a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a9e:	4798      	blx	r3
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	e7f2      	b.n	8009a8a <__libc_init_array+0x1e>
 8009aa4:	08009ba8 	.word	0x08009ba8
 8009aa8:	08009ba8 	.word	0x08009ba8
 8009aac:	08009ba8 	.word	0x08009ba8
 8009ab0:	08009bac 	.word	0x08009bac

08009ab4 <memcpy>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	1e43      	subs	r3, r0, #1
 8009ab8:	440a      	add	r2, r1
 8009aba:	4291      	cmp	r1, r2
 8009abc:	d100      	bne.n	8009ac0 <memcpy+0xc>
 8009abe:	bd10      	pop	{r4, pc}
 8009ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ac8:	e7f7      	b.n	8009aba <memcpy+0x6>
	...

08009acc <_init>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	bf00      	nop
 8009ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad2:	bc08      	pop	{r3}
 8009ad4:	469e      	mov	lr, r3
 8009ad6:	4770      	bx	lr

08009ad8 <_fini>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	bf00      	nop
 8009adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ade:	bc08      	pop	{r3}
 8009ae0:	469e      	mov	lr, r3
 8009ae2:	4770      	bx	lr
