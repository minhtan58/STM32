
H747_USB_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d22c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  0800d4cc  0800d4cc  0001d4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dfe8  0800dfe8  0001dfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dff0  0800dff0  0001dff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dff4  0800dff4  0001dff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  0800dff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b38  20000094  0800e08c  00020094  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002bcc  0800e08c  00022bcc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034735  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000059b6  00000000  00000000  000547f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001558  00000000  00000000  0005a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001370  00000000  00000000  0005b708  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00044080  00000000  00000000  0005ca78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001938b  00000000  00000000  000a0af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001995a7  00000000  00000000  000b9e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0025342a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a30  00000000  00000000  002534a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000094 	.word	0x20000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d4b4 	.word	0x0800d4b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000098 	.word	0x20000098
 80002dc:	0800d4b4 	.word	0x0800d4b4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b972 	b.w	80006ac <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	4688      	mov	r8, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14b      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4615      	mov	r5, r2
 80003f2:	d967      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0720 	rsb	r7, r2, #32
 80003fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000402:	fa20 f707 	lsr.w	r7, r0, r7
 8000406:	4095      	lsls	r5, r2
 8000408:	ea47 0803 	orr.w	r8, r7, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbb8 f7fe 	udiv	r7, r8, lr
 8000418:	fa1f fc85 	uxth.w	ip, r5
 800041c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	fb07 f10c 	mul.w	r1, r7, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000432:	f080 811b 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8118 	bls.w	800066c <__udivmoddi4+0x28c>
 800043c:	3f02      	subs	r7, #2
 800043e:	442b      	add	r3, r5
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	45a4      	cmp	ip, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8107 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000462:	45a4      	cmp	ip, r4
 8000464:	f240 8104 	bls.w	8000670 <__udivmoddi4+0x290>
 8000468:	3802      	subs	r0, #2
 800046a:	442c      	add	r4, r5
 800046c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000470:	eba4 040c 	sub.w	r4, r4, ip
 8000474:	2700      	movs	r7, #0
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0xbe>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80eb 	beq.w	8000666 <__udivmoddi4+0x286>
 8000490:	2700      	movs	r7, #0
 8000492:	e9c6 0100 	strd	r0, r1, [r6]
 8000496:	4638      	mov	r0, r7
 8000498:	4639      	mov	r1, r7
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f783 	clz	r7, r3
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d147      	bne.n	8000536 <__udivmoddi4+0x156>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0xd0>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80fa 	bhi.w	80006a4 <__udivmoddi4+0x2c4>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0303 	sbc.w	r3, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	d0e0      	beq.n	8000480 <__udivmoddi4+0xa0>
 80004be:	e9c6 4800 	strd	r4, r8, [r6]
 80004c2:	e7dd      	b.n	8000480 <__udivmoddi4+0xa0>
 80004c4:	b902      	cbnz	r2, 80004c8 <__udivmoddi4+0xe8>
 80004c6:	deff      	udf	#255	; 0xff
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 808f 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d2:	1b49      	subs	r1, r1, r5
 80004d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d8:	fa1f f885 	uxth.w	r8, r5
 80004dc:	2701      	movs	r7, #1
 80004de:	fbb1 fcfe 	udiv	ip, r1, lr
 80004e2:	0c23      	lsrs	r3, r4, #16
 80004e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb08 f10c 	mul.w	r1, r8, ip
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	f200 80cd 	bhi.w	800069c <__udivmoddi4+0x2bc>
 8000502:	4684      	mov	ip, r0
 8000504:	1a59      	subs	r1, r3, r1
 8000506:	b2a3      	uxth	r3, r4
 8000508:	fbb1 f0fe 	udiv	r0, r1, lr
 800050c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000510:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000514:	fb08 f800 	mul.w	r8, r8, r0
 8000518:	45a0      	cmp	r8, r4
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x14c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x14a>
 8000524:	45a0      	cmp	r8, r4
 8000526:	f200 80b6 	bhi.w	8000696 <__udivmoddi4+0x2b6>
 800052a:	4618      	mov	r0, r3
 800052c:	eba4 0408 	sub.w	r4, r4, r8
 8000530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000534:	e79f      	b.n	8000476 <__udivmoddi4+0x96>
 8000536:	f1c7 0c20 	rsb	ip, r7, #32
 800053a:	40bb      	lsls	r3, r7
 800053c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000540:	ea4e 0e03 	orr.w	lr, lr, r3
 8000544:	fa01 f407 	lsl.w	r4, r1, r7
 8000548:	fa20 f50c 	lsr.w	r5, r0, ip
 800054c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000550:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000554:	4325      	orrs	r5, r4
 8000556:	fbb3 f9f8 	udiv	r9, r3, r8
 800055a:	0c2c      	lsrs	r4, r5, #16
 800055c:	fb08 3319 	mls	r3, r8, r9, r3
 8000560:	fa1f fa8e 	uxth.w	sl, lr
 8000564:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000568:	fb09 f40a 	mul.w	r4, r9, sl
 800056c:	429c      	cmp	r4, r3
 800056e:	fa02 f207 	lsl.w	r2, r2, r7
 8000572:	fa00 f107 	lsl.w	r1, r0, r7
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1e 0303 	adds.w	r3, lr, r3
 800057c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000580:	f080 8087 	bcs.w	8000692 <__udivmoddi4+0x2b2>
 8000584:	429c      	cmp	r4, r3
 8000586:	f240 8084 	bls.w	8000692 <__udivmoddi4+0x2b2>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4473      	add	r3, lr
 8000590:	1b1b      	subs	r3, r3, r4
 8000592:	b2ad      	uxth	r5, r5
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005a4:	45a2      	cmp	sl, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1e 0404 	adds.w	r4, lr, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	d26b      	bcs.n	800068a <__udivmoddi4+0x2aa>
 80005b2:	45a2      	cmp	sl, r4
 80005b4:	d969      	bls.n	800068a <__udivmoddi4+0x2aa>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4474      	add	r4, lr
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	fba0 8902 	umull	r8, r9, r0, r2
 80005c2:	eba4 040a 	sub.w	r4, r4, sl
 80005c6:	454c      	cmp	r4, r9
 80005c8:	46c2      	mov	sl, r8
 80005ca:	464b      	mov	r3, r9
 80005cc:	d354      	bcc.n	8000678 <__udivmoddi4+0x298>
 80005ce:	d051      	beq.n	8000674 <__udivmoddi4+0x294>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2c8>
 80005d4:	ebb1 050a 	subs.w	r5, r1, sl
 80005d8:	eb64 0403 	sbc.w	r4, r4, r3
 80005dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005e0:	40fd      	lsrs	r5, r7
 80005e2:	40fc      	lsrs	r4, r7
 80005e4:	ea4c 0505 	orr.w	r5, ip, r5
 80005e8:	e9c6 5400 	strd	r5, r4, [r6]
 80005ec:	2700      	movs	r7, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa0>
 80005f0:	f1c2 0320 	rsb	r3, r2, #32
 80005f4:	fa20 f703 	lsr.w	r7, r0, r3
 80005f8:	4095      	lsls	r5, r2
 80005fa:	fa01 f002 	lsl.w	r0, r1, r2
 80005fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000602:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000606:	4338      	orrs	r0, r7
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	fbb3 f7fe 	udiv	r7, r3, lr
 800060e:	fa1f f885 	uxth.w	r8, r5
 8000612:	fb0e 3317 	mls	r3, lr, r7, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb07 f308 	mul.w	r3, r7, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x256>
 8000626:	1869      	adds	r1, r5, r1
 8000628:	f107 3cff 	add.w	ip, r7, #4294967295
 800062c:	d22f      	bcs.n	800068e <__udivmoddi4+0x2ae>
 800062e:	428b      	cmp	r3, r1
 8000630:	d92d      	bls.n	800068e <__udivmoddi4+0x2ae>
 8000632:	3f02      	subs	r7, #2
 8000634:	4429      	add	r1, r5
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	b281      	uxth	r1, r0
 800063a:	fbb3 f0fe 	udiv	r0, r3, lr
 800063e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000642:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000646:	fb00 f308 	mul.w	r3, r0, r8
 800064a:	428b      	cmp	r3, r1
 800064c:	d907      	bls.n	800065e <__udivmoddi4+0x27e>
 800064e:	1869      	adds	r1, r5, r1
 8000650:	f100 3cff 	add.w	ip, r0, #4294967295
 8000654:	d217      	bcs.n	8000686 <__udivmoddi4+0x2a6>
 8000656:	428b      	cmp	r3, r1
 8000658:	d915      	bls.n	8000686 <__udivmoddi4+0x2a6>
 800065a:	3802      	subs	r0, #2
 800065c:	4429      	add	r1, r5
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000664:	e73b      	b.n	80004de <__udivmoddi4+0xfe>
 8000666:	4637      	mov	r7, r6
 8000668:	4630      	mov	r0, r6
 800066a:	e709      	b.n	8000480 <__udivmoddi4+0xa0>
 800066c:	4607      	mov	r7, r0
 800066e:	e6e7      	b.n	8000440 <__udivmoddi4+0x60>
 8000670:	4618      	mov	r0, r3
 8000672:	e6fb      	b.n	800046c <__udivmoddi4+0x8c>
 8000674:	4541      	cmp	r1, r8
 8000676:	d2ab      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 8000678:	ebb8 0a02 	subs.w	sl, r8, r2
 800067c:	eb69 020e 	sbc.w	r2, r9, lr
 8000680:	3801      	subs	r0, #1
 8000682:	4613      	mov	r3, r2
 8000684:	e7a4      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000686:	4660      	mov	r0, ip
 8000688:	e7e9      	b.n	800065e <__udivmoddi4+0x27e>
 800068a:	4618      	mov	r0, r3
 800068c:	e795      	b.n	80005ba <__udivmoddi4+0x1da>
 800068e:	4667      	mov	r7, ip
 8000690:	e7d1      	b.n	8000636 <__udivmoddi4+0x256>
 8000692:	4681      	mov	r9, r0
 8000694:	e77c      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000696:	3802      	subs	r0, #2
 8000698:	442c      	add	r4, r5
 800069a:	e747      	b.n	800052c <__udivmoddi4+0x14c>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	442b      	add	r3, r5
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x124>
 80006a4:	4638      	mov	r0, r7
 80006a6:	e708      	b.n	80004ba <__udivmoddi4+0xda>
 80006a8:	4637      	mov	r7, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa0>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b4:	4b3f      	ldr	r3, [pc, #252]	; (80007b4 <SystemInit+0x104>)
 80006b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ba:	4a3e      	ldr	r2, [pc, #248]	; (80007b4 <SystemInit+0x104>)
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <SystemInit+0x104>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	4a3a      	ldr	r2, [pc, #232]	; (80007b4 <SystemInit+0x104>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d0:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <SystemInit+0x108>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	2b06      	cmp	r3, #6
 80006da:	d807      	bhi.n	80006ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006dc:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <SystemInit+0x108>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f023 030f 	bic.w	r3, r3, #15
 80006e4:	4a34      	ldr	r2, [pc, #208]	; (80007b8 <SystemInit+0x108>)
 80006e6:	f043 0307 	orr.w	r3, r3, #7
 80006ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ec:	4b33      	ldr	r3, [pc, #204]	; (80007bc <SystemInit+0x10c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a32      	ldr	r2, [pc, #200]	; (80007bc <SystemInit+0x10c>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <SystemInit+0x10c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fe:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <SystemInit+0x10c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	492e      	ldr	r1, [pc, #184]	; (80007bc <SystemInit+0x10c>)
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <SystemInit+0x110>)
 8000706:	4013      	ands	r3, r2
 8000708:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <SystemInit+0x108>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	2b07      	cmp	r3, #7
 8000714:	d907      	bls.n	8000726 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <SystemInit+0x108>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f023 030f 	bic.w	r3, r3, #15
 800071e:	4a26      	ldr	r2, [pc, #152]	; (80007b8 <SystemInit+0x108>)
 8000720:	f043 0307 	orr.w	r3, r3, #7
 8000724:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemInit+0x10c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <SystemInit+0x10c>)
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <SystemInit+0x114>)
 800073c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemInit+0x10c>)
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemInit+0x118>)
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <SystemInit+0x10c>)
 8000746:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemInit+0x11c>)
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <SystemInit+0x10c>)
 800074c:	2200      	movs	r2, #0
 800074e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <SystemInit+0x10c>)
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <SystemInit+0x11c>)
 8000754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <SystemInit+0x10c>)
 8000758:	2200      	movs	r2, #0
 800075a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <SystemInit+0x10c>)
 800075e:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <SystemInit+0x11c>)
 8000760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <SystemInit+0x10c>)
 8000764:	2200      	movs	r2, #0
 8000766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <SystemInit+0x10c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <SystemInit+0x10c>)
 800076e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x10c>)
 8000776:	2200      	movs	r2, #0
 8000778:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <SystemInit+0x120>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <SystemInit+0x120>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <SystemInit+0x124>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <SystemInit+0x128>)
 800078c:	4013      	ands	r3, r2
 800078e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000792:	d202      	bcs.n	800079a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <SystemInit+0x12c>)
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <SystemInit+0x130>)
 800079c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SystemInit+0x104>)
 80007a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	52002000 	.word	0x52002000
 80007bc:	58024400 	.word	0x58024400
 80007c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c4:	02020200 	.word	0x02020200
 80007c8:	01ff0000 	.word	0x01ff0000
 80007cc:	01010280 	.word	0x01010280
 80007d0:	580000c0 	.word	0x580000c0
 80007d4:	5c001000 	.word	0x5c001000
 80007d8:	ffff0000 	.word	0xffff0000
 80007dc:	51008108 	.word	0x51008108
 80007e0:	52004000 	.word	0x52004000

080007e4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff fd81 	bl	80002f4 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <Send_Uart+0x28>)
 80007fe:	f004 f9d3 	bl	8004ba8 <HAL_UART_Transmit>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000042c 	.word	0x2000042c

08000810 <Mount_USB>:



void Mount_USB (void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	490a      	ldr	r1, [pc, #40]	; (8000840 <Mount_USB+0x30>)
 8000818:	480a      	ldr	r0, [pc, #40]	; (8000844 <Mount_USB+0x34>)
 800081a:	f00a ff8d 	bl	800b738 <f_mount>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <Mount_USB+0x38>)
 8000824:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <Mount_USB+0x38>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d003      	beq.n	8000836 <Mount_USB+0x26>
 800082e:	4807      	ldr	r0, [pc, #28]	; (800084c <Mount_USB+0x3c>)
 8000830:	f7ff ffd8 	bl	80007e4 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000834:	e002      	b.n	800083c <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <Mount_USB+0x40>)
 8000838:	f7ff ffd4 	bl	80007e4 <Send_Uart>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200004bc 	.word	0x200004bc
 8000844:	200014f0 	.word	0x200014f0
 8000848:	2000030c 	.word	0x2000030c
 800084c:	0800d4cc 	.word	0x0800d4cc
 8000850:	0800d4ec 	.word	0x0800d4ec

08000854 <Unmount_USB>:

void Unmount_USB (void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000858:	2201      	movs	r2, #1
 800085a:	490a      	ldr	r1, [pc, #40]	; (8000884 <Unmount_USB+0x30>)
 800085c:	2000      	movs	r0, #0
 800085e:	f00a ff6b 	bl	800b738 <f_mount>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <Unmount_USB+0x34>)
 8000868:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <Unmount_USB+0x34>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d103      	bne.n	800087a <Unmount_USB+0x26>
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <Unmount_USB+0x38>)
 8000874:	f7ff ffb6 	bl	80007e4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000878:	e002      	b.n	8000880 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <Unmount_USB+0x3c>)
 800087c:	f7ff ffb2 	bl	80007e4 <Send_Uart>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200004bc 	.word	0x200004bc
 8000888:	2000030c 	.word	0x2000030c
 800088c:	0800d50c 	.word	0x0800d50c
 8000890:	0800d530 	.word	0x0800d530

08000894 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 800089c:	2014      	movs	r0, #20
 800089e:	f00c f9e1 	bl	800cc64 <malloc>
 80008a2:	4603      	mov	r3, r0
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sprintf (path, "%s",pat);
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80008aa:	f00c fad7 	bl	800ce5c <strcpy>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80008b4:	4618      	mov	r0, r3
 80008b6:	f00b fb8d 	bl	800bfd4 <f_opendir>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <Scan_USB+0x128>)
 80008c0:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80008c2:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <Scan_USB+0x128>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d16e      	bne.n	80009a8 <Scan_USB+0x114>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	493c      	ldr	r1, [pc, #240]	; (80009c0 <Scan_USB+0x12c>)
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00b fc18 	bl	800c106 <f_readdir>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <Scan_USB+0x128>)
 80008dc:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <Scan_USB+0x128>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d15b      	bne.n	800099e <Scan_USB+0x10a>
 80008e6:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <Scan_USB+0x12c>)
 80008e8:	7d9b      	ldrb	r3, [r3, #22]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d057      	beq.n	800099e <Scan_USB+0x10a>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 80008ee:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <Scan_USB+0x12c>)
 80008f0:	7a1b      	ldrb	r3, [r3, #8]
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d03a      	beq.n	8000970 <Scan_USB+0xdc>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80008fa:	4932      	ldr	r1, [pc, #200]	; (80009c4 <Scan_USB+0x130>)
 80008fc:	4832      	ldr	r0, [pc, #200]	; (80009c8 <Scan_USB+0x134>)
 80008fe:	f7ff fcef 	bl	80002e0 <strcmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d045      	beq.n	8000994 <Scan_USB+0x100>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000908:	492e      	ldr	r1, [pc, #184]	; (80009c4 <Scan_USB+0x130>)
 800090a:	4830      	ldr	r0, [pc, #192]	; (80009cc <Scan_USB+0x138>)
 800090c:	f7ff fce8 	bl	80002e0 <strcmp>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d040      	beq.n	8000998 <Scan_USB+0x104>
            	char *buf = malloc(30*sizeof(char));
 8000916:	201e      	movs	r0, #30
 8000918:	f00c f9a4 	bl	800cc64 <malloc>
 800091c:	4603      	mov	r3, r0
 800091e:	647b      	str	r3, [r7, #68]	; 0x44
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000920:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <Scan_USB+0x130>)
 8000922:	492b      	ldr	r1, [pc, #172]	; (80009d0 <Scan_USB+0x13c>)
 8000924:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000926:	f00c fa79 	bl	800ce1c <siprintf>
            	Send_Uart(buf);
 800092a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800092c:	f7ff ff5a 	bl	80007e4 <Send_Uart>
            	free(buf);
 8000930:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000932:	f00c f99f 	bl	800cc74 <free>
                i = strlen(path);
 8000936:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000938:	f7ff fcdc 	bl	80002f4 <strlen>
 800093c:	6438      	str	r0, [r7, #64]	; 0x40
                sprintf(&path[i], "/%s", USBHfno.fname);
 800093e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000942:	4413      	add	r3, r2
 8000944:	4a1f      	ldr	r2, [pc, #124]	; (80009c4 <Scan_USB+0x130>)
 8000946:	4923      	ldr	r1, [pc, #140]	; (80009d4 <Scan_USB+0x140>)
 8000948:	4618      	mov	r0, r3
 800094a:	f00c fa67 	bl	800ce1c <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 800094e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000950:	f7ff ffa0 	bl	8000894 <Scan_USB>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <Scan_USB+0x128>)
 800095a:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <Scan_USB+0x128>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d11b      	bne.n	800099c <Scan_USB+0x108>
                path[i] = 0;
 8000964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000968:	4413      	add	r3, r2
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e7ac      	b.n	80008ca <Scan_USB+0x36>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000970:	201e      	movs	r0, #30
 8000972:	f00c f977 	bl	800cc64 <malloc>
 8000976:	4603      	mov	r3, r0
 8000978:	64bb      	str	r3, [r7, #72]	; 0x48
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <Scan_USB+0x130>)
 800097c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800097e:	4916      	ldr	r1, [pc, #88]	; (80009d8 <Scan_USB+0x144>)
 8000980:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000982:	f00c fa4b 	bl	800ce1c <siprintf>
               Send_Uart(buf);
 8000986:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000988:	f7ff ff2c 	bl	80007e4 <Send_Uart>
               free(buf);
 800098c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800098e:	f00c f971 	bl	800cc74 <free>
 8000992:	e79a      	b.n	80008ca <Scan_USB+0x36>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000994:	bf00      	nop
 8000996:	e798      	b.n	80008ca <Scan_USB+0x36>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000998:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 800099a:	e796      	b.n	80008ca <Scan_USB+0x36>
                if (fresult != FR_OK) break;
 800099c:	bf00      	nop
            }
        }
        f_closedir(&dir);
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4618      	mov	r0, r3
 80009a4:	f00b fb89 	bl	800c0ba <f_closedir>
    }
    free(path);
 80009a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80009aa:	f00c f963 	bl	800cc74 <free>
    return fresult;
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <Scan_USB+0x128>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3750      	adds	r7, #80	; 0x50
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000030c 	.word	0x2000030c
 80009c0:	20000310 	.word	0x20000310
 80009c4:	20000326 	.word	0x20000326
 80009c8:	0800d550 	.word	0x0800d550
 80009cc:	0800d55c 	.word	0x0800d55c
 80009d0:	0800d578 	.word	0x0800d578
 80009d4:	0800d584 	.word	0x0800d584
 80009d8:	0800d588 	.word	0x0800d588

080009dc <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80009e6:	4955      	ldr	r1, [pc, #340]	; (8000b3c <Write_File+0x160>)
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f00b fbc9 	bl	800c180 <f_stat>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <Write_File+0x164>)
 80009f4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80009f6:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <Write_File+0x164>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d012      	beq.n	8000a24 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f00c f930 	bl	800cc64 <malloc>
 8000a04:	4603      	mov	r3, r0
 8000a06:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	494e      	ldr	r1, [pc, #312]	; (8000b44 <Write_File+0x168>)
 8000a0c:	68b8      	ldr	r0, [r7, #8]
 8000a0e:	f00c fa05 	bl	800ce1c <siprintf>
		Send_Uart (buf);
 8000a12:	68b8      	ldr	r0, [r7, #8]
 8000a14:	f7ff fee6 	bl	80007e4 <Send_Uart>
	    free(buf);
 8000a18:	68b8      	ldr	r0, [r7, #8]
 8000a1a:	f00c f92b 	bl	800cc74 <free>
	    return fresult;
 8000a1e:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <Write_File+0x164>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	e087      	b.n	8000b34 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000a24:	2202      	movs	r2, #2
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	4847      	ldr	r0, [pc, #284]	; (8000b48 <Write_File+0x16c>)
 8000a2a:	f00a fecb 	bl	800b7c4 <f_open>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <Write_File+0x164>)
 8000a34:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <Write_File+0x164>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d015      	beq.n	8000a6a <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000a3e:	2064      	movs	r0, #100	; 0x64
 8000a40:	f00c f910 	bl	800cc64 <malloc>
 8000a44:	4603      	mov	r3, r0
 8000a46:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000a48:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <Write_File+0x164>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	493e      	ldr	r1, [pc, #248]	; (8000b4c <Write_File+0x170>)
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f00c f9e2 	bl	800ce1c <siprintf>
	    	Send_Uart(buf);
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff fec3 	bl	80007e4 <Send_Uart>
	        free(buf);
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f00c f908 	bl	800cc74 <free>
	        return fresult;
 8000a64:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <Write_File+0x164>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	e064      	b.n	8000b34 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f00c f8fa 	bl	800cc64 <malloc>
 8000a70:	4603      	mov	r3, r0
 8000a72:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4936      	ldr	r1, [pc, #216]	; (8000b50 <Write_File+0x174>)
 8000a78:	69f8      	ldr	r0, [r7, #28]
 8000a7a:	f00c f9cf 	bl	800ce1c <siprintf>
	    	Send_Uart(buf);
 8000a7e:	69f8      	ldr	r0, [r7, #28]
 8000a80:	f7ff feb0 	bl	80007e4 <Send_Uart>
	        free(buf);
 8000a84:	69f8      	ldr	r0, [r7, #28]
 8000a86:	f00c f8f5 	bl	800cc74 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000a8a:	6838      	ldr	r0, [r7, #0]
 8000a8c:	f7ff fc32 	bl	80002f4 <strlen>
 8000a90:	4602      	mov	r2, r0
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <Write_File+0x178>)
 8000a94:	6839      	ldr	r1, [r7, #0]
 8000a96:	482c      	ldr	r0, [pc, #176]	; (8000b48 <Write_File+0x16c>)
 8000a98:	f00b f860 	bl	800bb5c <f_write>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <Write_File+0x164>)
 8000aa2:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <Write_File+0x164>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d012      	beq.n	8000ad2 <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000aac:	2064      	movs	r0, #100	; 0x64
 8000aae:	f00c f8d9 	bl	800cc64 <malloc>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <Write_File+0x164>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4926      	ldr	r1, [pc, #152]	; (8000b58 <Write_File+0x17c>)
 8000ac0:	69b8      	ldr	r0, [r7, #24]
 8000ac2:	f00c f9ab 	bl	800ce1c <siprintf>
	    		Send_Uart(buf);
 8000ac6:	69b8      	ldr	r0, [r7, #24]
 8000ac8:	f7ff fe8c 	bl	80007e4 <Send_Uart>
	    		free(buf);
 8000acc:	69b8      	ldr	r0, [r7, #24]
 8000ace:	f00c f8d1 	bl	800cc74 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000ad2:	481d      	ldr	r0, [pc, #116]	; (8000b48 <Write_File+0x16c>)
 8000ad4:	f00b fa54 	bl	800bf80 <f_close>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <Write_File+0x164>)
 8000ade:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <Write_File+0x164>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d013      	beq.n	8000b10 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ae8:	2064      	movs	r0, #100	; 0x64
 8000aea:	f00c f8bb 	bl	800cc64 <malloc>
 8000aee:	4603      	mov	r3, r0
 8000af0:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <Write_File+0x164>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4918      	ldr	r1, [pc, #96]	; (8000b5c <Write_File+0x180>)
 8000afc:	6938      	ldr	r0, [r7, #16]
 8000afe:	f00c f98d 	bl	800ce1c <siprintf>
	    		Send_Uart(buf);
 8000b02:	6938      	ldr	r0, [r7, #16]
 8000b04:	f7ff fe6e 	bl	80007e4 <Send_Uart>
	    		free(buf);
 8000b08:	6938      	ldr	r0, [r7, #16]
 8000b0a:	f00c f8b3 	bl	800cc74 <free>
 8000b0e:	e00f      	b.n	8000b30 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f00c f8a7 	bl	800cc64 <malloc>
 8000b16:	4603      	mov	r3, r0
 8000b18:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4910      	ldr	r1, [pc, #64]	; (8000b60 <Write_File+0x184>)
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f00c f97c 	bl	800ce1c <siprintf>
	    		Send_Uart(buf);
 8000b24:	6978      	ldr	r0, [r7, #20]
 8000b26:	f7ff fe5d 	bl	80007e4 <Send_Uart>
	    		free(buf);
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f00c f8a2 	bl	800cc74 <free>
	    	}
	    }
	    return fresult;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <Write_File+0x164>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000310 	.word	0x20000310
 8000b40:	2000030c 	.word	0x2000030c
 8000b44:	0800d59c 	.word	0x0800d59c
 8000b48:	200004c0 	.word	0x200004c0
 8000b4c:	0800d5bc 	.word	0x0800d5bc
 8000b50:	0800d5e4 	.word	0x0800d5e4
 8000b54:	20000308 	.word	0x20000308
 8000b58:	0800d610 	.word	0x0800d610
 8000b5c:	0800d644 	.word	0x0800d644
 8000b60:	0800d67c 	.word	0x0800d67c

08000b64 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000b6c:	4943      	ldr	r1, [pc, #268]	; (8000c7c <Create_File+0x118>)
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f00b fb06 	bl	800c180 <f_stat>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <Create_File+0x11c>)
 8000b7a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000b7c:	4b40      	ldr	r3, [pc, #256]	; (8000c80 <Create_File+0x11c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d112      	bne.n	8000baa <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000b84:	2064      	movs	r0, #100	; 0x64
 8000b86:	f00c f86d 	bl	800cc64 <malloc>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	493c      	ldr	r1, [pc, #240]	; (8000c84 <Create_File+0x120>)
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f00c f942 	bl	800ce1c <siprintf>
		Send_Uart(buf);
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff fe23 	bl	80007e4 <Send_Uart>
		free(buf);
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f00c f868 	bl	800cc74 <free>
	    return fresult;
 8000ba4:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <Create_File+0x11c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	e063      	b.n	8000c72 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000baa:	220b      	movs	r2, #11
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4836      	ldr	r0, [pc, #216]	; (8000c88 <Create_File+0x124>)
 8000bb0:	f00a fe08 	bl	800b7c4 <f_open>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <Create_File+0x11c>)
 8000bba:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000bbc:	4b30      	ldr	r3, [pc, #192]	; (8000c80 <Create_File+0x11c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d015      	beq.n	8000bf0 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f00c f84d 	bl	800cc64 <malloc>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <Create_File+0x11c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	492d      	ldr	r1, [pc, #180]	; (8000c8c <Create_File+0x128>)
 8000bd8:	6938      	ldr	r0, [r7, #16]
 8000bda:	f00c f91f 	bl	800ce1c <siprintf>
			Send_Uart(buf);
 8000bde:	6938      	ldr	r0, [r7, #16]
 8000be0:	f7ff fe00 	bl	80007e4 <Send_Uart>
			free(buf);
 8000be4:	6938      	ldr	r0, [r7, #16]
 8000be6:	f00c f845 	bl	800cc74 <free>
		    return fresult;
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <Create_File+0x11c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	e040      	b.n	8000c72 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000bf0:	2064      	movs	r0, #100	; 0x64
 8000bf2:	f00c f837 	bl	800cc64 <malloc>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4924      	ldr	r1, [pc, #144]	; (8000c90 <Create_File+0x12c>)
 8000bfe:	69f8      	ldr	r0, [r7, #28]
 8000c00:	f00c f90c 	bl	800ce1c <siprintf>
			Send_Uart(buf);
 8000c04:	69f8      	ldr	r0, [r7, #28]
 8000c06:	f7ff fded 	bl	80007e4 <Send_Uart>
			free(buf);
 8000c0a:	69f8      	ldr	r0, [r7, #28]
 8000c0c:	f00c f832 	bl	800cc74 <free>
		}

		fresult = f_close(&USBHFile);
 8000c10:	481d      	ldr	r0, [pc, #116]	; (8000c88 <Create_File+0x124>)
 8000c12:	f00b f9b5 	bl	800bf80 <f_close>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <Create_File+0x11c>)
 8000c1c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <Create_File+0x11c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d013      	beq.n	8000c4e <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000c26:	2064      	movs	r0, #100	; 0x64
 8000c28:	f00c f81c 	bl	800cc64 <malloc>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <Create_File+0x11c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4916      	ldr	r1, [pc, #88]	; (8000c94 <Create_File+0x130>)
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f00c f8ee 	bl	800ce1c <siprintf>
			Send_Uart(buf);
 8000c40:	6978      	ldr	r0, [r7, #20]
 8000c42:	f7ff fdcf 	bl	80007e4 <Send_Uart>
			free(buf);
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f00c f814 	bl	800cc74 <free>
 8000c4c:	e00f      	b.n	8000c6e <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000c4e:	2064      	movs	r0, #100	; 0x64
 8000c50:	f00c f808 	bl	800cc64 <malloc>
 8000c54:	4603      	mov	r3, r0
 8000c56:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	490f      	ldr	r1, [pc, #60]	; (8000c98 <Create_File+0x134>)
 8000c5c:	69b8      	ldr	r0, [r7, #24]
 8000c5e:	f00c f8dd 	bl	800ce1c <siprintf>
			Send_Uart(buf);
 8000c62:	69b8      	ldr	r0, [r7, #24]
 8000c64:	f7ff fdbe 	bl	80007e4 <Send_Uart>
			free(buf);
 8000c68:	69b8      	ldr	r0, [r7, #24]
 8000c6a:	f00c f803 	bl	800cc74 <free>
		}
	}
    return fresult;
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <Create_File+0x11c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000310 	.word	0x20000310
 8000c80:	2000030c 	.word	0x2000030c
 8000c84:	0800d770 	.word	0x0800d770
 8000c88:	200004c0 	.word	0x200004c0
 8000c8c:	0800d7a8 	.word	0x0800d7a8
 8000c90:	0800d7d0 	.word	0x0800d7d0
 8000c94:	0800d810 	.word	0x0800d810
 8000c98:	0800d750 	.word	0x0800d750

08000c9c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000ca6:	495e      	ldr	r1, [pc, #376]	; (8000e20 <Update_File+0x184>)
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f00b fa69 	bl	800c180 <f_stat>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b5c      	ldr	r3, [pc, #368]	; (8000e24 <Update_File+0x188>)
 8000cb4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000cb6:	4b5b      	ldr	r3, [pc, #364]	; (8000e24 <Update_File+0x188>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d012      	beq.n	8000ce4 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000cbe:	2064      	movs	r0, #100	; 0x64
 8000cc0:	f00b ffd0 	bl	800cc64 <malloc>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4957      	ldr	r1, [pc, #348]	; (8000e28 <Update_File+0x18c>)
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f00c f8a5 	bl	800ce1c <siprintf>
		Send_Uart (buf);
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff fd86 	bl	80007e4 <Send_Uart>
		free(buf);
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f00b ffcb 	bl	800cc74 <free>
	    return fresult;
 8000cde:	4b51      	ldr	r3, [pc, #324]	; (8000e24 <Update_File+0x188>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	e098      	b.n	8000e16 <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8000ce4:	2232      	movs	r2, #50	; 0x32
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <Update_File+0x190>)
 8000cea:	f00a fd6b 	bl	800b7c4 <f_open>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <Update_File+0x188>)
 8000cf4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000cf6:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <Update_File+0x188>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d015      	beq.n	8000d2a <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000cfe:	2064      	movs	r0, #100	; 0x64
 8000d00:	f00b ffb0 	bl	800cc64 <malloc>
 8000d04:	4603      	mov	r3, r0
 8000d06:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000d08:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <Update_File+0x188>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4947      	ldr	r1, [pc, #284]	; (8000e30 <Update_File+0x194>)
 8000d12:	6938      	ldr	r0, [r7, #16]
 8000d14:	f00c f882 	bl	800ce1c <siprintf>
	    	Send_Uart(buf);
 8000d18:	6938      	ldr	r0, [r7, #16]
 8000d1a:	f7ff fd63 	bl	80007e4 <Send_Uart>
	        free(buf);
 8000d1e:	6938      	ldr	r0, [r7, #16]
 8000d20:	f00b ffa8 	bl	800cc74 <free>
	        return fresult;
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <Update_File+0x188>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	e075      	b.n	8000e16 <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8000d2a:	2064      	movs	r0, #100	; 0x64
 8000d2c:	f00b ff9a 	bl	800cc64 <malloc>
 8000d30:	4603      	mov	r3, r0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	493f      	ldr	r1, [pc, #252]	; (8000e34 <Update_File+0x198>)
 8000d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d3a:	f00c f86f 	bl	800ce1c <siprintf>
    	Send_Uart(buf);
 8000d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d40:	f7ff fd50 	bl	80007e4 <Send_Uart>
        free(buf);
 8000d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d46:	f00b ff95 	bl	800cc74 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8000d4a:	6838      	ldr	r0, [r7, #0]
 8000d4c:	f7ff fad2 	bl	80002f4 <strlen>
 8000d50:	4602      	mov	r2, r0
 8000d52:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <Update_File+0x19c>)
 8000d54:	6839      	ldr	r1, [r7, #0]
 8000d56:	4835      	ldr	r0, [pc, #212]	; (8000e2c <Update_File+0x190>)
 8000d58:	f00a ff00 	bl	800bb5c <f_write>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <Update_File+0x188>)
 8000d62:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000d64:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <Update_File+0x188>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d013      	beq.n	8000d94 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000d6c:	2064      	movs	r0, #100	; 0x64
 8000d6e:	f00b ff79 	bl	800cc64 <malloc>
 8000d72:	4603      	mov	r3, r0
 8000d74:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <Update_File+0x188>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	492f      	ldr	r1, [pc, #188]	; (8000e3c <Update_File+0x1a0>)
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f00c f84b 	bl	800ce1c <siprintf>
	    	Send_Uart(buf);
 8000d86:	69f8      	ldr	r0, [r7, #28]
 8000d88:	f7ff fd2c 	bl	80007e4 <Send_Uart>
	    	free(buf);
 8000d8c:	69f8      	ldr	r0, [r7, #28]
 8000d8e:	f00b ff71 	bl	800cc74 <free>
 8000d92:	e00f      	b.n	8000db4 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	f00b ff65 	bl	800cc64 <malloc>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4927      	ldr	r1, [pc, #156]	; (8000e40 <Update_File+0x1a4>)
 8000da2:	6a38      	ldr	r0, [r7, #32]
 8000da4:	f00c f83a 	bl	800ce1c <siprintf>
	    	Send_Uart(buf);
 8000da8:	6a38      	ldr	r0, [r7, #32]
 8000daa:	f7ff fd1b 	bl	80007e4 <Send_Uart>
	    	free(buf);
 8000dae:	6a38      	ldr	r0, [r7, #32]
 8000db0:	f00b ff60 	bl	800cc74 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8000db4:	481d      	ldr	r0, [pc, #116]	; (8000e2c <Update_File+0x190>)
 8000db6:	f00b f8e3 	bl	800bf80 <f_close>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <Update_File+0x188>)
 8000dc0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <Update_File+0x188>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d013      	beq.n	8000df2 <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f00b ff4a 	bl	800cc64 <malloc>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <Update_File+0x188>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4919      	ldr	r1, [pc, #100]	; (8000e44 <Update_File+0x1a8>)
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f00c f81c 	bl	800ce1c <siprintf>
	    	Send_Uart(buf);
 8000de4:	6978      	ldr	r0, [r7, #20]
 8000de6:	f7ff fcfd 	bl	80007e4 <Send_Uart>
	    	free(buf);
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f00b ff42 	bl	800cc74 <free>
 8000df0:	e00f      	b.n	8000e12 <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f00b ff36 	bl	800cc64 <malloc>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4912      	ldr	r1, [pc, #72]	; (8000e48 <Update_File+0x1ac>)
 8000e00:	69b8      	ldr	r0, [r7, #24]
 8000e02:	f00c f80b 	bl	800ce1c <siprintf>
	    	Send_Uart(buf);
 8000e06:	69b8      	ldr	r0, [r7, #24]
 8000e08:	f7ff fcec 	bl	80007e4 <Send_Uart>
	    	free(buf);
 8000e0c:	69b8      	ldr	r0, [r7, #24]
 8000e0e:	f00b ff31 	bl	800cc74 <free>
	     }
	}
    return fresult;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <Update_File+0x188>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000310 	.word	0x20000310
 8000e24:	2000030c 	.word	0x2000030c
 8000e28:	0800d59c 	.word	0x0800d59c
 8000e2c:	200004c0 	.word	0x200004c0
 8000e30:	0800d5bc 	.word	0x0800d5bc
 8000e34:	0800d834 	.word	0x0800d834
 8000e38:	20000308 	.word	0x20000308
 8000e3c:	0800d864 	.word	0x0800d864
 8000e40:	0800d88c 	.word	0x0800d88c
 8000e44:	0800d728 	.word	0x0800d728
 8000e48:	0800d750 	.word	0x0800d750

08000e4c <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f00b fa81 	bl	800c35c <f_mkdir>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <Create_Dir+0x74>)
 8000e60:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <Create_Dir+0x74>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d110      	bne.n	8000e8c <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 8000e6a:	2064      	movs	r0, #100	; 0x64
 8000e6c:	f00b fefa 	bl	800cc64 <malloc>
 8000e70:	4603      	mov	r3, r0
 8000e72:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4913      	ldr	r1, [pc, #76]	; (8000ec4 <Create_Dir+0x78>)
 8000e78:	68b8      	ldr	r0, [r7, #8]
 8000e7a:	f00b ffcf 	bl	800ce1c <siprintf>
    	Send_Uart (buf);
 8000e7e:	68b8      	ldr	r0, [r7, #8]
 8000e80:	f7ff fcb0 	bl	80007e4 <Send_Uart>
    	free(buf);
 8000e84:	68b8      	ldr	r0, [r7, #8]
 8000e86:	f00b fef5 	bl	800cc74 <free>
 8000e8a:	e012      	b.n	8000eb2 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f00b fee9 	bl	800cc64 <malloc>
 8000e92:	4603      	mov	r3, r0
 8000e94:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <Create_Dir+0x74>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	490a      	ldr	r1, [pc, #40]	; (8000ec8 <Create_Dir+0x7c>)
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f00b ffbb 	bl	800ce1c <siprintf>
    	Send_Uart(buf);
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f7ff fc9c 	bl	80007e4 <Send_Uart>
    	free(buf);
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f00b fee1 	bl	800cc74 <free>
    }
    return fresult;
 8000eb2:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <Create_Dir+0x74>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000030c 	.word	0x2000030c
 8000ec4:	0800d8f0 	.word	0x0800d8f0
 8000ec8:	0800d918 	.word	0x0800d918

08000ecc <Check_USB_Details>:

void Check_USB_Details (void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8000ed2:	4a2d      	ldr	r2, [pc, #180]	; (8000f88 <Check_USB_Details+0xbc>)
 8000ed4:	492d      	ldr	r1, [pc, #180]	; (8000f8c <Check_USB_Details+0xc0>)
 8000ed6:	482e      	ldr	r0, [pc, #184]	; (8000f90 <Check_USB_Details+0xc4>)
 8000ed8:	f00b f98b 	bl	800c1f2 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <Check_USB_Details+0xbc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <Check_USB_Details+0xbc>)
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	8952      	ldrh	r2, [r2, #10]
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ef6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000efa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f02:	ee17 2a90 	vmov	r2, s15
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <Check_USB_Details+0xc8>)
 8000f08:	601a      	str	r2, [r3, #0]
    char *buf = malloc(30*sizeof(char));
 8000f0a:	201e      	movs	r0, #30
 8000f0c:	f00b feaa 	bl	800cc64 <malloc>
 8000f10:	4603      	mov	r3, r0
 8000f12:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <Check_USB_Details+0xc8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	491f      	ldr	r1, [pc, #124]	; (8000f98 <Check_USB_Details+0xcc>)
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f00b ff7d 	bl	800ce1c <siprintf>
    Send_Uart(buf);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fc5e 	bl	80007e4 <Send_Uart>
    free(buf);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f00b fea3 	bl	800cc74 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <Check_USB_Details+0xbc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	895b      	ldrh	r3, [r3, #10]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <Check_USB_Details+0xc0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	fb03 f302 	mul.w	r3, r3, r2
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f46:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f52:	ee17 2a90 	vmov	r2, s15
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <Check_USB_Details+0xd0>)
 8000f58:	601a      	str	r2, [r3, #0]
    buf = malloc(30*sizeof(char));
 8000f5a:	201e      	movs	r0, #30
 8000f5c:	f00b fe82 	bl	800cc64 <malloc>
 8000f60:	4603      	mov	r3, r0
 8000f62:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <Check_USB_Details+0xd0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <Check_USB_Details+0xd4>)
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f00b ff55 	bl	800ce1c <siprintf>
    Send_Uart(buf);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fc36 	bl	80007e4 <Send_Uart>
    free(buf);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f00b fe7b 	bl	800cc74 <free>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000300 	.word	0x20000300
 8000f8c:	200002f8 	.word	0x200002f8
 8000f90:	0800d944 	.word	0x0800d944
 8000f94:	20000428 	.word	0x20000428
 8000f98:	0800d948 	.word	0x0800d948
 8000f9c:	20000304 	.word	0x20000304
 8000fa0:	0800d960 	.word	0x0800d960

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fae:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000fb0:	bf00      	nop
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <main+0xac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <main+0x24>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dcf4      	bgt.n	8000fb2 <main+0xe>
  if ( timeout < 0 )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	da01      	bge.n	8000fd2 <main+0x2e>
  {
  Error_Handler();
 8000fce:	f000 f963 	bl	8001298 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f000 fa61 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f83f 	bl	8001058 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <main+0xac>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <main+0xac>)
 8000fe2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <main+0xac>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f002 fabb 	bl	8003574 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ffe:	2100      	movs	r1, #0
 8001000:	2000      	movs	r0, #0
 8001002:	f002 fad1 	bl	80035a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800100c:	bf00      	nop
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <main+0xac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d104      	bne.n	8001024 <main+0x80>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	1e5a      	subs	r2, r3, #1
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	dcf4      	bgt.n	800100e <main+0x6a>
if ( timeout < 0 )
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	da01      	bge.n	800102e <main+0x8a>
{
Error_Handler();
 800102a:	f000 f935 	bl	8001298 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f8dd 	bl	80011ec <MX_GPIO_Init>
  MX_FATFS_Init();
 8001032:	f005 fd8b 	bl	8006b4c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001036:	f00b fafb 	bl	800c630 <MX_USB_HOST_Init>
  MX_UART8_Init();
 800103a:	f000 f88b 	bl	8001154 <MX_UART8_Init>
//			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
//			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
//			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
//			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
//			printf("DHCP IP\r\n");
			HAL_Delay(1000);
 800103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001042:	f000 fabb 	bl	80015bc <HAL_Delay>
		Send_Uart("USB mounted successfully...\n");
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <main+0xb0>)
 8001048:	f7ff fbcc 	bl	80007e4 <Send_Uart>
	{
 800104c:	e7f7      	b.n	800103e <main+0x9a>
 800104e:	bf00      	nop
 8001050:	58024400 	.word	0x58024400
 8001054:	0800d978 	.word	0x0800d978

08001058 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	; 0x78
 800105c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	/*!< Supply configuration update enable */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001064:	2004      	movs	r0, #4
 8001066:	f002 fab3 	bl	80035d0 <HAL_PWREx_ConfigSupply>

	/* The voltage scaling allows optimizing the power consumption when the device is
	   clocked below the maximum system frequency, to update the voltage scaling value
	   regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <SystemClock_Config+0xf4>)
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	4a36      	ldr	r2, [pc, #216]	; (800114c <SystemClock_Config+0xf4>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	62d3      	str	r3, [r2, #44]	; 0x2c
 800107a:	4b34      	ldr	r3, [pc, #208]	; (800114c <SystemClock_Config+0xf4>)
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <SystemClock_Config+0xf8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a31      	ldr	r2, [pc, #196]	; (8001150 <SystemClock_Config+0xf8>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <SystemClock_Config+0xf8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800109c:	bf00      	nop
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <SystemClock_Config+0xf8>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010aa:	d1f8      	bne.n	800109e <SystemClock_Config+0x46>

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ac:	2301      	movs	r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	2302      	movs	r3, #2
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30

	RCC_OscInitStruct.PLL.PLLM = 5;
 80010c6:	2305      	movs	r3, #5
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 160;
 80010ca:	23a0      	movs	r3, #160	; 0xa0
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = 2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80010da:	2304      	movs	r3, #4
 80010dc:	643b      	str	r3, [r7, #64]	; 0x40

	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010de:	2300      	movs	r3, #0
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010e2:	2308      	movs	r3, #8
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 faca 	bl	8003684 <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 80010f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0xaa>
	{
	  Error_Handler();
 80010fe:	f000 f8cb 	bl	8001298 <Error_Handler>
	}

	/* Select PLL as system clock source and configure  bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001102:	233f      	movs	r3, #63	; 0x3f
 8001104:	657b      	str	r3, [r7, #84]	; 0x54
								   RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2303      	movs	r3, #3
 8001108:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800110e:	2308      	movs	r3, #8
 8001110:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001112:	2340      	movs	r3, #64	; 0x40
 8001114:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800111a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111e:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	673b      	str	r3, [r7, #112]	; 0x70
	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001124:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001128:	2104      	movs	r1, #4
 800112a:	4618      	mov	r0, r3
 800112c:	f002 feba 	bl	8003ea4 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if(ret != HAL_OK)
 8001136:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xea>
	{
	  Error_Handler();
 800113e:	f000 f8ab 	bl	8001298 <Error_Handler>

	__HAL_RCC_SYSCFG_CLK_ENABLE() ;

	HAL_EnableCompensationCell();
	*/
}
 8001142:	bf00      	nop
 8001144:	3778      	adds	r7, #120	; 0x78
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	58000400 	.word	0x58000400
 8001150:	58024800 	.word	0x58024800

08001154 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_UART8_Init+0x90>)
 800115a:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <MX_UART8_Init+0x94>)
 800115c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_UART8_Init+0x90>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_UART8_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_UART8_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_UART8_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_UART8_Init+0x90>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_UART8_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_UART8_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_UART8_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_UART8_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_UART8_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800119c:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_UART8_Init+0x90>)
 800119e:	f003 fcb3 	bl	8004b08 <HAL_UART_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80011a8:	f000 f876 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_UART8_Init+0x90>)
 80011b0:	f004 fce3 	bl	8005b7a <HAL_UARTEx_SetTxFifoThreshold>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80011ba:	f000 f86d 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_UART8_Init+0x90>)
 80011c2:	f004 fd18 	bl	8005bf6 <HAL_UARTEx_SetRxFifoThreshold>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f000 f864 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_UART8_Init+0x90>)
 80011d2:	f004 fc99 	bl	8005b08 <HAL_UARTEx_DisableFifoMode>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80011dc:	f000 f85c 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000042c 	.word	0x2000042c
 80011e8:	40007c00 	.word	0x40007c00

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_GPIO_Init+0xa4>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	4a21      	ldr	r2, [pc, #132]	; (8001290 <MX_GPIO_Init+0xa4>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_GPIO_Init+0xa4>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_GPIO_Init+0xa4>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <MX_GPIO_Init+0xa4>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_GPIO_Init+0xa4>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_GPIO_Init+0xa4>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <MX_GPIO_Init+0xa4>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_GPIO_Init+0xa4>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_GPIO_Init+0xa8>)
 8001264:	f000 fc98 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001268:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800126c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_GPIO_Init+0xa8>)
 8001282:	f000 fad9 	bl	8001838 <HAL_GPIO_Init>

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	58024400 	.word	0x58024400
 8001294:	58022000 	.word	0x58022000

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_MspInit+0x30>)
 80012b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012b4:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_MspInit+0x30>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_MspInit+0x30>)
 80012c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	58024400 	.word	0x58024400

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <HAL_UART_MspInit+0x88>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d12e      	bne.n	800135c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_UART_MspInit+0x8c>)
 8001300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001304:	4a18      	ldr	r2, [pc, #96]	; (8001368 <HAL_UART_MspInit+0x8c>)
 8001306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800130a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_UART_MspInit+0x8c>)
 8001310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_UART_MspInit+0x8c>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_UART_MspInit+0x8c>)
 8001324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_UART_MspInit+0x8c>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800133a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800134c:	2308      	movs	r3, #8
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_UART_MspInit+0x90>)
 8001358:	f000 fa6e 	bl	8001838 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40007c00 	.word	0x40007c00
 8001368:	58024400 	.word	0x58024400
 800136c:	58022400 	.word	0x58022400

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f8de 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <OTG_FS_IRQHandler+0x10>)
 80013ca:	f000 fe8d 	bl	80020e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20002904 	.word	0x20002904

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f00b fc02 	bl	800cc10 <__errno>
 800140c:	4602      	mov	r2, r0
 800140e:	230c      	movs	r3, #12
 8001410:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20020000 	.word	0x20020000
 8001438:	00000400 	.word	0x00000400
 800143c:	200000b0 	.word	0x200000b0
 8001440:	20002bd0 	.word	0x20002bd0

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800147c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001448:	f7ff f932 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800144c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800144e:	e003      	b.n	8001458 <LoopCopyDataInit>

08001450 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001452:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001454:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001456:	3104      	adds	r1, #4

08001458 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800145c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800145e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001460:	d3f6      	bcc.n	8001450 <CopyDataInit>
  ldr  r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001464:	e002      	b.n	800146c <LoopFillZerobss>

08001466 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001466:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001468:	f842 3b04 	str.w	r3, [r2], #4

0800146c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800146e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001470:	d3f9      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f00b fbd3 	bl	800cc1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff fd95 	bl	8000fa4 <main>
  bx  lr    
 800147a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001480:	0800dff8 	.word	0x0800dff8
  ldr  r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001488:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800148c:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001490:	20002bcc 	.word	0x20002bcc

08001494 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC3_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149e:	2003      	movs	r0, #3
 80014a0:	f000 f98a 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a4:	f002 feb4 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80014a8:	4601      	mov	r1, r0
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_Init+0x68>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <HAL_Init+0x6c>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	fa21 f303 	lsr.w	r3, r1, r3
 80014c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_Init+0x68>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_Init+0x6c>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_Init+0x70>)
 80014da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014dc:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_Init+0x74>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 f814 	bl	8001510 <HAL_InitTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e002      	b.n	80014f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014f2:	f7ff fed9 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	58024400 	.word	0x58024400
 8001504:	0800db3c 	.word	0x0800db3c
 8001508:	20000004 	.word	0x20000004
 800150c:	20000000 	.word	0x20000000

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_InitTick+0x60>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e021      	b.n	8001568 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_InitTick+0x64>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_InitTick+0x60>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f96f 	bl	800181e <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f000 f939 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_InitTick+0x68>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000000c 	.word	0x2000000c
 8001574:	20000000 	.word	0x20000000
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	200004b8 	.word	0x200004b8

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200004b8 	.word	0x200004b8

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff ffee 	bl	80015a4 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_Delay+0x40>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e2:	bf00      	nop
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000000c 	.word	0x2000000c

08001600 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetREVID+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0c1b      	lsrs	r3, r3, #16
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	5c001000 	.word	0x5c001000

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	05fa0000 	.word	0x05fa0000

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff29 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff40 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff33 	bl	800167c <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa4 	bl	8001774 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001846:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <HAL_GPIO_Init+0x234>)
 8001848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800184a:	e194      	b.n	8001b76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8186 	beq.w	8001b70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d00b      	beq.n	8001884 <HAL_GPIO_Init+0x4c>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d007      	beq.n	8001884 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001878:	2b11      	cmp	r3, #17
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b12      	cmp	r3, #18
 8001882:	d130      	bne.n	80018e6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ba:	2201      	movs	r2, #1
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	f003 0201 	and.w	r2, r3, #1
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0xee>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b12      	cmp	r3, #18
 8001924:	d123      	bne.n	800196e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	69b9      	ldr	r1, [r7, #24]
 800196a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0203 	and.w	r2, r3, #3
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80e0 	beq.w	8001b70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_GPIO_Init+0x238>)
 80019b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019b6:	4a2e      	ldr	r2, [pc, #184]	; (8001a70 <HAL_GPIO_Init+0x238>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_GPIO_Init+0x238>)
 80019c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ce:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <HAL_GPIO_Init+0x23c>)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <HAL_GPIO_Init+0x240>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d052      	beq.n	8001aa0 <HAL_GPIO_Init+0x268>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <HAL_GPIO_Init+0x244>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_GPIO_Init+0x22e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <HAL_GPIO_Init+0x248>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d02b      	beq.n	8001a62 <HAL_GPIO_Init+0x22a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x24c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d025      	beq.n	8001a5e <HAL_GPIO_Init+0x226>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <HAL_GPIO_Init+0x250>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <HAL_GPIO_Init+0x222>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_GPIO_Init+0x254>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_GPIO_Init+0x21e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <HAL_GPIO_Init+0x258>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x21a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_GPIO_Init+0x25c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x216>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_GPIO_Init+0x260>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x212>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_GPIO_Init+0x264>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x20e>
 8001a42:	2309      	movs	r3, #9
 8001a44:	e02d      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a46:	230a      	movs	r3, #10
 8001a48:	e02b      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	e029      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e027      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e025      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e023      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e021      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e01f      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e01d      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e01b      	b.n	8001aa2 <HAL_GPIO_Init+0x26a>
 8001a6a:	bf00      	nop
 8001a6c:	58000080 	.word	0x58000080
 8001a70:	58024400 	.word	0x58024400
 8001a74:	58000400 	.word	0x58000400
 8001a78:	58020000 	.word	0x58020000
 8001a7c:	58020400 	.word	0x58020400
 8001a80:	58020800 	.word	0x58020800
 8001a84:	58020c00 	.word	0x58020c00
 8001a88:	58021000 	.word	0x58021000
 8001a8c:	58021400 	.word	0x58021400
 8001a90:	58021800 	.word	0x58021800
 8001a94:	58021c00 	.word	0x58021c00
 8001a98:	58022000 	.word	0x58022000
 8001a9c:	58022400 	.word	0x58022400
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab2:	4938      	ldr	r1, [pc, #224]	; (8001b94 <HAL_GPIO_Init+0x35c>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f47f ae63 	bne.w	800184c <HAL_GPIO_Init+0x14>
  }
}
 8001b86:	bf00      	nop
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	58000400 	.word	0x58000400

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bcc:	b08f      	sub	sp, #60	; 0x3c
 8001bce:	af0a      	add	r7, sp, #40	; 0x28
 8001bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e054      	b.n	8001c86 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f00a fdac 	bl	800c754 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 f905 	bl	8005e2a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	687e      	ldr	r6, [r7, #4]
 8001c28:	466d      	mov	r5, sp
 8001c2a:	f106 0410 	add.w	r4, r6, #16
 8001c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c3e:	1d33      	adds	r3, r6, #4
 8001c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f004 f87e 	bl	8005d44 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 f8fc 	bl	8005e4c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	687e      	ldr	r6, [r7, #4]
 8001c5c:	466d      	mov	r5, sp
 8001c5e:	f106 0410 	add.w	r4, r6, #16
 8001c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c72:	1d33      	adds	r3, r6, #4
 8001c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c76:	6838      	ldr	r0, [r7, #0]
 8001c78:	f004 fa0e 	bl	8006098 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c8e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001c8e:	b590      	push	{r4, r7, lr}
 8001c90:	b089      	sub	sp, #36	; 0x24
 8001c92:	af04      	add	r7, sp, #16
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	4608      	mov	r0, r1
 8001c98:	4611      	mov	r1, r2
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	70fb      	strb	r3, [r7, #3]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70bb      	strb	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_HC_Init+0x28>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e07f      	b.n	8001db6 <HAL_HCD_HC_Init+0x128>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	333d      	adds	r3, #61	; 0x3d
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	3338      	adds	r3, #56	; 0x38
 8001ce2:	787a      	ldrb	r2, [r7, #1]
 8001ce4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3340      	adds	r3, #64	; 0x40
 8001cf6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001cf8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cfa:	78fa      	ldrb	r2, [r7, #3]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	3339      	adds	r3, #57	; 0x39
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	333f      	adds	r3, #63	; 0x3f
 8001d1e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	78bb      	ldrb	r3, [r7, #2]
 8001d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d2c:	b2d8      	uxtb	r0, r3
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	333a      	adds	r3, #58	; 0x3a
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	da0a      	bge.n	8001d5e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	333b      	adds	r3, #59	; 0x3b
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e009      	b.n	8001d72 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	333b      	adds	r3, #59	; 0x3b
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	333c      	adds	r3, #60	; 0x3c
 8001d82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d86:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	787c      	ldrb	r4, [r7, #1]
 8001d8e:	78ba      	ldrb	r2, [r7, #2]
 8001d90:	78f9      	ldrb	r1, [r7, #3]
 8001d92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4623      	mov	r3, r4
 8001da4:	f004 fab2 	bl	800630c <USB_HC_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}

08001dbe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_HCD_HC_Halt+0x1e>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e00f      	b.n	8001dfc <HAL_HCD_HC_Halt+0x3e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 fcec 	bl	80067ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	4611      	mov	r1, r2
 8001e10:	461a      	mov	r2, r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	70fb      	strb	r3, [r7, #3]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70bb      	strb	r3, [r7, #2]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	333b      	adds	r3, #59	; 0x3b
 8001e2e:	78ba      	ldrb	r2, [r7, #2]
 8001e30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	333f      	adds	r3, #63	; 0x3f
 8001e42:	787a      	ldrb	r2, [r7, #1]
 8001e44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e46:	7c3b      	ldrb	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d114      	bne.n	8001e76 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3342      	adds	r3, #66	; 0x42
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	333d      	adds	r3, #61	; 0x3d
 8001e70:	7f3a      	ldrb	r2, [r7, #28]
 8001e72:	701a      	strb	r2, [r3, #0]
 8001e74:	e009      	b.n	8001e8a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	3342      	adds	r3, #66	; 0x42
 8001e86:	2202      	movs	r2, #2
 8001e88:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001e8a:	787b      	ldrb	r3, [r7, #1]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	f200 80d6 	bhi.w	800203e <HAL_HCD_HC_SubmitRequest+0x23a>
 8001e92:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001ea9 	.word	0x08001ea9
 8001e9c:	08002029 	.word	0x08002029
 8001ea0:	08001f15 	.word	0x08001f15
 8001ea4:	08001f9f 	.word	0x08001f9f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ea8:	7c3b      	ldrb	r3, [r7, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	f040 80c9 	bne.w	8002042 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001eb0:	78bb      	ldrb	r3, [r7, #2]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 80c5 	bne.w	8002042 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001eb8:	8b3b      	ldrh	r3, [r7, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	440b      	add	r3, r1
 8001ecc:	3351      	adds	r3, #81	; 0x51
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	3351      	adds	r3, #81	; 0x51
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3342      	adds	r3, #66	; 0x42
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001efc:	e0a1      	b.n	8002042 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3342      	adds	r3, #66	; 0x42
 8001f0e:	2202      	movs	r2, #2
 8001f10:	701a      	strb	r2, [r3, #0]
      break;
 8001f12:	e096      	b.n	8002042 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f14:	78bb      	ldrb	r3, [r7, #2]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d120      	bne.n	8001f5c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3351      	adds	r3, #81	; 0x51
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3342      	adds	r3, #66	; 0x42
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f44:	e07e      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3342      	adds	r3, #66	; 0x42
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
      break;
 8001f5a:	e073      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	3350      	adds	r3, #80	; 0x50
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10a      	bne.n	8001f88 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3342      	adds	r3, #66	; 0x42
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
      break;
 8001f86:	e05d      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3342      	adds	r3, #66	; 0x42
 8001f98:	2202      	movs	r2, #2
 8001f9a:	701a      	strb	r2, [r3, #0]
      break;
 8001f9c:	e052      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f9e:	78bb      	ldrb	r3, [r7, #2]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d120      	bne.n	8001fe6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3351      	adds	r3, #81	; 0x51
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3342      	adds	r3, #66	; 0x42
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fce:	e039      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3342      	adds	r3, #66	; 0x42
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	701a      	strb	r2, [r3, #0]
      break;
 8001fe4:	e02e      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3350      	adds	r3, #80	; 0x50
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10a      	bne.n	8002012 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	3342      	adds	r3, #66	; 0x42
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
      break;
 8002010:	e018      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	3342      	adds	r3, #66	; 0x42
 8002022:	2202      	movs	r2, #2
 8002024:	701a      	strb	r2, [r3, #0]
      break;
 8002026:	e00d      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	3342      	adds	r3, #66	; 0x42
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
      break;
 800203c:	e002      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800203e:	bf00      	nop
 8002040:	e000      	b.n	8002044 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002042:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	3344      	adds	r3, #68	; 0x44
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	8b39      	ldrh	r1, [r7, #24]
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4403      	add	r3, r0
 8002068:	3348      	adds	r3, #72	; 0x48
 800206a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	335c      	adds	r3, #92	; 0x5c
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	334c      	adds	r3, #76	; 0x4c
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	3339      	adds	r3, #57	; 0x39
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	335d      	adds	r3, #93	; 0x5d
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	3338      	adds	r3, #56	; 0x38
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	18d1      	adds	r1, r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	f004 fa22 	bl	8006520 <USB_HC_StartXfer>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop

080020e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 ff87 	bl	8006012 <USB_GetMode>
 8002104:	4603      	mov	r3, r0
 8002106:	2b01      	cmp	r3, #1
 8002108:	f040 80ef 	bne.w	80022ea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 ff6b 	bl	8005fec <USB_ReadInterrupts>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80e5 	beq.w	80022e8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f003 ff62 	bl	8005fec <USB_ReadInterrupts>
 8002128:	4603      	mov	r3, r0
 800212a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002132:	d104      	bne.n	800213e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800213c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 ff52 	bl	8005fec <USB_ReadInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002152:	d104      	bne.n	800215e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800215c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 ff42 	bl	8005fec <USB_ReadInterrupts>
 8002168:	4603      	mov	r3, r0
 800216a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800216e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002172:	d104      	bne.n	800217e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800217c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f003 ff32 	bl	8005fec <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b02      	cmp	r3, #2
 8002190:	d103      	bne.n	800219a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2202      	movs	r2, #2
 8002198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 ff24 	bl	8005fec <USB_ReadInterrupts>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ae:	d115      	bne.n	80021dc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d108      	bne.n	80021dc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f00a fb30 	bl	800c830 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f814 	bl	8006204 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 ff03 	bl	8005fec <USB_ReadInterrupts>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f0:	d102      	bne.n	80021f8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f001 f94a 	bl	800348c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fef5 	bl	8005fec <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b08      	cmp	r3, #8
 800220a:	d106      	bne.n	800221a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f00a faf3 	bl	800c7f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2208      	movs	r2, #8
 8002218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fee4 	bl	8005fec <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800222e:	d138      	bne.n	80022a2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f004 fab7 	bl	80067a8 <USB_HC_ReadInterrupt>
 800223a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e025      	b.n	800228e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d018      	beq.n	8002288 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800226c:	d106      	bne.n	800227c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4619      	mov	r1, r3
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f8b3 	bl	80023e0 <HCD_HC_IN_IRQHandler>
 800227a:	e005      	b.n	8002288 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fce1 	bl	8002c4a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	d3d4      	bcc.n	8002242 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fea0 	bl	8005fec <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d101      	bne.n	80022ba <HAL_HCD_IRQHandler+0x1d2>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_HCD_IRQHandler+0x1d4>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d014      	beq.n	80022ea <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0210 	bic.w	r2, r2, #16
 80022ce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f001 f82f 	bl	8003334 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0210 	orr.w	r2, r2, #16
 80022e4:	619a      	str	r2, [r3, #24]
 80022e6:	e000      	b.n	80022ea <HAL_HCD_IRQHandler+0x202>
      return;
 80022e8:	bf00      	nop
    }
  }
}
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_HCD_Start+0x16>
 8002302:	2302      	movs	r3, #2
 8002304:	e013      	b.n	800232e <HAL_HCD_Start+0x3e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fd78 	bl	8005e08 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f003 ffaa 	bl	8006278 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_HCD_Stop+0x16>
 8002348:	2302      	movs	r3, #2
 800234a:	e00d      	b.n	8002368 <HAL_HCD_Stop+0x32>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f004 fb71 	bl	8006a40 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	335c      	adds	r3, #92	; 0x5c
 800238c:	781b      	ldrb	r3, [r3, #0]
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	334c      	adds	r3, #76	; 0x4c
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 ff8a 	bl	80062ea <USB_GetCurrentFrame>
 80023d6:	4603      	mov	r3, r0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4413      	add	r3, r2
 8002402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b04      	cmp	r3, #4
 800240e:	d119      	bne.n	8002444 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	461a      	mov	r2, r3
 800241e:	2304      	movs	r3, #4
 8002420:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	0151      	lsls	r1, r2, #5
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	440a      	add	r2, r1
 8002438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	60d3      	str	r3, [r2, #12]
 8002442:	e0ce      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245a:	d12c      	bne.n	80024b6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	461a      	mov	r2, r3
 800246a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800246e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	335d      	adds	r3, #93	; 0x5d
 8002480:	2207      	movs	r2, #7
 8002482:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	0151      	lsls	r1, r2, #5
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	440a      	add	r2, r1
 800249a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 f98b 	bl	80067ca <USB_HC_Halt>
 80024b4:	e095      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d109      	bne.n	80024e0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	2320      	movs	r3, #32
 80024dc:	6093      	str	r3, [r2, #8]
 80024de:	e080      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d134      	bne.n	8002560 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	0151      	lsls	r1, r2, #5
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	440a      	add	r2, r1
 800250c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	335d      	adds	r3, #93	; 0x5d
 8002526:	2205      	movs	r2, #5
 8002528:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	2310      	movs	r3, #16
 800253a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	461a      	mov	r2, r3
 800254a:	2308      	movs	r3, #8
 800254c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f004 f936 	bl	80067ca <USB_HC_Halt>
 800255e:	e040      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002576:	d134      	bne.n	80025e2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	0151      	lsls	r1, r2, #5
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	440a      	add	r2, r1
 800258e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002592:	f043 0302 	orr.w	r3, r3, #2
 8002596:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f004 f911 	bl	80067ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	2310      	movs	r3, #16
 80025b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	440b      	add	r3, r1
 80025c8:	335d      	adds	r3, #93	; 0x5d
 80025ca:	2208      	movs	r2, #8
 80025cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	461a      	mov	r2, r3
 80025dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f8:	d122      	bne.n	8002640 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	0151      	lsls	r1, r2, #5
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	440a      	add	r2, r1
 8002610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f004 f8d0 	bl	80067ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	461a      	mov	r2, r3
 8002638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800263e:	e300      	b.n	8002c42 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 80fd 	bne.w	8002852 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01b      	beq.n	8002698 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	3348      	adds	r3, #72	; 0x48
 8002670:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0159      	lsls	r1, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	440b      	add	r3, r1
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002684:	1ad1      	subs	r1, r2, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4403      	add	r3, r0
 8002694:	334c      	adds	r3, #76	; 0x4c
 8002696:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	440b      	add	r3, r1
 80026a6:	335d      	adds	r3, #93	; 0x5d
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	3358      	adds	r3, #88	; 0x58
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	461a      	mov	r2, r3
 80026ce:	2301      	movs	r3, #1
 80026d0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	333f      	adds	r3, #63	; 0x3f
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	333f      	adds	r3, #63	; 0x3f
 80026f8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d121      	bne.n	8002742 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	0151      	lsls	r1, r2, #5
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	440a      	add	r2, r1
 8002714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f004 f84e 	bl	80067ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	2310      	movs	r3, #16
 800273e:	6093      	str	r3, [r2, #8]
 8002740:	e070      	b.n	8002824 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	333f      	adds	r3, #63	; 0x3f
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d12a      	bne.n	80027ae <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	440a      	add	r2, r1
 800276e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002772:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002776:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	335c      	adds	r3, #92	; 0x5c
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	b2d8      	uxtb	r0, r3
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	335c      	adds	r3, #92	; 0x5c
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	4601      	mov	r1, r0
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f00a f850 	bl	800c84c <HAL_HCD_HC_NotifyURBChange_Callback>
 80027ac:	e03a      	b.n	8002824 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	333f      	adds	r3, #63	; 0x3f
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d12f      	bne.n	8002824 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	335c      	adds	r3, #92	; 0x5c
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	3350      	adds	r3, #80	; 0x50
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2d8      	uxtb	r0, r3
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3350      	adds	r3, #80	; 0x50
 8002800:	4602      	mov	r2, r0
 8002802:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	b2d8      	uxtb	r0, r3
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	4601      	mov	r1, r0
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f00a f814 	bl	800c84c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	3350      	adds	r3, #80	; 0x50
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2d8      	uxtb	r0, r3
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	3350      	adds	r3, #80	; 0x50
 800284c:	4602      	mov	r2, r0
 800284e:	701a      	strb	r2, [r3, #0]
}
 8002850:	e1f7      	b.n	8002c42 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b02      	cmp	r3, #2
 8002866:	f040 811a 	bne.w	8002a9e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	0151      	lsls	r1, r2, #5
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	440a      	add	r2, r1
 8002880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002884:	f023 0302 	bic.w	r3, r3, #2
 8002888:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	335d      	adds	r3, #93	; 0x5d
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10a      	bne.n	80028b6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	335c      	adds	r3, #92	; 0x5c
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e0d9      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	335d      	adds	r3, #93	; 0x5d
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d10a      	bne.n	80028e2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	335c      	adds	r3, #92	; 0x5c
 80028dc:	2205      	movs	r2, #5
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e0c3      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	335d      	adds	r3, #93	; 0x5d
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d00a      	beq.n	800290e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	335d      	adds	r3, #93	; 0x5d
 8002908:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800290a:	2b08      	cmp	r3, #8
 800290c:	d156      	bne.n	80029bc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	3358      	adds	r3, #88	; 0x58
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4403      	add	r3, r0
 8002930:	3358      	adds	r3, #88	; 0x58
 8002932:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	3358      	adds	r3, #88	; 0x58
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d914      	bls.n	8002974 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	3358      	adds	r3, #88	; 0x58
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	440b      	add	r3, r1
 800296c:	335c      	adds	r3, #92	; 0x5c
 800296e:	2204      	movs	r2, #4
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e009      	b.n	8002988 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	335c      	adds	r3, #92	; 0x5c
 8002984:	2202      	movs	r2, #2
 8002986:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800299e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029a6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	461a      	mov	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e056      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	335d      	adds	r3, #93	; 0x5d
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d123      	bne.n	8002a1a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	335c      	adds	r3, #92	; 0x5c
 80029e2:	2202      	movs	r2, #2
 80029e4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029fc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a04:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	e027      	b.n	8002a6a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	335d      	adds	r3, #93	; 0x5d
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b07      	cmp	r3, #7
 8002a2e:	d11c      	bne.n	8002a6a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3358      	adds	r3, #88	; 0x58
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	1c59      	adds	r1, r3, #1
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4403      	add	r3, r0
 8002a52:	3358      	adds	r3, #88	; 0x58
 8002a54:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	335c      	adds	r3, #92	; 0x5c
 8002a66:	2204      	movs	r2, #4
 8002a68:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	461a      	mov	r2, r3
 8002a78:	2302      	movs	r3, #2
 8002a7a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	b2d8      	uxtb	r0, r3
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	335c      	adds	r3, #92	; 0x5c
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	4601      	mov	r1, r0
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f009 fed8 	bl	800c84c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a9c:	e0d1      	b.n	8002c42 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d13e      	bne.n	8002b32 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	0151      	lsls	r1, r2, #5
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	440a      	add	r2, r1
 8002aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3358      	adds	r3, #88	; 0x58
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	1c59      	adds	r1, r3, #1
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4403      	add	r3, r0
 8002af6:	3358      	adds	r3, #88	; 0x58
 8002af8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	335d      	adds	r3, #93	; 0x5d
 8002b0a:	2206      	movs	r2, #6
 8002b0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fe56 	bl	80067ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	6093      	str	r3, [r2, #8]
}
 8002b30:	e087      	b.n	8002c42 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d17c      	bne.n	8002c42 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	333f      	adds	r3, #63	; 0x3f
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d122      	bne.n	8002ba4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3358      	adds	r3, #88	; 0x58
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	0151      	lsls	r1, r2, #5
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	440a      	add	r2, r1
 8002b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 fe14 	bl	80067ca <USB_HC_Halt>
 8002ba2:	e045      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	333f      	adds	r3, #63	; 0x3f
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	333f      	adds	r3, #63	; 0x3f
 8002bca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d12f      	bne.n	8002c30 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	3358      	adds	r3, #88	; 0x58
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d121      	bne.n	8002c30 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	335d      	adds	r3, #93	; 0x5d
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	0151      	lsls	r1, r2, #5
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	440a      	add	r2, r1
 8002c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c1a:	f043 0302 	orr.w	r3, r3, #2
 8002c1e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 fdcd 	bl	80067ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2310      	movs	r3, #16
 8002c40:	6093      	str	r3, [r2, #8]
}
 8002c42:	bf00      	nop
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d119      	bne.n	8002cae <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	461a      	mov	r2, r3
 8002c88:	2304      	movs	r3, #4
 8002c8a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	0151      	lsls	r1, r2, #5
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	440a      	add	r2, r1
 8002ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca6:	f043 0302 	orr.w	r3, r3, #2
 8002caa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002cac:	e33e      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d141      	bne.n	8002d48 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	333d      	adds	r3, #61	; 0x3d
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	f040 831f 	bne.w	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	333d      	adds	r3, #61	; 0x3d
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	335c      	adds	r3, #92	; 0x5c
 8002d12:	2202      	movs	r2, #2
 8002d14:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	0151      	lsls	r1, r2, #5
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	440a      	add	r2, r1
 8002d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fd42 	bl	80067ca <USB_HC_Halt>
}
 8002d46:	e2f1      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d13f      	bne.n	8002dde <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	335d      	adds	r3, #93	; 0x5d
 8002d6e:	2204      	movs	r2, #4
 8002d70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	333d      	adds	r3, #61	; 0x3d
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	3358      	adds	r3, #88	; 0x58
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	0151      	lsls	r1, r2, #5
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	440a      	add	r2, r1
 8002db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 fd00 	bl	80067ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2340      	movs	r3, #64	; 0x40
 8002dda:	6093      	str	r3, [r2, #8]
}
 8002ddc:	e2a6      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df4:	d122      	bne.n	8002e3c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	0151      	lsls	r1, r2, #5
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 fcd2 	bl	80067ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	461a      	mov	r2, r3
 8002e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e38:	6093      	str	r3, [r2, #8]
}
 8002e3a:	e277      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d135      	bne.n	8002ebe <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	3358      	adds	r3, #88	; 0x58
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	0151      	lsls	r1, r2, #5
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	440a      	add	r2, r1
 8002e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fc9a 	bl	80067ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	335d      	adds	r3, #93	; 0x5d
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
}
 8002ebc:	e236      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d12b      	bne.n	8002f2c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	0151      	lsls	r1, r2, #5
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	440a      	add	r2, r1
 8002efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 fc5a 	bl	80067ca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	335d      	adds	r3, #93	; 0x5d
 8002f26:	2205      	movs	r2, #5
 8002f28:	701a      	strb	r2, [r3, #0]
}
 8002f2a:	e1ff      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d155      	bne.n	8002fee <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	3358      	adds	r3, #88	; 0x58
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	335d      	adds	r3, #93	; 0x5d
 8002f66:	2203      	movs	r2, #3
 8002f68:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	333d      	adds	r3, #61	; 0x3d
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d114      	bne.n	8002faa <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	333c      	adds	r3, #60	; 0x3c
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	333d      	adds	r3, #61	; 0x3d
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	0151      	lsls	r1, r2, #5
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	440a      	add	r2, r1
 8002fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fbf8 	bl	80067ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2310      	movs	r3, #16
 8002fea:	6093      	str	r3, [r2, #8]
}
 8002fec:	e19e      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d12b      	bne.n	800305c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	0151      	lsls	r1, r2, #5
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	440a      	add	r2, r1
 800301a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fbcb 	bl	80067ca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	335d      	adds	r3, #93	; 0x5d
 8003044:	2206      	movs	r2, #6
 8003046:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	6093      	str	r3, [r2, #8]
}
 800305a:	e167      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	d135      	bne.n	80030e0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	0151      	lsls	r1, r2, #5
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	440a      	add	r2, r1
 800308a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800308e:	f043 0302 	orr.w	r3, r3, #2
 8003092:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 fb93 	bl	80067ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	461a      	mov	r2, r3
 80030b2:	2310      	movs	r3, #16
 80030b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	461a      	mov	r2, r3
 80030c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	335d      	adds	r3, #93	; 0x5d
 80030da:	2208      	movs	r2, #8
 80030dc:	701a      	strb	r2, [r3, #0]
}
 80030de:	e125      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	f040 811a 	bne.w	800332c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	0151      	lsls	r1, r2, #5
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	440a      	add	r2, r1
 800310e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003112:	f023 0302 	bic.w	r3, r3, #2
 8003116:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	335d      	adds	r3, #93	; 0x5d
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d137      	bne.n	800319e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	440b      	add	r3, r1
 800313c:	335c      	adds	r3, #92	; 0x5c
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	333f      	adds	r3, #63	; 0x3f
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d00b      	beq.n	8003170 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	333f      	adds	r3, #63	; 0x3f
 8003168:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800316a:	2b03      	cmp	r3, #3
 800316c:	f040 80c5 	bne.w	80032fa <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	440b      	add	r3, r1
 800317e:	3351      	adds	r3, #81	; 0x51
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	f083 0301 	eor.w	r3, r3, #1
 8003186:	b2d8      	uxtb	r0, r3
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	3351      	adds	r3, #81	; 0x51
 8003198:	4602      	mov	r2, r0
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e0ad      	b.n	80032fa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	335d      	adds	r3, #93	; 0x5d
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d10a      	bne.n	80031ca <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	335c      	adds	r3, #92	; 0x5c
 80031c4:	2202      	movs	r2, #2
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e097      	b.n	80032fa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	335d      	adds	r3, #93	; 0x5d
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d10a      	bne.n	80031f6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	335c      	adds	r3, #92	; 0x5c
 80031f0:	2202      	movs	r2, #2
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e081      	b.n	80032fa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	440b      	add	r3, r1
 8003204:	335d      	adds	r3, #93	; 0x5d
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b05      	cmp	r3, #5
 800320a:	d10a      	bne.n	8003222 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	440b      	add	r3, r1
 800321a:	335c      	adds	r3, #92	; 0x5c
 800321c:	2205      	movs	r2, #5
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e06b      	b.n	80032fa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	335d      	adds	r3, #93	; 0x5d
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b06      	cmp	r3, #6
 8003236:	d00a      	beq.n	800324e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	440b      	add	r3, r1
 8003246:	335d      	adds	r3, #93	; 0x5d
 8003248:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800324a:	2b08      	cmp	r3, #8
 800324c:	d155      	bne.n	80032fa <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	3358      	adds	r3, #88	; 0x58
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	1c59      	adds	r1, r3, #1
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4403      	add	r3, r0
 8003270:	3358      	adds	r3, #88	; 0x58
 8003272:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	3358      	adds	r3, #88	; 0x58
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d914      	bls.n	80032b4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	3358      	adds	r3, #88	; 0x58
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	440b      	add	r3, r1
 80032ac:	335c      	adds	r3, #92	; 0x5c
 80032ae:	2204      	movs	r2, #4
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e009      	b.n	80032c8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	335c      	adds	r3, #92	; 0x5c
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4413      	add	r3, r2
 8003302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003306:	461a      	mov	r2, r3
 8003308:	2302      	movs	r3, #2
 800330a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	b2d8      	uxtb	r0, r3
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	335c      	adds	r3, #92	; 0x5c
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	4601      	mov	r1, r0
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f009 fa90 	bl	800c84c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800332c:	bf00      	nop
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	0c5b      	lsrs	r3, r3, #17
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003368:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d003      	beq.n	8003378 <HCD_RXQLVL_IRQHandler+0x44>
 8003370:	2b05      	cmp	r3, #5
 8003372:	f000 8082 	beq.w	800347a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003376:	e083      	b.n	8003480 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d07f      	beq.n	800347e <HCD_RXQLVL_IRQHandler+0x14a>
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	440b      	add	r3, r1
 800338c:	3344      	adds	r3, #68	; 0x44
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d074      	beq.n	800347e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	440b      	add	r3, r1
 80033a6:	3344      	adds	r3, #68	; 0x44
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	b292      	uxth	r2, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f002 fdf3 	bl	8005f9a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	440b      	add	r3, r1
 80033c2:	3344      	adds	r3, #68	; 0x44
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	18d1      	adds	r1, r2, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4403      	add	r3, r0
 80033d8:	3344      	adds	r3, #68	; 0x44
 80033da:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	334c      	adds	r3, #76	; 0x4c
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	18d1      	adds	r1, r2, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4403      	add	r3, r0
 8003400:	334c      	adds	r3, #76	; 0x4c
 8003402:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HCD_RXQLVL_IRQHandler+0x154>)
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d031      	beq.n	800347e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003430:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003438:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	3350      	adds	r3, #80	; 0x50
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2d8      	uxtb	r0, r3
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	3350      	adds	r3, #80	; 0x50
 8003474:	4602      	mov	r2, r0
 8003476:	701a      	strb	r2, [r3, #0]
      break;
 8003478:	e001      	b.n	800347e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800347e:	bf00      	nop
  }
}
 8003480:	bf00      	nop
 8003482:	3728      	adds	r7, #40	; 0x28
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	1ff80000 	.word	0x1ff80000

0800348c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80034b8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d10b      	bne.n	80034dc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f009 f9a0 	bl	800c814 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d132      	bne.n	800354c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f043 0308 	orr.w	r3, r3, #8
 80034ec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d126      	bne.n	8003546 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d113      	bne.n	8003528 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800350a:	d106      	bne.n	800351a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2102      	movs	r1, #2
 8003512:	4618      	mov	r0, r3
 8003514:	f002 fe76 	bl	8006204 <USB_InitFSLSPClkSel>
 8003518:	e011      	b.n	800353e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2101      	movs	r1, #1
 8003520:	4618      	mov	r0, r3
 8003522:	f002 fe6f 	bl	8006204 <USB_InitFSLSPClkSel>
 8003526:	e00a      	b.n	800353e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d106      	bne.n	800353e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003536:	461a      	mov	r2, r3
 8003538:	f64e 2360 	movw	r3, #60000	; 0xea60
 800353c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f009 f992 	bl	800c868 <HAL_HCD_PortEnabled_Callback>
 8003544:	e002      	b.n	800354c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f009 f99c 	bl	800c884 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d103      	bne.n	800355e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f043 0320 	orr.w	r3, r3, #32
 800355c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003564:	461a      	mov	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6013      	str	r3, [r2, #0]
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800357c:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <HAL_HSEM_FastTake+0x2c>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3320      	adds	r3, #32
 8003582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003586:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <HAL_HSEM_FastTake+0x30>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	e000      	b.n	8003592 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	58026400 	.word	0x58026400
 80035a4:	80000300 	.word	0x80000300

080035a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80035b2:	4906      	ldr	r1, [pc, #24]	; (80035cc <HAL_HSEM_Release+0x24>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	58026400 	.word	0x58026400

080035d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	d00a      	beq.n	80035fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035e4:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e040      	b.n	8003678 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e03e      	b.n	8003678 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003602:	491f      	ldr	r1, [pc, #124]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4313      	orrs	r3, r2
 8003608:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800360a:	f7fd ffcb 	bl	80015a4 <HAL_GetTick>
 800360e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003610:	e009      	b.n	8003626 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003612:	f7fd ffc7 	bl	80015a4 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003620:	d901      	bls.n	8003626 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e028      	b.n	8003678 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d1ee      	bne.n	8003612 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b1e      	cmp	r3, #30
 8003638:	d008      	beq.n	800364c <HAL_PWREx_ConfigSupply+0x7c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b2e      	cmp	r3, #46	; 0x2e
 800363e:	d005      	beq.n	800364c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b1d      	cmp	r3, #29
 8003644:	d002      	beq.n	800364c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b2d      	cmp	r3, #45	; 0x2d
 800364a:	d114      	bne.n	8003676 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800364c:	f7fd ffaa 	bl	80015a4 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003652:	e009      	b.n	8003668 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003654:	f7fd ffa6 	bl	80015a4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003662:	d901      	bls.n	8003668 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_PWREx_ConfigSupply+0xb0>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d1ee      	bne.n	8003654 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	58024800 	.word	0x58024800

08003684 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	; 0x30
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e3ff      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8087 	beq.w	80037b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a4:	4b99      	ldr	r3, [pc, #612]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ae:	4b97      	ldr	r3, [pc, #604]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d007      	beq.n	80036ca <HAL_RCC_OscConfig+0x46>
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	2b18      	cmp	r3, #24
 80036be:	d110      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5e>
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d10b      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ca:	4b90      	ldr	r3, [pc, #576]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d06c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x12c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d168      	bne.n	80037b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e3d9      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x76>
 80036ec:	4b87      	ldr	r3, [pc, #540]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a86      	ldr	r2, [pc, #536]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80036f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e02e      	b.n	8003758 <HAL_RCC_OscConfig+0xd4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x98>
 8003702:	4b82      	ldr	r3, [pc, #520]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a81      	ldr	r2, [pc, #516]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b7f      	ldr	r3, [pc, #508]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7e      	ldr	r2, [pc, #504]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e01d      	b.n	8003758 <HAL_RCC_OscConfig+0xd4>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0xbc>
 8003726:	4b79      	ldr	r3, [pc, #484]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a78      	ldr	r2, [pc, #480]	; (800390c <HAL_RCC_OscConfig+0x288>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b76      	ldr	r3, [pc, #472]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a75      	ldr	r2, [pc, #468]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0xd4>
 8003740:	4b72      	ldr	r3, [pc, #456]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a71      	ldr	r2, [pc, #452]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b6f      	ldr	r3, [pc, #444]	; (800390c <HAL_RCC_OscConfig+0x288>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a6e      	ldr	r2, [pc, #440]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd ff20 	bl	80015a4 <HAL_GetTick>
 8003764:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003768:	f7fd ff1c 	bl	80015a4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e38d      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800377a:	4b64      	ldr	r3, [pc, #400]	; (800390c <HAL_RCC_OscConfig+0x288>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xe4>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fd ff0c 	bl	80015a4 <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003790:	f7fd ff08 	bl	80015a4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e379      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037a2:	4b5a      	ldr	r3, [pc, #360]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x10c>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80ae 	beq.w	800391c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c0:	4b52      	ldr	r3, [pc, #328]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037ca:	4b50      	ldr	r3, [pc, #320]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_RCC_OscConfig+0x162>
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2b18      	cmp	r3, #24
 80037da:	d13a      	bne.n	8003852 <HAL_RCC_OscConfig+0x1ce>
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d135      	bne.n	8003852 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e6:	4b49      	ldr	r3, [pc, #292]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_RCC_OscConfig+0x17a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e34b      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	f7fd feff 	bl	8001600 <HAL_GetREVID>
 8003802:	4602      	mov	r2, r0
 8003804:	f241 0303 	movw	r3, #4099	; 0x1003
 8003808:	429a      	cmp	r2, r3
 800380a:	d817      	bhi.n	800383c <HAL_RCC_OscConfig+0x1b8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d108      	bne.n	8003826 <HAL_RCC_OscConfig+0x1a2>
 8003814:	4b3d      	ldr	r3, [pc, #244]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800381c:	4a3b      	ldr	r2, [pc, #236]	; (800390c <HAL_RCC_OscConfig+0x288>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003822:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003824:	e07a      	b.n	800391c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b39      	ldr	r3, [pc, #228]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	031b      	lsls	r3, r3, #12
 8003834:	4935      	ldr	r1, [pc, #212]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383a:	e06f      	b.n	800391c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	4b33      	ldr	r3, [pc, #204]	; (800390c <HAL_RCC_OscConfig+0x288>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	4930      	ldr	r1, [pc, #192]	; (800390c <HAL_RCC_OscConfig+0x288>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003850:	e064      	b.n	800391c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d045      	beq.n	80038e6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800385a:	4b2c      	ldr	r3, [pc, #176]	; (800390c <HAL_RCC_OscConfig+0x288>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0219 	bic.w	r2, r3, #25
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	4929      	ldr	r1, [pc, #164]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fd fe9a 	bl	80015a4 <HAL_GetTick>
 8003870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003874:	f7fd fe96 	bl	80015a4 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e307      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003886:	4b21      	ldr	r3, [pc, #132]	; (800390c <HAL_RCC_OscConfig+0x288>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003892:	f7fd feb5 	bl	8001600 <HAL_GetREVID>
 8003896:	4602      	mov	r2, r0
 8003898:	f241 0303 	movw	r3, #4099	; 0x1003
 800389c:	429a      	cmp	r2, r3
 800389e:	d817      	bhi.n	80038d0 <HAL_RCC_OscConfig+0x24c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d108      	bne.n	80038ba <HAL_RCC_OscConfig+0x236>
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038b0:	4a16      	ldr	r2, [pc, #88]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b6:	6053      	str	r3, [r2, #4]
 80038b8:	e030      	b.n	800391c <HAL_RCC_OscConfig+0x298>
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	031b      	lsls	r3, r3, #12
 80038c8:	4910      	ldr	r1, [pc, #64]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
 80038ce:	e025      	b.n	800391c <HAL_RCC_OscConfig+0x298>
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	490b      	ldr	r1, [pc, #44]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
 80038e4:	e01a      	b.n	800391c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a08      	ldr	r2, [pc, #32]	; (800390c <HAL_RCC_OscConfig+0x288>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fd fe57 	bl	80015a4 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fa:	f7fd fe53 	bl	80015a4 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d903      	bls.n	8003910 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e2c4      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
 800390c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003910:	4ba4      	ldr	r3, [pc, #656]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ee      	bne.n	80038fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a9 	beq.w	8003a7c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392a:	4b9e      	ldr	r3, [pc, #632]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003932:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003934:	4b9b      	ldr	r3, [pc, #620]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d007      	beq.n	8003950 <HAL_RCC_OscConfig+0x2cc>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b18      	cmp	r3, #24
 8003944:	d13a      	bne.n	80039bc <HAL_RCC_OscConfig+0x338>
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d135      	bne.n	80039bc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003950:	4b94      	ldr	r3, [pc, #592]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_OscConfig+0x2e4>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e296      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003968:	f7fd fe4a 	bl	8001600 <HAL_GetREVID>
 800396c:	4602      	mov	r2, r0
 800396e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003972:	429a      	cmp	r2, r3
 8003974:	d817      	bhi.n	80039a6 <HAL_RCC_OscConfig+0x322>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	2b20      	cmp	r3, #32
 800397c:	d108      	bne.n	8003990 <HAL_RCC_OscConfig+0x30c>
 800397e:	4b89      	ldr	r3, [pc, #548]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003986:	4a87      	ldr	r2, [pc, #540]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800398c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800398e:	e075      	b.n	8003a7c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003990:	4b84      	ldr	r3, [pc, #528]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	069b      	lsls	r3, r3, #26
 800399e:	4981      	ldr	r1, [pc, #516]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039a4:	e06a      	b.n	8003a7c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039a6:	4b7f      	ldr	r3, [pc, #508]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	061b      	lsls	r3, r3, #24
 80039b4:	497b      	ldr	r1, [pc, #492]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ba:	e05f      	b.n	8003a7c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d042      	beq.n	8003a4a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039c4:	4b77      	ldr	r3, [pc, #476]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a76      	ldr	r2, [pc, #472]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 80039ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd fde8 	bl	80015a4 <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039d8:	f7fd fde4 	bl	80015a4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e255      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ea:	4b6e      	ldr	r3, [pc, #440]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039f6:	f7fd fe03 	bl	8001600 <HAL_GetREVID>
 80039fa:	4602      	mov	r2, r0
 80039fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d817      	bhi.n	8003a34 <HAL_RCC_OscConfig+0x3b0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d108      	bne.n	8003a1e <HAL_RCC_OscConfig+0x39a>
 8003a0c:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a14:	4a63      	ldr	r2, [pc, #396]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a1a:	6053      	str	r3, [r2, #4]
 8003a1c:	e02e      	b.n	8003a7c <HAL_RCC_OscConfig+0x3f8>
 8003a1e:	4b61      	ldr	r3, [pc, #388]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	069b      	lsls	r3, r3, #26
 8003a2c:	495d      	ldr	r1, [pc, #372]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
 8003a32:	e023      	b.n	8003a7c <HAL_RCC_OscConfig+0x3f8>
 8003a34:	4b5b      	ldr	r3, [pc, #364]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	4958      	ldr	r1, [pc, #352]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60cb      	str	r3, [r1, #12]
 8003a48:	e018      	b.n	8003a7c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a4a:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a55      	ldr	r2, [pc, #340]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fd fda5 	bl	80015a4 <HAL_GetTick>
 8003a5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a5e:	f7fd fda1 	bl	80015a4 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e212      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a70:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d036      	beq.n	8003af6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d019      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a90:	4b44      	ldr	r3, [pc, #272]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a94:	4a43      	ldr	r2, [pc, #268]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fd82 	bl	80015a4 <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fd fd7e 	bl	80015a4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e1ef      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x420>
 8003ac2:	e018      	b.n	8003af6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac4:	4b37      	ldr	r3, [pc, #220]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac8:	4a36      	ldr	r2, [pc, #216]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fd fd68 	bl	80015a4 <HAL_GetTick>
 8003ad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fd fd64 	bl	80015a4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1d5      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d036      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d019      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b0a:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a25      	ldr	r2, [pc, #148]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b16:	f7fd fd45 	bl	80015a4 <HAL_GetTick>
 8003b1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b1e:	f7fd fd41 	bl	80015a4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1b2      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b30:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x49a>
 8003b3c:	e018      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b3e:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b4a:	f7fd fd2b 	bl	80015a4 <HAL_GetTick>
 8003b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b52:	f7fd fd27 	bl	80015a4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e198      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_RCC_OscConfig+0x520>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f0      	bne.n	8003b52 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8085 	beq.w	8003c88 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <HAL_RCC_OscConfig+0x524>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x524>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fd0b 	bl	80015a4 <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b90:	e00c      	b.n	8003bac <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fd fd07 	bl	80015a4 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d905      	bls.n	8003bac <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e178      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
 8003ba4:	58024400 	.word	0x58024400
 8003ba8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bac:	4b96      	ldr	r3, [pc, #600]	; (8003e08 <HAL_RCC_OscConfig+0x784>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ec      	beq.n	8003b92 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x54a>
 8003bc0:	4b92      	ldr	r3, [pc, #584]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	4a91      	ldr	r2, [pc, #580]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
 8003bcc:	e02d      	b.n	8003c2a <HAL_RCC_OscConfig+0x5a6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x56c>
 8003bd6:	4b8d      	ldr	r3, [pc, #564]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	4a8c      	ldr	r2, [pc, #560]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6713      	str	r3, [r2, #112]	; 0x70
 8003be2:	4b8a      	ldr	r3, [pc, #552]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a89      	ldr	r2, [pc, #548]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	e01c      	b.n	8003c2a <HAL_RCC_OscConfig+0x5a6>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x58e>
 8003bf8:	4b84      	ldr	r3, [pc, #528]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a83      	ldr	r2, [pc, #524]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	4b81      	ldr	r3, [pc, #516]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a80      	ldr	r2, [pc, #512]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x5a6>
 8003c12:	4b7e      	ldr	r3, [pc, #504]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a7d      	ldr	r2, [pc, #500]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	4b7b      	ldr	r3, [pc, #492]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a7a      	ldr	r2, [pc, #488]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d015      	beq.n	8003c5e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fd fcb7 	bl	80015a4 <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd fcb3 	bl	80015a4 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e122      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c50:	4b6e      	ldr	r3, [pc, #440]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ee      	beq.n	8003c3a <HAL_RCC_OscConfig+0x5b6>
 8003c5c:	e014      	b.n	8003c88 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fd fca1 	bl	80015a4 <HAL_GetTick>
 8003c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fd fc9d 	bl	80015a4 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e10c      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c7c:	4b63      	ldr	r3, [pc, #396]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8101 	beq.w	8003e94 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c92:	4b5e      	ldr	r3, [pc, #376]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c9a:	2b18      	cmp	r3, #24
 8003c9c:	f000 80bc 	beq.w	8003e18 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	f040 8095 	bne.w	8003dd4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a57      	ldr	r2, [pc, #348]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fd fc75 	bl	80015a4 <HAL_GetTick>
 8003cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fd fc71 	bl	80015a4 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e0e2      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cd0:	4b4e      	ldr	r3, [pc, #312]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce0:	4b4b      	ldr	r3, [pc, #300]	; (8003e10 <HAL_RCC_OscConfig+0x78c>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cec:	0112      	lsls	r2, r2, #4
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	4946      	ldr	r1, [pc, #280]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	628b      	str	r3, [r1, #40]	; 0x28
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	3b01      	subs	r3, #1
 8003d06:	025b      	lsls	r3, r3, #9
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	3b01      	subs	r3, #1
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d26:	4939      	ldr	r1, [pc, #228]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d2c:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	4a36      	ldr	r2, [pc, #216]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d38:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3c:	4b35      	ldr	r3, [pc, #212]	; (8003e14 <HAL_RCC_OscConfig+0x790>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d44:	00d2      	lsls	r2, r2, #3
 8003d46:	4931      	ldr	r1, [pc, #196]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d4c:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	f023 020c 	bic.w	r2, r3, #12
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	492c      	ldr	r1, [pc, #176]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d5e:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	f023 0202 	bic.w	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	4928      	ldr	r1, [pc, #160]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d70:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7c:	4b23      	ldr	r3, [pc, #140]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	4a22      	ldr	r2, [pc, #136]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d88:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd fbfa 	bl	80015a4 <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd fbf6 	bl	80015a4 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e067      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x730>
 8003dd2:	e05f      	b.n	8003e94 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fbe0 	bl	80015a4 <HAL_GetTick>
 8003de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fbdc 	bl	80015a4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e04d      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dfa:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <HAL_RCC_OscConfig+0x788>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x764>
 8003e06:	e045      	b.n	8003e94 <HAL_RCC_OscConfig+0x810>
 8003e08:	58024800 	.word	0x58024800
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	fffffc0c 	.word	0xfffffc0c
 8003e14:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <HAL_RCC_OscConfig+0x81c>)
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_RCC_OscConfig+0x81c>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d031      	beq.n	8003e90 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f003 0203 	and.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d12a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d122      	bne.n	8003e90 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d11a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	0a5b      	lsrs	r3, r3, #9
 8003e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d108      	bne.n	8003e90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	0e1b      	lsrs	r3, r3, #24
 8003e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3730      	adds	r7, #48	; 0x30
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	58024400 	.word	0x58024400

08003ea4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e19c      	b.n	80041f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb8:	4b8a      	ldr	r3, [pc, #552]	; (80040e4 <HAL_RCC_ClockConfig+0x240>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d910      	bls.n	8003ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec6:	4b87      	ldr	r3, [pc, #540]	; (80040e4 <HAL_RCC_ClockConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 020f 	bic.w	r2, r3, #15
 8003ece:	4985      	ldr	r1, [pc, #532]	; (80040e4 <HAL_RCC_ClockConfig+0x240>)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed6:	4b83      	ldr	r3, [pc, #524]	; (80040e4 <HAL_RCC_ClockConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e184      	b.n	80041f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d010      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	4b7b      	ldr	r3, [pc, #492]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d908      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f04:	4b78      	ldr	r3, [pc, #480]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	4975      	ldr	r1, [pc, #468]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d010      	beq.n	8003f44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	4b70      	ldr	r3, [pc, #448]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d908      	bls.n	8003f44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f32:	4b6d      	ldr	r3, [pc, #436]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	496a      	ldr	r1, [pc, #424]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d010      	beq.n	8003f72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699a      	ldr	r2, [r3, #24]
 8003f54:	4b64      	ldr	r3, [pc, #400]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d908      	bls.n	8003f72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f60:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	495e      	ldr	r1, [pc, #376]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d010      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d908      	bls.n	8003fa0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f8e:	4b56      	ldr	r3, [pc, #344]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4953      	ldr	r1, [pc, #332]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d010      	beq.n	8003fce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d908      	bls.n	8003fce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f023 020f 	bic.w	r2, r3, #15
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4947      	ldr	r1, [pc, #284]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d055      	beq.n	8004086 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fda:	4b43      	ldr	r3, [pc, #268]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	4940      	ldr	r1, [pc, #256]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ff4:	4b3c      	ldr	r3, [pc, #240]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d121      	bne.n	8004044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0f6      	b.n	80041f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d107      	bne.n	800401c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800400c:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d115      	bne.n	8004044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0ea      	b.n	80041f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d107      	bne.n	8004034 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004024:	4b30      	ldr	r3, [pc, #192]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d109      	bne.n	8004044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0de      	b.n	80041f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0d6      	b.n	80041f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004044:	4b28      	ldr	r3, [pc, #160]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f023 0207 	bic.w	r2, r3, #7
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4925      	ldr	r1, [pc, #148]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8004052:	4313      	orrs	r3, r2
 8004054:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fd faa5 	bl	80015a4 <HAL_GetTick>
 800405a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405c:	e00a      	b.n	8004074 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405e:	f7fd faa1 	bl	80015a4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e0be      	b.n	80041f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004074:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	429a      	cmp	r2, r3
 8004084:	d1eb      	bne.n	800405e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d010      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	429a      	cmp	r2, r3
 80040a0:	d208      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f023 020f 	bic.w	r2, r3, #15
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	490e      	ldr	r1, [pc, #56]	; (80040e8 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_RCC_ClockConfig+0x240>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d214      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_RCC_ClockConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 020f 	bic.w	r2, r3, #15
 80040ca:	4906      	ldr	r1, [pc, #24]	; (80040e4 <HAL_RCC_ClockConfig+0x240>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <HAL_RCC_ClockConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e086      	b.n	80041f2 <HAL_RCC_ClockConfig+0x34e>
 80040e4:	52002000 	.word	0x52002000
 80040e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	4b3f      	ldr	r3, [pc, #252]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004104:	429a      	cmp	r2, r3
 8004106:	d208      	bcs.n	800411a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004108:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	4939      	ldr	r1, [pc, #228]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 8004116:	4313      	orrs	r3, r2
 8004118:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d010      	beq.n	8004148 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	4b34      	ldr	r3, [pc, #208]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004132:	429a      	cmp	r2, r3
 8004134:	d208      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004136:	4b31      	ldr	r3, [pc, #196]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	492e      	ldr	r1, [pc, #184]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 8004144:	4313      	orrs	r3, r2
 8004146:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d010      	beq.n	8004176 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004160:	429a      	cmp	r2, r3
 8004162:	d208      	bcs.n	8004176 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	4922      	ldr	r1, [pc, #136]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 8004172:	4313      	orrs	r3, r2
 8004174:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d010      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800418e:	429a      	cmp	r2, r3
 8004190:	d208      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004192:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	4917      	ldr	r1, [pc, #92]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041a4:	f000 f834 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041a8:	4601      	mov	r1, r0
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	4a12      	ldr	r2, [pc, #72]	; (8004200 <HAL_RCC_ClockConfig+0x35c>)
 80041b6:	5cd3      	ldrb	r3, [r2, r3]
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	fa21 f303 	lsr.w	r3, r1, r3
 80041c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <HAL_RCC_ClockConfig+0x358>)
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <HAL_RCC_ClockConfig+0x35c>)
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
 80041d8:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <HAL_RCC_ClockConfig+0x360>)
 80041da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x364>)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x368>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd f992 	bl	8001510 <HAL_InitTick>
 80041ec:	4603      	mov	r3, r0
 80041ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	58024400 	.word	0x58024400
 8004200:	0800db3c 	.word	0x0800db3c
 8004204:	20000004 	.word	0x20000004
 8004208:	20000000 	.word	0x20000000
 800420c:	20000008 	.word	0x20000008

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004216:	4baf      	ldr	r3, [pc, #700]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800421e:	2b18      	cmp	r3, #24
 8004220:	f200 814e 	bhi.w	80044c0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004291 	.word	0x08004291
 8004230:	080044c1 	.word	0x080044c1
 8004234:	080044c1 	.word	0x080044c1
 8004238:	080044c1 	.word	0x080044c1
 800423c:	080044c1 	.word	0x080044c1
 8004240:	080044c1 	.word	0x080044c1
 8004244:	080044c1 	.word	0x080044c1
 8004248:	080044c1 	.word	0x080044c1
 800424c:	080042b7 	.word	0x080042b7
 8004250:	080044c1 	.word	0x080044c1
 8004254:	080044c1 	.word	0x080044c1
 8004258:	080044c1 	.word	0x080044c1
 800425c:	080044c1 	.word	0x080044c1
 8004260:	080044c1 	.word	0x080044c1
 8004264:	080044c1 	.word	0x080044c1
 8004268:	080044c1 	.word	0x080044c1
 800426c:	080042bd 	.word	0x080042bd
 8004270:	080044c1 	.word	0x080044c1
 8004274:	080044c1 	.word	0x080044c1
 8004278:	080044c1 	.word	0x080044c1
 800427c:	080044c1 	.word	0x080044c1
 8004280:	080044c1 	.word	0x080044c1
 8004284:	080044c1 	.word	0x080044c1
 8004288:	080044c1 	.word	0x080044c1
 800428c:	080042c3 	.word	0x080042c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004290:	4b90      	ldr	r3, [pc, #576]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800429c:	4b8d      	ldr	r3, [pc, #564]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	08db      	lsrs	r3, r3, #3
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	4a8c      	ldr	r2, [pc, #560]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042ae:	e10a      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042b0:	4b89      	ldr	r3, [pc, #548]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80042b2:	61bb      	str	r3, [r7, #24]
    break;
 80042b4:	e107      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042b6:	4b89      	ldr	r3, [pc, #548]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80042b8:	61bb      	str	r3, [r7, #24]
    break;
 80042ba:	e104      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80042bc:	4b88      	ldr	r3, [pc, #544]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80042be:	61bb      	str	r3, [r7, #24]
    break;
 80042c0:	e101      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042c2:	4b84      	ldr	r3, [pc, #528]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80042cc:	4b81      	ldr	r3, [pc, #516]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042d8:	4b7e      	ldr	r3, [pc, #504]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042e2:	4b7c      	ldr	r3, [pc, #496]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	08db      	lsrs	r3, r3, #3
 80042e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80da 	beq.w	80044ba <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d05a      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800430c:	2b01      	cmp	r3, #1
 800430e:	d302      	bcc.n	8004316 <HAL_RCC_GetSysClockFreq+0x106>
 8004310:	2b02      	cmp	r3, #2
 8004312:	d078      	beq.n	8004406 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004314:	e099      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004316:	4b6f      	ldr	r3, [pc, #444]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02d      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004322:	4b6c      	ldr	r3, [pc, #432]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	08db      	lsrs	r3, r3, #3
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	4a6a      	ldr	r2, [pc, #424]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434c:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004360:	eddf 5a60 	vldr	s11, [pc, #384]	; 80044e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004378:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800437c:	e087      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004388:	eddf 6a57 	vldr	s13, [pc, #348]	; 80044e8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800438c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	ee07 3a90 	vmov	s15, r3
 800439c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80043a4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80044e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80043a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c0:	e065      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	ee07 3a90 	vmov	s15, r3
 80043c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043cc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2dc>
 80043d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d4:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80043e8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80044e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80043ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004404:	e043      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004410:	eddf 6a37 	vldr	s13, [pc, #220]	; 80044f0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004418:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004428:	ed97 6a02 	vldr	s12, [r7, #8]
 800442c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80044e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004444:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004448:	e021      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004454:	eddf 6a25 	vldr	s13, [pc, #148]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2dc>
 8004458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004470:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80044e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800448c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	0a5b      	lsrs	r3, r3, #9
 8004494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004498:	3301      	adds	r3, #1
 800449a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80044aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b2:	ee17 3a90 	vmov	r3, s15
 80044b6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80044b8:	e005      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
    break;
 80044be:	e002      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80044c2:	61bb      	str	r3, [r7, #24]
    break;
 80044c4:	bf00      	nop
  }

  return sysclockfreq;
 80044c6:	69bb      	ldr	r3, [r7, #24]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3724      	adds	r7, #36	; 0x24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	58024400 	.word	0x58024400
 80044d8:	03d09000 	.word	0x03d09000
 80044dc:	003d0900 	.word	0x003d0900
 80044e0:	017d7840 	.word	0x017d7840
 80044e4:	46000000 	.word	0x46000000
 80044e8:	4c742400 	.word	0x4c742400
 80044ec:	4a742400 	.word	0x4a742400
 80044f0:	4bbebc20 	.word	0x4bbebc20

080044f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044fa:	f7ff fe89 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80044fe:	4601      	mov	r1, r0
 8004500:	4b10      	ldr	r3, [pc, #64]	; (8004544 <HAL_RCC_GetHCLKFreq+0x50>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <HAL_RCC_GetHCLKFreq+0x54>)
 800450c:	5cd3      	ldrb	r3, [r2, r3]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	fa21 f303 	lsr.w	r3, r1, r3
 8004516:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_RCC_GetHCLKFreq+0x50>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	4a09      	ldr	r2, [pc, #36]	; (8004548 <HAL_RCC_GetHCLKFreq+0x54>)
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	fa22 f303 	lsr.w	r3, r2, r3
 800452e:	4a07      	ldr	r2, [pc, #28]	; (800454c <HAL_RCC_GetHCLKFreq+0x58>)
 8004530:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004532:	4a07      	ldr	r2, [pc, #28]	; (8004550 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004538:	4b04      	ldr	r3, [pc, #16]	; (800454c <HAL_RCC_GetHCLKFreq+0x58>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	58024400 	.word	0x58024400
 8004548:	0800db3c 	.word	0x0800db3c
 800454c:	20000004 	.word	0x20000004
 8004550:	20000000 	.word	0x20000000

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004558:	f7ff ffcc 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 800455c:	4601      	mov	r1, r0
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4a04      	ldr	r2, [pc, #16]	; (800457c <HAL_RCC_GetPCLK1Freq+0x28>)
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	58024400 	.word	0x58024400
 800457c:	0800db3c 	.word	0x0800db3c

08004580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004584:	f7ff ffb6 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004588:	4601      	mov	r1, r0
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004596:	5cd3      	ldrb	r3, [r2, r3]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	58024400 	.word	0x58024400
 80045a8:	0800db3c 	.word	0x0800db3c

080045ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045b0:	f7ff ffa0 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 80045b4:	4601      	mov	r1, r0
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4a04      	ldr	r2, [pc, #16]	; (80045d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045c2:	5cd3      	ldrb	r3, [r2, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	58024400 	.word	0x58024400
 80045d4:	0800db3c 	.word	0x0800db3c

080045d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	; 0x24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045e0:	4b9d      	ldr	r3, [pc, #628]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80045ea:	4b9b      	ldr	r3, [pc, #620]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	0b1b      	lsrs	r3, r3, #12
 80045f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045f6:	4b98      	ldr	r3, [pc, #608]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004602:	4b95      	ldr	r3, [pc, #596]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	08db      	lsrs	r3, r3, #3
 8004608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 810a 	beq.w	800483a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d05a      	beq.n	80046e2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800462c:	2b01      	cmp	r3, #1
 800462e:	d302      	bcc.n	8004636 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004630:	2b02      	cmp	r3, #2
 8004632:	d078      	beq.n	8004726 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004634:	e099      	b.n	800476a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004636:	4b88      	ldr	r3, [pc, #544]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02d      	beq.n	800469e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004642:	4b85      	ldr	r3, [pc, #532]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	08db      	lsrs	r3, r3, #3
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	4a83      	ldr	r2, [pc, #524]	; (800485c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800464e:	fa22 f303 	lsr.w	r3, r2, r3
 8004652:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466c:	4b7a      	ldr	r3, [pc, #488]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004674:	ee07 3a90 	vmov	s15, r3
 8004678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004680:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004698:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800469c:	e087      	b.n	80047ae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004864 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80046ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b0:	4b69      	ldr	r3, [pc, #420]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b8:	ee07 3a90 	vmov	s15, r3
 80046bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046e0:	e065      	b.n	80047ae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80046f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f4:	4b58      	ldr	r3, [pc, #352]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004704:	ed97 6a03 	vldr	s12, [r7, #12]
 8004708:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800470c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004724:	e043      	b.n	80047ae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004730:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800486c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004738:	4b47      	ldr	r3, [pc, #284]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004748:	ed97 6a03 	vldr	s12, [r7, #12]
 800474c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004764:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004768:	e021      	b.n	80047ae <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004774:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477c:	4b36      	ldr	r3, [pc, #216]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004790:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ac:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80047ae:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	0a5b      	lsrs	r3, r3, #9
 80047b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d4:	ee17 2a90 	vmov	r2, s15
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80047dc:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004802:	ee17 2a90 	vmov	r2, s15
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	0e1b      	lsrs	r3, r3, #24
 8004810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004824:	edd7 6a07 	vldr	s13, [r7, #28]
 8004828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800482c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004830:	ee17 2a90 	vmov	r2, s15
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004838:	e008      	b.n	800484c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	3724      	adds	r7, #36	; 0x24
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	58024400 	.word	0x58024400
 800485c:	03d09000 	.word	0x03d09000
 8004860:	46000000 	.word	0x46000000
 8004864:	4c742400 	.word	0x4c742400
 8004868:	4a742400 	.word	0x4a742400
 800486c:	4bbebc20 	.word	0x4bbebc20

08004870 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004870:	b480      	push	{r7}
 8004872:	b089      	sub	sp, #36	; 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004878:	4b9d      	ldr	r3, [pc, #628]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004882:	4b9b      	ldr	r3, [pc, #620]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	0d1b      	lsrs	r3, r3, #20
 8004888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800488c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800488e:	4b98      	ldr	r3, [pc, #608]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800489a:	4b95      	ldr	r3, [pc, #596]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	08db      	lsrs	r3, r3, #3
 80048a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 810a 	beq.w	8004ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d05a      	beq.n	800497a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d302      	bcc.n	80048ce <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d078      	beq.n	80049be <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80048cc:	e099      	b.n	8004a02 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ce:	4b88      	ldr	r3, [pc, #544]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d02d      	beq.n	8004936 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048da:	4b85      	ldr	r3, [pc, #532]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	08db      	lsrs	r3, r3, #3
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	4a83      	ldr	r2, [pc, #524]	; (8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80048e6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ea:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004904:	4b7a      	ldr	r3, [pc, #488]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004914:	ed97 6a03 	vldr	s12, [r7, #12]
 8004918:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800491c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004930:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004934:	e087      	b.n	8004a46 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004940:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004afc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004948:	4b69      	ldr	r3, [pc, #420]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004958:	ed97 6a03 	vldr	s12, [r7, #12]
 800495c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800496c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004974:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004978:	e065      	b.n	8004a46 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	ee07 3a90 	vmov	s15, r3
 8004980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004984:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498c:	4b58      	ldr	r3, [pc, #352]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499c:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049bc:	e043      	b.n	8004a46 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80049cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d0:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a00:	e021      	b.n	8004a46 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a14:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a24:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a28:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a44:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a46:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	0a5b      	lsrs	r3, r3, #9
 8004a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6c:	ee17 2a90 	vmov	r2, s15
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9a:	ee17 2a90 	vmov	r2, s15
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004aa2:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	0e1b      	lsrs	r3, r3, #24
 8004aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac8:	ee17 2a90 	vmov	r2, s15
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	609a      	str	r2, [r3, #8]
}
 8004ae4:	bf00      	nop
 8004ae6:	3724      	adds	r7, #36	; 0x24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	58024400 	.word	0x58024400
 8004af4:	03d09000 	.word	0x03d09000
 8004af8:	46000000 	.word	0x46000000
 8004afc:	4c742400 	.word	0x4c742400
 8004b00:	4a742400 	.word	0x4a742400
 8004b04:	4bbebc20 	.word	0x4bbebc20

08004b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e042      	b.n	8004ba0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fc fbd5 	bl	80012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2224      	movs	r2, #36	; 0x24
 8004b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8c2 	bl	8004cd4 <UART_SetConfig>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e022      	b.n	8004ba0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fe66 	bl	8005834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 feed 	bl	8005978 <UART_CheckIdleState>
 8004b9e:	4603      	mov	r3, r0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	f040 8083 	bne.w	8004cca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_UART_Transmit+0x28>
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e07b      	b.n	8004ccc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_UART_Transmit+0x3a>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e074      	b.n	8004ccc <HAL_UART_Transmit+0x124>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2221      	movs	r2, #33	; 0x21
 8004bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004bfa:	f7fc fcd3 	bl	80015a4 <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d108      	bne.n	8004c2c <HAL_UART_Transmit+0x84>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	e003      	b.n	8004c34 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004c3c:	e02c      	b.n	8004c98 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	2180      	movs	r1, #128	; 0x80
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fedd 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e039      	b.n	8004ccc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10b      	bne.n	8004c76 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	3302      	adds	r3, #2
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e007      	b.n	8004c86 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	3301      	adds	r3, #1
 8004c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1cc      	bne.n	8004c3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 feaa 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e006      	b.n	8004ccc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004cd8:	b08e      	sub	sp, #56	; 0x38
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d02:	4313      	orrs	r3, r2
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4bc1      	ldr	r3, [pc, #772]	; (8005014 <UART_SetConfig+0x340>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4ab7      	ldr	r2, [pc, #732]	; (8005018 <UART_SetConfig+0x344>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d46:	4313      	orrs	r3, r2
 8004d48:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	4bb2      	ldr	r3, [pc, #712]	; (800501c <UART_SetConfig+0x348>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	f023 010f 	bic.w	r1, r3, #15
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4aa9      	ldr	r2, [pc, #676]	; (8005020 <UART_SetConfig+0x34c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d177      	bne.n	8004e6e <UART_SetConfig+0x19a>
 8004d7e:	4ba9      	ldr	r3, [pc, #676]	; (8005024 <UART_SetConfig+0x350>)
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d86:	2b28      	cmp	r3, #40	; 0x28
 8004d88:	d86c      	bhi.n	8004e64 <UART_SetConfig+0x190>
 8004d8a:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0xbc>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004e35 	.word	0x08004e35
 8004d94:	08004e65 	.word	0x08004e65
 8004d98:	08004e65 	.word	0x08004e65
 8004d9c:	08004e65 	.word	0x08004e65
 8004da0:	08004e65 	.word	0x08004e65
 8004da4:	08004e65 	.word	0x08004e65
 8004da8:	08004e65 	.word	0x08004e65
 8004dac:	08004e65 	.word	0x08004e65
 8004db0:	08004e3d 	.word	0x08004e3d
 8004db4:	08004e65 	.word	0x08004e65
 8004db8:	08004e65 	.word	0x08004e65
 8004dbc:	08004e65 	.word	0x08004e65
 8004dc0:	08004e65 	.word	0x08004e65
 8004dc4:	08004e65 	.word	0x08004e65
 8004dc8:	08004e65 	.word	0x08004e65
 8004dcc:	08004e65 	.word	0x08004e65
 8004dd0:	08004e45 	.word	0x08004e45
 8004dd4:	08004e65 	.word	0x08004e65
 8004dd8:	08004e65 	.word	0x08004e65
 8004ddc:	08004e65 	.word	0x08004e65
 8004de0:	08004e65 	.word	0x08004e65
 8004de4:	08004e65 	.word	0x08004e65
 8004de8:	08004e65 	.word	0x08004e65
 8004dec:	08004e65 	.word	0x08004e65
 8004df0:	08004e4d 	.word	0x08004e4d
 8004df4:	08004e65 	.word	0x08004e65
 8004df8:	08004e65 	.word	0x08004e65
 8004dfc:	08004e65 	.word	0x08004e65
 8004e00:	08004e65 	.word	0x08004e65
 8004e04:	08004e65 	.word	0x08004e65
 8004e08:	08004e65 	.word	0x08004e65
 8004e0c:	08004e65 	.word	0x08004e65
 8004e10:	08004e55 	.word	0x08004e55
 8004e14:	08004e65 	.word	0x08004e65
 8004e18:	08004e65 	.word	0x08004e65
 8004e1c:	08004e65 	.word	0x08004e65
 8004e20:	08004e65 	.word	0x08004e65
 8004e24:	08004e65 	.word	0x08004e65
 8004e28:	08004e65 	.word	0x08004e65
 8004e2c:	08004e65 	.word	0x08004e65
 8004e30:	08004e5d 	.word	0x08004e5d
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e3a:	e233      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e42:	e22f      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004e44:	2308      	movs	r3, #8
 8004e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e4a:	e22b      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e52:	e227      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004e54:	2320      	movs	r3, #32
 8004e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e5a:	e223      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004e5c:	2340      	movs	r3, #64	; 0x40
 8004e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e62:	e21f      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e6a:	bf00      	nop
 8004e6c:	e21a      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6d      	ldr	r2, [pc, #436]	; (8005028 <UART_SetConfig+0x354>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d132      	bne.n	8004ede <UART_SetConfig+0x20a>
 8004e78:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <UART_SetConfig+0x350>)
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d827      	bhi.n	8004ed4 <UART_SetConfig+0x200>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x1b8>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004ea5 	.word	0x08004ea5
 8004e90:	08004ead 	.word	0x08004ead
 8004e94:	08004eb5 	.word	0x08004eb5
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004ec5 	.word	0x08004ec5
 8004ea0:	08004ecd 	.word	0x08004ecd
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eaa:	e1fb      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004eac:	2304      	movs	r3, #4
 8004eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eb2:	e1f7      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eba:	e1f3      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ec2:	e1ef      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eca:	e1eb      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004ecc:	2340      	movs	r3, #64	; 0x40
 8004ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ed2:	e1e7      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eda:	bf00      	nop
 8004edc:	e1e2      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a52      	ldr	r2, [pc, #328]	; (800502c <UART_SetConfig+0x358>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d132      	bne.n	8004f4e <UART_SetConfig+0x27a>
 8004ee8:	4b4e      	ldr	r3, [pc, #312]	; (8005024 <UART_SetConfig+0x350>)
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	d827      	bhi.n	8004f44 <UART_SetConfig+0x270>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0x228>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f15 	.word	0x08004f15
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	08004f25 	.word	0x08004f25
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f35 	.word	0x08004f35
 8004f10:	08004f3d 	.word	0x08004f3d
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f1a:	e1c3      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f22:	e1bf      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f2a:	e1bb      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f32:	e1b7      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f34:	2320      	movs	r3, #32
 8004f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f3a:	e1b3      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f3c:	2340      	movs	r3, #64	; 0x40
 8004f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f42:	e1af      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f4a:	bf00      	nop
 8004f4c:	e1aa      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a37      	ldr	r2, [pc, #220]	; (8005030 <UART_SetConfig+0x35c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d132      	bne.n	8004fbe <UART_SetConfig+0x2ea>
 8004f58:	4b32      	ldr	r3, [pc, #200]	; (8005024 <UART_SetConfig+0x350>)
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d827      	bhi.n	8004fb4 <UART_SetConfig+0x2e0>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0x298>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f85 	.word	0x08004f85
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	08004f95 	.word	0x08004f95
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004fa5 	.word	0x08004fa5
 8004f80:	08004fad 	.word	0x08004fad
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f8a:	e18b      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f92:	e187      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f94:	2308      	movs	r3, #8
 8004f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f9a:	e183      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fa2:	e17f      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004fa4:	2320      	movs	r3, #32
 8004fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004faa:	e17b      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004fac:	2340      	movs	r3, #64	; 0x40
 8004fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fb2:	e177      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fba:	bf00      	nop
 8004fbc:	e172      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <UART_SetConfig+0x360>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d144      	bne.n	8005052 <UART_SetConfig+0x37e>
 8004fc8:	4b16      	ldr	r3, [pc, #88]	; (8005024 <UART_SetConfig+0x350>)
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	2b05      	cmp	r3, #5
 8004fd2:	d839      	bhi.n	8005048 <UART_SetConfig+0x374>
 8004fd4:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <UART_SetConfig+0x308>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08004ff5 	.word	0x08004ff5
 8004fe0:	08004ffd 	.word	0x08004ffd
 8004fe4:	08005005 	.word	0x08005005
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005039 	.word	0x08005039
 8004ff0:	08005041 	.word	0x08005041
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ffa:	e153      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005002:	e14f      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005004:	2308      	movs	r3, #8
 8005006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800500a:	e14b      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800500c:	2310      	movs	r3, #16
 800500e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005012:	e147      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005014:	cfff69f3 	.word	0xcfff69f3
 8005018:	58000c00 	.word	0x58000c00
 800501c:	11fff4ff 	.word	0x11fff4ff
 8005020:	40011000 	.word	0x40011000
 8005024:	58024400 	.word	0x58024400
 8005028:	40004400 	.word	0x40004400
 800502c:	40004800 	.word	0x40004800
 8005030:	40004c00 	.word	0x40004c00
 8005034:	40005000 	.word	0x40005000
 8005038:	2320      	movs	r3, #32
 800503a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503e:	e131      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005046:	e12d      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504e:	bf00      	nop
 8005050:	e128      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4ab6      	ldr	r2, [pc, #728]	; (8005330 <UART_SetConfig+0x65c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d178      	bne.n	800514e <UART_SetConfig+0x47a>
 800505c:	4bb5      	ldr	r3, [pc, #724]	; (8005334 <UART_SetConfig+0x660>)
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005064:	2b28      	cmp	r3, #40	; 0x28
 8005066:	d86d      	bhi.n	8005144 <UART_SetConfig+0x470>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0x39c>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005115 	.word	0x08005115
 8005074:	08005145 	.word	0x08005145
 8005078:	08005145 	.word	0x08005145
 800507c:	08005145 	.word	0x08005145
 8005080:	08005145 	.word	0x08005145
 8005084:	08005145 	.word	0x08005145
 8005088:	08005145 	.word	0x08005145
 800508c:	08005145 	.word	0x08005145
 8005090:	0800511d 	.word	0x0800511d
 8005094:	08005145 	.word	0x08005145
 8005098:	08005145 	.word	0x08005145
 800509c:	08005145 	.word	0x08005145
 80050a0:	08005145 	.word	0x08005145
 80050a4:	08005145 	.word	0x08005145
 80050a8:	08005145 	.word	0x08005145
 80050ac:	08005145 	.word	0x08005145
 80050b0:	08005125 	.word	0x08005125
 80050b4:	08005145 	.word	0x08005145
 80050b8:	08005145 	.word	0x08005145
 80050bc:	08005145 	.word	0x08005145
 80050c0:	08005145 	.word	0x08005145
 80050c4:	08005145 	.word	0x08005145
 80050c8:	08005145 	.word	0x08005145
 80050cc:	08005145 	.word	0x08005145
 80050d0:	0800512d 	.word	0x0800512d
 80050d4:	08005145 	.word	0x08005145
 80050d8:	08005145 	.word	0x08005145
 80050dc:	08005145 	.word	0x08005145
 80050e0:	08005145 	.word	0x08005145
 80050e4:	08005145 	.word	0x08005145
 80050e8:	08005145 	.word	0x08005145
 80050ec:	08005145 	.word	0x08005145
 80050f0:	08005135 	.word	0x08005135
 80050f4:	08005145 	.word	0x08005145
 80050f8:	08005145 	.word	0x08005145
 80050fc:	08005145 	.word	0x08005145
 8005100:	08005145 	.word	0x08005145
 8005104:	08005145 	.word	0x08005145
 8005108:	08005145 	.word	0x08005145
 800510c:	08005145 	.word	0x08005145
 8005110:	0800513d 	.word	0x0800513d
 8005114:	2301      	movs	r3, #1
 8005116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511a:	e0c3      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800511c:	2304      	movs	r3, #4
 800511e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005122:	e0bf      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005124:	2308      	movs	r3, #8
 8005126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512a:	e0bb      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800512c:	2310      	movs	r3, #16
 800512e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005132:	e0b7      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005134:	2320      	movs	r3, #32
 8005136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800513a:	e0b3      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800513c:	2340      	movs	r3, #64	; 0x40
 800513e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005142:	e0af      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005144:	2380      	movs	r3, #128	; 0x80
 8005146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514a:	bf00      	nop
 800514c:	e0aa      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a79      	ldr	r2, [pc, #484]	; (8005338 <UART_SetConfig+0x664>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d132      	bne.n	80051be <UART_SetConfig+0x4ea>
 8005158:	4b76      	ldr	r3, [pc, #472]	; (8005334 <UART_SetConfig+0x660>)
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	2b05      	cmp	r3, #5
 8005162:	d827      	bhi.n	80051b4 <UART_SetConfig+0x4e0>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0x498>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	08005185 	.word	0x08005185
 8005170:	0800518d 	.word	0x0800518d
 8005174:	08005195 	.word	0x08005195
 8005178:	0800519d 	.word	0x0800519d
 800517c:	080051a5 	.word	0x080051a5
 8005180:	080051ad 	.word	0x080051ad
 8005184:	2300      	movs	r3, #0
 8005186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800518a:	e08b      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005192:	e087      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519a:	e083      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a2:	e07f      	b.n	80052a4 <UART_SetConfig+0x5d0>
 80051a4:	2320      	movs	r3, #32
 80051a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051aa:	e07b      	b.n	80052a4 <UART_SetConfig+0x5d0>
 80051ac:	2340      	movs	r3, #64	; 0x40
 80051ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051b2:	e077      	b.n	80052a4 <UART_SetConfig+0x5d0>
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ba:	bf00      	nop
 80051bc:	e072      	b.n	80052a4 <UART_SetConfig+0x5d0>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a5e      	ldr	r2, [pc, #376]	; (800533c <UART_SetConfig+0x668>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d132      	bne.n	800522e <UART_SetConfig+0x55a>
 80051c8:	4b5a      	ldr	r3, [pc, #360]	; (8005334 <UART_SetConfig+0x660>)
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	d827      	bhi.n	8005224 <UART_SetConfig+0x550>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <UART_SetConfig+0x508>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051f5 	.word	0x080051f5
 80051e0:	080051fd 	.word	0x080051fd
 80051e4:	08005205 	.word	0x08005205
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	08005215 	.word	0x08005215
 80051f0:	0800521d 	.word	0x0800521d
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fa:	e053      	b.n	80052a4 <UART_SetConfig+0x5d0>
 80051fc:	2304      	movs	r3, #4
 80051fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005202:	e04f      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005204:	2308      	movs	r3, #8
 8005206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800520a:	e04b      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800520c:	2310      	movs	r3, #16
 800520e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005212:	e047      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005214:	2320      	movs	r3, #32
 8005216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800521a:	e043      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800521c:	2340      	movs	r3, #64	; 0x40
 800521e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005222:	e03f      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522a:	bf00      	nop
 800522c:	e03a      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a43      	ldr	r2, [pc, #268]	; (8005340 <UART_SetConfig+0x66c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d132      	bne.n	800529e <UART_SetConfig+0x5ca>
 8005238:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <UART_SetConfig+0x660>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	2b05      	cmp	r3, #5
 8005242:	d827      	bhi.n	8005294 <UART_SetConfig+0x5c0>
 8005244:	a201      	add	r2, pc, #4	; (adr r2, 800524c <UART_SetConfig+0x578>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	08005265 	.word	0x08005265
 8005250:	0800526d 	.word	0x0800526d
 8005254:	08005275 	.word	0x08005275
 8005258:	0800527d 	.word	0x0800527d
 800525c:	08005285 	.word	0x08005285
 8005260:	0800528d 	.word	0x0800528d
 8005264:	2302      	movs	r3, #2
 8005266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526a:	e01b      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005272:	e017      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527a:	e013      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005282:	e00f      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005284:	2320      	movs	r3, #32
 8005286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800528a:	e00b      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800528c:	2340      	movs	r3, #64	; 0x40
 800528e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005292:	e007      	b.n	80052a4 <UART_SetConfig+0x5d0>
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <UART_SetConfig+0x5d0>
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a25      	ldr	r2, [pc, #148]	; (8005340 <UART_SetConfig+0x66c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f040 80b8 	bne.w	8005420 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d019      	beq.n	80052ec <UART_SetConfig+0x618>
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	dc04      	bgt.n	80052c6 <UART_SetConfig+0x5f2>
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d009      	beq.n	80052d4 <UART_SetConfig+0x600>
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d00b      	beq.n	80052dc <UART_SetConfig+0x608>
 80052c4:	e042      	b.n	800534c <UART_SetConfig+0x678>
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d02b      	beq.n	8005322 <UART_SetConfig+0x64e>
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d02c      	beq.n	8005328 <UART_SetConfig+0x654>
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d014      	beq.n	80052fc <UART_SetConfig+0x628>
 80052d2:	e03b      	b.n	800534c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80052d4:	f7ff f96a 	bl	80045ac <HAL_RCCEx_GetD3PCLK1Freq>
 80052d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052da:	e03d      	b.n	8005358 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052dc:	f107 0314 	add.w	r3, r7, #20
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff f979 	bl	80045d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ea:	e035      	b.n	8005358 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ec:	f107 0308 	add.w	r3, r7, #8
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fabd 	bl	8004870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052fa:	e02d      	b.n	8005358 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <UART_SetConfig+0x660>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d009      	beq.n	800531c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <UART_SetConfig+0x660>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	08db      	lsrs	r3, r3, #3
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <UART_SetConfig+0x670>)
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800531a:	e01d      	b.n	8005358 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <UART_SetConfig+0x670>)
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005320:	e01a      	b.n	8005358 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005322:	4b09      	ldr	r3, [pc, #36]	; (8005348 <UART_SetConfig+0x674>)
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005326:	e017      	b.n	8005358 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800532e:	e013      	b.n	8005358 <UART_SetConfig+0x684>
 8005330:	40011400 	.word	0x40011400
 8005334:	58024400 	.word	0x58024400
 8005338:	40007800 	.word	0x40007800
 800533c:	40007c00 	.word	0x40007c00
 8005340:	58000c00 	.word	0x58000c00
 8005344:	03d09000 	.word	0x03d09000
 8005348:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005356:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 824d 	beq.w	80057fa <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	4aad      	ldr	r2, [pc, #692]	; (800561c <UART_SetConfig+0x948>)
 8005366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800536a:	461a      	mov	r2, r3
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005372:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4413      	add	r3, r2
 800537e:	6a3a      	ldr	r2, [r7, #32]
 8005380:	429a      	cmp	r2, r3
 8005382:	d305      	bcc.n	8005390 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800538a:	6a3a      	ldr	r2, [r7, #32]
 800538c:	429a      	cmp	r2, r3
 800538e:	d903      	bls.n	8005398 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005396:	e230      	b.n	80057fa <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	4618      	mov	r0, r3
 800539c:	f04f 0100 	mov.w	r1, #0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	4a9d      	ldr	r2, [pc, #628]	; (800561c <UART_SetConfig+0x948>)
 80053a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	461a      	mov	r2, r3
 80053b2:	4623      	mov	r3, r4
 80053b4:	f7fa fffc 	bl	80003b0 <__aeabi_uldivmod>
 80053b8:	4603      	mov	r3, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	4619      	mov	r1, r3
 80053be:	4622      	mov	r2, r4
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	f04f 0400 	mov.w	r4, #0
 80053c8:	0214      	lsls	r4, r2, #8
 80053ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80053ce:	020b      	lsls	r3, r1, #8
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6852      	ldr	r2, [r2, #4]
 80053d4:	0852      	lsrs	r2, r2, #1
 80053d6:	4611      	mov	r1, r2
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	eb13 0b01 	adds.w	fp, r3, r1
 80053e0:	eb44 0c02 	adc.w	ip, r4, r2
 80053e4:	4658      	mov	r0, fp
 80053e6:	4661      	mov	r1, ip
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f04f 0400 	mov.w	r4, #0
 80053f0:	461a      	mov	r2, r3
 80053f2:	4623      	mov	r3, r4
 80053f4:	f7fa ffdc 	bl	80003b0 <__aeabi_uldivmod>
 80053f8:	4603      	mov	r3, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005404:	d308      	bcc.n	8005418 <UART_SetConfig+0x744>
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800540c:	d204      	bcs.n	8005418 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005414:	60da      	str	r2, [r3, #12]
 8005416:	e1f0      	b.n	80057fa <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800541e:	e1ec      	b.n	80057fa <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005428:	f040 8100 	bne.w	800562c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800542c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	f200 80b7 	bhi.w	80055a4 <UART_SetConfig+0x8d0>
 8005436:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0x768>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	08005541 	.word	0x08005541
 8005440:	08005549 	.word	0x08005549
 8005444:	080055a5 	.word	0x080055a5
 8005448:	080055a5 	.word	0x080055a5
 800544c:	08005551 	.word	0x08005551
 8005450:	080055a5 	.word	0x080055a5
 8005454:	080055a5 	.word	0x080055a5
 8005458:	080055a5 	.word	0x080055a5
 800545c:	08005561 	.word	0x08005561
 8005460:	080055a5 	.word	0x080055a5
 8005464:	080055a5 	.word	0x080055a5
 8005468:	080055a5 	.word	0x080055a5
 800546c:	080055a5 	.word	0x080055a5
 8005470:	080055a5 	.word	0x080055a5
 8005474:	080055a5 	.word	0x080055a5
 8005478:	080055a5 	.word	0x080055a5
 800547c:	08005571 	.word	0x08005571
 8005480:	080055a5 	.word	0x080055a5
 8005484:	080055a5 	.word	0x080055a5
 8005488:	080055a5 	.word	0x080055a5
 800548c:	080055a5 	.word	0x080055a5
 8005490:	080055a5 	.word	0x080055a5
 8005494:	080055a5 	.word	0x080055a5
 8005498:	080055a5 	.word	0x080055a5
 800549c:	080055a5 	.word	0x080055a5
 80054a0:	080055a5 	.word	0x080055a5
 80054a4:	080055a5 	.word	0x080055a5
 80054a8:	080055a5 	.word	0x080055a5
 80054ac:	080055a5 	.word	0x080055a5
 80054b0:	080055a5 	.word	0x080055a5
 80054b4:	080055a5 	.word	0x080055a5
 80054b8:	080055a5 	.word	0x080055a5
 80054bc:	08005597 	.word	0x08005597
 80054c0:	080055a5 	.word	0x080055a5
 80054c4:	080055a5 	.word	0x080055a5
 80054c8:	080055a5 	.word	0x080055a5
 80054cc:	080055a5 	.word	0x080055a5
 80054d0:	080055a5 	.word	0x080055a5
 80054d4:	080055a5 	.word	0x080055a5
 80054d8:	080055a5 	.word	0x080055a5
 80054dc:	080055a5 	.word	0x080055a5
 80054e0:	080055a5 	.word	0x080055a5
 80054e4:	080055a5 	.word	0x080055a5
 80054e8:	080055a5 	.word	0x080055a5
 80054ec:	080055a5 	.word	0x080055a5
 80054f0:	080055a5 	.word	0x080055a5
 80054f4:	080055a5 	.word	0x080055a5
 80054f8:	080055a5 	.word	0x080055a5
 80054fc:	080055a5 	.word	0x080055a5
 8005500:	080055a5 	.word	0x080055a5
 8005504:	080055a5 	.word	0x080055a5
 8005508:	080055a5 	.word	0x080055a5
 800550c:	080055a5 	.word	0x080055a5
 8005510:	080055a5 	.word	0x080055a5
 8005514:	080055a5 	.word	0x080055a5
 8005518:	080055a5 	.word	0x080055a5
 800551c:	080055a5 	.word	0x080055a5
 8005520:	080055a5 	.word	0x080055a5
 8005524:	080055a5 	.word	0x080055a5
 8005528:	080055a5 	.word	0x080055a5
 800552c:	080055a5 	.word	0x080055a5
 8005530:	080055a5 	.word	0x080055a5
 8005534:	080055a5 	.word	0x080055a5
 8005538:	080055a5 	.word	0x080055a5
 800553c:	0800559d 	.word	0x0800559d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005540:	f7ff f808 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8005544:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005546:	e033      	b.n	80055b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005548:	f7ff f81a 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 800554c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800554e:	e02f      	b.n	80055b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005550:	f107 0314 	add.w	r3, r7, #20
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f83f 	bl	80045d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800555e:	e027      	b.n	80055b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005560:	f107 0308 	add.w	r3, r7, #8
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff f983 	bl	8004870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800556e:	e01f      	b.n	80055b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005570:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <UART_SetConfig+0x94c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800557c:	4b28      	ldr	r3, [pc, #160]	; (8005620 <UART_SetConfig+0x94c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	08db      	lsrs	r3, r3, #3
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	4a27      	ldr	r2, [pc, #156]	; (8005624 <UART_SetConfig+0x950>)
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800558e:	e00f      	b.n	80055b0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005590:	4b24      	ldr	r3, [pc, #144]	; (8005624 <UART_SetConfig+0x950>)
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005594:	e00c      	b.n	80055b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005596:	4b24      	ldr	r3, [pc, #144]	; (8005628 <UART_SetConfig+0x954>)
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800559a:	e009      	b.n	80055b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055a2:	e005      	b.n	80055b0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80055ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 8121 	beq.w	80057fa <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	4a17      	ldr	r2, [pc, #92]	; (800561c <UART_SetConfig+0x948>)
 80055be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ca:	005a      	lsls	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	441a      	add	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	b29b      	uxth	r3, r3
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d916      	bls.n	8005614 <UART_SetConfig+0x940>
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ec:	d212      	bcs.n	8005614 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f023 030f 	bic.w	r3, r3, #15
 80055f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	085b      	lsrs	r3, r3, #1
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	b29a      	uxth	r2, r3
 8005604:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005606:	4313      	orrs	r3, r2
 8005608:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	e0f2      	b.n	80057fa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800561a:	e0ee      	b.n	80057fa <UART_SetConfig+0xb26>
 800561c:	0800db4c 	.word	0x0800db4c
 8005620:	58024400 	.word	0x58024400
 8005624:	03d09000 	.word	0x03d09000
 8005628:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800562c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	f200 80b7 	bhi.w	80057a4 <UART_SetConfig+0xad0>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <UART_SetConfig+0x968>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005741 	.word	0x08005741
 8005640:	08005749 	.word	0x08005749
 8005644:	080057a5 	.word	0x080057a5
 8005648:	080057a5 	.word	0x080057a5
 800564c:	08005751 	.word	0x08005751
 8005650:	080057a5 	.word	0x080057a5
 8005654:	080057a5 	.word	0x080057a5
 8005658:	080057a5 	.word	0x080057a5
 800565c:	08005761 	.word	0x08005761
 8005660:	080057a5 	.word	0x080057a5
 8005664:	080057a5 	.word	0x080057a5
 8005668:	080057a5 	.word	0x080057a5
 800566c:	080057a5 	.word	0x080057a5
 8005670:	080057a5 	.word	0x080057a5
 8005674:	080057a5 	.word	0x080057a5
 8005678:	080057a5 	.word	0x080057a5
 800567c:	08005771 	.word	0x08005771
 8005680:	080057a5 	.word	0x080057a5
 8005684:	080057a5 	.word	0x080057a5
 8005688:	080057a5 	.word	0x080057a5
 800568c:	080057a5 	.word	0x080057a5
 8005690:	080057a5 	.word	0x080057a5
 8005694:	080057a5 	.word	0x080057a5
 8005698:	080057a5 	.word	0x080057a5
 800569c:	080057a5 	.word	0x080057a5
 80056a0:	080057a5 	.word	0x080057a5
 80056a4:	080057a5 	.word	0x080057a5
 80056a8:	080057a5 	.word	0x080057a5
 80056ac:	080057a5 	.word	0x080057a5
 80056b0:	080057a5 	.word	0x080057a5
 80056b4:	080057a5 	.word	0x080057a5
 80056b8:	080057a5 	.word	0x080057a5
 80056bc:	08005797 	.word	0x08005797
 80056c0:	080057a5 	.word	0x080057a5
 80056c4:	080057a5 	.word	0x080057a5
 80056c8:	080057a5 	.word	0x080057a5
 80056cc:	080057a5 	.word	0x080057a5
 80056d0:	080057a5 	.word	0x080057a5
 80056d4:	080057a5 	.word	0x080057a5
 80056d8:	080057a5 	.word	0x080057a5
 80056dc:	080057a5 	.word	0x080057a5
 80056e0:	080057a5 	.word	0x080057a5
 80056e4:	080057a5 	.word	0x080057a5
 80056e8:	080057a5 	.word	0x080057a5
 80056ec:	080057a5 	.word	0x080057a5
 80056f0:	080057a5 	.word	0x080057a5
 80056f4:	080057a5 	.word	0x080057a5
 80056f8:	080057a5 	.word	0x080057a5
 80056fc:	080057a5 	.word	0x080057a5
 8005700:	080057a5 	.word	0x080057a5
 8005704:	080057a5 	.word	0x080057a5
 8005708:	080057a5 	.word	0x080057a5
 800570c:	080057a5 	.word	0x080057a5
 8005710:	080057a5 	.word	0x080057a5
 8005714:	080057a5 	.word	0x080057a5
 8005718:	080057a5 	.word	0x080057a5
 800571c:	080057a5 	.word	0x080057a5
 8005720:	080057a5 	.word	0x080057a5
 8005724:	080057a5 	.word	0x080057a5
 8005728:	080057a5 	.word	0x080057a5
 800572c:	080057a5 	.word	0x080057a5
 8005730:	080057a5 	.word	0x080057a5
 8005734:	080057a5 	.word	0x080057a5
 8005738:	080057a5 	.word	0x080057a5
 800573c:	0800579d 	.word	0x0800579d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005740:	f7fe ff08 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8005744:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005746:	e033      	b.n	80057b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005748:	f7fe ff1a 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 800574c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800574e:	e02f      	b.n	80057b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	4618      	mov	r0, r3
 8005756:	f7fe ff3f 	bl	80045d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800575e:	e027      	b.n	80057b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005760:	f107 0308 	add.w	r3, r7, #8
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff f883 	bl	8004870 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800576e:	e01f      	b.n	80057b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005770:	4b2c      	ldr	r3, [pc, #176]	; (8005824 <UART_SetConfig+0xb50>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800577c:	4b29      	ldr	r3, [pc, #164]	; (8005824 <UART_SetConfig+0xb50>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	08db      	lsrs	r3, r3, #3
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	4a28      	ldr	r2, [pc, #160]	; (8005828 <UART_SetConfig+0xb54>)
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800578e:	e00f      	b.n	80057b0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <UART_SetConfig+0xb54>)
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005794:	e00c      	b.n	80057b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005796:	4b25      	ldr	r3, [pc, #148]	; (800582c <UART_SetConfig+0xb58>)
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800579a:	e009      	b.n	80057b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057a2:	e005      	b.n	80057b0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80057ae:	bf00      	nop
    }

    if (pclk != 0U)
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d021      	beq.n	80057fa <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <UART_SetConfig+0xb5c>)
 80057bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	441a      	add	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d8:	b29b      	uxth	r3, r3
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	2b0f      	cmp	r3, #15
 80057e0:	d908      	bls.n	80057f4 <UART_SetConfig+0xb20>
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e8:	d204      	bcs.n	80057f4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	e002      	b.n	80057fa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005816:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800581a:	4618      	mov	r0, r3
 800581c:	3738      	adds	r7, #56	; 0x38
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005824:	58024400 	.word	0x58024400
 8005828:	03d09000 	.word	0x03d09000
 800582c:	003d0900 	.word	0x003d0900
 8005830:	0800db4c 	.word	0x0800db4c

08005834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01a      	beq.n	800594a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005932:	d10a      	bne.n	800594a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	605a      	str	r2, [r3, #4]
  }
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af02      	add	r7, sp, #8
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005988:	f7fb fe0c 	bl	80015a4 <HAL_GetTick>
 800598c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b08      	cmp	r3, #8
 800599a:	d10e      	bne.n	80059ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f82c 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e022      	b.n	8005a00 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d10e      	bne.n	80059e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f816 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e00c      	b.n	8005a00 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a18:	e062      	b.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d05e      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fb fdbf 	bl	80015a4 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11d      	bne.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a46:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e045      	b.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d02e      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a90:	d126      	bne.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aaa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e00f      	b.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69da      	ldr	r2, [r3, #28]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d08d      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_UARTEx_DisableFifoMode+0x16>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e027      	b.n	8005b6e <HAL_UARTEx_DisableFifoMode+0x66>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2224      	movs	r2, #36	; 0x24
 8005b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0201 	bic.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e02d      	b.n	8005bee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2224      	movs	r2, #36	; 0x24
 8005b9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f850 	bl	8005c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e02d      	b.n	8005c6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2224      	movs	r2, #36	; 0x24
 8005c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0201 	bic.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f812 	bl	8005c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b089      	sub	sp, #36	; 0x24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005c7c:	4a2f      	ldr	r2, [pc, #188]	; (8005d3c <UARTEx_SetNbDataToProcess+0xc8>)
 8005c7e:	f107 0314 	add.w	r3, r7, #20
 8005c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c86:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005c8a:	4a2d      	ldr	r2, [pc, #180]	; (8005d40 <UARTEx_SetNbDataToProcess+0xcc>)
 8005c8c:	f107 030c 	add.w	r3, r7, #12
 8005c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c94:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d108      	bne.n	8005cb2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cb0:	e03d      	b.n	8005d2e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	0e5b      	lsrs	r3, r3, #25
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	0f5b      	lsrs	r3, r3, #29
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005cda:	7fbb      	ldrb	r3, [r7, #30]
 8005cdc:	7f3a      	ldrb	r2, [r7, #28]
 8005cde:	f107 0120 	add.w	r1, r7, #32
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005ce8:	fb02 f303 	mul.w	r3, r2, r3
 8005cec:	7f3a      	ldrb	r2, [r7, #28]
 8005cee:	f107 0120 	add.w	r1, r7, #32
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005d04:	7ffb      	ldrb	r3, [r7, #31]
 8005d06:	7f7a      	ldrb	r2, [r7, #29]
 8005d08:	f107 0120 	add.w	r1, r7, #32
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	7f7a      	ldrb	r2, [r7, #29]
 8005d18:	f107 0120 	add.w	r1, r7, #32
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005d22:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d2e:	bf00      	nop
 8005d30:	3724      	adds	r7, #36	; 0x24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	0800d998 	.word	0x0800d998
 8005d40:	0800d9a0 	.word	0x0800d9a0

08005d44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d44:	b084      	sub	sp, #16
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	f107 001c 	add.w	r0, r7, #28
 8005d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d120      	bne.n	8005d9e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	4b25      	ldr	r3, [pc, #148]	; (8005e04 <USB_CoreInit+0xc0>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d105      	bne.n	8005d92 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f94c 	bl	8006030 <USB_CoreReset>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	e01a      	b.n	8005dd4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f940 	bl	8006030 <USB_CoreReset>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8005dc6:	e005      	b.n	8005dd4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d10b      	bne.n	8005df2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f043 0206 	orr.w	r2, r3, #6
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dfe:	b004      	add	sp, #16
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	ffbdffbf 	.word	0xffbdffbf

08005e08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f043 0201 	orr.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f023 0201 	bic.w	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d106      	bne.n	8005e78 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60da      	str	r2, [r3, #12]
 8005e76:	e00b      	b.n	8005e90 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	e001      	b.n	8005e90 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e003      	b.n	8005e98 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005e90:	2032      	movs	r0, #50	; 0x32
 8005e92:	f7fb fb93 	bl	80015bc <HAL_Delay>

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	f043 0220 	orr.w	r2, r3, #32
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a09      	ldr	r2, [pc, #36]	; (8005ee8 <USB_FlushTxFifo+0x48>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d901      	bls.n	8005ecc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e006      	b.n	8005eda <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d0f0      	beq.n	8005eba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	00030d40 	.word	0x00030d40

08005eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2210      	movs	r2, #16
 8005efc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <USB_FlushRxFifo+0x40>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e006      	b.n	8005f1e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d0f0      	beq.n	8005efe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	00030d40 	.word	0x00030d40

08005f30 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b089      	sub	sp, #36	; 0x24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	460b      	mov	r3, r1
 8005f40:	71fb      	strb	r3, [r7, #7]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005f4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d11a      	bne.n	8005f8c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f56:	88bb      	ldrh	r3, [r7, #4]
 8005f58:	3303      	adds	r3, #3
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e00f      	b.n	8005f84 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	031a      	lsls	r2, r3, #12
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f70:	461a      	mov	r2, r3
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	3301      	adds	r3, #1
 8005f82:	61bb      	str	r3, [r7, #24]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d3eb      	bcc.n	8005f64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3724      	adds	r7, #36	; 0x24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b089      	sub	sp, #36	; 0x24
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	3303      	adds	r3, #3
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	e00b      	b.n	8005fd6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d3ef      	bcc.n	8005fbe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005fde:	69fb      	ldr	r3, [r7, #28]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3724      	adds	r7, #36	; 0x24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4013      	ands	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0301 	and.w	r3, r3, #1
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a13      	ldr	r2, [pc, #76]	; (8006094 <USB_CoreReset+0x64>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e01b      	b.n	8006086 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	daf2      	bge.n	800603c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f043 0201 	orr.w	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <USB_CoreReset+0x64>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d901      	bls.n	8006078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e006      	b.n	8006086 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d0f0      	beq.n	8006066 <USB_CoreReset+0x36>

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	00030d40 	.word	0x00030d40

08006098 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006098:	b084      	sub	sp, #16
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	f107 001c 	add.w	r0, r7, #28
 80060a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060b4:	461a      	mov	r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d018      	beq.n	8006110 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d10a      	bne.n	80060fa <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060f2:	f043 0304 	orr.w	r3, r3, #4
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e014      	b.n	8006124 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006108:	f023 0304 	bic.w	r3, r3, #4
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	e009      	b.n	8006124 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800611e:	f023 0304 	bic.w	r3, r3, #4
 8006122:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006124:	2110      	movs	r1, #16
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff feba 	bl	8005ea0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fedd 	bl	8005eec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	e015      	b.n	8006164 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	461a      	mov	r2, r3
 8006146:	f04f 33ff 	mov.w	r3, #4294967295
 800614a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4413      	add	r3, r2
 8006154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006158:	461a      	mov	r2, r3
 800615a:	2300      	movs	r3, #0
 800615c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3301      	adds	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	429a      	cmp	r2, r3
 800616a:	d3e5      	bcc.n	8006138 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800616c:	2101      	movs	r1, #1
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f882 	bl	8006278 <USB_DriveVbus>

  HAL_Delay(200U);
 8006174:	20c8      	movs	r0, #200	; 0xc8
 8006176:	f7fb fa21 	bl	80015bc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f04f 32ff 	mov.w	r2, #4294967295
 8006186:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800619a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a14      	ldr	r2, [pc, #80]	; (80061f0 <USB_HostInit+0x158>)
 80061a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <USB_HostInit+0x15c>)
 80061a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80061aa:	e009      	b.n	80061c0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <USB_HostInit+0x160>)
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a10      	ldr	r2, [pc, #64]	; (80061fc <USB_HostInit+0x164>)
 80061bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f043 0210 	orr.w	r2, r3, #16
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <USB_HostInit+0x168>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061ea:	b004      	add	sp, #16
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	01000200 	.word	0x01000200
 80061f4:	00e00300 	.word	0x00e00300
 80061f8:	00600080 	.word	0x00600080
 80061fc:	004000e0 	.word	0x004000e0
 8006200:	a3200008 	.word	0xa3200008

08006204 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	68f9      	ldr	r1, [r7, #12]
 8006238:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800623c:	4313      	orrs	r3, r2
 800623e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d107      	bne.n	8006256 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800624c:	461a      	mov	r2, r3
 800624e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006252:	6053      	str	r3, [r2, #4]
 8006254:	e009      	b.n	800626a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d106      	bne.n	800626a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006262:	461a      	mov	r2, r3
 8006264:	f241 7370 	movw	r3, #6000	; 0x1770
 8006268:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800629c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <USB_DriveVbus+0x44>
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d106      	bne.n	80062bc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062ba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c6:	d109      	bne.n	80062dc <USB_DriveVbus+0x64>
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062da:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	b29b      	uxth	r3, r3
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	4603      	mov	r3, r0
 800631c:	70fb      	strb	r3, [r7, #3]
 800631e:	460b      	mov	r3, r1
 8006320:	70bb      	strb	r3, [r7, #2]
 8006322:	4613      	mov	r3, r2
 8006324:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633a:	461a      	mov	r2, r3
 800633c:	f04f 33ff 	mov.w	r3, #4294967295
 8006340:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006342:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006346:	2b03      	cmp	r3, #3
 8006348:	d87e      	bhi.n	8006448 <USB_HC_Init+0x13c>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <USB_HC_Init+0x44>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006361 	.word	0x08006361
 8006354:	0800640b 	.word	0x0800640b
 8006358:	08006361 	.word	0x08006361
 800635c:	080063cd 	.word	0x080063cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	461a      	mov	r2, r3
 800636e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006372:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006374:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006378:	2b00      	cmp	r3, #0
 800637a:	da10      	bge.n	800639e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4413      	add	r3, r2
 8006384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	78fa      	ldrb	r2, [r7, #3]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	440a      	add	r2, r1
 8006392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800639c:	e057      	b.n	800644e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d051      	beq.n	800644e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80063c8:	60d3      	str	r3, [r2, #12]
      break;
 80063ca:	e040      	b.n	800644e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d8:	461a      	mov	r2, r3
 80063da:	f240 639d 	movw	r3, #1693	; 0x69d
 80063de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	da34      	bge.n	8006452 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006406:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006408:	e023      	b.n	8006452 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	461a      	mov	r2, r3
 8006418:	f240 2325 	movw	r3, #549	; 0x225
 800641c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800641e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006422:	2b00      	cmp	r3, #0
 8006424:	da17      	bge.n	8006456 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	78fa      	ldrb	r2, [r7, #3]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	440a      	add	r2, r1
 800643c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006440:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006444:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006446:	e006      	b.n	8006456 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
      break;
 800644c:	e004      	b.n	8006458 <USB_HC_Init+0x14c>
      break;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <USB_HC_Init+0x14c>
      break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <USB_HC_Init+0x14c>
      break;
 8006456:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800645e:	699a      	ldr	r2, [r3, #24]
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	2101      	movs	r1, #1
 8006468:	fa01 f303 	lsl.w	r3, r1, r3
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006472:	4313      	orrs	r3, r2
 8006474:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006482:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006486:	2b00      	cmp	r3, #0
 8006488:	da03      	bge.n	8006492 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800648a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	e001      	b.n	8006496 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006496:	f897 3020 	ldrb.w	r3, [r7, #32]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d103      	bne.n	80064a6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800649e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e001      	b.n	80064aa <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064aa:	787b      	ldrb	r3, [r7, #1]
 80064ac:	059b      	lsls	r3, r3, #22
 80064ae:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064b2:	78bb      	ldrb	r3, [r7, #2]
 80064b4:	02db      	lsls	r3, r3, #11
 80064b6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064ba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064c0:	049b      	lsls	r3, r3, #18
 80064c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064c6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064ce:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	0159      	lsls	r1, r3, #5
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	440b      	add	r3, r1
 80064dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064e6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80064e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d10f      	bne.n	8006510 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	440a      	add	r2, r1
 8006506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800650a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800650e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
}
 8006512:	4618      	mov	r0, r3
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop

08006520 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	4613      	mov	r3, r2
 800652c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800653c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d028      	beq.n	800659c <USB_HC_StartXfer+0x7c>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	791b      	ldrb	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d124      	bne.n	800659c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10b      	bne.n	8006570 <USB_HC_StartXfer+0x50>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	795b      	ldrb	r3, [r3, #5]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d107      	bne.n	8006570 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	785b      	ldrb	r3, [r3, #1]
 8006564:	4619      	mov	r1, r3
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fa2e 	bl	80069c8 <USB_DoPing>
      return HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	e112      	b.n	8006796 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d112      	bne.n	800659c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	4413      	add	r3, r2
 800657e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	6a3a      	ldr	r2, [r7, #32]
 800658a:	440a      	add	r2, r1
 800658c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006590:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006594:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2200      	movs	r2, #0
 800659a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d018      	beq.n	80065d6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	8912      	ldrh	r2, [r2, #8]
 80065ac:	4413      	add	r3, r2
 80065ae:	3b01      	subs	r3, #1
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	8912      	ldrh	r2, [r2, #8]
 80065b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065b8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80065ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80065bc:	8b7b      	ldrh	r3, [r7, #26]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d90b      	bls.n	80065da <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80065c2:	8b7b      	ldrh	r3, [r7, #26]
 80065c4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80065c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	8912      	ldrh	r2, [r2, #8]
 80065cc:	fb02 f203 	mul.w	r2, r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	611a      	str	r2, [r3, #16]
 80065d4:	e001      	b.n	80065da <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80065d6:	2301      	movs	r3, #1
 80065d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	78db      	ldrb	r3, [r3, #3]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d006      	beq.n	80065f0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80065e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	8912      	ldrh	r2, [r2, #8]
 80065e8:	fb02 f203 	mul.w	r2, r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065fa:	04d9      	lsls	r1, r3, #19
 80065fc:	4b68      	ldr	r3, [pc, #416]	; (80067a0 <USB_HC_StartXfer+0x280>)
 80065fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006600:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	7a9b      	ldrb	r3, [r3, #10]
 8006606:	075b      	lsls	r3, r3, #29
 8006608:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800660c:	69f9      	ldr	r1, [r7, #28]
 800660e:	0148      	lsls	r0, r1, #5
 8006610:	6a39      	ldr	r1, [r7, #32]
 8006612:	4401      	add	r1, r0
 8006614:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006618:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800661a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68d9      	ldr	r1, [r3, #12]
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	460a      	mov	r2, r1
 8006634:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	bf0c      	ite	eq
 8006646:	2301      	moveq	r3, #1
 8006648:	2300      	movne	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	4413      	add	r3, r2
 8006656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	440a      	add	r2, r1
 8006664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006668:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800666c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	7e7b      	ldrb	r3, [r7, #25]
 800667e:	075b      	lsls	r3, r3, #29
 8006680:	69f9      	ldr	r1, [r7, #28]
 8006682:	0148      	lsls	r0, r1, #5
 8006684:	6a39      	ldr	r1, [r7, #32]
 8006686:	4401      	add	r1, r0
 8006688:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800668c:	4313      	orrs	r3, r2
 800668e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a41      	ldr	r2, [pc, #260]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066a0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066a2:	4b40      	ldr	r3, [pc, #256]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066aa:	4a3e      	ldr	r2, [pc, #248]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066ac:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	78db      	ldrb	r3, [r3, #3]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d006      	beq.n	80066c4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066b6:	4b3b      	ldr	r3, [pc, #236]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066be:	4a39      	ldr	r2, [pc, #228]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e005      	b.n	80066d0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066c4:	4b37      	ldr	r3, [pc, #220]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066cc:	4a35      	ldr	r2, [pc, #212]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066ce:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066d0:	4b34      	ldr	r3, [pc, #208]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d8:	4a32      	ldr	r2, [pc, #200]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066da:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e8:	461a      	mov	r2, r3
 80066ea:	4b2e      	ldr	r3, [pc, #184]	; (80067a4 <USB_HC_StartXfer+0x284>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d14e      	bne.n	8006794 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	78db      	ldrb	r3, [r3, #3]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d14a      	bne.n	8006794 <USB_HC_StartXfer+0x274>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d046      	beq.n	8006794 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	79db      	ldrb	r3, [r3, #7]
 800670a:	2b03      	cmp	r3, #3
 800670c:	d830      	bhi.n	8006770 <USB_HC_StartXfer+0x250>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <USB_HC_StartXfer+0x1f4>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	08006725 	.word	0x08006725
 8006718:	08006749 	.word	0x08006749
 800671c:	08006725 	.word	0x08006725
 8006720:	08006749 	.word	0x08006749
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	3303      	adds	r3, #3
 800672a:	089b      	lsrs	r3, r3, #2
 800672c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800672e:	8afa      	ldrh	r2, [r7, #22]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	b29b      	uxth	r3, r3
 8006736:	429a      	cmp	r2, r3
 8006738:	d91c      	bls.n	8006774 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f043 0220 	orr.w	r2, r3, #32
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	619a      	str	r2, [r3, #24]
          }
          break;
 8006746:	e015      	b.n	8006774 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	3303      	adds	r3, #3
 800674e:	089b      	lsrs	r3, r3, #2
 8006750:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006752:	8afa      	ldrh	r2, [r7, #22]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	b29b      	uxth	r3, r3
 800675e:	429a      	cmp	r2, r3
 8006760:	d90a      	bls.n	8006778 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	619a      	str	r2, [r3, #24]
          }
          break;
 800676e:	e003      	b.n	8006778 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006770:	bf00      	nop
 8006772:	e002      	b.n	800677a <USB_HC_StartXfer+0x25a>
          break;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <USB_HC_StartXfer+0x25a>
          break;
 8006778:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	68d9      	ldr	r1, [r3, #12]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	785a      	ldrb	r2, [r3, #1]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	b298      	uxth	r0, r3
 8006788:	2300      	movs	r3, #0
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	4603      	mov	r3, r0
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fbce 	bl	8005f30 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3728      	adds	r7, #40	; 0x28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	1ff80000 	.word	0x1ff80000
 80067a4:	200000b4 	.word	0x200000b4

080067a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	b29b      	uxth	r3, r3
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b087      	sub	sp, #28
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	0c9b      	lsrs	r3, r3, #18
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <USB_HC_Halt+0x3a>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d16c      	bne.n	80068de <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4413      	add	r3, r2
 800680c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	440a      	add	r2, r1
 800681a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800681e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006822:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d143      	bne.n	80068b8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800684e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	440a      	add	r2, r1
 8006866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800686e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	440a      	add	r2, r1
 8006886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800688a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800688e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	3301      	adds	r3, #1
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800689c:	d81d      	bhi.n	80068da <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b4:	d0ec      	beq.n	8006890 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068b6:	e080      	b.n	80069ba <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068d6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068d8:	e06f      	b.n	80069ba <USB_HC_Halt+0x1f0>
          break;
 80068da:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068dc:	e06d      	b.n	80069ba <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068fc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d143      	bne.n	8006996 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	440a      	add	r2, r1
 8006924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800692c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	440a      	add	r2, r1
 8006944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006948:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800694c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	440a      	add	r2, r1
 8006964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800696c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	3301      	adds	r3, #1
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800697a:	d81d      	bhi.n	80069b8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800698e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006992:	d0ec      	beq.n	800696e <USB_HC_Halt+0x1a4>
 8006994:	e011      	b.n	80069ba <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	e000      	b.n	80069ba <USB_HC_Halt+0x1f0>
          break;
 80069b8:	bf00      	nop
    }
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80069dc:	2301      	movs	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	04da      	lsls	r2, r3, #19
 80069e4:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <USB_DoPing+0x74>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a10:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a18:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a26:	461a      	mov	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	1ff80000 	.word	0x1ff80000

08006a40 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff f9ea 	bl	8005e2a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006a56:	2110      	movs	r1, #16
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff fa21 	bl	8005ea0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fa44 	bl	8005eec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a64:	2300      	movs	r3, #0
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	e01f      	b.n	8006aaa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a90:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b0f      	cmp	r3, #15
 8006aae:	d9dc      	bls.n	8006a6a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	e034      	b.n	8006b20 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006adc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	461a      	mov	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	3301      	adds	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afc:	d80c      	bhi.n	8006b18 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b14:	d0ec      	beq.n	8006af0 <USB_StopHost+0xb0>
 8006b16:	e000      	b.n	8006b1a <USB_StopHost+0xda>
        break;
 8006b18:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b0f      	cmp	r3, #15
 8006b24:	d9c7      	bls.n	8006ab6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b32:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff f963 	bl	8005e08 <USB_EnableGlobalInt>

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006b50:	4904      	ldr	r1, [pc, #16]	; (8006b64 <MX_FATFS_Init+0x18>)
 8006b52:	4805      	ldr	r0, [pc, #20]	; (8006b68 <MX_FATFS_Init+0x1c>)
 8006b54:	f005 fd5c 	bl	800c610 <FATFS_LinkDriver>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4b03      	ldr	r3, [pc, #12]	; (8006b6c <MX_FATFS_Init+0x20>)
 8006b5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b60:	bf00      	nop
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	200004bc 	.word	0x200004bc
 8006b68:	0800db64 	.word	0x0800db64
 8006b6c:	20002528 	.word	0x20002528

08006b70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006ba6:	79fb      	ldrb	r3, [r7, #7]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4808      	ldr	r0, [pc, #32]	; (8006bcc <USBH_status+0x34>)
 8006bac:	f001 fa43 	bl	8008036 <USBH_MSC_UnitIsReady>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <USBH_status+0x24>
  {
    res = RES_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
 8006bba:	e001      	b.n	8006bc0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	2000252c 	.word	0x2000252c

08006bd0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b094      	sub	sp, #80	; 0x50
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006be6:	7bf9      	ldrb	r1, [r7, #15]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4812      	ldr	r0, [pc, #72]	; (8006c3c <USBH_read+0x6c>)
 8006bf2:	f001 fa6a 	bl	80080ca <USBH_MSC_Read>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <USBH_read+0x34>
  {
    res = RES_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006c02:	e015      	b.n	8006c30 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006c04:	f107 0210 	add.w	r2, r7, #16
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	480b      	ldr	r0, [pc, #44]	; (8006c3c <USBH_read+0x6c>)
 8006c0e:	f001 fa38 	bl	8008082 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006c12:	7f7b      	ldrb	r3, [r7, #29]
 8006c14:	2b28      	cmp	r3, #40	; 0x28
 8006c16:	d003      	beq.n	8006c20 <USBH_read+0x50>
 8006c18:	2b3a      	cmp	r3, #58	; 0x3a
 8006c1a:	d001      	beq.n	8006c20 <USBH_read+0x50>
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d103      	bne.n	8006c28 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006c20:	2303      	movs	r3, #3
 8006c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006c26:	e003      	b.n	8006c30 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006c2e:	bf00      	nop
    }
  }

  return res;
 8006c30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3748      	adds	r7, #72	; 0x48
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	2000252c 	.word	0x2000252c

08006c40 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b094      	sub	sp, #80	; 0x50
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006c56:	7bf9      	ldrb	r1, [r7, #15]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	4817      	ldr	r0, [pc, #92]	; (8006cc0 <USBH_write+0x80>)
 8006c62:	f001 fa9b 	bl	800819c <USBH_MSC_Write>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <USBH_write+0x34>
  {
    res = RES_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006c72:	e01f      	b.n	8006cb4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006c74:	f107 0210 	add.w	r2, r7, #16
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4810      	ldr	r0, [pc, #64]	; (8006cc0 <USBH_write+0x80>)
 8006c7e:	f001 fa00 	bl	8008082 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006c82:	7f7b      	ldrb	r3, [r7, #29]
 8006c84:	2b27      	cmp	r3, #39	; 0x27
 8006c86:	d009      	beq.n	8006c9c <USBH_write+0x5c>
 8006c88:	2b27      	cmp	r3, #39	; 0x27
 8006c8a:	dc02      	bgt.n	8006c92 <USBH_write+0x52>
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d009      	beq.n	8006ca4 <USBH_write+0x64>
 8006c90:	e00c      	b.n	8006cac <USBH_write+0x6c>
 8006c92:	2b28      	cmp	r3, #40	; 0x28
 8006c94:	d006      	beq.n	8006ca4 <USBH_write+0x64>
 8006c96:	2b3a      	cmp	r3, #58	; 0x3a
 8006c98:	d004      	beq.n	8006ca4 <USBH_write+0x64>
 8006c9a:	e007      	b.n	8006cac <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006ca2:	e007      	b.n	8006cb4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006caa:	e003      	b.n	8006cb4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006cb2:	bf00      	nop
    }
  }

  return res;
 8006cb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3748      	adds	r7, #72	; 0x48
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	2000252c 	.word	0x2000252c

08006cc4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b090      	sub	sp, #64	; 0x40
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	603a      	str	r2, [r7, #0]
 8006cce:	71fb      	strb	r3, [r7, #7]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006cda:	79bb      	ldrb	r3, [r7, #6]
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d852      	bhi.n	8006d86 <USBH_ioctl+0xc2>
 8006ce0:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <USBH_ioctl+0x24>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006cf9 	.word	0x08006cf9
 8006cec:	08006d01 	.word	0x08006d01
 8006cf0:	08006d2b 	.word	0x08006d2b
 8006cf4:	08006d57 	.word	0x08006d57
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006cfe:	e045      	b.n	8006d8c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006d00:	f107 0208 	add.w	r2, r7, #8
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	4619      	mov	r1, r3
 8006d08:	4823      	ldr	r0, [pc, #140]	; (8006d98 <USBH_ioctl+0xd4>)
 8006d0a:	f001 f9ba 	bl	8008082 <USBH_MSC_GetLUNInfo>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d106      	bne.n	8006d22 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006d20:	e034      	b.n	8006d8c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006d28:	e030      	b.n	8006d8c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006d2a:	f107 0208 	add.w	r2, r7, #8
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	4619      	mov	r1, r3
 8006d32:	4819      	ldr	r0, [pc, #100]	; (8006d98 <USBH_ioctl+0xd4>)
 8006d34:	f001 f9a5 	bl	8008082 <USBH_MSC_GetLUNInfo>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006d3e:	8a3b      	ldrh	r3, [r7, #16]
 8006d40:	461a      	mov	r2, r3
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006d4c:	e01e      	b.n	8006d8c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006d54:	e01a      	b.n	8006d8c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006d56:	f107 0208 	add.w	r2, r7, #8
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	480e      	ldr	r0, [pc, #56]	; (8006d98 <USBH_ioctl+0xd4>)
 8006d60:	f001 f98f 	bl	8008082 <USBH_MSC_GetLUNInfo>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006d6a:	8a3b      	ldrh	r3, [r7, #16]
 8006d6c:	0a5b      	lsrs	r3, r3, #9
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006d7c:	e006      	b.n	8006d8c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006d84:	e002      	b.n	8006d8c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006d86:	2304      	movs	r3, #4
 8006d88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006d8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3740      	adds	r7, #64	; 0x40
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	2000252c 	.word	0x2000252c

08006d9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006db0:	2302      	movs	r3, #2
 8006db2:	e029      	b.n	8006e08 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	79fa      	ldrb	r2, [r7, #7]
 8006db8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f81f 	bl	8006e10 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f005 fd4d 	bl	800c8a0 <USBH_LL_Init>

  return USBH_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e009      	b.n	8006e36 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	33e0      	adds	r3, #224	; 0xe0
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3301      	adds	r3, #1
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b0e      	cmp	r3, #14
 8006e3a:	d9f2      	bls.n	8006e22 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	e009      	b.n	8006e56 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5c:	d3f1      	bcc.n	8006e42 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2240      	movs	r2, #64	; 0x40
 8006e82:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d016      	beq.n	8006efa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10e      	bne.n	8006ef4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006edc:	1c59      	adds	r1, r3, #1
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	33de      	adds	r3, #222	; 0xde
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
 8006ef2:	e004      	b.n	8006efe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	73fb      	strb	r3, [r7, #15]
 8006ef8:	e001      	b.n	8006efe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006efa:	2302      	movs	r3, #2
 8006efc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f22:	78fa      	ldrb	r2, [r7, #3]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d204      	bcs.n	8006f32 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006f30:	e001      	b.n	8006f36 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f32:	2302      	movs	r3, #2
 8006f34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	4611      	mov	r1, r2
 8006f50:	461a      	mov	r2, r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	70fb      	strb	r3, [r7, #3]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70bb      	strb	r3, [r7, #2]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f6c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f6e:	e025      	b.n	8006fbc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	221a      	movs	r2, #26
 8006f74:	fb02 f303 	mul.w	r3, r2, r3
 8006f78:	3308      	adds	r3, #8
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	3302      	adds	r3, #2
 8006f80:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	795b      	ldrb	r3, [r3, #5]
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d002      	beq.n	8006f92 <USBH_FindInterface+0x4e>
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	2bff      	cmp	r3, #255	; 0xff
 8006f90:	d111      	bne.n	8006fb6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f96:	78ba      	ldrb	r2, [r7, #2]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d002      	beq.n	8006fa2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f9c:	78bb      	ldrb	r3, [r7, #2]
 8006f9e:	2bff      	cmp	r3, #255	; 0xff
 8006fa0:	d109      	bne.n	8006fb6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fa6:	787a      	ldrb	r2, [r7, #1]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d002      	beq.n	8006fb2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fac:	787b      	ldrb	r3, [r7, #1]
 8006fae:	2bff      	cmp	r3, #255	; 0xff
 8006fb0:	d101      	bne.n	8006fb6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	e006      	b.n	8006fc4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d9d6      	bls.n	8006f70 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006fc2:	23ff      	movs	r3, #255	; 0xff
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f005 fc9d 	bl	800c918 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006fde:	2101      	movs	r1, #1
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f005 fd74 	bl	800cace <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f804 	bl	8007032 <USBH_HandleSof>
}
 800702a:	bf00      	nop
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b0b      	cmp	r3, #11
 8007042:	d10a      	bne.n	800705a <USBH_HandleSof+0x28>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
  }
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007072:	bf00      	nop
}
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800708e:	bf00      	nop
}
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f005 fc30 	bl	800c94e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	791b      	ldrb	r3, [r3, #4]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 fe5b 	bl	8008db0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	795b      	ldrb	r3, [r3, #5]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 fe55 	bl	8008db0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	789b      	ldrb	r3, [r3, #2]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d10f      	bne.n	8007144 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	b29a      	uxth	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007144:	2200      	movs	r2, #0
 8007146:	2100      	movs	r1, #0
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f805 	bl	8007158 <USBH_CtlReq>
 800714e:	4603      	mov	r3, r0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007166:	2301      	movs	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	789b      	ldrb	r3, [r3, #2]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d002      	beq.n	8007178 <USBH_CtlReq+0x20>
 8007172:	2b02      	cmp	r3, #2
 8007174:	d00f      	beq.n	8007196 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007176:	e027      	b.n	80071c8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	88fa      	ldrh	r2, [r7, #6]
 8007182:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2202      	movs	r2, #2
 800718e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007190:	2301      	movs	r3, #1
 8007192:	75fb      	strb	r3, [r7, #23]
      break;
 8007194:	e018      	b.n	80071c8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f81c 	bl	80071d4 <USBH_HandleControl>
 800719c:	4603      	mov	r3, r0
 800719e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <USBH_CtlReq+0x54>
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d106      	bne.n	80071ba <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	761a      	strb	r2, [r3, #24]
      break;
 80071b8:	e005      	b.n	80071c6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d102      	bne.n	80071c6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	709a      	strb	r2, [r3, #2]
      break;
 80071c6:	bf00      	nop
  }
  return status;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af02      	add	r7, sp, #8
 80071da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80071dc:	2301      	movs	r3, #1
 80071de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7e1b      	ldrb	r3, [r3, #24]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	2b0a      	cmp	r3, #10
 80071ec:	f200 8158 	bhi.w	80074a0 <USBH_HandleControl+0x2cc>
 80071f0:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <USBH_HandleControl+0x24>)
 80071f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f6:	bf00      	nop
 80071f8:	08007225 	.word	0x08007225
 80071fc:	0800723f 	.word	0x0800723f
 8007200:	080072a9 	.word	0x080072a9
 8007204:	080072cf 	.word	0x080072cf
 8007208:	08007307 	.word	0x08007307
 800720c:	08007333 	.word	0x08007333
 8007210:	08007385 	.word	0x08007385
 8007214:	080073a7 	.word	0x080073a7
 8007218:	080073e3 	.word	0x080073e3
 800721c:	0800740b 	.word	0x0800740b
 8007220:	08007449 	.word	0x08007449
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f103 0110 	add.w	r1, r3, #16
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	795b      	ldrb	r3, [r3, #5]
 800722e:	461a      	mov	r2, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f945 	bl	80074c0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	761a      	strb	r2, [r3, #24]
      break;
 800723c:	e13b      	b.n	80074b6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	795b      	ldrb	r3, [r3, #5]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f005 fc2f 	bl	800caa8 <USBH_LL_GetURBState>
 800724a:	4603      	mov	r3, r0
 800724c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d11e      	bne.n	8007292 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	7c1b      	ldrb	r3, [r3, #16]
 8007258:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800725c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	8adb      	ldrh	r3, [r3, #22]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007266:	7b7b      	ldrb	r3, [r7, #13]
 8007268:	2b80      	cmp	r3, #128	; 0x80
 800726a:	d103      	bne.n	8007274 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2203      	movs	r2, #3
 8007270:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007272:	e117      	b.n	80074a4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2205      	movs	r2, #5
 8007278:	761a      	strb	r2, [r3, #24]
      break;
 800727a:	e113      	b.n	80074a4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800727c:	7b7b      	ldrb	r3, [r7, #13]
 800727e:	2b80      	cmp	r3, #128	; 0x80
 8007280:	d103      	bne.n	800728a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2209      	movs	r2, #9
 8007286:	761a      	strb	r2, [r3, #24]
      break;
 8007288:	e10c      	b.n	80074a4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2207      	movs	r2, #7
 800728e:	761a      	strb	r2, [r3, #24]
      break;
 8007290:	e108      	b.n	80074a4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b04      	cmp	r3, #4
 8007296:	d003      	beq.n	80072a0 <USBH_HandleControl+0xcc>
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2b02      	cmp	r3, #2
 800729c:	f040 8102 	bne.w	80074a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	220b      	movs	r2, #11
 80072a4:	761a      	strb	r2, [r3, #24]
      break;
 80072a6:	e0fd      	b.n	80074a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6899      	ldr	r1, [r3, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	899a      	ldrh	r2, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	791b      	ldrb	r3, [r3, #4]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f93c 	bl	800753e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2204      	movs	r2, #4
 80072ca:	761a      	strb	r2, [r3, #24]
      break;
 80072cc:	e0f3      	b.n	80074b6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	791b      	ldrb	r3, [r3, #4]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f005 fbe7 	bl	800caa8 <USBH_LL_GetURBState>
 80072da:	4603      	mov	r3, r0
 80072dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d102      	bne.n	80072ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2209      	movs	r2, #9
 80072e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	d102      	bne.n	80072f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80072f0:	2303      	movs	r3, #3
 80072f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80072f4:	e0d8      	b.n	80074a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	f040 80d5 	bne.w	80074a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	220b      	movs	r2, #11
 8007302:	761a      	strb	r2, [r3, #24]
      break;
 8007304:	e0d0      	b.n	80074a8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6899      	ldr	r1, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	899a      	ldrh	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7958      	ldrb	r0, [r3, #5]
 8007312:	2301      	movs	r3, #1
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4603      	mov	r3, r0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f8eb 	bl	80074f4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007324:	b29a      	uxth	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2206      	movs	r2, #6
 800732e:	761a      	strb	r2, [r3, #24]
      break;
 8007330:	e0c1      	b.n	80074b6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	795b      	ldrb	r3, [r3, #5]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f005 fbb5 	bl	800caa8 <USBH_LL_GetURBState>
 800733e:	4603      	mov	r3, r0
 8007340:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d103      	bne.n	8007350 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2207      	movs	r2, #7
 800734c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800734e:	e0ad      	b.n	80074ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	2b05      	cmp	r3, #5
 8007354:	d105      	bne.n	8007362 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	220c      	movs	r2, #12
 800735a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800735c:	2303      	movs	r3, #3
 800735e:	73fb      	strb	r3, [r7, #15]
      break;
 8007360:	e0a4      	b.n	80074ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d103      	bne.n	8007370 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2205      	movs	r2, #5
 800736c:	761a      	strb	r2, [r3, #24]
      break;
 800736e:	e09d      	b.n	80074ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	2b04      	cmp	r3, #4
 8007374:	f040 809a 	bne.w	80074ac <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	220b      	movs	r2, #11
 800737c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800737e:	2302      	movs	r3, #2
 8007380:	73fb      	strb	r3, [r7, #15]
      break;
 8007382:	e093      	b.n	80074ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	791b      	ldrb	r3, [r3, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	2100      	movs	r1, #0
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f8d6 	bl	800753e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007398:	b29a      	uxth	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2208      	movs	r2, #8
 80073a2:	761a      	strb	r2, [r3, #24]

      break;
 80073a4:	e087      	b.n	80074b6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	791b      	ldrb	r3, [r3, #4]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f005 fb7b 	bl	800caa8 <USBH_LL_GetURBState>
 80073b2:	4603      	mov	r3, r0
 80073b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d105      	bne.n	80073c8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	220d      	movs	r2, #13
 80073c0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80073c6:	e073      	b.n	80074b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d103      	bne.n	80073d6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	220b      	movs	r2, #11
 80073d2:	761a      	strb	r2, [r3, #24]
      break;
 80073d4:	e06c      	b.n	80074b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b05      	cmp	r3, #5
 80073da:	d169      	bne.n	80074b0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80073dc:	2303      	movs	r3, #3
 80073de:	73fb      	strb	r3, [r7, #15]
      break;
 80073e0:	e066      	b.n	80074b0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	795a      	ldrb	r2, [r3, #5]
 80073e6:	2301      	movs	r3, #1
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	4613      	mov	r3, r2
 80073ec:	2200      	movs	r2, #0
 80073ee:	2100      	movs	r1, #0
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f87f 	bl	80074f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	220a      	movs	r2, #10
 8007406:	761a      	strb	r2, [r3, #24]
      break;
 8007408:	e055      	b.n	80074b6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	795b      	ldrb	r3, [r3, #5]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f005 fb49 	bl	800caa8 <USBH_LL_GetURBState>
 8007416:	4603      	mov	r3, r0
 8007418:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d105      	bne.n	800742c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	220d      	movs	r2, #13
 8007428:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800742a:	e043      	b.n	80074b4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	2b02      	cmp	r3, #2
 8007430:	d103      	bne.n	800743a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2209      	movs	r2, #9
 8007436:	761a      	strb	r2, [r3, #24]
      break;
 8007438:	e03c      	b.n	80074b4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b04      	cmp	r3, #4
 800743e:	d139      	bne.n	80074b4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	220b      	movs	r2, #11
 8007444:	761a      	strb	r2, [r3, #24]
      break;
 8007446:	e035      	b.n	80074b4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7e5b      	ldrb	r3, [r3, #25]
 800744c:	3301      	adds	r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	765a      	strb	r2, [r3, #25]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7e5b      	ldrb	r3, [r3, #25]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d806      	bhi.n	800746a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007468:	e025      	b.n	80074b6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007470:	2106      	movs	r1, #6
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	795b      	ldrb	r3, [r3, #5]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 fc94 	bl	8008db0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	791b      	ldrb	r3, [r3, #4]
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fc8e 	bl	8008db0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800749a:	2302      	movs	r3, #2
 800749c:	73fb      	strb	r3, [r7, #15]
      break;
 800749e:	e00a      	b.n	80074b6 <USBH_HandleControl+0x2e2>

    default:
      break;
 80074a0:	bf00      	nop
 80074a2:	e008      	b.n	80074b6 <USBH_HandleControl+0x2e2>
      break;
 80074a4:	bf00      	nop
 80074a6:	e006      	b.n	80074b6 <USBH_HandleControl+0x2e2>
      break;
 80074a8:	bf00      	nop
 80074aa:	e004      	b.n	80074b6 <USBH_HandleControl+0x2e2>
      break;
 80074ac:	bf00      	nop
 80074ae:	e002      	b.n	80074b6 <USBH_HandleControl+0x2e2>
      break;
 80074b0:	bf00      	nop
 80074b2:	e000      	b.n	80074b6 <USBH_HandleControl+0x2e2>
      break;
 80074b4:	bf00      	nop
  }

  return status;
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af04      	add	r7, sp, #16
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	4613      	mov	r3, r2
 80074cc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80074ce:	79f9      	ldrb	r1, [r7, #7]
 80074d0:	2300      	movs	r3, #0
 80074d2:	9303      	str	r3, [sp, #12]
 80074d4:	2308      	movs	r3, #8
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	9301      	str	r3, [sp, #4]
 80074dc:	2300      	movs	r3, #0
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2300      	movs	r3, #0
 80074e2:	2200      	movs	r2, #0
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f005 faae 	bl	800ca46 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af04      	add	r7, sp, #16
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4611      	mov	r1, r2
 8007500:	461a      	mov	r2, r3
 8007502:	460b      	mov	r3, r1
 8007504:	80fb      	strh	r3, [r7, #6]
 8007506:	4613      	mov	r3, r2
 8007508:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007518:	7979      	ldrb	r1, [r7, #5]
 800751a:	7e3b      	ldrb	r3, [r7, #24]
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	9302      	str	r3, [sp, #8]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	2301      	movs	r3, #1
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	2300      	movs	r3, #0
 800752c:	2200      	movs	r2, #0
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f005 fa89 	bl	800ca46 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b088      	sub	sp, #32
 8007542:	af04      	add	r7, sp, #16
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	4611      	mov	r1, r2
 800754a:	461a      	mov	r2, r3
 800754c:	460b      	mov	r3, r1
 800754e:	80fb      	strh	r3, [r7, #6]
 8007550:	4613      	mov	r3, r2
 8007552:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007554:	7979      	ldrb	r1, [r7, #5]
 8007556:	2300      	movs	r3, #0
 8007558:	9303      	str	r3, [sp, #12]
 800755a:	88fb      	ldrh	r3, [r7, #6]
 800755c:	9302      	str	r3, [sp, #8]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	2301      	movs	r3, #1
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	2300      	movs	r3, #0
 8007568:	2201      	movs	r2, #1
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f005 fa6b 	bl	800ca46 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007570:	2300      	movs	r3, #0

}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b088      	sub	sp, #32
 800757e:	af04      	add	r7, sp, #16
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	4611      	mov	r1, r2
 8007586:	461a      	mov	r2, r3
 8007588:	460b      	mov	r3, r1
 800758a:	80fb      	strh	r3, [r7, #6]
 800758c:	4613      	mov	r3, r2
 800758e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800759e:	7979      	ldrb	r1, [r7, #5]
 80075a0:	7e3b      	ldrb	r3, [r7, #24]
 80075a2:	9303      	str	r3, [sp, #12]
 80075a4:	88fb      	ldrh	r3, [r7, #6]
 80075a6:	9302      	str	r3, [sp, #8]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	2301      	movs	r3, #1
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2302      	movs	r3, #2
 80075b2:	2200      	movs	r2, #0
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f005 fa46 	bl	800ca46 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af04      	add	r7, sp, #16
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4611      	mov	r1, r2
 80075d0:	461a      	mov	r2, r3
 80075d2:	460b      	mov	r3, r1
 80075d4:	80fb      	strh	r3, [r7, #6]
 80075d6:	4613      	mov	r3, r2
 80075d8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075da:	7979      	ldrb	r1, [r7, #5]
 80075dc:	2300      	movs	r3, #0
 80075de:	9303      	str	r3, [sp, #12]
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	9302      	str	r3, [sp, #8]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	2301      	movs	r3, #1
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2302      	movs	r3, #2
 80075ee:	2201      	movs	r2, #1
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f005 fa28 	bl	800ca46 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007600:	b590      	push	{r4, r7, lr}
 8007602:	b089      	sub	sp, #36	; 0x24
 8007604:	af04      	add	r7, sp, #16
 8007606:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800760e:	7919      	ldrb	r1, [r3, #4]
 8007610:	2350      	movs	r3, #80	; 0x50
 8007612:	2206      	movs	r2, #6
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff fc95 	bl	8006f44 <USBH_FindInterface>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2bff      	cmp	r3, #255	; 0xff
 8007622:	d002      	beq.n	800762a <USBH_MSC_InterfaceInit+0x2a>
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d901      	bls.n	800762e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800762a:	2302      	movs	r3, #2
 800762c:	e0ef      	b.n	800780e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fc6a 	bl	8006f0c <USBH_SelectInterface>
 8007638:	4603      	mov	r3, r0
 800763a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007642:	2302      	movs	r3, #2
 8007644:	e0e3      	b.n	800780e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800764c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007650:	f005 fb08 	bl	800cc64 <malloc>
 8007654:	4603      	mov	r3, r0
 8007656:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007668:	2302      	movs	r3, #2
 800766a:	e0d0      	b.n	800780e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800766c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007670:	2100      	movs	r1, #0
 8007672:	68b8      	ldr	r0, [r7, #8]
 8007674:	f005 fb11 	bl	800cc9a <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	211a      	movs	r1, #26
 800767e:	fb01 f303 	mul.w	r3, r1, r3
 8007682:	4413      	add	r3, r2
 8007684:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	b25b      	sxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	da16      	bge.n	80076be <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	211a      	movs	r1, #26
 8007696:	fb01 f303 	mul.w	r3, r1, r3
 800769a:	4413      	add	r3, r2
 800769c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	211a      	movs	r1, #26
 80076ac:	fb01 f303 	mul.w	r3, r1, r3
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076b6:	881a      	ldrh	r2, [r3, #0]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	815a      	strh	r2, [r3, #10]
 80076bc:	e015      	b.n	80076ea <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	211a      	movs	r1, #26
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	4413      	add	r3, r2
 80076ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076ce:	781a      	ldrb	r2, [r3, #0]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	211a      	movs	r1, #26
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	4413      	add	r3, r2
 80076e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076e4:	881a      	ldrh	r2, [r3, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	211a      	movs	r1, #26
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b25b      	sxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da16      	bge.n	8007730 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	211a      	movs	r1, #26
 8007708:	fb01 f303 	mul.w	r3, r1, r3
 800770c:	4413      	add	r3, r2
 800770e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	211a      	movs	r1, #26
 800771e:	fb01 f303 	mul.w	r3, r1, r3
 8007722:	4413      	add	r3, r2
 8007724:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007728:	881a      	ldrh	r2, [r3, #0]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	815a      	strh	r2, [r3, #10]
 800772e:	e015      	b.n	800775c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	211a      	movs	r1, #26
 8007736:	fb01 f303 	mul.w	r3, r1, r3
 800773a:	4413      	add	r3, r2
 800773c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007740:	781a      	ldrb	r2, [r3, #0]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	211a      	movs	r1, #26
 800774c:	fb01 f303 	mul.w	r3, r1, r3
 8007750:	4413      	add	r3, r2
 8007752:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007756:	881a      	ldrh	r2, [r3, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2200      	movs	r2, #0
 8007760:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2200      	movs	r2, #0
 8007766:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2200      	movs	r2, #0
 800776c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	799b      	ldrb	r3, [r3, #6]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 fafa 	bl	8008d6e <USBH_AllocPipe>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	79db      	ldrb	r3, [r3, #7]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 faf0 	bl	8008d6e <USBH_AllocPipe>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fda4 	bl	80082e4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	7959      	ldrb	r1, [r3, #5]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	7998      	ldrb	r0, [r3, #6]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	8912      	ldrh	r2, [r2, #8]
 80077b4:	9202      	str	r2, [sp, #8]
 80077b6:	2202      	movs	r2, #2
 80077b8:	9201      	str	r2, [sp, #4]
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	4623      	mov	r3, r4
 80077be:	4602      	mov	r2, r0
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 faa5 	bl	8008d10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	7919      	ldrb	r1, [r3, #4]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	79d8      	ldrb	r0, [r3, #7]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	8952      	ldrh	r2, [r2, #10]
 80077de:	9202      	str	r2, [sp, #8]
 80077e0:	2202      	movs	r2, #2
 80077e2:	9201      	str	r2, [sp, #4]
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	4623      	mov	r3, r4
 80077e8:	4602      	mov	r2, r0
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 fa90 	bl	8008d10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	791b      	ldrb	r3, [r3, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f005 f976 	bl	800caea <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	795b      	ldrb	r3, [r3, #5]
 8007802:	2200      	movs	r2, #0
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f005 f96f 	bl	800caea <USBH_LL_SetToggle>

  return USBH_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	bd90      	pop	{r4, r7, pc}

08007816 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	795b      	ldrb	r3, [r3, #5]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00e      	beq.n	800784e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	795b      	ldrb	r3, [r3, #5]
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 fa89 	bl	8008d4e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	795b      	ldrb	r3, [r3, #5]
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 fab4 	bl	8008db0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	791b      	ldrb	r3, [r3, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00e      	beq.n	8007874 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	791b      	ldrb	r3, [r3, #4]
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 fa76 	bl	8008d4e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	791b      	ldrb	r3, [r3, #4]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 faa1 	bl	8008db0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	4618      	mov	r0, r3
 800788a:	f005 f9f3 	bl	800cc74 <free>
    phost->pActiveClass->pData = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007894:	2200      	movs	r2, #0
 8007896:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80078b4:	2301      	movs	r3, #1
 80078b6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	7b9b      	ldrb	r3, [r3, #14]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d004      	beq.n	80078ca <USBH_MSC_ClassRequest+0x28>
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d03e      	beq.n	8007942 <USBH_MSC_ClassRequest+0xa0>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d000      	beq.n	80078ca <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 80078c8:	e04a      	b.n	8007960 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fcea 	bl	80082a8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d104      	bne.n	80078e8 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2200      	movs	r2, #0
 80078e2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d135      	bne.n	800795a <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d804      	bhi.n	8007900 <USBH_MSC_ClassRequest+0x5e>
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	3301      	adds	r3, #1
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	e000      	b.n	8007902 <USBH_MSC_ClassRequest+0x60>
 8007900:	2202      	movs	r2, #2
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007906:	2300      	movs	r3, #0
 8007908:	73bb      	strb	r3, [r7, #14]
 800790a:	e014      	b.n	8007936 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	2134      	movs	r1, #52	; 0x34
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	4413      	add	r3, r2
 8007918:	3392      	adds	r3, #146	; 0x92
 800791a:	2202      	movs	r2, #2
 800791c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	2134      	movs	r1, #52	; 0x34
 8007924:	fb01 f303 	mul.w	r3, r1, r3
 8007928:	4413      	add	r3, r2
 800792a:	33c1      	adds	r3, #193	; 0xc1
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	3301      	adds	r3, #1
 8007934:	73bb      	strb	r3, [r7, #14]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	7bba      	ldrb	r2, [r7, #14]
 800793c:	429a      	cmp	r2, r3
 800793e:	d3e5      	bcc.n	800790c <USBH_MSC_ClassRequest+0x6a>
      break;
 8007940:	e00b      	b.n	800795a <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007942:	2100      	movs	r1, #0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fbe3 	bl	8007110 <USBH_ClrFeature>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	7bda      	ldrb	r2, [r3, #15]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	739a      	strb	r2, [r3, #14]
      break;
 8007958:	e001      	b.n	800795e <USBH_MSC_ClassRequest+0xbc>
      break;
 800795a:	bf00      	nop
 800795c:	e000      	b.n	8007960 <USBH_MSC_ClassRequest+0xbe>
      break;
 800795e:	bf00      	nop
  }

  return status;
 8007960:	7bfb      	ldrb	r3, [r7, #15]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800797e:	2301      	movs	r3, #1
 8007980:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007982:	2301      	movs	r3, #1
 8007984:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8007986:	2301      	movs	r3, #1
 8007988:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	7b1b      	ldrb	r3, [r3, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <USBH_MSC_Process+0x2e>
 8007992:	2b01      	cmp	r3, #1
 8007994:	f000 8271 	beq.w	8007e7a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007998:	e272      	b.n	8007e80 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	429a      	cmp	r2, r3
 80079a8:	f080 824f 	bcs.w	8007e4a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079b2:	4619      	mov	r1, r3
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	2334      	movs	r3, #52	; 0x34
 80079b8:	fb03 f301 	mul.w	r3, r3, r1
 80079bc:	4413      	add	r3, r2
 80079be:	3391      	adds	r3, #145	; 0x91
 80079c0:	2201      	movs	r2, #1
 80079c2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079ca:	4619      	mov	r1, r3
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	2334      	movs	r3, #52	; 0x34
 80079d0:	fb03 f301 	mul.w	r3, r3, r1
 80079d4:	4413      	add	r3, r2
 80079d6:	3390      	adds	r3, #144	; 0x90
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b08      	cmp	r3, #8
 80079dc:	f200 8243 	bhi.w	8007e66 <USBH_MSC_Process+0x4fa>
 80079e0:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <USBH_MSC_Process+0x7c>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007e67 	.word	0x08007e67
 80079f0:	08007ad5 	.word	0x08007ad5
 80079f4:	08007c59 	.word	0x08007c59
 80079f8:	08007a33 	.word	0x08007a33
 80079fc:	08007d25 	.word	0x08007d25
 8007a00:	08007e67 	.word	0x08007e67
 8007a04:	08007e67 	.word	0x08007e67
 8007a08:	08007e39 	.word	0x08007e39
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a12:	4619      	mov	r1, r3
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	2334      	movs	r3, #52	; 0x34
 8007a18:	fb03 f301 	mul.w	r3, r3, r1
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3390      	adds	r3, #144	; 0x90
 8007a20:	2204      	movs	r2, #4
 8007a22:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007a30:	e222      	b.n	8007e78 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a38:	b2d9      	uxtb	r1, r3
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a40:	461a      	mov	r2, r3
 8007a42:	2334      	movs	r3, #52	; 0x34
 8007a44:	fb03 f302 	mul.w	r3, r3, r2
 8007a48:	3398      	adds	r3, #152	; 0x98
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3307      	adds	r3, #7
 8007a50:	461a      	mov	r2, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 ff68 	bl	8008928 <USBH_MSC_SCSI_Inquiry>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a68:	4619      	mov	r1, r3
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	2334      	movs	r3, #52	; 0x34
 8007a6e:	fb03 f301 	mul.w	r3, r3, r1
 8007a72:	4413      	add	r3, r2
 8007a74:	3390      	adds	r3, #144	; 0x90
 8007a76:	2202      	movs	r2, #2
 8007a78:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d10c      	bne.n	8007a9a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a86:	4619      	mov	r1, r3
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	2334      	movs	r3, #52	; 0x34
 8007a8c:	fb03 f301 	mul.w	r3, r3, r1
 8007a90:	4413      	add	r3, r2
 8007a92:	3390      	adds	r3, #144	; 0x90
 8007a94:	2205      	movs	r2, #5
 8007a96:	701a      	strb	r2, [r3, #0]
            break;
 8007a98:	e1e7      	b.n	8007e6a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	f040 81e4 	bne.w	8007e6a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	2334      	movs	r3, #52	; 0x34
 8007aae:	fb03 f301 	mul.w	r3, r3, r1
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3390      	adds	r3, #144	; 0x90
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	2334      	movs	r3, #52	; 0x34
 8007ac6:	fb03 f301 	mul.w	r3, r3, r1
 8007aca:	4413      	add	r3, r2
 8007acc:	3391      	adds	r3, #145	; 0x91
 8007ace:	2202      	movs	r2, #2
 8007ad0:	701a      	strb	r2, [r3, #0]
            break;
 8007ad2:	e1ca      	b.n	8007e6a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fe64 	bl	80087ac <USBH_MSC_SCSI_TestUnitReady>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d149      	bne.n	8007b82 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007af4:	4619      	mov	r1, r3
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	2334      	movs	r3, #52	; 0x34
 8007afa:	fb03 f301 	mul.w	r3, r3, r1
 8007afe:	4413      	add	r3, r2
 8007b00:	3392      	adds	r3, #146	; 0x92
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00c      	beq.n	8007b22 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b0e:	4619      	mov	r1, r3
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	2334      	movs	r3, #52	; 0x34
 8007b14:	fb03 f301 	mul.w	r3, r3, r1
 8007b18:	4413      	add	r3, r2
 8007b1a:	33c1      	adds	r3, #193	; 0xc1
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	e00b      	b.n	8007b3a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b28:	4619      	mov	r1, r3
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	2334      	movs	r3, #52	; 0x34
 8007b2e:	fb03 f301 	mul.w	r3, r3, r1
 8007b32:	4413      	add	r3, r2
 8007b34:	33c1      	adds	r3, #193	; 0xc1
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b40:	4619      	mov	r1, r3
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	2334      	movs	r3, #52	; 0x34
 8007b46:	fb03 f301 	mul.w	r3, r3, r1
 8007b4a:	4413      	add	r3, r2
 8007b4c:	3390      	adds	r3, #144	; 0x90
 8007b4e:	2203      	movs	r2, #3
 8007b50:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b58:	4619      	mov	r1, r3
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	2334      	movs	r3, #52	; 0x34
 8007b5e:	fb03 f301 	mul.w	r3, r3, r1
 8007b62:	4413      	add	r3, r2
 8007b64:	3391      	adds	r3, #145	; 0x91
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b70:	4619      	mov	r1, r3
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	2334      	movs	r3, #52	; 0x34
 8007b76:	fb03 f301 	mul.w	r3, r3, r1
 8007b7a:	4413      	add	r3, r2
 8007b7c:	3392      	adds	r3, #146	; 0x92
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d14a      	bne.n	8007c1e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b8e:	4619      	mov	r1, r3
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	2334      	movs	r3, #52	; 0x34
 8007b94:	fb03 f301 	mul.w	r3, r3, r1
 8007b98:	4413      	add	r3, r2
 8007b9a:	3392      	adds	r3, #146	; 0x92
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d00c      	beq.n	8007bbc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ba8:	4619      	mov	r1, r3
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	2334      	movs	r3, #52	; 0x34
 8007bae:	fb03 f301 	mul.w	r3, r3, r1
 8007bb2:	4413      	add	r3, r2
 8007bb4:	33c1      	adds	r3, #193	; 0xc1
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e00b      	b.n	8007bd4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	2334      	movs	r3, #52	; 0x34
 8007bc8:	fb03 f301 	mul.w	r3, r3, r1
 8007bcc:	4413      	add	r3, r2
 8007bce:	33c1      	adds	r3, #193	; 0xc1
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bda:	4619      	mov	r1, r3
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	2334      	movs	r3, #52	; 0x34
 8007be0:	fb03 f301 	mul.w	r3, r3, r1
 8007be4:	4413      	add	r3, r2
 8007be6:	3390      	adds	r3, #144	; 0x90
 8007be8:	2205      	movs	r2, #5
 8007bea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	2334      	movs	r3, #52	; 0x34
 8007bf8:	fb03 f301 	mul.w	r3, r3, r1
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3391      	adds	r3, #145	; 0x91
 8007c00:	2201      	movs	r2, #1
 8007c02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	2334      	movs	r3, #52	; 0x34
 8007c10:	fb03 f301 	mul.w	r3, r3, r1
 8007c14:	4413      	add	r3, r2
 8007c16:	3392      	adds	r3, #146	; 0x92
 8007c18:	2202      	movs	r2, #2
 8007c1a:	701a      	strb	r2, [r3, #0]
            break;
 8007c1c:	e127      	b.n	8007e6e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	f040 8124 	bne.w	8007e6e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	2334      	movs	r3, #52	; 0x34
 8007c32:	fb03 f301 	mul.w	r3, r3, r1
 8007c36:	4413      	add	r3, r2
 8007c38:	3390      	adds	r3, #144	; 0x90
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c44:	4619      	mov	r1, r3
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	2334      	movs	r3, #52	; 0x34
 8007c4a:	fb03 f301 	mul.w	r3, r3, r1
 8007c4e:	4413      	add	r3, r2
 8007c50:	3391      	adds	r3, #145	; 0x91
 8007c52:	2202      	movs	r2, #2
 8007c54:	701a      	strb	r2, [r3, #0]
            break;
 8007c56:	e10a      	b.n	8007e6e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c5e:	b2d9      	uxtb	r1, r3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c66:	461a      	mov	r2, r3
 8007c68:	2334      	movs	r3, #52	; 0x34
 8007c6a:	fb03 f302 	mul.w	r3, r3, r2
 8007c6e:	3390      	adds	r3, #144	; 0x90
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4413      	add	r3, r2
 8007c74:	3304      	adds	r3, #4
 8007c76:	461a      	mov	r2, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fdda 	bl	8008832 <USBH_MSC_SCSI_ReadCapacity>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d120      	bne.n	8007cca <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c8e:	4619      	mov	r1, r3
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	2334      	movs	r3, #52	; 0x34
 8007c94:	fb03 f301 	mul.w	r3, r3, r1
 8007c98:	4413      	add	r3, r2
 8007c9a:	3390      	adds	r3, #144	; 0x90
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	2334      	movs	r3, #52	; 0x34
 8007cac:	fb03 f301 	mul.w	r3, r3, r1
 8007cb0:	4413      	add	r3, r2
 8007cb2:	3391      	adds	r3, #145	; 0x91
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007cc8:	e0d3      	b.n	8007e72 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d10c      	bne.n	8007cea <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	2334      	movs	r3, #52	; 0x34
 8007cdc:	fb03 f301 	mul.w	r3, r3, r1
 8007ce0:	4413      	add	r3, r2
 8007ce2:	3390      	adds	r3, #144	; 0x90
 8007ce4:	2205      	movs	r2, #5
 8007ce6:	701a      	strb	r2, [r3, #0]
            break;
 8007ce8:	e0c3      	b.n	8007e72 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	f040 80c0 	bne.w	8007e72 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	2334      	movs	r3, #52	; 0x34
 8007cfe:	fb03 f301 	mul.w	r3, r3, r1
 8007d02:	4413      	add	r3, r2
 8007d04:	3390      	adds	r3, #144	; 0x90
 8007d06:	2201      	movs	r2, #1
 8007d08:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d10:	4619      	mov	r1, r3
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	2334      	movs	r3, #52	; 0x34
 8007d16:	fb03 f301 	mul.w	r3, r3, r1
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3391      	adds	r3, #145	; 0x91
 8007d1e:	2202      	movs	r2, #2
 8007d20:	701a      	strb	r2, [r3, #0]
            break;
 8007d22:	e0a6      	b.n	8007e72 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d2a:	b2d9      	uxtb	r1, r3
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d32:	461a      	mov	r2, r3
 8007d34:	2334      	movs	r3, #52	; 0x34
 8007d36:	fb03 f302 	mul.w	r3, r3, r2
 8007d3a:	3398      	adds	r3, #152	; 0x98
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4413      	add	r3, r2
 8007d40:	3304      	adds	r3, #4
 8007d42:	461a      	mov	r2, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fe94 	bl	8008a72 <USBH_MSC_SCSI_RequestSense>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d145      	bne.n	8007de0 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	2334      	movs	r3, #52	; 0x34
 8007d60:	fb03 f301 	mul.w	r3, r3, r1
 8007d64:	4413      	add	r3, r2
 8007d66:	339c      	adds	r3, #156	; 0x9c
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b06      	cmp	r3, #6
 8007d6c:	d00c      	beq.n	8007d88 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d74:	4619      	mov	r1, r3
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	2334      	movs	r3, #52	; 0x34
 8007d7a:	fb03 f301 	mul.w	r3, r3, r1
 8007d7e:	4413      	add	r3, r2
 8007d80:	339c      	adds	r3, #156	; 0x9c
 8007d82:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d117      	bne.n	8007db8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	f242 720f 	movw	r2, #9999	; 0x270f
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d80c      	bhi.n	8007db8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007da4:	4619      	mov	r1, r3
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	2334      	movs	r3, #52	; 0x34
 8007daa:	fb03 f301 	mul.w	r3, r3, r1
 8007dae:	4413      	add	r3, r2
 8007db0:	3390      	adds	r3, #144	; 0x90
 8007db2:	2202      	movs	r2, #2
 8007db4:	701a      	strb	r2, [r3, #0]
                  break;
 8007db6:	e05f      	b.n	8007e78 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	2334      	movs	r3, #52	; 0x34
 8007dc4:	fb03 f301 	mul.w	r3, r3, r1
 8007dc8:	4413      	add	r3, r2
 8007dca:	3390      	adds	r3, #144	; 0x90
 8007dcc:	2201      	movs	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d10c      	bne.n	8007e00 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007dec:	4619      	mov	r1, r3
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	2334      	movs	r3, #52	; 0x34
 8007df2:	fb03 f301 	mul.w	r3, r3, r1
 8007df6:	4413      	add	r3, r2
 8007df8:	3390      	adds	r3, #144	; 0x90
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	701a      	strb	r2, [r3, #0]
            break;
 8007dfe:	e03a      	b.n	8007e76 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d137      	bne.n	8007e76 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	2334      	movs	r3, #52	; 0x34
 8007e12:	fb03 f301 	mul.w	r3, r3, r1
 8007e16:	4413      	add	r3, r2
 8007e18:	3390      	adds	r3, #144	; 0x90
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e24:	4619      	mov	r1, r3
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	2334      	movs	r3, #52	; 0x34
 8007e2a:	fb03 f301 	mul.w	r3, r3, r1
 8007e2e:	4413      	add	r3, r2
 8007e30:	3391      	adds	r3, #145	; 0x91
 8007e32:	2202      	movs	r2, #2
 8007e34:	701a      	strb	r2, [r3, #0]
            break;
 8007e36:	e01e      	b.n	8007e76 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e3e:	3301      	adds	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007e48:	e016      	b.n	8007e78 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2201      	movs	r2, #1
 8007e56:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e5e:	2102      	movs	r1, #2
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
      break;
 8007e64:	e00c      	b.n	8007e80 <USBH_MSC_Process+0x514>
            break;
 8007e66:	bf00      	nop
 8007e68:	e00a      	b.n	8007e80 <USBH_MSC_Process+0x514>
            break;
 8007e6a:	bf00      	nop
 8007e6c:	e008      	b.n	8007e80 <USBH_MSC_Process+0x514>
            break;
 8007e6e:	bf00      	nop
 8007e70:	e006      	b.n	8007e80 <USBH_MSC_Process+0x514>
            break;
 8007e72:	bf00      	nop
 8007e74:	e004      	b.n	8007e80 <USBH_MSC_Process+0x514>
            break;
 8007e76:	bf00      	nop
      break;
 8007e78:	e002      	b.n	8007e80 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e7e:	bf00      	nop
  }
  return error;
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop

08007e8c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b088      	sub	sp, #32
 8007ea6:	af02      	add	r7, sp, #8
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	2134      	movs	r1, #52	; 0x34
 8007ec6:	fb01 f303 	mul.w	r3, r1, r3
 8007eca:	4413      	add	r3, r2
 8007ecc:	3390      	adds	r3, #144	; 0x90
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b06      	cmp	r3, #6
 8007ed2:	d004      	beq.n	8007ede <USBH_MSC_RdWrProcess+0x3c>
 8007ed4:	2b07      	cmp	r3, #7
 8007ed6:	d037      	beq.n	8007f48 <USBH_MSC_RdWrProcess+0xa6>
 8007ed8:	2b05      	cmp	r3, #5
 8007eda:	d06a      	beq.n	8007fb2 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8007edc:	e0a6      	b.n	800802c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007ede:	78f9      	ldrb	r1, [r7, #3]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fea6 	bl	8008c3a <USBH_MSC_SCSI_Read>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10b      	bne.n	8007f10 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	2134      	movs	r1, #52	; 0x34
 8007efe:	fb01 f303 	mul.w	r3, r1, r3
 8007f02:	4413      	add	r3, r2
 8007f04:	3390      	adds	r3, #144	; 0x90
 8007f06:	2201      	movs	r2, #1
 8007f08:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0e:	e088      	b.n	8008022 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d109      	bne.n	8007f2a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	2134      	movs	r1, #52	; 0x34
 8007f1c:	fb01 f303 	mul.w	r3, r1, r3
 8007f20:	4413      	add	r3, r2
 8007f22:	3390      	adds	r3, #144	; 0x90
 8007f24:	2205      	movs	r2, #5
 8007f26:	701a      	strb	r2, [r3, #0]
      break;
 8007f28:	e07b      	b.n	8008022 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d178      	bne.n	8008022 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	2134      	movs	r1, #52	; 0x34
 8007f36:	fb01 f303 	mul.w	r3, r1, r3
 8007f3a:	4413      	add	r3, r2
 8007f3c:	3390      	adds	r3, #144	; 0x90
 8007f3e:	2208      	movs	r2, #8
 8007f40:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007f42:	2302      	movs	r3, #2
 8007f44:	75fb      	strb	r3, [r7, #23]
      break;
 8007f46:	e06c      	b.n	8008022 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007f48:	78f9      	ldrb	r1, [r7, #3]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2200      	movs	r2, #0
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fe06 	bl	8008b64 <USBH_MSC_SCSI_Write>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	2134      	movs	r1, #52	; 0x34
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	3390      	adds	r3, #144	; 0x90
 8007f70:	2201      	movs	r2, #1
 8007f72:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	75fb      	strb	r3, [r7, #23]
      break;
 8007f78:	e055      	b.n	8008026 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d109      	bne.n	8007f94 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	2134      	movs	r1, #52	; 0x34
 8007f86:	fb01 f303 	mul.w	r3, r1, r3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3390      	adds	r3, #144	; 0x90
 8007f8e:	2205      	movs	r2, #5
 8007f90:	701a      	strb	r2, [r3, #0]
      break;
 8007f92:	e048      	b.n	8008026 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	d145      	bne.n	8008026 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	2134      	movs	r1, #52	; 0x34
 8007fa0:	fb01 f303 	mul.w	r3, r1, r3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	3390      	adds	r3, #144	; 0x90
 8007fa8:	2208      	movs	r2, #8
 8007faa:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007fac:	2302      	movs	r3, #2
 8007fae:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb0:	e039      	b.n	8008026 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007fb2:	78fb      	ldrb	r3, [r7, #3]
 8007fb4:	2234      	movs	r2, #52	; 0x34
 8007fb6:	fb02 f303 	mul.w	r3, r2, r3
 8007fba:	3398      	adds	r3, #152	; 0x98
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	1d1a      	adds	r2, r3, #4
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fd53 	bl	8008a72 <USBH_MSC_SCSI_RequestSense>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d113      	bne.n	8007ffe <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	2134      	movs	r1, #52	; 0x34
 8007fdc:	fb01 f303 	mul.w	r3, r1, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3390      	adds	r3, #144	; 0x90
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	2134      	movs	r1, #52	; 0x34
 8007fee:	fb01 f303 	mul.w	r3, r1, r3
 8007ff2:	4413      	add	r3, r2
 8007ff4:	3391      	adds	r3, #145	; 0x91
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d012      	beq.n	800802a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	2b04      	cmp	r3, #4
 8008008:	d10f      	bne.n	800802a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	2134      	movs	r1, #52	; 0x34
 8008010:	fb01 f303 	mul.w	r3, r1, r3
 8008014:	4413      	add	r3, r2
 8008016:	3390      	adds	r3, #144	; 0x90
 8008018:	2208      	movs	r2, #8
 800801a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800801c:	2302      	movs	r3, #2
 800801e:	75fb      	strb	r3, [r7, #23]
      break;
 8008020:	e003      	b.n	800802a <USBH_MSC_RdWrProcess+0x188>
      break;
 8008022:	bf00      	nop
 8008024:	e002      	b.n	800802c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8008026:	bf00      	nop
 8008028:	e000      	b.n	800802c <USBH_MSC_RdWrProcess+0x18a>
      break;
 800802a:	bf00      	nop

  }
  return error;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b0b      	cmp	r3, #11
 8008054:	d10c      	bne.n	8008070 <USBH_MSC_UnitIsReady+0x3a>
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	2134      	movs	r1, #52	; 0x34
 800805c:	fb01 f303 	mul.w	r3, r1, r3
 8008060:	4413      	add	r3, r2
 8008062:	3391      	adds	r3, #145	; 0x91
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d102      	bne.n	8008070 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800806a:	2301      	movs	r3, #1
 800806c:	73fb      	strb	r3, [r7, #15]
 800806e:	e001      	b.n	8008074 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008074:	7bfb      	ldrb	r3, [r7, #15]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	460b      	mov	r3, r1
 800808c:	607a      	str	r2, [r7, #4]
 800808e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b0b      	cmp	r3, #11
 80080a2:	d10d      	bne.n	80080c0 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	2234      	movs	r2, #52	; 0x34
 80080a8:	fb02 f303 	mul.w	r3, r2, r3
 80080ac:	3390      	adds	r3, #144	; 0x90
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4413      	add	r3, r2
 80080b2:	2234      	movs	r2, #52	; 0x34
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f004 fde4 	bl	800cc84 <memcpy>
    return USBH_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b088      	sub	sp, #32
 80080ce:	af02      	add	r7, sp, #8
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	460b      	mov	r3, r1
 80080d8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00e      	beq.n	800810e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80080f6:	2b0b      	cmp	r3, #11
 80080f8:	d109      	bne.n	800810e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	2134      	movs	r1, #52	; 0x34
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	4413      	add	r3, r2
 8008106:	3390      	adds	r3, #144	; 0x90
 8008108:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800810a:	2b01      	cmp	r3, #1
 800810c:	d001      	beq.n	8008112 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800810e:	2302      	movs	r3, #2
 8008110:	e040      	b.n	8008194 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2206      	movs	r2, #6
 8008116:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	2134      	movs	r1, #52	; 0x34
 800811e:	fb01 f303 	mul.w	r3, r1, r3
 8008122:	4413      	add	r3, r2
 8008124:	3390      	adds	r3, #144	; 0x90
 8008126:	2206      	movs	r2, #6
 8008128:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	b29a      	uxth	r2, r3
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008134:	7af9      	ldrb	r1, [r7, #11]
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fd7b 	bl	8008c3a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800814a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800814c:	e016      	b.n	800817c <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	1ad2      	subs	r2, r2, r3
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	f242 7110 	movw	r1, #10000	; 0x2710
 800815e:	fb01 f303 	mul.w	r3, r1, r3
 8008162:	429a      	cmp	r2, r3
 8008164:	d805      	bhi.n	8008172 <USBH_MSC_Read+0xa8>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d104      	bne.n	800817c <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2201      	movs	r2, #1
 8008176:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008178:	2302      	movs	r3, #2
 800817a:	e00b      	b.n	8008194 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	4619      	mov	r1, r3
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff fe8e 	bl	8007ea2 <USBH_MSC_RdWrProcess>
 8008186:	4603      	mov	r3, r0
 8008188:	2b01      	cmp	r3, #1
 800818a:	d0e0      	beq.n	800814e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2201      	movs	r2, #1
 8008190:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	607a      	str	r2, [r7, #4]
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	460b      	mov	r3, r1
 80081aa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00e      	beq.n	80081e0 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80081c8:	2b0b      	cmp	r3, #11
 80081ca:	d109      	bne.n	80081e0 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	2134      	movs	r1, #52	; 0x34
 80081d2:	fb01 f303 	mul.w	r3, r1, r3
 80081d6:	4413      	add	r3, r2
 80081d8:	3390      	adds	r3, #144	; 0x90
 80081da:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d001      	beq.n	80081e4 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80081e0:	2302      	movs	r3, #2
 80081e2:	e040      	b.n	8008266 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2207      	movs	r2, #7
 80081e8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80081ea:	7afb      	ldrb	r3, [r7, #11]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	2134      	movs	r1, #52	; 0x34
 80081f0:	fb01 f303 	mul.w	r3, r1, r3
 80081f4:	4413      	add	r3, r2
 80081f6:	3390      	adds	r3, #144	; 0x90
 80081f8:	2207      	movs	r2, #7
 80081fa:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	b29a      	uxth	r2, r3
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008206:	7af9      	ldrb	r1, [r7, #11]
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 fca7 	bl	8008b64 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800821c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800821e:	e016      	b.n	800824e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	1ad2      	subs	r2, r2, r3
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	429a      	cmp	r2, r3
 8008236:	d805      	bhi.n	8008244 <USBH_MSC_Write+0xa8>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2201      	movs	r2, #1
 8008248:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800824a:	2302      	movs	r3, #2
 800824c:	e00b      	b.n	8008266 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800824e:	7afb      	ldrb	r3, [r7, #11]
 8008250:	4619      	mov	r1, r3
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff fe25 	bl	8007ea2 <USBH_MSC_RdWrProcess>
 8008258:	4603      	mov	r3, r0
 800825a:	2b01      	cmp	r3, #1
 800825c:	d0e0      	beq.n	8008220 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2201      	movs	r2, #1
 8008262:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2221      	movs	r2, #33	; 0x21
 800827a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	22ff      	movs	r2, #255	; 0xff
 8008280:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008294:	2200      	movs	r2, #0
 8008296:	2100      	movs	r1, #0
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7fe ff5d 	bl	8007158 <USBH_CtlReq>
 800829e:	4603      	mov	r3, r0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	22a1      	movs	r2, #161	; 0xa1
 80082b6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	22fe      	movs	r2, #254	; 0xfe
 80082bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80082d0:	2201      	movs	r2, #1
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7fe ff3f 	bl	8007158 <USBH_CtlReq>
 80082da:	4603      	mov	r3, r0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4a09      	ldr	r2, [pc, #36]	; (8008320 <USBH_MSC_BOT_Init+0x3c>)
 80082fa:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4a09      	ldr	r2, [pc, #36]	; (8008324 <USBH_MSC_BOT_Init+0x40>)
 8008300:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	43425355 	.word	0x43425355
 8008324:	20304050 	.word	0x20304050

08008328 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af02      	add	r7, sp, #8
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008334:	2301      	movs	r3, #1
 8008336:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008338:	2301      	movs	r3, #1
 800833a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800833c:	2301      	movs	r3, #1
 800833e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008340:	2300      	movs	r3, #0
 8008342:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008358:	3b01      	subs	r3, #1
 800835a:	2b0a      	cmp	r3, #10
 800835c:	f200 81a1 	bhi.w	80086a2 <USBH_MSC_BOT_Process+0x37a>
 8008360:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <USBH_MSC_BOT_Process+0x40>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	08008395 	.word	0x08008395
 800836c:	080083bf 	.word	0x080083bf
 8008370:	08008429 	.word	0x08008429
 8008374:	08008447 	.word	0x08008447
 8008378:	080084cb 	.word	0x080084cb
 800837c:	080084ef 	.word	0x080084ef
 8008380:	08008589 	.word	0x08008589
 8008384:	080085a5 	.word	0x080085a5
 8008388:	080085f7 	.word	0x080085f7
 800838c:	08008627 	.word	0x08008627
 8008390:	08008689 	.word	0x08008689
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	795a      	ldrb	r2, [r3, #5]
 80083ae:	2301      	movs	r3, #1
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	4613      	mov	r3, r2
 80083b4:	221f      	movs	r2, #31
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff f8df 	bl	800757a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80083bc:	e180      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f004 fb6f 	bl	800caa8 <USBH_LL_GetURBState>
 80083ca:	4603      	mov	r3, r0
 80083cc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80083ce:	7d3b      	ldrb	r3, [r7, #20]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d118      	bne.n	8008406 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00f      	beq.n	80083fc <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80083e2:	b25b      	sxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	da04      	bge.n	80083f2 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2203      	movs	r2, #3
 80083ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083f0:	e159      	b.n	80086a6 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	2205      	movs	r2, #5
 80083f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80083fa:	e154      	b.n	80086a6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	2207      	movs	r2, #7
 8008400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008404:	e14f      	b.n	80086a6 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008406:	7d3b      	ldrb	r3, [r7, #20]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d104      	bne.n	8008416 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008414:	e147      	b.n	80086a6 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8008416:	7d3b      	ldrb	r3, [r7, #20]
 8008418:	2b05      	cmp	r3, #5
 800841a:	f040 8144 	bne.w	80086a6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	220a      	movs	r2, #10
 8008422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008426:	e13e      	b.n	80086a6 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	895a      	ldrh	r2, [r3, #10]
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	791b      	ldrb	r3, [r3, #4]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff f8c4 	bl	80075c4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2204      	movs	r2, #4
 8008440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008444:	e13c      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	791b      	ldrb	r3, [r3, #4]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f004 fb2b 	bl	800caa8 <USBH_LL_GetURBState>
 8008452:	4603      	mov	r3, r0
 8008454:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008456:	7d3b      	ldrb	r3, [r7, #20]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d12d      	bne.n	80084b8 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	8952      	ldrh	r2, [r2, #10]
 8008464:	4293      	cmp	r3, r2
 8008466:	d910      	bls.n	800848a <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	8952      	ldrh	r2, [r2, #10]
 8008472:	441a      	add	r2, r3
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	8952      	ldrh	r2, [r2, #10]
 8008482:	1a9a      	subs	r2, r3, r2
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	65da      	str	r2, [r3, #92]	; 0x5c
 8008488:	e002      	b.n	8008490 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2200      	movs	r2, #0
 800848e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	895a      	ldrh	r2, [r3, #10]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	791b      	ldrb	r3, [r3, #4]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff f88c 	bl	80075c4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80084ac:	e0fd      	b.n	80086aa <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2207      	movs	r2, #7
 80084b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80084b6:	e0f8      	b.n	80086aa <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80084b8:	7d3b      	ldrb	r3, [r7, #20]
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	f040 80f5 	bne.w	80086aa <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2209      	movs	r2, #9
 80084c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80084c8:	e0ef      	b.n	80086aa <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	891a      	ldrh	r2, [r3, #8]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	7958      	ldrb	r0, [r3, #5]
 80084d8:	2301      	movs	r3, #1
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4603      	mov	r3, r0
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff f84b 	bl	800757a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	2206      	movs	r2, #6
 80084e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80084ec:	e0e8      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	795b      	ldrb	r3, [r3, #5]
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f004 fad7 	bl	800caa8 <USBH_LL_GetURBState>
 80084fa:	4603      	mov	r3, r0
 80084fc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80084fe:	7d3b      	ldrb	r3, [r7, #20]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d130      	bne.n	8008566 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	8912      	ldrh	r2, [r2, #8]
 800850c:	4293      	cmp	r3, r2
 800850e:	d910      	bls.n	8008532 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	8912      	ldrh	r2, [r2, #8]
 800851a:	441a      	add	r2, r3
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	8912      	ldrh	r2, [r2, #8]
 800852a:	1a9a      	subs	r2, r3, r2
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008530:	e002      	b.n	8008538 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2200      	movs	r2, #0
 8008536:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00d      	beq.n	800855c <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	891a      	ldrh	r2, [r3, #8]
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	7958      	ldrb	r0, [r3, #5]
 800854e:	2301      	movs	r3, #1
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	4603      	mov	r3, r0
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff f810 	bl	800757a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800855a:	e0a8      	b.n	80086ae <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	2207      	movs	r2, #7
 8008560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008564:	e0a3      	b.n	80086ae <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008566:	7d3b      	ldrb	r3, [r7, #20]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d104      	bne.n	8008576 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2205      	movs	r2, #5
 8008570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008574:	e09b      	b.n	80086ae <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8008576:	7d3b      	ldrb	r3, [r7, #20]
 8008578:	2b05      	cmp	r3, #5
 800857a:	f040 8098 	bne.w	80086ae <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	220a      	movs	r2, #10
 8008582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008586:	e092      	b.n	80086ae <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	791b      	ldrb	r3, [r3, #4]
 8008592:	220d      	movs	r2, #13
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff f815 	bl	80075c4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2208      	movs	r2, #8
 800859e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80085a2:	e08d      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	791b      	ldrb	r3, [r3, #4]
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f004 fa7c 	bl	800caa8 <USBH_LL_GetURBState>
 80085b0:	4603      	mov	r3, r0
 80085b2:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80085b4:	7d3b      	ldrb	r3, [r7, #20]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d115      	bne.n	80085e6 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f8aa 	bl	8008724 <USBH_MSC_DecodeCSW>
 80085d0:	4603      	mov	r3, r0
 80085d2:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80085d4:	7d7b      	ldrb	r3, [r7, #21]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d102      	bne.n	80085e0 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80085de:	e068      	b.n	80086b2 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 80085e0:	2302      	movs	r3, #2
 80085e2:	75fb      	strb	r3, [r7, #23]
      break;
 80085e4:	e065      	b.n	80086b2 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 80085e6:	7d3b      	ldrb	r3, [r7, #20]
 80085e8:	2b05      	cmp	r3, #5
 80085ea:	d162      	bne.n	80086b2 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2209      	movs	r2, #9
 80085f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80085f4:	e05d      	b.n	80086b2 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	2200      	movs	r2, #0
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f865 	bl	80086cc <USBH_MSC_BOT_Abort>
 8008602:	4603      	mov	r3, r0
 8008604:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008606:	7dbb      	ldrb	r3, [r7, #22]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d104      	bne.n	8008616 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	2207      	movs	r2, #7
 8008610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008614:	e04f      	b.n	80086b6 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008616:	7dbb      	ldrb	r3, [r7, #22]
 8008618:	2b04      	cmp	r3, #4
 800861a:	d14c      	bne.n	80086b6 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	220b      	movs	r2, #11
 8008620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008624:	e047      	b.n	80086b6 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	2201      	movs	r2, #1
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f84d 	bl	80086cc <USBH_MSC_BOT_Abort>
 8008632:	4603      	mov	r3, r0
 8008634:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008636:	7dbb      	ldrb	r3, [r7, #22]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d11d      	bne.n	8008678 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	795b      	ldrb	r3, [r3, #5]
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f004 fa84 	bl	800cb50 <USBH_LL_GetToggle>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	7959      	ldrb	r1, [r3, #5]
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	f1c3 0301 	rsb	r3, r3, #1
 8008656:	b2db      	uxtb	r3, r3
 8008658:	461a      	mov	r2, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f004 fa45 	bl	800caea <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	791b      	ldrb	r3, [r3, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f004 fa3e 	bl	800caea <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2209      	movs	r2, #9
 8008672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008676:	e020      	b.n	80086ba <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8008678:	7dbb      	ldrb	r3, [r7, #22]
 800867a:	2b04      	cmp	r3, #4
 800867c:	d11d      	bne.n	80086ba <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	220b      	movs	r2, #11
 8008682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008686:	e018      	b.n	80086ba <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff fdf0 	bl	800826e <USBH_MSC_BOT_REQ_Reset>
 800868e:	4603      	mov	r3, r0
 8008690:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d112      	bne.n	80086be <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80086a0:	e00d      	b.n	80086be <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 80086a2:	bf00      	nop
 80086a4:	e00c      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>
      break;
 80086a6:	bf00      	nop
 80086a8:	e00a      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>
      break;
 80086aa:	bf00      	nop
 80086ac:	e008      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>
      break;
 80086ae:	bf00      	nop
 80086b0:	e006      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>
      break;
 80086b2:	bf00      	nop
 80086b4:	e004      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>
      break;
 80086b6:	bf00      	nop
 80086b8:	e002      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>
      break;
 80086ba:	bf00      	nop
 80086bc:	e000      	b.n	80086c0 <USBH_MSC_BOT_Process+0x398>
      break;
 80086be:	bf00      	nop
  }
  return status;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop

080086cc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
 80086d8:	4613      	mov	r3, r2
 80086da:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80086dc:	2302      	movs	r3, #2
 80086de:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80086ea:	78bb      	ldrb	r3, [r7, #2]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <USBH_MSC_BOT_Abort+0x2a>
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d009      	beq.n	8008708 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80086f4:	e011      	b.n	800871a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	79db      	ldrb	r3, [r3, #7]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7fe fd07 	bl	8007110 <USBH_ClrFeature>
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]
      break;
 8008706:	e008      	b.n	800871a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	799b      	ldrb	r3, [r3, #6]
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7fe fcfe 	bl	8007110 <USBH_ClrFeature>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]
      break;
 8008718:	bf00      	nop
  }
  return status;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008736:	2301      	movs	r3, #1
 8008738:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	791b      	ldrb	r3, [r3, #4]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f004 f91f 	bl	800c984 <USBH_LL_GetLastXferSize>
 8008746:	4603      	mov	r3, r0
 8008748:	2b0d      	cmp	r3, #13
 800874a:	d002      	beq.n	8008752 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800874c:	2302      	movs	r3, #2
 800874e:	73fb      	strb	r3, [r7, #15]
 8008750:	e024      	b.n	800879c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008756:	4a14      	ldr	r2, [pc, #80]	; (80087a8 <USBH_MSC_DecodeCSW+0x84>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d11d      	bne.n	8008798 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008764:	429a      	cmp	r2, r3
 8008766:	d119      	bne.n	800879c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
 8008776:	e011      	b.n	800879c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800877e:	2b01      	cmp	r3, #1
 8008780:	d102      	bne.n	8008788 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008782:	2301      	movs	r3, #1
 8008784:	73fb      	strb	r3, [r7, #15]
 8008786:	e009      	b.n	800879c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800878e:	2b02      	cmp	r3, #2
 8008790:	d104      	bne.n	800879c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008792:	2302      	movs	r3, #2
 8008794:	73fb      	strb	r3, [r7, #15]
 8008796:	e001      	b.n	800879c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008798:	2302      	movs	r3, #2
 800879a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	53425355 	.word	0x53425355

080087ac <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80087b8:	2302      	movs	r3, #2
 80087ba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d002      	beq.n	80087d6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d021      	beq.n	8008818 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80087d4:	e028      	b.n	8008828 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2200      	movs	r2, #0
 80087da:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	220a      	movs	r2, #10
 80087e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	3363      	adds	r3, #99	; 0x63
 80087f0:	2210      	movs	r2, #16
 80087f2:	2100      	movs	r1, #0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f004 fa50 	bl	800cc9a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2202      	movs	r2, #2
 800880e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008812:	2301      	movs	r3, #1
 8008814:	73fb      	strb	r3, [r7, #15]
      break;
 8008816:	e007      	b.n	8008828 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff fd83 	bl	8008328 <USBH_MSC_BOT_Process>
 8008822:	4603      	mov	r3, r0
 8008824:	73fb      	strb	r3, [r7, #15]
      break;
 8008826:	bf00      	nop
  }

  return error;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b086      	sub	sp, #24
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	460b      	mov	r3, r1
 800883c:	607a      	str	r2, [r7, #4]
 800883e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008840:	2301      	movs	r3, #1
 8008842:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008854:	2b01      	cmp	r3, #1
 8008856:	d002      	beq.n	800885e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008858:	2b02      	cmp	r3, #2
 800885a:	d027      	beq.n	80088ac <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800885c:	e05f      	b.n	800891e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2208      	movs	r2, #8
 8008862:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	2280      	movs	r2, #128	; 0x80
 8008868:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	220a      	movs	r2, #10
 8008870:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	3363      	adds	r3, #99	; 0x63
 8008878:	2210      	movs	r2, #16
 800887a:	2100      	movs	r1, #0
 800887c:	4618      	mov	r0, r3
 800887e:	f004 fa0c 	bl	800cc9a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2225      	movs	r2, #37	; 0x25
 8008886:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	2202      	movs	r2, #2
 8008896:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f103 0210 	add.w	r2, r3, #16
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80088a6:	2301      	movs	r3, #1
 80088a8:	75fb      	strb	r3, [r7, #23]
      break;
 80088aa:	e038      	b.n	800891e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80088ac:	7afb      	ldrb	r3, [r7, #11]
 80088ae:	4619      	mov	r1, r3
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f7ff fd39 	bl	8008328 <USBH_MSC_BOT_Process>
 80088b6:	4603      	mov	r3, r0
 80088b8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d12d      	bne.n	800891c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088c6:	3303      	adds	r3, #3
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d2:	3302      	adds	r3, #2
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	021b      	lsls	r3, r3, #8
 80088d8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088e0:	3301      	adds	r3, #1
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80088e6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	061b      	lsls	r3, r3, #24
 80088f2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088fe:	3307      	adds	r3, #7
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	b29a      	uxth	r2, r3
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800890a:	3306      	adds	r3, #6
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	b29b      	uxth	r3, r3
 8008914:	4313      	orrs	r3, r2
 8008916:	b29a      	uxth	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	809a      	strh	r2, [r3, #4]
      break;
 800891c:	bf00      	nop
  }

  return error;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	460b      	mov	r3, r1
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008936:	2302      	movs	r3, #2
 8008938:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800894a:	2b01      	cmp	r3, #1
 800894c:	d002      	beq.n	8008954 <USBH_MSC_SCSI_Inquiry+0x2c>
 800894e:	2b02      	cmp	r3, #2
 8008950:	d03d      	beq.n	80089ce <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008952:	e089      	b.n	8008a68 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2224      	movs	r2, #36	; 0x24
 8008958:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	2280      	movs	r2, #128	; 0x80
 800895e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	220a      	movs	r2, #10
 8008966:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	3363      	adds	r3, #99	; 0x63
 800896e:	220a      	movs	r2, #10
 8008970:	2100      	movs	r1, #0
 8008972:	4618      	mov	r0, r3
 8008974:	f004 f991 	bl	800cc9a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2212      	movs	r2, #18
 800897c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	015b      	lsls	r3, r3, #5
 8008984:	b2da      	uxtb	r2, r3
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	2224      	movs	r2, #36	; 0x24
 80089a0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	2202      	movs	r2, #2
 80089b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f103 0210 	add.w	r2, r3, #16
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80089c8:	2301      	movs	r3, #1
 80089ca:	75fb      	strb	r3, [r7, #23]
      break;
 80089cc:	e04c      	b.n	8008a68 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80089ce:	7afb      	ldrb	r3, [r7, #11]
 80089d0:	4619      	mov	r1, r3
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f7ff fca8 	bl	8008328 <USBH_MSC_BOT_Process>
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d141      	bne.n	8008a66 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80089e2:	2222      	movs	r2, #34	; 0x22
 80089e4:	2100      	movs	r1, #0
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f004 f957 	bl	800cc9a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	f003 031f 	and.w	r3, r3, #31
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	095b      	lsrs	r3, r3, #5
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a14:	3301      	adds	r3, #1
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da03      	bge.n	8008a26 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	709a      	strb	r2, [r3, #2]
 8008a24:	e002      	b.n	8008a2c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	1cd8      	adds	r0, r3, #3
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a36:	3308      	adds	r3, #8
 8008a38:	2208      	movs	r2, #8
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f004 f922 	bl	800cc84 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f103 000c 	add.w	r0, r3, #12
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a4c:	3310      	adds	r3, #16
 8008a4e:	2210      	movs	r2, #16
 8008a50:	4619      	mov	r1, r3
 8008a52:	f004 f917 	bl	800cc84 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	331d      	adds	r3, #29
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008a60:	3220      	adds	r2, #32
 8008a62:	6812      	ldr	r2, [r2, #0]
 8008a64:	601a      	str	r2, [r3, #0]
      break;
 8008a66:	bf00      	nop
  }

  return error;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b086      	sub	sp, #24
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	607a      	str	r2, [r7, #4]
 8008a7e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008a80:	2302      	movs	r3, #2
 8008a82:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d002      	beq.n	8008a9e <USBH_MSC_SCSI_RequestSense+0x2c>
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d03d      	beq.n	8008b18 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008a9c:	e05d      	b.n	8008b5a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	220e      	movs	r2, #14
 8008aa2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2280      	movs	r2, #128	; 0x80
 8008aa8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	220a      	movs	r2, #10
 8008ab0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	3363      	adds	r3, #99	; 0x63
 8008ab8:	2210      	movs	r2, #16
 8008aba:	2100      	movs	r1, #0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f004 f8ec 	bl	800cc9a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2203      	movs	r2, #3
 8008ac6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008aca:	7afb      	ldrb	r3, [r7, #11]
 8008acc:	015b      	lsls	r3, r3, #5
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	220e      	movs	r2, #14
 8008aea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2202      	movs	r2, #2
 8008b02:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f103 0210 	add.w	r2, r3, #16
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008b12:	2301      	movs	r3, #1
 8008b14:	75fb      	strb	r3, [r7, #23]
      break;
 8008b16:	e020      	b.n	8008b5a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008b18:	7afb      	ldrb	r3, [r7, #11]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7ff fc03 	bl	8008328 <USBH_MSC_BOT_Process>
 8008b22:	4603      	mov	r3, r0
 8008b24:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d115      	bne.n	8008b58 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b32:	3302      	adds	r3, #2
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b46:	7b1a      	ldrb	r2, [r3, #12]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b52:	7b5a      	ldrb	r2, [r3, #13]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	709a      	strb	r2, [r3, #2]
      break;
 8008b58:	bf00      	nop
  }

  return error;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	460b      	mov	r3, r1
 8008b72:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008b74:	2302      	movs	r3, #2
 8008b76:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d002      	beq.n	8008b92 <USBH_MSC_SCSI_Write+0x2e>
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d047      	beq.n	8008c20 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008b90:	e04e      	b.n	8008c30 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	fb03 f202 	mul.w	r2, r3, r2
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	220a      	movs	r2, #10
 8008bb0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	3363      	adds	r3, #99	; 0x63
 8008bb8:	2210      	movs	r2, #16
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f004 f86c 	bl	800cc9a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	222a      	movs	r2, #42	; 0x2a
 8008bc6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008bca:	79fa      	ldrb	r2, [r7, #7]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008bd2:	79ba      	ldrb	r2, [r7, #6]
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008bda:	797a      	ldrb	r2, [r7, #5]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008be2:	1d3b      	adds	r3, r7, #4
 8008be4:	781a      	ldrb	r2, [r3, #0]
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008bec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008bf6:	f107 0320 	add.w	r3, r7, #32
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c1e:	e007      	b.n	8008c30 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	4619      	mov	r1, r3
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff fb7f 	bl	8008328 <USBH_MSC_BOT_Process>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c2e:	bf00      	nop
  }

  return error;
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b086      	sub	sp, #24
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
 8008c46:	460b      	mov	r3, r1
 8008c48:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d002      	beq.n	8008c68 <USBH_MSC_SCSI_Read+0x2e>
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d047      	beq.n	8008cf6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008c66:	e04e      	b.n	8008d06 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008c6e:	461a      	mov	r2, r3
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	fb03 f202 	mul.w	r2, r3, r2
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2280      	movs	r2, #128	; 0x80
 8008c7e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	220a      	movs	r2, #10
 8008c86:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	3363      	adds	r3, #99	; 0x63
 8008c8e:	2210      	movs	r2, #16
 8008c90:	2100      	movs	r1, #0
 8008c92:	4618      	mov	r0, r3
 8008c94:	f004 f801 	bl	800cc9a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	2228      	movs	r2, #40	; 0x28
 8008c9c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008ca0:	79fa      	ldrb	r2, [r7, #7]
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008ca8:	79ba      	ldrb	r2, [r7, #6]
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008cb0:	797a      	ldrb	r2, [r7, #5]
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008cc2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008ccc:	f107 0320 	add.w	r3, r7, #32
 8008cd0:	781a      	ldrb	r2, [r3, #0]
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf4:	e007      	b.n	8008d06 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008cf6:	7afb      	ldrb	r3, [r7, #11]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff fb14 	bl	8008328 <USBH_MSC_BOT_Process>
 8008d00:	4603      	mov	r3, r0
 8008d02:	75fb      	strb	r3, [r7, #23]
      break;
 8008d04:	bf00      	nop
  }

  return error;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af04      	add	r7, sp, #16
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	4608      	mov	r0, r1
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	4603      	mov	r3, r0
 8008d20:	70fb      	strb	r3, [r7, #3]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70bb      	strb	r3, [r7, #2]
 8008d26:	4613      	mov	r3, r2
 8008d28:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d2a:	7878      	ldrb	r0, [r7, #1]
 8008d2c:	78ba      	ldrb	r2, [r7, #2]
 8008d2e:	78f9      	ldrb	r1, [r7, #3]
 8008d30:	8b3b      	ldrh	r3, [r7, #24]
 8008d32:	9302      	str	r3, [sp, #8]
 8008d34:	7d3b      	ldrb	r3, [r7, #20]
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	7c3b      	ldrb	r3, [r7, #16]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f003 fe33 	bl	800c9aa <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b082      	sub	sp, #8
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	460b      	mov	r3, r1
 8008d58:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f003 fe52 	bl	800ca08 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f836 	bl	8008dec <USBH_GetFreePipe>
 8008d80:	4603      	mov	r3, r0
 8008d82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d84:	89fb      	ldrh	r3, [r7, #14]
 8008d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00a      	beq.n	8008da4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	89fb      	ldrh	r3, [r7, #14]
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	33e0      	adds	r3, #224	; 0xe0
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008da4:	89fb      	ldrh	r3, [r7, #14]
 8008da6:	b2db      	uxtb	r3, r3
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008dbc:	78fb      	ldrb	r3, [r7, #3]
 8008dbe:	2b0a      	cmp	r3, #10
 8008dc0:	d80d      	bhi.n	8008dde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	33e0      	adds	r3, #224	; 0xe0
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	78fb      	ldrb	r3, [r7, #3]
 8008dd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	33e0      	adds	r3, #224	; 0xe0
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
 8008dfc:	e00f      	b.n	8008e1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	33e0      	adds	r3, #224	; 0xe0
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d102      	bne.n	8008e18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	e007      	b.n	8008e28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	73fb      	strb	r3, [r7, #15]
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	2b0a      	cmp	r3, #10
 8008e22:	d9ec      	bls.n	8008dfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	6039      	str	r1, [r7, #0]
 8008e3e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008e40:	88fb      	ldrh	r3, [r7, #6]
 8008e42:	2b7f      	cmp	r3, #127	; 0x7f
 8008e44:	d802      	bhi.n	8008e4c <ff_convert+0x18>
		c = chr;
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	81fb      	strh	r3, [r7, #14]
 8008e4a:	e025      	b.n	8008e98 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00b      	beq.n	8008e6a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008e52:	88fb      	ldrh	r3, [r7, #6]
 8008e54:	2bff      	cmp	r3, #255	; 0xff
 8008e56:	d805      	bhi.n	8008e64 <ff_convert+0x30>
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	3b80      	subs	r3, #128	; 0x80
 8008e5c:	4a12      	ldr	r2, [pc, #72]	; (8008ea8 <ff_convert+0x74>)
 8008e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e62:	e000      	b.n	8008e66 <ff_convert+0x32>
 8008e64:	2300      	movs	r3, #0
 8008e66:	81fb      	strh	r3, [r7, #14]
 8008e68:	e016      	b.n	8008e98 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	81fb      	strh	r3, [r7, #14]
 8008e6e:	e009      	b.n	8008e84 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008e70:	89fb      	ldrh	r3, [r7, #14]
 8008e72:	4a0d      	ldr	r2, [pc, #52]	; (8008ea8 <ff_convert+0x74>)
 8008e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e78:	88fa      	ldrh	r2, [r7, #6]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d006      	beq.n	8008e8c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008e7e:	89fb      	ldrh	r3, [r7, #14]
 8008e80:	3301      	adds	r3, #1
 8008e82:	81fb      	strh	r3, [r7, #14]
 8008e84:	89fb      	ldrh	r3, [r7, #14]
 8008e86:	2b7f      	cmp	r3, #127	; 0x7f
 8008e88:	d9f2      	bls.n	8008e70 <ff_convert+0x3c>
 8008e8a:	e000      	b.n	8008e8e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008e8c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008e8e:	89fb      	ldrh	r3, [r7, #14]
 8008e90:	3380      	adds	r3, #128	; 0x80
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008e98:	89fb      	ldrh	r3, [r7, #14]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	0800db78 	.word	0x0800db78

08008eac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008eb6:	88fb      	ldrh	r3, [r7, #6]
 8008eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ebc:	d201      	bcs.n	8008ec2 <ff_wtoupper+0x16>
 8008ebe:	4b3e      	ldr	r3, [pc, #248]	; (8008fb8 <ff_wtoupper+0x10c>)
 8008ec0:	e000      	b.n	8008ec4 <ff_wtoupper+0x18>
 8008ec2:	4b3e      	ldr	r3, [pc, #248]	; (8008fbc <ff_wtoupper+0x110>)
 8008ec4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	1c9a      	adds	r2, r3, #2
 8008eca:	617a      	str	r2, [r7, #20]
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008ed0:	8a7b      	ldrh	r3, [r7, #18]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d068      	beq.n	8008fa8 <ff_wtoupper+0xfc>
 8008ed6:	88fa      	ldrh	r2, [r7, #6]
 8008ed8:	8a7b      	ldrh	r3, [r7, #18]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d364      	bcc.n	8008fa8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	1c9a      	adds	r2, r3, #2
 8008ee2:	617a      	str	r2, [r7, #20]
 8008ee4:	881b      	ldrh	r3, [r3, #0]
 8008ee6:	823b      	strh	r3, [r7, #16]
 8008ee8:	8a3b      	ldrh	r3, [r7, #16]
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	81fb      	strh	r3, [r7, #14]
 8008eee:	8a3b      	ldrh	r3, [r7, #16]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008ef4:	88fa      	ldrh	r2, [r7, #6]
 8008ef6:	8a79      	ldrh	r1, [r7, #18]
 8008ef8:	8a3b      	ldrh	r3, [r7, #16]
 8008efa:	440b      	add	r3, r1
 8008efc:	429a      	cmp	r2, r3
 8008efe:	da49      	bge.n	8008f94 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008f00:	89fb      	ldrh	r3, [r7, #14]
 8008f02:	2b08      	cmp	r3, #8
 8008f04:	d84f      	bhi.n	8008fa6 <ff_wtoupper+0xfa>
 8008f06:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <ff_wtoupper+0x60>)
 8008f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0c:	08008f31 	.word	0x08008f31
 8008f10:	08008f43 	.word	0x08008f43
 8008f14:	08008f59 	.word	0x08008f59
 8008f18:	08008f61 	.word	0x08008f61
 8008f1c:	08008f69 	.word	0x08008f69
 8008f20:	08008f71 	.word	0x08008f71
 8008f24:	08008f79 	.word	0x08008f79
 8008f28:	08008f81 	.word	0x08008f81
 8008f2c:	08008f89 	.word	0x08008f89
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008f30:	88fa      	ldrh	r2, [r7, #6]
 8008f32:	8a7b      	ldrh	r3, [r7, #18]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	80fb      	strh	r3, [r7, #6]
 8008f40:	e027      	b.n	8008f92 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008f42:	88fa      	ldrh	r2, [r7, #6]
 8008f44:	8a7b      	ldrh	r3, [r7, #18]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	88fa      	ldrh	r2, [r7, #6]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	80fb      	strh	r3, [r7, #6]
 8008f56:	e01c      	b.n	8008f92 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	3b10      	subs	r3, #16
 8008f5c:	80fb      	strh	r3, [r7, #6]
 8008f5e:	e018      	b.n	8008f92 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008f60:	88fb      	ldrh	r3, [r7, #6]
 8008f62:	3b20      	subs	r3, #32
 8008f64:	80fb      	strh	r3, [r7, #6]
 8008f66:	e014      	b.n	8008f92 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008f68:	88fb      	ldrh	r3, [r7, #6]
 8008f6a:	3b30      	subs	r3, #48	; 0x30
 8008f6c:	80fb      	strh	r3, [r7, #6]
 8008f6e:	e010      	b.n	8008f92 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008f70:	88fb      	ldrh	r3, [r7, #6]
 8008f72:	3b1a      	subs	r3, #26
 8008f74:	80fb      	strh	r3, [r7, #6]
 8008f76:	e00c      	b.n	8008f92 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008f78:	88fb      	ldrh	r3, [r7, #6]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	80fb      	strh	r3, [r7, #6]
 8008f7e:	e008      	b.n	8008f92 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008f80:	88fb      	ldrh	r3, [r7, #6]
 8008f82:	3b50      	subs	r3, #80	; 0x50
 8008f84:	80fb      	strh	r3, [r7, #6]
 8008f86:	e004      	b.n	8008f92 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008f88:	88fb      	ldrh	r3, [r7, #6]
 8008f8a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008f8e:	80fb      	strh	r3, [r7, #6]
 8008f90:	bf00      	nop
			}
			break;
 8008f92:	e008      	b.n	8008fa6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008f94:	89fb      	ldrh	r3, [r7, #14]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d195      	bne.n	8008ec6 <ff_wtoupper+0x1a>
 8008f9a:	8a3b      	ldrh	r3, [r7, #16]
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008fa4:	e78f      	b.n	8008ec6 <ff_wtoupper+0x1a>
			break;
 8008fa6:	bf00      	nop
	}

	return chr;
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	0800dc78 	.word	0x0800dc78
 8008fbc:	0800de6c 	.word	0x0800de6c

08008fc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	4a08      	ldr	r2, [pc, #32]	; (8008ff0 <disk_status+0x30>)
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	79fa      	ldrb	r2, [r7, #7]
 8008fd8:	4905      	ldr	r1, [pc, #20]	; (8008ff0 <disk_status+0x30>)
 8008fda:	440a      	add	r2, r1
 8008fdc:	7a12      	ldrb	r2, [r2, #8]
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4798      	blx	r3
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	200002e0 	.word	0x200002e0

08008ff4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	4a0d      	ldr	r2, [pc, #52]	; (800903c <disk_initialize+0x48>)
 8009006:	5cd3      	ldrb	r3, [r2, r3]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d111      	bne.n	8009030 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	4a0b      	ldr	r2, [pc, #44]	; (800903c <disk_initialize+0x48>)
 8009010:	2101      	movs	r1, #1
 8009012:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	4a09      	ldr	r2, [pc, #36]	; (800903c <disk_initialize+0x48>)
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	79fa      	ldrb	r2, [r7, #7]
 8009022:	4906      	ldr	r1, [pc, #24]	; (800903c <disk_initialize+0x48>)
 8009024:	440a      	add	r2, r1
 8009026:	7a12      	ldrb	r2, [r2, #8]
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	4603      	mov	r3, r0
 800902e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	200002e0 	.word	0x200002e0

08009040 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009040:	b590      	push	{r4, r7, lr}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	4a0a      	ldr	r2, [pc, #40]	; (800907c <disk_read+0x3c>)
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	689c      	ldr	r4, [r3, #8]
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	4a07      	ldr	r2, [pc, #28]	; (800907c <disk_read+0x3c>)
 8009060:	4413      	add	r3, r2
 8009062:	7a18      	ldrb	r0, [r3, #8]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	47a0      	blx	r4
 800906c:	4603      	mov	r3, r0
 800906e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009070:	7dfb      	ldrb	r3, [r7, #23]
}
 8009072:	4618      	mov	r0, r3
 8009074:	371c      	adds	r7, #28
 8009076:	46bd      	mov	sp, r7
 8009078:	bd90      	pop	{r4, r7, pc}
 800907a:	bf00      	nop
 800907c:	200002e0 	.word	0x200002e0

08009080 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009080:	b590      	push	{r4, r7, lr}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <disk_write+0x3c>)
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	68dc      	ldr	r4, [r3, #12]
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	4a07      	ldr	r2, [pc, #28]	; (80090bc <disk_write+0x3c>)
 80090a0:	4413      	add	r3, r2
 80090a2:	7a18      	ldrb	r0, [r3, #8]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	47a0      	blx	r4
 80090ac:	4603      	mov	r3, r0
 80090ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd90      	pop	{r4, r7, pc}
 80090ba:	bf00      	nop
 80090bc:	200002e0 	.word	0x200002e0

080090c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	603a      	str	r2, [r7, #0]
 80090ca:	71fb      	strb	r3, [r7, #7]
 80090cc:	460b      	mov	r3, r1
 80090ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	4a09      	ldr	r2, [pc, #36]	; (80090f8 <disk_ioctl+0x38>)
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	79fa      	ldrb	r2, [r7, #7]
 80090de:	4906      	ldr	r1, [pc, #24]	; (80090f8 <disk_ioctl+0x38>)
 80090e0:	440a      	add	r2, r1
 80090e2:	7a10      	ldrb	r0, [r2, #8]
 80090e4:	79b9      	ldrb	r1, [r7, #6]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	4798      	blx	r3
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	200002e0 	.word	0x200002e0

080090fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3301      	adds	r3, #1
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800910c:	89fb      	ldrh	r3, [r7, #14]
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	b21a      	sxth	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	b21b      	sxth	r3, r3
 8009118:	4313      	orrs	r3, r2
 800911a:	b21b      	sxth	r3, r3
 800911c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800911e:	89fb      	ldrh	r3, [r7, #14]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3303      	adds	r3, #3
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	021b      	lsls	r3, r3, #8
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	3202      	adds	r2, #2
 8009144:	7812      	ldrb	r2, [r2, #0]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	3201      	adds	r2, #1
 8009152:	7812      	ldrb	r2, [r2, #0]
 8009154:	4313      	orrs	r3, r2
 8009156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	7812      	ldrb	r2, [r2, #0]
 8009160:	4313      	orrs	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]
	return rv;
 8009164:	68fb      	ldr	r3, [r7, #12]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	1c5a      	adds	r2, r3, #1
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	887a      	ldrh	r2, [r7, #2]
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	701a      	strb	r2, [r3, #0]
 800918a:	887b      	ldrh	r3, [r7, #2]
 800918c:	0a1b      	lsrs	r3, r3, #8
 800918e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	607a      	str	r2, [r7, #4]
 8009196:	887a      	ldrh	r2, [r7, #2]
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	701a      	strb	r2, [r3, #0]
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	607a      	str	r2, [r7, #4]
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	0a1b      	lsrs	r3, r3, #8
 80091c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	b2d2      	uxtb	r2, r2
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	0a1b      	lsrs	r3, r3, #8
 80091d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	b2d2      	uxtb	r2, r2
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	0a1b      	lsrs	r3, r3, #8
 80091e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	b2d2      	uxtb	r2, r2
 80091f2:	701a      	strb	r2, [r3, #0]
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00d      	beq.n	8009236 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	1c53      	adds	r3, r2, #1
 800921e:	613b      	str	r3, [r7, #16]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	1c59      	adds	r1, r3, #1
 8009224:	6179      	str	r1, [r7, #20]
 8009226:	7812      	ldrb	r2, [r2, #0]
 8009228:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	3b01      	subs	r3, #1
 800922e:	607b      	str	r3, [r7, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1f1      	bne.n	800921a <mem_cpy+0x1a>
	}
}
 8009236:	bf00      	nop
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009242:	b480      	push	{r7}
 8009244:	b087      	sub	sp, #28
 8009246:	af00      	add	r7, sp, #0
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	617a      	str	r2, [r7, #20]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	b2d2      	uxtb	r2, r2
 800925c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3b01      	subs	r3, #1
 8009262:	607b      	str	r3, [r7, #4]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f3      	bne.n	8009252 <mem_set+0x10>
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009276:	b480      	push	{r7}
 8009278:	b089      	sub	sp, #36	; 0x24
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	61fa      	str	r2, [r7, #28]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	4619      	mov	r1, r3
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	61ba      	str	r2, [r7, #24]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	1acb      	subs	r3, r1, r3
 80092a2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	607b      	str	r3, [r7, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <mem_cmp+0x40>
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0eb      	beq.n	800928e <mem_cmp+0x18>

	return r;
 80092b6:	697b      	ldr	r3, [r7, #20]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3724      	adds	r7, #36	; 0x24
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80092ce:	e002      	b.n	80092d6 <chk_chr+0x12>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3301      	adds	r3, #1
 80092d4:	607b      	str	r3, [r7, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d005      	beq.n	80092ea <chk_chr+0x26>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d1f2      	bne.n	80092d0 <chk_chr+0xc>
	return *str;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	781b      	ldrb	r3, [r3, #0]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	370c      	adds	r7, #12
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009306:	2300      	movs	r3, #0
 8009308:	60bb      	str	r3, [r7, #8]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	e029      	b.n	8009364 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009310:	4a27      	ldr	r2, [pc, #156]	; (80093b0 <chk_lock+0xb4>)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	011b      	lsls	r3, r3, #4
 8009316:	4413      	add	r3, r2
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d01d      	beq.n	800935a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800931e:	4a24      	ldr	r2, [pc, #144]	; (80093b0 <chk_lock+0xb4>)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	4413      	add	r3, r2
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d116      	bne.n	800935e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009330:	4a1f      	ldr	r2, [pc, #124]	; (80093b0 <chk_lock+0xb4>)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	4413      	add	r3, r2
 8009338:	3304      	adds	r3, #4
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009340:	429a      	cmp	r2, r3
 8009342:	d10c      	bne.n	800935e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009344:	4a1a      	ldr	r2, [pc, #104]	; (80093b0 <chk_lock+0xb4>)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	011b      	lsls	r3, r3, #4
 800934a:	4413      	add	r3, r2
 800934c:	3308      	adds	r3, #8
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009354:	429a      	cmp	r2, r3
 8009356:	d102      	bne.n	800935e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009358:	e007      	b.n	800936a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800935a:	2301      	movs	r3, #1
 800935c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3301      	adds	r3, #1
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d9d2      	bls.n	8009310 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2b02      	cmp	r3, #2
 800936e:	d109      	bne.n	8009384 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d102      	bne.n	800937c <chk_lock+0x80>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d101      	bne.n	8009380 <chk_lock+0x84>
 800937c:	2300      	movs	r3, #0
 800937e:	e010      	b.n	80093a2 <chk_lock+0xa6>
 8009380:	2312      	movs	r3, #18
 8009382:	e00e      	b.n	80093a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d108      	bne.n	800939c <chk_lock+0xa0>
 800938a:	4a09      	ldr	r2, [pc, #36]	; (80093b0 <chk_lock+0xb4>)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	4413      	add	r3, r2
 8009392:	330c      	adds	r3, #12
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800939a:	d101      	bne.n	80093a0 <chk_lock+0xa4>
 800939c:	2310      	movs	r3, #16
 800939e:	e000      	b.n	80093a2 <chk_lock+0xa6>
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	200000c0 	.word	0x200000c0

080093b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80093ba:	2300      	movs	r3, #0
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	e002      	b.n	80093c6 <enq_lock+0x12>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3301      	adds	r3, #1
 80093c4:	607b      	str	r3, [r7, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d806      	bhi.n	80093da <enq_lock+0x26>
 80093cc:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <enq_lock+0x40>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	011b      	lsls	r3, r3, #4
 80093d2:	4413      	add	r3, r2
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1f2      	bne.n	80093c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	bf14      	ite	ne
 80093e0:	2301      	movne	r3, #1
 80093e2:	2300      	moveq	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	200000c0 	.word	0x200000c0

080093f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]
 8009406:	e01f      	b.n	8009448 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009408:	4a41      	ldr	r2, [pc, #260]	; (8009510 <inc_lock+0x118>)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	011b      	lsls	r3, r3, #4
 800940e:	4413      	add	r3, r2
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d113      	bne.n	8009442 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800941a:	4a3d      	ldr	r2, [pc, #244]	; (8009510 <inc_lock+0x118>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	011b      	lsls	r3, r3, #4
 8009420:	4413      	add	r3, r2
 8009422:	3304      	adds	r3, #4
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800942a:	429a      	cmp	r2, r3
 800942c:	d109      	bne.n	8009442 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800942e:	4a38      	ldr	r2, [pc, #224]	; (8009510 <inc_lock+0x118>)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	4413      	add	r3, r2
 8009436:	3308      	adds	r3, #8
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800943e:	429a      	cmp	r2, r3
 8009440:	d006      	beq.n	8009450 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3301      	adds	r3, #1
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d9dc      	bls.n	8009408 <inc_lock+0x10>
 800944e:	e000      	b.n	8009452 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009450:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b02      	cmp	r3, #2
 8009456:	d132      	bne.n	80094be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	e002      	b.n	8009464 <inc_lock+0x6c>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3301      	adds	r3, #1
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d806      	bhi.n	8009478 <inc_lock+0x80>
 800946a:	4a29      	ldr	r2, [pc, #164]	; (8009510 <inc_lock+0x118>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	4413      	add	r3, r2
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1f2      	bne.n	800945e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d101      	bne.n	8009482 <inc_lock+0x8a>
 800947e:	2300      	movs	r3, #0
 8009480:	e040      	b.n	8009504 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4922      	ldr	r1, [pc, #136]	; (8009510 <inc_lock+0x118>)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	011b      	lsls	r3, r3, #4
 800948c:	440b      	add	r3, r1
 800948e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	491e      	ldr	r1, [pc, #120]	; (8009510 <inc_lock+0x118>)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	440b      	add	r3, r1
 800949c:	3304      	adds	r3, #4
 800949e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695a      	ldr	r2, [r3, #20]
 80094a4:	491a      	ldr	r1, [pc, #104]	; (8009510 <inc_lock+0x118>)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	011b      	lsls	r3, r3, #4
 80094aa:	440b      	add	r3, r1
 80094ac:	3308      	adds	r3, #8
 80094ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80094b0:	4a17      	ldr	r2, [pc, #92]	; (8009510 <inc_lock+0x118>)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	011b      	lsls	r3, r3, #4
 80094b6:	4413      	add	r3, r2
 80094b8:	330c      	adds	r3, #12
 80094ba:	2200      	movs	r2, #0
 80094bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d009      	beq.n	80094d8 <inc_lock+0xe0>
 80094c4:	4a12      	ldr	r2, [pc, #72]	; (8009510 <inc_lock+0x118>)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	4413      	add	r3, r2
 80094cc:	330c      	adds	r3, #12
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <inc_lock+0xe0>
 80094d4:	2300      	movs	r3, #0
 80094d6:	e015      	b.n	8009504 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d108      	bne.n	80094f0 <inc_lock+0xf8>
 80094de:	4a0c      	ldr	r2, [pc, #48]	; (8009510 <inc_lock+0x118>)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	011b      	lsls	r3, r3, #4
 80094e4:	4413      	add	r3, r2
 80094e6:	330c      	adds	r3, #12
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	e001      	b.n	80094f4 <inc_lock+0xfc>
 80094f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094f4:	4906      	ldr	r1, [pc, #24]	; (8009510 <inc_lock+0x118>)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	011b      	lsls	r3, r3, #4
 80094fa:	440b      	add	r3, r1
 80094fc:	330c      	adds	r3, #12
 80094fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3301      	adds	r3, #1
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	200000c0 	.word	0x200000c0

08009514 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3b01      	subs	r3, #1
 8009520:	607b      	str	r3, [r7, #4]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d825      	bhi.n	8009574 <dec_lock+0x60>
		n = Files[i].ctr;
 8009528:	4a17      	ldr	r2, [pc, #92]	; (8009588 <dec_lock+0x74>)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	011b      	lsls	r3, r3, #4
 800952e:	4413      	add	r3, r2
 8009530:	330c      	adds	r3, #12
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009536:	89fb      	ldrh	r3, [r7, #14]
 8009538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800953c:	d101      	bne.n	8009542 <dec_lock+0x2e>
 800953e:	2300      	movs	r3, #0
 8009540:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009542:	89fb      	ldrh	r3, [r7, #14]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <dec_lock+0x3a>
 8009548:	89fb      	ldrh	r3, [r7, #14]
 800954a:	3b01      	subs	r3, #1
 800954c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800954e:	4a0e      	ldr	r2, [pc, #56]	; (8009588 <dec_lock+0x74>)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	4413      	add	r3, r2
 8009556:	330c      	adds	r3, #12
 8009558:	89fa      	ldrh	r2, [r7, #14]
 800955a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d105      	bne.n	800956e <dec_lock+0x5a>
 8009562:	4a09      	ldr	r2, [pc, #36]	; (8009588 <dec_lock+0x74>)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	011b      	lsls	r3, r3, #4
 8009568:	4413      	add	r3, r2
 800956a:	2200      	movs	r2, #0
 800956c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	737b      	strb	r3, [r7, #13]
 8009572:	e001      	b.n	8009578 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009574:	2302      	movs	r3, #2
 8009576:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009578:	7b7b      	ldrb	r3, [r7, #13]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	200000c0 	.word	0x200000c0

0800958c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]
 8009598:	e010      	b.n	80095bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800959a:	4a0d      	ldr	r2, [pc, #52]	; (80095d0 <clear_lock+0x44>)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	011b      	lsls	r3, r3, #4
 80095a0:	4413      	add	r3, r2
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d105      	bne.n	80095b6 <clear_lock+0x2a>
 80095aa:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <clear_lock+0x44>)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	4413      	add	r3, r2
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3301      	adds	r3, #1
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d9eb      	bls.n	800959a <clear_lock+0xe>
	}
}
 80095c2:	bf00      	nop
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	200000c0 	.word	0x200000c0

080095d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	78db      	ldrb	r3, [r3, #3]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d034      	beq.n	8009652 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	7858      	ldrb	r0, [r3, #1]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80095f8:	2301      	movs	r3, #1
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	f7ff fd40 	bl	8009080 <disk_write>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009606:	2301      	movs	r3, #1
 8009608:	73fb      	strb	r3, [r7, #15]
 800960a:	e022      	b.n	8009652 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	1ad2      	subs	r2, r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	429a      	cmp	r2, r3
 8009620:	d217      	bcs.n	8009652 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	789b      	ldrb	r3, [r3, #2]
 8009626:	613b      	str	r3, [r7, #16]
 8009628:	e010      	b.n	800964c <sync_window+0x78>
					wsect += fs->fsize;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	4413      	add	r3, r2
 8009632:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7858      	ldrb	r0, [r3, #1]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800963e:	2301      	movs	r3, #1
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	f7ff fd1d 	bl	8009080 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	3b01      	subs	r3, #1
 800964a:	613b      	str	r3, [r7, #16]
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d8eb      	bhi.n	800962a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	429a      	cmp	r2, r3
 8009672:	d01b      	beq.n	80096ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff ffad 	bl	80095d4 <sync_window>
 800967a:	4603      	mov	r3, r0
 800967c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d113      	bne.n	80096ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7858      	ldrb	r0, [r3, #1]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800968e:	2301      	movs	r3, #1
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	f7ff fcd5 	bl	8009040 <disk_read>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d004      	beq.n	80096a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800969c:	f04f 33ff 	mov.w	r3, #4294967295
 80096a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
	...

080096b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff ff87 	bl	80095d4 <sync_window>
 80096c6:	4603      	mov	r3, r0
 80096c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d159      	bne.n	8009784 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d149      	bne.n	800976c <sync_fs+0xb4>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	791b      	ldrb	r3, [r3, #4]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d145      	bne.n	800976c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	899b      	ldrh	r3, [r3, #12]
 80096ea:	461a      	mov	r2, r3
 80096ec:	2100      	movs	r1, #0
 80096ee:	f7ff fda8 	bl	8009242 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3338      	adds	r3, #56	; 0x38
 80096f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80096fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff fd37 	bl	8009172 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3338      	adds	r3, #56	; 0x38
 8009708:	4921      	ldr	r1, [pc, #132]	; (8009790 <sync_fs+0xd8>)
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fd4c 	bl	80091a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3338      	adds	r3, #56	; 0x38
 8009714:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009718:	491e      	ldr	r1, [pc, #120]	; (8009794 <sync_fs+0xdc>)
 800971a:	4618      	mov	r0, r3
 800971c:	f7ff fd44 	bl	80091a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3338      	adds	r3, #56	; 0x38
 8009724:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	4619      	mov	r1, r3
 800972e:	4610      	mov	r0, r2
 8009730:	f7ff fd3a 	bl	80091a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3338      	adds	r3, #56	; 0x38
 8009738:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f7ff fd30 	bl	80091a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7858      	ldrb	r0, [r3, #1]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009760:	2301      	movs	r3, #1
 8009762:	f7ff fc8d 	bl	8009080 <disk_write>
			fs->fsi_flag = 0;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2200      	movs	r2, #0
 8009772:	2100      	movs	r1, #0
 8009774:	4618      	mov	r0, r3
 8009776:	f7ff fca3 	bl	80090c0 <disk_ioctl>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d001      	beq.n	8009784 <sync_fs+0xcc>
 8009780:	2301      	movs	r3, #1
 8009782:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	41615252 	.word	0x41615252
 8009794:	61417272 	.word	0x61417272

08009798 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	3b02      	subs	r3, #2
 80097a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	3b02      	subs	r3, #2
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d301      	bcc.n	80097b8 <clust2sect+0x20>
 80097b4:	2300      	movs	r3, #0
 80097b6:	e008      	b.n	80097ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	895b      	ldrh	r3, [r3, #10]
 80097bc:	461a      	mov	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	fb03 f202 	mul.w	r2, r3, r2
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c8:	4413      	add	r3, r2
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b086      	sub	sp, #24
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d904      	bls.n	80097f6 <get_fat+0x20>
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d302      	bcc.n	80097fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80097f6:	2301      	movs	r3, #1
 80097f8:	617b      	str	r3, [r7, #20]
 80097fa:	e0b7      	b.n	800996c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80097fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009800:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b02      	cmp	r3, #2
 8009808:	d05a      	beq.n	80098c0 <get_fat+0xea>
 800980a:	2b03      	cmp	r3, #3
 800980c:	d07d      	beq.n	800990a <get_fat+0x134>
 800980e:	2b01      	cmp	r3, #1
 8009810:	f040 80a2 	bne.w	8009958 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	085b      	lsrs	r3, r3, #1
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	4413      	add	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	899b      	ldrh	r3, [r3, #12]
 800982a:	4619      	mov	r1, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009832:	4413      	add	r3, r2
 8009834:	4619      	mov	r1, r3
 8009836:	6938      	ldr	r0, [r7, #16]
 8009838:	f7ff ff10 	bl	800965c <move_window>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	f040 808d 	bne.w	800995e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	60fa      	str	r2, [r7, #12]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	8992      	ldrh	r2, [r2, #12]
 800984e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009852:	fb02 f201 	mul.w	r2, r2, r1
 8009856:	1a9b      	subs	r3, r3, r2
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4413      	add	r3, r2
 800985c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009860:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	899b      	ldrh	r3, [r3, #12]
 800986a:	4619      	mov	r1, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009872:	4413      	add	r3, r2
 8009874:	4619      	mov	r1, r3
 8009876:	6938      	ldr	r0, [r7, #16]
 8009878:	f7ff fef0 	bl	800965c <move_window>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d16f      	bne.n	8009962 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	899b      	ldrh	r3, [r3, #12]
 8009886:	461a      	mov	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	fbb3 f1f2 	udiv	r1, r3, r2
 800988e:	fb02 f201 	mul.w	r2, r2, r1
 8009892:	1a9b      	subs	r3, r3, r2
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	4413      	add	r3, r2
 8009898:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800989c:	021b      	lsls	r3, r3, #8
 800989e:	461a      	mov	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <get_fat+0xe0>
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	091b      	lsrs	r3, r3, #4
 80098b4:	e002      	b.n	80098bc <get_fat+0xe6>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098bc:	617b      	str	r3, [r7, #20]
			break;
 80098be:	e055      	b.n	800996c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	899b      	ldrh	r3, [r3, #12]
 80098c8:	085b      	lsrs	r3, r3, #1
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	4619      	mov	r1, r3
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80098d4:	4413      	add	r3, r2
 80098d6:	4619      	mov	r1, r3
 80098d8:	6938      	ldr	r0, [r7, #16]
 80098da:	f7ff febf 	bl	800965c <move_window>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d140      	bne.n	8009966 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	8992      	ldrh	r2, [r2, #12]
 80098f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80098f6:	fb02 f200 	mul.w	r2, r2, r0
 80098fa:	1a9b      	subs	r3, r3, r2
 80098fc:	440b      	add	r3, r1
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff fbfc 	bl	80090fc <ld_word>
 8009904:	4603      	mov	r3, r0
 8009906:	617b      	str	r3, [r7, #20]
			break;
 8009908:	e030      	b.n	800996c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	899b      	ldrh	r3, [r3, #12]
 8009912:	089b      	lsrs	r3, r3, #2
 8009914:	b29b      	uxth	r3, r3
 8009916:	4619      	mov	r1, r3
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	fbb3 f3f1 	udiv	r3, r3, r1
 800991e:	4413      	add	r3, r2
 8009920:	4619      	mov	r1, r3
 8009922:	6938      	ldr	r0, [r7, #16]
 8009924:	f7ff fe9a 	bl	800965c <move_window>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d11d      	bne.n	800996a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	8992      	ldrh	r2, [r2, #12]
 800993c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009940:	fb02 f200 	mul.w	r2, r2, r0
 8009944:	1a9b      	subs	r3, r3, r2
 8009946:	440b      	add	r3, r1
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fbef 	bl	800912c <ld_dword>
 800994e:	4603      	mov	r3, r0
 8009950:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009954:	617b      	str	r3, [r7, #20]
			break;
 8009956:	e009      	b.n	800996c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009958:	2301      	movs	r3, #1
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	e006      	b.n	800996c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800995e:	bf00      	nop
 8009960:	e004      	b.n	800996c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009962:	bf00      	nop
 8009964:	e002      	b.n	800996c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009966:	bf00      	nop
 8009968:	e000      	b.n	800996c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800996a:	bf00      	nop
		}
	}

	return val;
 800996c:	697b      	ldr	r3, [r7, #20]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009976:	b590      	push	{r4, r7, lr}
 8009978:	b089      	sub	sp, #36	; 0x24
 800997a:	af00      	add	r7, sp, #0
 800997c:	60f8      	str	r0, [r7, #12]
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009982:	2302      	movs	r3, #2
 8009984:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b01      	cmp	r3, #1
 800998a:	f240 8106 	bls.w	8009b9a <put_fat+0x224>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	429a      	cmp	r2, r3
 8009996:	f080 8100 	bcs.w	8009b9a <put_fat+0x224>
		switch (fs->fs_type) {
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	2b02      	cmp	r3, #2
 80099a0:	f000 8088 	beq.w	8009ab4 <put_fat+0x13e>
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	f000 80b0 	beq.w	8009b0a <put_fat+0x194>
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	f040 80f5 	bne.w	8009b9a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	61bb      	str	r3, [r7, #24]
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	4413      	add	r3, r2
 80099bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	899b      	ldrh	r3, [r3, #12]
 80099c6:	4619      	mov	r1, r3
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80099ce:	4413      	add	r3, r2
 80099d0:	4619      	mov	r1, r3
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f7ff fe42 	bl	800965c <move_window>
 80099d8:	4603      	mov	r3, r0
 80099da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099dc:	7ffb      	ldrb	r3, [r7, #31]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f040 80d4 	bne.w	8009b8c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	61ba      	str	r2, [r7, #24]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	8992      	ldrh	r2, [r2, #12]
 80099f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80099f8:	fb02 f200 	mul.w	r2, r2, r0
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	440b      	add	r3, r1
 8009a00:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00d      	beq.n	8009a28 <put_fat+0xb2>
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	b25b      	sxtb	r3, r3
 8009a12:	f003 030f 	and.w	r3, r3, #15
 8009a16:	b25a      	sxtb	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	011b      	lsls	r3, r3, #4
 8009a1e:	b25b      	sxtb	r3, r3
 8009a20:	4313      	orrs	r3, r2
 8009a22:	b25b      	sxtb	r3, r3
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	e001      	b.n	8009a2c <put_fat+0xb6>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2201      	movs	r2, #1
 8009a34:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	899b      	ldrh	r3, [r3, #12]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a46:	4413      	add	r3, r2
 8009a48:	4619      	mov	r1, r3
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f7ff fe06 	bl	800965c <move_window>
 8009a50:	4603      	mov	r3, r0
 8009a52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a54:	7ffb      	ldrb	r3, [r7, #31]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f040 809a 	bne.w	8009b90 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	899b      	ldrh	r3, [r3, #12]
 8009a66:	461a      	mov	r2, r3
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a6e:	fb02 f200 	mul.w	r2, r2, r0
 8009a72:	1a9b      	subs	r3, r3, r2
 8009a74:	440b      	add	r3, r1
 8009a76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <put_fat+0x114>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	091b      	lsrs	r3, r3, #4
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	e00e      	b.n	8009aa8 <put_fat+0x132>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	b25b      	sxtb	r3, r3
 8009a90:	f023 030f 	bic.w	r3, r3, #15
 8009a94:	b25a      	sxtb	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	0a1b      	lsrs	r3, r3, #8
 8009a9a:	b25b      	sxtb	r3, r3
 8009a9c:	f003 030f 	and.w	r3, r3, #15
 8009aa0:	b25b      	sxtb	r3, r3
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	b25b      	sxtb	r3, r3
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	70da      	strb	r2, [r3, #3]
			break;
 8009ab2:	e072      	b.n	8009b9a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	899b      	ldrh	r3, [r3, #12]
 8009abc:	085b      	lsrs	r3, r3, #1
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ac8:	4413      	add	r3, r2
 8009aca:	4619      	mov	r1, r3
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7ff fdc5 	bl	800965c <move_window>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ad6:	7ffb      	ldrb	r3, [r7, #31]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d15b      	bne.n	8009b94 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	8992      	ldrh	r2, [r2, #12]
 8009aea:	fbb3 f0f2 	udiv	r0, r3, r2
 8009aee:	fb02 f200 	mul.w	r2, r2, r0
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	440b      	add	r3, r1
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	b292      	uxth	r2, r2
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7ff fb38 	bl	8009172 <st_word>
			fs->wflag = 1;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	70da      	strb	r2, [r3, #3]
			break;
 8009b08:	e047      	b.n	8009b9a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	899b      	ldrh	r3, [r3, #12]
 8009b12:	089b      	lsrs	r3, r3, #2
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	4619      	mov	r1, r3
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b1e:	4413      	add	r3, r2
 8009b20:	4619      	mov	r1, r3
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f7ff fd9a 	bl	800965c <move_window>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b2c:	7ffb      	ldrb	r3, [r7, #31]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d132      	bne.n	8009b98 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	8992      	ldrh	r2, [r2, #12]
 8009b46:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b4a:	fb02 f200 	mul.w	r2, r2, r0
 8009b4e:	1a9b      	subs	r3, r3, r2
 8009b50:	440b      	add	r3, r1
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7ff faea 	bl	800912c <ld_dword>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b5e:	4323      	orrs	r3, r4
 8009b60:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	8992      	ldrh	r2, [r2, #12]
 8009b70:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b74:	fb02 f200 	mul.w	r2, r2, r0
 8009b78:	1a9b      	subs	r3, r3, r2
 8009b7a:	440b      	add	r3, r1
 8009b7c:	6879      	ldr	r1, [r7, #4]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7ff fb12 	bl	80091a8 <st_dword>
			fs->wflag = 1;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	70da      	strb	r2, [r3, #3]
			break;
 8009b8a:	e006      	b.n	8009b9a <put_fat+0x224>
			if (res != FR_OK) break;
 8009b8c:	bf00      	nop
 8009b8e:	e004      	b.n	8009b9a <put_fat+0x224>
			if (res != FR_OK) break;
 8009b90:	bf00      	nop
 8009b92:	e002      	b.n	8009b9a <put_fat+0x224>
			if (res != FR_OK) break;
 8009b94:	bf00      	nop
 8009b96:	e000      	b.n	8009b9a <put_fat+0x224>
			if (res != FR_OK) break;
 8009b98:	bf00      	nop
		}
	}
	return res;
 8009b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3724      	adds	r7, #36	; 0x24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd90      	pop	{r4, r7, pc}

08009ba4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b088      	sub	sp, #32
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d904      	bls.n	8009bca <remove_chain+0x26>
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d301      	bcc.n	8009bce <remove_chain+0x2a>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	e04b      	b.n	8009c66 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00c      	beq.n	8009bee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	69b8      	ldr	r0, [r7, #24]
 8009bdc:	f7ff fecb 	bl	8009976 <put_fat>
 8009be0:	4603      	mov	r3, r0
 8009be2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009be4:	7ffb      	ldrb	r3, [r7, #31]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <remove_chain+0x4a>
 8009bea:	7ffb      	ldrb	r3, [r7, #31]
 8009bec:	e03b      	b.n	8009c66 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7ff fdf0 	bl	80097d6 <get_fat>
 8009bf6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d031      	beq.n	8009c62 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d101      	bne.n	8009c08 <remove_chain+0x64>
 8009c04:	2302      	movs	r3, #2
 8009c06:	e02e      	b.n	8009c66 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0e:	d101      	bne.n	8009c14 <remove_chain+0x70>
 8009c10:	2301      	movs	r3, #1
 8009c12:	e028      	b.n	8009c66 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009c14:	2200      	movs	r2, #0
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	69b8      	ldr	r0, [r7, #24]
 8009c1a:	f7ff feac 	bl	8009976 <put_fat>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009c22:	7ffb      	ldrb	r3, [r7, #31]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <remove_chain+0x88>
 8009c28:	7ffb      	ldrb	r3, [r7, #31]
 8009c2a:	e01c      	b.n	8009c66 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	699a      	ldr	r2, [r3, #24]
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	3b02      	subs	r3, #2
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d20b      	bcs.n	8009c52 <remove_chain+0xae>
			fs->free_clst++;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	791b      	ldrb	r3, [r3, #4]
 8009c48:	f043 0301 	orr.w	r3, r3, #1
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d3c6      	bcc.n	8009bee <remove_chain+0x4a>
 8009c60:	e000      	b.n	8009c64 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009c62:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3720      	adds	r7, #32
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b088      	sub	sp, #32
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10d      	bne.n	8009ca0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <create_chain+0x2c>
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	69ba      	ldr	r2, [r7, #24]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d31b      	bcc.n	8009cd2 <create_chain+0x64>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	61bb      	str	r3, [r7, #24]
 8009c9e:	e018      	b.n	8009cd2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff fd97 	bl	80097d6 <get_fat>
 8009ca8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d801      	bhi.n	8009cb4 <create_chain+0x46>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e070      	b.n	8009d96 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cba:	d101      	bne.n	8009cc0 <create_chain+0x52>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	e06a      	b.n	8009d96 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d201      	bcs.n	8009cce <create_chain+0x60>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	e063      	b.n	8009d96 <create_chain+0x128>
		scl = clst;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	69fa      	ldr	r2, [r7, #28]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d307      	bcc.n	8009cf6 <create_chain+0x88>
				ncl = 2;
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009cea:	69fa      	ldr	r2, [r7, #28]
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d901      	bls.n	8009cf6 <create_chain+0x88>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e04f      	b.n	8009d96 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009cf6:	69f9      	ldr	r1, [r7, #28]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff fd6c 	bl	80097d6 <get_fat>
 8009cfe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00e      	beq.n	8009d24 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d003      	beq.n	8009d14 <create_chain+0xa6>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d12:	d101      	bne.n	8009d18 <create_chain+0xaa>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	e03e      	b.n	8009d96 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009d18:	69fa      	ldr	r2, [r7, #28]
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d1da      	bne.n	8009cd6 <create_chain+0x68>
 8009d20:	2300      	movs	r3, #0
 8009d22:	e038      	b.n	8009d96 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009d24:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009d26:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2a:	69f9      	ldr	r1, [r7, #28]
 8009d2c:	6938      	ldr	r0, [r7, #16]
 8009d2e:	f7ff fe22 	bl	8009976 <put_fat>
 8009d32:	4603      	mov	r3, r0
 8009d34:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d109      	bne.n	8009d50 <create_chain+0xe2>
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d006      	beq.n	8009d50 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009d42:	69fa      	ldr	r2, [r7, #28]
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6938      	ldr	r0, [r7, #16]
 8009d48:	f7ff fe15 	bl	8009976 <put_fat>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d116      	bne.n	8009d84 <create_chain+0x116>
		fs->last_clst = ncl;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	69fa      	ldr	r2, [r7, #28]
 8009d5a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	699a      	ldr	r2, [r3, #24]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	3b02      	subs	r3, #2
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d804      	bhi.n	8009d74 <create_chain+0x106>
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	1e5a      	subs	r2, r3, #1
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	791b      	ldrb	r3, [r3, #4]
 8009d78:	f043 0301 	orr.w	r3, r3, #1
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	711a      	strb	r2, [r3, #4]
 8009d82:	e007      	b.n	8009d94 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d102      	bne.n	8009d90 <create_chain+0x122>
 8009d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8e:	e000      	b.n	8009d92 <create_chain+0x124>
 8009d90:	2301      	movs	r3, #1
 8009d92:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009d94:	69fb      	ldr	r3, [r7, #28]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b087      	sub	sp, #28
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db2:	3304      	adds	r3, #4
 8009db4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	899b      	ldrh	r3, [r3, #12]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	8952      	ldrh	r2, [r2, #10]
 8009dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	1d1a      	adds	r2, r3, #4
 8009dd0:	613a      	str	r2, [r7, #16]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <clmt_clust+0x42>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	e010      	b.n	8009e02 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d307      	bcc.n	8009df8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	3304      	adds	r3, #4
 8009df4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009df6:	e7e9      	b.n	8009dcc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009df8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	4413      	add	r3, r2
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b086      	sub	sp, #24
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e24:	d204      	bcs.n	8009e30 <dir_sdi+0x22>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	f003 031f 	and.w	r3, r3, #31
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009e30:	2302      	movs	r3, #2
 8009e32:	e071      	b.n	8009f18 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d106      	bne.n	8009e54 <dir_sdi+0x46>
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d902      	bls.n	8009e54 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10c      	bne.n	8009e74 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	095b      	lsrs	r3, r3, #5
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	8912      	ldrh	r2, [r2, #8]
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d301      	bcc.n	8009e6a <dir_sdi+0x5c>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e056      	b.n	8009f18 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	61da      	str	r2, [r3, #28]
 8009e72:	e02d      	b.n	8009ed0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	895b      	ldrh	r3, [r3, #10]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	899b      	ldrh	r3, [r3, #12]
 8009e7e:	fb03 f302 	mul.w	r3, r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e84:	e019      	b.n	8009eba <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6979      	ldr	r1, [r7, #20]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7ff fca3 	bl	80097d6 <get_fat>
 8009e90:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e98:	d101      	bne.n	8009e9e <dir_sdi+0x90>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e03c      	b.n	8009f18 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d904      	bls.n	8009eae <dir_sdi+0xa0>
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d301      	bcc.n	8009eb2 <dir_sdi+0xa4>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e032      	b.n	8009f18 <dir_sdi+0x10a>
			ofs -= csz;
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d2e1      	bcs.n	8009e86 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009ec2:	6979      	ldr	r1, [r7, #20]
 8009ec4:	6938      	ldr	r0, [r7, #16]
 8009ec6:	f7ff fc67 	bl	8009798 <clust2sect>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <dir_sdi+0xd4>
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e01a      	b.n	8009f18 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69da      	ldr	r2, [r3, #28]
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	899b      	ldrh	r3, [r3, #12]
 8009eea:	4619      	mov	r1, r3
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ef2:	441a      	add	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	899b      	ldrh	r3, [r3, #12]
 8009f02:	461a      	mov	r2, r3
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f0a:	fb02 f200 	mul.w	r2, r2, r0
 8009f0e:	1a9b      	subs	r3, r3, r2
 8009f10:	18ca      	adds	r2, r1, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	3320      	adds	r3, #32
 8009f36:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	69db      	ldr	r3, [r3, #28]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <dir_next+0x28>
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f46:	d301      	bcc.n	8009f4c <dir_next+0x2c>
 8009f48:	2304      	movs	r3, #4
 8009f4a:	e0bb      	b.n	800a0c4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	899b      	ldrh	r3, [r3, #12]
 8009f50:	461a      	mov	r2, r3
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f58:	fb02 f201 	mul.w	r2, r2, r1
 8009f5c:	1a9b      	subs	r3, r3, r2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f040 809d 	bne.w	800a09e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10b      	bne.n	8009f8e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	095b      	lsrs	r3, r3, #5
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	8912      	ldrh	r2, [r2, #8]
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	f0c0 808d 	bcc.w	800a09e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	61da      	str	r2, [r3, #28]
 8009f8a:	2304      	movs	r3, #4
 8009f8c:	e09a      	b.n	800a0c4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	899b      	ldrh	r3, [r3, #12]
 8009f92:	461a      	mov	r2, r3
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	8952      	ldrh	r2, [r2, #10]
 8009f9e:	3a01      	subs	r2, #1
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d17b      	bne.n	800a09e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f7ff fc11 	bl	80097d6 <get_fat>
 8009fb4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d801      	bhi.n	8009fc0 <dir_next+0xa0>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e081      	b.n	800a0c4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc6:	d101      	bne.n	8009fcc <dir_next+0xac>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e07b      	b.n	800a0c4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	69db      	ldr	r3, [r3, #28]
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d359      	bcc.n	800a08a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d104      	bne.n	8009fe6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	61da      	str	r2, [r3, #28]
 8009fe2:	2304      	movs	r3, #4
 8009fe4:	e06e      	b.n	800a0c4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	4619      	mov	r1, r3
 8009fee:	4610      	mov	r0, r2
 8009ff0:	f7ff fe3d 	bl	8009c6e <create_chain>
 8009ff4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <dir_next+0xe0>
 8009ffc:	2307      	movs	r3, #7
 8009ffe:	e061      	b.n	800a0c4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <dir_next+0xea>
 800a006:	2302      	movs	r3, #2
 800a008:	e05c      	b.n	800a0c4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a010:	d101      	bne.n	800a016 <dir_next+0xf6>
 800a012:	2301      	movs	r3, #1
 800a014:	e056      	b.n	800a0c4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7ff fadc 	bl	80095d4 <sync_window>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <dir_next+0x106>
 800a022:	2301      	movs	r3, #1
 800a024:	e04e      	b.n	800a0c4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	899b      	ldrh	r3, [r3, #12]
 800a030:	461a      	mov	r2, r3
 800a032:	2100      	movs	r1, #0
 800a034:	f7ff f905 	bl	8009242 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a038:	2300      	movs	r3, #0
 800a03a:	613b      	str	r3, [r7, #16]
 800a03c:	6979      	ldr	r1, [r7, #20]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7ff fbaa 	bl	8009798 <clust2sect>
 800a044:	4602      	mov	r2, r0
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	635a      	str	r2, [r3, #52]	; 0x34
 800a04a:	e012      	b.n	800a072 <dir_next+0x152>
						fs->wflag = 1;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7ff fabe 	bl	80095d4 <sync_window>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <dir_next+0x142>
 800a05e:	2301      	movs	r3, #1
 800a060:	e030      	b.n	800a0c4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	3301      	adds	r3, #1
 800a066:	613b      	str	r3, [r7, #16]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	635a      	str	r2, [r3, #52]	; 0x34
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	895b      	ldrh	r3, [r3, #10]
 800a076:	461a      	mov	r2, r3
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d3e6      	bcc.n	800a04c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	1ad2      	subs	r2, r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a090:	6979      	ldr	r1, [r7, #20]
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7ff fb80 	bl	8009798 <clust2sect>
 800a098:	4602      	mov	r2, r0
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	899b      	ldrh	r3, [r3, #12]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0b6:	fb02 f200 	mul.w	r2, r2, r0
 800a0ba:	1a9b      	subs	r3, r3, r2
 800a0bc:	18ca      	adds	r2, r1, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a0dc:	2100      	movs	r1, #0
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7ff fe95 	bl	8009e0e <dir_sdi>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d12b      	bne.n	800a146 <dir_alloc+0x7a>
		n = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff faaf 	bl	800965c <move_window>
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d11d      	bne.n	800a144 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2be5      	cmp	r3, #229	; 0xe5
 800a110:	d004      	beq.n	800a11c <dir_alloc+0x50>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d107      	bne.n	800a12c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	3301      	adds	r3, #1
 800a120:	613b      	str	r3, [r7, #16]
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	429a      	cmp	r2, r3
 800a128:	d102      	bne.n	800a130 <dir_alloc+0x64>
 800a12a:	e00c      	b.n	800a146 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a12c:	2300      	movs	r3, #0
 800a12e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a130:	2101      	movs	r1, #1
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7ff fef4 	bl	8009f20 <dir_next>
 800a138:	4603      	mov	r3, r0
 800a13a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0d7      	beq.n	800a0f2 <dir_alloc+0x26>
 800a142:	e000      	b.n	800a146 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a144:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d101      	bne.n	800a150 <dir_alloc+0x84>
 800a14c:	2307      	movs	r3, #7
 800a14e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a150:	7dfb      	ldrb	r3, [r7, #23]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	331a      	adds	r3, #26
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe ffc7 	bl	80090fc <ld_word>
 800a16e:	4603      	mov	r3, r0
 800a170:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b03      	cmp	r3, #3
 800a178:	d109      	bne.n	800a18e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	3314      	adds	r3, #20
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe ffbc 	bl	80090fc <ld_word>
 800a184:	4603      	mov	r3, r0
 800a186:	041b      	lsls	r3, r3, #16
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a18e:	68fb      	ldr	r3, [r7, #12]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	331a      	adds	r3, #26
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	b292      	uxth	r2, r2
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe ffdf 	bl	8009172 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d109      	bne.n	800a1d0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f103 0214 	add.w	r2, r3, #20
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	0c1b      	lsrs	r3, r3, #16
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f7fe ffd1 	bl	8009172 <st_word>
	}
}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a1d8:	b590      	push	{r4, r7, lr}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	331a      	adds	r3, #26
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe ff88 	bl	80090fc <ld_word>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <cmp_lfn+0x1e>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e059      	b.n	800a2aa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1fe:	1e5a      	subs	r2, r3, #1
 800a200:	4613      	mov	r3, r2
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a20c:	2301      	movs	r3, #1
 800a20e:	81fb      	strh	r3, [r7, #14]
 800a210:	2300      	movs	r3, #0
 800a212:	613b      	str	r3, [r7, #16]
 800a214:	e033      	b.n	800a27e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a216:	4a27      	ldr	r2, [pc, #156]	; (800a2b4 <cmp_lfn+0xdc>)
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	4413      	add	r3, r2
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	4413      	add	r3, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f7fe ff69 	bl	80090fc <ld_word>
 800a22a:	4603      	mov	r3, r0
 800a22c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a22e:	89fb      	ldrh	r3, [r7, #14]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d01a      	beq.n	800a26a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2bfe      	cmp	r3, #254	; 0xfe
 800a238:	d812      	bhi.n	800a260 <cmp_lfn+0x88>
 800a23a:	89bb      	ldrh	r3, [r7, #12]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fe35 	bl	8008eac <ff_wtoupper>
 800a242:	4603      	mov	r3, r0
 800a244:	461c      	mov	r4, r3
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	617a      	str	r2, [r7, #20]
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	4413      	add	r3, r2
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	f7fe fe29 	bl	8008eac <ff_wtoupper>
 800a25a:	4603      	mov	r3, r0
 800a25c:	429c      	cmp	r4, r3
 800a25e:	d001      	beq.n	800a264 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a260:	2300      	movs	r3, #0
 800a262:	e022      	b.n	800a2aa <cmp_lfn+0xd2>
			}
			wc = uc;
 800a264:	89bb      	ldrh	r3, [r7, #12]
 800a266:	81fb      	strh	r3, [r7, #14]
 800a268:	e006      	b.n	800a278 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a26a:	89bb      	ldrh	r3, [r7, #12]
 800a26c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a270:	4293      	cmp	r3, r2
 800a272:	d001      	beq.n	800a278 <cmp_lfn+0xa0>
 800a274:	2300      	movs	r3, #0
 800a276:	e018      	b.n	800a2aa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	3301      	adds	r3, #1
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2b0c      	cmp	r3, #12
 800a282:	d9c8      	bls.n	800a216 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00b      	beq.n	800a2a8 <cmp_lfn+0xd0>
 800a290:	89fb      	ldrh	r3, [r7, #14]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d008      	beq.n	800a2a8 <cmp_lfn+0xd0>
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	005b      	lsls	r3, r3, #1
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	4413      	add	r3, r2
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <cmp_lfn+0xd0>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e000      	b.n	800a2aa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a2a8:	2301      	movs	r3, #1
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd90      	pop	{r4, r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	0800dfa8 	.word	0x0800dfa8

0800a2b8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	331a      	adds	r3, #26
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe ff18 	bl	80090fc <ld_word>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <pick_lfn+0x1e>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e04d      	b.n	800a372 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2de:	1e5a      	subs	r2, r3, #1
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	4413      	add	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	81fb      	strh	r3, [r7, #14]
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	613b      	str	r3, [r7, #16]
 800a2f4:	e028      	b.n	800a348 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a2f6:	4a21      	ldr	r2, [pc, #132]	; (800a37c <pick_lfn+0xc4>)
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	4413      	add	r3, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe fef9 	bl	80090fc <ld_word>
 800a30a:	4603      	mov	r3, r0
 800a30c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a30e:	89fb      	ldrh	r3, [r7, #14]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00f      	beq.n	800a334 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	2bfe      	cmp	r3, #254	; 0xfe
 800a318:	d901      	bls.n	800a31e <pick_lfn+0x66>
 800a31a:	2300      	movs	r3, #0
 800a31c:	e029      	b.n	800a372 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a31e:	89bb      	ldrh	r3, [r7, #12]
 800a320:	81fb      	strh	r3, [r7, #14]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	617a      	str	r2, [r7, #20]
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	4413      	add	r3, r2
 800a32e:	89fa      	ldrh	r2, [r7, #14]
 800a330:	801a      	strh	r2, [r3, #0]
 800a332:	e006      	b.n	800a342 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a334:	89bb      	ldrh	r3, [r7, #12]
 800a336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d001      	beq.n	800a342 <pick_lfn+0x8a>
 800a33e:	2300      	movs	r3, #0
 800a340:	e017      	b.n	800a372 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	3301      	adds	r3, #1
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2b0c      	cmp	r3, #12
 800a34c:	d9d3      	bls.n	800a2f6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00a      	beq.n	800a370 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	2bfe      	cmp	r3, #254	; 0xfe
 800a35e:	d901      	bls.n	800a364 <pick_lfn+0xac>
 800a360:	2300      	movs	r3, #0
 800a362:	e006      	b.n	800a372 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	4413      	add	r3, r2
 800a36c:	2200      	movs	r2, #0
 800a36e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a370:	2301      	movs	r3, #1
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	0800dfa8 	.word	0x0800dfa8

0800a380 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b088      	sub	sp, #32
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	4611      	mov	r1, r2
 800a38c:	461a      	mov	r2, r3
 800a38e:	460b      	mov	r3, r1
 800a390:	71fb      	strb	r3, [r7, #7]
 800a392:	4613      	mov	r3, r2
 800a394:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	330d      	adds	r3, #13
 800a39a:	79ba      	ldrb	r2, [r7, #6]
 800a39c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	330b      	adds	r3, #11
 800a3a2:	220f      	movs	r2, #15
 800a3a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	331a      	adds	r3, #26
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fe fedc 	bl	8009172 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a3ba:	79fb      	ldrb	r3, [r7, #7]
 800a3bc:	1e5a      	subs	r2, r3, #1
 800a3be:	4613      	mov	r3, r2
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	82fb      	strh	r3, [r7, #22]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a3d2:	8afb      	ldrh	r3, [r7, #22]
 800a3d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d007      	beq.n	800a3ec <put_lfn+0x6c>
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	1c5a      	adds	r2, r3, #1
 800a3e0:	61fa      	str	r2, [r7, #28]
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a3ec:	4a17      	ldr	r2, [pc, #92]	; (800a44c <put_lfn+0xcc>)
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	8afa      	ldrh	r2, [r7, #22]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe feb7 	bl	8009172 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a404:	8afb      	ldrh	r3, [r7, #22]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d102      	bne.n	800a410 <put_lfn+0x90>
 800a40a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a40e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	3301      	adds	r3, #1
 800a414:	61bb      	str	r3, [r7, #24]
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	2b0c      	cmp	r3, #12
 800a41a:	d9da      	bls.n	800a3d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a41c:	8afb      	ldrh	r3, [r7, #22]
 800a41e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a422:	4293      	cmp	r3, r2
 800a424:	d006      	beq.n	800a434 <put_lfn+0xb4>
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	4413      	add	r3, r2
 800a42e:	881b      	ldrh	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d103      	bne.n	800a43c <put_lfn+0xbc>
 800a434:	79fb      	ldrb	r3, [r7, #7]
 800a436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a43a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	79fa      	ldrb	r2, [r7, #7]
 800a440:	701a      	strb	r2, [r3, #0]
}
 800a442:	bf00      	nop
 800a444:	3720      	adds	r7, #32
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	0800dfa8 	.word	0x0800dfa8

0800a450 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08c      	sub	sp, #48	; 0x30
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a45e:	220b      	movs	r2, #11
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7fe fecc 	bl	8009200 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2b05      	cmp	r3, #5
 800a46c:	d929      	bls.n	800a4c2 <gen_numname+0x72>
		sr = seq;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a472:	e020      	b.n	800a4b6 <gen_numname+0x66>
			wc = *lfn++;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	1c9a      	adds	r2, r3, #2
 800a478:	607a      	str	r2, [r7, #4]
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a47e:	2300      	movs	r3, #0
 800a480:	62bb      	str	r3, [r7, #40]	; 0x28
 800a482:	e015      	b.n	800a4b0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	005a      	lsls	r2, r3, #1
 800a488:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	4413      	add	r3, r2
 800a490:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a494:	085b      	lsrs	r3, r3, #1
 800a496:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <gen_numname+0x5a>
 800a4a2:	69fa      	ldr	r2, [r7, #28]
 800a4a4:	4b31      	ldr	r3, [pc, #196]	; (800a56c <gen_numname+0x11c>)
 800a4a6:	4053      	eors	r3, r2
 800a4a8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	2b0f      	cmp	r3, #15
 800a4b4:	d9e6      	bls.n	800a484 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1da      	bne.n	800a474 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a4c2:	2307      	movs	r3, #7
 800a4c4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	3330      	adds	r3, #48	; 0x30
 800a4d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a4d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4da:	2b39      	cmp	r3, #57	; 0x39
 800a4dc:	d904      	bls.n	800a4e8 <gen_numname+0x98>
 800a4de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4e2:	3307      	adds	r3, #7
 800a4e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	1e5a      	subs	r2, r3, #1
 800a4ec:	62ba      	str	r2, [r7, #40]	; 0x28
 800a4ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a4f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	091b      	lsrs	r3, r3, #4
 800a500:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1de      	bne.n	800a4c6 <gen_numname+0x76>
	ns[i] = '~';
 800a508:	f107 0214 	add.w	r2, r7, #20
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	4413      	add	r3, r2
 800a510:	227e      	movs	r2, #126	; 0x7e
 800a512:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a514:	2300      	movs	r3, #0
 800a516:	627b      	str	r3, [r7, #36]	; 0x24
 800a518:	e002      	b.n	800a520 <gen_numname+0xd0>
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	3301      	adds	r3, #1
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24
 800a520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	429a      	cmp	r2, r3
 800a526:	d205      	bcs.n	800a534 <gen_numname+0xe4>
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	4413      	add	r3, r2
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	2b20      	cmp	r3, #32
 800a532:	d1f2      	bne.n	800a51a <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	2b07      	cmp	r3, #7
 800a538:	d808      	bhi.n	800a54c <gen_numname+0xfc>
 800a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53c:	1c5a      	adds	r2, r3, #1
 800a53e:	62ba      	str	r2, [r7, #40]	; 0x28
 800a540:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a544:	4413      	add	r3, r2
 800a546:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a54a:	e000      	b.n	800a54e <gen_numname+0xfe>
 800a54c:	2120      	movs	r1, #32
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	627a      	str	r2, [r7, #36]	; 0x24
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	4413      	add	r3, r2
 800a558:	460a      	mov	r2, r1
 800a55a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	2b07      	cmp	r3, #7
 800a560:	d9e8      	bls.n	800a534 <gen_numname+0xe4>
}
 800a562:	bf00      	nop
 800a564:	3730      	adds	r7, #48	; 0x30
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	00011021 	.word	0x00011021

0800a570 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a57c:	230b      	movs	r3, #11
 800a57e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	b2da      	uxtb	r2, r3
 800a584:	0852      	lsrs	r2, r2, #1
 800a586:	01db      	lsls	r3, r3, #7
 800a588:	4313      	orrs	r3, r2
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	1c59      	adds	r1, r3, #1
 800a590:	6079      	str	r1, [r7, #4]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	4413      	add	r3, r2
 800a596:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	60bb      	str	r3, [r7, #8]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1ed      	bne.n	800a580 <sum_sfn+0x10>
	return sum;
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b086      	sub	sp, #24
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a5bc:	2304      	movs	r3, #4
 800a5be:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800a5c6:	23ff      	movs	r3, #255	; 0xff
 800a5c8:	757b      	strb	r3, [r7, #21]
 800a5ca:	23ff      	movs	r3, #255	; 0xff
 800a5cc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800a5ce:	e081      	b.n	800a6d4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6938      	ldr	r0, [r7, #16]
 800a5d8:	f7ff f840 	bl	800965c <move_window>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d17c      	bne.n	800a6e0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800a5ee:	7dbb      	ldrb	r3, [r7, #22]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a5f4:	2304      	movs	r3, #4
 800a5f6:	75fb      	strb	r3, [r7, #23]
 800a5f8:	e077      	b.n	800a6ea <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	330b      	adds	r3, #11
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a606:	73fb      	strb	r3, [r7, #15]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	7bfa      	ldrb	r2, [r7, #15]
 800a60c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a60e:	7dbb      	ldrb	r3, [r7, #22]
 800a610:	2be5      	cmp	r3, #229	; 0xe5
 800a612:	d00e      	beq.n	800a632 <dir_read+0x80>
 800a614:	7dbb      	ldrb	r3, [r7, #22]
 800a616:	2b2e      	cmp	r3, #46	; 0x2e
 800a618:	d00b      	beq.n	800a632 <dir_read+0x80>
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	f023 0320 	bic.w	r3, r3, #32
 800a620:	2b08      	cmp	r3, #8
 800a622:	bf0c      	ite	eq
 800a624:	2301      	moveq	r3, #1
 800a626:	2300      	movne	r3, #0
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	461a      	mov	r2, r3
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	4293      	cmp	r3, r2
 800a630:	d002      	beq.n	800a638 <dir_read+0x86>
				ord = 0xFF;
 800a632:	23ff      	movs	r3, #255	; 0xff
 800a634:	757b      	strb	r3, [r7, #21]
 800a636:	e044      	b.n	800a6c2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	2b0f      	cmp	r3, #15
 800a63c:	d12f      	bne.n	800a69e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800a63e:	7dbb      	ldrb	r3, [r7, #22]
 800a640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00d      	beq.n	800a664 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	7b5b      	ldrb	r3, [r3, #13]
 800a64e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800a650:	7dbb      	ldrb	r3, [r7, #22]
 800a652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a656:	75bb      	strb	r3, [r7, #22]
 800a658:	7dbb      	ldrb	r3, [r7, #22]
 800a65a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	695a      	ldr	r2, [r3, #20]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a664:	7dba      	ldrb	r2, [r7, #22]
 800a666:	7d7b      	ldrb	r3, [r7, #21]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d115      	bne.n	800a698 <dir_read+0xe6>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a1b      	ldr	r3, [r3, #32]
 800a670:	330d      	adds	r3, #13
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	7d3a      	ldrb	r2, [r7, #20]
 800a676:	429a      	cmp	r2, r3
 800a678:	d10e      	bne.n	800a698 <dir_read+0xe6>
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	691a      	ldr	r2, [r3, #16]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	4619      	mov	r1, r3
 800a684:	4610      	mov	r0, r2
 800a686:	f7ff fe17 	bl	800a2b8 <pick_lfn>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <dir_read+0xe6>
 800a690:	7d7b      	ldrb	r3, [r7, #21]
 800a692:	3b01      	subs	r3, #1
 800a694:	b2db      	uxtb	r3, r3
 800a696:	e000      	b.n	800a69a <dir_read+0xe8>
 800a698:	23ff      	movs	r3, #255	; 0xff
 800a69a:	757b      	strb	r3, [r7, #21]
 800a69c:	e011      	b.n	800a6c2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800a69e:	7d7b      	ldrb	r3, [r7, #21]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d109      	bne.n	800a6b8 <dir_read+0x106>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff ff61 	bl	800a570 <sum_sfn>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	7d3b      	ldrb	r3, [r7, #20]
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d015      	beq.n	800a6e4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a6be:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800a6c0:	e010      	b.n	800a6e4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff fc2b 	bl	8009f20 <dir_next>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d109      	bne.n	800a6e8 <dir_read+0x136>
	while (dp->sect) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	69db      	ldr	r3, [r3, #28]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f47f af79 	bne.w	800a5d0 <dir_read+0x1e>
 800a6de:	e004      	b.n	800a6ea <dir_read+0x138>
		if (res != FR_OK) break;
 800a6e0:	bf00      	nop
 800a6e2:	e002      	b.n	800a6ea <dir_read+0x138>
					break;
 800a6e4:	bf00      	nop
 800a6e6:	e000      	b.n	800a6ea <dir_read+0x138>
		if (res != FR_OK) break;
 800a6e8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <dir_read+0x144>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	61da      	str	r2, [r3, #28]
	return res;
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a70e:	2100      	movs	r1, #0
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff fb7c 	bl	8009e0e <dir_sdi>
 800a716:	4603      	mov	r3, r0
 800a718:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <dir_find+0x24>
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	e0a9      	b.n	800a878 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a724:	23ff      	movs	r3, #255	; 0xff
 800a726:	753b      	strb	r3, [r7, #20]
 800a728:	7d3b      	ldrb	r3, [r7, #20]
 800a72a:	757b      	strb	r3, [r7, #21]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f04f 32ff 	mov.w	r2, #4294967295
 800a732:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	4619      	mov	r1, r3
 800a73a:	6938      	ldr	r0, [r7, #16]
 800a73c:	f7fe ff8e 	bl	800965c <move_window>
 800a740:	4603      	mov	r3, r0
 800a742:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a744:	7dfb      	ldrb	r3, [r7, #23]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f040 8090 	bne.w	800a86c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a1b      	ldr	r3, [r3, #32]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a754:	7dbb      	ldrb	r3, [r7, #22]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <dir_find+0x60>
 800a75a:	2304      	movs	r3, #4
 800a75c:	75fb      	strb	r3, [r7, #23]
 800a75e:	e08a      	b.n	800a876 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	330b      	adds	r3, #11
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a76c:	73fb      	strb	r3, [r7, #15]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	7bfa      	ldrb	r2, [r7, #15]
 800a772:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a774:	7dbb      	ldrb	r3, [r7, #22]
 800a776:	2be5      	cmp	r3, #229	; 0xe5
 800a778:	d007      	beq.n	800a78a <dir_find+0x8a>
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	f003 0308 	and.w	r3, r3, #8
 800a780:	2b00      	cmp	r3, #0
 800a782:	d009      	beq.n	800a798 <dir_find+0x98>
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	2b0f      	cmp	r3, #15
 800a788:	d006      	beq.n	800a798 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a78a:	23ff      	movs	r3, #255	; 0xff
 800a78c:	757b      	strb	r3, [r7, #21]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f04f 32ff 	mov.w	r2, #4294967295
 800a794:	631a      	str	r2, [r3, #48]	; 0x30
 800a796:	e05e      	b.n	800a856 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	2b0f      	cmp	r3, #15
 800a79c:	d136      	bne.n	800a80c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d154      	bne.n	800a856 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a7ac:	7dbb      	ldrb	r3, [r7, #22]
 800a7ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00d      	beq.n	800a7d2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	7b5b      	ldrb	r3, [r3, #13]
 800a7bc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a7be:	7dbb      	ldrb	r3, [r7, #22]
 800a7c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7c4:	75bb      	strb	r3, [r7, #22]
 800a7c6:	7dbb      	ldrb	r3, [r7, #22]
 800a7c8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	695a      	ldr	r2, [r3, #20]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a7d2:	7dba      	ldrb	r2, [r7, #22]
 800a7d4:	7d7b      	ldrb	r3, [r7, #21]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d115      	bne.n	800a806 <dir_find+0x106>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	330d      	adds	r3, #13
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	7d3a      	ldrb	r2, [r7, #20]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d10e      	bne.n	800a806 <dir_find+0x106>
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	691a      	ldr	r2, [r3, #16]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a1b      	ldr	r3, [r3, #32]
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7ff fcf0 	bl	800a1d8 <cmp_lfn>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <dir_find+0x106>
 800a7fe:	7d7b      	ldrb	r3, [r7, #21]
 800a800:	3b01      	subs	r3, #1
 800a802:	b2db      	uxtb	r3, r3
 800a804:	e000      	b.n	800a808 <dir_find+0x108>
 800a806:	23ff      	movs	r3, #255	; 0xff
 800a808:	757b      	strb	r3, [r7, #21]
 800a80a:	e024      	b.n	800a856 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a80c:	7d7b      	ldrb	r3, [r7, #21]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d109      	bne.n	800a826 <dir_find+0x126>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	4618      	mov	r0, r3
 800a818:	f7ff feaa 	bl	800a570 <sum_sfn>
 800a81c:	4603      	mov	r3, r0
 800a81e:	461a      	mov	r2, r3
 800a820:	7d3b      	ldrb	r3, [r7, #20]
 800a822:	4293      	cmp	r3, r2
 800a824:	d024      	beq.n	800a870 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10a      	bne.n	800a84a <dir_find+0x14a>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a18      	ldr	r0, [r3, #32]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3324      	adds	r3, #36	; 0x24
 800a83c:	220b      	movs	r2, #11
 800a83e:	4619      	mov	r1, r3
 800a840:	f7fe fd19 	bl	8009276 <mem_cmp>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d014      	beq.n	800a874 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a84a:	23ff      	movs	r3, #255	; 0xff
 800a84c:	757b      	strb	r3, [r7, #21]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f04f 32ff 	mov.w	r2, #4294967295
 800a854:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a856:	2100      	movs	r1, #0
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7ff fb61 	bl	8009f20 <dir_next>
 800a85e:	4603      	mov	r3, r0
 800a860:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a862:	7dfb      	ldrb	r3, [r7, #23]
 800a864:	2b00      	cmp	r3, #0
 800a866:	f43f af65 	beq.w	800a734 <dir_find+0x34>
 800a86a:	e004      	b.n	800a876 <dir_find+0x176>
		if (res != FR_OK) break;
 800a86c:	bf00      	nop
 800a86e:	e002      	b.n	800a876 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a870:	bf00      	nop
 800a872:	e000      	b.n	800a876 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a874:	bf00      	nop

	return res;
 800a876:	7dfb      	ldrb	r3, [r7, #23]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08c      	sub	sp, #48	; 0x30
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a894:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <dir_register+0x20>
 800a89c:	2306      	movs	r3, #6
 800a89e:	e0e0      	b.n	800aa62 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a4:	e002      	b.n	800a8ac <dir_register+0x2c>
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	691a      	ldr	r2, [r3, #16]
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	4413      	add	r3, r2
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1f4      	bne.n	800a8a6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a8c2:	f107 030c 	add.w	r3, r7, #12
 800a8c6:	220c      	movs	r2, #12
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fe fc99 	bl	8009200 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d032      	beq.n	800a93e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2240      	movs	r2, #64	; 0x40
 800a8dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8e4:	e016      	b.n	800a914 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	691a      	ldr	r2, [r3, #16]
 800a8f0:	f107 010c 	add.w	r1, r7, #12
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	f7ff fdab 	bl	800a450 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff ff00 	bl	800a700 <dir_find>
 800a900:	4603      	mov	r3, r0
 800a902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d106      	bne.n	800a91c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a910:	3301      	adds	r3, #1
 800a912:	62bb      	str	r3, [r7, #40]	; 0x28
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	2b63      	cmp	r3, #99	; 0x63
 800a918:	d9e5      	bls.n	800a8e6 <dir_register+0x66>
 800a91a:	e000      	b.n	800a91e <dir_register+0x9e>
			if (res != FR_OK) break;
 800a91c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	2b64      	cmp	r3, #100	; 0x64
 800a922:	d101      	bne.n	800a928 <dir_register+0xa8>
 800a924:	2307      	movs	r3, #7
 800a926:	e09c      	b.n	800aa62 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d002      	beq.n	800a936 <dir_register+0xb6>
 800a930:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a934:	e095      	b.n	800aa62 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a936:	7dfa      	ldrb	r2, [r7, #23]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	f003 0302 	and.w	r3, r3, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	d007      	beq.n	800a958 <dir_register+0xd8>
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	330c      	adds	r3, #12
 800a94c:	4a47      	ldr	r2, [pc, #284]	; (800aa6c <dir_register+0x1ec>)
 800a94e:	fba2 2303 	umull	r2, r3, r2, r3
 800a952:	089b      	lsrs	r3, r3, #2
 800a954:	3301      	adds	r3, #1
 800a956:	e000      	b.n	800a95a <dir_register+0xda>
 800a958:	2301      	movs	r3, #1
 800a95a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a95c:	6a39      	ldr	r1, [r7, #32]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff fbb4 	bl	800a0cc <dir_alloc>
 800a964:	4603      	mov	r3, r0
 800a966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a96a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d148      	bne.n	800aa04 <dir_register+0x184>
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	3b01      	subs	r3, #1
 800a976:	623b      	str	r3, [r7, #32]
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d042      	beq.n	800aa04 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	695a      	ldr	r2, [r3, #20]
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	015b      	lsls	r3, r3, #5
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7ff fa3f 	bl	8009e0e <dir_sdi>
 800a990:	4603      	mov	r3, r0
 800a992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d132      	bne.n	800aa04 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3324      	adds	r3, #36	; 0x24
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff fde4 	bl	800a570 <sum_sfn>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	69db      	ldr	r3, [r3, #28]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	69f8      	ldr	r0, [r7, #28]
 800a9b4:	f7fe fe52 	bl	800965c <move_window>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a9be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d11d      	bne.n	800aa02 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	6918      	ldr	r0, [r3, #16]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a19      	ldr	r1, [r3, #32]
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	7efb      	ldrb	r3, [r7, #27]
 800a9d4:	f7ff fcd4 	bl	800a380 <put_lfn>
				fs->wflag = 1;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a9de:	2100      	movs	r1, #0
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff fa9d 	bl	8009f20 <dir_next>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a9ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d107      	bne.n	800aa04 <dir_register+0x184>
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	623b      	str	r3, [r7, #32]
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1d5      	bne.n	800a9ac <dir_register+0x12c>
 800aa00:	e000      	b.n	800aa04 <dir_register+0x184>
				if (res != FR_OK) break;
 800aa02:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aa04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d128      	bne.n	800aa5e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	4619      	mov	r1, r3
 800aa12:	69f8      	ldr	r0, [r7, #28]
 800aa14:	f7fe fe22 	bl	800965c <move_window>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800aa1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d11b      	bne.n	800aa5e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fc07 	bl	8009242 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a18      	ldr	r0, [r3, #32]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3324      	adds	r3, #36	; 0x24
 800aa3c:	220b      	movs	r2, #11
 800aa3e:	4619      	mov	r1, r3
 800aa40:	f7fe fbde 	bl	8009200 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	330c      	adds	r3, #12
 800aa50:	f002 0218 	and.w	r2, r2, #24
 800aa54:	b2d2      	uxtb	r2, r2
 800aa56:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aa5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3730      	adds	r7, #48	; 0x30
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	4ec4ec4f 	.word	0x4ec4ec4f

0800aa70 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	2200      	movs	r2, #0
 800aa84:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 80c9 	beq.w	800ac22 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa98:	d032      	beq.n	800ab00 <get_fileinfo+0x90>
			i = j = 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	61bb      	str	r3, [r7, #24]
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800aaa2:	e01b      	b.n	800aadc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800aaa4:	89fb      	ldrh	r3, [r7, #14]
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe f9c3 	bl	8008e34 <ff_convert>
 800aaae:	4603      	mov	r3, r0
 800aab0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800aab2:	89fb      	ldrh	r3, [r7, #14]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <get_fileinfo+0x4e>
 800aab8:	2300      	movs	r3, #0
 800aaba:	61fb      	str	r3, [r7, #28]
 800aabc:	e01a      	b.n	800aaf4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	2bfe      	cmp	r3, #254	; 0xfe
 800aac2:	d902      	bls.n	800aaca <get_fileinfo+0x5a>
 800aac4:	2300      	movs	r3, #0
 800aac6:	61fb      	str	r3, [r7, #28]
 800aac8:	e014      	b.n	800aaf4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	61fa      	str	r2, [r7, #28]
 800aad0:	89fa      	ldrh	r2, [r7, #14]
 800aad2:	b2d1      	uxtb	r1, r2
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	4413      	add	r3, r2
 800aad8:	460a      	mov	r2, r1
 800aada:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	691a      	ldr	r2, [r3, #16]
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	1c59      	adds	r1, r3, #1
 800aae4:	61b9      	str	r1, [r7, #24]
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	4413      	add	r3, r2
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	81fb      	strh	r3, [r7, #14]
 800aaee:	89fb      	ldrh	r3, [r7, #14]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1d7      	bne.n	800aaa4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	4413      	add	r3, r2
 800aafa:	3316      	adds	r3, #22
 800aafc:	2200      	movs	r2, #0
 800aafe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	61bb      	str	r3, [r7, #24]
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	3316      	adds	r3, #22
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ab14:	e04c      	b.n	800abb0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a1a      	ldr	r2, [r3, #32]
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	1c59      	adds	r1, r3, #1
 800ab1e:	61f9      	str	r1, [r7, #28]
 800ab20:	4413      	add	r3, r2
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	2b20      	cmp	r3, #32
 800ab2a:	d100      	bne.n	800ab2e <get_fileinfo+0xbe>
 800ab2c:	e040      	b.n	800abb0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ab2e:	7dfb      	ldrb	r3, [r7, #23]
 800ab30:	2b05      	cmp	r3, #5
 800ab32:	d101      	bne.n	800ab38 <get_fileinfo+0xc8>
 800ab34:	23e5      	movs	r3, #229	; 0xe5
 800ab36:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	2b09      	cmp	r3, #9
 800ab3c:	d10f      	bne.n	800ab5e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ab3e:	89bb      	ldrh	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d105      	bne.n	800ab50 <get_fileinfo+0xe0>
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	4413      	add	r3, r2
 800ab4a:	3316      	adds	r3, #22
 800ab4c:	222e      	movs	r2, #46	; 0x2e
 800ab4e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	61ba      	str	r2, [r7, #24]
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	4413      	add	r3, r2
 800ab5a:	222e      	movs	r2, #46	; 0x2e
 800ab5c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	4413      	add	r3, r2
 800ab64:	3309      	adds	r3, #9
 800ab66:	7dfa      	ldrb	r2, [r7, #23]
 800ab68:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ab6a:	89bb      	ldrh	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d11c      	bne.n	800abaa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	2b40      	cmp	r3, #64	; 0x40
 800ab74:	d913      	bls.n	800ab9e <get_fileinfo+0x12e>
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
 800ab78:	2b5a      	cmp	r3, #90	; 0x5a
 800ab7a:	d810      	bhi.n	800ab9e <get_fileinfo+0x12e>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	330c      	adds	r3, #12
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	461a      	mov	r2, r3
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	2b08      	cmp	r3, #8
 800ab8a:	d901      	bls.n	800ab90 <get_fileinfo+0x120>
 800ab8c:	2310      	movs	r3, #16
 800ab8e:	e000      	b.n	800ab92 <get_fileinfo+0x122>
 800ab90:	2308      	movs	r3, #8
 800ab92:	4013      	ands	r3, r2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d002      	beq.n	800ab9e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	3320      	adds	r3, #32
 800ab9c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	4413      	add	r3, r2
 800aba4:	3316      	adds	r3, #22
 800aba6:	7dfa      	ldrb	r2, [r7, #23]
 800aba8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	3301      	adds	r3, #1
 800abae:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	2b0a      	cmp	r3, #10
 800abb4:	d9af      	bls.n	800ab16 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800abb6:	89bb      	ldrh	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10d      	bne.n	800abd8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	4413      	add	r3, r2
 800abc2:	3316      	adds	r3, #22
 800abc4:	2200      	movs	r2, #0
 800abc6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	330c      	adds	r3, #12
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d101      	bne.n	800abd8 <get_fileinfo+0x168>
 800abd4:	2300      	movs	r3, #0
 800abd6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	4413      	add	r3, r2
 800abde:	3309      	adds	r3, #9
 800abe0:	2200      	movs	r2, #0
 800abe2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	7ada      	ldrb	r2, [r3, #11]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	331c      	adds	r3, #28
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe fa99 	bl	800912c <ld_dword>
 800abfa:	4602      	mov	r2, r0
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	3316      	adds	r3, #22
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe fa90 	bl	800912c <ld_dword>
 800ac0c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	80da      	strh	r2, [r3, #6]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	0c1b      	lsrs	r3, r3, #16
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	809a      	strh	r2, [r3, #4]
 800ac20:	e000      	b.n	800ac24 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ac22:	bf00      	nop
}
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	613b      	str	r3, [r7, #16]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	2300      	movs	r3, #0
 800ac46:	617b      	str	r3, [r7, #20]
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	61ba      	str	r2, [r7, #24]
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	4413      	add	r3, r2
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ac5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac5c:	2b1f      	cmp	r3, #31
 800ac5e:	d940      	bls.n	800ace2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ac60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac62:	2b2f      	cmp	r3, #47	; 0x2f
 800ac64:	d006      	beq.n	800ac74 <create_name+0x48>
 800ac66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac68:	2b5c      	cmp	r3, #92	; 0x5c
 800ac6a:	d110      	bne.n	800ac8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ac6c:	e002      	b.n	800ac74 <create_name+0x48>
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	3301      	adds	r3, #1
 800ac72:	61bb      	str	r3, [r7, #24]
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	4413      	add	r3, r2
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b2f      	cmp	r3, #47	; 0x2f
 800ac7e:	d0f6      	beq.n	800ac6e <create_name+0x42>
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	4413      	add	r3, r2
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b5c      	cmp	r3, #92	; 0x5c
 800ac8a:	d0f0      	beq.n	800ac6e <create_name+0x42>
			break;
 800ac8c:	e02a      	b.n	800ace4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2bfe      	cmp	r3, #254	; 0xfe
 800ac92:	d901      	bls.n	800ac98 <create_name+0x6c>
 800ac94:	2306      	movs	r3, #6
 800ac96:	e177      	b.n	800af88 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ac98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ac9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aca0:	2101      	movs	r1, #1
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe f8c6 	bl	8008e34 <ff_convert>
 800aca8:	4603      	mov	r3, r0
 800acaa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800acac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <create_name+0x8a>
 800acb2:	2306      	movs	r3, #6
 800acb4:	e168      	b.n	800af88 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800acb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acb8:	2b7f      	cmp	r3, #127	; 0x7f
 800acba:	d809      	bhi.n	800acd0 <create_name+0xa4>
 800acbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acbe:	4619      	mov	r1, r3
 800acc0:	48b3      	ldr	r0, [pc, #716]	; (800af90 <create_name+0x364>)
 800acc2:	f7fe faff 	bl	80092c4 <chk_chr>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <create_name+0xa4>
 800accc:	2306      	movs	r3, #6
 800acce:	e15b      	b.n	800af88 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	1c5a      	adds	r2, r3, #1
 800acd4:	617a      	str	r2, [r7, #20]
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	4413      	add	r3, r2
 800acdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800acde:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ace0:	e7b4      	b.n	800ac4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ace2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	441a      	add	r2, r3
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800acee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acf0:	2b1f      	cmp	r3, #31
 800acf2:	d801      	bhi.n	800acf8 <create_name+0xcc>
 800acf4:	2304      	movs	r3, #4
 800acf6:	e000      	b.n	800acfa <create_name+0xce>
 800acf8:	2300      	movs	r3, #0
 800acfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800acfe:	e011      	b.n	800ad24 <create_name+0xf8>
		w = lfn[di - 1];
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ad06:	4413      	add	r3, r2
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ad12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad14:	2b20      	cmp	r3, #32
 800ad16:	d002      	beq.n	800ad1e <create_name+0xf2>
 800ad18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad1a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad1c:	d106      	bne.n	800ad2c <create_name+0x100>
		di--;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1ea      	bne.n	800ad00 <create_name+0xd4>
 800ad2a:	e000      	b.n	800ad2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ad2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	4413      	add	r3, r2
 800ad36:	2200      	movs	r2, #0
 800ad38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <create_name+0x118>
 800ad40:	2306      	movs	r3, #6
 800ad42:	e121      	b.n	800af88 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3324      	adds	r3, #36	; 0x24
 800ad48:	220b      	movs	r2, #11
 800ad4a:	2120      	movs	r1, #32
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe fa78 	bl	8009242 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ad52:	2300      	movs	r3, #0
 800ad54:	61bb      	str	r3, [r7, #24]
 800ad56:	e002      	b.n	800ad5e <create_name+0x132>
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	61bb      	str	r3, [r7, #24]
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	4413      	add	r3, r2
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	2b20      	cmp	r3, #32
 800ad6a:	d0f5      	beq.n	800ad58 <create_name+0x12c>
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	4413      	add	r3, r2
 800ad74:	881b      	ldrh	r3, [r3, #0]
 800ad76:	2b2e      	cmp	r3, #46	; 0x2e
 800ad78:	d0ee      	beq.n	800ad58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d009      	beq.n	800ad94 <create_name+0x168>
 800ad80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad84:	f043 0303 	orr.w	r3, r3, #3
 800ad88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ad8c:	e002      	b.n	800ad94 <create_name+0x168>
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	617b      	str	r3, [r7, #20]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <create_name+0x182>
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ada0:	4413      	add	r3, r2
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	4413      	add	r3, r2
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	2b2e      	cmp	r3, #46	; 0x2e
 800adac:	d1ef      	bne.n	800ad8e <create_name+0x162>

	i = b = 0; ni = 8;
 800adae:	2300      	movs	r3, #0
 800adb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800adb4:	2300      	movs	r3, #0
 800adb6:	623b      	str	r3, [r7, #32]
 800adb8:	2308      	movs	r3, #8
 800adba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	1c5a      	adds	r2, r3, #1
 800adc0:	61ba      	str	r2, [r7, #24]
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	4413      	add	r3, r2
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800adcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 8090 	beq.w	800aef4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800add4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800add6:	2b20      	cmp	r3, #32
 800add8:	d006      	beq.n	800ade8 <create_name+0x1bc>
 800adda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800addc:	2b2e      	cmp	r3, #46	; 0x2e
 800adde:	d10a      	bne.n	800adf6 <create_name+0x1ca>
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d006      	beq.n	800adf6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ade8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adec:	f043 0303 	orr.w	r3, r3, #3
 800adf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800adf4:	e07d      	b.n	800aef2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800adf6:	6a3a      	ldr	r2, [r7, #32]
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d203      	bcs.n	800ae06 <create_name+0x1da>
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d123      	bne.n	800ae4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	2b0b      	cmp	r3, #11
 800ae0a:	d106      	bne.n	800ae1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ae0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae10:	f043 0303 	orr.w	r3, r3, #3
 800ae14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae18:	e06f      	b.n	800aefa <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d005      	beq.n	800ae2e <create_name+0x202>
 800ae22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae26:	f043 0303 	orr.w	r3, r3, #3
 800ae2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d860      	bhi.n	800aef8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	61bb      	str	r3, [r7, #24]
 800ae3a:	2308      	movs	r3, #8
 800ae3c:	623b      	str	r3, [r7, #32]
 800ae3e:	230b      	movs	r3, #11
 800ae40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ae42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ae4c:	e051      	b.n	800aef2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ae4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae50:	2b7f      	cmp	r3, #127	; 0x7f
 800ae52:	d914      	bls.n	800ae7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ae54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7fd ffeb 	bl	8008e34 <ff_convert>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ae62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d004      	beq.n	800ae72 <create_name+0x246>
 800ae68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae6a:	3b80      	subs	r3, #128	; 0x80
 800ae6c:	4a49      	ldr	r2, [pc, #292]	; (800af94 <create_name+0x368>)
 800ae6e:	5cd3      	ldrb	r3, [r2, r3]
 800ae70:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ae72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae76:	f043 0302 	orr.w	r3, r3, #2
 800ae7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ae7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d007      	beq.n	800ae94 <create_name+0x268>
 800ae84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae86:	4619      	mov	r1, r3
 800ae88:	4843      	ldr	r0, [pc, #268]	; (800af98 <create_name+0x36c>)
 800ae8a:	f7fe fa1b 	bl	80092c4 <chk_chr>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d008      	beq.n	800aea6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ae94:	235f      	movs	r3, #95	; 0x5f
 800ae96:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ae98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae9c:	f043 0303 	orr.w	r3, r3, #3
 800aea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aea4:	e01b      	b.n	800aede <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800aea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aea8:	2b40      	cmp	r3, #64	; 0x40
 800aeaa:	d909      	bls.n	800aec0 <create_name+0x294>
 800aeac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeae:	2b5a      	cmp	r3, #90	; 0x5a
 800aeb0:	d806      	bhi.n	800aec0 <create_name+0x294>
					b |= 2;
 800aeb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aeb6:	f043 0302 	orr.w	r3, r3, #2
 800aeba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aebe:	e00e      	b.n	800aede <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800aec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aec2:	2b60      	cmp	r3, #96	; 0x60
 800aec4:	d90b      	bls.n	800aede <create_name+0x2b2>
 800aec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aec8:	2b7a      	cmp	r3, #122	; 0x7a
 800aeca:	d808      	bhi.n	800aede <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800aecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aed0:	f043 0301 	orr.w	r3, r3, #1
 800aed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeda:	3b20      	subs	r3, #32
 800aedc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800aede:	6a3b      	ldr	r3, [r7, #32]
 800aee0:	1c5a      	adds	r2, r3, #1
 800aee2:	623a      	str	r2, [r7, #32]
 800aee4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aee6:	b2d1      	uxtb	r1, r2
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	4413      	add	r3, r2
 800aeec:	460a      	mov	r2, r1
 800aeee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800aef2:	e763      	b.n	800adbc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800aef4:	bf00      	nop
 800aef6:	e000      	b.n	800aefa <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800aef8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800af00:	2be5      	cmp	r3, #229	; 0xe5
 800af02:	d103      	bne.n	800af0c <create_name+0x2e0>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2205      	movs	r2, #5
 800af08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	2b08      	cmp	r3, #8
 800af10:	d104      	bne.n	800af1c <create_name+0x2f0>
 800af12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800af1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af20:	f003 030c 	and.w	r3, r3, #12
 800af24:	2b0c      	cmp	r3, #12
 800af26:	d005      	beq.n	800af34 <create_name+0x308>
 800af28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af2c:	f003 0303 	and.w	r3, r3, #3
 800af30:	2b03      	cmp	r3, #3
 800af32:	d105      	bne.n	800af40 <create_name+0x314>
 800af34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af38:	f043 0302 	orr.w	r3, r3, #2
 800af3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800af40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d117      	bne.n	800af7c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800af4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af50:	f003 0303 	and.w	r3, r3, #3
 800af54:	2b01      	cmp	r3, #1
 800af56:	d105      	bne.n	800af64 <create_name+0x338>
 800af58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af5c:	f043 0310 	orr.w	r3, r3, #16
 800af60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800af64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af68:	f003 030c 	and.w	r3, r3, #12
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d105      	bne.n	800af7c <create_name+0x350>
 800af70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af74:	f043 0308 	orr.w	r3, r3, #8
 800af78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800af86:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3728      	adds	r7, #40	; 0x28
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	0800d9ac 	.word	0x0800d9ac
 800af94:	0800df28 	.word	0x0800df28
 800af98:	0800d9b8 	.word	0x0800d9b8

0800af9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800afb0:	e002      	b.n	800afb8 <follow_path+0x1c>
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	3301      	adds	r3, #1
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b2f      	cmp	r3, #47	; 0x2f
 800afbe:	d0f8      	beq.n	800afb2 <follow_path+0x16>
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b5c      	cmp	r3, #92	; 0x5c
 800afc6:	d0f4      	beq.n	800afb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2200      	movs	r2, #0
 800afcc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	2b1f      	cmp	r3, #31
 800afd4:	d80a      	bhi.n	800afec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2280      	movs	r2, #128	; 0x80
 800afda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800afde:	2100      	movs	r1, #0
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7fe ff14 	bl	8009e0e <dir_sdi>
 800afe6:	4603      	mov	r3, r0
 800afe8:	75fb      	strb	r3, [r7, #23]
 800afea:	e048      	b.n	800b07e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800afec:	463b      	mov	r3, r7
 800afee:	4619      	mov	r1, r3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7ff fe1b 	bl	800ac2c <create_name>
 800aff6:	4603      	mov	r3, r0
 800aff8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d139      	bne.n	800b074 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff fb7d 	bl	800a700 <dir_find>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b010:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b012:	7dfb      	ldrb	r3, [r7, #23]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00a      	beq.n	800b02e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	2b04      	cmp	r3, #4
 800b01c:	d12c      	bne.n	800b078 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b01e:	7afb      	ldrb	r3, [r7, #11]
 800b020:	f003 0304 	and.w	r3, r3, #4
 800b024:	2b00      	cmp	r3, #0
 800b026:	d127      	bne.n	800b078 <follow_path+0xdc>
 800b028:	2305      	movs	r3, #5
 800b02a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b02c:	e024      	b.n	800b078 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b02e:	7afb      	ldrb	r3, [r7, #11]
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	d121      	bne.n	800b07c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	799b      	ldrb	r3, [r3, #6]
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b00      	cmp	r3, #0
 800b042:	d102      	bne.n	800b04a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b044:	2305      	movs	r3, #5
 800b046:	75fb      	strb	r3, [r7, #23]
 800b048:	e019      	b.n	800b07e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	8992      	ldrh	r2, [r2, #12]
 800b058:	fbb3 f0f2 	udiv	r0, r3, r2
 800b05c:	fb02 f200 	mul.w	r2, r2, r0
 800b060:	1a9b      	subs	r3, r3, r2
 800b062:	440b      	add	r3, r1
 800b064:	4619      	mov	r1, r3
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f7ff f877 	bl	800a15a <ld_clust>
 800b06c:	4602      	mov	r2, r0
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b072:	e7bb      	b.n	800afec <follow_path+0x50>
			if (res != FR_OK) break;
 800b074:	bf00      	nop
 800b076:	e002      	b.n	800b07e <follow_path+0xe2>
				break;
 800b078:	bf00      	nop
 800b07a:	e000      	b.n	800b07e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b07c:	bf00      	nop
			}
		}
	}

	return res;
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b090:	f04f 33ff 	mov.w	r3, #4294967295
 800b094:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d031      	beq.n	800b102 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	617b      	str	r3, [r7, #20]
 800b0a4:	e002      	b.n	800b0ac <get_ldnumber+0x24>
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	617b      	str	r3, [r7, #20]
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2b1f      	cmp	r3, #31
 800b0b2:	d903      	bls.n	800b0bc <get_ldnumber+0x34>
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2b3a      	cmp	r3, #58	; 0x3a
 800b0ba:	d1f4      	bne.n	800b0a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b3a      	cmp	r3, #58	; 0x3a
 800b0c2:	d11c      	bne.n	800b0fe <get_ldnumber+0x76>
			tp = *path;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	60fa      	str	r2, [r7, #12]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	3b30      	subs	r3, #48	; 0x30
 800b0d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	d80e      	bhi.n	800b0fa <get_ldnumber+0x72>
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d10a      	bne.n	800b0fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d107      	bne.n	800b0fa <get_ldnumber+0x72>
					vol = (int)i;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	e002      	b.n	800b104 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b0fe:	2300      	movs	r3, #0
 800b100:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b102:	693b      	ldr	r3, [r7, #16]
}
 800b104:	4618      	mov	r0, r3
 800b106:	371c      	adds	r7, #28
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	70da      	strb	r2, [r3, #3]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f04f 32ff 	mov.w	r2, #4294967295
 800b126:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7fe fa96 	bl	800965c <move_window>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <check_fs+0x2a>
 800b136:	2304      	movs	r3, #4
 800b138:	e038      	b.n	800b1ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	3338      	adds	r3, #56	; 0x38
 800b13e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b142:	4618      	mov	r0, r3
 800b144:	f7fd ffda 	bl	80090fc <ld_word>
 800b148:	4603      	mov	r3, r0
 800b14a:	461a      	mov	r2, r3
 800b14c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b150:	429a      	cmp	r2, r3
 800b152:	d001      	beq.n	800b158 <check_fs+0x48>
 800b154:	2303      	movs	r3, #3
 800b156:	e029      	b.n	800b1ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b15e:	2be9      	cmp	r3, #233	; 0xe9
 800b160:	d009      	beq.n	800b176 <check_fs+0x66>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b168:	2beb      	cmp	r3, #235	; 0xeb
 800b16a:	d11e      	bne.n	800b1aa <check_fs+0x9a>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b172:	2b90      	cmp	r3, #144	; 0x90
 800b174:	d119      	bne.n	800b1aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	3338      	adds	r3, #56	; 0x38
 800b17a:	3336      	adds	r3, #54	; 0x36
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fd ffd5 	bl	800912c <ld_dword>
 800b182:	4603      	mov	r3, r0
 800b184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b188:	4a0a      	ldr	r2, [pc, #40]	; (800b1b4 <check_fs+0xa4>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d101      	bne.n	800b192 <check_fs+0x82>
 800b18e:	2300      	movs	r3, #0
 800b190:	e00c      	b.n	800b1ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	3338      	adds	r3, #56	; 0x38
 800b196:	3352      	adds	r3, #82	; 0x52
 800b198:	4618      	mov	r0, r3
 800b19a:	f7fd ffc7 	bl	800912c <ld_dword>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	4b05      	ldr	r3, [pc, #20]	; (800b1b8 <check_fs+0xa8>)
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d101      	bne.n	800b1aa <check_fs+0x9a>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e000      	b.n	800b1ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b1aa:	2302      	movs	r3, #2
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	00544146 	.word	0x00544146
 800b1b8:	33544146 	.word	0x33544146

0800b1bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b096      	sub	sp, #88	; 0x58
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f7ff ff59 	bl	800b088 <get_ldnumber>
 800b1d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	da01      	bge.n	800b1e2 <find_volume+0x26>
 800b1de:	230b      	movs	r3, #11
 800b1e0:	e268      	b.n	800b6b4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b1e2:	4ab0      	ldr	r2, [pc, #704]	; (800b4a4 <find_volume+0x2e8>)
 800b1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <find_volume+0x3a>
 800b1f2:	230c      	movs	r3, #12
 800b1f4:	e25e      	b.n	800b6b4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b1fc:	79fb      	ldrb	r3, [r7, #7]
 800b1fe:	f023 0301 	bic.w	r3, r3, #1
 800b202:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d01a      	beq.n	800b242 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20e:	785b      	ldrb	r3, [r3, #1]
 800b210:	4618      	mov	r0, r3
 800b212:	f7fd fed5 	bl	8008fc0 <disk_status>
 800b216:	4603      	mov	r3, r0
 800b218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b21c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b220:	f003 0301 	and.w	r3, r3, #1
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10c      	bne.n	800b242 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b228:	79fb      	ldrb	r3, [r7, #7]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d007      	beq.n	800b23e <find_volume+0x82>
 800b22e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b232:	f003 0304 	and.w	r3, r3, #4
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b23a:	230a      	movs	r3, #10
 800b23c:	e23a      	b.n	800b6b4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800b23e:	2300      	movs	r3, #0
 800b240:	e238      	b.n	800b6b4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	2200      	movs	r2, #0
 800b246:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24a:	b2da      	uxtb	r2, r3
 800b24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	785b      	ldrb	r3, [r3, #1]
 800b254:	4618      	mov	r0, r3
 800b256:	f7fd fecd 	bl	8008ff4 <disk_initialize>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b26c:	2303      	movs	r3, #3
 800b26e:	e221      	b.n	800b6b4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d007      	beq.n	800b286 <find_volume+0xca>
 800b276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b27a:	f003 0304 	and.w	r3, r3, #4
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b282:	230a      	movs	r3, #10
 800b284:	e216      	b.n	800b6b4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	7858      	ldrb	r0, [r3, #1]
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	330c      	adds	r3, #12
 800b28e:	461a      	mov	r2, r3
 800b290:	2102      	movs	r1, #2
 800b292:	f7fd ff15 	bl	80090c0 <disk_ioctl>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <find_volume+0xe4>
 800b29c:	2301      	movs	r3, #1
 800b29e:	e209      	b.n	800b6b4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	899b      	ldrh	r3, [r3, #12]
 800b2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a8:	d80d      	bhi.n	800b2c6 <find_volume+0x10a>
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	899b      	ldrh	r3, [r3, #12]
 800b2ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2b2:	d308      	bcc.n	800b2c6 <find_volume+0x10a>
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b6:	899b      	ldrh	r3, [r3, #12]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2bc:	899b      	ldrh	r3, [r3, #12]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <find_volume+0x10e>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e1f4      	b.n	800b6b4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b2ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2d2:	f7ff ff1d 	bl	800b110 <check_fs>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b2dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d14b      	bne.n	800b37c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	643b      	str	r3, [r7, #64]	; 0x40
 800b2e8:	e01f      	b.n	800b32a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b2f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f2:	011b      	lsls	r3, r3, #4
 800b2f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b2f8:	4413      	add	r3, r2
 800b2fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	3304      	adds	r3, #4
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d006      	beq.n	800b314 <find_volume+0x158>
 800b306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b308:	3308      	adds	r3, #8
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fd ff0e 	bl	800912c <ld_dword>
 800b310:	4602      	mov	r2, r0
 800b312:	e000      	b.n	800b316 <find_volume+0x15a>
 800b314:	2200      	movs	r2, #0
 800b316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b31e:	440b      	add	r3, r1
 800b320:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b326:	3301      	adds	r3, #1
 800b328:	643b      	str	r3, [r7, #64]	; 0x40
 800b32a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d9dc      	bls.n	800b2ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b330:	2300      	movs	r3, #0
 800b332:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <find_volume+0x184>
 800b33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b33c:	3b01      	subs	r3, #1
 800b33e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b348:	4413      	add	r3, r2
 800b34a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b34e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b352:	2b00      	cmp	r3, #0
 800b354:	d005      	beq.n	800b362 <find_volume+0x1a6>
 800b356:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b358:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b35a:	f7ff fed9 	bl	800b110 <check_fs>
 800b35e:	4603      	mov	r3, r0
 800b360:	e000      	b.n	800b364 <find_volume+0x1a8>
 800b362:	2303      	movs	r3, #3
 800b364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d905      	bls.n	800b37c <find_volume+0x1c0>
 800b370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b372:	3301      	adds	r3, #1
 800b374:	643b      	str	r3, [r7, #64]	; 0x40
 800b376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b378:	2b03      	cmp	r3, #3
 800b37a:	d9e1      	bls.n	800b340 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b37c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b380:	2b04      	cmp	r3, #4
 800b382:	d101      	bne.n	800b388 <find_volume+0x1cc>
 800b384:	2301      	movs	r3, #1
 800b386:	e195      	b.n	800b6b4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d901      	bls.n	800b394 <find_volume+0x1d8>
 800b390:	230d      	movs	r3, #13
 800b392:	e18f      	b.n	800b6b4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	3338      	adds	r3, #56	; 0x38
 800b398:	330b      	adds	r3, #11
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fd feae 	bl	80090fc <ld_word>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	899b      	ldrh	r3, [r3, #12]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d001      	beq.n	800b3b0 <find_volume+0x1f4>
 800b3ac:	230d      	movs	r3, #13
 800b3ae:	e181      	b.n	800b6b4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b2:	3338      	adds	r3, #56	; 0x38
 800b3b4:	3316      	adds	r3, #22
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fd fea0 	bl	80090fc <ld_word>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d106      	bne.n	800b3d4 <find_volume+0x218>
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c8:	3338      	adds	r3, #56	; 0x38
 800b3ca:	3324      	adds	r3, #36	; 0x24
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fd fead 	bl	800912c <ld_dword>
 800b3d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3d8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	789b      	ldrb	r3, [r3, #2]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d005      	beq.n	800b3f8 <find_volume+0x23c>
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	789b      	ldrb	r3, [r3, #2]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d001      	beq.n	800b3f8 <find_volume+0x23c>
 800b3f4:	230d      	movs	r3, #13
 800b3f6:	e15d      	b.n	800b6b4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fa:	789b      	ldrb	r3, [r3, #2]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b400:	fb02 f303 	mul.w	r3, r2, r3
 800b404:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b410:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	895b      	ldrh	r3, [r3, #10]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d008      	beq.n	800b42c <find_volume+0x270>
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	895b      	ldrh	r3, [r3, #10]
 800b41e:	461a      	mov	r2, r3
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	895b      	ldrh	r3, [r3, #10]
 800b424:	3b01      	subs	r3, #1
 800b426:	4013      	ands	r3, r2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d001      	beq.n	800b430 <find_volume+0x274>
 800b42c:	230d      	movs	r3, #13
 800b42e:	e141      	b.n	800b6b4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	3338      	adds	r3, #56	; 0x38
 800b434:	3311      	adds	r3, #17
 800b436:	4618      	mov	r0, r3
 800b438:	f7fd fe60 	bl	80090fc <ld_word>
 800b43c:	4603      	mov	r3, r0
 800b43e:	461a      	mov	r2, r3
 800b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b442:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	891b      	ldrh	r3, [r3, #8]
 800b448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b44a:	8992      	ldrh	r2, [r2, #12]
 800b44c:	0952      	lsrs	r2, r2, #5
 800b44e:	b292      	uxth	r2, r2
 800b450:	fbb3 f1f2 	udiv	r1, r3, r2
 800b454:	fb02 f201 	mul.w	r2, r2, r1
 800b458:	1a9b      	subs	r3, r3, r2
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <find_volume+0x2a8>
 800b460:	230d      	movs	r3, #13
 800b462:	e127      	b.n	800b6b4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	3338      	adds	r3, #56	; 0x38
 800b468:	3313      	adds	r3, #19
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fd fe46 	bl	80090fc <ld_word>
 800b470:	4603      	mov	r3, r0
 800b472:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b476:	2b00      	cmp	r3, #0
 800b478:	d106      	bne.n	800b488 <find_volume+0x2cc>
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	3338      	adds	r3, #56	; 0x38
 800b47e:	3320      	adds	r3, #32
 800b480:	4618      	mov	r0, r3
 800b482:	f7fd fe53 	bl	800912c <ld_dword>
 800b486:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48a:	3338      	adds	r3, #56	; 0x38
 800b48c:	330e      	adds	r3, #14
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fd fe34 	bl	80090fc <ld_word>
 800b494:	4603      	mov	r3, r0
 800b496:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b498:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d104      	bne.n	800b4a8 <find_volume+0x2ec>
 800b49e:	230d      	movs	r3, #13
 800b4a0:	e108      	b.n	800b6b4 <find_volume+0x4f8>
 800b4a2:	bf00      	nop
 800b4a4:	200000b8 	.word	0x200000b8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b4a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ac:	4413      	add	r3, r2
 800b4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4b0:	8911      	ldrh	r1, [r2, #8]
 800b4b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4b4:	8992      	ldrh	r2, [r2, #12]
 800b4b6:	0952      	lsrs	r2, r2, #5
 800b4b8:	b292      	uxth	r2, r2
 800b4ba:	fbb1 f2f2 	udiv	r2, r1, r2
 800b4be:	b292      	uxth	r2, r2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b4c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d201      	bcs.n	800b4d0 <find_volume+0x314>
 800b4cc:	230d      	movs	r3, #13
 800b4ce:	e0f1      	b.n	800b6b4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b4d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4d8:	8952      	ldrh	r2, [r2, #10]
 800b4da:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <find_volume+0x32e>
 800b4e6:	230d      	movs	r3, #13
 800b4e8:	e0e4      	b.n	800b6b4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d802      	bhi.n	800b500 <find_volume+0x344>
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b506:	4293      	cmp	r3, r2
 800b508:	d802      	bhi.n	800b510 <find_volume+0x354>
 800b50a:	2301      	movs	r3, #1
 800b50c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	1c9a      	adds	r2, r3, #2
 800b514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b516:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b51c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b51e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b522:	441a      	add	r2, r3
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b528:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52c:	441a      	add	r2, r3
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b532:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b536:	2b03      	cmp	r3, #3
 800b538:	d11e      	bne.n	800b578 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	3338      	adds	r3, #56	; 0x38
 800b53e:	332a      	adds	r3, #42	; 0x2a
 800b540:	4618      	mov	r0, r3
 800b542:	f7fd fddb 	bl	80090fc <ld_word>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d001      	beq.n	800b550 <find_volume+0x394>
 800b54c:	230d      	movs	r3, #13
 800b54e:	e0b1      	b.n	800b6b4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	891b      	ldrh	r3, [r3, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <find_volume+0x3a0>
 800b558:	230d      	movs	r3, #13
 800b55a:	e0ab      	b.n	800b6b4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55e:	3338      	adds	r3, #56	; 0x38
 800b560:	332c      	adds	r3, #44	; 0x2c
 800b562:	4618      	mov	r0, r3
 800b564:	f7fd fde2 	bl	800912c <ld_dword>
 800b568:	4602      	mov	r2, r0
 800b56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	69db      	ldr	r3, [r3, #28]
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	647b      	str	r3, [r7, #68]	; 0x44
 800b576:	e01f      	b.n	800b5b8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57a:	891b      	ldrh	r3, [r3, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <find_volume+0x3c8>
 800b580:	230d      	movs	r3, #13
 800b582:	e097      	b.n	800b6b4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b58a:	441a      	add	r2, r3
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b594:	2b02      	cmp	r3, #2
 800b596:	d103      	bne.n	800b5a0 <find_volume+0x3e4>
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	69db      	ldr	r3, [r3, #28]
 800b59c:	005b      	lsls	r3, r3, #1
 800b59e:	e00a      	b.n	800b5b6 <find_volume+0x3fa>
 800b5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a2:	69da      	ldr	r2, [r3, #28]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	4413      	add	r3, r2
 800b5aa:	085a      	lsrs	r2, r3, #1
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	69db      	ldr	r3, [r3, #28]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b5b6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	6a1a      	ldr	r2, [r3, #32]
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5be:	899b      	ldrh	r3, [r3, #12]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5c4:	440b      	add	r3, r1
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b5ca:	8989      	ldrh	r1, [r1, #12]
 800b5cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d201      	bcs.n	800b5d8 <find_volume+0x41c>
 800b5d4:	230d      	movs	r3, #13
 800b5d6:	e06d      	b.n	800b6b4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5da:	f04f 32ff 	mov.w	r2, #4294967295
 800b5de:	619a      	str	r2, [r3, #24]
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e2:	699a      	ldr	r2, [r3, #24]
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	2280      	movs	r2, #128	; 0x80
 800b5ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b5ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d149      	bne.n	800b68a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f8:	3338      	adds	r3, #56	; 0x38
 800b5fa:	3330      	adds	r3, #48	; 0x30
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fd fd7d 	bl	80090fc <ld_word>
 800b602:	4603      	mov	r3, r0
 800b604:	2b01      	cmp	r3, #1
 800b606:	d140      	bne.n	800b68a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b60a:	3301      	adds	r3, #1
 800b60c:	4619      	mov	r1, r3
 800b60e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b610:	f7fe f824 	bl	800965c <move_window>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d137      	bne.n	800b68a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	2200      	movs	r2, #0
 800b61e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	3338      	adds	r3, #56	; 0x38
 800b624:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fd fd67 	bl	80090fc <ld_word>
 800b62e:	4603      	mov	r3, r0
 800b630:	461a      	mov	r2, r3
 800b632:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b636:	429a      	cmp	r2, r3
 800b638:	d127      	bne.n	800b68a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	3338      	adds	r3, #56	; 0x38
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fd fd74 	bl	800912c <ld_dword>
 800b644:	4602      	mov	r2, r0
 800b646:	4b1d      	ldr	r3, [pc, #116]	; (800b6bc <find_volume+0x500>)
 800b648:	429a      	cmp	r2, r3
 800b64a:	d11e      	bne.n	800b68a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64e:	3338      	adds	r3, #56	; 0x38
 800b650:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b654:	4618      	mov	r0, r3
 800b656:	f7fd fd69 	bl	800912c <ld_dword>
 800b65a:	4602      	mov	r2, r0
 800b65c:	4b18      	ldr	r3, [pc, #96]	; (800b6c0 <find_volume+0x504>)
 800b65e:	429a      	cmp	r2, r3
 800b660:	d113      	bne.n	800b68a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b664:	3338      	adds	r3, #56	; 0x38
 800b666:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fd fd5e 	bl	800912c <ld_dword>
 800b670:	4602      	mov	r2, r0
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	3338      	adds	r3, #56	; 0x38
 800b67a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fd fd54 	bl	800912c <ld_dword>
 800b684:	4602      	mov	r2, r0
 800b686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b688:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b690:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b692:	4b0c      	ldr	r3, [pc, #48]	; (800b6c4 <find_volume+0x508>)
 800b694:	881b      	ldrh	r3, [r3, #0]
 800b696:	3301      	adds	r3, #1
 800b698:	b29a      	uxth	r2, r3
 800b69a:	4b0a      	ldr	r3, [pc, #40]	; (800b6c4 <find_volume+0x508>)
 800b69c:	801a      	strh	r2, [r3, #0]
 800b69e:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <find_volume+0x508>)
 800b6a0:	881a      	ldrh	r2, [r3, #0]
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	4a07      	ldr	r2, [pc, #28]	; (800b6c8 <find_volume+0x50c>)
 800b6aa:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b6ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6ae:	f7fd ff6d 	bl	800958c <clear_lock>
#endif
	return FR_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3758      	adds	r7, #88	; 0x58
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	41615252 	.word	0x41615252
 800b6c0:	61417272 	.word	0x61417272
 800b6c4:	200000bc 	.word	0x200000bc
 800b6c8:	200000e0 	.word	0x200000e0

0800b6cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b6d6:	2309      	movs	r3, #9
 800b6d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d01c      	beq.n	800b71a <validate+0x4e>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d018      	beq.n	800b71a <validate+0x4e>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d013      	beq.n	800b71a <validate+0x4e>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	889a      	ldrh	r2, [r3, #4]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	88db      	ldrh	r3, [r3, #6]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d10c      	bne.n	800b71a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	4618      	mov	r0, r3
 800b708:	f7fd fc5a 	bl	8008fc0 <disk_status>
 800b70c:	4603      	mov	r3, r0
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	2b00      	cmp	r3, #0
 800b714:	d101      	bne.n	800b71a <validate+0x4e>
			res = FR_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d102      	bne.n	800b726 <validate+0x5a>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	e000      	b.n	800b728 <validate+0x5c>
 800b726:	2300      	movs	r3, #0
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	6013      	str	r3, [r2, #0]
	return res;
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
	...

0800b738 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b088      	sub	sp, #32
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	4613      	mov	r3, r2
 800b744:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b74a:	f107 0310 	add.w	r3, r7, #16
 800b74e:	4618      	mov	r0, r3
 800b750:	f7ff fc9a 	bl	800b088 <get_ldnumber>
 800b754:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	da01      	bge.n	800b760 <f_mount+0x28>
 800b75c:	230b      	movs	r3, #11
 800b75e:	e02b      	b.n	800b7b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b760:	4a17      	ldr	r2, [pc, #92]	; (800b7c0 <f_mount+0x88>)
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b768:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b770:	69b8      	ldr	r0, [r7, #24]
 800b772:	f7fd ff0b 	bl	800958c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2200      	movs	r2, #0
 800b77a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	490d      	ldr	r1, [pc, #52]	; (800b7c0 <f_mount+0x88>)
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <f_mount+0x66>
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d001      	beq.n	800b7a2 <f_mount+0x6a>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	e00a      	b.n	800b7b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b7a2:	f107 010c 	add.w	r1, r7, #12
 800b7a6:	f107 0308 	add.w	r3, r7, #8
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7ff fd05 	bl	800b1bc <find_volume>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	200000b8 	.word	0x200000b8

0800b7c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b09a      	sub	sp, #104	; 0x68
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <f_open+0x18>
 800b7d8:	2309      	movs	r3, #9
 800b7da:	e1bb      	b.n	800bb54 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b7dc:	79fb      	ldrb	r3, [r7, #7]
 800b7de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b7e4:	79fa      	ldrb	r2, [r7, #7]
 800b7e6:	f107 0114 	add.w	r1, r7, #20
 800b7ea:	f107 0308 	add.w	r3, r7, #8
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7ff fce4 	bl	800b1bc <find_volume>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b7fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f040 819f 	bne.w	800bb42 <f_open+0x37e>
		dj.obj.fs = fs;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b808:	68ba      	ldr	r2, [r7, #8]
 800b80a:	f107 0318 	add.w	r3, r7, #24
 800b80e:	4611      	mov	r1, r2
 800b810:	4618      	mov	r0, r3
 800b812:	f7ff fbc3 	bl	800af9c <follow_path>
 800b816:	4603      	mov	r3, r0
 800b818:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b81c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b820:	2b00      	cmp	r3, #0
 800b822:	d11a      	bne.n	800b85a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b824:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b828:	b25b      	sxtb	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	da03      	bge.n	800b836 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b82e:	2306      	movs	r3, #6
 800b830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b834:	e011      	b.n	800b85a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	f023 0301 	bic.w	r3, r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	bf14      	ite	ne
 800b840:	2301      	movne	r3, #1
 800b842:	2300      	moveq	r3, #0
 800b844:	b2db      	uxtb	r3, r3
 800b846:	461a      	mov	r2, r3
 800b848:	f107 0318 	add.w	r3, r7, #24
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fd fd54 	bl	80092fc <chk_lock>
 800b854:	4603      	mov	r3, r0
 800b856:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b85a:	79fb      	ldrb	r3, [r7, #7]
 800b85c:	f003 031c 	and.w	r3, r3, #28
 800b860:	2b00      	cmp	r3, #0
 800b862:	d07f      	beq.n	800b964 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b864:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d017      	beq.n	800b89c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b86c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b870:	2b04      	cmp	r3, #4
 800b872:	d10e      	bne.n	800b892 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b874:	f7fd fd9e 	bl	80093b4 <enq_lock>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d006      	beq.n	800b88c <f_open+0xc8>
 800b87e:	f107 0318 	add.w	r3, r7, #24
 800b882:	4618      	mov	r0, r3
 800b884:	f7fe fffc 	bl	800a880 <dir_register>
 800b888:	4603      	mov	r3, r0
 800b88a:	e000      	b.n	800b88e <f_open+0xca>
 800b88c:	2312      	movs	r3, #18
 800b88e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b892:	79fb      	ldrb	r3, [r7, #7]
 800b894:	f043 0308 	orr.w	r3, r3, #8
 800b898:	71fb      	strb	r3, [r7, #7]
 800b89a:	e010      	b.n	800b8be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b89c:	7fbb      	ldrb	r3, [r7, #30]
 800b89e:	f003 0311 	and.w	r3, r3, #17
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d003      	beq.n	800b8ae <f_open+0xea>
					res = FR_DENIED;
 800b8a6:	2307      	movs	r3, #7
 800b8a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b8ac:	e007      	b.n	800b8be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b8ae:	79fb      	ldrb	r3, [r7, #7]
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <f_open+0xfa>
 800b8b8:	2308      	movs	r3, #8
 800b8ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b8be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d168      	bne.n	800b998 <f_open+0x1d4>
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	f003 0308 	and.w	r3, r3, #8
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d063      	beq.n	800b998 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b8d0:	f7fb f94e 	bl	8006b70 <get_fattime>
 800b8d4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d8:	330e      	adds	r3, #14
 800b8da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fd fc63 	bl	80091a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	3316      	adds	r3, #22
 800b8e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fd fc5d 	bl	80091a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f0:	330b      	adds	r3, #11
 800b8f2:	2220      	movs	r2, #32
 800b8f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fe fc2c 	bl	800a15a <ld_clust>
 800b902:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b908:	2200      	movs	r2, #0
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe fc44 	bl	800a198 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	331c      	adds	r3, #28
 800b914:	2100      	movs	r1, #0
 800b916:	4618      	mov	r0, r3
 800b918:	f7fd fc46 	bl	80091a8 <st_dword>
					fs->wflag = 1;
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2201      	movs	r2, #1
 800b920:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b924:	2b00      	cmp	r3, #0
 800b926:	d037      	beq.n	800b998 <f_open+0x1d4>
						dw = fs->winsect;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b92c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b92e:	f107 0318 	add.w	r3, r7, #24
 800b932:	2200      	movs	r2, #0
 800b934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b936:	4618      	mov	r0, r3
 800b938:	f7fe f934 	bl	8009ba4 <remove_chain>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b946:	2b00      	cmp	r3, #0
 800b948:	d126      	bne.n	800b998 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fd fe84 	bl	800965c <move_window>
 800b954:	4603      	mov	r3, r0
 800b956:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b95e:	3a01      	subs	r2, #1
 800b960:	615a      	str	r2, [r3, #20]
 800b962:	e019      	b.n	800b998 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b964:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d115      	bne.n	800b998 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b96c:	7fbb      	ldrb	r3, [r7, #30]
 800b96e:	f003 0310 	and.w	r3, r3, #16
 800b972:	2b00      	cmp	r3, #0
 800b974:	d003      	beq.n	800b97e <f_open+0x1ba>
					res = FR_NO_FILE;
 800b976:	2304      	movs	r3, #4
 800b978:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b97c:	e00c      	b.n	800b998 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	f003 0302 	and.w	r3, r3, #2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d007      	beq.n	800b998 <f_open+0x1d4>
 800b988:	7fbb      	ldrb	r3, [r7, #30]
 800b98a:	f003 0301 	and.w	r3, r3, #1
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d002      	beq.n	800b998 <f_open+0x1d4>
						res = FR_DENIED;
 800b992:	2307      	movs	r3, #7
 800b994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b998:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d128      	bne.n	800b9f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b9a0:	79fb      	ldrb	r3, [r7, #7]
 800b9a2:	f003 0308 	and.w	r3, r3, #8
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b9ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b9c0:	79fb      	ldrb	r3, [r7, #7]
 800b9c2:	f023 0301 	bic.w	r3, r3, #1
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	bf14      	ite	ne
 800b9ca:	2301      	movne	r3, #1
 800b9cc:	2300      	moveq	r3, #0
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	f107 0318 	add.w	r3, r7, #24
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fd fd0d 	bl	80093f8 <inc_lock>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d102      	bne.n	800b9f2 <f_open+0x22e>
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b9f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f040 80a3 	bne.w	800bb42 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba00:	4611      	mov	r1, r2
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fe fba9 	bl	800a15a <ld_clust>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ba0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba10:	331c      	adds	r3, #28
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fd fb8a 	bl	800912c <ld_dword>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	88da      	ldrh	r2, [r3, #6]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	79fa      	ldrb	r2, [r7, #7]
 800ba36:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3330      	adds	r3, #48	; 0x30
 800ba4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fd fbf4 	bl	8009242 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ba5a:	79fb      	ldrb	r3, [r7, #7]
 800ba5c:	f003 0320 	and.w	r3, r3, #32
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d06e      	beq.n	800bb42 <f_open+0x37e>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d06a      	beq.n	800bb42 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	68da      	ldr	r2, [r3, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	895b      	ldrh	r3, [r3, #10]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	899b      	ldrh	r3, [r3, #12]
 800ba7e:	fb03 f302 	mul.w	r3, r3, r2
 800ba82:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba90:	e016      	b.n	800bac0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fd fe9d 	bl	80097d6 <get_fat>
 800ba9c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ba9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d802      	bhi.n	800baaa <f_open+0x2e6>
 800baa4:	2302      	movs	r3, #2
 800baa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800baaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab0:	d102      	bne.n	800bab8 <f_open+0x2f4>
 800bab2:	2301      	movs	r3, #1
 800bab4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bab8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800baba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bac0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d103      	bne.n	800bad0 <f_open+0x30c>
 800bac8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800baca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bacc:	429a      	cmp	r2, r3
 800bace:	d8e0      	bhi.n	800ba92 <f_open+0x2ce>
				}
				fp->clust = clst;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bad4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bad6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bada:	2b00      	cmp	r3, #0
 800badc:	d131      	bne.n	800bb42 <f_open+0x37e>
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	899b      	ldrh	r3, [r3, #12]
 800bae2:	461a      	mov	r2, r3
 800bae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bae6:	fbb3 f1f2 	udiv	r1, r3, r2
 800baea:	fb02 f201 	mul.w	r2, r2, r1
 800baee:	1a9b      	subs	r3, r3, r2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d026      	beq.n	800bb42 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fd fe4d 	bl	8009798 <clust2sect>
 800bafe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d103      	bne.n	800bb0e <f_open+0x34a>
						res = FR_INT_ERR;
 800bb06:	2302      	movs	r3, #2
 800bb08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bb0c:	e019      	b.n	800bb42 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	899b      	ldrh	r3, [r3, #12]
 800bb12:	461a      	mov	r2, r3
 800bb14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb16:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1c:	441a      	add	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	7858      	ldrb	r0, [r3, #1]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6a1a      	ldr	r2, [r3, #32]
 800bb30:	2301      	movs	r3, #1
 800bb32:	f7fd fa85 	bl	8009040 <disk_read>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <f_open+0x37e>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <f_open+0x38c>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3768      	adds	r7, #104	; 0x68
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08c      	sub	sp, #48	; 0x30
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2200      	movs	r2, #0
 800bb72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f107 0210 	add.w	r2, r7, #16
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7ff fda5 	bl	800b6cc <validate>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d107      	bne.n	800bba0 <f_write+0x44>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	7d5b      	ldrb	r3, [r3, #21]
 800bb94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bb98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <f_write+0x4a>
 800bba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bba4:	e16a      	b.n	800be7c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	7d1b      	ldrb	r3, [r3, #20]
 800bbaa:	f003 0302 	and.w	r3, r3, #2
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <f_write+0x5a>
 800bbb2:	2307      	movs	r3, #7
 800bbb4:	e162      	b.n	800be7c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	699a      	ldr	r2, [r3, #24]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	441a      	add	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	f080 814c 	bcs.w	800be60 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	43db      	mvns	r3, r3
 800bbce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bbd0:	e146      	b.n	800be60 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	8992      	ldrh	r2, [r2, #12]
 800bbda:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbde:	fb02 f201 	mul.w	r2, r2, r1
 800bbe2:	1a9b      	subs	r3, r3, r2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f040 80f1 	bne.w	800bdcc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	8992      	ldrh	r2, [r2, #12]
 800bbf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	8952      	ldrh	r2, [r2, #10]
 800bbfa:	3a01      	subs	r2, #1
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d143      	bne.n	800bc8e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10c      	bne.n	800bc28 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d11a      	bne.n	800bc50 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe f825 	bl	8009c6e <create_chain>
 800bc24:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc26:	e013      	b.n	800bc50 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d007      	beq.n	800bc40 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	4619      	mov	r1, r3
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f7fe f8b1 	bl	8009d9e <clmt_clust>
 800bc3c:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc3e:	e007      	b.n	800bc50 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	69db      	ldr	r3, [r3, #28]
 800bc46:	4619      	mov	r1, r3
 800bc48:	4610      	mov	r0, r2
 800bc4a:	f7fe f810 	bl	8009c6e <create_chain>
 800bc4e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 8109 	beq.w	800be6a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d104      	bne.n	800bc68 <f_write+0x10c>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2202      	movs	r2, #2
 800bc62:	755a      	strb	r2, [r3, #21]
 800bc64:	2302      	movs	r3, #2
 800bc66:	e109      	b.n	800be7c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6e:	d104      	bne.n	800bc7a <f_write+0x11e>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2201      	movs	r2, #1
 800bc74:	755a      	strb	r2, [r3, #21]
 800bc76:	2301      	movs	r3, #1
 800bc78:	e100      	b.n	800be7c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc7e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d102      	bne.n	800bc8e <f_write+0x132>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc8c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	7d1b      	ldrb	r3, [r3, #20]
 800bc92:	b25b      	sxtb	r3, r3
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	da18      	bge.n	800bcca <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	7858      	ldrb	r0, [r3, #1]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6a1a      	ldr	r2, [r3, #32]
 800bca6:	2301      	movs	r3, #1
 800bca8:	f7fd f9ea 	bl	8009080 <disk_write>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d004      	beq.n	800bcbc <f_write+0x160>
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	755a      	strb	r2, [r3, #21]
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e0df      	b.n	800be7c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	7d1b      	ldrb	r3, [r3, #20]
 800bcc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	69db      	ldr	r3, [r3, #28]
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	f7fd fd60 	bl	8009798 <clust2sect>
 800bcd8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <f_write+0x18e>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2202      	movs	r2, #2
 800bce4:	755a      	strb	r2, [r3, #21]
 800bce6:	2302      	movs	r3, #2
 800bce8:	e0c8      	b.n	800be7c <f_write+0x320>
			sect += csect;
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	4413      	add	r3, r2
 800bcf0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	899b      	ldrh	r3, [r3, #12]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcfe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d043      	beq.n	800bd8e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd06:	69ba      	ldr	r2, [r7, #24]
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	8952      	ldrh	r2, [r2, #10]
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d905      	bls.n	800bd20 <f_write+0x1c4>
					cc = fs->csize - csect;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	895b      	ldrh	r3, [r3, #10]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	7858      	ldrb	r0, [r3, #1]
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	69f9      	ldr	r1, [r7, #28]
 800bd2a:	f7fd f9a9 	bl	8009080 <disk_write>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d004      	beq.n	800bd3e <f_write+0x1e2>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2201      	movs	r2, #1
 800bd38:	755a      	strb	r2, [r3, #21]
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e09e      	b.n	800be7c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6a1a      	ldr	r2, [r3, #32]
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	6a3a      	ldr	r2, [r7, #32]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d918      	bls.n	800bd7e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	6a1a      	ldr	r2, [r3, #32]
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	693a      	ldr	r2, [r7, #16]
 800bd5c:	8992      	ldrh	r2, [r2, #12]
 800bd5e:	fb02 f303 	mul.w	r3, r2, r3
 800bd62:	69fa      	ldr	r2, [r7, #28]
 800bd64:	18d1      	adds	r1, r2, r3
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	899b      	ldrh	r3, [r3, #12]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f7fd fa48 	bl	8009200 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	7d1b      	ldrb	r3, [r3, #20]
 800bd74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	899b      	ldrh	r3, [r3, #12]
 800bd82:	461a      	mov	r2, r3
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	fb02 f303 	mul.w	r3, r2, r3
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bd8c:	e04b      	b.n	800be26 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d016      	beq.n	800bdc6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	699a      	ldr	r2, [r3, #24]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d210      	bcs.n	800bdc6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	7858      	ldrb	r0, [r3, #1]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bdae:	2301      	movs	r3, #1
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	f7fd f945 	bl	8009040 <disk_read>
 800bdb6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d004      	beq.n	800bdc6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	755a      	strb	r2, [r3, #21]
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e05a      	b.n	800be7c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	899b      	ldrh	r3, [r3, #12]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	693a      	ldr	r2, [r7, #16]
 800bdd8:	8992      	ldrh	r2, [r2, #12]
 800bdda:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdde:	fb02 f201 	mul.w	r2, r2, r1
 800bde2:	1a9b      	subs	r3, r3, r2
 800bde4:	1ac3      	subs	r3, r0, r3
 800bde6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d901      	bls.n	800bdf4 <f_write+0x298>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	8992      	ldrh	r2, [r2, #12]
 800be02:	fbb3 f0f2 	udiv	r0, r3, r2
 800be06:	fb02 f200 	mul.w	r2, r2, r0
 800be0a:	1a9b      	subs	r3, r3, r2
 800be0c:	440b      	add	r3, r1
 800be0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be10:	69f9      	ldr	r1, [r7, #28]
 800be12:	4618      	mov	r0, r3
 800be14:	f7fd f9f4 	bl	8009200 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	7d1b      	ldrb	r3, [r3, #20]
 800be1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be20:	b2da      	uxtb	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800be26:	69fa      	ldr	r2, [r7, #28]
 800be28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2a:	4413      	add	r3, r2
 800be2c:	61fb      	str	r3, [r7, #28]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	699a      	ldr	r2, [r3, #24]
 800be32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be34:	441a      	add	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	619a      	str	r2, [r3, #24]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	68da      	ldr	r2, [r3, #12]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	429a      	cmp	r2, r3
 800be44:	bf38      	it	cc
 800be46:	461a      	movcc	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	60da      	str	r2, [r3, #12]
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	441a      	add	r2, r3
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f47f aeb5 	bne.w	800bbd2 <f_write+0x76>
 800be68:	e000      	b.n	800be6c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800be6a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	7d1b      	ldrb	r3, [r3, #20]
 800be70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be74:	b2da      	uxtb	r2, r3
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3730      	adds	r7, #48	; 0x30
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f107 0208 	add.w	r2, r7, #8
 800be92:	4611      	mov	r1, r2
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff fc19 	bl	800b6cc <validate>
 800be9a:	4603      	mov	r3, r0
 800be9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d168      	bne.n	800bf76 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	7d1b      	ldrb	r3, [r3, #20]
 800bea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d062      	beq.n	800bf76 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	7d1b      	ldrb	r3, [r3, #20]
 800beb4:	b25b      	sxtb	r3, r3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	da15      	bge.n	800bee6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	7858      	ldrb	r0, [r3, #1]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6a1a      	ldr	r2, [r3, #32]
 800bec8:	2301      	movs	r3, #1
 800beca:	f7fd f8d9 	bl	8009080 <disk_write>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <f_sync+0x54>
 800bed4:	2301      	movs	r3, #1
 800bed6:	e04f      	b.n	800bf78 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	7d1b      	ldrb	r3, [r3, #20]
 800bedc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bee6:	f7fa fe43 	bl	8006b70 <get_fattime>
 800beea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef2:	4619      	mov	r1, r3
 800bef4:	4610      	mov	r0, r2
 800bef6:	f7fd fbb1 	bl	800965c <move_window>
 800befa:	4603      	mov	r3, r0
 800befc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800befe:	7dfb      	ldrb	r3, [r7, #23]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d138      	bne.n	800bf76 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf08:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	330b      	adds	r3, #11
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	330b      	adds	r3, #11
 800bf14:	f042 0220 	orr.w	r2, r2, #32
 800bf18:	b2d2      	uxtb	r2, r2
 800bf1a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6818      	ldr	r0, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	461a      	mov	r2, r3
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	f7fe f936 	bl	800a198 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f103 021c 	add.w	r2, r3, #28
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	4619      	mov	r1, r3
 800bf38:	4610      	mov	r0, r2
 800bf3a:	f7fd f935 	bl	80091a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3316      	adds	r3, #22
 800bf42:	6939      	ldr	r1, [r7, #16]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fd f92f 	bl	80091a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3312      	adds	r3, #18
 800bf4e:	2100      	movs	r1, #0
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fd f90e 	bl	8009172 <st_word>
					fs->wflag = 1;
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fd fbaa 	bl	80096b8 <sync_fs>
 800bf64:	4603      	mov	r3, r0
 800bf66:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	7d1b      	ldrb	r3, [r3, #20]
 800bf6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff ff7b 	bl	800be84 <f_sync>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d118      	bne.n	800bfca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f107 0208 	add.w	r2, r7, #8
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff fb93 	bl	800b6cc <validate>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10c      	bne.n	800bfca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fd faad 	bl	8009514 <dec_lock>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d102      	bne.n	800bfca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d101      	bne.n	800bfe8 <f_opendir+0x14>
 800bfe4:	2309      	movs	r3, #9
 800bfe6:	e064      	b.n	800c0b2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800bfec:	f107 010c 	add.w	r1, r7, #12
 800bff0:	463b      	mov	r3, r7
 800bff2:	2200      	movs	r2, #0
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7ff f8e1 	bl	800b1bc <find_volume>
 800bffa:	4603      	mov	r3, r0
 800bffc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d14f      	bne.n	800c0a4 <f_opendir+0xd0>
		obj->fs = fs;
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7fe ffc4 	bl	800af9c <follow_path>
 800c014:	4603      	mov	r3, r0
 800c016:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c018:	7dfb      	ldrb	r3, [r7, #23]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d13d      	bne.n	800c09a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c024:	b25b      	sxtb	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	db12      	blt.n	800c050 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	799b      	ldrb	r3, [r3, #6]
 800c02e:	f003 0310 	and.w	r3, r3, #16
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00a      	beq.n	800c04c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a1b      	ldr	r3, [r3, #32]
 800c03c:	4619      	mov	r1, r3
 800c03e:	4610      	mov	r0, r2
 800c040:	f7fe f88b 	bl	800a15a <ld_clust>
 800c044:	4602      	mov	r2, r0
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	609a      	str	r2, [r3, #8]
 800c04a:	e001      	b.n	800c050 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c04c:	2305      	movs	r3, #5
 800c04e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c050:	7dfb      	ldrb	r3, [r7, #23]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d121      	bne.n	800c09a <f_opendir+0xc6>
				obj->id = fs->id;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	88da      	ldrh	r2, [r3, #6]
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c05e:	2100      	movs	r1, #0
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7fd fed4 	bl	8009e0e <dir_sdi>
 800c066:	4603      	mov	r3, r0
 800c068:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c06a:	7dfb      	ldrb	r3, [r7, #23]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d114      	bne.n	800c09a <f_opendir+0xc6>
					if (obj->sclust) {
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00d      	beq.n	800c094 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c078:	2100      	movs	r1, #0
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7fd f9bc 	bl	80093f8 <inc_lock>
 800c080:	4602      	mov	r2, r0
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d105      	bne.n	800c09a <f_opendir+0xc6>
 800c08e:	2312      	movs	r3, #18
 800c090:	75fb      	strb	r3, [r7, #23]
 800c092:	e002      	b.n	800c09a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2200      	movs	r2, #0
 800c098:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c09a:	7dfb      	ldrb	r3, [r7, #23]
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	d101      	bne.n	800c0a4 <f_opendir+0xd0>
 800c0a0:	2305      	movs	r3, #5
 800c0a2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c0a4:	7dfb      	ldrb	r3, [r7, #23]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d002      	beq.n	800c0b0 <f_opendir+0xdc>
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f107 0208 	add.w	r2, r7, #8
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7ff fafe 	bl	800b6cc <validate>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d110      	bne.n	800c0fc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d006      	beq.n	800c0f0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fd fa14 	bl	8009514 <dec_lock>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d102      	bne.n	800c0fc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b084      	sub	sp, #16
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f107 0208 	add.w	r2, r7, #8
 800c116:	4611      	mov	r1, r2
 800c118:	4618      	mov	r0, r3
 800c11a:	f7ff fad7 	bl	800b6cc <validate>
 800c11e:	4603      	mov	r3, r0
 800c120:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c122:	7bfb      	ldrb	r3, [r7, #15]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d126      	bne.n	800c176 <f_readdir+0x70>
		if (!fno) {
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c12e:	2100      	movs	r1, #0
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7fd fe6c 	bl	8009e0e <dir_sdi>
 800c136:	4603      	mov	r3, r0
 800c138:	73fb      	strb	r3, [r7, #15]
 800c13a:	e01c      	b.n	800c176 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c13c:	2100      	movs	r1, #0
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7fe fa37 	bl	800a5b2 <dir_read>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	2b04      	cmp	r3, #4
 800c14c:	d101      	bne.n	800c152 <f_readdir+0x4c>
 800c14e:	2300      	movs	r3, #0
 800c150:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10e      	bne.n	800c176 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7fe fc88 	bl	800aa70 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c160:	2100      	movs	r1, #0
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7fd fedc 	bl	8009f20 <dir_next>
 800c168:	4603      	mov	r3, r0
 800c16a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
 800c16e:	2b04      	cmp	r3, #4
 800c170:	d101      	bne.n	800c176 <f_readdir+0x70>
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c176:	7bfb      	ldrb	r3, [r7, #15]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b090      	sub	sp, #64	; 0x40
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800c18a:	f107 0108 	add.w	r1, r7, #8
 800c18e:	1d3b      	adds	r3, r7, #4
 800c190:	2200      	movs	r2, #0
 800c192:	4618      	mov	r0, r3
 800c194:	f7ff f812 	bl	800b1bc <find_volume>
 800c198:	4603      	mov	r3, r0
 800c19a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800c19e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d11f      	bne.n	800c1e6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	f107 0308 	add.w	r3, r7, #8
 800c1ac:	4611      	mov	r1, r2
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fe fef4 	bl	800af9c <follow_path>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800c1ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d111      	bne.n	800c1e6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800c1c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1c6:	b25b      	sxtb	r3, r3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	da03      	bge.n	800c1d4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800c1cc:	2306      	movs	r3, #6
 800c1ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c1d2:	e008      	b.n	800c1e6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d005      	beq.n	800c1e6 <f_stat+0x66>
 800c1da:	f107 0308 	add.w	r3, r7, #8
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fe fc45 	bl	800aa70 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800c1e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3740      	adds	r7, #64	; 0x40
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b092      	sub	sp, #72	; 0x48
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	60f8      	str	r0, [r7, #12]
 800c1fa:	60b9      	str	r1, [r7, #8]
 800c1fc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c1fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c202:	f107 030c 	add.w	r3, r7, #12
 800c206:	2200      	movs	r2, #0
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe ffd7 	bl	800b1bc <find_volume>
 800c20e:	4603      	mov	r3, r0
 800c210:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800c214:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f040 8099 	bne.w	800c350 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c21e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	699a      	ldr	r2, [r3, #24]
 800c228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22a:	69db      	ldr	r3, [r3, #28]
 800c22c:	3b02      	subs	r3, #2
 800c22e:	429a      	cmp	r2, r3
 800c230:	d804      	bhi.n	800c23c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c234:	699a      	ldr	r2, [r3, #24]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	e089      	b.n	800c350 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	2b01      	cmp	r3, #1
 800c246:	d128      	bne.n	800c29a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c248:	2302      	movs	r3, #2
 800c24a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c250:	f107 0314 	add.w	r3, r7, #20
 800c254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c256:	4618      	mov	r0, r3
 800c258:	f7fd fabd 	bl	80097d6 <get_fat>
 800c25c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c264:	d103      	bne.n	800c26e <f_getfree+0x7c>
 800c266:	2301      	movs	r3, #1
 800c268:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c26c:	e063      	b.n	800c336 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	2b01      	cmp	r3, #1
 800c272:	d103      	bne.n	800c27c <f_getfree+0x8a>
 800c274:	2302      	movs	r3, #2
 800c276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c27a:	e05c      	b.n	800c336 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d102      	bne.n	800c288 <f_getfree+0x96>
 800c282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c284:	3301      	adds	r3, #1
 800c286:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800c288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c28a:	3301      	adds	r3, #1
 800c28c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	69db      	ldr	r3, [r3, #28]
 800c292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c294:	429a      	cmp	r2, r3
 800c296:	d3db      	bcc.n	800c250 <f_getfree+0x5e>
 800c298:	e04d      	b.n	800c336 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	69db      	ldr	r3, [r3, #28]
 800c29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800c2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d113      	bne.n	800c2dc <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c2b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	63ba      	str	r2, [r7, #56]	; 0x38
 800c2bc:	4619      	mov	r1, r3
 800c2be:	f7fd f9cd 	bl	800965c <move_window>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800c2c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d131      	bne.n	800c334 <f_getfree+0x142>
							p = fs->win;
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	3338      	adds	r3, #56	; 0x38
 800c2d4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	899b      	ldrh	r3, [r3, #12]
 800c2da:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d10f      	bne.n	800c304 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c2e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2e6:	f7fc ff09 	bl	80090fc <ld_word>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d102      	bne.n	800c2f6 <f_getfree+0x104>
 800c2f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	3302      	adds	r3, #2
 800c2fa:	633b      	str	r3, [r7, #48]	; 0x30
 800c2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fe:	3b02      	subs	r3, #2
 800c300:	637b      	str	r3, [r7, #52]	; 0x34
 800c302:	e010      	b.n	800c326 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c306:	f7fc ff11 	bl	800912c <ld_dword>
 800c30a:	4603      	mov	r3, r0
 800c30c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d102      	bne.n	800c31a <f_getfree+0x128>
 800c314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c316:	3301      	adds	r3, #1
 800c318:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	3304      	adds	r3, #4
 800c31e:	633b      	str	r3, [r7, #48]	; 0x30
 800c320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c322:	3b04      	subs	r3, #4
 800c324:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800c326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c328:	3b01      	subs	r3, #1
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1bd      	bne.n	800c2ae <f_getfree+0xbc>
 800c332:	e000      	b.n	800c336 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c334:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c33a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c340:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c344:	791a      	ldrb	r2, [r3, #4]
 800c346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c348:	f042 0201 	orr.w	r2, r2, #1
 800c34c:	b2d2      	uxtb	r2, r2
 800c34e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c350:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c354:	4618      	mov	r0, r3
 800c356:	3748      	adds	r7, #72	; 0x48
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b098      	sub	sp, #96	; 0x60
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c364:	f107 010c 	add.w	r1, r7, #12
 800c368:	1d3b      	adds	r3, r7, #4
 800c36a:	2202      	movs	r2, #2
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fe ff25 	bl	800b1bc <find_volume>
 800c372:	4603      	mov	r3, r0
 800c374:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800c37c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c380:	2b00      	cmp	r3, #0
 800c382:	f040 80f2 	bne.w	800c56a <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	f107 0310 	add.w	r3, r7, #16
 800c38c:	4611      	mov	r1, r2
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fe04 	bl	800af9c <follow_path>
 800c394:	4603      	mov	r3, r0
 800c396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800c39a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d102      	bne.n	800c3a8 <f_mkdir+0x4c>
 800c3a2:	2308      	movs	r3, #8
 800c3a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800c3a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	f040 80dc 	bne.w	800c56a <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800c3b2:	f107 0310 	add.w	r3, r7, #16
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fd fc58 	bl	8009c6e <create_chain>
 800c3be:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	895b      	ldrh	r3, [r3, #10]
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	899b      	ldrh	r3, [r3, #12]
 800c3ca:	fb03 f302 	mul.w	r3, r3, r2
 800c3ce:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800c3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d102      	bne.n	800c3e2 <f_mkdir+0x86>
 800c3dc:	2307      	movs	r3, #7
 800c3de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800c3e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d102      	bne.n	800c3ee <f_mkdir+0x92>
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f4:	d102      	bne.n	800c3fc <f_mkdir+0xa0>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800c3fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c400:	2b00      	cmp	r3, #0
 800c402:	d106      	bne.n	800c412 <f_mkdir+0xb6>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	4618      	mov	r0, r3
 800c408:	f7fd f8e4 	bl	80095d4 <sync_window>
 800c40c:	4603      	mov	r3, r0
 800c40e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800c412:	f7fa fbad 	bl	8006b70 <get_fattime>
 800c416:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800c418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d16c      	bne.n	800c4fa <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c424:	4618      	mov	r0, r3
 800c426:	f7fd f9b7 	bl	8009798 <clust2sect>
 800c42a:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3338      	adds	r3, #56	; 0x38
 800c430:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	899b      	ldrh	r3, [r3, #12]
 800c436:	461a      	mov	r2, r3
 800c438:	2100      	movs	r1, #0
 800c43a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c43c:	f7fc ff01 	bl	8009242 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800c440:	220b      	movs	r2, #11
 800c442:	2120      	movs	r1, #32
 800c444:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c446:	f7fc fefc 	bl	8009242 <mem_set>
					dir[DIR_Name] = '.';
 800c44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c44c:	222e      	movs	r2, #46	; 0x2e
 800c44e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800c450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c452:	330b      	adds	r3, #11
 800c454:	2210      	movs	r2, #16
 800c456:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800c458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c45a:	3316      	adds	r3, #22
 800c45c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fc fea2 	bl	80091a8 <st_dword>
					st_clust(fs, dir, dcl);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c468:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fd fe94 	bl	800a198 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800c470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c472:	3320      	adds	r3, #32
 800c474:	2220      	movs	r2, #32
 800c476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fc fec1 	bl	8009200 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800c47e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c480:	3321      	adds	r3, #33	; 0x21
 800c482:	222e      	movs	r2, #46	; 0x2e
 800c484:	701a      	strb	r2, [r3, #0]
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	2b03      	cmp	r3, #3
 800c490:	d106      	bne.n	800c4a0 <f_mkdir+0x144>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c496:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c498:	429a      	cmp	r2, r3
 800c49a:	d101      	bne.n	800c4a0 <f_mkdir+0x144>
 800c49c:	2300      	movs	r3, #0
 800c49e:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4a4:	3320      	adds	r3, #32
 800c4a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	f7fd fe75 	bl	800a198 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	895b      	ldrh	r3, [r3, #10]
 800c4b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4b4:	e01c      	b.n	800c4f0 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800c4b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4b8:	1c5a      	adds	r2, r3, #1
 800c4ba:	657a      	str	r2, [r7, #84]	; 0x54
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fd f883 	bl	80095d4 <sync_window>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800c4d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10d      	bne.n	800c4f8 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	899b      	ldrh	r3, [r3, #12]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c4e6:	f7fc feac 	bl	8009242 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c4ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1df      	bne.n	800c4b6 <f_mkdir+0x15a>
 800c4f6:	e000      	b.n	800c4fa <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800c4f8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800c4fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d107      	bne.n	800c512 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800c502:	f107 0310 	add.w	r3, r7, #16
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe f9ba 	bl	800a880 <dir_register>
 800c50c:	4603      	mov	r3, r0
 800c50e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800c512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c516:	2b00      	cmp	r3, #0
 800c518:	d120      	bne.n	800c55c <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800c51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c520:	3316      	adds	r3, #22
 800c522:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c524:	4618      	mov	r0, r3
 800c526:	f7fc fe3f 	bl	80091a8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c52e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c530:	4618      	mov	r0, r3
 800c532:	f7fd fe31 	bl	800a198 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800c536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c538:	330b      	adds	r3, #11
 800c53a:	2210      	movs	r2, #16
 800c53c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2201      	movs	r2, #1
 800c542:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800c544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10e      	bne.n	800c56a <f_mkdir+0x20e>
					res = sync_fs(fs);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fd f8b2 	bl	80096b8 <sync_fs>
 800c554:	4603      	mov	r3, r0
 800c556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c55a:	e006      	b.n	800c56a <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800c55c:	f107 0310 	add.w	r3, r7, #16
 800c560:	2200      	movs	r2, #0
 800c562:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c564:	4618      	mov	r0, r3
 800c566:	f7fd fb1d 	bl	8009ba4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c56a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3760      	adds	r7, #96	; 0x60
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c578:	b480      	push	{r7}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	4613      	mov	r3, r2
 800c584:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c586:	2301      	movs	r3, #1
 800c588:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c58e:	4b1f      	ldr	r3, [pc, #124]	; (800c60c <FATFS_LinkDriverEx+0x94>)
 800c590:	7a5b      	ldrb	r3, [r3, #9]
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d131      	bne.n	800c5fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c598:	4b1c      	ldr	r3, [pc, #112]	; (800c60c <FATFS_LinkDriverEx+0x94>)
 800c59a:	7a5b      	ldrb	r3, [r3, #9]
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	461a      	mov	r2, r3
 800c5a0:	4b1a      	ldr	r3, [pc, #104]	; (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c5a6:	4b19      	ldr	r3, [pc, #100]	; (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5a8:	7a5b      	ldrb	r3, [r3, #9]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	4a17      	ldr	r2, [pc, #92]	; (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c5b6:	4b15      	ldr	r3, [pc, #84]	; (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5b8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4b13      	ldr	r3, [pc, #76]	; (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5c0:	4413      	add	r3, r2
 800c5c2:	79fa      	ldrb	r2, [r7, #7]
 800c5c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c5c6:	4b11      	ldr	r3, [pc, #68]	; (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5c8:	7a5b      	ldrb	r3, [r3, #9]
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	b2d1      	uxtb	r1, r2
 800c5d0:	4a0e      	ldr	r2, [pc, #56]	; (800c60c <FATFS_LinkDriverEx+0x94>)
 800c5d2:	7251      	strb	r1, [r2, #9]
 800c5d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c5d6:	7dbb      	ldrb	r3, [r7, #22]
 800c5d8:	3330      	adds	r3, #48	; 0x30
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	223a      	movs	r2, #58	; 0x3a
 800c5e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	3302      	adds	r3, #2
 800c5ec:	222f      	movs	r2, #47	; 0x2f
 800c5ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	3303      	adds	r3, #3
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	371c      	adds	r7, #28
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	200002e0 	.word	0x200002e0

0800c610 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c61a:	2200      	movs	r2, #0
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff ffaa 	bl	800c578 <FATFS_LinkDriverEx>
 800c624:	4603      	mov	r3, r0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
	...

0800c630 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c634:	2201      	movs	r2, #1
 800c636:	490e      	ldr	r1, [pc, #56]	; (800c670 <MX_USB_HOST_Init+0x40>)
 800c638:	480e      	ldr	r0, [pc, #56]	; (800c674 <MX_USB_HOST_Init+0x44>)
 800c63a:	f7fa fbaf 	bl	8006d9c <USBH_Init>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d001      	beq.n	800c648 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c644:	f7f4 fe28 	bl	8001298 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c648:	490b      	ldr	r1, [pc, #44]	; (800c678 <MX_USB_HOST_Init+0x48>)
 800c64a:	480a      	ldr	r0, [pc, #40]	; (800c674 <MX_USB_HOST_Init+0x44>)
 800c64c:	f7fa fc34 	bl	8006eb8 <USBH_RegisterClass>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c656:	f7f4 fe1f 	bl	8001298 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c65a:	4806      	ldr	r0, [pc, #24]	; (800c674 <MX_USB_HOST_Init+0x44>)
 800c65c:	f7fa fcb8 	bl	8006fd0 <USBH_Start>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d001      	beq.n	800c66a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c666:	f7f4 fe17 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c66a:	bf00      	nop
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	0800c67d 	.word	0x0800c67d
 800c674:	2000252c 	.word	0x2000252c
 800c678:	20000010 	.word	0x20000010

0800c67c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	460b      	mov	r3, r1
 800c686:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c688:	78fb      	ldrb	r3, [r7, #3]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	2b04      	cmp	r3, #4
 800c68e:	d844      	bhi.n	800c71a <USBH_UserProcess+0x9e>
 800c690:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <USBH_UserProcess+0x1c>)
 800c692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c696:	bf00      	nop
 800c698:	0800c71b 	.word	0x0800c71b
 800c69c:	0800c6b9 	.word	0x0800c6b9
 800c6a0:	0800c71b 	.word	0x0800c71b
 800c6a4:	0800c713 	.word	0x0800c713
 800c6a8:	0800c6ad 	.word	0x0800c6ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c6ac:	4b1d      	ldr	r3, [pc, #116]	; (800c724 <USBH_UserProcess+0xa8>)
 800c6ae:	2203      	movs	r2, #3
 800c6b0:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800c6b2:	f7f4 f8cf 	bl	8000854 <Unmount_USB>
  break;
 800c6b6:	e031      	b.n	800c71c <USBH_UserProcess+0xa0>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c6b8:	4b1a      	ldr	r3, [pc, #104]	; (800c724 <USBH_UserProcess+0xa8>)
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	701a      	strb	r2, [r3, #0]

  Mount_USB();
 800c6be:	f7f4 f8a7 	bl	8000810 <Mount_USB>

  Check_USB_Details();   // check space details
 800c6c2:	f7f4 fc03 	bl	8000ecc <Check_USB_Details>

  Scan_USB("/");   // scan for files and directories
 800c6c6:	4818      	ldr	r0, [pc, #96]	; (800c728 <USBH_UserProcess+0xac>)
 800c6c8:	f7f4 f8e4 	bl	8000894 <Scan_USB>

  Create_File("/ROOTFILE.txt");
 800c6cc:	4817      	ldr	r0, [pc, #92]	; (800c72c <USBH_UserProcess+0xb0>)
 800c6ce:	f7f4 fa49 	bl	8000b64 <Create_File>
  Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 800c6d2:	4917      	ldr	r1, [pc, #92]	; (800c730 <USBH_UserProcess+0xb4>)
 800c6d4:	4815      	ldr	r0, [pc, #84]	; (800c72c <USBH_UserProcess+0xb0>)
 800c6d6:	f7f4 f981 	bl	80009dc <Write_File>

  Create_Dir("/DIR1");
 800c6da:	4816      	ldr	r0, [pc, #88]	; (800c734 <USBH_UserProcess+0xb8>)
 800c6dc:	f7f4 fbb6 	bl	8000e4c <Create_Dir>
  Create_File("/DIR1/DIR1FILE.txt");
 800c6e0:	4815      	ldr	r0, [pc, #84]	; (800c738 <USBH_UserProcess+0xbc>)
 800c6e2:	f7f4 fa3f 	bl	8000b64 <Create_File>
  Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 800c6e6:	4915      	ldr	r1, [pc, #84]	; (800c73c <USBH_UserProcess+0xc0>)
 800c6e8:	4813      	ldr	r0, [pc, #76]	; (800c738 <USBH_UserProcess+0xbc>)
 800c6ea:	f7f4 f977 	bl	80009dc <Write_File>

  Create_Dir("/DIR2");
 800c6ee:	4814      	ldr	r0, [pc, #80]	; (800c740 <USBH_UserProcess+0xc4>)
 800c6f0:	f7f4 fbac 	bl	8000e4c <Create_Dir>
  Create_Dir("/DIR2/SUBDIR1");
 800c6f4:	4813      	ldr	r0, [pc, #76]	; (800c744 <USBH_UserProcess+0xc8>)
 800c6f6:	f7f4 fba9 	bl	8000e4c <Create_Dir>
  Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 800c6fa:	4813      	ldr	r0, [pc, #76]	; (800c748 <USBH_UserProcess+0xcc>)
 800c6fc:	f7f4 fa32 	bl	8000b64 <Create_File>
  Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 800c700:	4912      	ldr	r1, [pc, #72]	; (800c74c <USBH_UserProcess+0xd0>)
 800c702:	4811      	ldr	r0, [pc, #68]	; (800c748 <USBH_UserProcess+0xcc>)
 800c704:	f7f4 f96a 	bl	80009dc <Write_File>

  Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 800c708:	4911      	ldr	r1, [pc, #68]	; (800c750 <USBH_UserProcess+0xd4>)
 800c70a:	4808      	ldr	r0, [pc, #32]	; (800c72c <USBH_UserProcess+0xb0>)
 800c70c:	f7f4 fac6 	bl	8000c9c <Update_File>
  break;
 800c710:	e004      	b.n	800c71c <USBH_UserProcess+0xa0>


  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c712:	4b04      	ldr	r3, [pc, #16]	; (800c724 <USBH_UserProcess+0xa8>)
 800c714:	2201      	movs	r2, #1
 800c716:	701a      	strb	r2, [r3, #0]
  break;
 800c718:	e000      	b.n	800c71c <USBH_UserProcess+0xa0>

  default:
  break;
 800c71a:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	200002ec 	.word	0x200002ec
 800c728:	0800d9f4 	.word	0x0800d9f4
 800c72c:	0800d9f8 	.word	0x0800d9f8
 800c730:	0800da08 	.word	0x0800da08
 800c734:	0800da2c 	.word	0x0800da2c
 800c738:	0800da34 	.word	0x0800da34
 800c73c:	0800da48 	.word	0x0800da48
 800c740:	0800da6c 	.word	0x0800da6c
 800c744:	0800da74 	.word	0x0800da74
 800c748:	0800da84 	.word	0x0800da84
 800c74c:	0800daa0 	.word	0x0800daa0
 800c750:	0800db04 	.word	0x0800db04

0800c754 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b08a      	sub	sp, #40	; 0x28
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c75c:	f107 0314 	add.w	r3, r7, #20
 800c760:	2200      	movs	r2, #0
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	605a      	str	r2, [r3, #4]
 800c766:	609a      	str	r2, [r3, #8]
 800c768:	60da      	str	r2, [r3, #12]
 800c76a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a1e      	ldr	r2, [pc, #120]	; (800c7ec <HAL_HCD_MspInit+0x98>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d136      	bne.n	800c7e4 <HAL_HCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c776:	4b1e      	ldr	r3, [pc, #120]	; (800c7f0 <HAL_HCD_MspInit+0x9c>)
 800c778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c77c:	4a1c      	ldr	r2, [pc, #112]	; (800c7f0 <HAL_HCD_MspInit+0x9c>)
 800c77e:	f043 0301 	orr.w	r3, r3, #1
 800c782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c786:	4b1a      	ldr	r3, [pc, #104]	; (800c7f0 <HAL_HCD_MspInit+0x9c>)
 800c788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	613b      	str	r3, [r7, #16]
 800c792:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800c794:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c79a:	2302      	movs	r3, #2
 800c79c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800c7a6:	230a      	movs	r3, #10
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7aa:	f107 0314 	add.w	r3, r7, #20
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	4810      	ldr	r0, [pc, #64]	; (800c7f4 <HAL_HCD_MspInit+0xa0>)
 800c7b2:	f7f5 f841 	bl	8001838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c7b6:	4b0e      	ldr	r3, [pc, #56]	; (800c7f0 <HAL_HCD_MspInit+0x9c>)
 800c7b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c7bc:	4a0c      	ldr	r2, [pc, #48]	; (800c7f0 <HAL_HCD_MspInit+0x9c>)
 800c7be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c7c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c7c6:	4b0a      	ldr	r3, [pc, #40]	; (800c7f0 <HAL_HCD_MspInit+0x9c>)
 800c7c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c7cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d0:	60fb      	str	r3, [r7, #12]
 800c7d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	2065      	movs	r0, #101	; 0x65
 800c7da:	f7f4 fff8 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c7de:	2065      	movs	r0, #101	; 0x65
 800c7e0:	f7f5 f80f 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c7e4:	bf00      	nop
 800c7e6:	3728      	adds	r7, #40	; 0x28
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	40080000 	.word	0x40080000
 800c7f0:	58024400 	.word	0x58024400
 800c7f4:	58020000 	.word	0x58020000

0800c7f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c806:	4618      	mov	r0, r3
 800c808:	f7fa fc01 	bl	800700e <USBH_LL_IncTimer>
}
 800c80c:	bf00      	nop
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c822:	4618      	mov	r0, r3
 800c824:	f7fa fc39 	bl	800709a <USBH_LL_Connect>
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fa fc42 	bl	80070c8 <USBH_LL_Disconnect>
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	70fb      	strb	r3, [r7, #3]
 800c858:	4613      	mov	r3, r2
 800c85a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c85c:	bf00      	nop
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c876:	4618      	mov	r0, r3
 800c878:	f7fa fbf3 	bl	8007062 <USBH_LL_PortEnabled>
}
 800c87c:	bf00      	nop
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c892:	4618      	mov	r0, r3
 800c894:	f7fa fbf3 	bl	800707e <USBH_LL_PortDisabled>
}
 800c898:	bf00      	nop
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d129      	bne.n	800c906 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c8b2:	4a17      	ldr	r2, [pc, #92]	; (800c910 <USBH_LL_Init+0x70>)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a14      	ldr	r2, [pc, #80]	; (800c910 <USBH_LL_Init+0x70>)
 800c8be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c8c2:	4b13      	ldr	r3, [pc, #76]	; (800c910 <USBH_LL_Init+0x70>)
 800c8c4:	4a13      	ldr	r2, [pc, #76]	; (800c914 <USBH_LL_Init+0x74>)
 800c8c6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800c8c8:	4b11      	ldr	r3, [pc, #68]	; (800c910 <USBH_LL_Init+0x70>)
 800c8ca:	2210      	movs	r2, #16
 800c8cc:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c8ce:	4b10      	ldr	r3, [pc, #64]	; (800c910 <USBH_LL_Init+0x70>)
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c8d4:	4b0e      	ldr	r3, [pc, #56]	; (800c910 <USBH_LL_Init+0x70>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c8da:	4b0d      	ldr	r3, [pc, #52]	; (800c910 <USBH_LL_Init+0x70>)
 800c8dc:	2202      	movs	r2, #2
 800c8de:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c8e0:	4b0b      	ldr	r3, [pc, #44]	; (800c910 <USBH_LL_Init+0x70>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c8e6:	480a      	ldr	r0, [pc, #40]	; (800c910 <USBH_LL_Init+0x70>)
 800c8e8:	f7f5 f96f 	bl	8001bca <HAL_HCD_Init>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d001      	beq.n	800c8f6 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 800c8f2:	f7f4 fcd1 	bl	8001298 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c8f6:	4806      	ldr	r0, [pc, #24]	; (800c910 <USBH_LL_Init+0x70>)
 800c8f8:	f7f5 fd64 	bl	80023c4 <HAL_HCD_GetCurrentFrame>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	4619      	mov	r1, r3
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7fa fb75 	bl	8006ff0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	20002904 	.word	0x20002904
 800c914:	40080000 	.word	0x40080000

0800c918 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c920:	2300      	movs	r3, #0
 800c922:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c924:	2300      	movs	r3, #0
 800c926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f5 fcde 	bl	80022f0 <HAL_HCD_Start>
 800c934:	4603      	mov	r3, r0
 800c936:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 f93c 	bl	800cbb8 <USBH_Get_USB_Status>
 800c940:	4603      	mov	r3, r0
 800c942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c944:	7bbb      	ldrb	r3, [r7, #14]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c964:	4618      	mov	r0, r3
 800c966:	f7f5 fce6 	bl	8002336 <HAL_HCD_Stop>
 800c96a:	4603      	mov	r3, r0
 800c96c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
 800c970:	4618      	mov	r0, r3
 800c972:	f000 f921 	bl	800cbb8 <USBH_Get_USB_Status>
 800c976:	4603      	mov	r3, r0
 800c978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c97a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c996:	78fa      	ldrb	r2, [r7, #3]
 800c998:	4611      	mov	r1, r2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f5 fcfd 	bl	800239a <HAL_HCD_HC_GetXferCount>
 800c9a0:	4603      	mov	r3, r0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c9aa:	b590      	push	{r4, r7, lr}
 800c9ac:	b089      	sub	sp, #36	; 0x24
 800c9ae:	af04      	add	r7, sp, #16
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	4608      	mov	r0, r1
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	70fb      	strb	r3, [r7, #3]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	70bb      	strb	r3, [r7, #2]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c9d2:	787c      	ldrb	r4, [r7, #1]
 800c9d4:	78ba      	ldrb	r2, [r7, #2]
 800c9d6:	78f9      	ldrb	r1, [r7, #3]
 800c9d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9da:	9302      	str	r3, [sp, #8]
 800c9dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c9e0:	9301      	str	r3, [sp, #4]
 800c9e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	4623      	mov	r3, r4
 800c9ea:	f7f5 f950 	bl	8001c8e <HAL_HCD_HC_Init>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 f8df 	bl	800cbb8 <USBH_Get_USB_Status>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd90      	pop	{r4, r7, pc}

0800ca08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	460b      	mov	r3, r1
 800ca12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca22:	78fa      	ldrb	r2, [r7, #3]
 800ca24:	4611      	mov	r1, r2
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7f5 f9c9 	bl	8001dbe <HAL_HCD_HC_Halt>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca30:	7bfb      	ldrb	r3, [r7, #15]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f000 f8c0 	bl	800cbb8 <USBH_Get_USB_Status>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ca46:	b590      	push	{r4, r7, lr}
 800ca48:	b089      	sub	sp, #36	; 0x24
 800ca4a:	af04      	add	r7, sp, #16
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	4608      	mov	r0, r1
 800ca50:	4611      	mov	r1, r2
 800ca52:	461a      	mov	r2, r3
 800ca54:	4603      	mov	r3, r0
 800ca56:	70fb      	strb	r3, [r7, #3]
 800ca58:	460b      	mov	r3, r1
 800ca5a:	70bb      	strb	r3, [r7, #2]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ca6e:	787c      	ldrb	r4, [r7, #1]
 800ca70:	78ba      	ldrb	r2, [r7, #2]
 800ca72:	78f9      	ldrb	r1, [r7, #3]
 800ca74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca78:	9303      	str	r3, [sp, #12]
 800ca7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca7c:	9302      	str	r3, [sp, #8]
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	9301      	str	r3, [sp, #4]
 800ca82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	4623      	mov	r3, r4
 800ca8a:	f7f5 f9bb 	bl	8001e04 <HAL_HCD_HC_SubmitRequest>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 f88f 	bl	800cbb8 <USBH_Get_USB_Status>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd90      	pop	{r4, r7, pc}

0800caa8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800caba:	78fa      	ldrb	r2, [r7, #3]
 800cabc:	4611      	mov	r1, r2
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7f5 fc56 	bl	8002370 <HAL_HCD_HC_GetURBState>
 800cac4:	4603      	mov	r3, r0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b082      	sub	sp, #8
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	460b      	mov	r3, r1
 800cad8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800cada:	20c8      	movs	r0, #200	; 0xc8
 800cadc:	f7f4 fd6e 	bl	80015bc <HAL_Delay>
  return USBH_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800caea:	b480      	push	{r7}
 800caec:	b085      	sub	sp, #20
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	460b      	mov	r3, r1
 800caf4:	70fb      	strb	r3, [r7, #3]
 800caf6:	4613      	mov	r3, r2
 800caf8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb00:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cb02:	78fa      	ldrb	r2, [r7, #3]
 800cb04:	68f9      	ldr	r1, [r7, #12]
 800cb06:	4613      	mov	r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	440b      	add	r3, r1
 800cb10:	333b      	adds	r3, #59	; 0x3b
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00a      	beq.n	800cb2e <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cb18:	78fa      	ldrb	r2, [r7, #3]
 800cb1a:	68f9      	ldr	r1, [r7, #12]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	440b      	add	r3, r1
 800cb26:	3350      	adds	r3, #80	; 0x50
 800cb28:	78ba      	ldrb	r2, [r7, #2]
 800cb2a:	701a      	strb	r2, [r3, #0]
 800cb2c:	e009      	b.n	800cb42 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cb2e:	78fa      	ldrb	r2, [r7, #3]
 800cb30:	68f9      	ldr	r1, [r7, #12]
 800cb32:	4613      	mov	r3, r2
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	00db      	lsls	r3, r3, #3
 800cb3a:	440b      	add	r3, r1
 800cb3c:	3351      	adds	r3, #81	; 0x51
 800cb3e:	78ba      	ldrb	r2, [r7, #2]
 800cb40:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb66:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800cb68:	78fa      	ldrb	r2, [r7, #3]
 800cb6a:	68b9      	ldr	r1, [r7, #8]
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4413      	add	r3, r2
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	440b      	add	r3, r1
 800cb76:	333b      	adds	r3, #59	; 0x3b
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00a      	beq.n	800cb94 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800cb7e:	78fa      	ldrb	r2, [r7, #3]
 800cb80:	68b9      	ldr	r1, [r7, #8]
 800cb82:	4613      	mov	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	440b      	add	r3, r1
 800cb8c:	3350      	adds	r3, #80	; 0x50
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	73fb      	strb	r3, [r7, #15]
 800cb92:	e009      	b.n	800cba8 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800cb94:	78fa      	ldrb	r2, [r7, #3]
 800cb96:	68b9      	ldr	r1, [r7, #8]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	4413      	add	r3, r2
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	440b      	add	r3, r1
 800cba2:	3351      	adds	r3, #81	; 0x51
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800cba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
	...

0800cbb8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cbc6:	79fb      	ldrb	r3, [r7, #7]
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	d817      	bhi.n	800cbfc <USBH_Get_USB_Status+0x44>
 800cbcc:	a201      	add	r2, pc, #4	; (adr r2, 800cbd4 <USBH_Get_USB_Status+0x1c>)
 800cbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd2:	bf00      	nop
 800cbd4:	0800cbe5 	.word	0x0800cbe5
 800cbd8:	0800cbeb 	.word	0x0800cbeb
 800cbdc:	0800cbf1 	.word	0x0800cbf1
 800cbe0:	0800cbf7 	.word	0x0800cbf7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe8:	e00b      	b.n	800cc02 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cbea:	2302      	movs	r3, #2
 800cbec:	73fb      	strb	r3, [r7, #15]
    break;
 800cbee:	e008      	b.n	800cc02 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbf4:	e005      	b.n	800cc02 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cbf6:	2302      	movs	r3, #2
 800cbf8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbfa:	e002      	b.n	800cc02 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	73fb      	strb	r3, [r7, #15]
    break;
 800cc00:	bf00      	nop
  }
  return usb_status;
 800cc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <__errno>:
 800cc10:	4b01      	ldr	r3, [pc, #4]	; (800cc18 <__errno+0x8>)
 800cc12:	6818      	ldr	r0, [r3, #0]
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	20000030 	.word	0x20000030

0800cc1c <__libc_init_array>:
 800cc1c:	b570      	push	{r4, r5, r6, lr}
 800cc1e:	4e0d      	ldr	r6, [pc, #52]	; (800cc54 <__libc_init_array+0x38>)
 800cc20:	4c0d      	ldr	r4, [pc, #52]	; (800cc58 <__libc_init_array+0x3c>)
 800cc22:	1ba4      	subs	r4, r4, r6
 800cc24:	10a4      	asrs	r4, r4, #2
 800cc26:	2500      	movs	r5, #0
 800cc28:	42a5      	cmp	r5, r4
 800cc2a:	d109      	bne.n	800cc40 <__libc_init_array+0x24>
 800cc2c:	4e0b      	ldr	r6, [pc, #44]	; (800cc5c <__libc_init_array+0x40>)
 800cc2e:	4c0c      	ldr	r4, [pc, #48]	; (800cc60 <__libc_init_array+0x44>)
 800cc30:	f000 fc40 	bl	800d4b4 <_init>
 800cc34:	1ba4      	subs	r4, r4, r6
 800cc36:	10a4      	asrs	r4, r4, #2
 800cc38:	2500      	movs	r5, #0
 800cc3a:	42a5      	cmp	r5, r4
 800cc3c:	d105      	bne.n	800cc4a <__libc_init_array+0x2e>
 800cc3e:	bd70      	pop	{r4, r5, r6, pc}
 800cc40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc44:	4798      	blx	r3
 800cc46:	3501      	adds	r5, #1
 800cc48:	e7ee      	b.n	800cc28 <__libc_init_array+0xc>
 800cc4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc4e:	4798      	blx	r3
 800cc50:	3501      	adds	r5, #1
 800cc52:	e7f2      	b.n	800cc3a <__libc_init_array+0x1e>
 800cc54:	0800dff0 	.word	0x0800dff0
 800cc58:	0800dff0 	.word	0x0800dff0
 800cc5c:	0800dff0 	.word	0x0800dff0
 800cc60:	0800dff4 	.word	0x0800dff4

0800cc64 <malloc>:
 800cc64:	4b02      	ldr	r3, [pc, #8]	; (800cc70 <malloc+0xc>)
 800cc66:	4601      	mov	r1, r0
 800cc68:	6818      	ldr	r0, [r3, #0]
 800cc6a:	f000 b86d 	b.w	800cd48 <_malloc_r>
 800cc6e:	bf00      	nop
 800cc70:	20000030 	.word	0x20000030

0800cc74 <free>:
 800cc74:	4b02      	ldr	r3, [pc, #8]	; (800cc80 <free+0xc>)
 800cc76:	4601      	mov	r1, r0
 800cc78:	6818      	ldr	r0, [r3, #0]
 800cc7a:	f000 b817 	b.w	800ccac <_free_r>
 800cc7e:	bf00      	nop
 800cc80:	20000030 	.word	0x20000030

0800cc84 <memcpy>:
 800cc84:	b510      	push	{r4, lr}
 800cc86:	1e43      	subs	r3, r0, #1
 800cc88:	440a      	add	r2, r1
 800cc8a:	4291      	cmp	r1, r2
 800cc8c:	d100      	bne.n	800cc90 <memcpy+0xc>
 800cc8e:	bd10      	pop	{r4, pc}
 800cc90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc98:	e7f7      	b.n	800cc8a <memcpy+0x6>

0800cc9a <memset>:
 800cc9a:	4402      	add	r2, r0
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d100      	bne.n	800cca4 <memset+0xa>
 800cca2:	4770      	bx	lr
 800cca4:	f803 1b01 	strb.w	r1, [r3], #1
 800cca8:	e7f9      	b.n	800cc9e <memset+0x4>
	...

0800ccac <_free_r>:
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	4605      	mov	r5, r0
 800ccb0:	2900      	cmp	r1, #0
 800ccb2:	d045      	beq.n	800cd40 <_free_r+0x94>
 800ccb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccb8:	1f0c      	subs	r4, r1, #4
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	bfb8      	it	lt
 800ccbe:	18e4      	addlt	r4, r4, r3
 800ccc0:	f000 f8d4 	bl	800ce6c <__malloc_lock>
 800ccc4:	4a1f      	ldr	r2, [pc, #124]	; (800cd44 <_free_r+0x98>)
 800ccc6:	6813      	ldr	r3, [r2, #0]
 800ccc8:	4610      	mov	r0, r2
 800ccca:	b933      	cbnz	r3, 800ccda <_free_r+0x2e>
 800cccc:	6063      	str	r3, [r4, #4]
 800ccce:	6014      	str	r4, [r2, #0]
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccd6:	f000 b8ca 	b.w	800ce6e <__malloc_unlock>
 800ccda:	42a3      	cmp	r3, r4
 800ccdc:	d90c      	bls.n	800ccf8 <_free_r+0x4c>
 800ccde:	6821      	ldr	r1, [r4, #0]
 800cce0:	1862      	adds	r2, r4, r1
 800cce2:	4293      	cmp	r3, r2
 800cce4:	bf04      	itt	eq
 800cce6:	681a      	ldreq	r2, [r3, #0]
 800cce8:	685b      	ldreq	r3, [r3, #4]
 800ccea:	6063      	str	r3, [r4, #4]
 800ccec:	bf04      	itt	eq
 800ccee:	1852      	addeq	r2, r2, r1
 800ccf0:	6022      	streq	r2, [r4, #0]
 800ccf2:	6004      	str	r4, [r0, #0]
 800ccf4:	e7ec      	b.n	800ccd0 <_free_r+0x24>
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	685a      	ldr	r2, [r3, #4]
 800ccfa:	b10a      	cbz	r2, 800cd00 <_free_r+0x54>
 800ccfc:	42a2      	cmp	r2, r4
 800ccfe:	d9fa      	bls.n	800ccf6 <_free_r+0x4a>
 800cd00:	6819      	ldr	r1, [r3, #0]
 800cd02:	1858      	adds	r0, r3, r1
 800cd04:	42a0      	cmp	r0, r4
 800cd06:	d10b      	bne.n	800cd20 <_free_r+0x74>
 800cd08:	6820      	ldr	r0, [r4, #0]
 800cd0a:	4401      	add	r1, r0
 800cd0c:	1858      	adds	r0, r3, r1
 800cd0e:	4282      	cmp	r2, r0
 800cd10:	6019      	str	r1, [r3, #0]
 800cd12:	d1dd      	bne.n	800ccd0 <_free_r+0x24>
 800cd14:	6810      	ldr	r0, [r2, #0]
 800cd16:	6852      	ldr	r2, [r2, #4]
 800cd18:	605a      	str	r2, [r3, #4]
 800cd1a:	4401      	add	r1, r0
 800cd1c:	6019      	str	r1, [r3, #0]
 800cd1e:	e7d7      	b.n	800ccd0 <_free_r+0x24>
 800cd20:	d902      	bls.n	800cd28 <_free_r+0x7c>
 800cd22:	230c      	movs	r3, #12
 800cd24:	602b      	str	r3, [r5, #0]
 800cd26:	e7d3      	b.n	800ccd0 <_free_r+0x24>
 800cd28:	6820      	ldr	r0, [r4, #0]
 800cd2a:	1821      	adds	r1, r4, r0
 800cd2c:	428a      	cmp	r2, r1
 800cd2e:	bf04      	itt	eq
 800cd30:	6811      	ldreq	r1, [r2, #0]
 800cd32:	6852      	ldreq	r2, [r2, #4]
 800cd34:	6062      	str	r2, [r4, #4]
 800cd36:	bf04      	itt	eq
 800cd38:	1809      	addeq	r1, r1, r0
 800cd3a:	6021      	streq	r1, [r4, #0]
 800cd3c:	605c      	str	r4, [r3, #4]
 800cd3e:	e7c7      	b.n	800ccd0 <_free_r+0x24>
 800cd40:	bd38      	pop	{r3, r4, r5, pc}
 800cd42:	bf00      	nop
 800cd44:	200002f0 	.word	0x200002f0

0800cd48 <_malloc_r>:
 800cd48:	b570      	push	{r4, r5, r6, lr}
 800cd4a:	1ccd      	adds	r5, r1, #3
 800cd4c:	f025 0503 	bic.w	r5, r5, #3
 800cd50:	3508      	adds	r5, #8
 800cd52:	2d0c      	cmp	r5, #12
 800cd54:	bf38      	it	cc
 800cd56:	250c      	movcc	r5, #12
 800cd58:	2d00      	cmp	r5, #0
 800cd5a:	4606      	mov	r6, r0
 800cd5c:	db01      	blt.n	800cd62 <_malloc_r+0x1a>
 800cd5e:	42a9      	cmp	r1, r5
 800cd60:	d903      	bls.n	800cd6a <_malloc_r+0x22>
 800cd62:	230c      	movs	r3, #12
 800cd64:	6033      	str	r3, [r6, #0]
 800cd66:	2000      	movs	r0, #0
 800cd68:	bd70      	pop	{r4, r5, r6, pc}
 800cd6a:	f000 f87f 	bl	800ce6c <__malloc_lock>
 800cd6e:	4a21      	ldr	r2, [pc, #132]	; (800cdf4 <_malloc_r+0xac>)
 800cd70:	6814      	ldr	r4, [r2, #0]
 800cd72:	4621      	mov	r1, r4
 800cd74:	b991      	cbnz	r1, 800cd9c <_malloc_r+0x54>
 800cd76:	4c20      	ldr	r4, [pc, #128]	; (800cdf8 <_malloc_r+0xb0>)
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	b91b      	cbnz	r3, 800cd84 <_malloc_r+0x3c>
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	f000 f83d 	bl	800cdfc <_sbrk_r>
 800cd82:	6020      	str	r0, [r4, #0]
 800cd84:	4629      	mov	r1, r5
 800cd86:	4630      	mov	r0, r6
 800cd88:	f000 f838 	bl	800cdfc <_sbrk_r>
 800cd8c:	1c43      	adds	r3, r0, #1
 800cd8e:	d124      	bne.n	800cdda <_malloc_r+0x92>
 800cd90:	230c      	movs	r3, #12
 800cd92:	6033      	str	r3, [r6, #0]
 800cd94:	4630      	mov	r0, r6
 800cd96:	f000 f86a 	bl	800ce6e <__malloc_unlock>
 800cd9a:	e7e4      	b.n	800cd66 <_malloc_r+0x1e>
 800cd9c:	680b      	ldr	r3, [r1, #0]
 800cd9e:	1b5b      	subs	r3, r3, r5
 800cda0:	d418      	bmi.n	800cdd4 <_malloc_r+0x8c>
 800cda2:	2b0b      	cmp	r3, #11
 800cda4:	d90f      	bls.n	800cdc6 <_malloc_r+0x7e>
 800cda6:	600b      	str	r3, [r1, #0]
 800cda8:	50cd      	str	r5, [r1, r3]
 800cdaa:	18cc      	adds	r4, r1, r3
 800cdac:	4630      	mov	r0, r6
 800cdae:	f000 f85e 	bl	800ce6e <__malloc_unlock>
 800cdb2:	f104 000b 	add.w	r0, r4, #11
 800cdb6:	1d23      	adds	r3, r4, #4
 800cdb8:	f020 0007 	bic.w	r0, r0, #7
 800cdbc:	1ac3      	subs	r3, r0, r3
 800cdbe:	d0d3      	beq.n	800cd68 <_malloc_r+0x20>
 800cdc0:	425a      	negs	r2, r3
 800cdc2:	50e2      	str	r2, [r4, r3]
 800cdc4:	e7d0      	b.n	800cd68 <_malloc_r+0x20>
 800cdc6:	428c      	cmp	r4, r1
 800cdc8:	684b      	ldr	r3, [r1, #4]
 800cdca:	bf16      	itet	ne
 800cdcc:	6063      	strne	r3, [r4, #4]
 800cdce:	6013      	streq	r3, [r2, #0]
 800cdd0:	460c      	movne	r4, r1
 800cdd2:	e7eb      	b.n	800cdac <_malloc_r+0x64>
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	6849      	ldr	r1, [r1, #4]
 800cdd8:	e7cc      	b.n	800cd74 <_malloc_r+0x2c>
 800cdda:	1cc4      	adds	r4, r0, #3
 800cddc:	f024 0403 	bic.w	r4, r4, #3
 800cde0:	42a0      	cmp	r0, r4
 800cde2:	d005      	beq.n	800cdf0 <_malloc_r+0xa8>
 800cde4:	1a21      	subs	r1, r4, r0
 800cde6:	4630      	mov	r0, r6
 800cde8:	f000 f808 	bl	800cdfc <_sbrk_r>
 800cdec:	3001      	adds	r0, #1
 800cdee:	d0cf      	beq.n	800cd90 <_malloc_r+0x48>
 800cdf0:	6025      	str	r5, [r4, #0]
 800cdf2:	e7db      	b.n	800cdac <_malloc_r+0x64>
 800cdf4:	200002f0 	.word	0x200002f0
 800cdf8:	200002f4 	.word	0x200002f4

0800cdfc <_sbrk_r>:
 800cdfc:	b538      	push	{r3, r4, r5, lr}
 800cdfe:	4c06      	ldr	r4, [pc, #24]	; (800ce18 <_sbrk_r+0x1c>)
 800ce00:	2300      	movs	r3, #0
 800ce02:	4605      	mov	r5, r0
 800ce04:	4608      	mov	r0, r1
 800ce06:	6023      	str	r3, [r4, #0]
 800ce08:	f7f4 fae6 	bl	80013d8 <_sbrk>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_sbrk_r+0x1a>
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_sbrk_r+0x1a>
 800ce14:	602b      	str	r3, [r5, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	20002bc8 	.word	0x20002bc8

0800ce1c <siprintf>:
 800ce1c:	b40e      	push	{r1, r2, r3}
 800ce1e:	b500      	push	{lr}
 800ce20:	b09c      	sub	sp, #112	; 0x70
 800ce22:	ab1d      	add	r3, sp, #116	; 0x74
 800ce24:	9002      	str	r0, [sp, #8]
 800ce26:	9006      	str	r0, [sp, #24]
 800ce28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce2c:	4809      	ldr	r0, [pc, #36]	; (800ce54 <siprintf+0x38>)
 800ce2e:	9107      	str	r1, [sp, #28]
 800ce30:	9104      	str	r1, [sp, #16]
 800ce32:	4909      	ldr	r1, [pc, #36]	; (800ce58 <siprintf+0x3c>)
 800ce34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce38:	9105      	str	r1, [sp, #20]
 800ce3a:	6800      	ldr	r0, [r0, #0]
 800ce3c:	9301      	str	r3, [sp, #4]
 800ce3e:	a902      	add	r1, sp, #8
 800ce40:	f000 f870 	bl	800cf24 <_svfiprintf_r>
 800ce44:	9b02      	ldr	r3, [sp, #8]
 800ce46:	2200      	movs	r2, #0
 800ce48:	701a      	strb	r2, [r3, #0]
 800ce4a:	b01c      	add	sp, #112	; 0x70
 800ce4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce50:	b003      	add	sp, #12
 800ce52:	4770      	bx	lr
 800ce54:	20000030 	.word	0x20000030
 800ce58:	ffff0208 	.word	0xffff0208

0800ce5c <strcpy>:
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce62:	f803 2b01 	strb.w	r2, [r3], #1
 800ce66:	2a00      	cmp	r2, #0
 800ce68:	d1f9      	bne.n	800ce5e <strcpy+0x2>
 800ce6a:	4770      	bx	lr

0800ce6c <__malloc_lock>:
 800ce6c:	4770      	bx	lr

0800ce6e <__malloc_unlock>:
 800ce6e:	4770      	bx	lr

0800ce70 <__ssputs_r>:
 800ce70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce74:	688e      	ldr	r6, [r1, #8]
 800ce76:	429e      	cmp	r6, r3
 800ce78:	4682      	mov	sl, r0
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	4690      	mov	r8, r2
 800ce7e:	4699      	mov	r9, r3
 800ce80:	d837      	bhi.n	800cef2 <__ssputs_r+0x82>
 800ce82:	898a      	ldrh	r2, [r1, #12]
 800ce84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce88:	d031      	beq.n	800ceee <__ssputs_r+0x7e>
 800ce8a:	6825      	ldr	r5, [r4, #0]
 800ce8c:	6909      	ldr	r1, [r1, #16]
 800ce8e:	1a6f      	subs	r7, r5, r1
 800ce90:	6965      	ldr	r5, [r4, #20]
 800ce92:	2302      	movs	r3, #2
 800ce94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce98:	fb95 f5f3 	sdiv	r5, r5, r3
 800ce9c:	f109 0301 	add.w	r3, r9, #1
 800cea0:	443b      	add	r3, r7
 800cea2:	429d      	cmp	r5, r3
 800cea4:	bf38      	it	cc
 800cea6:	461d      	movcc	r5, r3
 800cea8:	0553      	lsls	r3, r2, #21
 800ceaa:	d530      	bpl.n	800cf0e <__ssputs_r+0x9e>
 800ceac:	4629      	mov	r1, r5
 800ceae:	f7ff ff4b 	bl	800cd48 <_malloc_r>
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	b950      	cbnz	r0, 800cecc <__ssputs_r+0x5c>
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	f8ca 3000 	str.w	r3, [sl]
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cec2:	81a3      	strh	r3, [r4, #12]
 800cec4:	f04f 30ff 	mov.w	r0, #4294967295
 800cec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cecc:	463a      	mov	r2, r7
 800cece:	6921      	ldr	r1, [r4, #16]
 800ced0:	f7ff fed8 	bl	800cc84 <memcpy>
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ceda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cede:	81a3      	strh	r3, [r4, #12]
 800cee0:	6126      	str	r6, [r4, #16]
 800cee2:	6165      	str	r5, [r4, #20]
 800cee4:	443e      	add	r6, r7
 800cee6:	1bed      	subs	r5, r5, r7
 800cee8:	6026      	str	r6, [r4, #0]
 800ceea:	60a5      	str	r5, [r4, #8]
 800ceec:	464e      	mov	r6, r9
 800ceee:	454e      	cmp	r6, r9
 800cef0:	d900      	bls.n	800cef4 <__ssputs_r+0x84>
 800cef2:	464e      	mov	r6, r9
 800cef4:	4632      	mov	r2, r6
 800cef6:	4641      	mov	r1, r8
 800cef8:	6820      	ldr	r0, [r4, #0]
 800cefa:	f000 fa93 	bl	800d424 <memmove>
 800cefe:	68a3      	ldr	r3, [r4, #8]
 800cf00:	1b9b      	subs	r3, r3, r6
 800cf02:	60a3      	str	r3, [r4, #8]
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	441e      	add	r6, r3
 800cf08:	6026      	str	r6, [r4, #0]
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	e7dc      	b.n	800cec8 <__ssputs_r+0x58>
 800cf0e:	462a      	mov	r2, r5
 800cf10:	f000 faa1 	bl	800d456 <_realloc_r>
 800cf14:	4606      	mov	r6, r0
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d1e2      	bne.n	800cee0 <__ssputs_r+0x70>
 800cf1a:	6921      	ldr	r1, [r4, #16]
 800cf1c:	4650      	mov	r0, sl
 800cf1e:	f7ff fec5 	bl	800ccac <_free_r>
 800cf22:	e7c8      	b.n	800ceb6 <__ssputs_r+0x46>

0800cf24 <_svfiprintf_r>:
 800cf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf28:	461d      	mov	r5, r3
 800cf2a:	898b      	ldrh	r3, [r1, #12]
 800cf2c:	061f      	lsls	r7, r3, #24
 800cf2e:	b09d      	sub	sp, #116	; 0x74
 800cf30:	4680      	mov	r8, r0
 800cf32:	460c      	mov	r4, r1
 800cf34:	4616      	mov	r6, r2
 800cf36:	d50f      	bpl.n	800cf58 <_svfiprintf_r+0x34>
 800cf38:	690b      	ldr	r3, [r1, #16]
 800cf3a:	b96b      	cbnz	r3, 800cf58 <_svfiprintf_r+0x34>
 800cf3c:	2140      	movs	r1, #64	; 0x40
 800cf3e:	f7ff ff03 	bl	800cd48 <_malloc_r>
 800cf42:	6020      	str	r0, [r4, #0]
 800cf44:	6120      	str	r0, [r4, #16]
 800cf46:	b928      	cbnz	r0, 800cf54 <_svfiprintf_r+0x30>
 800cf48:	230c      	movs	r3, #12
 800cf4a:	f8c8 3000 	str.w	r3, [r8]
 800cf4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf52:	e0c8      	b.n	800d0e6 <_svfiprintf_r+0x1c2>
 800cf54:	2340      	movs	r3, #64	; 0x40
 800cf56:	6163      	str	r3, [r4, #20]
 800cf58:	2300      	movs	r3, #0
 800cf5a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf5c:	2320      	movs	r3, #32
 800cf5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf62:	2330      	movs	r3, #48	; 0x30
 800cf64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf68:	9503      	str	r5, [sp, #12]
 800cf6a:	f04f 0b01 	mov.w	fp, #1
 800cf6e:	4637      	mov	r7, r6
 800cf70:	463d      	mov	r5, r7
 800cf72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cf76:	b10b      	cbz	r3, 800cf7c <_svfiprintf_r+0x58>
 800cf78:	2b25      	cmp	r3, #37	; 0x25
 800cf7a:	d13e      	bne.n	800cffa <_svfiprintf_r+0xd6>
 800cf7c:	ebb7 0a06 	subs.w	sl, r7, r6
 800cf80:	d00b      	beq.n	800cf9a <_svfiprintf_r+0x76>
 800cf82:	4653      	mov	r3, sl
 800cf84:	4632      	mov	r2, r6
 800cf86:	4621      	mov	r1, r4
 800cf88:	4640      	mov	r0, r8
 800cf8a:	f7ff ff71 	bl	800ce70 <__ssputs_r>
 800cf8e:	3001      	adds	r0, #1
 800cf90:	f000 80a4 	beq.w	800d0dc <_svfiprintf_r+0x1b8>
 800cf94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf96:	4453      	add	r3, sl
 800cf98:	9309      	str	r3, [sp, #36]	; 0x24
 800cf9a:	783b      	ldrb	r3, [r7, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 809d 	beq.w	800d0dc <_svfiprintf_r+0x1b8>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfac:	9304      	str	r3, [sp, #16]
 800cfae:	9307      	str	r3, [sp, #28]
 800cfb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfb4:	931a      	str	r3, [sp, #104]	; 0x68
 800cfb6:	462f      	mov	r7, r5
 800cfb8:	2205      	movs	r2, #5
 800cfba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cfbe:	4850      	ldr	r0, [pc, #320]	; (800d100 <_svfiprintf_r+0x1dc>)
 800cfc0:	f7f3 f9a6 	bl	8000310 <memchr>
 800cfc4:	9b04      	ldr	r3, [sp, #16]
 800cfc6:	b9d0      	cbnz	r0, 800cffe <_svfiprintf_r+0xda>
 800cfc8:	06d9      	lsls	r1, r3, #27
 800cfca:	bf44      	itt	mi
 800cfcc:	2220      	movmi	r2, #32
 800cfce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfd2:	071a      	lsls	r2, r3, #28
 800cfd4:	bf44      	itt	mi
 800cfd6:	222b      	movmi	r2, #43	; 0x2b
 800cfd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfdc:	782a      	ldrb	r2, [r5, #0]
 800cfde:	2a2a      	cmp	r2, #42	; 0x2a
 800cfe0:	d015      	beq.n	800d00e <_svfiprintf_r+0xea>
 800cfe2:	9a07      	ldr	r2, [sp, #28]
 800cfe4:	462f      	mov	r7, r5
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	250a      	movs	r5, #10
 800cfea:	4639      	mov	r1, r7
 800cfec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cff0:	3b30      	subs	r3, #48	; 0x30
 800cff2:	2b09      	cmp	r3, #9
 800cff4:	d94d      	bls.n	800d092 <_svfiprintf_r+0x16e>
 800cff6:	b1b8      	cbz	r0, 800d028 <_svfiprintf_r+0x104>
 800cff8:	e00f      	b.n	800d01a <_svfiprintf_r+0xf6>
 800cffa:	462f      	mov	r7, r5
 800cffc:	e7b8      	b.n	800cf70 <_svfiprintf_r+0x4c>
 800cffe:	4a40      	ldr	r2, [pc, #256]	; (800d100 <_svfiprintf_r+0x1dc>)
 800d000:	1a80      	subs	r0, r0, r2
 800d002:	fa0b f000 	lsl.w	r0, fp, r0
 800d006:	4318      	orrs	r0, r3
 800d008:	9004      	str	r0, [sp, #16]
 800d00a:	463d      	mov	r5, r7
 800d00c:	e7d3      	b.n	800cfb6 <_svfiprintf_r+0x92>
 800d00e:	9a03      	ldr	r2, [sp, #12]
 800d010:	1d11      	adds	r1, r2, #4
 800d012:	6812      	ldr	r2, [r2, #0]
 800d014:	9103      	str	r1, [sp, #12]
 800d016:	2a00      	cmp	r2, #0
 800d018:	db01      	blt.n	800d01e <_svfiprintf_r+0xfa>
 800d01a:	9207      	str	r2, [sp, #28]
 800d01c:	e004      	b.n	800d028 <_svfiprintf_r+0x104>
 800d01e:	4252      	negs	r2, r2
 800d020:	f043 0302 	orr.w	r3, r3, #2
 800d024:	9207      	str	r2, [sp, #28]
 800d026:	9304      	str	r3, [sp, #16]
 800d028:	783b      	ldrb	r3, [r7, #0]
 800d02a:	2b2e      	cmp	r3, #46	; 0x2e
 800d02c:	d10c      	bne.n	800d048 <_svfiprintf_r+0x124>
 800d02e:	787b      	ldrb	r3, [r7, #1]
 800d030:	2b2a      	cmp	r3, #42	; 0x2a
 800d032:	d133      	bne.n	800d09c <_svfiprintf_r+0x178>
 800d034:	9b03      	ldr	r3, [sp, #12]
 800d036:	1d1a      	adds	r2, r3, #4
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	9203      	str	r2, [sp, #12]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	bfb8      	it	lt
 800d040:	f04f 33ff 	movlt.w	r3, #4294967295
 800d044:	3702      	adds	r7, #2
 800d046:	9305      	str	r3, [sp, #20]
 800d048:	4d2e      	ldr	r5, [pc, #184]	; (800d104 <_svfiprintf_r+0x1e0>)
 800d04a:	7839      	ldrb	r1, [r7, #0]
 800d04c:	2203      	movs	r2, #3
 800d04e:	4628      	mov	r0, r5
 800d050:	f7f3 f95e 	bl	8000310 <memchr>
 800d054:	b138      	cbz	r0, 800d066 <_svfiprintf_r+0x142>
 800d056:	2340      	movs	r3, #64	; 0x40
 800d058:	1b40      	subs	r0, r0, r5
 800d05a:	fa03 f000 	lsl.w	r0, r3, r0
 800d05e:	9b04      	ldr	r3, [sp, #16]
 800d060:	4303      	orrs	r3, r0
 800d062:	3701      	adds	r7, #1
 800d064:	9304      	str	r3, [sp, #16]
 800d066:	7839      	ldrb	r1, [r7, #0]
 800d068:	4827      	ldr	r0, [pc, #156]	; (800d108 <_svfiprintf_r+0x1e4>)
 800d06a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d06e:	2206      	movs	r2, #6
 800d070:	1c7e      	adds	r6, r7, #1
 800d072:	f7f3 f94d 	bl	8000310 <memchr>
 800d076:	2800      	cmp	r0, #0
 800d078:	d038      	beq.n	800d0ec <_svfiprintf_r+0x1c8>
 800d07a:	4b24      	ldr	r3, [pc, #144]	; (800d10c <_svfiprintf_r+0x1e8>)
 800d07c:	bb13      	cbnz	r3, 800d0c4 <_svfiprintf_r+0x1a0>
 800d07e:	9b03      	ldr	r3, [sp, #12]
 800d080:	3307      	adds	r3, #7
 800d082:	f023 0307 	bic.w	r3, r3, #7
 800d086:	3308      	adds	r3, #8
 800d088:	9303      	str	r3, [sp, #12]
 800d08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08c:	444b      	add	r3, r9
 800d08e:	9309      	str	r3, [sp, #36]	; 0x24
 800d090:	e76d      	b.n	800cf6e <_svfiprintf_r+0x4a>
 800d092:	fb05 3202 	mla	r2, r5, r2, r3
 800d096:	2001      	movs	r0, #1
 800d098:	460f      	mov	r7, r1
 800d09a:	e7a6      	b.n	800cfea <_svfiprintf_r+0xc6>
 800d09c:	2300      	movs	r3, #0
 800d09e:	3701      	adds	r7, #1
 800d0a0:	9305      	str	r3, [sp, #20]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	250a      	movs	r5, #10
 800d0a6:	4638      	mov	r0, r7
 800d0a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0ac:	3a30      	subs	r2, #48	; 0x30
 800d0ae:	2a09      	cmp	r2, #9
 800d0b0:	d903      	bls.n	800d0ba <_svfiprintf_r+0x196>
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d0c8      	beq.n	800d048 <_svfiprintf_r+0x124>
 800d0b6:	9105      	str	r1, [sp, #20]
 800d0b8:	e7c6      	b.n	800d048 <_svfiprintf_r+0x124>
 800d0ba:	fb05 2101 	mla	r1, r5, r1, r2
 800d0be:	2301      	movs	r3, #1
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	e7f0      	b.n	800d0a6 <_svfiprintf_r+0x182>
 800d0c4:	ab03      	add	r3, sp, #12
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	4622      	mov	r2, r4
 800d0ca:	4b11      	ldr	r3, [pc, #68]	; (800d110 <_svfiprintf_r+0x1ec>)
 800d0cc:	a904      	add	r1, sp, #16
 800d0ce:	4640      	mov	r0, r8
 800d0d0:	f3af 8000 	nop.w
 800d0d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d0d8:	4681      	mov	r9, r0
 800d0da:	d1d6      	bne.n	800d08a <_svfiprintf_r+0x166>
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	065b      	lsls	r3, r3, #25
 800d0e0:	f53f af35 	bmi.w	800cf4e <_svfiprintf_r+0x2a>
 800d0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0e6:	b01d      	add	sp, #116	; 0x74
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	ab03      	add	r3, sp, #12
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	4622      	mov	r2, r4
 800d0f2:	4b07      	ldr	r3, [pc, #28]	; (800d110 <_svfiprintf_r+0x1ec>)
 800d0f4:	a904      	add	r1, sp, #16
 800d0f6:	4640      	mov	r0, r8
 800d0f8:	f000 f882 	bl	800d200 <_printf_i>
 800d0fc:	e7ea      	b.n	800d0d4 <_svfiprintf_r+0x1b0>
 800d0fe:	bf00      	nop
 800d100:	0800dfb5 	.word	0x0800dfb5
 800d104:	0800dfbb 	.word	0x0800dfbb
 800d108:	0800dfbf 	.word	0x0800dfbf
 800d10c:	00000000 	.word	0x00000000
 800d110:	0800ce71 	.word	0x0800ce71

0800d114 <_printf_common>:
 800d114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d118:	4691      	mov	r9, r2
 800d11a:	461f      	mov	r7, r3
 800d11c:	688a      	ldr	r2, [r1, #8]
 800d11e:	690b      	ldr	r3, [r1, #16]
 800d120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d124:	4293      	cmp	r3, r2
 800d126:	bfb8      	it	lt
 800d128:	4613      	movlt	r3, r2
 800d12a:	f8c9 3000 	str.w	r3, [r9]
 800d12e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d132:	4606      	mov	r6, r0
 800d134:	460c      	mov	r4, r1
 800d136:	b112      	cbz	r2, 800d13e <_printf_common+0x2a>
 800d138:	3301      	adds	r3, #1
 800d13a:	f8c9 3000 	str.w	r3, [r9]
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	0699      	lsls	r1, r3, #26
 800d142:	bf42      	ittt	mi
 800d144:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d148:	3302      	addmi	r3, #2
 800d14a:	f8c9 3000 	strmi.w	r3, [r9]
 800d14e:	6825      	ldr	r5, [r4, #0]
 800d150:	f015 0506 	ands.w	r5, r5, #6
 800d154:	d107      	bne.n	800d166 <_printf_common+0x52>
 800d156:	f104 0a19 	add.w	sl, r4, #25
 800d15a:	68e3      	ldr	r3, [r4, #12]
 800d15c:	f8d9 2000 	ldr.w	r2, [r9]
 800d160:	1a9b      	subs	r3, r3, r2
 800d162:	42ab      	cmp	r3, r5
 800d164:	dc28      	bgt.n	800d1b8 <_printf_common+0xa4>
 800d166:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d16a:	6822      	ldr	r2, [r4, #0]
 800d16c:	3300      	adds	r3, #0
 800d16e:	bf18      	it	ne
 800d170:	2301      	movne	r3, #1
 800d172:	0692      	lsls	r2, r2, #26
 800d174:	d42d      	bmi.n	800d1d2 <_printf_common+0xbe>
 800d176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d17a:	4639      	mov	r1, r7
 800d17c:	4630      	mov	r0, r6
 800d17e:	47c0      	blx	r8
 800d180:	3001      	adds	r0, #1
 800d182:	d020      	beq.n	800d1c6 <_printf_common+0xb2>
 800d184:	6823      	ldr	r3, [r4, #0]
 800d186:	68e5      	ldr	r5, [r4, #12]
 800d188:	f8d9 2000 	ldr.w	r2, [r9]
 800d18c:	f003 0306 	and.w	r3, r3, #6
 800d190:	2b04      	cmp	r3, #4
 800d192:	bf08      	it	eq
 800d194:	1aad      	subeq	r5, r5, r2
 800d196:	68a3      	ldr	r3, [r4, #8]
 800d198:	6922      	ldr	r2, [r4, #16]
 800d19a:	bf0c      	ite	eq
 800d19c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1a0:	2500      	movne	r5, #0
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	bfc4      	itt	gt
 800d1a6:	1a9b      	subgt	r3, r3, r2
 800d1a8:	18ed      	addgt	r5, r5, r3
 800d1aa:	f04f 0900 	mov.w	r9, #0
 800d1ae:	341a      	adds	r4, #26
 800d1b0:	454d      	cmp	r5, r9
 800d1b2:	d11a      	bne.n	800d1ea <_printf_common+0xd6>
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	e008      	b.n	800d1ca <_printf_common+0xb6>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	4652      	mov	r2, sl
 800d1bc:	4639      	mov	r1, r7
 800d1be:	4630      	mov	r0, r6
 800d1c0:	47c0      	blx	r8
 800d1c2:	3001      	adds	r0, #1
 800d1c4:	d103      	bne.n	800d1ce <_printf_common+0xba>
 800d1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ce:	3501      	adds	r5, #1
 800d1d0:	e7c3      	b.n	800d15a <_printf_common+0x46>
 800d1d2:	18e1      	adds	r1, r4, r3
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	2030      	movs	r0, #48	; 0x30
 800d1d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1dc:	4422      	add	r2, r4
 800d1de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1e6:	3302      	adds	r3, #2
 800d1e8:	e7c5      	b.n	800d176 <_printf_common+0x62>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	4639      	mov	r1, r7
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	47c0      	blx	r8
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	d0e6      	beq.n	800d1c6 <_printf_common+0xb2>
 800d1f8:	f109 0901 	add.w	r9, r9, #1
 800d1fc:	e7d8      	b.n	800d1b0 <_printf_common+0x9c>
	...

0800d200 <_printf_i>:
 800d200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d204:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d208:	460c      	mov	r4, r1
 800d20a:	7e09      	ldrb	r1, [r1, #24]
 800d20c:	b085      	sub	sp, #20
 800d20e:	296e      	cmp	r1, #110	; 0x6e
 800d210:	4617      	mov	r7, r2
 800d212:	4606      	mov	r6, r0
 800d214:	4698      	mov	r8, r3
 800d216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d218:	f000 80b3 	beq.w	800d382 <_printf_i+0x182>
 800d21c:	d822      	bhi.n	800d264 <_printf_i+0x64>
 800d21e:	2963      	cmp	r1, #99	; 0x63
 800d220:	d036      	beq.n	800d290 <_printf_i+0x90>
 800d222:	d80a      	bhi.n	800d23a <_printf_i+0x3a>
 800d224:	2900      	cmp	r1, #0
 800d226:	f000 80b9 	beq.w	800d39c <_printf_i+0x19c>
 800d22a:	2958      	cmp	r1, #88	; 0x58
 800d22c:	f000 8083 	beq.w	800d336 <_printf_i+0x136>
 800d230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d234:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d238:	e032      	b.n	800d2a0 <_printf_i+0xa0>
 800d23a:	2964      	cmp	r1, #100	; 0x64
 800d23c:	d001      	beq.n	800d242 <_printf_i+0x42>
 800d23e:	2969      	cmp	r1, #105	; 0x69
 800d240:	d1f6      	bne.n	800d230 <_printf_i+0x30>
 800d242:	6820      	ldr	r0, [r4, #0]
 800d244:	6813      	ldr	r3, [r2, #0]
 800d246:	0605      	lsls	r5, r0, #24
 800d248:	f103 0104 	add.w	r1, r3, #4
 800d24c:	d52a      	bpl.n	800d2a4 <_printf_i+0xa4>
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6011      	str	r1, [r2, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	da03      	bge.n	800d25e <_printf_i+0x5e>
 800d256:	222d      	movs	r2, #45	; 0x2d
 800d258:	425b      	negs	r3, r3
 800d25a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d25e:	486f      	ldr	r0, [pc, #444]	; (800d41c <_printf_i+0x21c>)
 800d260:	220a      	movs	r2, #10
 800d262:	e039      	b.n	800d2d8 <_printf_i+0xd8>
 800d264:	2973      	cmp	r1, #115	; 0x73
 800d266:	f000 809d 	beq.w	800d3a4 <_printf_i+0x1a4>
 800d26a:	d808      	bhi.n	800d27e <_printf_i+0x7e>
 800d26c:	296f      	cmp	r1, #111	; 0x6f
 800d26e:	d020      	beq.n	800d2b2 <_printf_i+0xb2>
 800d270:	2970      	cmp	r1, #112	; 0x70
 800d272:	d1dd      	bne.n	800d230 <_printf_i+0x30>
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	f043 0320 	orr.w	r3, r3, #32
 800d27a:	6023      	str	r3, [r4, #0]
 800d27c:	e003      	b.n	800d286 <_printf_i+0x86>
 800d27e:	2975      	cmp	r1, #117	; 0x75
 800d280:	d017      	beq.n	800d2b2 <_printf_i+0xb2>
 800d282:	2978      	cmp	r1, #120	; 0x78
 800d284:	d1d4      	bne.n	800d230 <_printf_i+0x30>
 800d286:	2378      	movs	r3, #120	; 0x78
 800d288:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d28c:	4864      	ldr	r0, [pc, #400]	; (800d420 <_printf_i+0x220>)
 800d28e:	e055      	b.n	800d33c <_printf_i+0x13c>
 800d290:	6813      	ldr	r3, [r2, #0]
 800d292:	1d19      	adds	r1, r3, #4
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6011      	str	r1, [r2, #0]
 800d298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d29c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e08c      	b.n	800d3be <_printf_i+0x1be>
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6011      	str	r1, [r2, #0]
 800d2a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2ac:	bf18      	it	ne
 800d2ae:	b21b      	sxthne	r3, r3
 800d2b0:	e7cf      	b.n	800d252 <_printf_i+0x52>
 800d2b2:	6813      	ldr	r3, [r2, #0]
 800d2b4:	6825      	ldr	r5, [r4, #0]
 800d2b6:	1d18      	adds	r0, r3, #4
 800d2b8:	6010      	str	r0, [r2, #0]
 800d2ba:	0628      	lsls	r0, r5, #24
 800d2bc:	d501      	bpl.n	800d2c2 <_printf_i+0xc2>
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	e002      	b.n	800d2c8 <_printf_i+0xc8>
 800d2c2:	0668      	lsls	r0, r5, #25
 800d2c4:	d5fb      	bpl.n	800d2be <_printf_i+0xbe>
 800d2c6:	881b      	ldrh	r3, [r3, #0]
 800d2c8:	4854      	ldr	r0, [pc, #336]	; (800d41c <_printf_i+0x21c>)
 800d2ca:	296f      	cmp	r1, #111	; 0x6f
 800d2cc:	bf14      	ite	ne
 800d2ce:	220a      	movne	r2, #10
 800d2d0:	2208      	moveq	r2, #8
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2d8:	6865      	ldr	r5, [r4, #4]
 800d2da:	60a5      	str	r5, [r4, #8]
 800d2dc:	2d00      	cmp	r5, #0
 800d2de:	f2c0 8095 	blt.w	800d40c <_printf_i+0x20c>
 800d2e2:	6821      	ldr	r1, [r4, #0]
 800d2e4:	f021 0104 	bic.w	r1, r1, #4
 800d2e8:	6021      	str	r1, [r4, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d13d      	bne.n	800d36a <_printf_i+0x16a>
 800d2ee:	2d00      	cmp	r5, #0
 800d2f0:	f040 808e 	bne.w	800d410 <_printf_i+0x210>
 800d2f4:	4665      	mov	r5, ip
 800d2f6:	2a08      	cmp	r2, #8
 800d2f8:	d10b      	bne.n	800d312 <_printf_i+0x112>
 800d2fa:	6823      	ldr	r3, [r4, #0]
 800d2fc:	07db      	lsls	r3, r3, #31
 800d2fe:	d508      	bpl.n	800d312 <_printf_i+0x112>
 800d300:	6923      	ldr	r3, [r4, #16]
 800d302:	6862      	ldr	r2, [r4, #4]
 800d304:	429a      	cmp	r2, r3
 800d306:	bfde      	ittt	le
 800d308:	2330      	movle	r3, #48	; 0x30
 800d30a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d30e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d312:	ebac 0305 	sub.w	r3, ip, r5
 800d316:	6123      	str	r3, [r4, #16]
 800d318:	f8cd 8000 	str.w	r8, [sp]
 800d31c:	463b      	mov	r3, r7
 800d31e:	aa03      	add	r2, sp, #12
 800d320:	4621      	mov	r1, r4
 800d322:	4630      	mov	r0, r6
 800d324:	f7ff fef6 	bl	800d114 <_printf_common>
 800d328:	3001      	adds	r0, #1
 800d32a:	d14d      	bne.n	800d3c8 <_printf_i+0x1c8>
 800d32c:	f04f 30ff 	mov.w	r0, #4294967295
 800d330:	b005      	add	sp, #20
 800d332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d336:	4839      	ldr	r0, [pc, #228]	; (800d41c <_printf_i+0x21c>)
 800d338:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d33c:	6813      	ldr	r3, [r2, #0]
 800d33e:	6821      	ldr	r1, [r4, #0]
 800d340:	1d1d      	adds	r5, r3, #4
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	6015      	str	r5, [r2, #0]
 800d346:	060a      	lsls	r2, r1, #24
 800d348:	d50b      	bpl.n	800d362 <_printf_i+0x162>
 800d34a:	07ca      	lsls	r2, r1, #31
 800d34c:	bf44      	itt	mi
 800d34e:	f041 0120 	orrmi.w	r1, r1, #32
 800d352:	6021      	strmi	r1, [r4, #0]
 800d354:	b91b      	cbnz	r3, 800d35e <_printf_i+0x15e>
 800d356:	6822      	ldr	r2, [r4, #0]
 800d358:	f022 0220 	bic.w	r2, r2, #32
 800d35c:	6022      	str	r2, [r4, #0]
 800d35e:	2210      	movs	r2, #16
 800d360:	e7b7      	b.n	800d2d2 <_printf_i+0xd2>
 800d362:	064d      	lsls	r5, r1, #25
 800d364:	bf48      	it	mi
 800d366:	b29b      	uxthmi	r3, r3
 800d368:	e7ef      	b.n	800d34a <_printf_i+0x14a>
 800d36a:	4665      	mov	r5, ip
 800d36c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d370:	fb02 3311 	mls	r3, r2, r1, r3
 800d374:	5cc3      	ldrb	r3, [r0, r3]
 800d376:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d37a:	460b      	mov	r3, r1
 800d37c:	2900      	cmp	r1, #0
 800d37e:	d1f5      	bne.n	800d36c <_printf_i+0x16c>
 800d380:	e7b9      	b.n	800d2f6 <_printf_i+0xf6>
 800d382:	6813      	ldr	r3, [r2, #0]
 800d384:	6825      	ldr	r5, [r4, #0]
 800d386:	6961      	ldr	r1, [r4, #20]
 800d388:	1d18      	adds	r0, r3, #4
 800d38a:	6010      	str	r0, [r2, #0]
 800d38c:	0628      	lsls	r0, r5, #24
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	d501      	bpl.n	800d396 <_printf_i+0x196>
 800d392:	6019      	str	r1, [r3, #0]
 800d394:	e002      	b.n	800d39c <_printf_i+0x19c>
 800d396:	066a      	lsls	r2, r5, #25
 800d398:	d5fb      	bpl.n	800d392 <_printf_i+0x192>
 800d39a:	8019      	strh	r1, [r3, #0]
 800d39c:	2300      	movs	r3, #0
 800d39e:	6123      	str	r3, [r4, #16]
 800d3a0:	4665      	mov	r5, ip
 800d3a2:	e7b9      	b.n	800d318 <_printf_i+0x118>
 800d3a4:	6813      	ldr	r3, [r2, #0]
 800d3a6:	1d19      	adds	r1, r3, #4
 800d3a8:	6011      	str	r1, [r2, #0]
 800d3aa:	681d      	ldr	r5, [r3, #0]
 800d3ac:	6862      	ldr	r2, [r4, #4]
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	f7f2 ffad 	bl	8000310 <memchr>
 800d3b6:	b108      	cbz	r0, 800d3bc <_printf_i+0x1bc>
 800d3b8:	1b40      	subs	r0, r0, r5
 800d3ba:	6060      	str	r0, [r4, #4]
 800d3bc:	6863      	ldr	r3, [r4, #4]
 800d3be:	6123      	str	r3, [r4, #16]
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3c6:	e7a7      	b.n	800d318 <_printf_i+0x118>
 800d3c8:	6923      	ldr	r3, [r4, #16]
 800d3ca:	462a      	mov	r2, r5
 800d3cc:	4639      	mov	r1, r7
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	47c0      	blx	r8
 800d3d2:	3001      	adds	r0, #1
 800d3d4:	d0aa      	beq.n	800d32c <_printf_i+0x12c>
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	079b      	lsls	r3, r3, #30
 800d3da:	d413      	bmi.n	800d404 <_printf_i+0x204>
 800d3dc:	68e0      	ldr	r0, [r4, #12]
 800d3de:	9b03      	ldr	r3, [sp, #12]
 800d3e0:	4298      	cmp	r0, r3
 800d3e2:	bfb8      	it	lt
 800d3e4:	4618      	movlt	r0, r3
 800d3e6:	e7a3      	b.n	800d330 <_printf_i+0x130>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	464a      	mov	r2, r9
 800d3ec:	4639      	mov	r1, r7
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	47c0      	blx	r8
 800d3f2:	3001      	adds	r0, #1
 800d3f4:	d09a      	beq.n	800d32c <_printf_i+0x12c>
 800d3f6:	3501      	adds	r5, #1
 800d3f8:	68e3      	ldr	r3, [r4, #12]
 800d3fa:	9a03      	ldr	r2, [sp, #12]
 800d3fc:	1a9b      	subs	r3, r3, r2
 800d3fe:	42ab      	cmp	r3, r5
 800d400:	dcf2      	bgt.n	800d3e8 <_printf_i+0x1e8>
 800d402:	e7eb      	b.n	800d3dc <_printf_i+0x1dc>
 800d404:	2500      	movs	r5, #0
 800d406:	f104 0919 	add.w	r9, r4, #25
 800d40a:	e7f5      	b.n	800d3f8 <_printf_i+0x1f8>
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d1ac      	bne.n	800d36a <_printf_i+0x16a>
 800d410:	7803      	ldrb	r3, [r0, #0]
 800d412:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d416:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d41a:	e76c      	b.n	800d2f6 <_printf_i+0xf6>
 800d41c:	0800dfc6 	.word	0x0800dfc6
 800d420:	0800dfd7 	.word	0x0800dfd7

0800d424 <memmove>:
 800d424:	4288      	cmp	r0, r1
 800d426:	b510      	push	{r4, lr}
 800d428:	eb01 0302 	add.w	r3, r1, r2
 800d42c:	d807      	bhi.n	800d43e <memmove+0x1a>
 800d42e:	1e42      	subs	r2, r0, #1
 800d430:	4299      	cmp	r1, r3
 800d432:	d00a      	beq.n	800d44a <memmove+0x26>
 800d434:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d438:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d43c:	e7f8      	b.n	800d430 <memmove+0xc>
 800d43e:	4283      	cmp	r3, r0
 800d440:	d9f5      	bls.n	800d42e <memmove+0xa>
 800d442:	1881      	adds	r1, r0, r2
 800d444:	1ad2      	subs	r2, r2, r3
 800d446:	42d3      	cmn	r3, r2
 800d448:	d100      	bne.n	800d44c <memmove+0x28>
 800d44a:	bd10      	pop	{r4, pc}
 800d44c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d450:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d454:	e7f7      	b.n	800d446 <memmove+0x22>

0800d456 <_realloc_r>:
 800d456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d458:	4607      	mov	r7, r0
 800d45a:	4614      	mov	r4, r2
 800d45c:	460e      	mov	r6, r1
 800d45e:	b921      	cbnz	r1, 800d46a <_realloc_r+0x14>
 800d460:	4611      	mov	r1, r2
 800d462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d466:	f7ff bc6f 	b.w	800cd48 <_malloc_r>
 800d46a:	b922      	cbnz	r2, 800d476 <_realloc_r+0x20>
 800d46c:	f7ff fc1e 	bl	800ccac <_free_r>
 800d470:	4625      	mov	r5, r4
 800d472:	4628      	mov	r0, r5
 800d474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d476:	f000 f814 	bl	800d4a2 <_malloc_usable_size_r>
 800d47a:	42a0      	cmp	r0, r4
 800d47c:	d20f      	bcs.n	800d49e <_realloc_r+0x48>
 800d47e:	4621      	mov	r1, r4
 800d480:	4638      	mov	r0, r7
 800d482:	f7ff fc61 	bl	800cd48 <_malloc_r>
 800d486:	4605      	mov	r5, r0
 800d488:	2800      	cmp	r0, #0
 800d48a:	d0f2      	beq.n	800d472 <_realloc_r+0x1c>
 800d48c:	4631      	mov	r1, r6
 800d48e:	4622      	mov	r2, r4
 800d490:	f7ff fbf8 	bl	800cc84 <memcpy>
 800d494:	4631      	mov	r1, r6
 800d496:	4638      	mov	r0, r7
 800d498:	f7ff fc08 	bl	800ccac <_free_r>
 800d49c:	e7e9      	b.n	800d472 <_realloc_r+0x1c>
 800d49e:	4635      	mov	r5, r6
 800d4a0:	e7e7      	b.n	800d472 <_realloc_r+0x1c>

0800d4a2 <_malloc_usable_size_r>:
 800d4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a6:	1f18      	subs	r0, r3, #4
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	bfbc      	itt	lt
 800d4ac:	580b      	ldrlt	r3, [r1, r0]
 800d4ae:	18c0      	addlt	r0, r0, r3
 800d4b0:	4770      	bx	lr
	...

0800d4b4 <_init>:
 800d4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b6:	bf00      	nop
 800d4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ba:	bc08      	pop	{r3}
 800d4bc:	469e      	mov	lr, r3
 800d4be:	4770      	bx	lr

0800d4c0 <_fini>:
 800d4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c2:	bf00      	nop
 800d4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4c6:	bc08      	pop	{r3}
 800d4c8:	469e      	mov	lr, r3
 800d4ca:	4770      	bx	lr
