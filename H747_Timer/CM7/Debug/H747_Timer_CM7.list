
H747_Timer_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002690  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002938  08002938  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002938  08002938  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002938  08002938  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08002940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000010  08002950  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400007c  08002950  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001554a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235c  00000000  00000000  00035588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  000378e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00038560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dd4a  00000000  00000000  00039110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d901  00000000  00000000  00076e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019646d  00000000  00000000  0008475b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021abc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e4  00000000  00000000  0021ac1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002910 	.word	0x08002910

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002910 	.word	0x08002910

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <main+0x9c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f965 	bl	8000704 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fa09 	bl	8000850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f84f 	bl	80004e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <main+0x9c>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <main+0x9c>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <main+0x9c>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fd87 	bl	8000f74 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f000 fd9d 	bl	8000fa8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <main+0x9c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 f937 	bl	8000704 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f8ef 	bl	8000678 <MX_GPIO_Init>
  MX_TIM2_Init();
 800049a:	f000 f89f 	bl	80005dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800049e:	4803      	ldr	r0, [pc, #12]	; (80004ac <main+0xa0>)
 80004a0:	f001 fd88 	bl	8001fb4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <main+0x98>
 80004a6:	bf00      	nop
 80004a8:	58024400 	.word	0x58024400
 80004ac:	2400002c 	.word	0x2400002c

080004b0 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d104      	bne.n	80004ce <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_14|GPIO_PIN_15);
 80004c4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004ca:	f000 fd38 	bl	8000f3e <HAL_GPIO_TogglePin>
	}
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2400002c 	.word	0x2400002c
 80004dc:	58022000 	.word	0x58022000

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b09e      	sub	sp, #120	; 0x78
 80004e4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80004e6:	2300      	movs	r3, #0
 80004e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004ec:	2004      	movs	r0, #4
 80004ee:	f000 fd6f 	bl	8000fd0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	4b37      	ldr	r3, [pc, #220]	; (80005d4 <SystemClock_Config+0xf4>)
 80004f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004fa:	4a36      	ldr	r2, [pc, #216]	; (80005d4 <SystemClock_Config+0xf4>)
 80004fc:	f023 0301 	bic.w	r3, r3, #1
 8000500:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000502:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <SystemClock_Config+0xf4>)
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	4b32      	ldr	r3, [pc, #200]	; (80005d8 <SystemClock_Config+0xf8>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a31      	ldr	r2, [pc, #196]	; (80005d8 <SystemClock_Config+0xf8>)
 8000512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <SystemClock_Config+0xf8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000524:	bf00      	nop
 8000526:	4b2c      	ldr	r3, [pc, #176]	; (80005d8 <SystemClock_Config+0xf8>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800052e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000532:	d1f8      	bne.n	8000526 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000542:	2300      	movs	r3, #0
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	2302      	movs	r3, #2
 800054c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800054e:	2305      	movs	r3, #5
 8000550:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000552:	23a0      	movs	r3, #160	; 0xa0
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800055a:	2302      	movs	r3, #2
 800055c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800055e:	2302      	movs	r3, #2
 8000560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000562:	2304      	movs	r3, #4
 8000564:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000566:	2300      	movs	r3, #0
 8000568:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800056a:	2308      	movs	r3, #8
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800056e:	f107 0308 	add.w	r3, r7, #8
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fd86 	bl	8001084 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800057e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000586:	f000 f8bd 	bl	8000704 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800058a:	233f      	movs	r3, #63	; 0x3f
 800058c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000596:	2308      	movs	r3, #8
 8000598:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800059a:	2340      	movs	r3, #64	; 0x40
 800059c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800059e:	2340      	movs	r3, #64	; 0x40
 80005a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005a8:	2340      	movs	r3, #64	; 0x40
 80005aa:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80005ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f976 	bl	80018a4 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80005be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005c6:	f000 f89d 	bl	8000704 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 80005ca:	bf00      	nop
 80005cc:	3778      	adds	r7, #120	; 0x78
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	58000400 	.word	0x58000400
 80005d8:	58024800 	.word	0x58024800

080005dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_TIM2_Init+0x98>)
 80005fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000600:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_TIM2_Init+0x98>)
 8000604:	f242 7210 	movw	r2, #10000	; 0x2710
 8000608:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_TIM2_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_TIM2_Init+0x98>)
 8000612:	f242 720f 	movw	r2, #9999	; 0x270f
 8000616:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_TIM2_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_TIM2_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <MX_TIM2_Init+0x98>)
 8000626:	f001 fc6d 	bl	8001f04 <HAL_TIM_Base_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000630:	f000 f868 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_TIM2_Init+0x98>)
 8000642:	f001 fe47 	bl	80022d4 <HAL_TIM_ConfigClockSource>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800064c:	f000 f85a 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_TIM2_Init+0x98>)
 800065e:	f002 f88d 	bl	800277c <HAL_TIMEx_MasterConfigSynchronization>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 f84c 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2400002c 	.word	0x2400002c

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_GPIO_Init+0x84>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	4a19      	ldr	r2, [pc, #100]	; (80006fc <MX_GPIO_Init+0x84>)
 8000696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_GPIO_Init+0x84>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_GPIO_Init+0x84>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_GPIO_Init+0x84>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_GPIO_Init+0x84>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x88>)
 80006d2:	f000 fc1b 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0x88>)
 80006f0:	f000 fa5c 	bl	8000bac <HAL_GPIO_Init>

}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	58024400 	.word	0x58024400
 8000700:	58022000 	.word	0x58022000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_MspInit+0x30>)
 800071c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x30>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x30>)
 800072c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	58024400 	.word	0x58024400

08000748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000758:	d116      	bne.n	8000788 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_TIM_Base_MspInit+0x48>)
 800075c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000760:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <HAL_TIM_Base_MspInit+0x48>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_TIM_Base_MspInit+0x48>)
 800076c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	201c      	movs	r0, #28
 800077e:	f000 f9e0 	bl	8000b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000782:	201c      	movs	r0, #28
 8000784:	f000 f9f7 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	58024400 	.word	0x58024400

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f8a8 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <TIM2_IRQHandler+0x10>)
 80007ee:	f001 fc51 	bl	8002094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2400002c 	.word	0x2400002c

080007fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000834 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000800:	f7ff fd6a 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000806:	490d      	ldr	r1, [pc, #52]	; (800083c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000808:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800081c:	4c0a      	ldr	r4, [pc, #40]	; (8000848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082a:	f002 f84d 	bl	80028c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082e:	f7ff fded 	bl	800040c <main>
  bx  lr
 8000832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000834:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000838:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800083c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000840:	08002940 	.word	0x08002940
  ldr r2, =_sbss
 8000844:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000848:	2400007c 	.word	0x2400007c

0800084c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC3_IRQHandler>
	...

08000850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000856:	2003      	movs	r0, #3
 8000858:	f000 f968 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800085c:	f001 f9d8 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8000860:	4602      	mov	r2, r0
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_Init+0x68>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	0a1b      	lsrs	r3, r3, #8
 8000868:	f003 030f 	and.w	r3, r3, #15
 800086c:	4913      	ldr	r1, [pc, #76]	; (80008bc <HAL_Init+0x6c>)
 800086e:	5ccb      	ldrb	r3, [r1, r3]
 8000870:	f003 031f 	and.w	r3, r3, #31
 8000874:	fa22 f303 	lsr.w	r3, r2, r3
 8000878:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_Init+0x68>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_Init+0x6c>)
 8000884:	5cd3      	ldrb	r3, [r2, r3]
 8000886:	f003 031f 	and.w	r3, r3, #31
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	fa22 f303 	lsr.w	r3, r2, r3
 8000890:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <HAL_Init+0x70>)
 8000892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000894:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <HAL_Init+0x74>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800089a:	2000      	movs	r0, #0
 800089c:	f000 f814 	bl	80008c8 <HAL_InitTick>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e002      	b.n	80008b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008aa:	f7ff ff33 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58024400 	.word	0x58024400
 80008bc:	08002928 	.word	0x08002928
 80008c0:	24000004 	.word	0x24000004
 80008c4:	24000000 	.word	0x24000000

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_InitTick+0x60>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d101      	bne.n	80008dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	e021      	b.n	8000920 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <HAL_InitTick+0x64>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_InitTick+0x60>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f94d 	bl	8000b92 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f917 	bl	8000b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x68>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2400000c 	.word	0x2400000c
 800092c:	24000000 	.word	0x24000000
 8000930:	24000008 	.word	0x24000008

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2400000c 	.word	0x2400000c
 8000958:	24000078 	.word	0x24000078

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	24000078 	.word	0x24000078

08000974 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_GetREVID+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	0c1b      	lsrs	r3, r3, #16
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	5c001000 	.word	0x5c001000

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <__NVIC_SetPriorityGrouping+0x40>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	4313      	orrs	r3, r2
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <__NVIC_SetPriorityGrouping+0x40>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00
 80009d0:	05fa0000 	.word	0x05fa0000

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	db0b      	blt.n	8000a1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	f003 021f 	and.w	r2, r3, #31
 8000a08:	4907      	ldr	r1, [pc, #28]	; (8000a28 <__NVIC_EnableIRQ+0x38>)
 8000a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0e:	095b      	lsrs	r3, r3, #5
 8000a10:	2001      	movs	r0, #1
 8000a12:	fa00 f202 	lsl.w	r2, r0, r2
 8000a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af8:	d301      	bcc.n	8000afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00f      	b.n	8000b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <SysTick_Config+0x40>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b06:	210f      	movs	r1, #15
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f7ff ff8e 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SysTick_Config+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SysTick_Config+0x40>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff29 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff40 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff33 	bl	80009f0 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa4 	bl	8000ae8 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bba:	4b89      	ldr	r3, [pc, #548]	; (8000de0 <HAL_GPIO_Init+0x234>)
 8000bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bbe:	e194      	b.n	8000eea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 8186 	beq.w	8000ee4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d00b      	beq.n	8000bf8 <HAL_GPIO_Init+0x4c>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d007      	beq.n	8000bf8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bec:	2b11      	cmp	r3, #17
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b12      	cmp	r3, #18
 8000bf6:	d130      	bne.n	8000c5a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	f003 0201 	and.w	r2, r3, #1
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0xee>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d123      	bne.n	8000ce2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	08da      	lsrs	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	69b9      	ldr	r1, [r7, #24]
 8000cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0203 	and.w	r2, r3, #3
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 80e0 	beq.w	8000ee4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d24:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <HAL_GPIO_Init+0x238>)
 8000d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2a:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <HAL_GPIO_Init+0x238>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d34:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <HAL_GPIO_Init+0x238>)
 8000d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d42:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <HAL_GPIO_Init+0x23c>)
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a20      	ldr	r2, [pc, #128]	; (8000dec <HAL_GPIO_Init+0x240>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d052      	beq.n	8000e14 <HAL_GPIO_Init+0x268>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <HAL_GPIO_Init+0x244>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d031      	beq.n	8000dda <HAL_GPIO_Init+0x22e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a1e      	ldr	r2, [pc, #120]	; (8000df4 <HAL_GPIO_Init+0x248>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d02b      	beq.n	8000dd6 <HAL_GPIO_Init+0x22a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_GPIO_Init+0x24c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d025      	beq.n	8000dd2 <HAL_GPIO_Init+0x226>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <HAL_GPIO_Init+0x250>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d01f      	beq.n	8000dce <HAL_GPIO_Init+0x222>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <HAL_GPIO_Init+0x254>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d019      	beq.n	8000dca <HAL_GPIO_Init+0x21e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <HAL_GPIO_Init+0x258>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d013      	beq.n	8000dc6 <HAL_GPIO_Init+0x21a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_GPIO_Init+0x25c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_GPIO_Init+0x216>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <HAL_GPIO_Init+0x260>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x212>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_GPIO_Init+0x264>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_GPIO_Init+0x20e>
 8000db6:	2309      	movs	r3, #9
 8000db8:	e02d      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dba:	230a      	movs	r3, #10
 8000dbc:	e02b      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	e029      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	e027      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	e025      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dca:	2305      	movs	r3, #5
 8000dcc:	e023      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e021      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e01f      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e01d      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e01b      	b.n	8000e16 <HAL_GPIO_Init+0x26a>
 8000dde:	bf00      	nop
 8000de0:	58000080 	.word	0x58000080
 8000de4:	58024400 	.word	0x58024400
 8000de8:	58000400 	.word	0x58000400
 8000dec:	58020000 	.word	0x58020000
 8000df0:	58020400 	.word	0x58020400
 8000df4:	58020800 	.word	0x58020800
 8000df8:	58020c00 	.word	0x58020c00
 8000dfc:	58021000 	.word	0x58021000
 8000e00:	58021400 	.word	0x58021400
 8000e04:	58021800 	.word	0x58021800
 8000e08:	58021c00 	.word	0x58021c00
 8000e0c:	58022000 	.word	0x58022000
 8000e10:	58022400 	.word	0x58022400
 8000e14:	2300      	movs	r3, #0
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	f002 0203 	and.w	r2, r2, #3
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	4093      	lsls	r3, r2
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e26:	4938      	ldr	r1, [pc, #224]	; (8000f08 <HAL_GPIO_Init+0x35c>)
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f47f ae63 	bne.w	8000bc0 <HAL_GPIO_Init+0x14>
  }
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3724      	adds	r7, #36	; 0x24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	58000400 	.word	0x58000400

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f50:	887a      	ldrh	r2, [r7, #2]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	041a      	lsls	r2, r3, #16
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	400b      	ands	r3, r1
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_HSEM_FastTake+0x2c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3320      	adds	r3, #32
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_HSEM_FastTake+0x30>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e000      	b.n	8000f92 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	58026400 	.word	0x58026400
 8000fa4:	80000300 	.word	0x80000300

08000fa8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000fb2:	4906      	ldr	r1, [pc, #24]	; (8000fcc <HAL_HSEM_Release+0x24>)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	58026400 	.word	0x58026400

08000fd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	2b06      	cmp	r3, #6
 8000fe2:	d00a      	beq.n	8000ffa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d001      	beq.n	8000ff6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e040      	b.n	8001078 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e03e      	b.n	8001078 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001002:	491f      	ldr	r1, [pc, #124]	; (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4313      	orrs	r3, r2
 8001008:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800100a:	f7ff fca7 	bl	800095c <HAL_GetTick>
 800100e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001010:	e009      	b.n	8001026 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001012:	f7ff fca3 	bl	800095c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001020:	d901      	bls.n	8001026 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e028      	b.n	8001078 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800102e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001032:	d1ee      	bne.n	8001012 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b1e      	cmp	r3, #30
 8001038:	d008      	beq.n	800104c <HAL_PWREx_ConfigSupply+0x7c>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b2e      	cmp	r3, #46	; 0x2e
 800103e:	d005      	beq.n	800104c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b1d      	cmp	r3, #29
 8001044:	d002      	beq.n	800104c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b2d      	cmp	r3, #45	; 0x2d
 800104a:	d114      	bne.n	8001076 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800104c:	f7ff fc86 	bl	800095c <HAL_GetTick>
 8001050:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001052:	e009      	b.n	8001068 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001054:	f7ff fc82 	bl	800095c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001062:	d901      	bls.n	8001068 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e007      	b.n	8001078 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001074:	d1ee      	bne.n	8001054 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58024800 	.word	0x58024800

08001084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e3ff      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8087 	beq.w	80011b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a4:	4b99      	ldr	r3, [pc, #612]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010ae:	4b97      	ldr	r3, [pc, #604]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	2b10      	cmp	r3, #16
 80010b8:	d007      	beq.n	80010ca <HAL_RCC_OscConfig+0x46>
 80010ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010bc:	2b18      	cmp	r3, #24
 80010be:	d110      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
 80010c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d10b      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ca:	4b90      	ldr	r3, [pc, #576]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d06c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x12c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d168      	bne.n	80011b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e3d9      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x76>
 80010ec:	4b87      	ldr	r3, [pc, #540]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a86      	ldr	r2, [pc, #536]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e02e      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x98>
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a81      	ldr	r2, [pc, #516]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b7f      	ldr	r3, [pc, #508]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e01d      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0xbc>
 8001126:	4b79      	ldr	r3, [pc, #484]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a78      	ldr	r2, [pc, #480]	; (800130c <HAL_RCC_OscConfig+0x288>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b76      	ldr	r3, [pc, #472]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a75      	ldr	r2, [pc, #468]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 8001140:	4b72      	ldr	r3, [pc, #456]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a71      	ldr	r2, [pc, #452]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b6f      	ldr	r3, [pc, #444]	; (800130c <HAL_RCC_OscConfig+0x288>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a6e      	ldr	r2, [pc, #440]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fbfc 	bl	800095c <HAL_GetTick>
 8001164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fbf8 	bl	800095c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e38d      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800117a:	4b64      	ldr	r3, [pc, #400]	; (800130c <HAL_RCC_OscConfig+0x288>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0xe4>
 8001186:	e014      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001188:	f7ff fbe8 	bl	800095c <HAL_GetTick>
 800118c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fbe4 	bl	800095c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e379      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011a2:	4b5a      	ldr	r3, [pc, #360]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x10c>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 80ae 	beq.w	800131c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c0:	4b52      	ldr	r3, [pc, #328]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <HAL_RCC_OscConfig+0x162>
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	2b18      	cmp	r3, #24
 80011da:	d13a      	bne.n	8001252 <HAL_RCC_OscConfig+0x1ce>
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d135      	bne.n	8001252 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011e6:	4b49      	ldr	r3, [pc, #292]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_RCC_OscConfig+0x17a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e34b      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	f7ff fbb9 	bl	8000974 <HAL_GetREVID>
 8001202:	4603      	mov	r3, r0
 8001204:	f241 0203 	movw	r2, #4099	; 0x1003
 8001208:	4293      	cmp	r3, r2
 800120a:	d817      	bhi.n	800123c <HAL_RCC_OscConfig+0x1b8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b40      	cmp	r3, #64	; 0x40
 8001212:	d108      	bne.n	8001226 <HAL_RCC_OscConfig+0x1a2>
 8001214:	4b3d      	ldr	r3, [pc, #244]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800121c:	4a3b      	ldr	r2, [pc, #236]	; (800130c <HAL_RCC_OscConfig+0x288>)
 800121e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001222:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001224:	e07a      	b.n	800131c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b39      	ldr	r3, [pc, #228]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	031b      	lsls	r3, r3, #12
 8001234:	4935      	ldr	r1, [pc, #212]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800123a:	e06f      	b.n	800131c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <HAL_RCC_OscConfig+0x288>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	061b      	lsls	r3, r3, #24
 800124a:	4930      	ldr	r1, [pc, #192]	; (800130c <HAL_RCC_OscConfig+0x288>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001250:	e064      	b.n	800131c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d045      	beq.n	80012e6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <HAL_RCC_OscConfig+0x288>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 0219 	bic.w	r2, r3, #25
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	4929      	ldr	r1, [pc, #164]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff fb76 	bl	800095c <HAL_GetTick>
 8001270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001274:	f7ff fb72 	bl	800095c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e307      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_RCC_OscConfig+0x288>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	f7ff fb6f 	bl	8000974 <HAL_GetREVID>
 8001296:	4603      	mov	r3, r0
 8001298:	f241 0203 	movw	r2, #4099	; 0x1003
 800129c:	4293      	cmp	r3, r2
 800129e:	d817      	bhi.n	80012d0 <HAL_RCC_OscConfig+0x24c>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b40      	cmp	r3, #64	; 0x40
 80012a6:	d108      	bne.n	80012ba <HAL_RCC_OscConfig+0x236>
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012b0:	4a16      	ldr	r2, [pc, #88]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80012b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b6:	6053      	str	r3, [r2, #4]
 80012b8:	e030      	b.n	800131c <HAL_RCC_OscConfig+0x298>
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	031b      	lsls	r3, r3, #12
 80012c8:	4910      	ldr	r1, [pc, #64]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
 80012ce:	e025      	b.n	800131c <HAL_RCC_OscConfig+0x298>
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	061b      	lsls	r3, r3, #24
 80012de:	490b      	ldr	r1, [pc, #44]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
 80012e4:	e01a      	b.n	800131c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_RCC_OscConfig+0x288>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb33 	bl	800095c <HAL_GetTick>
 80012f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012f8:	e00a      	b.n	8001310 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fb2f 	bl	800095c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d903      	bls.n	8001310 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e2c4      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
 800130c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001310:	4ba4      	ldr	r3, [pc, #656]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ee      	bne.n	80012fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80a9 	beq.w	800147c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132a:	4b9e      	ldr	r3, [pc, #632]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001332:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001334:	4b9b      	ldr	r3, [pc, #620]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b08      	cmp	r3, #8
 800133e:	d007      	beq.n	8001350 <HAL_RCC_OscConfig+0x2cc>
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b18      	cmp	r3, #24
 8001344:	d13a      	bne.n	80013bc <HAL_RCC_OscConfig+0x338>
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d135      	bne.n	80013bc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001350:	4b94      	ldr	r3, [pc, #592]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_RCC_OscConfig+0x2e4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	2b80      	cmp	r3, #128	; 0x80
 8001362:	d001      	beq.n	8001368 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e296      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001368:	f7ff fb04 	bl	8000974 <HAL_GetREVID>
 800136c:	4603      	mov	r3, r0
 800136e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001372:	4293      	cmp	r3, r2
 8001374:	d817      	bhi.n	80013a6 <HAL_RCC_OscConfig+0x322>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	2b20      	cmp	r3, #32
 800137c:	d108      	bne.n	8001390 <HAL_RCC_OscConfig+0x30c>
 800137e:	4b89      	ldr	r3, [pc, #548]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001386:	4a87      	ldr	r2, [pc, #540]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800138c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800138e:	e075      	b.n	800147c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001390:	4b84      	ldr	r3, [pc, #528]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	069b      	lsls	r3, r3, #26
 800139e:	4981      	ldr	r1, [pc, #516]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013a4:	e06a      	b.n	800147c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a6:	4b7f      	ldr	r3, [pc, #508]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	061b      	lsls	r3, r3, #24
 80013b4:	497b      	ldr	r1, [pc, #492]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ba:	e05f      	b.n	800147c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d042      	beq.n	800144a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013c4:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a76      	ldr	r2, [pc, #472]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80013ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fac4 	bl	800095c <HAL_GetTick>
 80013d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013d8:	f7ff fac0 	bl	800095c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e255      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013ea:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013f6:	f7ff fabd 	bl	8000974 <HAL_GetREVID>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001400:	4293      	cmp	r3, r2
 8001402:	d817      	bhi.n	8001434 <HAL_RCC_OscConfig+0x3b0>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	2b20      	cmp	r3, #32
 800140a:	d108      	bne.n	800141e <HAL_RCC_OscConfig+0x39a>
 800140c:	4b65      	ldr	r3, [pc, #404]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001414:	4a63      	ldr	r2, [pc, #396]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800141a:	6053      	str	r3, [r2, #4]
 800141c:	e02e      	b.n	800147c <HAL_RCC_OscConfig+0x3f8>
 800141e:	4b61      	ldr	r3, [pc, #388]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	069b      	lsls	r3, r3, #26
 800142c:	495d      	ldr	r1, [pc, #372]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
 8001432:	e023      	b.n	800147c <HAL_RCC_OscConfig+0x3f8>
 8001434:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	061b      	lsls	r3, r3, #24
 8001442:	4958      	ldr	r1, [pc, #352]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001444:	4313      	orrs	r3, r2
 8001446:	60cb      	str	r3, [r1, #12]
 8001448:	e018      	b.n	800147c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800144a:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fa81 	bl	800095c <HAL_GetTick>
 800145a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800145e:	f7ff fa7d 	bl	800095c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e212      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d036      	beq.n	80014f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d019      	beq.n	80014c4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001494:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fa5e 	bl	800095c <HAL_GetTick>
 80014a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fa5a 	bl	800095c <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1ef      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x420>
 80014c2:	e018      	b.n	80014f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80014c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c8:	4a36      	ldr	r2, [pc, #216]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff fa44 	bl	800095c <HAL_GetTick>
 80014d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fa40 	bl	800095c <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1d5      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 80014ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d036      	beq.n	8001570 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a25      	ldr	r2, [pc, #148]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001514:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001516:	f7ff fa21 	bl	800095c <HAL_GetTick>
 800151a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800151e:	f7ff fa1d 	bl	800095c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1b2      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x49a>
 800153c:	e018      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001548:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800154a:	f7ff fa07 	bl	800095c <HAL_GetTick>
 800154e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001552:	f7ff fa03 	bl	800095c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e198      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_RCC_OscConfig+0x520>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8085 	beq.w	8001688 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_RCC_OscConfig+0x524>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_RCC_OscConfig+0x524>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800158a:	f7ff f9e7 	bl	800095c <HAL_GetTick>
 800158e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001590:	e00c      	b.n	80015ac <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001592:	f7ff f9e3 	bl	800095c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b64      	cmp	r3, #100	; 0x64
 800159e:	d905      	bls.n	80015ac <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e178      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015ac:	4b96      	ldr	r3, [pc, #600]	; (8001808 <HAL_RCC_OscConfig+0x784>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ec      	beq.n	8001592 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x54a>
 80015c0:	4b92      	ldr	r3, [pc, #584]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a91      	ldr	r2, [pc, #580]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	e02d      	b.n	800162a <HAL_RCC_OscConfig+0x5a6>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x56c>
 80015d6:	4b8d      	ldr	r3, [pc, #564]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a8c      	ldr	r2, [pc, #560]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	4b8a      	ldr	r3, [pc, #552]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a89      	ldr	r2, [pc, #548]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
 80015ee:	e01c      	b.n	800162a <HAL_RCC_OscConfig+0x5a6>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d10c      	bne.n	8001612 <HAL_RCC_OscConfig+0x58e>
 80015f8:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	4a83      	ldr	r2, [pc, #524]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6713      	str	r3, [r2, #112]	; 0x70
 8001604:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a80      	ldr	r2, [pc, #512]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
 8001610:	e00b      	b.n	800162a <HAL_RCC_OscConfig+0x5a6>
 8001612:	4b7e      	ldr	r3, [pc, #504]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a7d      	ldr	r2, [pc, #500]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	4b7b      	ldr	r3, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a7a      	ldr	r2, [pc, #488]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d015      	beq.n	800165e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001632:	f7ff f993 	bl	800095c <HAL_GetTick>
 8001636:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7ff f98f 	bl	800095c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e122      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001650:	4b6e      	ldr	r3, [pc, #440]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ee      	beq.n	800163a <HAL_RCC_OscConfig+0x5b6>
 800165c:	e014      	b.n	8001688 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff f97d 	bl	800095c <HAL_GetTick>
 8001662:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff f979 	bl	800095c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	; 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e10c      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800167c:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ee      	bne.n	8001666 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8101 	beq.w	8001894 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001692:	4b5e      	ldr	r3, [pc, #376]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800169a:	2b18      	cmp	r3, #24
 800169c:	f000 80bc 	beq.w	8001818 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	f040 8095 	bne.w	80017d4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a57      	ldr	r2, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80016b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff f951 	bl	800095c <HAL_GetTick>
 80016ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff f94d 	bl	800095c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e0e2      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016d0:	4b4e      	ldr	r3, [pc, #312]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80016de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016e0:	4b4b      	ldr	r3, [pc, #300]	; (8001810 <HAL_RCC_OscConfig+0x78c>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	430a      	orrs	r2, r1
 80016f0:	4946      	ldr	r1, [pc, #280]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	628b      	str	r3, [r1, #40]	; 0x28
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001704:	3b01      	subs	r3, #1
 8001706:	025b      	lsls	r3, r3, #9
 8001708:	b29b      	uxth	r3, r3
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	3b01      	subs	r3, #1
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	3b01      	subs	r3, #1
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001726:	4939      	ldr	r1, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001728:	4313      	orrs	r3, r2
 800172a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800172c:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	4a36      	ldr	r2, [pc, #216]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800173a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_RCC_OscConfig+0x790>)
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001744:	00d2      	lsls	r2, r2, #3
 8001746:	4931      	ldr	r1, [pc, #196]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001748:	4313      	orrs	r3, r2
 800174a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800174c:	4b2f      	ldr	r3, [pc, #188]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	f023 020c 	bic.w	r2, r3, #12
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	492c      	ldr	r1, [pc, #176]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800175a:	4313      	orrs	r3, r2
 800175c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	f023 0202 	bic.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4928      	ldr	r1, [pc, #160]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800176c:	4313      	orrs	r3, r2
 800176e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001770:	4b26      	ldr	r3, [pc, #152]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	4a25      	ldr	r2, [pc, #148]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	4a22      	ldr	r2, [pc, #136]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	4a1f      	ldr	r2, [pc, #124]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800178e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_RCC_OscConfig+0x788>)
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_RCC_OscConfig+0x788>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80017a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff f8d6 	bl	800095c <HAL_GetTick>
 80017b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff f8d2 	bl	800095c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e067      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x730>
 80017d2:	e05f      	b.n	8001894 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80017da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff f8bc 	bl	800095c <HAL_GetTick>
 80017e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff f8b8 	bl	800095c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e04d      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_RCC_OscConfig+0x788>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x764>
 8001806:	e045      	b.n	8001894 <HAL_RCC_OscConfig+0x810>
 8001808:	58024800 	.word	0x58024800
 800180c:	58024400 	.word	0x58024400
 8001810:	fffffc0c 	.word	0xfffffc0c
 8001814:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_RCC_OscConfig+0x81c>)
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_RCC_OscConfig+0x81c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	2b01      	cmp	r3, #1
 800182a:	d031      	beq.n	8001890 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d12a      	bne.n	8001890 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d122      	bne.n	8001890 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d11a      	bne.n	8001890 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	0a5b      	lsrs	r3, r3, #9
 800185e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001866:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d111      	bne.n	8001890 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	0c1b      	lsrs	r3, r3, #16
 8001870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001878:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d108      	bne.n	8001890 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0e1b      	lsrs	r3, r3, #24
 8001882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3730      	adds	r7, #48	; 0x30
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	58024400 	.word	0x58024400

080018a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e19c      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b8a      	ldr	r3, [pc, #552]	; (8001ae4 <HAL_RCC_ClockConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d910      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b87      	ldr	r3, [pc, #540]	; (8001ae4 <HAL_RCC_ClockConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 020f 	bic.w	r2, r3, #15
 80018ce:	4985      	ldr	r1, [pc, #532]	; (8001ae4 <HAL_RCC_ClockConfig+0x240>)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b83      	ldr	r3, [pc, #524]	; (8001ae4 <HAL_RCC_ClockConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e184      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d010      	beq.n	8001916 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	4b7b      	ldr	r3, [pc, #492]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001900:	429a      	cmp	r2, r3
 8001902:	d908      	bls.n	8001916 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001904:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	4975      	ldr	r1, [pc, #468]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001912:	4313      	orrs	r3, r2
 8001914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d010      	beq.n	8001944 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	4b70      	ldr	r3, [pc, #448]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800192e:	429a      	cmp	r2, r3
 8001930:	d908      	bls.n	8001944 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001932:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	496a      	ldr	r1, [pc, #424]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001940:	4313      	orrs	r3, r2
 8001942:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	d010      	beq.n	8001972 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699a      	ldr	r2, [r3, #24]
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800195c:	429a      	cmp	r2, r3
 800195e:	d908      	bls.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001960:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	495e      	ldr	r1, [pc, #376]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 800196e:	4313      	orrs	r3, r2
 8001970:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	2b00      	cmp	r3, #0
 800197c:	d010      	beq.n	80019a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800198a:	429a      	cmp	r2, r3
 800198c:	d908      	bls.n	80019a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800198e:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4953      	ldr	r1, [pc, #332]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 800199c:	4313      	orrs	r3, r2
 800199e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d010      	beq.n	80019ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d908      	bls.n	80019ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f023 020f 	bic.w	r2, r3, #15
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4947      	ldr	r1, [pc, #284]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d055      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019da:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4940      	ldr	r1, [pc, #256]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019f4:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d121      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0f6      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d115      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0ea      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a24:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0de      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a34:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0d6      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f023 0207 	bic.w	r2, r3, #7
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4925      	ldr	r1, [pc, #148]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7fe ff81 	bl	800095c <HAL_GetTick>
 8001a5a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5e:	f7fe ff7d 	bl	800095c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0be      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d1eb      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d010      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d208      	bcs.n	8001ab4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f023 020f 	bic.w	r2, r3, #15
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_ClockConfig+0x240>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d214      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_RCC_ClockConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 020f 	bic.w	r2, r3, #15
 8001aca:	4906      	ldr	r1, [pc, #24]	; (8001ae4 <HAL_RCC_ClockConfig+0x240>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <HAL_RCC_ClockConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e086      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x34e>
 8001ae4:	52002000 	.word	0x52002000
 8001ae8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d010      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d208      	bcs.n	8001b1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b08:	4b3c      	ldr	r3, [pc, #240]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	4939      	ldr	r1, [pc, #228]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d010      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d208      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	492e      	ldr	r1, [pc, #184]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d208      	bcs.n	8001b76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4922      	ldr	r1, [pc, #136]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d010      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d208      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4917      	ldr	r1, [pc, #92]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ba4:	f000 f834 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	4912      	ldr	r1, [pc, #72]	; (8001c00 <HAL_RCC_ClockConfig+0x35c>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_RCC_ClockConfig+0x358>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_RCC_ClockConfig+0x35c>)
 8001bcc:	5cd3      	ldrb	r3, [r2, r3]
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_RCC_ClockConfig+0x360>)
 8001bda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bdc:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x364>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x368>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fe6e 	bl	80008c8 <HAL_InitTick>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	08002928 	.word	0x08002928
 8001c04:	24000004 	.word	0x24000004
 8001c08:	24000000 	.word	0x24000000
 8001c0c:	24000008 	.word	0x24000008

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c16:	4bb3      	ldr	r3, [pc, #716]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c1e:	2b18      	cmp	r3, #24
 8001c20:	f200 8155 	bhi.w	8001ece <HAL_RCC_GetSysClockFreq+0x2be>
 8001c24:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c91 	.word	0x08001c91
 8001c30:	08001ecf 	.word	0x08001ecf
 8001c34:	08001ecf 	.word	0x08001ecf
 8001c38:	08001ecf 	.word	0x08001ecf
 8001c3c:	08001ecf 	.word	0x08001ecf
 8001c40:	08001ecf 	.word	0x08001ecf
 8001c44:	08001ecf 	.word	0x08001ecf
 8001c48:	08001ecf 	.word	0x08001ecf
 8001c4c:	08001cb7 	.word	0x08001cb7
 8001c50:	08001ecf 	.word	0x08001ecf
 8001c54:	08001ecf 	.word	0x08001ecf
 8001c58:	08001ecf 	.word	0x08001ecf
 8001c5c:	08001ecf 	.word	0x08001ecf
 8001c60:	08001ecf 	.word	0x08001ecf
 8001c64:	08001ecf 	.word	0x08001ecf
 8001c68:	08001ecf 	.word	0x08001ecf
 8001c6c:	08001cbd 	.word	0x08001cbd
 8001c70:	08001ecf 	.word	0x08001ecf
 8001c74:	08001ecf 	.word	0x08001ecf
 8001c78:	08001ecf 	.word	0x08001ecf
 8001c7c:	08001ecf 	.word	0x08001ecf
 8001c80:	08001ecf 	.word	0x08001ecf
 8001c84:	08001ecf 	.word	0x08001ecf
 8001c88:	08001ecf 	.word	0x08001ecf
 8001c8c:	08001cc3 	.word	0x08001cc3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c90:	4b94      	ldr	r3, [pc, #592]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d009      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c9c:	4b91      	ldr	r3, [pc, #580]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	4a90      	ldr	r2, [pc, #576]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001cae:	e111      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001cb0:	4b8d      	ldr	r3, [pc, #564]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cb2:	61bb      	str	r3, [r7, #24]
    break;
 8001cb4:	e10e      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001cb6:	4b8d      	ldr	r3, [pc, #564]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cb8:	61bb      	str	r3, [r7, #24]
    break;
 8001cba:	e10b      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001cbc:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001cbe:	61bb      	str	r3, [r7, #24]
    break;
 8001cc0:	e108      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001cc2:	4b88      	ldr	r3, [pc, #544]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ccc:	4b85      	ldr	r3, [pc, #532]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001cd8:	4b82      	ldr	r3, [pc, #520]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ce2:	4b80      	ldr	r3, [pc, #512]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cfa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80e1 	beq.w	8001ec8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	f000 8083 	beq.w	8001e14 <HAL_RCC_GetSysClockFreq+0x204>
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	f200 80a1 	bhi.w	8001e58 <HAL_RCC_GetSysClockFreq+0x248>
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x114>
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d056      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d22:	e099      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d24:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d02d      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d30:	4b6c      	ldr	r3, [pc, #432]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	4a6b      	ldr	r2, [pc, #428]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d40:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d5a:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d8a:	e087      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d96:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001ef8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d9e:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8001db2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dce:	e065      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dda:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8001dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001df6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e12:	e043      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e26:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e56:	e021      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e62:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e9a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	0a5b      	lsrs	r3, r3, #9
 8001ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec0:	ee17 3a90 	vmov	r3, s15
 8001ec4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
    break;
 8001ecc:	e002      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ed0:	61bb      	str	r3, [r7, #24]
    break;
 8001ed2:	bf00      	nop
  }

  return sysclockfreq;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	03d09000 	.word	0x03d09000
 8001eec:	003d0900 	.word	0x003d0900
 8001ef0:	017d7840 	.word	0x017d7840
 8001ef4:	46000000 	.word	0x46000000
 8001ef8:	4c742400 	.word	0x4c742400
 8001efc:	4a742400 	.word	0x4a742400
 8001f00:	4bbebc20 	.word	0x4bbebc20

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e049      	b.n	8001faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fc0c 	bl	8000748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 fae2 	bl	800250c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e04f      	b.n	800206c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	; (8002078 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01d      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff6:	d018      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_TIM_Base_Start_IT+0xc8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_TIM_Base_Start_IT+0xcc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00e      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_TIM_Base_Start_IT+0xd0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d009      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <HAL_TIM_Base_Start_IT+0xd4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d004      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_TIM_Base_Start_IT+0xd8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d115      	bne.n	8002056 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_TIM_Base_Start_IT+0xdc>)
 8002032:	4013      	ands	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b06      	cmp	r3, #6
 800203a:	d015      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002042:	d011      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	e008      	b.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e000      	b.n	800206a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40010000 	.word	0x40010000
 800207c:	40000400 	.word	0x40000400
 8002080:	40000800 	.word	0x40000800
 8002084:	40000c00 	.word	0x40000c00
 8002088:	40010400 	.word	0x40010400
 800208c:	40001800 	.word	0x40001800
 8002090:	00010007 	.word	0x00010007

08002094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d122      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0202 	mvn.w	r2, #2
 80020c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f9fa 	bl	80024d0 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f9ec 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f9fd 	bl	80024e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d122      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b04      	cmp	r3, #4
 800210a:	d11b      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0204 	mvn.w	r2, #4
 8002114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f9d0 	bl	80024d0 <HAL_TIM_IC_CaptureCallback>
 8002130:	e005      	b.n	800213e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f9c2 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f9d3 	bl	80024e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0208 	mvn.w	r2, #8
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2204      	movs	r2, #4
 800216e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f9a6 	bl	80024d0 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f998 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f9a9 	bl	80024e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0210 	mvn.w	r2, #16
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2208      	movs	r2, #8
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f97c 	bl	80024d0 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f96e 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f97f 	bl	80024e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0201 	mvn.w	r2, #1
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe f94c 	bl	80004b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	2b80      	cmp	r3, #128	; 0x80
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fb2e 	bl	80028a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002252:	d10e      	bne.n	8002272 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	2b80      	cmp	r3, #128	; 0x80
 8002260:	d107      	bne.n	8002272 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800226a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fb21 	bl	80028b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b40      	cmp	r3, #64	; 0x40
 800227e:	d10e      	bne.n	800229e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b40      	cmp	r3, #64	; 0x40
 800228c:	d107      	bne.n	800229e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f92d 	bl	80024f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d10e      	bne.n	80022ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d107      	bne.n	80022ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f06f 0220 	mvn.w	r2, #32
 80022c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fae1 	bl	800288c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_TIM_ConfigClockSource+0x18>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e0db      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x1d0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4b69      	ldr	r3, [pc, #420]	; (80024ac <HAL_TIM_ConfigClockSource+0x1d8>)
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002312:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a63      	ldr	r2, [pc, #396]	; (80024b0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	f000 80a9 	beq.w	800247a <HAL_TIM_ConfigClockSource+0x1a6>
 8002328:	4a61      	ldr	r2, [pc, #388]	; (80024b0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	f200 80ae 	bhi.w	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 8002330:	4a60      	ldr	r2, [pc, #384]	; (80024b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	f000 80a1 	beq.w	800247a <HAL_TIM_ConfigClockSource+0x1a6>
 8002338:	4a5e      	ldr	r2, [pc, #376]	; (80024b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	f200 80a6 	bhi.w	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 8002340:	4a5d      	ldr	r2, [pc, #372]	; (80024b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f000 8099 	beq.w	800247a <HAL_TIM_ConfigClockSource+0x1a6>
 8002348:	4a5b      	ldr	r2, [pc, #364]	; (80024b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	f200 809e 	bhi.w	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 8002350:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002354:	f000 8091 	beq.w	800247a <HAL_TIM_ConfigClockSource+0x1a6>
 8002358:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800235c:	f200 8096 	bhi.w	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 8002360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002364:	f000 8089 	beq.w	800247a <HAL_TIM_ConfigClockSource+0x1a6>
 8002368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800236c:	f200 808e 	bhi.w	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 8002370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002374:	d03e      	beq.n	80023f4 <HAL_TIM_ConfigClockSource+0x120>
 8002376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237a:	f200 8087 	bhi.w	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 800237e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002382:	f000 8085 	beq.w	8002490 <HAL_TIM_ConfigClockSource+0x1bc>
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238a:	d87f      	bhi.n	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 800238c:	2b70      	cmp	r3, #112	; 0x70
 800238e:	d01a      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0xf2>
 8002390:	2b70      	cmp	r3, #112	; 0x70
 8002392:	d87b      	bhi.n	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 8002394:	2b60      	cmp	r3, #96	; 0x60
 8002396:	d050      	beq.n	800243a <HAL_TIM_ConfigClockSource+0x166>
 8002398:	2b60      	cmp	r3, #96	; 0x60
 800239a:	d877      	bhi.n	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 800239c:	2b50      	cmp	r3, #80	; 0x50
 800239e:	d03c      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x146>
 80023a0:	2b50      	cmp	r3, #80	; 0x50
 80023a2:	d873      	bhi.n	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 80023a4:	2b40      	cmp	r3, #64	; 0x40
 80023a6:	d058      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x186>
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d86f      	bhi.n	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 80023ac:	2b30      	cmp	r3, #48	; 0x30
 80023ae:	d064      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x1a6>
 80023b0:	2b30      	cmp	r3, #48	; 0x30
 80023b2:	d86b      	bhi.n	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d060      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x1a6>
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d867      	bhi.n	800248c <HAL_TIM_ConfigClockSource+0x1b8>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d05c      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x1a6>
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d05a      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023c4:	e062      	b.n	800248c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6899      	ldr	r1, [r3, #8]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f000 f9b1 	bl	800273c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	609a      	str	r2, [r3, #8]
      break;
 80023f2:	e04e      	b.n	8002492 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f000 f99a 	bl	800273c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002416:	609a      	str	r2, [r3, #8]
      break;
 8002418:	e03b      	b.n	8002492 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	461a      	mov	r2, r3
 8002428:	f000 f90a 	bl	8002640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2150      	movs	r1, #80	; 0x50
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f964 	bl	8002700 <TIM_ITRx_SetConfig>
      break;
 8002438:	e02b      	b.n	8002492 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	461a      	mov	r2, r3
 8002448:	f000 f929 	bl	800269e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2160      	movs	r1, #96	; 0x60
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f954 	bl	8002700 <TIM_ITRx_SetConfig>
      break;
 8002458:	e01b      	b.n	8002492 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	461a      	mov	r2, r3
 8002468:	f000 f8ea 	bl	8002640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2140      	movs	r1, #64	; 0x40
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f944 	bl	8002700 <TIM_ITRx_SetConfig>
      break;
 8002478:	e00b      	b.n	8002492 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4619      	mov	r1, r3
 8002484:	4610      	mov	r0, r2
 8002486:	f000 f93b 	bl	8002700 <TIM_ITRx_SetConfig>
        break;
 800248a:	e002      	b.n	8002492 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800248c:	bf00      	nop
 800248e:	e000      	b.n	8002492 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8002490:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	ffceff88 	.word	0xffceff88
 80024b0:	00100040 	.word	0x00100040
 80024b4:	00100030 	.word	0x00100030
 80024b8:	00100020 	.word	0x00100020

080024bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a40      	ldr	r2, [pc, #256]	; (8002620 <TIM_Base_SetConfig+0x114>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d00f      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3d      	ldr	r2, [pc, #244]	; (8002624 <TIM_Base_SetConfig+0x118>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00b      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3c      	ldr	r2, [pc, #240]	; (8002628 <TIM_Base_SetConfig+0x11c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3b      	ldr	r2, [pc, #236]	; (800262c <TIM_Base_SetConfig+0x120>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <TIM_Base_SetConfig+0x124>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d108      	bne.n	800255e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <TIM_Base_SetConfig+0x114>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256c:	d01b      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <TIM_Base_SetConfig+0x118>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d017      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a2b      	ldr	r2, [pc, #172]	; (8002628 <TIM_Base_SetConfig+0x11c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a2a      	ldr	r2, [pc, #168]	; (800262c <TIM_Base_SetConfig+0x120>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00f      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a29      	ldr	r2, [pc, #164]	; (8002630 <TIM_Base_SetConfig+0x124>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00b      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a28      	ldr	r2, [pc, #160]	; (8002634 <TIM_Base_SetConfig+0x128>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a27      	ldr	r2, [pc, #156]	; (8002638 <TIM_Base_SetConfig+0x12c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d003      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a26      	ldr	r2, [pc, #152]	; (800263c <TIM_Base_SetConfig+0x130>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d108      	bne.n	80025b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <TIM_Base_SetConfig+0x114>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00f      	beq.n	8002604 <TIM_Base_SetConfig+0xf8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <TIM_Base_SetConfig+0x124>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00b      	beq.n	8002604 <TIM_Base_SetConfig+0xf8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <TIM_Base_SetConfig+0x128>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <TIM_Base_SetConfig+0xf8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <TIM_Base_SetConfig+0x12c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_Base_SetConfig+0xf8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <TIM_Base_SetConfig+0x130>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d103      	bne.n	800260c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	615a      	str	r2, [r3, #20]
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40010000 	.word	0x40010000
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800
 800262c:	40000c00 	.word	0x40000c00
 8002630:	40010400 	.word	0x40010400
 8002634:	40014000 	.word	0x40014000
 8002638:	40014400 	.word	0x40014400
 800263c:	40014800 	.word	0x40014800

08002640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0201 	bic.w	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800266a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 030a 	bic.w	r3, r3, #10
 800267c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	621a      	str	r2, [r3, #32]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f023 0210 	bic.w	r2, r3, #16
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	031b      	lsls	r3, r3, #12
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	621a      	str	r2, [r3, #32]
}
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <TIM_ITRx_SetConfig+0x38>)
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	f043 0307 	orr.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	609a      	str	r2, [r3, #8]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	ffcfff8f 	.word	0xffcfff8f

0800273c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	021a      	lsls	r2, r3, #8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	431a      	orrs	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	609a      	str	r2, [r3, #8]
}
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002790:	2302      	movs	r3, #2
 8002792:	e068      	b.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2e      	ldr	r2, [pc, #184]	; (8002874 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d004      	beq.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d108      	bne.n	80027da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80027ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01d      	beq.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d018      	beq.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00e      	beq.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d004      	beq.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10c      	bne.n	8002854 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	4313      	orrs	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40010000 	.word	0x40010000
 8002878:	40010400 	.word	0x40010400
 800287c:	40000400 	.word	0x40000400
 8002880:	40000800 	.word	0x40000800
 8002884:	40000c00 	.word	0x40000c00
 8002888:	40001800 	.word	0x40001800

0800288c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <__libc_init_array>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	4d0d      	ldr	r5, [pc, #52]	; (8002900 <__libc_init_array+0x38>)
 80028cc:	4c0d      	ldr	r4, [pc, #52]	; (8002904 <__libc_init_array+0x3c>)
 80028ce:	1b64      	subs	r4, r4, r5
 80028d0:	10a4      	asrs	r4, r4, #2
 80028d2:	2600      	movs	r6, #0
 80028d4:	42a6      	cmp	r6, r4
 80028d6:	d109      	bne.n	80028ec <__libc_init_array+0x24>
 80028d8:	4d0b      	ldr	r5, [pc, #44]	; (8002908 <__libc_init_array+0x40>)
 80028da:	4c0c      	ldr	r4, [pc, #48]	; (800290c <__libc_init_array+0x44>)
 80028dc:	f000 f818 	bl	8002910 <_init>
 80028e0:	1b64      	subs	r4, r4, r5
 80028e2:	10a4      	asrs	r4, r4, #2
 80028e4:	2600      	movs	r6, #0
 80028e6:	42a6      	cmp	r6, r4
 80028e8:	d105      	bne.n	80028f6 <__libc_init_array+0x2e>
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f0:	4798      	blx	r3
 80028f2:	3601      	adds	r6, #1
 80028f4:	e7ee      	b.n	80028d4 <__libc_init_array+0xc>
 80028f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028fa:	4798      	blx	r3
 80028fc:	3601      	adds	r6, #1
 80028fe:	e7f2      	b.n	80028e6 <__libc_init_array+0x1e>
 8002900:	08002938 	.word	0x08002938
 8002904:	08002938 	.word	0x08002938
 8002908:	08002938 	.word	0x08002938
 800290c:	0800293c 	.word	0x0800293c

08002910 <_init>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr

0800291c <_fini>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr
