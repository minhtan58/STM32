
H747_Fibocom_FTP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005158  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08005438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000ac  20000010  08005448  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000bc  08005448  000200bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017382  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028b2  00000000  00000000  000373c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b80  00000000  00000000  00039c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a98  00000000  00000000  0003a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dbf6  00000000  00000000  0003b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ecae  00000000  00000000  00078e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019204d  00000000  00000000  00087b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00219b81  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ec8  00000000  00000000  00219bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080053d8 	.word	0x080053d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	080053d8 	.word	0x080053d8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <main+0xc4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 f975 	bl	8000a1c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fa43 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f84b 	bl	80007d0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <main+0xc4>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <main+0xc4>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <main+0xc4>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f001 f829 	bl	80017b0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f001 f83f 	bl	80017e4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <main+0xc4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 f947 	bl	8000a1c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f8ff 	bl	8000990 <MX_GPIO_Init>
  MX_UART8_Init();
 8000792:	f000 f8b1 	bl	80008f8 <MX_UART8_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 8000796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <main+0xc8>)
 800079c:	f000 ffed 	bl	800177a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <main+0xc8>)
 80007a6:	f000 ffe8 	bl	800177a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <main+0xc8>)
 80007b0:	f000 ffe3 	bl	800177a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 80007b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <main+0xc8>)
 80007ba:	f000 ffde 	bl	800177a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f000 fa8d 	bl	8000ce0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 80007c6:	e7e6      	b.n	8000796 <main+0x92>
 80007c8:	58024400 	.word	0x58024400
 80007cc:	58022000 	.word	0x58022000

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0cc      	sub	sp, #304	; 0x130
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007da:	224c      	movs	r2, #76	; 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 fdf2 	bl	80053c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007e8:	2220      	movs	r2, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 fdeb 	bl	80053c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4618      	mov	r0, r3
 80007f6:	23c0      	movs	r3, #192	; 0xc0
 80007f8:	461a      	mov	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f004 fde4 	bl	80053c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000800:	2002      	movs	r0, #2
 8000802:	f001 f803 	bl	800180c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	4b38      	ldr	r3, [pc, #224]	; (80008f0 <SystemClock_Config+0x120>)
 800080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000810:	4a37      	ldr	r2, [pc, #220]	; (80008f0 <SystemClock_Config+0x120>)
 8000812:	f023 0301 	bic.w	r3, r3, #1
 8000816:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000818:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <SystemClock_Config+0x120>)
 800081a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081c:	f003 0201 	and.w	r2, r3, #1
 8000820:	463b      	mov	r3, r7
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <SystemClock_Config+0x124>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800082c:	4a31      	ldr	r2, [pc, #196]	; (80008f4 <SystemClock_Config+0x124>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <SystemClock_Config+0x124>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800083c:	463b      	mov	r3, r7
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	463b      	mov	r3, r7
 8000842:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000844:	bf00      	nop
 8000846:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <SystemClock_Config+0x124>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800084e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000852:	d1f8      	bne.n	8000846 <SystemClock_Config+0x76>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800085a:	2301      	movs	r3, #1
 800085c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000870:	4618      	mov	r0, r3
 8000872:	f001 f825 	bl	80018c0 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800087c:	f000 f8ce 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	233f      	movs	r3, #63	; 0x3f
 8000882:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fc12 	bl	80020e0 <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80008c2:	f000 f8ab 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2202      	movs	r2, #2
 80008ca:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 ff8f 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80008e0:	f000 f89c 	bl	8000a1c <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	58000400 	.word	0x58000400
 80008f4:	58024800 	.word	0x58024800

080008f8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_UART8_Init+0x90>)
 80008fe:	4a23      	ldr	r2, [pc, #140]	; (800098c <MX_UART8_Init+0x94>)
 8000900:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_UART8_Init+0x90>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_UART8_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_UART8_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_UART8_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_UART8_Init+0x90>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_UART8_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_UART8_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_UART8_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_UART8_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_UART8_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000940:	4811      	ldr	r0, [pc, #68]	; (8000988 <MX_UART8_Init+0x90>)
 8000942:	f003 fadb 	bl	8003efc <HAL_UART_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800094c:	f000 f866 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_UART8_Init+0x90>)
 8000954:	f004 fc2f 	bl	80051b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800095e:	f000 f85d 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <MX_UART8_Init+0x90>)
 8000966:	f004 fc64 	bl	8005232 <HAL_UARTEx_SetRxFifoThreshold>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000970:	f000 f854 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_UART8_Init+0x90>)
 8000976:	f004 fbe5 	bl	8005144 <HAL_UARTEx_DisableFifoMode>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000980:	f000 f84c 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000002c 	.word	0x2000002c
 800098c:	40007c00 	.word	0x40007c00

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_GPIO_Init+0x84>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0x88>)
 80009ea:	f000 fead 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_GPIO_Init+0x88>)
 8000a08:	f000 fcee 	bl	80013e8 <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	58024400 	.word	0x58024400
 8000a18:	58022000 	.word	0x58022000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_MspInit+0x30>)
 8000a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x30>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x30>)
 8000a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	58024400 	.word	0x58024400

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1e      	ldr	r2, [pc, #120]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d136      	bne.n	8000aec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a84:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000aba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000acc:	2308      	movs	r3, #8
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <HAL_UART_MspInit+0xa0>)
 8000ad8:	f000 fc86 	bl	80013e8 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2053      	movs	r0, #83	; 0x53
 8000ae2:	f000 fa08 	bl	8000ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000ae6:	2053      	movs	r0, #83	; 0x53
 8000ae8:	f000 fa1f 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40007c00 	.word	0x40007c00
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58022400 	.word	0x58022400

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f8a8 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <UART8_IRQHandler+0x10>)
 8000b5a:	f003 fa1f 	bl	8003f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000002c 	.word	0x2000002c

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b6c:	f7ff fd30 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b72:	e003      	b.n	8000b7c <LoopCopyDataInit>

08000b74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000b76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b7a:	3104      	adds	r1, #4

08000b7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000b80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b84:	d3f6      	bcc.n	8000b74 <CopyDataInit>
  ldr  r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000b88:	e002      	b.n	8000b90 <LoopFillZerobss>

08000b8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b8c:	f842 3b04 	str.w	r3, [r2], #4

08000b90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000b92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b94:	d3f9      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b96:	f004 fbf3 	bl	8005380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fdb3 	bl	8000704 <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ba4:	08005438 	.word	0x08005438
  ldr  r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bac:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000bb0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000bb4:	200000bc 	.word	0x200000bc

08000bb8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC3_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f98c 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bc8:	f001 fc40 	bl	800244c <HAL_RCC_GetSysClockFreq>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_Init+0x68>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	4913      	ldr	r1, [pc, #76]	; (8000c28 <HAL_Init+0x6c>)
 8000bda:	5ccb      	ldrb	r3, [r1, r3]
 8000bdc:	f003 031f 	and.w	r3, r3, #31
 8000be0:	fa22 f303 	lsr.w	r3, r2, r3
 8000be4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_Init+0x68>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_Init+0x6c>)
 8000bf0:	5cd3      	ldrb	r3, [r2, r3]
 8000bf2:	f003 031f 	and.w	r3, r3, #31
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bfc:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <HAL_Init+0x70>)
 8000bfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_Init+0x74>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f814 	bl	8000c34 <HAL_InitTick>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e002      	b.n	8000c1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c16:	f7ff ff07 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	58024400 	.word	0x58024400
 8000c28:	08005400 	.word	0x08005400
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	20000000 	.word	0x20000000

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_InitTick+0x60>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e021      	b.n	8000c8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_InitTick+0x64>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_InitTick+0x60>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f971 	bl	8000f46 <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00e      	b.n	8000c8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d80a      	bhi.n	8000c8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f93b 	bl	8000ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_InitTick+0x68>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000000c 	.word	0x2000000c
 8000cc4:	200000b8 	.word	0x200000b8

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	200000b8 	.word	0x200000b8

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000000c 	.word	0x2000000c

08000d28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetREVID+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	0c1b      	lsrs	r3, r3, #16
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	5c001000 	.word	0x5c001000

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <__NVIC_SetPriorityGrouping+0x40>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x40>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00
 8000d84:	05fa0000 	.word	0x05fa0000

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff8e 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff29 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff40 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff90 	bl	8000e34 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5f 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff33 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa4 	bl	8000e9c <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e205      	b.n	800137e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d004      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e1fa      	b.n	800137e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a8c      	ldr	r2, [pc, #560]	; (80011c0 <HAL_DMA_Abort_IT+0x260>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d04a      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a8b      	ldr	r2, [pc, #556]	; (80011c4 <HAL_DMA_Abort_IT+0x264>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d045      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a89      	ldr	r2, [pc, #548]	; (80011c8 <HAL_DMA_Abort_IT+0x268>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d040      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a88      	ldr	r2, [pc, #544]	; (80011cc <HAL_DMA_Abort_IT+0x26c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d03b      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a86      	ldr	r2, [pc, #536]	; (80011d0 <HAL_DMA_Abort_IT+0x270>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d036      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a85      	ldr	r2, [pc, #532]	; (80011d4 <HAL_DMA_Abort_IT+0x274>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d031      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a83      	ldr	r2, [pc, #524]	; (80011d8 <HAL_DMA_Abort_IT+0x278>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d02c      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a82      	ldr	r2, [pc, #520]	; (80011dc <HAL_DMA_Abort_IT+0x27c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d027      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a80      	ldr	r2, [pc, #512]	; (80011e0 <HAL_DMA_Abort_IT+0x280>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d022      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7f      	ldr	r2, [pc, #508]	; (80011e4 <HAL_DMA_Abort_IT+0x284>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d01d      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a7d      	ldr	r2, [pc, #500]	; (80011e8 <HAL_DMA_Abort_IT+0x288>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d018      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a7c      	ldr	r2, [pc, #496]	; (80011ec <HAL_DMA_Abort_IT+0x28c>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d013      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <HAL_DMA_Abort_IT+0x290>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00e      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a79      	ldr	r2, [pc, #484]	; (80011f4 <HAL_DMA_Abort_IT+0x294>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d009      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a77      	ldr	r2, [pc, #476]	; (80011f8 <HAL_DMA_Abort_IT+0x298>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d004      	beq.n	8001028 <HAL_DMA_Abort_IT+0xc8>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a76      	ldr	r2, [pc, #472]	; (80011fc <HAL_DMA_Abort_IT+0x29c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_DMA_Abort_IT+0xcc>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <HAL_DMA_Abort_IT+0xce>
 800102c:	2300      	movs	r3, #0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d065      	beq.n	80010fe <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2204      	movs	r2, #4
 8001036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a60      	ldr	r2, [pc, #384]	; (80011c0 <HAL_DMA_Abort_IT+0x260>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d04a      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a5e      	ldr	r2, [pc, #376]	; (80011c4 <HAL_DMA_Abort_IT+0x264>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d045      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a5d      	ldr	r2, [pc, #372]	; (80011c8 <HAL_DMA_Abort_IT+0x268>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d040      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a5b      	ldr	r2, [pc, #364]	; (80011cc <HAL_DMA_Abort_IT+0x26c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d03b      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <HAL_DMA_Abort_IT+0x270>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d036      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a58      	ldr	r2, [pc, #352]	; (80011d4 <HAL_DMA_Abort_IT+0x274>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d031      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a57      	ldr	r2, [pc, #348]	; (80011d8 <HAL_DMA_Abort_IT+0x278>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d02c      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a55      	ldr	r2, [pc, #340]	; (80011dc <HAL_DMA_Abort_IT+0x27c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d027      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a54      	ldr	r2, [pc, #336]	; (80011e0 <HAL_DMA_Abort_IT+0x280>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d022      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a52      	ldr	r2, [pc, #328]	; (80011e4 <HAL_DMA_Abort_IT+0x284>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01d      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a51      	ldr	r2, [pc, #324]	; (80011e8 <HAL_DMA_Abort_IT+0x288>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d018      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <HAL_DMA_Abort_IT+0x28c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a4e      	ldr	r2, [pc, #312]	; (80011f0 <HAL_DMA_Abort_IT+0x290>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00e      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_DMA_Abort_IT+0x294>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d009      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a4b      	ldr	r2, [pc, #300]	; (80011f8 <HAL_DMA_Abort_IT+0x298>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d004      	beq.n	80010da <HAL_DMA_Abort_IT+0x17a>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a49      	ldr	r2, [pc, #292]	; (80011fc <HAL_DMA_Abort_IT+0x29c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d108      	bne.n	80010ec <HAL_DMA_Abort_IT+0x18c>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e147      	b.n	800137c <HAL_DMA_Abort_IT+0x41c>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e13e      	b.n	800137c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 020e 	bic.w	r2, r2, #14
 800110c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <HAL_DMA_Abort_IT+0x260>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d04a      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a29      	ldr	r2, [pc, #164]	; (80011c4 <HAL_DMA_Abort_IT+0x264>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d045      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_DMA_Abort_IT+0x268>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d040      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a26      	ldr	r2, [pc, #152]	; (80011cc <HAL_DMA_Abort_IT+0x26c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d03b      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a25      	ldr	r2, [pc, #148]	; (80011d0 <HAL_DMA_Abort_IT+0x270>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d036      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <HAL_DMA_Abort_IT+0x274>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d031      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_DMA_Abort_IT+0x278>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d02c      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a20      	ldr	r2, [pc, #128]	; (80011dc <HAL_DMA_Abort_IT+0x27c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d027      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_DMA_Abort_IT+0x280>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d022      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_DMA_Abort_IT+0x284>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01d      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <HAL_DMA_Abort_IT+0x288>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d018      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <HAL_DMA_Abort_IT+0x28c>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <HAL_DMA_Abort_IT+0x290>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d00e      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <HAL_DMA_Abort_IT+0x294>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d009      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <HAL_DMA_Abort_IT+0x298>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d004      	beq.n	80011ae <HAL_DMA_Abort_IT+0x24e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_DMA_Abort_IT+0x29c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d128      	bne.n	8001200 <HAL_DMA_Abort_IT+0x2a0>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0201 	bic.w	r2, r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e027      	b.n	8001210 <HAL_DMA_Abort_IT+0x2b0>
 80011c0:	40020010 	.word	0x40020010
 80011c4:	40020028 	.word	0x40020028
 80011c8:	40020040 	.word	0x40020040
 80011cc:	40020058 	.word	0x40020058
 80011d0:	40020070 	.word	0x40020070
 80011d4:	40020088 	.word	0x40020088
 80011d8:	400200a0 	.word	0x400200a0
 80011dc:	400200b8 	.word	0x400200b8
 80011e0:	40020410 	.word	0x40020410
 80011e4:	40020428 	.word	0x40020428
 80011e8:	40020440 	.word	0x40020440
 80011ec:	40020458 	.word	0x40020458
 80011f0:	40020470 	.word	0x40020470
 80011f4:	40020488 	.word	0x40020488
 80011f8:	400204a0 	.word	0x400204a0
 80011fc:	400204b8 	.word	0x400204b8
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a5c      	ldr	r2, [pc, #368]	; (8001388 <HAL_DMA_Abort_IT+0x428>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d072      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a5b      	ldr	r2, [pc, #364]	; (800138c <HAL_DMA_Abort_IT+0x42c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d06d      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a59      	ldr	r2, [pc, #356]	; (8001390 <HAL_DMA_Abort_IT+0x430>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d068      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a58      	ldr	r2, [pc, #352]	; (8001394 <HAL_DMA_Abort_IT+0x434>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d063      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a56      	ldr	r2, [pc, #344]	; (8001398 <HAL_DMA_Abort_IT+0x438>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d05e      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a55      	ldr	r2, [pc, #340]	; (800139c <HAL_DMA_Abort_IT+0x43c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d059      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a53      	ldr	r2, [pc, #332]	; (80013a0 <HAL_DMA_Abort_IT+0x440>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d054      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_DMA_Abort_IT+0x444>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d04f      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a50      	ldr	r2, [pc, #320]	; (80013a8 <HAL_DMA_Abort_IT+0x448>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d04a      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a4f      	ldr	r2, [pc, #316]	; (80013ac <HAL_DMA_Abort_IT+0x44c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d045      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <HAL_DMA_Abort_IT+0x450>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d040      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_DMA_Abort_IT+0x454>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d03b      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a4a      	ldr	r2, [pc, #296]	; (80013b8 <HAL_DMA_Abort_IT+0x458>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d036      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a49      	ldr	r2, [pc, #292]	; (80013bc <HAL_DMA_Abort_IT+0x45c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d031      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a47      	ldr	r2, [pc, #284]	; (80013c0 <HAL_DMA_Abort_IT+0x460>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d02c      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a46      	ldr	r2, [pc, #280]	; (80013c4 <HAL_DMA_Abort_IT+0x464>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d027      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <HAL_DMA_Abort_IT+0x468>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d022      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a43      	ldr	r2, [pc, #268]	; (80013cc <HAL_DMA_Abort_IT+0x46c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d01d      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a41      	ldr	r2, [pc, #260]	; (80013d0 <HAL_DMA_Abort_IT+0x470>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d018      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a40      	ldr	r2, [pc, #256]	; (80013d4 <HAL_DMA_Abort_IT+0x474>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d013      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a3e      	ldr	r2, [pc, #248]	; (80013d8 <HAL_DMA_Abort_IT+0x478>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00e      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a3d      	ldr	r2, [pc, #244]	; (80013dc <HAL_DMA_Abort_IT+0x47c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d009      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a3b      	ldr	r2, [pc, #236]	; (80013e0 <HAL_DMA_Abort_IT+0x480>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d004      	beq.n	8001300 <HAL_DMA_Abort_IT+0x3a0>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <HAL_DMA_Abort_IT+0x484>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_DMA_Abort_IT+0x3a4>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <HAL_DMA_Abort_IT+0x3a6>
 8001304:	2300      	movs	r3, #0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d028      	beq.n	800135c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001318:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	2201      	movs	r2, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001338:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00c      	beq.n	800135c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800134c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001350:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800135a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40020010 	.word	0x40020010
 800138c:	40020028 	.word	0x40020028
 8001390:	40020040 	.word	0x40020040
 8001394:	40020058 	.word	0x40020058
 8001398:	40020070 	.word	0x40020070
 800139c:	40020088 	.word	0x40020088
 80013a0:	400200a0 	.word	0x400200a0
 80013a4:	400200b8 	.word	0x400200b8
 80013a8:	40020410 	.word	0x40020410
 80013ac:	40020428 	.word	0x40020428
 80013b0:	40020440 	.word	0x40020440
 80013b4:	40020458 	.word	0x40020458
 80013b8:	40020470 	.word	0x40020470
 80013bc:	40020488 	.word	0x40020488
 80013c0:	400204a0 	.word	0x400204a0
 80013c4:	400204b8 	.word	0x400204b8
 80013c8:	58025408 	.word	0x58025408
 80013cc:	5802541c 	.word	0x5802541c
 80013d0:	58025430 	.word	0x58025430
 80013d4:	58025444 	.word	0x58025444
 80013d8:	58025458 	.word	0x58025458
 80013dc:	5802546c 	.word	0x5802546c
 80013e0:	58025480 	.word	0x58025480
 80013e4:	58025494 	.word	0x58025494

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013f6:	4b89      	ldr	r3, [pc, #548]	; (800161c <HAL_GPIO_Init+0x234>)
 80013f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013fa:	e194      	b.n	8001726 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8186 	beq.w	8001720 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d00b      	beq.n	8001434 <HAL_GPIO_Init+0x4c>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d007      	beq.n	8001434 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001428:	2b11      	cmp	r3, #17
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b12      	cmp	r3, #18
 8001432:	d130      	bne.n	8001496 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146a:	2201      	movs	r2, #1
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f003 0201 	and.w	r2, r3, #1
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0xee>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b12      	cmp	r3, #18
 80014d4:	d123      	bne.n	800151e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	69b9      	ldr	r1, [r7, #24]
 800151a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0203 	and.w	r2, r3, #3
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80e0 	beq.w	8001720 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <HAL_GPIO_Init+0x238>)
 8001562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001566:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <HAL_GPIO_Init+0x238>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_GPIO_Init+0x238>)
 8001572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157e:	4a29      	ldr	r2, [pc, #164]	; (8001624 <HAL_GPIO_Init+0x23c>)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_GPIO_Init+0x240>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d052      	beq.n	8001650 <HAL_GPIO_Init+0x268>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a1f      	ldr	r2, [pc, #124]	; (800162c <HAL_GPIO_Init+0x244>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d031      	beq.n	8001616 <HAL_GPIO_Init+0x22e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_GPIO_Init+0x248>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d02b      	beq.n	8001612 <HAL_GPIO_Init+0x22a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <HAL_GPIO_Init+0x24c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d025      	beq.n	800160e <HAL_GPIO_Init+0x226>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <HAL_GPIO_Init+0x250>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d01f      	beq.n	800160a <HAL_GPIO_Init+0x222>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <HAL_GPIO_Init+0x254>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d019      	beq.n	8001606 <HAL_GPIO_Init+0x21e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a1a      	ldr	r2, [pc, #104]	; (8001640 <HAL_GPIO_Init+0x258>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0x21a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_GPIO_Init+0x25c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d00d      	beq.n	80015fe <HAL_GPIO_Init+0x216>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a18      	ldr	r2, [pc, #96]	; (8001648 <HAL_GPIO_Init+0x260>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d007      	beq.n	80015fa <HAL_GPIO_Init+0x212>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_GPIO_Init+0x264>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_GPIO_Init+0x20e>
 80015f2:	2309      	movs	r3, #9
 80015f4:	e02d      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 80015f6:	230a      	movs	r3, #10
 80015f8:	e02b      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 80015fa:	2308      	movs	r3, #8
 80015fc:	e029      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 80015fe:	2307      	movs	r3, #7
 8001600:	e027      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 8001602:	2306      	movs	r3, #6
 8001604:	e025      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 8001606:	2305      	movs	r3, #5
 8001608:	e023      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 800160a:	2304      	movs	r3, #4
 800160c:	e021      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 800160e:	2303      	movs	r3, #3
 8001610:	e01f      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 8001612:	2302      	movs	r3, #2
 8001614:	e01d      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 8001616:	2301      	movs	r3, #1
 8001618:	e01b      	b.n	8001652 <HAL_GPIO_Init+0x26a>
 800161a:	bf00      	nop
 800161c:	58000080 	.word	0x58000080
 8001620:	58024400 	.word	0x58024400
 8001624:	58000400 	.word	0x58000400
 8001628:	58020000 	.word	0x58020000
 800162c:	58020400 	.word	0x58020400
 8001630:	58020800 	.word	0x58020800
 8001634:	58020c00 	.word	0x58020c00
 8001638:	58021000 	.word	0x58021000
 800163c:	58021400 	.word	0x58021400
 8001640:	58021800 	.word	0x58021800
 8001644:	58021c00 	.word	0x58021c00
 8001648:	58022000 	.word	0x58022000
 800164c:	58022400 	.word	0x58022400
 8001650:	2300      	movs	r3, #0
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	f002 0203 	and.w	r2, r2, #3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4093      	lsls	r3, r2
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001662:	4938      	ldr	r1, [pc, #224]	; (8001744 <HAL_GPIO_Init+0x35c>)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	3301      	adds	r3, #1
 8001724:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	f47f ae63 	bne.w	80013fc <HAL_GPIO_Init+0x14>
  }
}
 8001736:	bf00      	nop
 8001738:	bf00      	nop
 800173a:	3724      	adds	r7, #36	; 0x24
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	58000400 	.word	0x58000400

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001764:	e003      	b.n	800176e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	619a      	str	r2, [r3, #24]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	401a      	ands	r2, r3
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	429a      	cmp	r2, r3
 8001792:	d104      	bne.n	800179e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	041a      	lsls	r2, r3, #16
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80017b8:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_HSEM_FastTake+0x2c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3320      	adds	r3, #32
 80017be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_HSEM_FastTake+0x30>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e000      	b.n	80017ce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	58026400 	.word	0x58026400
 80017e0:	80000300 	.word	0x80000300

080017e4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80017ee:	4906      	ldr	r1, [pc, #24]	; (8001808 <HAL_HSEM_Release+0x24>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	58026400 	.word	0x58026400

0800180c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	2b06      	cmp	r3, #6
 800181e:	d00a      	beq.n	8001836 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	d001      	beq.n	8001832 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e040      	b.n	80018b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e03e      	b.n	80018b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800183e:	491f      	ldr	r1, [pc, #124]	; (80018bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4313      	orrs	r3, r2
 8001844:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001846:	f7ff fa3f 	bl	8000cc8 <HAL_GetTick>
 800184a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800184c:	e009      	b.n	8001862 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800184e:	f7ff fa3b 	bl	8000cc8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800185c:	d901      	bls.n	8001862 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e028      	b.n	80018b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800186a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800186e:	d1ee      	bne.n	800184e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b1e      	cmp	r3, #30
 8001874:	d008      	beq.n	8001888 <HAL_PWREx_ConfigSupply+0x7c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b2e      	cmp	r3, #46	; 0x2e
 800187a:	d005      	beq.n	8001888 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b1d      	cmp	r3, #29
 8001880:	d002      	beq.n	8001888 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b2d      	cmp	r3, #45	; 0x2d
 8001886:	d114      	bne.n	80018b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001888:	f7ff fa1e 	bl	8000cc8 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800188e:	e009      	b.n	80018a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001890:	f7ff fa1a 	bl	8000cc8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800189e:	d901      	bls.n	80018a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e007      	b.n	80018b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_PWREx_ConfigSupply+0xb0>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d1ee      	bne.n	8001890 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	58024800 	.word	0x58024800

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e3ff      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8087 	beq.w	80019ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e0:	4b99      	ldr	r3, [pc, #612]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018ea:	4b97      	ldr	r3, [pc, #604]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d007      	beq.n	8001906 <HAL_RCC_OscConfig+0x46>
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	2b18      	cmp	r3, #24
 80018fa:	d110      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
 80018fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d10b      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001906:	4b90      	ldr	r3, [pc, #576]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d06c      	beq.n	80019ec <HAL_RCC_OscConfig+0x12c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d168      	bne.n	80019ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e3d9      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x76>
 8001928:	4b87      	ldr	r3, [pc, #540]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a86      	ldr	r2, [pc, #536]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e02e      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x98>
 800193e:	4b82      	ldr	r3, [pc, #520]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a81      	ldr	r2, [pc, #516]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7e      	ldr	r2, [pc, #504]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0xbc>
 8001962:	4b79      	ldr	r3, [pc, #484]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a78      	ldr	r2, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a75      	ldr	r2, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 800197c:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f994 	bl	8000cc8 <HAL_GetTick>
 80019a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff f990 	bl	8000cc8 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e38d      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b6:	4b64      	ldr	r3, [pc, #400]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xe4>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f980 	bl	8000cc8 <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff f97c 	bl	8000cc8 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e379      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019de:	4b5a      	ldr	r3, [pc, #360]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x10c>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80ae 	beq.w	8001b58 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fc:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <HAL_RCC_OscConfig+0x162>
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	2b18      	cmp	r3, #24
 8001a16:	d13a      	bne.n	8001a8e <HAL_RCC_OscConfig+0x1ce>
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d135      	bne.n	8001a8e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x17a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e34b      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	f7ff f975 	bl	8000d28 <HAL_GetREVID>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d817      	bhi.n	8001a78 <HAL_RCC_OscConfig+0x1b8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d108      	bne.n	8001a62 <HAL_RCC_OscConfig+0x1a2>
 8001a50:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a58:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a60:	e07a      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	031b      	lsls	r3, r3, #12
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a76:	e06f      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	4930      	ldr	r1, [pc, #192]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a8c:	e064      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d045      	beq.n	8001b22 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0219 	bic.w	r2, r3, #25
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4929      	ldr	r1, [pc, #164]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f90e 	bl	8000cc8 <HAL_GetTick>
 8001aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7ff f90a 	bl	8000cc8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e307      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	f7ff f92b 	bl	8000d28 <HAL_GetREVID>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d817      	bhi.n	8001b0c <HAL_RCC_OscConfig+0x24c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2b40      	cmp	r3, #64	; 0x40
 8001ae2:	d108      	bne.n	8001af6 <HAL_RCC_OscConfig+0x236>
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001aec:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af2:	6053      	str	r3, [r2, #4]
 8001af4:	e030      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	031b      	lsls	r3, r3, #12
 8001b04:	4910      	ldr	r1, [pc, #64]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
 8001b0a:	e025      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	490b      	ldr	r1, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	e01a      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f8cb 	bl	8000cc8 <HAL_GetTick>
 8001b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b36:	f7ff f8c7 	bl	8000cc8 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d903      	bls.n	8001b4c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e2c4      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
 8001b48:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b4c:	4ba4      	ldr	r3, [pc, #656]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a9 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	4b9e      	ldr	r3, [pc, #632]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b70:	4b9b      	ldr	r3, [pc, #620]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d007      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2cc>
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b18      	cmp	r3, #24
 8001b80:	d13a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x338>
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d135      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b8c:	4b94      	ldr	r3, [pc, #592]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2e4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b80      	cmp	r3, #128	; 0x80
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e296      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ba4:	f7ff f8c0 	bl	8000d28 <HAL_GetREVID>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d817      	bhi.n	8001be2 <HAL_RCC_OscConfig+0x322>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_OscConfig+0x30c>
 8001bba:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001bc2:	4a87      	ldr	r2, [pc, #540]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bc8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bca:	e075      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bcc:	4b84      	ldr	r3, [pc, #528]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	069b      	lsls	r3, r3, #26
 8001bda:	4981      	ldr	r1, [pc, #516]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001be0:	e06a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001be2:	4b7f      	ldr	r3, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	061b      	lsls	r3, r3, #24
 8001bf0:	497b      	ldr	r1, [pc, #492]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bf6:	e05f      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d042      	beq.n	8001c86 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c00:	4b77      	ldr	r3, [pc, #476]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a76      	ldr	r2, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f85c 	bl	8000cc8 <HAL_GetTick>
 8001c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c14:	f7ff f858 	bl	8000cc8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e255      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c26:	4b6e      	ldr	r3, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c32:	f7ff f879 	bl	8000d28 <HAL_GetREVID>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d817      	bhi.n	8001c70 <HAL_RCC_OscConfig+0x3b0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d108      	bne.n	8001c5a <HAL_RCC_OscConfig+0x39a>
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c50:	4a63      	ldr	r2, [pc, #396]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c56:	6053      	str	r3, [r2, #4]
 8001c58:	e02e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
 8001c5a:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	069b      	lsls	r3, r3, #26
 8001c68:	495d      	ldr	r1, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
 8001c6e:	e023      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
 8001c70:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	4958      	ldr	r1, [pc, #352]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
 8001c84:	e018      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c86:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a55      	ldr	r2, [pc, #340]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff f819 	bl	8000cc8 <HAL_GetTick>
 8001c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f815 	bl	8000cc8 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e212      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d036      	beq.n	8001d32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d019      	beq.n	8001d00 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ccc:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd0:	4a43      	ldr	r2, [pc, #268]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7fe fff6 	bl	8000cc8 <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7fe fff2 	bl	8000cc8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1ef      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x420>
 8001cfe:	e018      	b.n	8001d32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d04:	4a36      	ldr	r2, [pc, #216]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7fe ffdc 	bl	8000cc8 <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d14:	f7fe ffd8 	bl	8000cc8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1d5      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d26:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d036      	beq.n	8001dac <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d019      	beq.n	8001d7a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d52:	f7fe ffb9 	bl	8000cc8 <HAL_GetTick>
 8001d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d5a:	f7fe ffb5 	bl	8000cc8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1b2      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x49a>
 8001d78:	e018      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff9f 	bl	8000cc8 <HAL_GetTick>
 8001d8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d8e:	f7fe ff9b 	bl	8000cc8 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e198      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8085 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_RCC_OscConfig+0x524>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_OscConfig+0x524>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dc6:	f7fe ff7f 	bl	8000cc8 <HAL_GetTick>
 8001dca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dcc:	e00c      	b.n	8001de8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7fe ff7b 	bl	8000cc8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d905      	bls.n	8001de8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e178      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
 8001de0:	58024400 	.word	0x58024400
 8001de4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de8:	4b96      	ldr	r3, [pc, #600]	; (8002044 <HAL_RCC_OscConfig+0x784>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ec      	beq.n	8001dce <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x54a>
 8001dfc:	4b92      	ldr	r3, [pc, #584]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a91      	ldr	r2, [pc, #580]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
 8001e08:	e02d      	b.n	8001e66 <HAL_RCC_OscConfig+0x5a6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x56c>
 8001e12:	4b8d      	ldr	r3, [pc, #564]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	4a8c      	ldr	r2, [pc, #560]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1e:	4b8a      	ldr	r3, [pc, #552]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	4a89      	ldr	r2, [pc, #548]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2a:	e01c      	b.n	8001e66 <HAL_RCC_OscConfig+0x5a6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d10c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x58e>
 8001e34:	4b84      	ldr	r3, [pc, #528]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a83      	ldr	r2, [pc, #524]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e40:	4b81      	ldr	r3, [pc, #516]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a80      	ldr	r2, [pc, #512]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	e00b      	b.n	8001e66 <HAL_RCC_OscConfig+0x5a6>
 8001e4e:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	4a7d      	ldr	r2, [pc, #500]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5a:	4b7b      	ldr	r3, [pc, #492]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	4a7a      	ldr	r2, [pc, #488]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d015      	beq.n	8001e9a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7fe ff2b 	bl	8000cc8 <HAL_GetTick>
 8001e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7fe ff27 	bl	8000cc8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e122      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e8c:	4b6e      	ldr	r3, [pc, #440]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ee      	beq.n	8001e76 <HAL_RCC_OscConfig+0x5b6>
 8001e98:	e014      	b.n	8001ec4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7fe ff15 	bl	8000cc8 <HAL_GetTick>
 8001e9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7fe ff11 	bl	8000cc8 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e10c      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eb8:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ee      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8101 	beq.w	80020d0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ece:	4b5e      	ldr	r3, [pc, #376]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ed6:	2b18      	cmp	r3, #24
 8001ed8:	f000 80bc 	beq.w	8002054 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	f040 8095 	bne.w	8002010 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b58      	ldr	r3, [pc, #352]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a57      	ldr	r2, [pc, #348]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fee9 	bl	8000cc8 <HAL_GetTick>
 8001ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efa:	f7fe fee5 	bl	8000cc8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0e2      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f0c:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	; (800204c <HAL_RCC_OscConfig+0x78c>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	4946      	ldr	r1, [pc, #280]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	628b      	str	r3, [r1, #40]	; 0x28
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	3b01      	subs	r3, #1
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f62:	4939      	ldr	r1, [pc, #228]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001f68:	4b37      	ldr	r3, [pc, #220]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	4a36      	ldr	r2, [pc, #216]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HAL_RCC_OscConfig+0x790>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f80:	00d2      	lsls	r2, r2, #3
 8001f82:	4931      	ldr	r1, [pc, #196]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f023 020c 	bic.w	r2, r3, #12
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	492c      	ldr	r1, [pc, #176]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	f023 0202 	bic.w	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4928      	ldr	r1, [pc, #160]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fb8:	4b23      	ldr	r3, [pc, #140]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	4a22      	ldr	r2, [pc, #136]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fe6e 	bl	8000cc8 <HAL_GetTick>
 8001fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7fe fe6a 	bl	8000cc8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e067      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x730>
 800200e:	e05f      	b.n	80020d0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8002016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe fe54 	bl	8000cc8 <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002024:	f7fe fe50 	bl	8000cc8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e04d      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x764>
 8002042:	e045      	b.n	80020d0 <HAL_RCC_OscConfig+0x810>
 8002044:	58024800 	.word	0x58024800
 8002048:	58024400 	.word	0x58024400
 800204c:	fffffc0c 	.word	0xfffffc0c
 8002050:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_RCC_OscConfig+0x81c>)
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_RCC_OscConfig+0x81c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2b01      	cmp	r3, #1
 8002066:	d031      	beq.n	80020cc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0203 	and.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d12a      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d122      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d11a      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	0a5b      	lsrs	r3, r3, #9
 800209a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d111      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	0c1b      	lsrs	r3, r3, #16
 80020ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d108      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0e1b      	lsrs	r3, r3, #24
 80020be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	58024400 	.word	0x58024400

080020e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e19c      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b8a      	ldr	r3, [pc, #552]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d910      	bls.n	8002124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b87      	ldr	r3, [pc, #540]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 020f 	bic.w	r2, r3, #15
 800210a:	4985      	ldr	r1, [pc, #532]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b83      	ldr	r3, [pc, #524]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e184      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d010      	beq.n	8002152 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800213c:	429a      	cmp	r2, r3
 800213e:	d908      	bls.n	8002152 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002140:	4b78      	ldr	r3, [pc, #480]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4975      	ldr	r1, [pc, #468]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800214e:	4313      	orrs	r3, r2
 8002150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d010      	beq.n	8002180 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	4b70      	ldr	r3, [pc, #448]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800216a:	429a      	cmp	r2, r3
 800216c:	d908      	bls.n	8002180 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800216e:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	496a      	ldr	r1, [pc, #424]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800217c:	4313      	orrs	r3, r2
 800217e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	4b64      	ldr	r3, [pc, #400]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002198:	429a      	cmp	r2, r3
 800219a:	d908      	bls.n	80021ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	495e      	ldr	r1, [pc, #376]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	4b59      	ldr	r3, [pc, #356]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80021ca:	4b56      	ldr	r3, [pc, #344]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4953      	ldr	r1, [pc, #332]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d908      	bls.n	800220a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f023 020f 	bic.w	r2, r3, #15
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4947      	ldr	r1, [pc, #284]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002206:	4313      	orrs	r3, r2
 8002208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d055      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4940      	ldr	r1, [pc, #256]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002224:	4313      	orrs	r3, r2
 8002226:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002230:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d121      	bne.n	8002280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0f6      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d107      	bne.n	8002258 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d115      	bne.n	8002280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0ea      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002260:	4b30      	ldr	r3, [pc, #192]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0de      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0d6      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f023 0207 	bic.w	r2, r3, #7
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4925      	ldr	r1, [pc, #148]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800228e:	4313      	orrs	r3, r2
 8002290:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7fe fd19 	bl	8000cc8 <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229a:	f7fe fd15 	bl	8000cc8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0be      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	429a      	cmp	r2, r3
 80022c0:	d1eb      	bne.n	800229a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d010      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	429a      	cmp	r2, r3
 80022dc:	d208      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f023 020f 	bic.w	r2, r3, #15
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	490e      	ldr	r1, [pc, #56]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d214      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 020f 	bic.w	r2, r3, #15
 8002306:	4906      	ldr	r1, [pc, #24]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e086      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
 8002320:	52002000 	.word	0x52002000
 8002324:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d010      	beq.n	8002356 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002340:	429a      	cmp	r2, r3
 8002342:	d208      	bcs.n	8002356 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002344:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	4939      	ldr	r1, [pc, #228]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002352:	4313      	orrs	r3, r2
 8002354:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d010      	beq.n	8002384 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800236e:	429a      	cmp	r2, r3
 8002370:	d208      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002372:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	492e      	ldr	r1, [pc, #184]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002380:	4313      	orrs	r3, r2
 8002382:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800239c:	429a      	cmp	r2, r3
 800239e:	d208      	bcs.n	80023b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4922      	ldr	r1, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d208      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4917      	ldr	r1, [pc, #92]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023e0:	f000 f834 	bl	800244c <HAL_RCC_GetSysClockFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	4912      	ldr	r1, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x35c>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
 80023fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	4a0d      	ldr	r2, [pc, #52]	; (800243c <HAL_RCC_ClockConfig+0x35c>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x360>)
 8002416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x364>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_RCC_ClockConfig+0x368>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fc06 	bl	8000c34 <HAL_InitTick>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	58024400 	.word	0x58024400
 800243c:	08005400 	.word	0x08005400
 8002440:	20000004 	.word	0x20000004
 8002444:	20000000 	.word	0x20000000
 8002448:	20000008 	.word	0x20000008

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002452:	4bb3      	ldr	r3, [pc, #716]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800245a:	2b18      	cmp	r3, #24
 800245c:	f200 8155 	bhi.w	800270a <HAL_RCC_GetSysClockFreq+0x2be>
 8002460:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	080024cd 	.word	0x080024cd
 800246c:	0800270b 	.word	0x0800270b
 8002470:	0800270b 	.word	0x0800270b
 8002474:	0800270b 	.word	0x0800270b
 8002478:	0800270b 	.word	0x0800270b
 800247c:	0800270b 	.word	0x0800270b
 8002480:	0800270b 	.word	0x0800270b
 8002484:	0800270b 	.word	0x0800270b
 8002488:	080024f3 	.word	0x080024f3
 800248c:	0800270b 	.word	0x0800270b
 8002490:	0800270b 	.word	0x0800270b
 8002494:	0800270b 	.word	0x0800270b
 8002498:	0800270b 	.word	0x0800270b
 800249c:	0800270b 	.word	0x0800270b
 80024a0:	0800270b 	.word	0x0800270b
 80024a4:	0800270b 	.word	0x0800270b
 80024a8:	080024f9 	.word	0x080024f9
 80024ac:	0800270b 	.word	0x0800270b
 80024b0:	0800270b 	.word	0x0800270b
 80024b4:	0800270b 	.word	0x0800270b
 80024b8:	0800270b 	.word	0x0800270b
 80024bc:	0800270b 	.word	0x0800270b
 80024c0:	0800270b 	.word	0x0800270b
 80024c4:	0800270b 	.word	0x0800270b
 80024c8:	080024ff 	.word	0x080024ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024cc:	4b94      	ldr	r3, [pc, #592]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024d8:	4b91      	ldr	r3, [pc, #580]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	4a90      	ldr	r2, [pc, #576]	; (8002724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80024ea:	e111      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024ec:	4b8d      	ldr	r3, [pc, #564]	; (8002724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024ee:	61bb      	str	r3, [r7, #24]
    break;
 80024f0:	e10e      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80024f2:	4b8d      	ldr	r3, [pc, #564]	; (8002728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024f4:	61bb      	str	r3, [r7, #24]
    break;
 80024f6:	e10b      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80024f8:	4b8c      	ldr	r3, [pc, #560]	; (800272c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024fa:	61bb      	str	r3, [r7, #24]
    break;
 80024fc:	e108      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024fe:	4b88      	ldr	r3, [pc, #544]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002508:	4b85      	ldr	r3, [pc, #532]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002512:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002514:	4b82      	ldr	r3, [pc, #520]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800251e:	4b80      	ldr	r3, [pc, #512]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002536:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80e1 	beq.w	8002704 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b02      	cmp	r3, #2
 8002546:	f000 8083 	beq.w	8002650 <HAL_RCC_GetSysClockFreq+0x204>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b02      	cmp	r3, #2
 800254e:	f200 80a1 	bhi.w	8002694 <HAL_RCC_GetSysClockFreq+0x248>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x114>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d056      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x1c0>
 800255e:	e099      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002560:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02d      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800256c:	4b6c      	ldr	r3, [pc, #432]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	4a6b      	ldr	r2, [pc, #428]	; (8002724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002596:	4b62      	ldr	r3, [pc, #392]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80025c6:	e087      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002734 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025da:	4b51      	ldr	r3, [pc, #324]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800260a:	e065      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002616:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002738 <HAL_RCC_GetSysClockFreq+0x2ec>
 800261a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800261e:	4b40      	ldr	r3, [pc, #256]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002632:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800263a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800263e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800264e:	e043      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800273c <HAL_RCC_GetSysClockFreq+0x2f0>
 800265e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002672:	ed97 6a02 	vldr	s12, [r7, #8]
 8002676:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 800267a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800267e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002692:	e021      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002738 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	0a5b      	lsrs	r3, r3, #9
 80026de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026e2:	3301      	adds	r3, #1
 80026e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80026f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fc:	ee17 3a90 	vmov	r3, s15
 8002700:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002702:	e005      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
    break;
 8002708:	e002      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800270c:	61bb      	str	r3, [r7, #24]
    break;
 800270e:	bf00      	nop
  }

  return sysclockfreq;
 8002710:	69bb      	ldr	r3, [r7, #24]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	58024400 	.word	0x58024400
 8002724:	03d09000 	.word	0x03d09000
 8002728:	003d0900 	.word	0x003d0900
 800272c:	017d7840 	.word	0x017d7840
 8002730:	46000000 	.word	0x46000000
 8002734:	4c742400 	.word	0x4c742400
 8002738:	4a742400 	.word	0x4a742400
 800273c:	4bbebc20 	.word	0x4bbebc20

08002740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002746:	f7ff fe81 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800274a:	4602      	mov	r2, r0
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_RCC_GetHCLKFreq+0x50>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	490f      	ldr	r1, [pc, #60]	; (8002794 <HAL_RCC_GetHCLKFreq+0x54>)
 8002758:	5ccb      	ldrb	r3, [r1, r3]
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_RCC_GetHCLKFreq+0x50>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	4a09      	ldr	r2, [pc, #36]	; (8002794 <HAL_RCC_GetHCLKFreq+0x54>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_RCC_GetHCLKFreq+0x58>)
 800277c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HAL_RCC_GetHCLKFreq+0x58>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	58024400 	.word	0x58024400
 8002794:	08005400 	.word	0x08005400
 8002798:	20000004 	.word	0x20000004
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027a4:	f7ff ffcc 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4904      	ldr	r1, [pc, #16]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	58024400 	.word	0x58024400
 80027c8:	08005400 	.word	0x08005400

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80027d0:	f7ff ffb6 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4904      	ldr	r1, [pc, #16]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	58024400 	.word	0x58024400
 80027f4:	08005400 	.word	0x08005400

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002800:	2300      	movs	r3, #0
 8002802:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002804:	2300      	movs	r3, #0
 8002806:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d03f      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002818:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800281c:	d02a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800281e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002822:	d824      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002828:	d018      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800282a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800282e:	d81e      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002838:	d007      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800283a:	e018      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800283c:	4bab      	ldr	r3, [pc, #684]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	4aaa      	ldr	r2, [pc, #680]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002848:	e015      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	2102      	movs	r1, #2
 8002850:	4618      	mov	r0, r3
 8002852:	f001 f9ef 	bl	8003c34 <RCCEx_PLL2_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800285a:	e00c      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3324      	adds	r3, #36	; 0x24
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fa98 	bl	8003d98 <RCCEx_PLL3_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800286c:	e003      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
      break;
 8002872:	e000      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800287c:	4b9b      	ldr	r3, [pc, #620]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800287e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002880:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002888:	4998      	ldr	r1, [pc, #608]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	650b      	str	r3, [r1, #80]	; 0x50
 800288e:	e001      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d03d      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d826      	bhi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80028a8:	a201      	add	r2, pc, #4	; (adr r2, 80028b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028c5 	.word	0x080028c5
 80028b4:	080028d3 	.word	0x080028d3
 80028b8:	080028e5 	.word	0x080028e5
 80028bc:	080028fd 	.word	0x080028fd
 80028c0:	080028fd 	.word	0x080028fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028c4:	4b89      	ldr	r3, [pc, #548]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	4a88      	ldr	r2, [pc, #544]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028d0:	e015      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 f9ab 	bl	8003c34 <RCCEx_PLL2_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028e2:	e00c      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3324      	adds	r3, #36	; 0x24
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fa54 	bl	8003d98 <RCCEx_PLL3_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028f4:	e003      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
      break;
 80028fa:	e000      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80028fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002904:	4b79      	ldr	r3, [pc, #484]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002908:	f023 0207 	bic.w	r2, r3, #7
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	4976      	ldr	r1, [pc, #472]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	650b      	str	r3, [r1, #80]	; 0x50
 8002916:	e001      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002924:	2b00      	cmp	r3, #0
 8002926:	d042      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002930:	d02b      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002936:	d825      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002938:	2bc0      	cmp	r3, #192	; 0xc0
 800293a:	d028      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800293c:	2bc0      	cmp	r3, #192	; 0xc0
 800293e:	d821      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d016      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002944:	2b80      	cmp	r3, #128	; 0x80
 8002946:	d81d      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d007      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002950:	e018      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002952:	4b66      	ldr	r3, [pc, #408]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	4a65      	ldr	r2, [pc, #404]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800295e:	e017      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f001 f964 	bl	8003c34 <RCCEx_PLL2_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002970:	e00e      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3324      	adds	r3, #36	; 0x24
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fa0d 	bl	8003d98 <RCCEx_PLL3_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002982:	e005      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]
      break;
 8002988:	e002      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800298e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002996:	4b55      	ldr	r3, [pc, #340]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	4952      	ldr	r1, [pc, #328]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	650b      	str	r3, [r1, #80]	; 0x50
 80029a8:	e001      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d049      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029c4:	d030      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80029c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ca:	d82a      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029d0:	d02c      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80029d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029d6:	d824      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029dc:	d018      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80029de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e2:	d81e      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80029e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ec:	d007      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80029ee:	e018      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f0:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	4a3d      	ldr	r2, [pc, #244]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029fc:	e017      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 f915 	bl	8003c34 <RCCEx_PLL2_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a0e:	e00e      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3324      	adds	r3, #36	; 0x24
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 f9be 	bl	8003d98 <RCCEx_PLL3_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a20:	e005      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002a28:	bf00      	nop
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a42:	492a      	ldr	r1, [pc, #168]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	658b      	str	r3, [r1, #88]	; 0x58
 8002a48:	e001      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d04c      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a64:	d030      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a6a:	d82a      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a70:	d02c      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002a72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a76:	d824      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a7c:	d018      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a82:	d81e      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a8c:	d007      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a8e:	e018      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a9c:	e017      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 f8c5 	bl	8003c34 <RCCEx_PLL2_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002aae:	e00e      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3324      	adds	r3, #36	; 0x24
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f96e 	bl	8003d98 <RCCEx_PLL3_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ac0:	e005      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac6:	e002      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10d      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ae2:	4902      	ldr	r1, [pc, #8]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	658b      	str	r3, [r1, #88]	; 0x58
 8002ae8:	e004      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002aea:	bf00      	nop
 8002aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d032      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	2b30      	cmp	r3, #48	; 0x30
 8002b06:	d01c      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b08:	2b30      	cmp	r3, #48	; 0x30
 8002b0a:	d817      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d00c      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d813      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d016      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d10f      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1c:	4bb1      	ldr	r3, [pc, #708]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	4ab0      	ldr	r2, [pc, #704]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b28:	e00e      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 f87f 	bl	8003c34 <RCCEx_PLL2_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b3a:	e005      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b40:	e002      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b4e:	4ba5      	ldr	r3, [pc, #660]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5a:	49a2      	ldr	r1, [pc, #648]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b60:	e001      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d047      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b7a:	d030      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b80:	d82a      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b86:	d02c      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002b88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b8c:	d824      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b92:	d018      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b98:	d81e      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba2:	d007      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002ba4:	e018      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba6:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	4a8e      	ldr	r2, [pc, #568]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bb2:	e017      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f83a 	bl	8003c34 <RCCEx_PLL2_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bc4:	e00e      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3324      	adds	r3, #36	; 0x24
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 f8e3 	bl	8003d98 <RCCEx_PLL3_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bd6:	e005      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
      break;
 8002bdc:	e002      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002bea:	4b7e      	ldr	r3, [pc, #504]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf6:	497b      	ldr	r1, [pc, #492]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	650b      	str	r3, [r1, #80]	; 0x50
 8002bfc:	e001      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d049      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c16:	d02e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1c:	d828      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c22:	d02a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c28:	d822      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c2e:	d026      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c34:	d81c      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c3a:	d010      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c40:	d816      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01d      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 ffee 	bl	8003c34 <RCCEx_PLL2_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c5c:	e012      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3324      	adds	r3, #36	; 0x24
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 f897 	bl	8003d98 <RCCEx_PLL3_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c6e:	e009      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
      break;
 8002c74:	e006      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c76:	bf00      	nop
 8002c78:	e004      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e002      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c8a:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c96:	4953      	ldr	r1, [pc, #332]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	650b      	str	r3, [r1, #80]	; 0x50
 8002c9c:	e001      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d04b      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb8:	d02e      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbe:	d828      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d02a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cca:	d822      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ccc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cd0:	d026      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002cd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cd6:	d81c      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cdc:	d010      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce2:	d816      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01d      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cec:	d111      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 ff9d 	bl	8003c34 <RCCEx_PLL2_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cfe:	e012      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3324      	adds	r3, #36	; 0x24
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 f846 	bl	8003d98 <RCCEx_PLL3_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d10:	e009      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
      break;
 8002d16:	e006      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d18:	bf00      	nop
 8002d1a:	e004      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d1c:	bf00      	nop
 8002d1e:	e002      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d20:	bf00      	nop
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d3a:	492a      	ldr	r1, [pc, #168]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	658b      	str	r3, [r1, #88]	; 0x58
 8002d40:	e001      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
 8002d44:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d022      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00e      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5e:	d108      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	2101      	movs	r1, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 ff64 	bl	8003c34 <RCCEx_PLL2_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002d70:	e003      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
      break;
 8002d76:	e000      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002d80:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	4915      	ldr	r1, [pc, #84]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d92:	e001      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d031      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dac:	d00e      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db2:	d814      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dbc:	d10f      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dca:	e00e      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 ff2e 	bl	8003c34 <RCCEx_PLL2_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ddc:	e005      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
      break;
 8002de2:	e002      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002de4:	58024400 	.word	0x58024400
      break;
 8002de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002df0:	4bbc      	ldr	r3, [pc, #752]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	49b9      	ldr	r1, [pc, #740]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	650b      	str	r3, [r1, #80]	; 0x50
 8002e02:	e001      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d032      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d81b      	bhi.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002e1c:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002e5b 	.word	0x08002e5b
 8002e28:	08002e35 	.word	0x08002e35
 8002e2c:	08002e43 	.word	0x08002e43
 8002e30:	08002e5b 	.word	0x08002e5b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e34:	4bab      	ldr	r3, [pc, #684]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	4aaa      	ldr	r2, [pc, #680]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e40:	e00c      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fef3 	bl	8003c34 <RCCEx_PLL2_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e52:	e003      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	e000      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8002e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e62:	4ba0      	ldr	r3, [pc, #640]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	499d      	ldr	r1, [pc, #628]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e74:	e001      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8086 	beq.w	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e88:	4b97      	ldr	r3, [pc, #604]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a96      	ldr	r2, [pc, #600]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e94:	f7fd ff18 	bl	8000cc8 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e9a:	e009      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fd ff14 	bl	8000cc8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d902      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	75fb      	strb	r3, [r7, #23]
        break;
 8002eae:	e005      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eb0:	4b8d      	ldr	r3, [pc, #564]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ef      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d166      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ec2:	4b88      	ldr	r3, [pc, #544]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ecc:	4053      	eors	r3, r2
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d013      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed6:	4b83      	ldr	r3, [pc, #524]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ede:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee0:	4b80      	ldr	r3, [pc, #512]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a7f      	ldr	r2, [pc, #508]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eec:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a7c      	ldr	r2, [pc, #496]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ef8:	4a7a      	ldr	r2, [pc, #488]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f08:	d115      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fd fedd 	bl	8000cc8 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f10:	e00b      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fd fed9 	bl	8000cc8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d902      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	75fb      	strb	r3, [r7, #23]
            break;
 8002f28:	e005      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f2a:	4b6e      	ldr	r3, [pc, #440]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ed      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d126      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f4a:	d10d      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002f4c:	4b65      	ldr	r3, [pc, #404]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f5a:	0919      	lsrs	r1, r3, #4
 8002f5c:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8002f5e:	400b      	ands	r3, r1
 8002f60:	4960      	ldr	r1, [pc, #384]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	610b      	str	r3, [r1, #16]
 8002f66:	e005      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002f68:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f72:	6113      	str	r3, [r2, #16]
 8002f74:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f82:	4958      	ldr	r1, [pc, #352]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	670b      	str	r3, [r1, #112]	; 0x70
 8002f88:	e004      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	75bb      	strb	r3, [r7, #22]
 8002f8e:	e001      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d07e      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa4:	2b28      	cmp	r3, #40	; 0x28
 8002fa6:	d867      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	0800307f 	.word	0x0800307f
 8002fb4:	08003079 	.word	0x08003079
 8002fb8:	08003079 	.word	0x08003079
 8002fbc:	08003079 	.word	0x08003079
 8002fc0:	08003079 	.word	0x08003079
 8002fc4:	08003079 	.word	0x08003079
 8002fc8:	08003079 	.word	0x08003079
 8002fcc:	08003079 	.word	0x08003079
 8002fd0:	08003055 	.word	0x08003055
 8002fd4:	08003079 	.word	0x08003079
 8002fd8:	08003079 	.word	0x08003079
 8002fdc:	08003079 	.word	0x08003079
 8002fe0:	08003079 	.word	0x08003079
 8002fe4:	08003079 	.word	0x08003079
 8002fe8:	08003079 	.word	0x08003079
 8002fec:	08003079 	.word	0x08003079
 8002ff0:	08003067 	.word	0x08003067
 8002ff4:	08003079 	.word	0x08003079
 8002ff8:	08003079 	.word	0x08003079
 8002ffc:	08003079 	.word	0x08003079
 8003000:	08003079 	.word	0x08003079
 8003004:	08003079 	.word	0x08003079
 8003008:	08003079 	.word	0x08003079
 800300c:	08003079 	.word	0x08003079
 8003010:	0800307f 	.word	0x0800307f
 8003014:	08003079 	.word	0x08003079
 8003018:	08003079 	.word	0x08003079
 800301c:	08003079 	.word	0x08003079
 8003020:	08003079 	.word	0x08003079
 8003024:	08003079 	.word	0x08003079
 8003028:	08003079 	.word	0x08003079
 800302c:	08003079 	.word	0x08003079
 8003030:	0800307f 	.word	0x0800307f
 8003034:	08003079 	.word	0x08003079
 8003038:	08003079 	.word	0x08003079
 800303c:	08003079 	.word	0x08003079
 8003040:	08003079 	.word	0x08003079
 8003044:	08003079 	.word	0x08003079
 8003048:	08003079 	.word	0x08003079
 800304c:	08003079 	.word	0x08003079
 8003050:	0800307f 	.word	0x0800307f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	2101      	movs	r1, #1
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fdea 	bl	8003c34 <RCCEx_PLL2_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003064:	e00c      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3324      	adds	r3, #36	; 0x24
 800306a:	2101      	movs	r1, #1
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fe93 	bl	8003d98 <RCCEx_PLL3_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003076:	e003      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
      break;
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 800307e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003092:	4914      	ldr	r1, [pc, #80]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003094:	4313      	orrs	r3, r2
 8003096:	654b      	str	r3, [r1, #84]	; 0x54
 8003098:	e001      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d03e      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d827      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	08003109 	.word	0x08003109
 80030bc:	080030d1 	.word	0x080030d1
 80030c0:	080030f1 	.word	0x080030f1
 80030c4:	08003109 	.word	0x08003109
 80030c8:	08003109 	.word	0x08003109
 80030cc:	08003109 	.word	0x08003109
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fdac 	bl	8003c34 <RCCEx_PLL2_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80030e0:	e013      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x912>
 80030e2:	bf00      	nop
 80030e4:	58024400 	.word	0x58024400
 80030e8:	58024800 	.word	0x58024800
 80030ec:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3324      	adds	r3, #36	; 0x24
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fe4e 	bl	8003d98 <RCCEx_PLL3_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	75fb      	strb	r3, [r7, #23]
      break;
 8003106:	e000      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8003108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003110:	4b9f      	ldr	r3, [pc, #636]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	f023 0207 	bic.w	r2, r3, #7
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311c:	499c      	ldr	r1, [pc, #624]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800311e:	4313      	orrs	r3, r2
 8003120:	654b      	str	r3, [r1, #84]	; 0x54
 8003122:	e001      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d039      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	2b05      	cmp	r3, #5
 800313c:	d820      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003187 	.word	0x08003187
 8003148:	0800315d 	.word	0x0800315d
 800314c:	0800316f 	.word	0x0800316f
 8003150:	08003187 	.word	0x08003187
 8003154:	08003187 	.word	0x08003187
 8003158:	08003187 	.word	0x08003187
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	2101      	movs	r1, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fd66 	bl	8003c34 <RCCEx_PLL2_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800316c:	e00c      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3324      	adds	r3, #36	; 0x24
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fe0f 	bl	8003d98 <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800317e:	e003      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
      break;
 8003184:	e000      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8003186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800318e:	4b80      	ldr	r3, [pc, #512]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319c:	497c      	ldr	r1, [pc, #496]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	658b      	str	r3, [r1, #88]	; 0x58
 80031a2:	e001      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d04b      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031be:	d02e      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c4:	d828      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d02a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d822      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80031d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031d6:	d026      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 80031d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031dc:	d81c      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80031de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e2:	d010      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80031e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e8:	d816      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01d      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80031ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f2:	d111      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd1a 	bl	8003c34 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003204:	e012      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3324      	adds	r3, #36	; 0x24
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fdc3 	bl	8003d98 <RCCEx_PLL3_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
      break;
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800322a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003232:	4b57      	ldr	r3, [pc, #348]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	4953      	ldr	r1, [pc, #332]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003242:	4313      	orrs	r3, r2
 8003244:	654b      	str	r3, [r1, #84]	; 0x54
 8003246:	e001      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d04b      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800325e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003262:	d02e      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003264:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003268:	d828      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d02a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003274:	d822      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003276:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800327a:	d026      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800327c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003280:	d81c      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003286:	d010      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328c:	d816      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01d      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003296:	d111      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fcc8 	bl	8003c34 <RCCEx_PLL2_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032a8:	e012      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3324      	adds	r3, #36	; 0x24
 80032ae:	2102      	movs	r1, #2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fd71 	bl	8003d98 <RCCEx_PLL3_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032ba:	e009      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
      break;
 80032c0:	e006      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80032c2:	bf00      	nop
 80032c4:	e004      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80032ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032d6:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032e4:	492a      	ldr	r1, [pc, #168]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	658b      	str	r3, [r1, #88]	; 0x58
 80032ea:	e001      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d04d      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003302:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003306:	d02e      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003308:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800330c:	d828      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800330e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003312:	d02a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003318:	d822      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800331a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800331e:	d026      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003320:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003324:	d81c      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800332a:	d010      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 800332c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003330:	d816      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01d      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333a:	d111      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fc76 	bl	8003c34 <RCCEx_PLL2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800334c:	e012      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3324      	adds	r3, #36	; 0x24
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd1f 	bl	8003d98 <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800335e:	e009      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	75fb      	strb	r3, [r7, #23]
      break;
 8003364:	e006      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003366:	bf00      	nop
 8003368:	e004      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800336a:	bf00      	nop
 800336c:	e002      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003388:	4901      	ldr	r1, [pc, #4]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800338a:	4313      	orrs	r3, r2
 800338c:	658b      	str	r3, [r1, #88]	; 0x58
 800338e:	e003      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ae:	d10a      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3324      	adds	r3, #36	; 0x24
 80033b4:	2102      	movs	r1, #2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fcee 	bl	8003d98 <RCCEx_PLL3_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033c6:	4b8c      	ldr	r3, [pc, #560]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d4:	4988      	ldr	r1, [pc, #544]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f0:	d10a      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3324      	adds	r3, #36	; 0x24
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fccd 	bl	8003d98 <RCCEx_PLL3_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003408:	4b7b      	ldr	r3, [pc, #492]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003416:	4978      	ldr	r1, [pc, #480]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003418:	4313      	orrs	r3, r2
 800341a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d034      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800342e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003432:	d01d      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003438:	d817      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800343e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003442:	d009      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8003444:	e011      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fbf1 	bl	8003c34 <RCCEx_PLL2_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003456:	e00c      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3324      	adds	r3, #36	; 0x24
 800345c:	2102      	movs	r1, #2
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fc9a 	bl	8003d98 <RCCEx_PLL3_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
      break;
 800346e:	e000      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8003470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003478:	4b5f      	ldr	r3, [pc, #380]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003486:	495c      	ldr	r1, [pc, #368]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003488:	4313      	orrs	r3, r2
 800348a:	658b      	str	r3, [r1, #88]	; 0x58
 800348c:	e001      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d033      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a8:	d01c      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80034aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ae:	d816      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xce6>
 80034b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b4:	d003      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80034b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ba:	d007      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 80034bc:	e00f      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034be:	4b4e      	ldr	r3, [pc, #312]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	4a4d      	ldr	r2, [pc, #308]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80034ca:	e00c      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fc60 	bl	8003d98 <RCCEx_PLL3_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80034dc:	e003      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
      break;
 80034e2:	e000      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80034e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ec:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	493f      	ldr	r1, [pc, #252]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	654b      	str	r3, [r1, #84]	; 0x54
 8003500:	e001      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d029      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d007      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003520:	e00f      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003522:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800352e:	e00b      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	2102      	movs	r1, #2
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fb7c 	bl	8003c34 <RCCEx_PLL2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003540:	e002      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
      break;
 8003546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800354e:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	4927      	ldr	r1, [pc, #156]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800355c:	4313      	orrs	r3, r2
 800355e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003560:	e001      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3324      	adds	r3, #36	; 0x24
 8003576:	2102      	movs	r1, #2
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fc0d 	bl	8003d98 <RCCEx_PLL3_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d035      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800359a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800359e:	d017      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 80035a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a4:	d811      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035aa:	d013      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 80035ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b0:	d80b      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d010      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 80035b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ba:	d106      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80035c8:	e007      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
      break;
 80035ce:	e004      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80035d0:	bf00      	nop
 80035d2:	e002      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80035d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10d      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ee:	4902      	ldr	r1, [pc, #8]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	654b      	str	r3, [r1, #84]	; 0x54
 80035f4:	e004      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80035f6:	bf00      	nop
 80035f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003618:	4926      	ldr	r1, [pc, #152]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003638:	491e      	ldr	r1, [pc, #120]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003656:	4917      	ldr	r1, [pc, #92]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800366e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003672:	6113      	str	r3, [r2, #16]
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800367e:	490d      	ldr	r1, [pc, #52]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	da08      	bge.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	4906      	ldr	r1, [pc, #24]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800369e:	7dbb      	ldrb	r3, [r7, #22]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xeb0>
  {
    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xeb2>
  }
  return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	58024400 	.word	0x58024400

080036b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80036bc:	f7ff f840 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	58024400 	.word	0x58024400
 80036e0:	08005400 	.word	0x08005400

080036e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ec:	4ba1      	ldr	r3, [pc, #644]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80036f6:	4b9f      	ldr	r3, [pc, #636]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	0b1b      	lsrs	r3, r3, #12
 80036fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003700:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003702:	4b9c      	ldr	r3, [pc, #624]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800370e:	4b99      	ldr	r3, [pc, #612]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8111 	beq.w	8003954 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b02      	cmp	r3, #2
 8003736:	f000 8083 	beq.w	8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b02      	cmp	r3, #2
 800373e:	f200 80a1 	bhi.w	8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d056      	beq.n	80037fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800374e:	e099      	b.n	8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003750:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02d      	beq.n	80037b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800375c:	4b85      	ldr	r3, [pc, #532]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	4a84      	ldr	r2, [pc, #528]	; (8003978 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003786:	4b7b      	ldr	r3, [pc, #492]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	ed97 6a03 	vldr	s12, [r7, #12]
 800379a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800397c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80037b6:	e087      	b.n	80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a03 	vldr	s12, [r7, #12]
 80037de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800397c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037fa:	e065      	b.n	80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b59      	ldr	r3, [pc, #356]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003822:	eddf 5a56 	vldr	s11, [pc, #344]	; 800397c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800383e:	e043      	b.n	80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003852:	4b48      	ldr	r3, [pc, #288]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003862:	ed97 6a03 	vldr	s12, [r7, #12]
 8003866:	eddf 5a45 	vldr	s11, [pc, #276]	; 800397c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003882:	e021      	b.n	80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003896:	4b37      	ldr	r3, [pc, #220]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800397c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80038c8:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	0a5b      	lsrs	r3, r3, #9
 80038ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80038e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ee:	ee17 2a90 	vmov	r2, s15
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800390c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003910:	edd7 6a07 	vldr	s13, [r7, #28]
 8003914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800391c:	ee17 2a90 	vmov	r2, s15
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003924:	4b13      	ldr	r3, [pc, #76]	; (8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	0e1b      	lsrs	r3, r3, #24
 800392a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800393a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800393e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800394a:	ee17 2a90 	vmov	r2, s15
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003952:	e008      	b.n	8003966 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	3724      	adds	r7, #36	; 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	58024400 	.word	0x58024400
 8003978:	03d09000 	.word	0x03d09000
 800397c:	46000000 	.word	0x46000000
 8003980:	4c742400 	.word	0x4c742400
 8003984:	4a742400 	.word	0x4a742400
 8003988:	4bbebc20 	.word	0x4bbebc20

0800398c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003994:	4ba1      	ldr	r3, [pc, #644]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800399e:	4b9f      	ldr	r3, [pc, #636]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	0d1b      	lsrs	r3, r3, #20
 80039a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039aa:	4b9c      	ldr	r3, [pc, #624]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80039b6:	4b99      	ldr	r3, [pc, #612]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	08db      	lsrs	r3, r3, #3
 80039bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8111 	beq.w	8003bfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	f000 8083 	beq.w	8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	f200 80a1 	bhi.w	8003b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d056      	beq.n	8003aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80039f6:	e099      	b.n	8003b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039f8:	4b88      	ldr	r3, [pc, #544]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d02d      	beq.n	8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a04:	4b85      	ldr	r3, [pc, #532]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	4a84      	ldr	r2, [pc, #528]	; (8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2e:	4b7b      	ldr	r3, [pc, #492]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a5e:	e087      	b.n	8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a72:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aa2:	e065      	b.n	8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab6:	4b59      	ldr	r3, [pc, #356]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ae6:	e043      	b.n	8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afa:	4b48      	ldr	r3, [pc, #288]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b2a:	e021      	b.n	8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3e:	4b37      	ldr	r3, [pc, #220]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	0a5b      	lsrs	r3, r3, #9
 8003b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b96:	ee17 2a90 	vmov	r2, s15
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003b9e:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	0c1b      	lsrs	r3, r3, #16
 8003ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba8:	ee07 3a90 	vmov	s15, r3
 8003bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc4:	ee17 2a90 	vmov	r2, s15
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003bcc:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	0e1b      	lsrs	r3, r3, #24
 8003bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf2:	ee17 2a90 	vmov	r2, s15
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003bfa:	e008      	b.n	8003c0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
}
 8003c0e:	bf00      	nop
 8003c10:	3724      	adds	r7, #36	; 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	03d09000 	.word	0x03d09000
 8003c24:	46000000 	.word	0x46000000
 8003c28:	4c742400 	.word	0x4c742400
 8003c2c:	4a742400 	.word	0x4a742400
 8003c30:	4bbebc20 	.word	0x4bbebc20

08003c34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c42:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d101      	bne.n	8003c52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e099      	b.n	8003d86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c52:	4b4f      	ldr	r3, [pc, #316]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a4e      	ldr	r2, [pc, #312]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003c58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5e:	f7fd f833 	bl	8000cc8 <HAL_GetTick>
 8003c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c64:	e008      	b.n	8003c78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c66:	f7fd f82f 	bl	8000cc8 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e086      	b.n	8003d86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c78:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c84:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	031b      	lsls	r3, r3, #12
 8003c92:	493f      	ldr	r1, [pc, #252]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	628b      	str	r3, [r1, #40]	; 0x28
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	025b      	lsls	r3, r3, #9
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	061b      	lsls	r3, r3, #24
 8003cc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cc8:	4931      	ldr	r1, [pc, #196]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003cce:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	492d      	ldr	r1, [pc, #180]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ce0:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f023 0220 	bic.w	r2, r3, #32
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	4928      	ldr	r1, [pc, #160]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003cf8:	f023 0310 	bic.w	r3, r3, #16
 8003cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003cfe:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d02:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <RCCEx_PLL2_Config+0x160>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	69d2      	ldr	r2, [r2, #28]
 8003d0a:	00d2      	lsls	r2, r2, #3
 8003d0c:	4920      	ldr	r1, [pc, #128]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d12:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d18:	f043 0310 	orr.w	r3, r3, #16
 8003d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d30:	e00f      	b.n	8003d52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d106      	bne.n	8003d46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d44:	e005      	b.n	8003d52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5e:	f7fc ffb3 	bl	8000cc8 <HAL_GetTick>
 8003d62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d64:	e008      	b.n	8003d78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d66:	f7fc ffaf 	bl	8000cc8 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e006      	b.n	8003d86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <RCCEx_PLL2_Config+0x15c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	58024400 	.word	0x58024400
 8003d94:	ffff0007 	.word	0xffff0007

08003d98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003da6:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d101      	bne.n	8003db6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e099      	b.n	8003eea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003db6:	4b4f      	ldr	r3, [pc, #316]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a4e      	ldr	r2, [pc, #312]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc2:	f7fc ff81 	bl	8000cc8 <HAL_GetTick>
 8003dc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003dc8:	e008      	b.n	8003ddc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003dca:	f7fc ff7d 	bl	8000cc8 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e086      	b.n	8003eea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ddc:	4b45      	ldr	r3, [pc, #276]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f0      	bne.n	8003dca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003de8:	4b42      	ldr	r3, [pc, #264]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	051b      	lsls	r3, r3, #20
 8003df6:	493f      	ldr	r1, [pc, #252]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	628b      	str	r3, [r1, #40]	; 0x28
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	025b      	lsls	r3, r3, #9
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e2c:	4931      	ldr	r1, [pc, #196]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e32:	4b30      	ldr	r3, [pc, #192]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	492d      	ldr	r1, [pc, #180]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	4928      	ldr	r1, [pc, #160]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e56:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <RCCEx_PLL3_Config+0x160>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	69d2      	ldr	r2, [r2, #28]
 8003e6e:	00d2      	lsls	r2, r2, #3
 8003e70:	4920      	ldr	r1, [pc, #128]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e76:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e94:	e00f      	b.n	8003eb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d106      	bne.n	8003eaa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e9c:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003ea2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ea8:	e005      	b.n	8003eb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec2:	f7fc ff01 	bl	8000cc8 <HAL_GetTick>
 8003ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ec8:	e008      	b.n	8003edc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003eca:	f7fc fefd 	bl	8000cc8 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e006      	b.n	8003eea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <RCCEx_PLL3_Config+0x15c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	ffff0007 	.word	0xffff0007

08003efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e042      	b.n	8003f94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fc fd9b 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2224      	movs	r2, #36	; 0x24
 8003f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f9be 	bl	80042c0 <UART_SetConfig>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e022      	b.n	8003f94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 ff18 	bl	8004d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 ff9f 	bl	8004ed0 <UART_CheckIdleState>
 8003f92:	4603      	mov	r3, r0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d118      	bne.n	8003ffe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d013      	beq.n	8003ffe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8144 	beq.w	800427c <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
      }
      return;
 8003ffc:	e13e      	b.n	800427c <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80e8 	beq.w	80041d6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4ba0      	ldr	r3, [pc, #640]	; (800428c <HAL_UART_IRQHandler+0x2f0>)
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4b9f      	ldr	r3, [pc, #636]	; (8004290 <HAL_UART_IRQHandler+0x2f4>)
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80dd 	beq.w	80041d6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d010      	beq.n	8004048 <HAL_UART_IRQHandler+0xac>
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00b      	beq.n	8004048 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2201      	movs	r2, #1
 8004036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <HAL_UART_IRQHandler+0xd8>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2202      	movs	r2, #2
 8004062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	f043 0204 	orr.w	r2, r3, #4
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_UART_IRQHandler+0x104>
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2204      	movs	r2, #4
 800408e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f043 0202 	orr.w	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d015      	beq.n	80040d6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4b75      	ldr	r3, [pc, #468]	; (800428c <HAL_UART_IRQHandler+0x2f0>)
 80040b8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2208      	movs	r2, #8
 80040c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f043 0208 	orr.w	r2, r3, #8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d011      	beq.n	8004104 <HAL_UART_IRQHandler+0x168>
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80b8 	beq.w	8004280 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d011      	beq.n	800413e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d004      	beq.n	800415e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800415a:	2b00      	cmp	r3, #0
 800415c:	d031      	beq.n	80041c2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 ff7e 	bl	8005060 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b40      	cmp	r3, #64	; 0x40
 8004170:	d123      	bne.n	80041ba <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004180:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004186:	2b00      	cmp	r3, #0
 8004188:	d013      	beq.n	80041b2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418e:	4a41      	ldr	r2, [pc, #260]	; (8004294 <HAL_UART_IRQHandler+0x2f8>)
 8004190:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc fee2 	bl	8000f60 <HAL_DMA_Abort_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d017      	beq.n	80041d2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80041ac:	4610      	mov	r0, r2
 80041ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	e00f      	b.n	80041d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f87a 	bl	80042ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	e00b      	b.n	80041d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f876 	bl	80042ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	e007      	b.n	80041d2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f872 	bl	80042ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80041d0:	e056      	b.n	8004280 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d2:	bf00      	nop
    return;
 80041d4:	e054      	b.n	8004280 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <HAL_UART_IRQHandler+0x260>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 ff87 	bl	8005108 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041fa:	e044      	b.n	8004286 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b00      	cmp	r3, #0
 8004204:	d012      	beq.n	800422c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	2b00      	cmp	r3, #0
 8004220:	d030      	beq.n	8004284 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
    }
    return;
 800422a:	e02b      	b.n	8004284 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <HAL_UART_IRQHandler+0x2ac>
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 ff47 	bl	80050d4 <UART_EndTransmit_IT>
    return;
 8004246:	e01e      	b.n	8004286 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <HAL_UART_IRQHandler+0x2c8>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 ff67 	bl	8005130 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004262:	e010      	b.n	8004286 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <HAL_UART_IRQHandler+0x2ea>
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	da08      	bge.n	8004286 <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 ff51 	bl	800511c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800427a:	e004      	b.n	8004286 <HAL_UART_IRQHandler+0x2ea>
      return;
 800427c:	bf00      	nop
 800427e:	e002      	b.n	8004286 <HAL_UART_IRQHandler+0x2ea>
    return;
 8004280:	bf00      	nop
 8004282:	e000      	b.n	8004286 <HAL_UART_IRQHandler+0x2ea>
    return;
 8004284:	bf00      	nop
  }
}
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	10000001 	.word	0x10000001
 8004290:	04000120 	.word	0x04000120
 8004294:	080050a9 	.word	0x080050a9

08004298 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c0:	b5b0      	push	{r4, r5, r7, lr}
 80042c2:	b08e      	sub	sp, #56	; 0x38
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ec:	4313      	orrs	r3, r2
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4bc0      	ldr	r3, [pc, #768]	; (80045f8 <UART_SetConfig+0x338>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004300:	430b      	orrs	r3, r1
 8004302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4ab5      	ldr	r2, [pc, #724]	; (80045fc <UART_SetConfig+0x33c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004330:	4313      	orrs	r3, r2
 8004332:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	4bb1      	ldr	r3, [pc, #708]	; (8004600 <UART_SetConfig+0x340>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004344:	430b      	orrs	r3, r1
 8004346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	f023 010f 	bic.w	r1, r3, #15
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4aa8      	ldr	r2, [pc, #672]	; (8004604 <UART_SetConfig+0x344>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d177      	bne.n	8004458 <UART_SetConfig+0x198>
 8004368:	4ba7      	ldr	r3, [pc, #668]	; (8004608 <UART_SetConfig+0x348>)
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004370:	2b28      	cmp	r3, #40	; 0x28
 8004372:	d86d      	bhi.n	8004450 <UART_SetConfig+0x190>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0xbc>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	08004421 	.word	0x08004421
 8004380:	08004451 	.word	0x08004451
 8004384:	08004451 	.word	0x08004451
 8004388:	08004451 	.word	0x08004451
 800438c:	08004451 	.word	0x08004451
 8004390:	08004451 	.word	0x08004451
 8004394:	08004451 	.word	0x08004451
 8004398:	08004451 	.word	0x08004451
 800439c:	08004429 	.word	0x08004429
 80043a0:	08004451 	.word	0x08004451
 80043a4:	08004451 	.word	0x08004451
 80043a8:	08004451 	.word	0x08004451
 80043ac:	08004451 	.word	0x08004451
 80043b0:	08004451 	.word	0x08004451
 80043b4:	08004451 	.word	0x08004451
 80043b8:	08004451 	.word	0x08004451
 80043bc:	08004431 	.word	0x08004431
 80043c0:	08004451 	.word	0x08004451
 80043c4:	08004451 	.word	0x08004451
 80043c8:	08004451 	.word	0x08004451
 80043cc:	08004451 	.word	0x08004451
 80043d0:	08004451 	.word	0x08004451
 80043d4:	08004451 	.word	0x08004451
 80043d8:	08004451 	.word	0x08004451
 80043dc:	08004439 	.word	0x08004439
 80043e0:	08004451 	.word	0x08004451
 80043e4:	08004451 	.word	0x08004451
 80043e8:	08004451 	.word	0x08004451
 80043ec:	08004451 	.word	0x08004451
 80043f0:	08004451 	.word	0x08004451
 80043f4:	08004451 	.word	0x08004451
 80043f8:	08004451 	.word	0x08004451
 80043fc:	08004441 	.word	0x08004441
 8004400:	08004451 	.word	0x08004451
 8004404:	08004451 	.word	0x08004451
 8004408:	08004451 	.word	0x08004451
 800440c:	08004451 	.word	0x08004451
 8004410:	08004451 	.word	0x08004451
 8004414:	08004451 	.word	0x08004451
 8004418:	08004451 	.word	0x08004451
 800441c:	08004449 	.word	0x08004449
 8004420:	2301      	movs	r3, #1
 8004422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004426:	e222      	b.n	800486e <UART_SetConfig+0x5ae>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800442e:	e21e      	b.n	800486e <UART_SetConfig+0x5ae>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004436:	e21a      	b.n	800486e <UART_SetConfig+0x5ae>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800443e:	e216      	b.n	800486e <UART_SetConfig+0x5ae>
 8004440:	2320      	movs	r3, #32
 8004442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004446:	e212      	b.n	800486e <UART_SetConfig+0x5ae>
 8004448:	2340      	movs	r3, #64	; 0x40
 800444a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444e:	e20e      	b.n	800486e <UART_SetConfig+0x5ae>
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004456:	e20a      	b.n	800486e <UART_SetConfig+0x5ae>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a6b      	ldr	r2, [pc, #428]	; (800460c <UART_SetConfig+0x34c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d130      	bne.n	80044c4 <UART_SetConfig+0x204>
 8004462:	4b69      	ldr	r3, [pc, #420]	; (8004608 <UART_SetConfig+0x348>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b05      	cmp	r3, #5
 800446c:	d826      	bhi.n	80044bc <UART_SetConfig+0x1fc>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <UART_SetConfig+0x1b4>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004495 	.word	0x08004495
 800447c:	0800449d 	.word	0x0800449d
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044b5 	.word	0x080044b5
 800448c:	2300      	movs	r3, #0
 800448e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004492:	e1ec      	b.n	800486e <UART_SetConfig+0x5ae>
 8004494:	2304      	movs	r3, #4
 8004496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800449a:	e1e8      	b.n	800486e <UART_SetConfig+0x5ae>
 800449c:	2308      	movs	r3, #8
 800449e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a2:	e1e4      	b.n	800486e <UART_SetConfig+0x5ae>
 80044a4:	2310      	movs	r3, #16
 80044a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044aa:	e1e0      	b.n	800486e <UART_SetConfig+0x5ae>
 80044ac:	2320      	movs	r3, #32
 80044ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044b2:	e1dc      	b.n	800486e <UART_SetConfig+0x5ae>
 80044b4:	2340      	movs	r3, #64	; 0x40
 80044b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ba:	e1d8      	b.n	800486e <UART_SetConfig+0x5ae>
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044c2:	e1d4      	b.n	800486e <UART_SetConfig+0x5ae>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a51      	ldr	r2, [pc, #324]	; (8004610 <UART_SetConfig+0x350>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d130      	bne.n	8004530 <UART_SetConfig+0x270>
 80044ce:	4b4e      	ldr	r3, [pc, #312]	; (8004608 <UART_SetConfig+0x348>)
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d826      	bhi.n	8004528 <UART_SetConfig+0x268>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x220>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	080044f9 	.word	0x080044f9
 80044e4:	08004501 	.word	0x08004501
 80044e8:	08004509 	.word	0x08004509
 80044ec:	08004511 	.word	0x08004511
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004521 	.word	0x08004521
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044fe:	e1b6      	b.n	800486e <UART_SetConfig+0x5ae>
 8004500:	2304      	movs	r3, #4
 8004502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004506:	e1b2      	b.n	800486e <UART_SetConfig+0x5ae>
 8004508:	2308      	movs	r3, #8
 800450a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800450e:	e1ae      	b.n	800486e <UART_SetConfig+0x5ae>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004516:	e1aa      	b.n	800486e <UART_SetConfig+0x5ae>
 8004518:	2320      	movs	r3, #32
 800451a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800451e:	e1a6      	b.n	800486e <UART_SetConfig+0x5ae>
 8004520:	2340      	movs	r3, #64	; 0x40
 8004522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004526:	e1a2      	b.n	800486e <UART_SetConfig+0x5ae>
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800452e:	e19e      	b.n	800486e <UART_SetConfig+0x5ae>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a37      	ldr	r2, [pc, #220]	; (8004614 <UART_SetConfig+0x354>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d130      	bne.n	800459c <UART_SetConfig+0x2dc>
 800453a:	4b33      	ldr	r3, [pc, #204]	; (8004608 <UART_SetConfig+0x348>)
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	2b05      	cmp	r3, #5
 8004544:	d826      	bhi.n	8004594 <UART_SetConfig+0x2d4>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x28c>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004565 	.word	0x08004565
 8004550:	0800456d 	.word	0x0800456d
 8004554:	08004575 	.word	0x08004575
 8004558:	0800457d 	.word	0x0800457d
 800455c:	08004585 	.word	0x08004585
 8004560:	0800458d 	.word	0x0800458d
 8004564:	2300      	movs	r3, #0
 8004566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800456a:	e180      	b.n	800486e <UART_SetConfig+0x5ae>
 800456c:	2304      	movs	r3, #4
 800456e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004572:	e17c      	b.n	800486e <UART_SetConfig+0x5ae>
 8004574:	2308      	movs	r3, #8
 8004576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800457a:	e178      	b.n	800486e <UART_SetConfig+0x5ae>
 800457c:	2310      	movs	r3, #16
 800457e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004582:	e174      	b.n	800486e <UART_SetConfig+0x5ae>
 8004584:	2320      	movs	r3, #32
 8004586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800458a:	e170      	b.n	800486e <UART_SetConfig+0x5ae>
 800458c:	2340      	movs	r3, #64	; 0x40
 800458e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004592:	e16c      	b.n	800486e <UART_SetConfig+0x5ae>
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800459a:	e168      	b.n	800486e <UART_SetConfig+0x5ae>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <UART_SetConfig+0x358>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d142      	bne.n	800462c <UART_SetConfig+0x36c>
 80045a6:	4b18      	ldr	r3, [pc, #96]	; (8004608 <UART_SetConfig+0x348>)
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d838      	bhi.n	8004624 <UART_SetConfig+0x364>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0x2f8>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045d1 	.word	0x080045d1
 80045bc:	080045d9 	.word	0x080045d9
 80045c0:	080045e1 	.word	0x080045e1
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	0800461d 	.word	0x0800461d
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045d6:	e14a      	b.n	800486e <UART_SetConfig+0x5ae>
 80045d8:	2304      	movs	r3, #4
 80045da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045de:	e146      	b.n	800486e <UART_SetConfig+0x5ae>
 80045e0:	2308      	movs	r3, #8
 80045e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045e6:	e142      	b.n	800486e <UART_SetConfig+0x5ae>
 80045e8:	2310      	movs	r3, #16
 80045ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ee:	e13e      	b.n	800486e <UART_SetConfig+0x5ae>
 80045f0:	2320      	movs	r3, #32
 80045f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045f6:	e13a      	b.n	800486e <UART_SetConfig+0x5ae>
 80045f8:	cfff69f3 	.word	0xcfff69f3
 80045fc:	58000c00 	.word	0x58000c00
 8004600:	11fff4ff 	.word	0x11fff4ff
 8004604:	40011000 	.word	0x40011000
 8004608:	58024400 	.word	0x58024400
 800460c:	40004400 	.word	0x40004400
 8004610:	40004800 	.word	0x40004800
 8004614:	40004c00 	.word	0x40004c00
 8004618:	40005000 	.word	0x40005000
 800461c:	2340      	movs	r3, #64	; 0x40
 800461e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004622:	e124      	b.n	800486e <UART_SetConfig+0x5ae>
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800462a:	e120      	b.n	800486e <UART_SetConfig+0x5ae>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4acc      	ldr	r2, [pc, #816]	; (8004964 <UART_SetConfig+0x6a4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d176      	bne.n	8004724 <UART_SetConfig+0x464>
 8004636:	4bcc      	ldr	r3, [pc, #816]	; (8004968 <UART_SetConfig+0x6a8>)
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800463e:	2b28      	cmp	r3, #40	; 0x28
 8004640:	d86c      	bhi.n	800471c <UART_SetConfig+0x45c>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <UART_SetConfig+0x388>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	080046ed 	.word	0x080046ed
 800464c:	0800471d 	.word	0x0800471d
 8004650:	0800471d 	.word	0x0800471d
 8004654:	0800471d 	.word	0x0800471d
 8004658:	0800471d 	.word	0x0800471d
 800465c:	0800471d 	.word	0x0800471d
 8004660:	0800471d 	.word	0x0800471d
 8004664:	0800471d 	.word	0x0800471d
 8004668:	080046f5 	.word	0x080046f5
 800466c:	0800471d 	.word	0x0800471d
 8004670:	0800471d 	.word	0x0800471d
 8004674:	0800471d 	.word	0x0800471d
 8004678:	0800471d 	.word	0x0800471d
 800467c:	0800471d 	.word	0x0800471d
 8004680:	0800471d 	.word	0x0800471d
 8004684:	0800471d 	.word	0x0800471d
 8004688:	080046fd 	.word	0x080046fd
 800468c:	0800471d 	.word	0x0800471d
 8004690:	0800471d 	.word	0x0800471d
 8004694:	0800471d 	.word	0x0800471d
 8004698:	0800471d 	.word	0x0800471d
 800469c:	0800471d 	.word	0x0800471d
 80046a0:	0800471d 	.word	0x0800471d
 80046a4:	0800471d 	.word	0x0800471d
 80046a8:	08004705 	.word	0x08004705
 80046ac:	0800471d 	.word	0x0800471d
 80046b0:	0800471d 	.word	0x0800471d
 80046b4:	0800471d 	.word	0x0800471d
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800471d 	.word	0x0800471d
 80046c0:	0800471d 	.word	0x0800471d
 80046c4:	0800471d 	.word	0x0800471d
 80046c8:	0800470d 	.word	0x0800470d
 80046cc:	0800471d 	.word	0x0800471d
 80046d0:	0800471d 	.word	0x0800471d
 80046d4:	0800471d 	.word	0x0800471d
 80046d8:	0800471d 	.word	0x0800471d
 80046dc:	0800471d 	.word	0x0800471d
 80046e0:	0800471d 	.word	0x0800471d
 80046e4:	0800471d 	.word	0x0800471d
 80046e8:	08004715 	.word	0x08004715
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046f2:	e0bc      	b.n	800486e <UART_SetConfig+0x5ae>
 80046f4:	2304      	movs	r3, #4
 80046f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046fa:	e0b8      	b.n	800486e <UART_SetConfig+0x5ae>
 80046fc:	2308      	movs	r3, #8
 80046fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004702:	e0b4      	b.n	800486e <UART_SetConfig+0x5ae>
 8004704:	2310      	movs	r3, #16
 8004706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800470a:	e0b0      	b.n	800486e <UART_SetConfig+0x5ae>
 800470c:	2320      	movs	r3, #32
 800470e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004712:	e0ac      	b.n	800486e <UART_SetConfig+0x5ae>
 8004714:	2340      	movs	r3, #64	; 0x40
 8004716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800471a:	e0a8      	b.n	800486e <UART_SetConfig+0x5ae>
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004722:	e0a4      	b.n	800486e <UART_SetConfig+0x5ae>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a90      	ldr	r2, [pc, #576]	; (800496c <UART_SetConfig+0x6ac>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d130      	bne.n	8004790 <UART_SetConfig+0x4d0>
 800472e:	4b8e      	ldr	r3, [pc, #568]	; (8004968 <UART_SetConfig+0x6a8>)
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	2b05      	cmp	r3, #5
 8004738:	d826      	bhi.n	8004788 <UART_SetConfig+0x4c8>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <UART_SetConfig+0x480>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004759 	.word	0x08004759
 8004744:	08004761 	.word	0x08004761
 8004748:	08004769 	.word	0x08004769
 800474c:	08004771 	.word	0x08004771
 8004750:	08004779 	.word	0x08004779
 8004754:	08004781 	.word	0x08004781
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800475e:	e086      	b.n	800486e <UART_SetConfig+0x5ae>
 8004760:	2304      	movs	r3, #4
 8004762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004766:	e082      	b.n	800486e <UART_SetConfig+0x5ae>
 8004768:	2308      	movs	r3, #8
 800476a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800476e:	e07e      	b.n	800486e <UART_SetConfig+0x5ae>
 8004770:	2310      	movs	r3, #16
 8004772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004776:	e07a      	b.n	800486e <UART_SetConfig+0x5ae>
 8004778:	2320      	movs	r3, #32
 800477a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800477e:	e076      	b.n	800486e <UART_SetConfig+0x5ae>
 8004780:	2340      	movs	r3, #64	; 0x40
 8004782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004786:	e072      	b.n	800486e <UART_SetConfig+0x5ae>
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800478e:	e06e      	b.n	800486e <UART_SetConfig+0x5ae>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a76      	ldr	r2, [pc, #472]	; (8004970 <UART_SetConfig+0x6b0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d130      	bne.n	80047fc <UART_SetConfig+0x53c>
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <UART_SetConfig+0x6a8>)
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b05      	cmp	r3, #5
 80047a4:	d826      	bhi.n	80047f4 <UART_SetConfig+0x534>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <UART_SetConfig+0x4ec>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047c5 	.word	0x080047c5
 80047b0:	080047cd 	.word	0x080047cd
 80047b4:	080047d5 	.word	0x080047d5
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	080047e5 	.word	0x080047e5
 80047c0:	080047ed 	.word	0x080047ed
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ca:	e050      	b.n	800486e <UART_SetConfig+0x5ae>
 80047cc:	2304      	movs	r3, #4
 80047ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047d2:	e04c      	b.n	800486e <UART_SetConfig+0x5ae>
 80047d4:	2308      	movs	r3, #8
 80047d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047da:	e048      	b.n	800486e <UART_SetConfig+0x5ae>
 80047dc:	2310      	movs	r3, #16
 80047de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e2:	e044      	b.n	800486e <UART_SetConfig+0x5ae>
 80047e4:	2320      	movs	r3, #32
 80047e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ea:	e040      	b.n	800486e <UART_SetConfig+0x5ae>
 80047ec:	2340      	movs	r3, #64	; 0x40
 80047ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047f2:	e03c      	b.n	800486e <UART_SetConfig+0x5ae>
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047fa:	e038      	b.n	800486e <UART_SetConfig+0x5ae>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5c      	ldr	r2, [pc, #368]	; (8004974 <UART_SetConfig+0x6b4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d130      	bne.n	8004868 <UART_SetConfig+0x5a8>
 8004806:	4b58      	ldr	r3, [pc, #352]	; (8004968 <UART_SetConfig+0x6a8>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	2b05      	cmp	r3, #5
 8004810:	d826      	bhi.n	8004860 <UART_SetConfig+0x5a0>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <UART_SetConfig+0x558>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	08004831 	.word	0x08004831
 800481c:	08004839 	.word	0x08004839
 8004820:	08004841 	.word	0x08004841
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	2302      	movs	r3, #2
 8004832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004836:	e01a      	b.n	800486e <UART_SetConfig+0x5ae>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800483e:	e016      	b.n	800486e <UART_SetConfig+0x5ae>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004846:	e012      	b.n	800486e <UART_SetConfig+0x5ae>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484e:	e00e      	b.n	800486e <UART_SetConfig+0x5ae>
 8004850:	2320      	movs	r3, #32
 8004852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004856:	e00a      	b.n	800486e <UART_SetConfig+0x5ae>
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800485e:	e006      	b.n	800486e <UART_SetConfig+0x5ae>
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004866:	e002      	b.n	800486e <UART_SetConfig+0x5ae>
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a40      	ldr	r2, [pc, #256]	; (8004974 <UART_SetConfig+0x6b4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	f040 80ef 	bne.w	8004a58 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800487a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800487e:	2b20      	cmp	r3, #32
 8004880:	dc46      	bgt.n	8004910 <UART_SetConfig+0x650>
 8004882:	2b02      	cmp	r3, #2
 8004884:	f2c0 8081 	blt.w	800498a <UART_SetConfig+0x6ca>
 8004888:	3b02      	subs	r3, #2
 800488a:	2b1e      	cmp	r3, #30
 800488c:	d87d      	bhi.n	800498a <UART_SetConfig+0x6ca>
 800488e:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <UART_SetConfig+0x5d4>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	08004917 	.word	0x08004917
 8004898:	0800498b 	.word	0x0800498b
 800489c:	0800491f 	.word	0x0800491f
 80048a0:	0800498b 	.word	0x0800498b
 80048a4:	0800498b 	.word	0x0800498b
 80048a8:	0800498b 	.word	0x0800498b
 80048ac:	0800492f 	.word	0x0800492f
 80048b0:	0800498b 	.word	0x0800498b
 80048b4:	0800498b 	.word	0x0800498b
 80048b8:	0800498b 	.word	0x0800498b
 80048bc:	0800498b 	.word	0x0800498b
 80048c0:	0800498b 	.word	0x0800498b
 80048c4:	0800498b 	.word	0x0800498b
 80048c8:	0800498b 	.word	0x0800498b
 80048cc:	0800493f 	.word	0x0800493f
 80048d0:	0800498b 	.word	0x0800498b
 80048d4:	0800498b 	.word	0x0800498b
 80048d8:	0800498b 	.word	0x0800498b
 80048dc:	0800498b 	.word	0x0800498b
 80048e0:	0800498b 	.word	0x0800498b
 80048e4:	0800498b 	.word	0x0800498b
 80048e8:	0800498b 	.word	0x0800498b
 80048ec:	0800498b 	.word	0x0800498b
 80048f0:	0800498b 	.word	0x0800498b
 80048f4:	0800498b 	.word	0x0800498b
 80048f8:	0800498b 	.word	0x0800498b
 80048fc:	0800498b 	.word	0x0800498b
 8004900:	0800498b 	.word	0x0800498b
 8004904:	0800498b 	.word	0x0800498b
 8004908:	0800498b 	.word	0x0800498b
 800490c:	0800497d 	.word	0x0800497d
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d036      	beq.n	8004982 <UART_SetConfig+0x6c2>
 8004914:	e039      	b.n	800498a <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004916:	f7fe fecf 	bl	80036b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800491a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800491c:	e03b      	b.n	8004996 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800491e:	f107 0314 	add.w	r3, r7, #20
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe fede 	bl	80036e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800492c:	e033      	b.n	8004996 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800492e:	f107 0308 	add.w	r3, r7, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff f82a 	bl	800398c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800493c:	e02b      	b.n	8004996 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <UART_SetConfig+0x6a8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <UART_SetConfig+0x6a8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	08db      	lsrs	r3, r3, #3
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <UART_SetConfig+0x6b8>)
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800495c:	e01b      	b.n	8004996 <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <UART_SetConfig+0x6b8>)
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004962:	e018      	b.n	8004996 <UART_SetConfig+0x6d6>
 8004964:	40011400 	.word	0x40011400
 8004968:	58024400 	.word	0x58024400
 800496c:	40007800 	.word	0x40007800
 8004970:	40007c00 	.word	0x40007c00
 8004974:	58000c00 	.word	0x58000c00
 8004978:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800497c:	4bc4      	ldr	r3, [pc, #784]	; (8004c90 <UART_SetConfig+0x9d0>)
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004980:	e009      	b.n	8004996 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004988:	e005      	b.n	8004996 <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004994:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 81da 	beq.w	8004d52 <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	4abc      	ldr	r2, [pc, #752]	; (8004c94 <UART_SetConfig+0x9d4>)
 80049a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049a8:	461a      	mov	r2, r3
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80049b0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	4413      	add	r3, r2
 80049bc:	6a3a      	ldr	r2, [r7, #32]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d305      	bcc.n	80049ce <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d903      	bls.n	80049d6 <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80049d4:	e1bd      	b.n	8004d52 <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	4618      	mov	r0, r3
 80049da:	f04f 0100 	mov.w	r1, #0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	4aac      	ldr	r2, [pc, #688]	; (8004c94 <UART_SetConfig+0x9d4>)
 80049e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	f7fb fc73 	bl	80002d8 <__aeabi_uldivmod>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	020b      	lsls	r3, r1, #8
 8004a04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a08:	0202      	lsls	r2, r0, #8
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	6849      	ldr	r1, [r1, #4]
 8004a0e:	0849      	lsrs	r1, r1, #1
 8004a10:	4608      	mov	r0, r1
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	1814      	adds	r4, r2, r0
 8004a18:	eb43 0501 	adc.w	r5, r3, r1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	461a      	mov	r2, r3
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	4620      	mov	r0, r4
 8004a28:	4629      	mov	r1, r5
 8004a2a:	f7fb fc55 	bl	80002d8 <__aeabi_uldivmod>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4613      	mov	r3, r2
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a3c:	d308      	bcc.n	8004a50 <UART_SetConfig+0x790>
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a44:	d204      	bcs.n	8004a50 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e180      	b.n	8004d52 <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004a56:	e17c      	b.n	8004d52 <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a60:	f040 80bf 	bne.w	8004be2 <UART_SetConfig+0x922>
  {
    switch (clocksource)
 8004a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	dc49      	bgt.n	8004b00 <UART_SetConfig+0x840>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	db7c      	blt.n	8004b6a <UART_SetConfig+0x8aa>
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d87a      	bhi.n	8004b6a <UART_SetConfig+0x8aa>
 8004a74:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0x7bc>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004b07 	.word	0x08004b07
 8004a80:	08004b0f 	.word	0x08004b0f
 8004a84:	08004b6b 	.word	0x08004b6b
 8004a88:	08004b6b 	.word	0x08004b6b
 8004a8c:	08004b17 	.word	0x08004b17
 8004a90:	08004b6b 	.word	0x08004b6b
 8004a94:	08004b6b 	.word	0x08004b6b
 8004a98:	08004b6b 	.word	0x08004b6b
 8004a9c:	08004b27 	.word	0x08004b27
 8004aa0:	08004b6b 	.word	0x08004b6b
 8004aa4:	08004b6b 	.word	0x08004b6b
 8004aa8:	08004b6b 	.word	0x08004b6b
 8004aac:	08004b6b 	.word	0x08004b6b
 8004ab0:	08004b6b 	.word	0x08004b6b
 8004ab4:	08004b6b 	.word	0x08004b6b
 8004ab8:	08004b6b 	.word	0x08004b6b
 8004abc:	08004b37 	.word	0x08004b37
 8004ac0:	08004b6b 	.word	0x08004b6b
 8004ac4:	08004b6b 	.word	0x08004b6b
 8004ac8:	08004b6b 	.word	0x08004b6b
 8004acc:	08004b6b 	.word	0x08004b6b
 8004ad0:	08004b6b 	.word	0x08004b6b
 8004ad4:	08004b6b 	.word	0x08004b6b
 8004ad8:	08004b6b 	.word	0x08004b6b
 8004adc:	08004b6b 	.word	0x08004b6b
 8004ae0:	08004b6b 	.word	0x08004b6b
 8004ae4:	08004b6b 	.word	0x08004b6b
 8004ae8:	08004b6b 	.word	0x08004b6b
 8004aec:	08004b6b 	.word	0x08004b6b
 8004af0:	08004b6b 	.word	0x08004b6b
 8004af4:	08004b6b 	.word	0x08004b6b
 8004af8:	08004b6b 	.word	0x08004b6b
 8004afc:	08004b5d 	.word	0x08004b5d
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d02e      	beq.n	8004b62 <UART_SetConfig+0x8a2>
 8004b04:	e031      	b.n	8004b6a <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b06:	f7fd fe4b 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8004b0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004b0c:	e033      	b.n	8004b76 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b0e:	f7fd fe5d 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8004b12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004b14:	e02f      	b.n	8004b76 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b16:	f107 0314 	add.w	r3, r7, #20
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe fde2 	bl	80036e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b24:	e027      	b.n	8004b76 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b26:	f107 0308 	add.w	r3, r7, #8
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe ff2e 	bl	800398c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b34:	e01f      	b.n	8004b76 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b36:	4b58      	ldr	r3, [pc, #352]	; (8004c98 <UART_SetConfig+0x9d8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b42:	4b55      	ldr	r3, [pc, #340]	; (8004c98 <UART_SetConfig+0x9d8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	08db      	lsrs	r3, r3, #3
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	4a53      	ldr	r2, [pc, #332]	; (8004c9c <UART_SetConfig+0x9dc>)
 8004b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b54:	e00f      	b.n	8004b76 <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 8004b56:	4b51      	ldr	r3, [pc, #324]	; (8004c9c <UART_SetConfig+0x9dc>)
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b5a:	e00c      	b.n	8004b76 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b5c:	4b4c      	ldr	r3, [pc, #304]	; (8004c90 <UART_SetConfig+0x9d0>)
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b60:	e009      	b.n	8004b76 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b68:	e005      	b.n	8004b76 <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004b74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80ea 	beq.w	8004d52 <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	4a44      	ldr	r2, [pc, #272]	; (8004c94 <UART_SetConfig+0x9d4>)
 8004b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b90:	005a      	lsls	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	441a      	add	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	2b0f      	cmp	r3, #15
 8004baa:	d916      	bls.n	8004bda <UART_SetConfig+0x91a>
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d212      	bcs.n	8004bda <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f023 030f 	bic.w	r3, r3, #15
 8004bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e0bb      	b.n	8004d52 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004be0:	e0b7      	b.n	8004d52 <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004be2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	dc4a      	bgt.n	8004c80 <UART_SetConfig+0x9c0>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f2c0 8086 	blt.w	8004cfc <UART_SetConfig+0xa3c>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	f200 8083 	bhi.w	8004cfc <UART_SetConfig+0xa3c>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0x93c>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c87 	.word	0x08004c87
 8004c00:	08004ca1 	.word	0x08004ca1
 8004c04:	08004cfd 	.word	0x08004cfd
 8004c08:	08004cfd 	.word	0x08004cfd
 8004c0c:	08004ca9 	.word	0x08004ca9
 8004c10:	08004cfd 	.word	0x08004cfd
 8004c14:	08004cfd 	.word	0x08004cfd
 8004c18:	08004cfd 	.word	0x08004cfd
 8004c1c:	08004cb9 	.word	0x08004cb9
 8004c20:	08004cfd 	.word	0x08004cfd
 8004c24:	08004cfd 	.word	0x08004cfd
 8004c28:	08004cfd 	.word	0x08004cfd
 8004c2c:	08004cfd 	.word	0x08004cfd
 8004c30:	08004cfd 	.word	0x08004cfd
 8004c34:	08004cfd 	.word	0x08004cfd
 8004c38:	08004cfd 	.word	0x08004cfd
 8004c3c:	08004cc9 	.word	0x08004cc9
 8004c40:	08004cfd 	.word	0x08004cfd
 8004c44:	08004cfd 	.word	0x08004cfd
 8004c48:	08004cfd 	.word	0x08004cfd
 8004c4c:	08004cfd 	.word	0x08004cfd
 8004c50:	08004cfd 	.word	0x08004cfd
 8004c54:	08004cfd 	.word	0x08004cfd
 8004c58:	08004cfd 	.word	0x08004cfd
 8004c5c:	08004cfd 	.word	0x08004cfd
 8004c60:	08004cfd 	.word	0x08004cfd
 8004c64:	08004cfd 	.word	0x08004cfd
 8004c68:	08004cfd 	.word	0x08004cfd
 8004c6c:	08004cfd 	.word	0x08004cfd
 8004c70:	08004cfd 	.word	0x08004cfd
 8004c74:	08004cfd 	.word	0x08004cfd
 8004c78:	08004cfd 	.word	0x08004cfd
 8004c7c:	08004cef 	.word	0x08004cef
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d037      	beq.n	8004cf4 <UART_SetConfig+0xa34>
 8004c84:	e03a      	b.n	8004cfc <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c86:	f7fd fd8b 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8004c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004c8c:	e03c      	b.n	8004d08 <UART_SetConfig+0xa48>
 8004c8e:	bf00      	nop
 8004c90:	003d0900 	.word	0x003d0900
 8004c94:	08005410 	.word	0x08005410
 8004c98:	58024400 	.word	0x58024400
 8004c9c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca0:	f7fd fd94 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8004ca4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004ca6:	e02f      	b.n	8004d08 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe fd19 	bl	80036e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cb6:	e027      	b.n	8004d08 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cb8:	f107 0308 	add.w	r3, r7, #8
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe fe65 	bl	800398c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cc6:	e01f      	b.n	8004d08 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cc8:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <UART_SetConfig+0xabc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <UART_SetConfig+0xabc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	08db      	lsrs	r3, r3, #3
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	4a28      	ldr	r2, [pc, #160]	; (8004d80 <UART_SetConfig+0xac0>)
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8004ce8:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <UART_SetConfig+0xac0>)
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cec:	e00c      	b.n	8004d08 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004cee:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <UART_SetConfig+0xac4>)
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cf2:	e009      	b.n	8004d08 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cfa:	e005      	b.n	8004d08 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004d06:	bf00      	nop
    }

    if (pclk != 0U)
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d021      	beq.n	8004d52 <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <UART_SetConfig+0xac8>)
 8004d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	441a      	add	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	d908      	bls.n	8004d4c <UART_SetConfig+0xa8c>
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d40:	d204      	bcs.n	8004d4c <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e002      	b.n	8004d52 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004d6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3738      	adds	r7, #56	; 0x38
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bdb0      	pop	{r4, r5, r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	03d09000 	.word	0x03d09000
 8004d84:	003d0900 	.word	0x003d0900
 8004d88:	08005410 	.word	0x08005410

08004d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8a:	d10a      	bne.n	8004ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ee0:	f7fb fef2 	bl	8000cc8 <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d10e      	bne.n	8004f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f82c 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e022      	b.n	8004f58 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d10e      	bne.n	8004f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f816 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e00c      	b.n	8004f58 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f70:	e062      	b.n	8005038 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d05e      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7a:	f7fb fea5 	bl	8000cc8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d302      	bcc.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d11d      	bne.n	8004fcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f9e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e045      	b.n	8005058 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d02e      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe8:	d126      	bne.n	8005038 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ff2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005002:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e00f      	b.n	8005058 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	429a      	cmp	r2, r3
 8005054:	d08d      	beq.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005076:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6899      	ldr	r1, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <UART_EndRxTransfer+0x44>)
 8005084:	400b      	ands	r3, r1
 8005086:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	effffffe 	.word	0xeffffffe

080050a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff f8f0 	bl	80042ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff f8cc 	bl	8004298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_UARTEx_DisableFifoMode+0x16>
 8005156:	2302      	movs	r3, #2
 8005158:	e027      	b.n	80051aa <HAL_UARTEx_DisableFifoMode+0x66>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2224      	movs	r2, #36	; 0x24
 8005166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e02d      	b.n	800522a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2224      	movs	r2, #36	; 0x24
 80051da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f850 	bl	80052b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005246:	2302      	movs	r3, #2
 8005248:	e02d      	b.n	80052a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2224      	movs	r2, #36	; 0x24
 8005256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f812 	bl	80052b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	; 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80052b8:	4a2f      	ldr	r2, [pc, #188]	; (8005378 <UARTEx_SetNbDataToProcess+0xc8>)
 80052ba:	f107 0314 	add.w	r3, r7, #20
 80052be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052c2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80052c6:	4a2d      	ldr	r2, [pc, #180]	; (800537c <UARTEx_SetNbDataToProcess+0xcc>)
 80052c8:	f107 030c 	add.w	r3, r7, #12
 80052cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052d0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d108      	bne.n	80052ee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052ec:	e03d      	b.n	800536a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052ee:	2310      	movs	r3, #16
 80052f0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052f2:	2310      	movs	r3, #16
 80052f4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	0e5b      	lsrs	r3, r3, #25
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	0f5b      	lsrs	r3, r3, #29
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005316:	7fbb      	ldrb	r3, [r7, #30]
 8005318:	7f3a      	ldrb	r2, [r7, #28]
 800531a:	f107 0120 	add.w	r1, r7, #32
 800531e:	440a      	add	r2, r1
 8005320:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	7f3a      	ldrb	r2, [r7, #28]
 800532a:	f107 0120 	add.w	r1, r7, #32
 800532e:	440a      	add	r2, r1
 8005330:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005334:	fb93 f3f2 	sdiv	r3, r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005340:	7ffb      	ldrb	r3, [r7, #31]
 8005342:	7f7a      	ldrb	r2, [r7, #29]
 8005344:	f107 0120 	add.w	r1, r7, #32
 8005348:	440a      	add	r2, r1
 800534a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800534e:	fb02 f303 	mul.w	r3, r2, r3
 8005352:	7f7a      	ldrb	r2, [r7, #29]
 8005354:	f107 0120 	add.w	r1, r7, #32
 8005358:	440a      	add	r2, r1
 800535a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800535e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005362:	b29a      	uxth	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800536a:	bf00      	nop
 800536c:	3724      	adds	r7, #36	; 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	080053f0 	.word	0x080053f0
 800537c:	080053f8 	.word	0x080053f8

08005380 <__libc_init_array>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4d0d      	ldr	r5, [pc, #52]	; (80053b8 <__libc_init_array+0x38>)
 8005384:	4c0d      	ldr	r4, [pc, #52]	; (80053bc <__libc_init_array+0x3c>)
 8005386:	1b64      	subs	r4, r4, r5
 8005388:	10a4      	asrs	r4, r4, #2
 800538a:	2600      	movs	r6, #0
 800538c:	42a6      	cmp	r6, r4
 800538e:	d109      	bne.n	80053a4 <__libc_init_array+0x24>
 8005390:	4d0b      	ldr	r5, [pc, #44]	; (80053c0 <__libc_init_array+0x40>)
 8005392:	4c0c      	ldr	r4, [pc, #48]	; (80053c4 <__libc_init_array+0x44>)
 8005394:	f000 f820 	bl	80053d8 <_init>
 8005398:	1b64      	subs	r4, r4, r5
 800539a:	10a4      	asrs	r4, r4, #2
 800539c:	2600      	movs	r6, #0
 800539e:	42a6      	cmp	r6, r4
 80053a0:	d105      	bne.n	80053ae <__libc_init_array+0x2e>
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
 80053a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a8:	4798      	blx	r3
 80053aa:	3601      	adds	r6, #1
 80053ac:	e7ee      	b.n	800538c <__libc_init_array+0xc>
 80053ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b2:	4798      	blx	r3
 80053b4:	3601      	adds	r6, #1
 80053b6:	e7f2      	b.n	800539e <__libc_init_array+0x1e>
 80053b8:	08005430 	.word	0x08005430
 80053bc:	08005430 	.word	0x08005430
 80053c0:	08005430 	.word	0x08005430
 80053c4:	08005434 	.word	0x08005434

080053c8 <memset>:
 80053c8:	4402      	add	r2, r0
 80053ca:	4603      	mov	r3, r0
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d100      	bne.n	80053d2 <memset+0xa>
 80053d0:	4770      	bx	lr
 80053d2:	f803 1b01 	strb.w	r1, [r3], #1
 80053d6:	e7f9      	b.n	80053cc <memset+0x4>

080053d8 <_init>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	bf00      	nop
 80053dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053de:	bc08      	pop	{r3}
 80053e0:	469e      	mov	lr, r3
 80053e2:	4770      	bx	lr

080053e4 <_fini>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	bf00      	nop
 80053e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ea:	bc08      	pop	{r3}
 80053ec:	469e      	mov	lr, r3
 80053ee:	4770      	bx	lr
