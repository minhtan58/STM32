
HME_Datalogger_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da94  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800dd34  0800dd34  0001dd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e150  0800e150  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e150  0800e150  0001e150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e158  0800e158  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e158  0800e158  0001e158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e15c  0800e15c  0001e15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800e160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000083c8  24000078  0800e1d8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24008440  0800e1d8  00028440  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042752  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000711f  00000000  00000000  000627f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002288  00000000  00000000  00069918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002020  00000000  00000000  0006bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00048404  00000000  00000000  0006dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e626  00000000  00000000  000b5fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bbb81  00000000  00000000  000e45ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002a016b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096f0  00000000  00000000  002a01c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dd1c 	.word	0x0800dd1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800dd1c 	.word	0x0800dd1c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <vApplicationGetIdleTaskMemory+0x2c>)
 800071c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <vApplicationGetIdleTaskMemory+0x30>)
 8000722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	24000094 	.word	0x24000094
 800073c:	240000e8 	.word	0x240000e8

08000740 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c4;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af02      	add	r7, sp, #8
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f023 030f 	bic.w	r3, r3, #15
 8000750:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	f043 030c 	orr.w	r3, r3, #12
 800075e:	b2db      	uxtb	r3, r3
 8000760:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	b2db      	uxtb	r3, r3
 800076a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800076c:	7bbb      	ldrb	r3, [r7, #14]
 800076e:	f043 030c 	orr.w	r3, r3, #12
 8000772:	b2db      	uxtb	r3, r3
 8000774:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000776:	7bbb      	ldrb	r3, [r7, #14]
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	b2db      	uxtb	r3, r3
 800077e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000780:	f107 0208 	add.w	r2, r7, #8
 8000784:	2364      	movs	r3, #100	; 0x64
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2304      	movs	r3, #4
 800078a:	214e      	movs	r1, #78	; 0x4e
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <lcd_send_cmd+0x5c>)
 800078e:	f002 fcaf 	bl	80030f0 <HAL_I2C_Master_Transmit>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	24004060 	.word	0x24004060

080007a0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f023 030f 	bic.w	r3, r3, #15
 80007b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	f043 030d 	orr.w	r3, r3, #13
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	f043 0309 	orr.w	r3, r3, #9
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	f043 030d 	orr.w	r3, r3, #13
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	f043 0309 	orr.w	r3, r3, #9
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007e0:	f107 0208 	add.w	r2, r7, #8
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2304      	movs	r3, #4
 80007ea:	214e      	movs	r1, #78	; 0x4e
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <lcd_send_data+0x5c>)
 80007ee:	f002 fc7f 	bl	80030f0 <HAL_I2C_Master_Transmit>
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	24004060 	.word	0x24004060

08000800 <lcd_clear>:

void lcd_clear (void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff ff9a 	bl	8000740 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	e005      	b.n	800081e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000812:	2020      	movs	r0, #32
 8000814:	f7ff ffc4 	bl	80007a0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3301      	adds	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b63      	cmp	r3, #99	; 0x63
 8000822:	ddf6      	ble.n	8000812 <lcd_clear+0x12>
	}
}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b03      	cmp	r3, #3
 800083e:	d81f      	bhi.n	8000880 <lcd_put_cur+0x50>
 8000840:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <lcd_put_cur+0x18>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	08000859 	.word	0x08000859
 800084c:	08000863 	.word	0x08000863
 8000850:	0800086d 	.word	0x0800086d
 8000854:	08000877 	.word	0x08000877
    switch (row)
    {
        case 0:
            col |= 0x80;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085e:	603b      	str	r3, [r7, #0]
            break;
 8000860:	e00f      	b.n	8000882 <lcd_put_cur+0x52>
        case 1:
            col |= 0xC0;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000868:	603b      	str	r3, [r7, #0]
            break;
 800086a:	e00a      	b.n	8000882 <lcd_put_cur+0x52>
        case 2:
            col |= 0x94;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 8000872:	603b      	str	r3, [r7, #0]
            break;
 8000874:	e005      	b.n	8000882 <lcd_put_cur+0x52>
        case 3:
            col |= 0xd4;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 800087c:	603b      	str	r3, [r7, #0]
            break;
 800087e:	e000      	b.n	8000882 <lcd_put_cur+0x52>
        default:
			break;
 8000880:	bf00      	nop
    }
    lcd_send_cmd (col);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff5a 	bl	8000740 <lcd_send_cmd>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <lcd_init>:


void lcd_init (void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000898:	2032      	movs	r0, #50	; 0x32
 800089a:	f001 fb15 	bl	8001ec8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800089e:	2030      	movs	r0, #48	; 0x30
 80008a0:	f7ff ff4e 	bl	8000740 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80008a4:	2005      	movs	r0, #5
 80008a6:	f001 fb0f 	bl	8001ec8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008aa:	2030      	movs	r0, #48	; 0x30
 80008ac:	f7ff ff48 	bl	8000740 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80008b0:	2001      	movs	r0, #1
 80008b2:	f001 fb09 	bl	8001ec8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008b6:	2030      	movs	r0, #48	; 0x30
 80008b8:	f7ff ff42 	bl	8000740 <lcd_send_cmd>
	HAL_Delay(10);
 80008bc:	200a      	movs	r0, #10
 80008be:	f001 fb03 	bl	8001ec8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80008c2:	2020      	movs	r0, #32
 80008c4:	f7ff ff3c 	bl	8000740 <lcd_send_cmd>
	HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f001 fafd 	bl	8001ec8 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80008ce:	2028      	movs	r0, #40	; 0x28
 80008d0:	f7ff ff36 	bl	8000740 <lcd_send_cmd>
	HAL_Delay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f001 faf7 	bl	8001ec8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80008da:	2008      	movs	r0, #8
 80008dc:	f7ff ff30 	bl	8000740 <lcd_send_cmd>
	HAL_Delay(1);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f001 faf1 	bl	8001ec8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff ff2a 	bl	8000740 <lcd_send_cmd>
	HAL_Delay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f001 faeb 	bl	8001ec8 <HAL_Delay>
	HAL_Delay(1);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f001 fae8 	bl	8001ec8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80008f8:	2006      	movs	r0, #6
 80008fa:	f7ff ff21 	bl	8000740 <lcd_send_cmd>
	HAL_Delay(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f001 fae2 	bl	8001ec8 <HAL_Delay>
	lcd_send_cmd (0x0F); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000904:	200f      	movs	r0, #15
 8000906:	f7ff ff1b 	bl	8000740 <lcd_send_cmd>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}

0800090e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000916:	e006      	b.n	8000926 <lcd_send_string+0x18>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff3d 	bl	80007a0 <lcd_send_data>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f4      	bne.n	8000918 <lcd_send_string+0xa>
}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <vLCDDisplay>:
{
	if(u8MenuIndex > 0)u8MenuIndex--;
}

void vLCDDisplay(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	switch (eLCDState)
 800093c:	4bc7      	ldr	r3, [pc, #796]	; (8000c5c <vLCDDisplay+0x324>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b0a      	cmp	r3, #10
 8000942:	f200 81f8 	bhi.w	8000d36 <vLCDDisplay+0x3fe>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <vLCDDisplay+0x14>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	08000979 	.word	0x08000979
 8000950:	080009c3 	.word	0x080009c3
 8000954:	08000a0d 	.word	0x08000a0d
 8000958:	08000a57 	.word	0x08000a57
 800095c:	08000aa1 	.word	0x08000aa1
 8000960:	08000aeb 	.word	0x08000aeb
 8000964:	08000b35 	.word	0x08000b35
 8000968:	08000b7f 	.word	0x08000b7f
 800096c:	08000bc9 	.word	0x08000bc9
 8000970:	08000c13 	.word	0x08000c13
 8000974:	08000ced 	.word	0x08000ced
	{
		case E_LCD_MAIN_MENU:
		{
			lcd_clear();
 8000978:	f7ff ff42 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 800097c:	2100      	movs	r1, #0
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ff56 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Overview");
 8000984:	48b6      	ldr	r0, [pc, #728]	; (8000c60 <vLCDDisplay+0x328>)
 8000986:	f7ff ffc2 	bl	800090e <lcd_send_string>
			lcd_put_cur(1,0);
 800098a:	2100      	movs	r1, #0
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff ff4f 	bl	8000830 <lcd_put_cur>
			lcd_send_string("System setting");
 8000992:	48b4      	ldr	r0, [pc, #720]	; (8000c64 <vLCDDisplay+0x32c>)
 8000994:	f7ff ffbb 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 8000998:	2100      	movs	r1, #0
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff ff48 	bl	8000830 <lcd_put_cur>
			lcd_send_string("I/O setting");
 80009a0:	48b1      	ldr	r0, [pc, #708]	; (8000c68 <vLCDDisplay+0x330>)
 80009a2:	f7ff ffb4 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 80009a6:	2100      	movs	r1, #0
 80009a8:	2003      	movs	r0, #3
 80009aa:	f7ff ff41 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Sensor status");
 80009ae:	48af      	ldr	r0, [pc, #700]	; (8000c6c <vLCDDisplay+0x334>)
 80009b0:	f7ff ffad 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,0);
 80009b4:	4bae      	ldr	r3, [pc, #696]	; (8000c70 <vLCDDisplay+0x338>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff38 	bl	8000830 <lcd_put_cur>
			break;
 80009c0:	e1ba      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		case E_LCD_OVERVIEW:
		{
			lcd_clear();
 80009c2:	f7ff ff1d 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 80009c6:	2100      	movs	r1, #0
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff31 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Model name: D-SL21");
 80009ce:	48a9      	ldr	r0, [pc, #676]	; (8000c74 <vLCDDisplay+0x33c>)
 80009d0:	f7ff ff9d 	bl	800090e <lcd_send_string>
			lcd_put_cur(1,0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff ff2a 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Station name: Hi");
 80009dc:	48a6      	ldr	r0, [pc, #664]	; (8000c78 <vLCDDisplay+0x340>)
 80009de:	f7ff ff96 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2002      	movs	r0, #2
 80009e6:	f7ff ff23 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Serial number: 202");
 80009ea:	48a4      	ldr	r0, [pc, #656]	; (8000c7c <vLCDDisplay+0x344>)
 80009ec:	f7ff ff8f 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 80009f0:	2100      	movs	r1, #0
 80009f2:	2003      	movs	r0, #3
 80009f4:	f7ff ff1c 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Voltage: 9.1V");
 80009f8:	48a1      	ldr	r0, [pc, #644]	; (8000c80 <vLCDDisplay+0x348>)
 80009fa:	f7ff ff88 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,0);
 80009fe:	4b9c      	ldr	r3, [pc, #624]	; (8000c70 <vLCDDisplay+0x338>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff13 	bl	8000830 <lcd_put_cur>
			break;
 8000a0a:	e195      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		case E_LCD_SYSTEM_SETTING:
		{
			lcd_clear();
 8000a0c:	f7ff fef8 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 8000a10:	2100      	movs	r1, #0
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff ff0c 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Name: _________");
 8000a18:	489a      	ldr	r0, [pc, #616]	; (8000c84 <vLCDDisplay+0x34c>)
 8000a1a:	f7ff ff78 	bl	800090e <lcd_send_string>
			lcd_put_cur(1,0);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff ff05 	bl	8000830 <lcd_put_cur>
			lcd_send_string("ID: ___________");
 8000a26:	4898      	ldr	r0, [pc, #608]	; (8000c88 <vLCDDisplay+0x350>)
 8000a28:	f7ff ff71 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f7ff fefe 	bl	8000830 <lcd_put_cur>
			lcd_send_string("IPAdd: 192.168");
 8000a34:	4895      	ldr	r0, [pc, #596]	; (8000c8c <vLCDDisplay+0x354>)
 8000a36:	f7ff ff6a 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f7ff fef7 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Date: 5-5-2021");
 8000a42:	4893      	ldr	r0, [pc, #588]	; (8000c90 <vLCDDisplay+0x358>)
 8000a44:	f7ff ff63 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,0);
 8000a48:	4b89      	ldr	r3, [pc, #548]	; (8000c70 <vLCDDisplay+0x338>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff feee 	bl	8000830 <lcd_put_cur>
			break;
 8000a54:	e170      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		case E_LCD_IO_SETTING:
		{
			lcd_clear();
 8000a56:	f7ff fed3 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fee7 	bl	8000830 <lcd_put_cur>
			lcd_send_string("I/O setting");
 8000a62:	4881      	ldr	r0, [pc, #516]	; (8000c68 <vLCDDisplay+0x330>)
 8000a64:	f7ff ff53 	bl	800090e <lcd_send_string>
			lcd_put_cur(1,0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff fee0 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Setting Analog channel");
 8000a70:	4888      	ldr	r0, [pc, #544]	; (8000c94 <vLCDDisplay+0x35c>)
 8000a72:	f7ff ff4c 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 8000a76:	2100      	movs	r1, #0
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f7ff fed9 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Setting Digital channel");
 8000a7e:	4886      	ldr	r0, [pc, #536]	; (8000c98 <vLCDDisplay+0x360>)
 8000a80:	f7ff ff45 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 8000a84:	2100      	movs	r1, #0
 8000a86:	2003      	movs	r0, #3
 8000a88:	f7ff fed2 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Setting Serial channel");
 8000a8c:	4883      	ldr	r0, [pc, #524]	; (8000c9c <vLCDDisplay+0x364>)
 8000a8e:	f7ff ff3e 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000a92:	4b77      	ldr	r3, [pc, #476]	; (8000c70 <vLCDDisplay+0x338>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2101      	movs	r1, #1
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fec9 	bl	8000830 <lcd_put_cur>
			break;
 8000a9e:	e14b      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		case E_LCD_IO_SETTING_ANALOG:
		{
			lcd_clear();
 8000aa0:	f7ff feae 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fec2 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Setting analog");
 8000aac:	487c      	ldr	r0, [pc, #496]	; (8000ca0 <vLCDDisplay+0x368>)
 8000aae:	f7ff ff2e 	bl	800090e <lcd_send_string>
			lcd_put_cur(1,0);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff febb 	bl	8000830 <lcd_put_cur>
			lcd_send_string("AI1:      Enable");
 8000aba:	487a      	ldr	r0, [pc, #488]	; (8000ca4 <vLCDDisplay+0x36c>)
 8000abc:	f7ff ff27 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff feb4 	bl	8000830 <lcd_put_cur>
			lcd_send_string("AI2:      Enable");
 8000ac8:	4877      	ldr	r0, [pc, #476]	; (8000ca8 <vLCDDisplay+0x370>)
 8000aca:	f7ff ff20 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f7ff fead 	bl	8000830 <lcd_put_cur>
			lcd_send_string("AI3:      Enable");
 8000ad6:	4875      	ldr	r0, [pc, #468]	; (8000cac <vLCDDisplay+0x374>)
 8000ad8:	f7ff ff19 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000adc:	4b64      	ldr	r3, [pc, #400]	; (8000c70 <vLCDDisplay+0x338>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fea4 	bl	8000830 <lcd_put_cur>
			break;
 8000ae8:	e126      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		case E_LCD_IO_SETTING_DIGITAL:
		{
			lcd_clear();
 8000aea:	f7ff fe89 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 8000aee:	2100      	movs	r1, #0
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff fe9d 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Setting digital");
 8000af6:	486e      	ldr	r0, [pc, #440]	; (8000cb0 <vLCDDisplay+0x378>)
 8000af8:	f7ff ff09 	bl	800090e <lcd_send_string>
			lcd_put_cur(1,0);
 8000afc:	2100      	movs	r1, #0
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fe96 	bl	8000830 <lcd_put_cur>
			lcd_send_string("AI1:      Enable");
 8000b04:	4867      	ldr	r0, [pc, #412]	; (8000ca4 <vLCDDisplay+0x36c>)
 8000b06:	f7ff ff02 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fe8f 	bl	8000830 <lcd_put_cur>
			lcd_send_string("AI2:      Enable");
 8000b12:	4865      	ldr	r0, [pc, #404]	; (8000ca8 <vLCDDisplay+0x370>)
 8000b14:	f7ff fefb 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f7ff fe88 	bl	8000830 <lcd_put_cur>
			lcd_send_string("AI3:      Enable");
 8000b20:	4862      	ldr	r0, [pc, #392]	; (8000cac <vLCDDisplay+0x374>)
 8000b22:	f7ff fef4 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000b26:	4b52      	ldr	r3, [pc, #328]	; (8000c70 <vLCDDisplay+0x338>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fe7f 	bl	8000830 <lcd_put_cur>
			break;
 8000b32:	e101      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		case E_LCD_IO_SETTING_SERIAL:
		{
			lcd_clear();
 8000b34:	f7ff fe64 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe78 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Setting Serial");
 8000b40:	485c      	ldr	r0, [pc, #368]	; (8000cb4 <vLCDDisplay+0x37c>)
 8000b42:	f7ff fee4 	bl	800090e <lcd_send_string>
			lcd_put_cur(1,0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff fe71 	bl	8000830 <lcd_put_cur>
			lcd_send_string("COM4:    Enable");
 8000b4e:	485a      	ldr	r0, [pc, #360]	; (8000cb8 <vLCDDisplay+0x380>)
 8000b50:	f7ff fedd 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 8000b54:	2100      	movs	r1, #0
 8000b56:	2002      	movs	r0, #2
 8000b58:	f7ff fe6a 	bl	8000830 <lcd_put_cur>
			lcd_send_string("SDI12:   Enable");
 8000b5c:	4857      	ldr	r0, [pc, #348]	; (8000cbc <vLCDDisplay+0x384>)
 8000b5e:	f7ff fed6 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 8000b62:	2100      	movs	r1, #0
 8000b64:	2003      	movs	r0, #3
 8000b66:	f7ff fe63 	bl	8000830 <lcd_put_cur>
			lcd_send_string("RS485:   Enable");
 8000b6a:	4855      	ldr	r0, [pc, #340]	; (8000cc0 <vLCDDisplay+0x388>)
 8000b6c:	f7ff fecf 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000b70:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <vLCDDisplay+0x338>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe5a 	bl	8000830 <lcd_put_cur>
			break;
 8000b7c:	e0dc      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		case E_LCD_SENSOR_STATUS:
		{
			lcd_clear();
 8000b7e:	f7ff fe3f 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff fe53 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Sensor status");
 8000b8a:	4838      	ldr	r0, [pc, #224]	; (8000c6c <vLCDDisplay+0x334>)
 8000b8c:	f7ff febf 	bl	800090e <lcd_send_string>
			lcd_put_cur(1,0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fe4c 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Temperature: 20C");
 8000b98:	484a      	ldr	r0, [pc, #296]	; (8000cc4 <vLCDDisplay+0x38c>)
 8000b9a:	f7ff feb8 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff fe45 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Humidity: 75%");
 8000ba6:	4848      	ldr	r0, [pc, #288]	; (8000cc8 <vLCDDisplay+0x390>)
 8000ba8:	f7ff feb1 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f7ff fe3e 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Date: 5-5-2021");
 8000bb4:	4836      	ldr	r0, [pc, #216]	; (8000c90 <vLCDDisplay+0x358>)
 8000bb6:	f7ff feaa 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000bba:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <vLCDDisplay+0x338>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe35 	bl	8000830 <lcd_put_cur>
			break;
 8000bc6:	e0b7      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		case E_LCD_TRANSMISSION_SETTING:
		{
			lcd_clear();
 8000bc8:	f7ff fe1a 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fe2e 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Transmission setting");
 8000bd4:	483d      	ldr	r0, [pc, #244]	; (8000ccc <vLCDDisplay+0x394>)
 8000bd6:	f7ff fe9a 	bl	800090e <lcd_send_string>
			lcd_put_cur(0,0);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fe27 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Cellular setting");
 8000be2:	483b      	ldr	r0, [pc, #236]	; (8000cd0 <vLCDDisplay+0x398>)
 8000be4:	f7ff fe93 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	2002      	movs	r0, #2
 8000bec:	f7ff fe20 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Ethernet setting");
 8000bf0:	4838      	ldr	r0, [pc, #224]	; (8000cd4 <vLCDDisplay+0x39c>)
 8000bf2:	f7ff fe8c 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f7ff fe19 	bl	8000830 <lcd_put_cur>
			lcd_send_string(" ");
 8000bfe:	4836      	ldr	r0, [pc, #216]	; (8000cd8 <vLCDDisplay+0x3a0>)
 8000c00:	f7ff fe85 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <vLCDDisplay+0x338>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fe10 	bl	8000830 <lcd_put_cur>
			break;
 8000c10:	e092      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		case E_LCD_STORAGE_SETTING:
		{
			lcd_clear();
 8000c12:	f7ff fdf5 	bl	8000800 <lcd_clear>
			lcd_put_cur(0,0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe09 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Storage setting");
 8000c1e:	482f      	ldr	r0, [pc, #188]	; (8000cdc <vLCDDisplay+0x3a4>)
 8000c20:	f7ff fe75 	bl	800090e <lcd_send_string>
			lcd_put_cur(1,0);
 8000c24:	2100      	movs	r1, #0
 8000c26:	2001      	movs	r0, #1
 8000c28:	f7ff fe02 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Space free: 55%");
 8000c2c:	482c      	ldr	r0, [pc, #176]	; (8000ce0 <vLCDDisplay+0x3a8>)
 8000c2e:	f7ff fe6e 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,0);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fdfb 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Storage: Forever");
 8000c3a:	482a      	ldr	r0, [pc, #168]	; (8000ce4 <vLCDDisplay+0x3ac>)
 8000c3c:	f7ff fe67 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,0);
 8000c40:	2100      	movs	r1, #0
 8000c42:	2003      	movs	r0, #3
 8000c44:	f7ff fdf4 	bl	8000830 <lcd_put_cur>
			lcd_send_string("USB: Enable");
 8000c48:	4827      	ldr	r0, [pc, #156]	; (8000ce8 <vLCDDisplay+0x3b0>)
 8000c4a:	f7ff fe60 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <vLCDDisplay+0x338>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2101      	movs	r1, #1
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fdeb 	bl	8000830 <lcd_put_cur>
			break;
 8000c5a:	e06d      	b.n	8000d38 <vLCDDisplay+0x400>
 8000c5c:	240002e8 	.word	0x240002e8
 8000c60:	0800dd34 	.word	0x0800dd34
 8000c64:	0800dd40 	.word	0x0800dd40
 8000c68:	0800dd50 	.word	0x0800dd50
 8000c6c:	0800dd5c 	.word	0x0800dd5c
 8000c70:	240002e9 	.word	0x240002e9
 8000c74:	0800dd6c 	.word	0x0800dd6c
 8000c78:	0800dd80 	.word	0x0800dd80
 8000c7c:	0800dd94 	.word	0x0800dd94
 8000c80:	0800dda8 	.word	0x0800dda8
 8000c84:	0800ddb8 	.word	0x0800ddb8
 8000c88:	0800ddc8 	.word	0x0800ddc8
 8000c8c:	0800ddd8 	.word	0x0800ddd8
 8000c90:	0800dde8 	.word	0x0800dde8
 8000c94:	0800ddf8 	.word	0x0800ddf8
 8000c98:	0800de10 	.word	0x0800de10
 8000c9c:	0800de28 	.word	0x0800de28
 8000ca0:	0800de40 	.word	0x0800de40
 8000ca4:	0800de50 	.word	0x0800de50
 8000ca8:	0800de64 	.word	0x0800de64
 8000cac:	0800de78 	.word	0x0800de78
 8000cb0:	0800de8c 	.word	0x0800de8c
 8000cb4:	0800de9c 	.word	0x0800de9c
 8000cb8:	0800deac 	.word	0x0800deac
 8000cbc:	0800debc 	.word	0x0800debc
 8000cc0:	0800decc 	.word	0x0800decc
 8000cc4:	0800dedc 	.word	0x0800dedc
 8000cc8:	0800def0 	.word	0x0800def0
 8000ccc:	0800df00 	.word	0x0800df00
 8000cd0:	0800df18 	.word	0x0800df18
 8000cd4:	0800df2c 	.word	0x0800df2c
 8000cd8:	0800df40 	.word	0x0800df40
 8000cdc:	0800df44 	.word	0x0800df44
 8000ce0:	0800df54 	.word	0x0800df54
 8000ce4:	0800df64 	.word	0x0800df64
 8000ce8:	0800df78 	.word	0x0800df78
		}
		case E_LCD_LOG_FILE:
		{
			lcd_clear();
 8000cec:	f7ff fd88 	bl	8000800 <lcd_clear>
			lcd_put_cur(1,1);
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff fd9c 	bl	8000830 <lcd_put_cur>
			lcd_send_string("Log file");
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <vLCDDisplay+0x404>)
 8000cfa:	f7ff fe08 	bl	800090e <lcd_send_string>
			lcd_put_cur(2,1);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2002      	movs	r0, #2
 8000d02:	f7ff fd95 	bl	8000830 <lcd_put_cur>
			lcd_send_string("23/5 Setting change");
 8000d06:	480e      	ldr	r0, [pc, #56]	; (8000d40 <vLCDDisplay+0x408>)
 8000d08:	f7ff fe01 	bl	800090e <lcd_send_string>
			lcd_put_cur(3,1);
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f7ff fd8e 	bl	8000830 <lcd_put_cur>
			lcd_send_string("24/5 Setting change");
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <vLCDDisplay+0x40c>)
 8000d16:	f7ff fdfa 	bl	800090e <lcd_send_string>
			lcd_put_cur(4,1);
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	2004      	movs	r0, #4
 8000d1e:	f7ff fd87 	bl	8000830 <lcd_put_cur>
			lcd_send_string("25/5 Setting change");
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <vLCDDisplay+0x410>)
 8000d24:	f7ff fdf3 	bl	800090e <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <vLCDDisplay+0x414>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fd7e 	bl	8000830 <lcd_put_cur>
			break;
 8000d34:	e000      	b.n	8000d38 <vLCDDisplay+0x400>
		}
		default:
		break;
 8000d36:	bf00      	nop
	}
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	0800df84 	.word	0x0800df84
 8000d40:	0800df90 	.word	0x0800df90
 8000d44:	0800dfa4 	.word	0x0800dfa4
 8000d48:	0800dfb8 	.word	0x0800dfb8
 8000d4c:	240002e9 	.word	0x240002e9

08000d50 <main>:
void StartTask1(void const * argument);
void StartTask2(void const * argument);
void StartTask3(void const * argument);

int main(void)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	b098      	sub	sp, #96	; 0x60
 8000d54:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d5c:	bf00      	nop
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	; (8000ed4 <main+0x184>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d004      	beq.n	8000d74 <main+0x24>
 8000d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d6c:	1e5a      	subs	r2, r3, #1
 8000d6e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	dcf4      	bgt.n	8000d5e <main+0xe>
	if ( timeout < 0 )
 8000d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	da01      	bge.n	8000d7e <main+0x2e>
	{
	Error_Handler();
 8000d7a:	f000 faaf 	bl	80012dc <Error_Handler>
	}

	HAL_Init();
 8000d7e:	f001 f847 	bl	8001e10 <HAL_Init>
	SystemClock_Config();
 8000d82:	f000 f8bd 	bl	8000f00 <SystemClock_Config>

	__HAL_RCC_HSEM_CLK_ENABLE();
 8000d86:	4b53      	ldr	r3, [pc, #332]	; (8000ed4 <main+0x184>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <main+0x184>)
 8000d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <main+0x184>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f002 f8e5 	bl	8002f74 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000daa:	2100      	movs	r1, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	f002 f8fb 	bl	8002fa8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db6:	65fb      	str	r3, [r7, #92]	; 0x5c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000db8:	bf00      	nop
 8000dba:	4b46      	ldr	r3, [pc, #280]	; (8000ed4 <main+0x184>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <main+0x80>
 8000dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	dcf4      	bgt.n	8000dba <main+0x6a>
	if ( timeout < 0 )
 8000dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da01      	bge.n	8000dda <main+0x8a>
	{
		Error_Handler();
 8000dd6:	f000 fa81 	bl	80012dc <Error_Handler>
	}

	MX_GPIO_Init();
 8000dda:	f000 f97b 	bl	80010d4 <MX_GPIO_Init>
	MX_I2C4_Init();
 8000dde:	f000 f90d 	bl	8000ffc <MX_I2C4_Init>
	MX_QUADSPI_Init();
 8000de2:	f000 f94b 	bl	800107c <MX_QUADSPI_Init>
	MX_SDMMC1_SD_Init();
 8000de6:	f000 fae3 	bl	80013b0 <MX_SDMMC1_SD_Init>
	MX_UART8_Init();
 8000dea:	f000 ff4f 	bl	8001c8c <MX_UART8_Init>
	MX_USART1_UART_Init();
 8000dee:	f000 ff99 	bl	8001d24 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8000df2:	f000 fa81 	bl	80012f8 <MX_RTC_Init>
	MX_FATFS_Init();
 8000df6:	f00a f859 	bl	800aeac <MX_FATFS_Init>

	lcd_init ();
 8000dfa:	f7ff fd4b 	bl	8000894 <lcd_init>
	lcd_put_cur(0,0);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff fd15 	bl	8000830 <lcd_put_cur>
	lcd_send_string ("HELLO WORLD");
 8000e06:	4834      	ldr	r0, [pc, #208]	; (8000ed8 <main+0x188>)
 8000e08:	f7ff fd81 	bl	800090e <lcd_send_string>
	HAL_Delay(1000);
 8000e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e10:	f001 f85a 	bl	8001ec8 <HAL_Delay>
	lcd_put_cur(1,0);
 8000e14:	2100      	movs	r1, #0
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fd0a 	bl	8000830 <lcd_put_cur>
	lcd_send_string("from DICOM");
 8000e1c:	482f      	ldr	r0, [pc, #188]	; (8000edc <main+0x18c>)
 8000e1e:	f7ff fd76 	bl	800090e <lcd_send_string>
	HAL_Delay(1000);
 8000e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e26:	f001 f84f 	bl	8001ec8 <HAL_Delay>
	lcd_put_cur(2,0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f7ff fcff 	bl	8000830 <lcd_put_cur>
	lcd_send_string("BY");
 8000e32:	482b      	ldr	r0, [pc, #172]	; (8000ee0 <main+0x190>)
 8000e34:	f7ff fd6b 	bl	800090e <lcd_send_string>
	HAL_Delay(1000);
 8000e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e3c:	f001 f844 	bl	8001ec8 <HAL_Delay>
	lcd_put_cur(3,0);
 8000e40:	2100      	movs	r1, #0
 8000e42:	2003      	movs	r0, #3
 8000e44:	f7ff fcf4 	bl	8000830 <lcd_put_cur>
	lcd_send_string("Tran Minh Tan");
 8000e48:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <main+0x194>)
 8000e4a:	f7ff fd60 	bl	800090e <lcd_send_string>
	HAL_Delay(1000);
 8000e4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e52:	f001 f839 	bl	8001ec8 <HAL_Delay>
	vLCDDisplay();
 8000e56:	f7ff fd6f 	bl	8000938 <vLCDDisplay>

	osThreadDef(Task1, StartTask1, osPriorityAboveNormal, 0, 128);
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <main+0x198>)
 8000e5c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000e60:	461d      	mov	r5, r3
 8000e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000e6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f00a facf 	bl	800b418 <osThreadCreate>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <main+0x19c>)
 8000e7e:	6013      	str	r3, [r2, #0]

	osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 128);
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <main+0x1a0>)
 8000e82:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000e86:	461d      	mov	r5, r3
 8000e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00a fabc 	bl	800b418 <osThreadCreate>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <main+0x1a4>)
 8000ea4:	6013      	str	r3, [r2, #0]

	osThreadDef(Task3, StartTask3, osPriorityBelowNormal, 0, 128);
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <main+0x1a8>)
 8000ea8:	f107 0408 	add.w	r4, r7, #8
 8000eac:	461d      	mov	r5, r3
 8000eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f00a faa9 	bl	800b418 <osThreadCreate>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <main+0x1ac>)
 8000eca:	6013      	str	r3, [r2, #0]

	osKernelStart();
 8000ecc:	f00a fa81 	bl	800b3d2 <osKernelStart>

	while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <main+0x180>
 8000ed2:	bf00      	nop
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	0800dfe4 	.word	0x0800dfe4
 8000edc:	0800dff0 	.word	0x0800dff0
 8000ee0:	0800dffc 	.word	0x0800dffc
 8000ee4:	0800e000 	.word	0x0800e000
 8000ee8:	0800e010 	.word	0x0800e010
 8000eec:	240040c8 	.word	0x240040c8
 8000ef0:	0800e02c 	.word	0x0800e02c
 8000ef4:	240040ec 	.word	0x240040ec
 8000ef8:	0800e048 	.word	0x0800e048
 8000efc:	240040e8 	.word	0x240040e8

08000f00 <SystemClock_Config>:
//	Error_Handler();
//	}
//}

void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b09e      	sub	sp, #120	; 0x78
 8000f04:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	f002 fbef 	bl	80036f0 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <SystemClock_Config+0xf4>)
 8000f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1a:	4a36      	ldr	r2, [pc, #216]	; (8000ff4 <SystemClock_Config+0xf4>)
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <SystemClock_Config+0xf4>)
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <SystemClock_Config+0xf8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a31      	ldr	r2, [pc, #196]	; (8000ff8 <SystemClock_Config+0xf8>)
 8000f32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <SystemClock_Config+0xf8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f44:	bf00      	nop
 8000f46:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <SystemClock_Config+0xf8>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f52:	d1f8      	bne.n	8000f46 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f54:	2301      	movs	r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f72:	23a0      	movs	r3, #160	; 0xa0
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f82:	2304      	movs	r3, #4
 8000f84:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fcc0 	bl	8003918 <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000f9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fa6:	f000 f999 	bl	80012dc <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000faa:	233f      	movs	r3, #63	; 0x3f
 8000fac:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fba:	2340      	movs	r3, #64	; 0x40
 8000fbc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fbe:	2340      	movs	r3, #64	; 0x40
 8000fc0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fc8:	2340      	movs	r3, #64	; 0x40
 8000fca:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000fcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f8b0 	bl	8004138 <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000fde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000fe6:	f000 f979 	bl	80012dc <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 8000fea:	bf00      	nop
 8000fec:	3778      	adds	r7, #120	; 0x78
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	58000400 	.word	0x58000400
 8000ff8:	58024800 	.word	0x58024800

08000ffc <MX_I2C4_Init>:
static void MX_I2C4_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	hi2c4.Instance = I2C4;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_I2C4_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <MX_I2C4_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
	hi2c4.Init.Timing = 0x00707CBB;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_I2C4_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <MX_I2C4_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
	hi2c4.Init.OwnAddress1 = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_I2C4_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_I2C4_Init+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
	hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_I2C4_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
	hi2c4.Init.OwnAddress2 = 0;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_I2C4_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
	hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C4_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_I2C4_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C4_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <MX_I2C4_Init+0x74>)
 8001038:	f001 ffca 	bl	8002fd0 <HAL_I2C_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C4_Init+0x4a>
	{
	Error_Handler();
 8001042:	f000 f94b 	bl	80012dc <Error_Handler>
	}
	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <MX_I2C4_Init+0x74>)
 800104a:	f002 fab9 	bl	80035c0 <HAL_I2CEx_ConfigAnalogFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C4_Init+0x5c>
	{
	Error_Handler();
 8001054:	f000 f942 	bl	80012dc <Error_Handler>
	}
	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_I2C4_Init+0x74>)
 800105c:	f002 fafb 	bl	8003656 <HAL_I2CEx_ConfigDigitalFilter>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C4_Init+0x6e>
	{
	Error_Handler();
 8001066:	f000 f939 	bl	80012dc <Error_Handler>
	}
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	24004060 	.word	0x24004060
 8001074:	58001c00 	.word	0x58001c00
 8001078:	00707cbb 	.word	0x00707cbb

0800107c <MX_QUADSPI_Init>:

static void MX_QUADSPI_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_QUADSPI_Init+0x50>)
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <MX_QUADSPI_Init+0x54>)
 8001084:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 255;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_QUADSPI_Init+0x50>)
 8001088:	22ff      	movs	r2, #255	; 0xff
 800108a:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 1;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_QUADSPI_Init+0x50>)
 800108e:	2201      	movs	r2, #1
 8001090:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_QUADSPI_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_QUADSPI_Init+0x50>)
 800109a:	2201      	movs	r2, #1
 800109c:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_QUADSPI_Init+0x50>)
 80010b8:	f002 fb74 	bl	80037a4 <HAL_QSPI_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_QUADSPI_Init+0x4a>
	{
	Error_Handler();
 80010c2:	f000 f90b 	bl	80012dc <Error_Handler>
	}
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	240040f4 	.word	0x240040f4
 80010d0:	52005000 	.word	0x52005000

080010d4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	4b50      	ldr	r3, [pc, #320]	; (800122c <MX_GPIO_Init+0x158>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	4a4e      	ldr	r2, [pc, #312]	; (800122c <MX_GPIO_Init+0x158>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fa:	4b4c      	ldr	r3, [pc, #304]	; (800122c <MX_GPIO_Init+0x158>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001108:	4b48      	ldr	r3, [pc, #288]	; (800122c <MX_GPIO_Init+0x158>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	4a47      	ldr	r2, [pc, #284]	; (800122c <MX_GPIO_Init+0x158>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <MX_GPIO_Init+0x158>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <MX_GPIO_Init+0x158>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	4a3f      	ldr	r2, [pc, #252]	; (800122c <MX_GPIO_Init+0x158>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <MX_GPIO_Init+0x158>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <MX_GPIO_Init+0x158>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	4a38      	ldr	r2, [pc, #224]	; (800122c <MX_GPIO_Init+0x158>)
 800114c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001154:	4b35      	ldr	r3, [pc, #212]	; (800122c <MX_GPIO_Init+0x158>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <MX_GPIO_Init+0x158>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001168:	4a30      	ldr	r2, [pc, #192]	; (800122c <MX_GPIO_Init+0x158>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <MX_GPIO_Init+0x158>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_GPIO_Init+0x158>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001186:	4a29      	ldr	r2, [pc, #164]	; (800122c <MX_GPIO_Init+0x158>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <MX_GPIO_Init+0x158>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <MX_GPIO_Init+0x158>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a4:	4a21      	ldr	r2, [pc, #132]	; (800122c <MX_GPIO_Init+0x158>)
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_GPIO_Init+0x158>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_GPIO_Init+0x158>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c2:	4a1a      	ldr	r2, [pc, #104]	; (800122c <MX_GPIO_Init+0x158>)
 80011c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_GPIO_Init+0x158>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_GPIO_Init+0x158>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_GPIO_Init+0x158>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_GPIO_Init+0x158>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011fe:	480c      	ldr	r0, [pc, #48]	; (8001230 <MX_GPIO_Init+0x15c>)
 8001200:	f001 fe84 	bl	8002f0c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PI12 PI13 PI14 PI15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001204:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_GPIO_Init+0x15c>)
 800121e:	f001 fcc5 	bl	8002bac <HAL_GPIO_Init>
}
 8001222:	bf00      	nop
 8001224:	3738      	adds	r7, #56	; 0x38
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	58024400 	.word	0x58024400
 8001230:	58022000 	.word	0x58022000

08001234 <StartTask1>:

void StartTask1(void const * argument)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("StartTask1\r\n");
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <StartTask1+0x24>)
 800123e:	f00c f915 	bl	800d46c <puts>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8001242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <StartTask1+0x28>)
 8001248:	f001 fe79 	bl	8002f3e <HAL_GPIO_TogglePin>
		osDelay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001250:	f00a f92e 	bl	800b4b0 <osDelay>
		printf("StartTask1\r\n");
 8001254:	e7f2      	b.n	800123c <StartTask1+0x8>
 8001256:	bf00      	nop
 8001258:	0800e064 	.word	0x0800e064
 800125c:	58022000 	.word	0x58022000

08001260 <StartTask2>:
	}
}

void StartTask2(void const * argument)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 8001268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <StartTask2+0x24>)
 800126e:	f001 fe66 	bl	8002f3e <HAL_GPIO_TogglePin>
	  printf("StartTask2\r\n");
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <StartTask2+0x28>)
 8001274:	f00c f8fa 	bl	800d46c <puts>
	  osDelay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f00a f918 	bl	800b4b0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 8001280:	e7f2      	b.n	8001268 <StartTask2+0x8>
 8001282:	bf00      	nop
 8001284:	58022000 	.word	0x58022000
 8001288:	0800e070 	.word	0x0800e070

0800128c <StartTask3>:
	}
}

void StartTask3(void const * argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("StartTask3\r\n");
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <StartTask3+0x24>)
 8001296:	f00c f8e9 	bl	800d46c <puts>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 800129a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <StartTask3+0x28>)
 80012a0:	f001 fe4d 	bl	8002f3e <HAL_GPIO_TogglePin>
		osDelay(1000);
 80012a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a8:	f00a f902 	bl	800b4b0 <osDelay>
		printf("StartTask3\r\n");
 80012ac:	e7f2      	b.n	8001294 <StartTask3+0x8>
 80012ae:	bf00      	nop
 80012b0:	0800e07c 	.word	0x0800e07c
 80012b4:	58022000 	.word	0x58022000

080012b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x16>
	  HAL_IncTick();
 80012ca:	f000 fddd 	bl	8001e88 <HAL_IncTick>
	}
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40010000 	.word	0x40010000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <Error_Handler_rtc>:
#include "rtc.h"

RTC_HandleTypeDef hrtc;

void Error_Handler_rtc(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
	//Do nothing
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <MX_RTC_Init>:

void MX_RTC_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]

	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <MX_RTC_Init+0xb0>)
 8001312:	4a26      	ldr	r2, [pc, #152]	; (80013ac <MX_RTC_Init+0xb4>)
 8001314:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <MX_RTC_Init+0xb0>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <MX_RTC_Init+0xb0>)
 800131e:	227f      	movs	r2, #127	; 0x7f
 8001320:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <MX_RTC_Init+0xb0>)
 8001324:	22ff      	movs	r2, #255	; 0xff
 8001326:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <MX_RTC_Init+0xb0>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_RTC_Init+0xb0>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_RTC_Init+0xb0>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_RTC_Init+0xb0>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001340:	4819      	ldr	r0, [pc, #100]	; (80013a8 <MX_RTC_Init+0xb0>)
 8001342:	f005 fc7d 	bl	8006c40 <HAL_RTC_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_RTC_Init+0x58>
	{
		Error_Handler_rtc();
 800134c:	f7ff ffcd 	bl	80012ea <Error_Handler_rtc>
	}

	/** Initialize RTC and set the Time and Date
	*/
	sTime.Hours = 0x0;
 8001350:	2300      	movs	r3, #0
 8001352:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001354:	2300      	movs	r3, #0
 8001356:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001358:	2300      	movs	r3, #0
 800135a:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2201      	movs	r2, #1
 8001368:	4619      	mov	r1, r3
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <MX_RTC_Init+0xb0>)
 800136c:	f005 fce0 	bl	8006d30 <HAL_RTC_SetTime>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_RTC_Init+0x82>
	{
		Error_Handler_rtc();
 8001376:	f7ff ffb8 	bl	80012ea <Error_Handler_rtc>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800137a:	2301      	movs	r3, #1
 800137c:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 800137e:	2301      	movs	r3, #1
 8001380:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x24;
 8001382:	2324      	movs	r3, #36	; 0x24
 8001384:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x16;
 8001386:	2316      	movs	r3, #22
 8001388:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2201      	movs	r2, #1
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_RTC_Init+0xb0>)
 8001392:	f005 fd6b 	bl	8006e6c <HAL_RTC_SetDate>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_RTC_Init+0xa8>
	{
		Error_Handler_rtc();
 800139c:	f7ff ffa5 	bl	80012ea <Error_Handler_rtc>
	}
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	24004140 	.word	0x24004140
 80013ac:	58004000 	.word	0x58004000

080013b0 <MX_SDMMC1_SD_Init>:
FIL			myfile;		/* FILE Instance */

uint8_t write_data[] = "Hello! This is my friend.";

void MX_SDMMC1_SD_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	hsd1.Instance = SDMMC1;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_SDMMC1_SD_Init+0x44>)
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <MX_SDMMC1_SD_Init+0x48>)
 80013b8:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_SDMMC1_SD_Init+0x44>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_SDMMC1_SD_Init+0x44>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_SDMMC1_SD_Init+0x44>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_SDMMC1_SD_Init+0x44>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_SDMMC1_SD_Init+0x44>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
	hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_SDMMC1_SD_Init+0x44>)
 80013da:	2201      	movs	r2, #1
 80013dc:	619a      	str	r2, [r3, #24]
	if (HAL_SD_Init(&hsd1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_SDMMC1_SD_Init+0x44>)
 80013e0:	f005 fe80 	bl	80070e4 <HAL_SD_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_SDMMC1_SD_Init+0x3e>
	{
	Error_Handler();
 80013ea:	f7ff ff77 	bl	80012dc <Error_Handler>
	}
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	24004164 	.word	0x24004164
 80013f8:	52007000 	.word	0x52007000

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_MspInit+0x38>)
 8001404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_MspInit+0x38>)
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_MspInit+0x38>)
 8001414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	210f      	movs	r1, #15
 8001424:	f06f 0001 	mvn.w	r0, #1
 8001428:	f000 fe36 	bl	8002098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58024400 	.word	0x58024400

08001438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0ba      	sub	sp, #232	; 0xe8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	22c0      	movs	r2, #192	; 0xc0
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00b ff91 	bl	800d380 <memset>
  if(hi2c->Instance==I2C4)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a25      	ldr	r2, [pc, #148]	; (80014f8 <HAL_I2C_MspInit+0xc0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d142      	bne.n	80014ee <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001468:	2310      	movs	r3, #16
 800146a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fa2c 	bl	80048d4 <HAL_RCCEx_PeriphCLKConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001482:	f7ff ff2b 	bl	80012dc <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_I2C_MspInit+0xc4>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <HAL_I2C_MspInit+0xc4>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_I2C_MspInit+0xc4>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80014be:	2304      	movs	r3, #4
 80014c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c8:	4619      	mov	r1, r3
 80014ca:	480d      	ldr	r0, [pc, #52]	; (8001500 <HAL_I2C_MspInit+0xc8>)
 80014cc:	f001 fb6e 	bl	8002bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_I2C_MspInit+0xc4>)
 80014d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_I2C_MspInit+0xc4>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_I2C_MspInit+0xc4>)
 80014e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	37e8      	adds	r7, #232	; 0xe8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	58001c00 	.word	0x58001c00
 80014fc:	58024400 	.word	0x58024400
 8001500:	58020c00 	.word	0x58020c00

08001504 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0bc      	sub	sp, #240	; 0xf0
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	22c0      	movs	r2, #192	; 0xc0
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f00b ff2b 	bl	800d380 <memset>
  if(hqspi->Instance==QUADSPI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <HAL_QSPI_MspInit+0x1c4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	f040 80c5 	bne.w	80016c0 <HAL_QSPI_MspInit+0x1bc>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800153a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800153c:	2300      	movs	r3, #0
 800153e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4618      	mov	r0, r3
 8001546:	f003 f9c5 	bl	80048d4 <HAL_RCCEx_PeriphCLKConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8001550:	f7ff fec4 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001554:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 8001556:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800155a:	4a5c      	ldr	r2, [pc, #368]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001564:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 8001566:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001572:	4b56      	ldr	r3, [pc, #344]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	4a54      	ldr	r2, [pc, #336]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 800157a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001582:	4b52      	ldr	r3, [pc, #328]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001590:	4b4e      	ldr	r3, [pc, #312]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 8001598:	f043 0320 	orr.w	r3, r3, #32
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a0:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	4a45      	ldr	r2, [pc, #276]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015be:	4b43      	ldr	r3, [pc, #268]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015cc:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015dc:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_QSPI_MspInit+0x1c8>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ea:	2340      	movs	r3, #64	; 0x40
 80015ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001602:	230a      	movs	r3, #10
 8001604:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001608:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800160c:	4619      	mov	r1, r3
 800160e:	4830      	ldr	r0, [pc, #192]	; (80016d0 <HAL_QSPI_MspInit+0x1cc>)
 8001610:	f001 facc 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001614:	23c0      	movs	r3, #192	; 0xc0
 8001616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800162c:	2309      	movs	r3, #9
 800162e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001632:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001636:	4619      	mov	r1, r3
 8001638:	4826      	ldr	r0, [pc, #152]	; (80016d4 <HAL_QSPI_MspInit+0x1d0>)
 800163a:	f001 fab7 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800163e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001658:	230a      	movs	r3, #10
 800165a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800165e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001662:	4619      	mov	r1, r3
 8001664:	481b      	ldr	r0, [pc, #108]	; (80016d4 <HAL_QSPI_MspInit+0x1d0>)
 8001666:	f001 faa1 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800166a:	2304      	movs	r3, #4
 800166c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001682:	2309      	movs	r3, #9
 8001684:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800168c:	4619      	mov	r1, r3
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <HAL_QSPI_MspInit+0x1d4>)
 8001690:	f001 fa8c 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001694:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001698:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ae:	2309      	movs	r3, #9
 80016b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b8:	4619      	mov	r1, r3
 80016ba:	4808      	ldr	r0, [pc, #32]	; (80016dc <HAL_QSPI_MspInit+0x1d8>)
 80016bc:	f001 fa76 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	37f0      	adds	r7, #240	; 0xf0
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	52005000 	.word	0x52005000
 80016cc:	58024400 	.word	0x58024400
 80016d0:	58021800 	.word	0x58021800
 80016d4:	58021400 	.word	0x58021400
 80016d8:	58020400 	.word	0x58020400
 80016dc:	58020c00 	.word	0x58020c00

080016e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0b2      	sub	sp, #200	; 0xc8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	22c0      	movs	r2, #192	; 0xc0
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00b fe45 	bl	800d380 <memset>
  if(hrtc->Instance==RTC)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_RTC_MspInit+0x58>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d116      	bne.n	800172e <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001704:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f8de 	bl	80048d4 <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800171e:	f7ff fddd 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_RTC_MspInit+0x5c>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <HAL_RTC_MspInit+0x5c>)
 8001728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	37c8      	adds	r7, #200	; 0xc8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	58004000 	.word	0x58004000
 800173c:	58024400 	.word	0x58024400

08001740 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0ba      	sub	sp, #232	; 0xe8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	22c0      	movs	r2, #192	; 0xc0
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f00b fe0d 	bl	800d380 <memset>
  if(hsd->Instance==SDMMC1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a37      	ldr	r2, [pc, #220]	; (8001848 <HAL_SD_MspInit+0x108>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d166      	bne.n	800183e <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001774:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001776:	2300      	movs	r3, #0
 8001778:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4618      	mov	r0, r3
 8001780:	f003 f8a8 	bl	80048d4 <HAL_RCCEx_PeriphCLKConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800178a:	f7ff fda7 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_SD_MspInit+0x10c>)
 8001790:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001794:	4a2d      	ldr	r2, [pc, #180]	; (800184c <HAL_SD_MspInit+0x10c>)
 8001796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_SD_MspInit+0x10c>)
 80017a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_SD_MspInit+0x10c>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	4a26      	ldr	r2, [pc, #152]	; (800184c <HAL_SD_MspInit+0x10c>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_SD_MspInit+0x10c>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_SD_MspInit+0x10c>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	4a1e      	ldr	r2, [pc, #120]	; (800184c <HAL_SD_MspInit+0x10c>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_SD_MspInit+0x10c>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80017e8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80017ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001802:	230c      	movs	r3, #12
 8001804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800180c:	4619      	mov	r1, r3
 800180e:	4810      	ldr	r0, [pc, #64]	; (8001850 <HAL_SD_MspInit+0x110>)
 8001810:	f001 f9cc 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001814:	2304      	movs	r3, #4
 8001816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800182c:	230c      	movs	r3, #12
 800182e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001832:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001836:	4619      	mov	r1, r3
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <HAL_SD_MspInit+0x114>)
 800183a:	f001 f9b7 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	37e8      	adds	r7, #232	; 0xe8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	52007000 	.word	0x52007000
 800184c:	58024400 	.word	0x58024400
 8001850:	58020800 	.word	0x58020800
 8001854:	58020c00 	.word	0x58020c00

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0bc      	sub	sp, #240	; 0xf0
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	22c0      	movs	r2, #192	; 0xc0
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f00b fd81 	bl	800d380 <memset>
  if(huart->Instance==UART8)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a51      	ldr	r2, [pc, #324]	; (80019c8 <HAL_UART_MspInit+0x170>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d14b      	bne.n	8001920 <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001888:	2302      	movs	r3, #2
 800188a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f81c 	bl	80048d4 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018a2:	f7ff fd1b 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_UART_MspInit+0x174>)
 80018a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ac:	4a47      	ldr	r2, [pc, #284]	; (80019cc <HAL_UART_MspInit+0x174>)
 80018ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018b6:	4b45      	ldr	r3, [pc, #276]	; (80019cc <HAL_UART_MspInit+0x174>)
 80018b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018c4:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_UART_MspInit+0x174>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ca:	4a40      	ldr	r2, [pc, #256]	; (80019cc <HAL_UART_MspInit+0x174>)
 80018cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d4:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_UART_MspInit+0x174>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80018e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80018fc:	2308      	movs	r3, #8
 80018fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001902:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001906:	4619      	mov	r1, r3
 8001908:	4831      	ldr	r0, [pc, #196]	; (80019d0 <HAL_UART_MspInit+0x178>)
 800190a:	f001 f94f 	bl	8002bac <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2105      	movs	r1, #5
 8001912:	2053      	movs	r0, #83	; 0x53
 8001914:	f000 fbc0 	bl	8002098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001918:	2053      	movs	r0, #83	; 0x53
 800191a:	f000 fbd7 	bl	80020cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800191e:	e04f      	b.n	80019c0 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2b      	ldr	r2, [pc, #172]	; (80019d4 <HAL_UART_MspInit+0x17c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d14a      	bne.n	80019c0 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800192a:	2301      	movs	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4618      	mov	r0, r3
 800193a:	f002 ffcb 	bl	80048d4 <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001944:	f7ff fcca 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_UART_MspInit+0x174>)
 800194a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_UART_MspInit+0x174>)
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <HAL_UART_MspInit+0x174>)
 800195a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_UART_MspInit+0x174>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_UART_MspInit+0x174>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_UART_MspInit+0x174>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001984:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001988:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800199e:	2307      	movs	r3, #7
 80019a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019a8:	4619      	mov	r1, r3
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <HAL_UART_MspInit+0x180>)
 80019ac:	f001 f8fe 	bl	8002bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2105      	movs	r1, #5
 80019b4:	2025      	movs	r0, #37	; 0x25
 80019b6:	f000 fb6f 	bl	8002098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ba:	2025      	movs	r0, #37	; 0x25
 80019bc:	f000 fb86 	bl	80020cc <HAL_NVIC_EnableIRQ>
}
 80019c0:	bf00      	nop
 80019c2:	37f0      	adds	r7, #240	; 0xf0
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40007c00 	.word	0x40007c00
 80019cc:	58024400 	.word	0x58024400
 80019d0:	58022400 	.word	0x58022400
 80019d4:	40011000 	.word	0x40011000
 80019d8:	58020000 	.word	0x58020000

080019dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08e      	sub	sp, #56	; 0x38
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	d844      	bhi.n	8001a74 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80019ea:	2200      	movs	r2, #0
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	2019      	movs	r0, #25
 80019f0:	f000 fb52 	bl	8002098 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80019f4:	2019      	movs	r0, #25
 80019f6:	f000 fb69 	bl	80020cc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80019fa:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <HAL_InitTick+0xb0>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a00:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_InitTick+0xb4>)
 8001a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_InitTick+0xb4>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a10:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_InitTick+0xb4>)
 8001a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a1e:	f107 020c 	add.w	r2, r7, #12
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 ff11 	bl	8004850 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a2e:	f002 fef9 	bl	8004824 <HAL_RCC_GetPCLK2Freq>
 8001a32:	4603      	mov	r3, r0
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <HAL_InitTick+0xb8>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	3b01      	subs	r3, #1
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_InitTick+0xbc>)
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_InitTick+0xc0>)
 8001a4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0xbc>)
 8001a4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a52:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a54:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <HAL_InitTick+0xbc>)
 8001a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a58:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_InitTick+0xbc>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_InitTick+0xbc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a66:	480c      	ldr	r0, [pc, #48]	; (8001a98 <HAL_InitTick+0xbc>)
 8001a68:	f006 fda0 	bl	80085ac <HAL_TIM_Base_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d107      	bne.n	8001a82 <HAL_InitTick+0xa6>
 8001a72:	e001      	b.n	8001a78 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e005      	b.n	8001a84 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a78:	4807      	ldr	r0, [pc, #28]	; (8001a98 <HAL_InitTick+0xbc>)
 8001a7a:	f006 fdf9 	bl	8008670 <HAL_TIM_Base_Start_IT>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3738      	adds	r7, #56	; 0x38
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	24000008 	.word	0x24000008
 8001a90:	58024400 	.word	0x58024400
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	24006250 	.word	0x24006250
 8001a9c:	40010000 	.word	0x40010000

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <TIM1_UP_IRQHandler+0x10>)
 8001ad2:	f006 fe3d 	bl	8008750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	24006250 	.word	0x24006250

08001ae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <USART1_IRQHandler+0x10>)
 8001ae6:	f007 f919 	bl	8008d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2400629c 	.word	0x2400629c

08001af4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <UART8_IRQHandler+0x10>)
 8001afa:	f007 f90f 	bl	8008d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2400632c 	.word	0x2400632c

08001b08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
	}

return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f877 	bl	8001c50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
	}
	return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
	return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_isatty>:

int _isatty(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f00b fb7c 	bl	800d310 <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	24040000 	.word	0x24040000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	240002ec 	.word	0x240002ec
 8001c4c:	24008440 	.word	0x24008440

08001c50 <__io_putchar>:
#include "uart.h"

UART_HandleTypeDef huart8;
UART_HandleTypeDef huart1;

int __io_putchar (int ch) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, 100);
 8001c5e:	f107 010f 	add.w	r1, r7, #15
 8001c62:	2364      	movs	r3, #100	; 0x64
 8001c64:	2201      	movs	r2, #1
 8001c66:	4804      	ldr	r0, [pc, #16]	; (8001c78 <__io_putchar+0x28>)
 8001c68:	f006 ffc2 	bl	8008bf0 <HAL_UART_Transmit>
	return ch;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2400632c 	.word	0x2400632c

08001c7c <Error_Handler_Uart>:

void Error_Handler_Uart(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
	//Do nothing
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <MX_UART8_Init>:

void MX_UART8_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	huart8.Instance = UART8;
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <MX_UART8_Init+0x90>)
 8001c92:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <MX_UART8_Init+0x94>)
 8001c94:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8001c96:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <MX_UART8_Init+0x90>)
 8001c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c9c:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <MX_UART8_Init+0x90>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <MX_UART8_Init+0x90>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <MX_UART8_Init+0x90>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_UART8_Init+0x90>)
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <MX_UART8_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <MX_UART8_Init+0x90>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <MX_UART8_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MX_UART8_Init+0x90>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <MX_UART8_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8001cd4:	4811      	ldr	r0, [pc, #68]	; (8001d1c <MX_UART8_Init+0x90>)
 8001cd6:	f006 ff3b 	bl	8008b50 <HAL_UART_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_UART8_Init+0x58>
	{
		Error_Handler_Uart();
 8001ce0:	f7ff ffcc 	bl	8001c7c <Error_Handler_Uart>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	480d      	ldr	r0, [pc, #52]	; (8001d1c <MX_UART8_Init+0x90>)
 8001ce8:	f008 fa79 	bl	800a1de <HAL_UARTEx_SetTxFifoThreshold>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_UART8_Init+0x6a>
	{
		Error_Handler_Uart();
 8001cf2:	f7ff ffc3 	bl	8001c7c <Error_Handler_Uart>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4808      	ldr	r0, [pc, #32]	; (8001d1c <MX_UART8_Init+0x90>)
 8001cfa:	f008 faae 	bl	800a25a <HAL_UARTEx_SetRxFifoThreshold>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_UART8_Init+0x7c>
	{
		Error_Handler_Uart();
 8001d04:	f7ff ffba 	bl	8001c7c <Error_Handler_Uart>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <MX_UART8_Init+0x90>)
 8001d0a:	f008 fa2f 	bl	800a16c <HAL_UARTEx_DisableFifoMode>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_UART8_Init+0x8c>
	{
		Error_Handler_Uart();
 8001d14:	f7ff ffb2 	bl	8001c7c <Error_Handler_Uart>
	}
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2400632c 	.word	0x2400632c
 8001d20:	40007c00 	.word	0x40007c00

08001d24 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d2a:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <MX_USART1_UART_Init+0x94>)
 8001d2c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d6c:	4811      	ldr	r0, [pc, #68]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d6e:	f006 feef 	bl	8008b50 <HAL_UART_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler_Uart();
 8001d78:	f7ff ff80 	bl	8001c7c <Error_Handler_Uart>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d80:	f008 fa2d 	bl	800a1de <HAL_UARTEx_SetTxFifoThreshold>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler_Uart();
 8001d8a:	f7ff ff77 	bl	8001c7c <Error_Handler_Uart>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001d92:	f008 fa62 	bl	800a25a <HAL_UARTEx_SetRxFifoThreshold>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler_Uart();
 8001d9c:	f7ff ff6e 	bl	8001c7c <Error_Handler_Uart>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_USART1_UART_Init+0x90>)
 8001da2:	f008 f9e3 	bl	800a16c <HAL_UARTEx_DisableFifoMode>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler_Uart();
 8001dac:	f7ff ff66 	bl	8001c7c <Error_Handler_Uart>
	}
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2400629c 	.word	0x2400629c
 8001db8:	40011000 	.word	0x40011000

08001dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dc0:	f7fe fc0a 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc4:	480c      	ldr	r0, [pc, #48]	; (8001df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dc6:	490d      	ldr	r1, [pc, #52]	; (8001dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ddc:	4c0a      	ldr	r4, [pc, #40]	; (8001e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dea:	f00b fa97 	bl	800d31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dee:	f7fe ffaf 	bl	8000d50 <main>
  bx  lr
 8001df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001df8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dfc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001e00:	0800e160 	.word	0x0800e160
  ldr r2, =_sbss
 8001e04:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001e08:	24008440 	.word	0x24008440

08001e0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC3_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f000 f933 	bl	8002082 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e1c:	f002 fb42 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_Init+0x68>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	4913      	ldr	r1, [pc, #76]	; (8001e7c <HAL_Init+0x6c>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_Init+0x68>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_Init+0x6c>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_Init+0x70>)
 8001e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_Init+0x74>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff fdbe 	bl	80019dc <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e002      	b.n	8001e70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6a:	f7ff fac7 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	0800e0a0 	.word	0x0800e0a0
 8001e80:	24000004 	.word	0x24000004
 8001e84:	24000000 	.word	0x24000000

08001e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x20>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_IncTick+0x24>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_IncTick+0x24>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2400000c 	.word	0x2400000c
 8001eac:	240063bc 	.word	0x240063bc

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_GetTick+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	240063bc 	.word	0x240063bc

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff ffee 	bl	8001eb0 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2400000c 	.word	0x2400000c

08001f10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_GetREVID+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0c1b      	lsrs	r3, r3, #16
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	5c001000 	.word	0x5c001000

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <__NVIC_SetPriorityGrouping+0x40>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x40>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00
 8001f6c:	05fa0000 	.word	0x05fa0000

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0b      	blt.n	8001fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <__NVIC_EnableIRQ+0x38>)
 8001fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2001      	movs	r0, #1
 8001fae:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff4c 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020a6:	f7ff ff63 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 80020aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	6978      	ldr	r0, [r7, #20]
 80020b2:	f7ff ffb3 	bl	800201c <NVIC_EncodePriority>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff82 	bl	8001fc8 <__NVIC_SetPriority>
}
 80020c4:	bf00      	nop
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff56 	bl	8001f8c <__NVIC_EnableIRQ>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff fede 	bl	8001eb0 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e2dc      	b.n	80026ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d008      	beq.n	800211e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e2cd      	b.n	80026ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a76      	ldr	r2, [pc, #472]	; (80022fc <HAL_DMA_Abort+0x214>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d04a      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a74      	ldr	r2, [pc, #464]	; (8002300 <HAL_DMA_Abort+0x218>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d045      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a73      	ldr	r2, [pc, #460]	; (8002304 <HAL_DMA_Abort+0x21c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d040      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a71      	ldr	r2, [pc, #452]	; (8002308 <HAL_DMA_Abort+0x220>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d03b      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a70      	ldr	r2, [pc, #448]	; (800230c <HAL_DMA_Abort+0x224>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d036      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_DMA_Abort+0x228>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d031      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a6d      	ldr	r2, [pc, #436]	; (8002314 <HAL_DMA_Abort+0x22c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d02c      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a6b      	ldr	r2, [pc, #428]	; (8002318 <HAL_DMA_Abort+0x230>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d027      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_DMA_Abort+0x234>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a68      	ldr	r2, [pc, #416]	; (8002320 <HAL_DMA_Abort+0x238>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01d      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a67      	ldr	r2, [pc, #412]	; (8002324 <HAL_DMA_Abort+0x23c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d018      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a65      	ldr	r2, [pc, #404]	; (8002328 <HAL_DMA_Abort+0x240>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a64      	ldr	r2, [pc, #400]	; (800232c <HAL_DMA_Abort+0x244>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00e      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a62      	ldr	r2, [pc, #392]	; (8002330 <HAL_DMA_Abort+0x248>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d009      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a61      	ldr	r2, [pc, #388]	; (8002334 <HAL_DMA_Abort+0x24c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d004      	beq.n	80021be <HAL_DMA_Abort+0xd6>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a5f      	ldr	r2, [pc, #380]	; (8002338 <HAL_DMA_Abort+0x250>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_DMA_Abort+0xda>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_DMA_Abort+0xdc>
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 021e 	bic.w	r2, r2, #30
 80021d6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e00a      	b.n	8002206 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 020e 	bic.w	r2, r2, #14
 80021fe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a3c      	ldr	r2, [pc, #240]	; (80022fc <HAL_DMA_Abort+0x214>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d072      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a3a      	ldr	r2, [pc, #232]	; (8002300 <HAL_DMA_Abort+0x218>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d06d      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a39      	ldr	r2, [pc, #228]	; (8002304 <HAL_DMA_Abort+0x21c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d068      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a37      	ldr	r2, [pc, #220]	; (8002308 <HAL_DMA_Abort+0x220>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d063      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a36      	ldr	r2, [pc, #216]	; (800230c <HAL_DMA_Abort+0x224>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d05e      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a34      	ldr	r2, [pc, #208]	; (8002310 <HAL_DMA_Abort+0x228>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d059      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a33      	ldr	r2, [pc, #204]	; (8002314 <HAL_DMA_Abort+0x22c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d054      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a31      	ldr	r2, [pc, #196]	; (8002318 <HAL_DMA_Abort+0x230>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d04f      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a30      	ldr	r2, [pc, #192]	; (800231c <HAL_DMA_Abort+0x234>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d04a      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2e      	ldr	r2, [pc, #184]	; (8002320 <HAL_DMA_Abort+0x238>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d045      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <HAL_DMA_Abort+0x23c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d040      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2b      	ldr	r2, [pc, #172]	; (8002328 <HAL_DMA_Abort+0x240>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d03b      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2a      	ldr	r2, [pc, #168]	; (800232c <HAL_DMA_Abort+0x244>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d036      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a28      	ldr	r2, [pc, #160]	; (8002330 <HAL_DMA_Abort+0x248>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d031      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a27      	ldr	r2, [pc, #156]	; (8002334 <HAL_DMA_Abort+0x24c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d02c      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a25      	ldr	r2, [pc, #148]	; (8002338 <HAL_DMA_Abort+0x250>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d027      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a24      	ldr	r2, [pc, #144]	; (800233c <HAL_DMA_Abort+0x254>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d022      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_DMA_Abort+0x258>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01d      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a21      	ldr	r2, [pc, #132]	; (8002344 <HAL_DMA_Abort+0x25c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d018      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <HAL_DMA_Abort+0x260>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_DMA_Abort+0x264>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00e      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_DMA_Abort+0x268>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d009      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_DMA_Abort+0x26c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d004      	beq.n	80022f6 <HAL_DMA_Abort+0x20e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_DMA_Abort+0x270>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d132      	bne.n	800235c <HAL_DMA_Abort+0x274>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e031      	b.n	800235e <HAL_DMA_Abort+0x276>
 80022fa:	bf00      	nop
 80022fc:	40020010 	.word	0x40020010
 8002300:	40020028 	.word	0x40020028
 8002304:	40020040 	.word	0x40020040
 8002308:	40020058 	.word	0x40020058
 800230c:	40020070 	.word	0x40020070
 8002310:	40020088 	.word	0x40020088
 8002314:	400200a0 	.word	0x400200a0
 8002318:	400200b8 	.word	0x400200b8
 800231c:	40020410 	.word	0x40020410
 8002320:	40020428 	.word	0x40020428
 8002324:	40020440 	.word	0x40020440
 8002328:	40020458 	.word	0x40020458
 800232c:	40020470 	.word	0x40020470
 8002330:	40020488 	.word	0x40020488
 8002334:	400204a0 	.word	0x400204a0
 8002338:	400204b8 	.word	0x400204b8
 800233c:	58025408 	.word	0x58025408
 8002340:	5802541c 	.word	0x5802541c
 8002344:	58025430 	.word	0x58025430
 8002348:	58025444 	.word	0x58025444
 800234c:	58025458 	.word	0x58025458
 8002350:	5802546c 	.word	0x5802546c
 8002354:	58025480 	.word	0x58025480
 8002358:	58025494 	.word	0x58025494
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002370:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6d      	ldr	r2, [pc, #436]	; (800252c <HAL_DMA_Abort+0x444>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d04a      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a6b      	ldr	r2, [pc, #428]	; (8002530 <HAL_DMA_Abort+0x448>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d045      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6a      	ldr	r2, [pc, #424]	; (8002534 <HAL_DMA_Abort+0x44c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d040      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a68      	ldr	r2, [pc, #416]	; (8002538 <HAL_DMA_Abort+0x450>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d03b      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a67      	ldr	r2, [pc, #412]	; (800253c <HAL_DMA_Abort+0x454>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d036      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a65      	ldr	r2, [pc, #404]	; (8002540 <HAL_DMA_Abort+0x458>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d031      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a64      	ldr	r2, [pc, #400]	; (8002544 <HAL_DMA_Abort+0x45c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d02c      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a62      	ldr	r2, [pc, #392]	; (8002548 <HAL_DMA_Abort+0x460>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d027      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a61      	ldr	r2, [pc, #388]	; (800254c <HAL_DMA_Abort+0x464>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d022      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5f      	ldr	r2, [pc, #380]	; (8002550 <HAL_DMA_Abort+0x468>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01d      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5e      	ldr	r2, [pc, #376]	; (8002554 <HAL_DMA_Abort+0x46c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d018      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a5c      	ldr	r2, [pc, #368]	; (8002558 <HAL_DMA_Abort+0x470>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5b      	ldr	r2, [pc, #364]	; (800255c <HAL_DMA_Abort+0x474>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00e      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a59      	ldr	r2, [pc, #356]	; (8002560 <HAL_DMA_Abort+0x478>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_DMA_Abort+0x47c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d004      	beq.n	8002412 <HAL_DMA_Abort+0x32a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a56      	ldr	r2, [pc, #344]	; (8002568 <HAL_DMA_Abort+0x480>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <HAL_DMA_Abort+0x33c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e007      	b.n	8002434 <HAL_DMA_Abort+0x34c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002434:	e013      	b.n	800245e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002436:	f7ff fd3b 	bl	8001eb0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b05      	cmp	r3, #5
 8002442:	d90c      	bls.n	800245e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2203      	movs	r2, #3
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e12d      	b.n	80026ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e5      	bne.n	8002436 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2f      	ldr	r2, [pc, #188]	; (800252c <HAL_DMA_Abort+0x444>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d04a      	beq.n	800250a <HAL_DMA_Abort+0x422>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <HAL_DMA_Abort+0x448>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d045      	beq.n	800250a <HAL_DMA_Abort+0x422>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <HAL_DMA_Abort+0x44c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d040      	beq.n	800250a <HAL_DMA_Abort+0x422>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <HAL_DMA_Abort+0x450>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d03b      	beq.n	800250a <HAL_DMA_Abort+0x422>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a29      	ldr	r2, [pc, #164]	; (800253c <HAL_DMA_Abort+0x454>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d036      	beq.n	800250a <HAL_DMA_Abort+0x422>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a27      	ldr	r2, [pc, #156]	; (8002540 <HAL_DMA_Abort+0x458>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d031      	beq.n	800250a <HAL_DMA_Abort+0x422>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a26      	ldr	r2, [pc, #152]	; (8002544 <HAL_DMA_Abort+0x45c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d02c      	beq.n	800250a <HAL_DMA_Abort+0x422>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a24      	ldr	r2, [pc, #144]	; (8002548 <HAL_DMA_Abort+0x460>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d027      	beq.n	800250a <HAL_DMA_Abort+0x422>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a23      	ldr	r2, [pc, #140]	; (800254c <HAL_DMA_Abort+0x464>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <HAL_DMA_Abort+0x422>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a21      	ldr	r2, [pc, #132]	; (8002550 <HAL_DMA_Abort+0x468>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01d      	beq.n	800250a <HAL_DMA_Abort+0x422>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a20      	ldr	r2, [pc, #128]	; (8002554 <HAL_DMA_Abort+0x46c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d018      	beq.n	800250a <HAL_DMA_Abort+0x422>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_DMA_Abort+0x470>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_DMA_Abort+0x422>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1d      	ldr	r2, [pc, #116]	; (800255c <HAL_DMA_Abort+0x474>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00e      	beq.n	800250a <HAL_DMA_Abort+0x422>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <HAL_DMA_Abort+0x478>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_DMA_Abort+0x422>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_DMA_Abort+0x47c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d004      	beq.n	800250a <HAL_DMA_Abort+0x422>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a18      	ldr	r2, [pc, #96]	; (8002568 <HAL_DMA_Abort+0x480>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_DMA_Abort+0x426>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_DMA_Abort+0x428>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02b      	beq.n	800256c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	223f      	movs	r2, #63	; 0x3f
 8002524:	409a      	lsls	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	e02a      	b.n	8002582 <HAL_DMA_Abort+0x49a>
 800252c:	40020010 	.word	0x40020010
 8002530:	40020028 	.word	0x40020028
 8002534:	40020040 	.word	0x40020040
 8002538:	40020058 	.word	0x40020058
 800253c:	40020070 	.word	0x40020070
 8002540:	40020088 	.word	0x40020088
 8002544:	400200a0 	.word	0x400200a0
 8002548:	400200b8 	.word	0x400200b8
 800254c:	40020410 	.word	0x40020410
 8002550:	40020428 	.word	0x40020428
 8002554:	40020440 	.word	0x40020440
 8002558:	40020458 	.word	0x40020458
 800255c:	40020470 	.word	0x40020470
 8002560:	40020488 	.word	0x40020488
 8002564:	400204a0 	.word	0x400204a0
 8002568:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2201      	movs	r2, #1
 800257c:	409a      	lsls	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <HAL_DMA_Abort+0x5dc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d072      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a4d      	ldr	r2, [pc, #308]	; (80026c8 <HAL_DMA_Abort+0x5e0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d06d      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a4c      	ldr	r2, [pc, #304]	; (80026cc <HAL_DMA_Abort+0x5e4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d068      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a4a      	ldr	r2, [pc, #296]	; (80026d0 <HAL_DMA_Abort+0x5e8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d063      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a49      	ldr	r2, [pc, #292]	; (80026d4 <HAL_DMA_Abort+0x5ec>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d05e      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a47      	ldr	r2, [pc, #284]	; (80026d8 <HAL_DMA_Abort+0x5f0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d059      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a46      	ldr	r2, [pc, #280]	; (80026dc <HAL_DMA_Abort+0x5f4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d054      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a44      	ldr	r2, [pc, #272]	; (80026e0 <HAL_DMA_Abort+0x5f8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d04f      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a43      	ldr	r2, [pc, #268]	; (80026e4 <HAL_DMA_Abort+0x5fc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d04a      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a41      	ldr	r2, [pc, #260]	; (80026e8 <HAL_DMA_Abort+0x600>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d045      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a40      	ldr	r2, [pc, #256]	; (80026ec <HAL_DMA_Abort+0x604>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d040      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a3e      	ldr	r2, [pc, #248]	; (80026f0 <HAL_DMA_Abort+0x608>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d03b      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a3d      	ldr	r2, [pc, #244]	; (80026f4 <HAL_DMA_Abort+0x60c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d036      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a3b      	ldr	r2, [pc, #236]	; (80026f8 <HAL_DMA_Abort+0x610>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d031      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a3a      	ldr	r2, [pc, #232]	; (80026fc <HAL_DMA_Abort+0x614>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d02c      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a38      	ldr	r2, [pc, #224]	; (8002700 <HAL_DMA_Abort+0x618>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d027      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a37      	ldr	r2, [pc, #220]	; (8002704 <HAL_DMA_Abort+0x61c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d022      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a35      	ldr	r2, [pc, #212]	; (8002708 <HAL_DMA_Abort+0x620>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01d      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a34      	ldr	r2, [pc, #208]	; (800270c <HAL_DMA_Abort+0x624>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d018      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a32      	ldr	r2, [pc, #200]	; (8002710 <HAL_DMA_Abort+0x628>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a31      	ldr	r2, [pc, #196]	; (8002714 <HAL_DMA_Abort+0x62c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <HAL_DMA_Abort+0x630>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2e      	ldr	r2, [pc, #184]	; (800271c <HAL_DMA_Abort+0x634>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_DMA_Abort+0x58a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2c      	ldr	r2, [pc, #176]	; (8002720 <HAL_DMA_Abort+0x638>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_DMA_Abort+0x58e>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_DMA_Abort+0x590>
 8002676:	2300      	movs	r3, #0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002684:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800269c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40020010 	.word	0x40020010
 80026c8:	40020028 	.word	0x40020028
 80026cc:	40020040 	.word	0x40020040
 80026d0:	40020058 	.word	0x40020058
 80026d4:	40020070 	.word	0x40020070
 80026d8:	40020088 	.word	0x40020088
 80026dc:	400200a0 	.word	0x400200a0
 80026e0:	400200b8 	.word	0x400200b8
 80026e4:	40020410 	.word	0x40020410
 80026e8:	40020428 	.word	0x40020428
 80026ec:	40020440 	.word	0x40020440
 80026f0:	40020458 	.word	0x40020458
 80026f4:	40020470 	.word	0x40020470
 80026f8:	40020488 	.word	0x40020488
 80026fc:	400204a0 	.word	0x400204a0
 8002700:	400204b8 	.word	0x400204b8
 8002704:	58025408 	.word	0x58025408
 8002708:	5802541c 	.word	0x5802541c
 800270c:	58025430 	.word	0x58025430
 8002710:	58025444 	.word	0x58025444
 8002714:	58025458 	.word	0x58025458
 8002718:	5802546c 	.word	0x5802546c
 800271c:	58025480 	.word	0x58025480
 8002720:	58025494 	.word	0x58025494

08002724 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e205      	b.n	8002b42 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d004      	beq.n	800274c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e1fa      	b.n	8002b42 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a8c      	ldr	r2, [pc, #560]	; (8002984 <HAL_DMA_Abort_IT+0x260>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d04a      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a8b      	ldr	r2, [pc, #556]	; (8002988 <HAL_DMA_Abort_IT+0x264>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d045      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a89      	ldr	r2, [pc, #548]	; (800298c <HAL_DMA_Abort_IT+0x268>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d040      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a88      	ldr	r2, [pc, #544]	; (8002990 <HAL_DMA_Abort_IT+0x26c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d03b      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a86      	ldr	r2, [pc, #536]	; (8002994 <HAL_DMA_Abort_IT+0x270>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d036      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a85      	ldr	r2, [pc, #532]	; (8002998 <HAL_DMA_Abort_IT+0x274>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d031      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a83      	ldr	r2, [pc, #524]	; (800299c <HAL_DMA_Abort_IT+0x278>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d02c      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a82      	ldr	r2, [pc, #520]	; (80029a0 <HAL_DMA_Abort_IT+0x27c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d027      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a80      	ldr	r2, [pc, #512]	; (80029a4 <HAL_DMA_Abort_IT+0x280>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d022      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7f      	ldr	r2, [pc, #508]	; (80029a8 <HAL_DMA_Abort_IT+0x284>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d01d      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a7d      	ldr	r2, [pc, #500]	; (80029ac <HAL_DMA_Abort_IT+0x288>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d018      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7c      	ldr	r2, [pc, #496]	; (80029b0 <HAL_DMA_Abort_IT+0x28c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a7a      	ldr	r2, [pc, #488]	; (80029b4 <HAL_DMA_Abort_IT+0x290>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00e      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a79      	ldr	r2, [pc, #484]	; (80029b8 <HAL_DMA_Abort_IT+0x294>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a77      	ldr	r2, [pc, #476]	; (80029bc <HAL_DMA_Abort_IT+0x298>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_DMA_Abort_IT+0xc8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a76      	ldr	r2, [pc, #472]	; (80029c0 <HAL_DMA_Abort_IT+0x29c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_DMA_Abort_IT+0xcc>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_DMA_Abort_IT+0xce>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d065      	beq.n	80028c2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2204      	movs	r2, #4
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a60      	ldr	r2, [pc, #384]	; (8002984 <HAL_DMA_Abort_IT+0x260>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d04a      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_DMA_Abort_IT+0x264>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d045      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a5d      	ldr	r2, [pc, #372]	; (800298c <HAL_DMA_Abort_IT+0x268>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d040      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5b      	ldr	r2, [pc, #364]	; (8002990 <HAL_DMA_Abort_IT+0x26c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d03b      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_DMA_Abort_IT+0x270>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d036      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a58      	ldr	r2, [pc, #352]	; (8002998 <HAL_DMA_Abort_IT+0x274>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d031      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a57      	ldr	r2, [pc, #348]	; (800299c <HAL_DMA_Abort_IT+0x278>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d02c      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a55      	ldr	r2, [pc, #340]	; (80029a0 <HAL_DMA_Abort_IT+0x27c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d027      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a54      	ldr	r2, [pc, #336]	; (80029a4 <HAL_DMA_Abort_IT+0x280>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d022      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_DMA_Abort_IT+0x284>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01d      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_DMA_Abort_IT+0x288>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d018      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a4f      	ldr	r2, [pc, #316]	; (80029b0 <HAL_DMA_Abort_IT+0x28c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a4e      	ldr	r2, [pc, #312]	; (80029b4 <HAL_DMA_Abort_IT+0x290>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00e      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_DMA_Abort_IT+0x294>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d009      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_DMA_Abort_IT+0x298>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_DMA_Abort_IT+0x17a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a49      	ldr	r2, [pc, #292]	; (80029c0 <HAL_DMA_Abort_IT+0x29c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d108      	bne.n	80028b0 <HAL_DMA_Abort_IT+0x18c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e147      	b.n	8002b40 <HAL_DMA_Abort_IT+0x41c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e13e      	b.n	8002b40 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 020e 	bic.w	r2, r2, #14
 80028d0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2b      	ldr	r2, [pc, #172]	; (8002984 <HAL_DMA_Abort_IT+0x260>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04a      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <HAL_DMA_Abort_IT+0x264>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d045      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a28      	ldr	r2, [pc, #160]	; (800298c <HAL_DMA_Abort_IT+0x268>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d040      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a26      	ldr	r2, [pc, #152]	; (8002990 <HAL_DMA_Abort_IT+0x26c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d03b      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a25      	ldr	r2, [pc, #148]	; (8002994 <HAL_DMA_Abort_IT+0x270>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d036      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a23      	ldr	r2, [pc, #140]	; (8002998 <HAL_DMA_Abort_IT+0x274>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_DMA_Abort_IT+0x278>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d02c      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_DMA_Abort_IT+0x27c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d027      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <HAL_DMA_Abort_IT+0x280>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <HAL_DMA_Abort_IT+0x284>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01d      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <HAL_DMA_Abort_IT+0x288>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <HAL_DMA_Abort_IT+0x28c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <HAL_DMA_Abort_IT+0x290>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <HAL_DMA_Abort_IT+0x294>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a16      	ldr	r2, [pc, #88]	; (80029bc <HAL_DMA_Abort_IT+0x298>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_DMA_Abort_IT+0x24e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <HAL_DMA_Abort_IT+0x29c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d128      	bne.n	80029c4 <HAL_DMA_Abort_IT+0x2a0>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e027      	b.n	80029d4 <HAL_DMA_Abort_IT+0x2b0>
 8002984:	40020010 	.word	0x40020010
 8002988:	40020028 	.word	0x40020028
 800298c:	40020040 	.word	0x40020040
 8002990:	40020058 	.word	0x40020058
 8002994:	40020070 	.word	0x40020070
 8002998:	40020088 	.word	0x40020088
 800299c:	400200a0 	.word	0x400200a0
 80029a0:	400200b8 	.word	0x400200b8
 80029a4:	40020410 	.word	0x40020410
 80029a8:	40020428 	.word	0x40020428
 80029ac:	40020440 	.word	0x40020440
 80029b0:	40020458 	.word	0x40020458
 80029b4:	40020470 	.word	0x40020470
 80029b8:	40020488 	.word	0x40020488
 80029bc:	400204a0 	.word	0x400204a0
 80029c0:	400204b8 	.word	0x400204b8
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5c      	ldr	r2, [pc, #368]	; (8002b4c <HAL_DMA_Abort_IT+0x428>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d072      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a5b      	ldr	r2, [pc, #364]	; (8002b50 <HAL_DMA_Abort_IT+0x42c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d06d      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a59      	ldr	r2, [pc, #356]	; (8002b54 <HAL_DMA_Abort_IT+0x430>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d068      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_DMA_Abort_IT+0x434>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d063      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a56      	ldr	r2, [pc, #344]	; (8002b5c <HAL_DMA_Abort_IT+0x438>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d05e      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a55      	ldr	r2, [pc, #340]	; (8002b60 <HAL_DMA_Abort_IT+0x43c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d059      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a53      	ldr	r2, [pc, #332]	; (8002b64 <HAL_DMA_Abort_IT+0x440>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d054      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a52      	ldr	r2, [pc, #328]	; (8002b68 <HAL_DMA_Abort_IT+0x444>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d04f      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a50      	ldr	r2, [pc, #320]	; (8002b6c <HAL_DMA_Abort_IT+0x448>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d04a      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a4f      	ldr	r2, [pc, #316]	; (8002b70 <HAL_DMA_Abort_IT+0x44c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d045      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <HAL_DMA_Abort_IT+0x450>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d040      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4c      	ldr	r2, [pc, #304]	; (8002b78 <HAL_DMA_Abort_IT+0x454>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d03b      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a4a      	ldr	r2, [pc, #296]	; (8002b7c <HAL_DMA_Abort_IT+0x458>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d036      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a49      	ldr	r2, [pc, #292]	; (8002b80 <HAL_DMA_Abort_IT+0x45c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d031      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a47      	ldr	r2, [pc, #284]	; (8002b84 <HAL_DMA_Abort_IT+0x460>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02c      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a46      	ldr	r2, [pc, #280]	; (8002b88 <HAL_DMA_Abort_IT+0x464>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d027      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a44      	ldr	r2, [pc, #272]	; (8002b8c <HAL_DMA_Abort_IT+0x468>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a43      	ldr	r2, [pc, #268]	; (8002b90 <HAL_DMA_Abort_IT+0x46c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01d      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a41      	ldr	r2, [pc, #260]	; (8002b94 <HAL_DMA_Abort_IT+0x470>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a40      	ldr	r2, [pc, #256]	; (8002b98 <HAL_DMA_Abort_IT+0x474>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a3e      	ldr	r2, [pc, #248]	; (8002b9c <HAL_DMA_Abort_IT+0x478>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a3d      	ldr	r2, [pc, #244]	; (8002ba0 <HAL_DMA_Abort_IT+0x47c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_DMA_Abort_IT+0x480>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x3a0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <HAL_DMA_Abort_IT+0x484>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DMA_Abort_IT+0x3a4>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_DMA_Abort_IT+0x3a6>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d028      	beq.n	8002b20 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002adc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2201      	movs	r2, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002afc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00c      	beq.n	8002b20 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40020010 	.word	0x40020010
 8002b50:	40020028 	.word	0x40020028
 8002b54:	40020040 	.word	0x40020040
 8002b58:	40020058 	.word	0x40020058
 8002b5c:	40020070 	.word	0x40020070
 8002b60:	40020088 	.word	0x40020088
 8002b64:	400200a0 	.word	0x400200a0
 8002b68:	400200b8 	.word	0x400200b8
 8002b6c:	40020410 	.word	0x40020410
 8002b70:	40020428 	.word	0x40020428
 8002b74:	40020440 	.word	0x40020440
 8002b78:	40020458 	.word	0x40020458
 8002b7c:	40020470 	.word	0x40020470
 8002b80:	40020488 	.word	0x40020488
 8002b84:	400204a0 	.word	0x400204a0
 8002b88:	400204b8 	.word	0x400204b8
 8002b8c:	58025408 	.word	0x58025408
 8002b90:	5802541c 	.word	0x5802541c
 8002b94:	58025430 	.word	0x58025430
 8002b98:	58025444 	.word	0x58025444
 8002b9c:	58025458 	.word	0x58025458
 8002ba0:	5802546c 	.word	0x5802546c
 8002ba4:	58025480 	.word	0x58025480
 8002ba8:	58025494 	.word	0x58025494

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bba:	4b89      	ldr	r3, [pc, #548]	; (8002de0 <HAL_GPIO_Init+0x234>)
 8002bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bbe:	e194      	b.n	8002eea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8186 	beq.w	8002ee4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d00b      	beq.n	8002bf8 <HAL_GPIO_Init+0x4c>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d007      	beq.n	8002bf8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bec:	2b11      	cmp	r3, #17
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b12      	cmp	r3, #18
 8002bf6:	d130      	bne.n	8002c5a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c2e:	2201      	movs	r2, #1
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0201 	and.w	r2, r3, #1
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0xee>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b12      	cmp	r3, #18
 8002c98:	d123      	bne.n	8002ce2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	08da      	lsrs	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	2203      	movs	r2, #3
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0203 	and.w	r2, r3, #3
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80e0 	beq.w	8002ee4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d24:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_GPIO_Init+0x238>)
 8002d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d2a:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <HAL_GPIO_Init+0x238>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <HAL_GPIO_Init+0x238>)
 8002d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d42:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <HAL_GPIO_Init+0x23c>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a20      	ldr	r2, [pc, #128]	; (8002dec <HAL_GPIO_Init+0x240>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d052      	beq.n	8002e14 <HAL_GPIO_Init+0x268>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_GPIO_Init+0x244>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_GPIO_Init+0x22e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_GPIO_Init+0x248>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_GPIO_Init+0x22a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <HAL_GPIO_Init+0x24c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d025      	beq.n	8002dd2 <HAL_GPIO_Init+0x226>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_GPIO_Init+0x250>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <HAL_GPIO_Init+0x222>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_GPIO_Init+0x254>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x21e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_GPIO_Init+0x258>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x21a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_GPIO_Init+0x25c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x216>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <HAL_GPIO_Init+0x260>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x212>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_GPIO_Init+0x264>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x20e>
 8002db6:	2309      	movs	r3, #9
 8002db8:	e02d      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dba:	230a      	movs	r3, #10
 8002dbc:	e02b      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	e029      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e027      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dc6:	2306      	movs	r3, #6
 8002dc8:	e025      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dca:	2305      	movs	r3, #5
 8002dcc:	e023      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	e021      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e01f      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e01d      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e01b      	b.n	8002e16 <HAL_GPIO_Init+0x26a>
 8002dde:	bf00      	nop
 8002de0:	58000080 	.word	0x58000080
 8002de4:	58024400 	.word	0x58024400
 8002de8:	58000400 	.word	0x58000400
 8002dec:	58020000 	.word	0x58020000
 8002df0:	58020400 	.word	0x58020400
 8002df4:	58020800 	.word	0x58020800
 8002df8:	58020c00 	.word	0x58020c00
 8002dfc:	58021000 	.word	0x58021000
 8002e00:	58021400 	.word	0x58021400
 8002e04:	58021800 	.word	0x58021800
 8002e08:	58021c00 	.word	0x58021c00
 8002e0c:	58022000 	.word	0x58022000
 8002e10:	58022400 	.word	0x58022400
 8002e14:	2300      	movs	r3, #0
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	f002 0203 	and.w	r2, r2, #3
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	4093      	lsls	r3, r2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e26:	4938      	ldr	r1, [pc, #224]	; (8002f08 <HAL_GPIO_Init+0x35c>)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f47f ae63 	bne.w	8002bc0 <HAL_GPIO_Init+0x14>
  }
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	3724      	adds	r7, #36	; 0x24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	58000400 	.word	0x58000400

08002f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f1c:	787b      	ldrb	r3, [r7, #1]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f28:	e003      	b.n	8002f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	041a      	lsls	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	619a      	str	r2, [r3, #24]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f50:	887a      	ldrh	r2, [r7, #2]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	041a      	lsls	r2, r3, #16
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43d9      	mvns	r1, r3
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	400b      	ands	r3, r1
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	619a      	str	r2, [r3, #24]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002f7c:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <HAL_HSEM_FastTake+0x2c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3320      	adds	r3, #32
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <HAL_HSEM_FastTake+0x30>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	58026400 	.word	0x58026400
 8002fa4:	80000300 	.word	0x80000300

08002fa8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002fb2:	4906      	ldr	r1, [pc, #24]	; (8002fcc <HAL_HSEM_Release+0x24>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	58026400 	.word	0x58026400

08002fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e07f      	b.n	80030e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe fa1e 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	e006      	b.n	8003058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d104      	bne.n	800306a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003068:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_I2C_Init+0x11c>)
 8003076:	430b      	orrs	r3, r1
 8003078:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003088:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	ea42 0103 	orr.w	r1, r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	021a      	lsls	r2, r3, #8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69d9      	ldr	r1, [r3, #28]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	02008000 	.word	0x02008000

080030f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	461a      	mov	r2, r3
 80030fc:	460b      	mov	r3, r1
 80030fe:	817b      	strh	r3, [r7, #10]
 8003100:	4613      	mov	r3, r2
 8003102:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b20      	cmp	r3, #32
 800310e:	f040 80da 	bne.w	80032c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_I2C_Master_Transmit+0x30>
 800311c:	2302      	movs	r3, #2
 800311e:	e0d3      	b.n	80032c8 <HAL_I2C_Master_Transmit+0x1d8>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003128:	f7fe fec2 	bl	8001eb0 <HAL_GetTick>
 800312c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2319      	movs	r3, #25
 8003134:	2201      	movs	r2, #1
 8003136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f8f0 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0be      	b.n	80032c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2221      	movs	r2, #33	; 0x21
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2210      	movs	r2, #16
 8003156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	893a      	ldrh	r2, [r7, #8]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	2bff      	cmp	r3, #255	; 0xff
 800317a:	d90e      	bls.n	800319a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	b2da      	uxtb	r2, r3
 8003188:	8979      	ldrh	r1, [r7, #10]
 800318a:	4b51      	ldr	r3, [pc, #324]	; (80032d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f9e6 	bl	8003564 <I2C_TransferConfig>
 8003198:	e06c      	b.n	8003274 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	8979      	ldrh	r1, [r7, #10]
 80031ac:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f9d5 	bl	8003564 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80031ba:	e05b      	b.n	8003274 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6a39      	ldr	r1, [r7, #32]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f8ed 	bl	80033a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e07b      	b.n	80032c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d034      	beq.n	8003274 <HAL_I2C_Master_Transmit+0x184>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d130      	bne.n	8003274 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	2200      	movs	r2, #0
 800321a:	2180      	movs	r1, #128	; 0x80
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f87f 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e04d      	b.n	80032c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2bff      	cmp	r3, #255	; 0xff
 8003234:	d90e      	bls.n	8003254 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22ff      	movs	r2, #255	; 0xff
 800323a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	b2da      	uxtb	r2, r3
 8003242:	8979      	ldrh	r1, [r7, #10]
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f989 	bl	8003564 <I2C_TransferConfig>
 8003252:	e00f      	b.n	8003274 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003262:	b2da      	uxtb	r2, r3
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	2300      	movs	r3, #0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f978 	bl	8003564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d19e      	bne.n	80031bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	6a39      	ldr	r1, [r7, #32]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f8cc 	bl	8003420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e01a      	b.n	80032c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2220      	movs	r2, #32
 8003298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80032a6:	400b      	ands	r3, r1
 80032a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	80002000 	.word	0x80002000
 80032d4:	fe00e800 	.word	0xfe00e800

080032d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d103      	bne.n	80032f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d007      	beq.n	8003314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	619a      	str	r2, [r3, #24]
  }
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	e022      	b.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d01e      	beq.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fe fdb9 	bl	8001eb0 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <I2C_WaitOnFlagUntilTimeout+0x30>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d113      	bne.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e00f      	b.n	8003398 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	429a      	cmp	r2, r3
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	429a      	cmp	r2, r3
 8003394:	d0cd      	beq.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033ac:	e02c      	b.n	8003408 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f870 	bl	8003498 <I2C_IsAcknowledgeFailed>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e02a      	b.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d01e      	beq.n	8003408 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fe fd71 	bl	8001eb0 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d113      	bne.n	8003408 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d1cb      	bne.n	80033ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342c:	e028      	b.n	8003480 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f830 	bl	8003498 <I2C_IsAcknowledgeFailed>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e026      	b.n	8003490 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7fe fd35 	bl	8001eb0 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d113      	bne.n	8003480 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e007      	b.n	8003490 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b20      	cmp	r3, #32
 800348c:	d1cf      	bne.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d151      	bne.n	8003556 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b2:	e022      	b.n	80034fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d01e      	beq.n	80034fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034bc:	f7fe fcf8 	bl	8001eb0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d302      	bcc.n	80034d2 <I2C_IsAcknowledgeFailed+0x3a>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d113      	bne.n	80034fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e02e      	b.n	8003558 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b20      	cmp	r3, #32
 8003506:	d1d5      	bne.n	80034b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2210      	movs	r2, #16
 800350e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2220      	movs	r2, #32
 8003516:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff fedd 	bl	80032d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <I2C_IsAcknowledgeFailed+0xc8>)
 800352a:	400b      	ands	r3, r1
 800352c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	fe00e800 	.word	0xfe00e800

08003564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	460b      	mov	r3, r1
 8003570:	817b      	strh	r3, [r7, #10]
 8003572:	4613      	mov	r3, r2
 8003574:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	0d5b      	lsrs	r3, r3, #21
 8003580:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <I2C_TransferConfig+0x58>)
 8003586:	430b      	orrs	r3, r1
 8003588:	43db      	mvns	r3, r3
 800358a:	ea02 0103 	and.w	r1, r2, r3
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003594:	7a7b      	ldrb	r3, [r7, #9]
 8003596:	041b      	lsls	r3, r3, #16
 8003598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	03ff63ff 	.word	0x03ff63ff

080035c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d138      	bne.n	8003648 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e032      	b.n	800364a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	; 0x24
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003612:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6819      	ldr	r1, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b20      	cmp	r3, #32
 800366a:	d139      	bne.n	80036e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003676:	2302      	movs	r3, #2
 8003678:	e033      	b.n	80036e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2224      	movs	r2, #36	; 0x24
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80036f8:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	2b06      	cmp	r3, #6
 8003702:	d00a      	beq.n	800371a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003704:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d001      	beq.n	8003716 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e040      	b.n	8003798 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e03e      	b.n	8003798 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800371a:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003722:	491f      	ldr	r1, [pc, #124]	; (80037a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4313      	orrs	r3, r2
 8003728:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800372a:	f7fe fbc1 	bl	8001eb0 <HAL_GetTick>
 800372e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003730:	e009      	b.n	8003746 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003732:	f7fe fbbd 	bl	8001eb0 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003740:	d901      	bls.n	8003746 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e028      	b.n	8003798 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800374e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003752:	d1ee      	bne.n	8003732 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b1e      	cmp	r3, #30
 8003758:	d008      	beq.n	800376c <HAL_PWREx_ConfigSupply+0x7c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b2e      	cmp	r3, #46	; 0x2e
 800375e:	d005      	beq.n	800376c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b1d      	cmp	r3, #29
 8003764:	d002      	beq.n	800376c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b2d      	cmp	r3, #45	; 0x2d
 800376a:	d114      	bne.n	8003796 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800376c:	f7fe fba0 	bl	8001eb0 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003772:	e009      	b.n	8003788 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003774:	f7fe fb9c 	bl	8001eb0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003782:	d901      	bls.n	8003788 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e007      	b.n	8003798 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003794:	d1ee      	bne.n	8003774 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	58024800 	.word	0x58024800

080037a4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7fe fb80 	bl	8001eb0 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e05f      	b.n	800387c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fd fe9b 	bl	8001504 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80037ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f85a 	bl	800388c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	021a      	lsls	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	2120      	movs	r1, #32
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f852 	bl	80038a8 <QSPI_WaitFlagStateUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003808:	7afb      	ldrb	r3, [r7, #11]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d135      	bne.n	800387a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_QSPI_Init+0xe0>)
 8003816:	4013      	ands	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6852      	ldr	r2, [r2, #4]
 800381c:	0611      	lsls	r1, r2, #24
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68d2      	ldr	r2, [r2, #12]
 8003822:	4311      	orrs	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	69d2      	ldr	r2, [r2, #28]
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6a12      	ldr	r2, [r2, #32]
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	430b      	orrs	r3, r1
 8003836:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <HAL_QSPI_Init+0xe4>)
 8003840:	4013      	ands	r3, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6912      	ldr	r2, [r2, #16]
 8003846:	0411      	lsls	r1, r2, #16
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6952      	ldr	r2, [r2, #20]
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6992      	ldr	r2, [r2, #24]
 8003852:	4311      	orrs	r1, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	430b      	orrs	r3, r1
 800385a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800387a:	7afb      	ldrb	r3, [r7, #11]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	00ffff2f 	.word	0x00ffff2f
 8003888:	ffe0f8fe 	.word	0xffe0f8fe

0800388c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80038b8:	e01a      	b.n	80038f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d016      	beq.n	80038f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fe faf5 	bl	8001eb0 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2204      	movs	r2, #4
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0201 	orr.w	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e00e      	b.n	800390e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	429a      	cmp	r2, r3
 800390a:	d1d6      	bne.n	80038ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08c      	sub	sp, #48	; 0x30
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e3ff      	b.n	800412a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8087 	beq.w	8003a46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003938:	4b99      	ldr	r3, [pc, #612]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003942:	4b97      	ldr	r3, [pc, #604]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394a:	2b10      	cmp	r3, #16
 800394c:	d007      	beq.n	800395e <HAL_RCC_OscConfig+0x46>
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	2b18      	cmp	r3, #24
 8003952:	d110      	bne.n	8003976 <HAL_RCC_OscConfig+0x5e>
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d10b      	bne.n	8003976 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395e:	4b90      	ldr	r3, [pc, #576]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d06c      	beq.n	8003a44 <HAL_RCC_OscConfig+0x12c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d168      	bne.n	8003a44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e3d9      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397e:	d106      	bne.n	800398e <HAL_RCC_OscConfig+0x76>
 8003980:	4b87      	ldr	r3, [pc, #540]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a86      	ldr	r2, [pc, #536]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e02e      	b.n	80039ec <HAL_RCC_OscConfig+0xd4>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x98>
 8003996:	4b82      	ldr	r3, [pc, #520]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a81      	ldr	r2, [pc, #516]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 800399c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b7f      	ldr	r3, [pc, #508]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7e      	ldr	r2, [pc, #504]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e01d      	b.n	80039ec <HAL_RCC_OscConfig+0xd4>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0xbc>
 80039ba:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a78      	ldr	r2, [pc, #480]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a75      	ldr	r2, [pc, #468]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0xd4>
 80039d4:	4b72      	ldr	r3, [pc, #456]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a71      	ldr	r2, [pc, #452]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b6f      	ldr	r3, [pc, #444]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6e      	ldr	r2, [pc, #440]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fe fa5c 	bl	8001eb0 <HAL_GetTick>
 80039f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe fa58 	bl	8001eb0 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e38d      	b.n	800412a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a0e:	4b64      	ldr	r3, [pc, #400]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0xe4>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fa48 	bl	8001eb0 <HAL_GetTick>
 8003a20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe fa44 	bl	8001eb0 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e379      	b.n	800412a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a36:	4b5a      	ldr	r3, [pc, #360]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x10c>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80ae 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a54:	4b52      	ldr	r3, [pc, #328]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a5e:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_RCC_OscConfig+0x162>
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	2b18      	cmp	r3, #24
 8003a6e:	d13a      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x1ce>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d135      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a7a:	4b49      	ldr	r3, [pc, #292]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_RCC_OscConfig+0x17a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e34b      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a92:	f7fe fa3d 	bl	8001f10 <HAL_GetREVID>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d817      	bhi.n	8003ad0 <HAL_RCC_OscConfig+0x1b8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d108      	bne.n	8003aba <HAL_RCC_OscConfig+0x1a2>
 8003aa8:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ab0:	4a3b      	ldr	r2, [pc, #236]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab8:	e07a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b39      	ldr	r3, [pc, #228]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	031b      	lsls	r3, r3, #12
 8003ac8:	4935      	ldr	r1, [pc, #212]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ace:	e06f      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad0:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	4930      	ldr	r1, [pc, #192]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae4:	e064      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d045      	beq.n	8003b7a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aee:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 0219 	bic.w	r2, r3, #25
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4929      	ldr	r1, [pc, #164]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe f9d6 	bl	8001eb0 <HAL_GetTick>
 8003b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b08:	f7fe f9d2 	bl	8001eb0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e307      	b.n	800412a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	f7fe f9f3 	bl	8001f10 <HAL_GetREVID>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d817      	bhi.n	8003b64 <HAL_RCC_OscConfig+0x24c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d108      	bne.n	8003b4e <HAL_RCC_OscConfig+0x236>
 8003b3c:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b44:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4a:	6053      	str	r3, [r2, #4]
 8003b4c:	e030      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	031b      	lsls	r3, r3, #12
 8003b5c:	4910      	ldr	r1, [pc, #64]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
 8003b62:	e025      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	490b      	ldr	r1, [pc, #44]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
 8003b78:	e01a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <HAL_RCC_OscConfig+0x288>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fe f993 	bl	8001eb0 <HAL_GetTick>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fe f98f 	bl	8001eb0 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d903      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e2c4      	b.n	800412a <HAL_RCC_OscConfig+0x812>
 8003ba0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ba4:	4ba4      	ldr	r3, [pc, #656]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ee      	bne.n	8003b8e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80a9 	beq.w	8003d10 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bbe:	4b9e      	ldr	r3, [pc, #632]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bc8:	4b9b      	ldr	r3, [pc, #620]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d007      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2cc>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b18      	cmp	r3, #24
 8003bd8:	d13a      	bne.n	8003c50 <HAL_RCC_OscConfig+0x338>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d135      	bne.n	8003c50 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003be4:	4b94      	ldr	r3, [pc, #592]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2e4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e296      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bfc:	f7fe f988 	bl	8001f10 <HAL_GetREVID>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d817      	bhi.n	8003c3a <HAL_RCC_OscConfig+0x322>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d108      	bne.n	8003c24 <HAL_RCC_OscConfig+0x30c>
 8003c12:	4b89      	ldr	r3, [pc, #548]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c1a:	4a87      	ldr	r2, [pc, #540]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c20:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c22:	e075      	b.n	8003d10 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c24:	4b84      	ldr	r3, [pc, #528]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	069b      	lsls	r3, r3, #26
 8003c32:	4981      	ldr	r1, [pc, #516]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c38:	e06a      	b.n	8003d10 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	497b      	ldr	r1, [pc, #492]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c4e:	e05f      	b.n	8003d10 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d042      	beq.n	8003cde <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c58:	4b77      	ldr	r3, [pc, #476]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a76      	ldr	r2, [pc, #472]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fe f924 	bl	8001eb0 <HAL_GetTick>
 8003c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c6c:	f7fe f920 	bl	8001eb0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e255      	b.n	800412a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c7e:	4b6e      	ldr	r3, [pc, #440]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c8a:	f7fe f941 	bl	8001f10 <HAL_GetREVID>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d817      	bhi.n	8003cc8 <HAL_RCC_OscConfig+0x3b0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d108      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x39a>
 8003ca0:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ca8:	4a63      	ldr	r2, [pc, #396]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003caa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cae:	6053      	str	r3, [r2, #4]
 8003cb0:	e02e      	b.n	8003d10 <HAL_RCC_OscConfig+0x3f8>
 8003cb2:	4b61      	ldr	r3, [pc, #388]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	069b      	lsls	r3, r3, #26
 8003cc0:	495d      	ldr	r1, [pc, #372]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]
 8003cc6:	e023      	b.n	8003d10 <HAL_RCC_OscConfig+0x3f8>
 8003cc8:	4b5b      	ldr	r3, [pc, #364]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	4958      	ldr	r1, [pc, #352]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60cb      	str	r3, [r1, #12]
 8003cdc:	e018      	b.n	8003d10 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003cde:	4b56      	ldr	r3, [pc, #344]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a55      	ldr	r2, [pc, #340]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fe f8e1 	bl	8001eb0 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cf2:	f7fe f8dd 	bl	8001eb0 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e212      	b.n	800412a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d04:	4b4c      	ldr	r3, [pc, #304]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d036      	beq.n	8003d8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d019      	beq.n	8003d58 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d24:	4b44      	ldr	r3, [pc, #272]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d28:	4a43      	ldr	r2, [pc, #268]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fe f8be 	bl	8001eb0 <HAL_GetTick>
 8003d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fe f8ba 	bl	8001eb0 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1ef      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x420>
 8003d56:	e018      	b.n	8003d8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d58:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5c:	4a36      	ldr	r2, [pc, #216]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7fe f8a4 	bl	8001eb0 <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6c:	f7fe f8a0 	bl	8001eb0 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1d5      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d7e:	4b2e      	ldr	r3, [pc, #184]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d036      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d019      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d9e:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a25      	ldr	r2, [pc, #148]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003da8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003daa:	f7fe f881 	bl	8001eb0 <HAL_GetTick>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003db2:	f7fe f87d 	bl	8001eb0 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e1b2      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x49a>
 8003dd0:	e018      	b.n	8003e04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dde:	f7fe f867 	bl	8001eb0 <HAL_GetTick>
 8003de2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003de6:	f7fe f863 	bl	8001eb0 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e198      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <HAL_RCC_OscConfig+0x520>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8085 	beq.w	8003f1c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_RCC_OscConfig+0x524>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <HAL_RCC_OscConfig+0x524>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1e:	f7fe f847 	bl	8001eb0 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e24:	e00c      	b.n	8003e40 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e26:	f7fe f843 	bl	8001eb0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b64      	cmp	r3, #100	; 0x64
 8003e32:	d905      	bls.n	8003e40 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e178      	b.n	800412a <HAL_RCC_OscConfig+0x812>
 8003e38:	58024400 	.word	0x58024400
 8003e3c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e40:	4b96      	ldr	r3, [pc, #600]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ec      	beq.n	8003e26 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x54a>
 8003e54:	4b92      	ldr	r3, [pc, #584]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a91      	ldr	r2, [pc, #580]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	e02d      	b.n	8003ebe <HAL_RCC_OscConfig+0x5a6>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x56c>
 8003e6a:	4b8d      	ldr	r3, [pc, #564]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a8c      	ldr	r2, [pc, #560]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	4b8a      	ldr	r3, [pc, #552]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a89      	ldr	r2, [pc, #548]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x5a6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x58e>
 8003e8c:	4b84      	ldr	r3, [pc, #528]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a83      	ldr	r2, [pc, #524]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a80      	ldr	r2, [pc, #512]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x5a6>
 8003ea6:	4b7e      	ldr	r3, [pc, #504]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a7d      	ldr	r2, [pc, #500]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b7b      	ldr	r3, [pc, #492]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a7a      	ldr	r2, [pc, #488]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fd fff3 	bl	8001eb0 <HAL_GetTick>
 8003eca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fd ffef 	bl	8001eb0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e122      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee4:	4b6e      	ldr	r3, [pc, #440]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ee      	beq.n	8003ece <HAL_RCC_OscConfig+0x5b6>
 8003ef0:	e014      	b.n	8003f1c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fd ffdd 	bl	8001eb0 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd ffd9 	bl	8001eb0 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e10c      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f10:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8101 	beq.w	8004128 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f26:	4b5e      	ldr	r3, [pc, #376]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f2e:	2b18      	cmp	r3, #24
 8003f30:	f000 80bc 	beq.w	80040ac <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	f040 8095 	bne.w	8004068 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b58      	ldr	r3, [pc, #352]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a57      	ldr	r2, [pc, #348]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fd ffb1 	bl	8001eb0 <HAL_GetTick>
 8003f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fd ffad 	bl	8001eb0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0e2      	b.n	800412a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f64:	4b4e      	ldr	r3, [pc, #312]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f70:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f74:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <HAL_RCC_OscConfig+0x78c>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f80:	0112      	lsls	r2, r2, #4
 8003f82:	430a      	orrs	r2, r1
 8003f84:	4946      	ldr	r1, [pc, #280]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	628b      	str	r3, [r1, #40]	; 0x28
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	025b      	lsls	r3, r3, #9
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fba:	4939      	ldr	r1, [pc, #228]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003fc0:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	4a36      	ldr	r2, [pc, #216]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fcc:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd0:	4b35      	ldr	r3, [pc, #212]	; (80040a8 <HAL_RCC_OscConfig+0x790>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fd8:	00d2      	lsls	r2, r2, #3
 8003fda:	4931      	ldr	r1, [pc, #196]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fe0:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	f023 020c 	bic.w	r2, r3, #12
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	492c      	ldr	r1, [pc, #176]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	f023 0202 	bic.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	4928      	ldr	r1, [pc, #160]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8004000:	4313      	orrs	r3, r2
 8004002:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004004:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004010:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8004016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800401c:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8004022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd ff36 	bl	8001eb0 <HAL_GetTick>
 8004044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd ff32 	bl	8001eb0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e067      	b.n	800412a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x730>
 8004066:	e05f      	b.n	8004128 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 800406e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fd ff1c 	bl	8001eb0 <HAL_GetTick>
 8004078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407c:	f7fd ff18 	bl	8001eb0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e04d      	b.n	800412a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800408e:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x764>
 800409a:	e045      	b.n	8004128 <HAL_RCC_OscConfig+0x810>
 800409c:	58024800 	.word	0x58024800
 80040a0:	58024400 	.word	0x58024400
 80040a4:	fffffc0c 	.word	0xfffffc0c
 80040a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_RCC_OscConfig+0x81c>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_RCC_OscConfig+0x81c>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d031      	beq.n	8004124 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0203 	and.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d12a      	bne.n	8004124 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d122      	bne.n	8004124 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d11a      	bne.n	8004124 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	0a5b      	lsrs	r3, r3, #9
 80040f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d111      	bne.n	8004124 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	0c1b      	lsrs	r3, r3, #16
 8004104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d108      	bne.n	8004124 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	0e1b      	lsrs	r3, r3, #24
 8004116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3730      	adds	r7, #48	; 0x30
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	58024400 	.word	0x58024400

08004138 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e19c      	b.n	8004486 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b8a      	ldr	r3, [pc, #552]	; (8004378 <HAL_RCC_ClockConfig+0x240>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d910      	bls.n	800417c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b87      	ldr	r3, [pc, #540]	; (8004378 <HAL_RCC_ClockConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 020f 	bic.w	r2, r3, #15
 8004162:	4985      	ldr	r1, [pc, #532]	; (8004378 <HAL_RCC_ClockConfig+0x240>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b83      	ldr	r3, [pc, #524]	; (8004378 <HAL_RCC_ClockConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e184      	b.n	8004486 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	4b7b      	ldr	r3, [pc, #492]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004194:	429a      	cmp	r2, r3
 8004196:	d908      	bls.n	80041aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004198:	4b78      	ldr	r3, [pc, #480]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4975      	ldr	r1, [pc, #468]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	4b70      	ldr	r3, [pc, #448]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d908      	bls.n	80041d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041c6:	4b6d      	ldr	r3, [pc, #436]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	496a      	ldr	r1, [pc, #424]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d010      	beq.n	8004206 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	4b64      	ldr	r3, [pc, #400]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d908      	bls.n	8004206 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041f4:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	495e      	ldr	r1, [pc, #376]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 8004202:	4313      	orrs	r3, r2
 8004204:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d010      	beq.n	8004234 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	4b59      	ldr	r3, [pc, #356]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800421e:	429a      	cmp	r2, r3
 8004220:	d908      	bls.n	8004234 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004222:	4b56      	ldr	r3, [pc, #344]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	4953      	ldr	r1, [pc, #332]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 8004230:	4313      	orrs	r3, r2
 8004232:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d010      	beq.n	8004262 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	4b4d      	ldr	r3, [pc, #308]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	429a      	cmp	r2, r3
 800424e:	d908      	bls.n	8004262 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f023 020f 	bic.w	r2, r3, #15
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4947      	ldr	r1, [pc, #284]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 800425e:	4313      	orrs	r3, r2
 8004260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d055      	beq.n	800431a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800426e:	4b43      	ldr	r3, [pc, #268]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4940      	ldr	r1, [pc, #256]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 800427c:	4313      	orrs	r3, r2
 800427e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d107      	bne.n	8004298 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004288:	4b3c      	ldr	r3, [pc, #240]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d121      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0f6      	b.n	8004486 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d107      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042a0:	4b36      	ldr	r3, [pc, #216]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d115      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0ea      	b.n	8004486 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042b8:	4b30      	ldr	r3, [pc, #192]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0de      	b.n	8004486 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c8:	4b2c      	ldr	r3, [pc, #176]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0d6      	b.n	8004486 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d8:	4b28      	ldr	r3, [pc, #160]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f023 0207 	bic.w	r2, r3, #7
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4925      	ldr	r1, [pc, #148]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fd fde1 	bl	8001eb0 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f2:	f7fd fddd 	bl	8001eb0 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e0be      	b.n	8004486 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	429a      	cmp	r2, r3
 8004318:	d1eb      	bne.n	80042f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	4b14      	ldr	r3, [pc, #80]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	429a      	cmp	r2, r3
 8004334:	d208      	bcs.n	8004348 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f023 020f 	bic.w	r2, r3, #15
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	490e      	ldr	r1, [pc, #56]	; (800437c <HAL_RCC_ClockConfig+0x244>)
 8004344:	4313      	orrs	r3, r2
 8004346:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_ClockConfig+0x240>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d214      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <HAL_RCC_ClockConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 020f 	bic.w	r2, r3, #15
 800435e:	4906      	ldr	r1, [pc, #24]	; (8004378 <HAL_RCC_ClockConfig+0x240>)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <HAL_RCC_ClockConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d005      	beq.n	8004380 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e086      	b.n	8004486 <HAL_RCC_ClockConfig+0x34e>
 8004378:	52002000 	.word	0x52002000
 800437c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	4b3f      	ldr	r3, [pc, #252]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004398:	429a      	cmp	r2, r3
 800439a:	d208      	bcs.n	80043ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800439c:	4b3c      	ldr	r3, [pc, #240]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	4939      	ldr	r1, [pc, #228]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d010      	beq.n	80043dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	4b34      	ldr	r3, [pc, #208]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d208      	bcs.n	80043dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043ca:	4b31      	ldr	r3, [pc, #196]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	492e      	ldr	r1, [pc, #184]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d208      	bcs.n	800440a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	4922      	ldr	r1, [pc, #136]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 8004406:	4313      	orrs	r3, r2
 8004408:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d010      	beq.n	8004438 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004422:	429a      	cmp	r2, r3
 8004424:	d208      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4917      	ldr	r1, [pc, #92]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 8004434:	4313      	orrs	r3, r2
 8004436:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004438:	f000 f834 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	4912      	ldr	r1, [pc, #72]	; (8004494 <HAL_RCC_ClockConfig+0x35c>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
 8004454:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <HAL_RCC_ClockConfig+0x358>)
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <HAL_RCC_ClockConfig+0x35c>)
 8004460:	5cd3      	ldrb	r3, [r2, r3]
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <HAL_RCC_ClockConfig+0x360>)
 800446e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <HAL_RCC_ClockConfig+0x364>)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_RCC_ClockConfig+0x368>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd faae 	bl	80019dc <HAL_InitTick>
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	58024400 	.word	0x58024400
 8004494:	0800e0a0 	.word	0x0800e0a0
 8004498:	24000004 	.word	0x24000004
 800449c:	24000000 	.word	0x24000000
 80044a0:	24000008 	.word	0x24000008

080044a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044aa:	4bb3      	ldr	r3, [pc, #716]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044b2:	2b18      	cmp	r3, #24
 80044b4:	f200 8155 	bhi.w	8004762 <HAL_RCC_GetSysClockFreq+0x2be>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	08004525 	.word	0x08004525
 80044c4:	08004763 	.word	0x08004763
 80044c8:	08004763 	.word	0x08004763
 80044cc:	08004763 	.word	0x08004763
 80044d0:	08004763 	.word	0x08004763
 80044d4:	08004763 	.word	0x08004763
 80044d8:	08004763 	.word	0x08004763
 80044dc:	08004763 	.word	0x08004763
 80044e0:	0800454b 	.word	0x0800454b
 80044e4:	08004763 	.word	0x08004763
 80044e8:	08004763 	.word	0x08004763
 80044ec:	08004763 	.word	0x08004763
 80044f0:	08004763 	.word	0x08004763
 80044f4:	08004763 	.word	0x08004763
 80044f8:	08004763 	.word	0x08004763
 80044fc:	08004763 	.word	0x08004763
 8004500:	08004551 	.word	0x08004551
 8004504:	08004763 	.word	0x08004763
 8004508:	08004763 	.word	0x08004763
 800450c:	08004763 	.word	0x08004763
 8004510:	08004763 	.word	0x08004763
 8004514:	08004763 	.word	0x08004763
 8004518:	08004763 	.word	0x08004763
 800451c:	08004763 	.word	0x08004763
 8004520:	08004557 	.word	0x08004557
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004524:	4b94      	ldr	r3, [pc, #592]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004530:	4b91      	ldr	r3, [pc, #580]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	08db      	lsrs	r3, r3, #3
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	4a90      	ldr	r2, [pc, #576]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
 8004540:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004542:	e111      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004544:	4b8d      	ldr	r3, [pc, #564]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004546:	61bb      	str	r3, [r7, #24]
    break;
 8004548:	e10e      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800454a:	4b8d      	ldr	r3, [pc, #564]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800454c:	61bb      	str	r3, [r7, #24]
    break;
 800454e:	e10b      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004550:	4b8c      	ldr	r3, [pc, #560]	; (8004784 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004552:	61bb      	str	r3, [r7, #24]
    break;
 8004554:	e108      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004556:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004560:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800456c:	4b82      	ldr	r3, [pc, #520]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004576:	4b80      	ldr	r3, [pc, #512]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	08db      	lsrs	r3, r3, #3
 800457c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80e1 	beq.w	800475c <HAL_RCC_GetSysClockFreq+0x2b8>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b02      	cmp	r3, #2
 800459e:	f000 8083 	beq.w	80046a8 <HAL_RCC_GetSysClockFreq+0x204>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	f200 80a1 	bhi.w	80046ec <HAL_RCC_GetSysClockFreq+0x248>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x114>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d056      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x1c0>
 80045b6:	e099      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b8:	4b6f      	ldr	r3, [pc, #444]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02d      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045c4:	4b6c      	ldr	r3, [pc, #432]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	08db      	lsrs	r3, r3, #3
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	4a6b      	ldr	r2, [pc, #428]	; (800477c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
 80045d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b62      	ldr	r3, [pc, #392]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004602:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004788 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800461e:	e087      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800478c <HAL_RCC_GetSysClockFreq+0x2e8>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b51      	ldr	r3, [pc, #324]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a02 	vldr	s12, [r7, #8]
 8004646:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004662:	e065      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004790 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b40      	ldr	r3, [pc, #256]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a02 	vldr	s12, [r7, #8]
 800468a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046a6:	e043      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004794 <HAL_RCC_GetSysClockFreq+0x2f0>
 80046b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ba:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004788 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ea:	e021      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004790 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fe:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004712:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004788 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800472e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	0a5b      	lsrs	r3, r3, #9
 8004736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800473a:	3301      	adds	r3, #1
 800473c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004748:	edd7 6a07 	vldr	s13, [r7, #28]
 800474c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004754:	ee17 3a90 	vmov	r3, s15
 8004758:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800475a:	e005      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	61bb      	str	r3, [r7, #24]
    break;
 8004760:	e002      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004762:	4b07      	ldr	r3, [pc, #28]	; (8004780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004764:	61bb      	str	r3, [r7, #24]
    break;
 8004766:	bf00      	nop
  }

  return sysclockfreq;
 8004768:	69bb      	ldr	r3, [r7, #24]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3724      	adds	r7, #36	; 0x24
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	58024400 	.word	0x58024400
 800477c:	03d09000 	.word	0x03d09000
 8004780:	003d0900 	.word	0x003d0900
 8004784:	017d7840 	.word	0x017d7840
 8004788:	46000000 	.word	0x46000000
 800478c:	4c742400 	.word	0x4c742400
 8004790:	4a742400 	.word	0x4a742400
 8004794:	4bbebc20 	.word	0x4bbebc20

08004798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800479e:	f7ff fe81 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 80047a2:	4602      	mov	r2, r0
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	0a1b      	lsrs	r3, r3, #8
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	490f      	ldr	r1, [pc, #60]	; (80047ec <HAL_RCC_GetHCLKFreq+0x54>)
 80047b0:	5ccb      	ldrb	r3, [r1, r3]
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	4a09      	ldr	r2, [pc, #36]	; (80047ec <HAL_RCC_GetHCLKFreq+0x54>)
 80047c6:	5cd3      	ldrb	r3, [r2, r3]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80047d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047d6:	4a07      	ldr	r2, [pc, #28]	; (80047f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047dc:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	58024400 	.word	0x58024400
 80047ec:	0800e0a0 	.word	0x0800e0a0
 80047f0:	24000004 	.word	0x24000004
 80047f4:	24000000 	.word	0x24000000

080047f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047fc:	f7ff ffcc 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4904      	ldr	r1, [pc, #16]	; (8004820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004818:	4618      	mov	r0, r3
 800481a:	bd80      	pop	{r7, pc}
 800481c:	58024400 	.word	0x58024400
 8004820:	0800e0a0 	.word	0x0800e0a0

08004824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004828:	f7ff ffb6 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	4904      	ldr	r1, [pc, #16]	; (800484c <HAL_RCC_GetPCLK2Freq+0x28>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004844:	4618      	mov	r0, r3
 8004846:	bd80      	pop	{r7, pc}
 8004848:	58024400 	.word	0x58024400
 800484c:	0800e0a0 	.word	0x0800e0a0

08004850 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	223f      	movs	r2, #63	; 0x3f
 800485e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <HAL_RCC_GetClockConfig+0x7c>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0207 	and.w	r2, r3, #7
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <HAL_RCC_GetClockConfig+0x7c>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004878:	4b14      	ldr	r3, [pc, #80]	; (80048cc <HAL_RCC_GetClockConfig+0x7c>)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f003 020f 	and.w	r2, r3, #15
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_RCC_GetClockConfig+0x7c>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <HAL_RCC_GetClockConfig+0x7c>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_GetClockConfig+0x7c>)
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <HAL_RCC_GetClockConfig+0x7c>)
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_RCC_GetClockConfig+0x80>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	601a      	str	r2, [r3, #0]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	58024400 	.word	0x58024400
 80048d0:	52002000 	.word	0x52002000

080048d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048e0:	2300      	movs	r3, #0
 80048e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d03f      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048f8:	d02a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048fe:	d824      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004904:	d018      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004906:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800490a:	d81e      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004914:	d007      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004916:	e018      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004918:	4bab      	ldr	r3, [pc, #684]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	4aaa      	ldr	r2, [pc, #680]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800491e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004922:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004924:	e015      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
 800492a:	2102      	movs	r1, #2
 800492c:	4618      	mov	r0, r3
 800492e:	f002 f823 	bl	8006978 <RCCEx_PLL2_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004936:	e00c      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3324      	adds	r3, #36	; 0x24
 800493c:	2102      	movs	r1, #2
 800493e:	4618      	mov	r0, r3
 8004940:	f002 f8cc 	bl	8006adc <RCCEx_PLL3_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004948:	e003      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
      break;
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004958:	4b9b      	ldr	r3, [pc, #620]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004964:	4998      	ldr	r1, [pc, #608]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	650b      	str	r3, [r1, #80]	; 0x50
 800496a:	e001      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d03d      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	2b04      	cmp	r3, #4
 8004982:	d826      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049a1 	.word	0x080049a1
 8004990:	080049af 	.word	0x080049af
 8004994:	080049c1 	.word	0x080049c1
 8004998:	080049d9 	.word	0x080049d9
 800499c:	080049d9 	.word	0x080049d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a0:	4b89      	ldr	r3, [pc, #548]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4a88      	ldr	r2, [pc, #544]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049ac:	e015      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 ffdf 	bl	8006978 <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049be:	e00c      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3324      	adds	r3, #36	; 0x24
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f002 f888 	bl	8006adc <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049d0:	e003      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
      break;
 80049d6:	e000      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80049d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049e0:	4b79      	ldr	r3, [pc, #484]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e4:	f023 0207 	bic.w	r2, r3, #7
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ec:	4976      	ldr	r1, [pc, #472]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	650b      	str	r3, [r1, #80]	; 0x50
 80049f2:	e001      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d042      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0c:	d02b      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a12:	d825      	bhi.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a14:	2bc0      	cmp	r3, #192	; 0xc0
 8004a16:	d028      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a18:	2bc0      	cmp	r3, #192	; 0xc0
 8004a1a:	d821      	bhi.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d016      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004a20:	2b80      	cmp	r3, #128	; 0x80
 8004a22:	d81d      	bhi.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d007      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a2c:	e018      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2e:	4b66      	ldr	r3, [pc, #408]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	4a65      	ldr	r2, [pc, #404]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a3a:	e017      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 ff98 	bl	8006978 <RCCEx_PLL2_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a4c:	e00e      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3324      	adds	r3, #36	; 0x24
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f002 f841 	bl	8006adc <RCCEx_PLL3_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a5e:	e005      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	75fb      	strb	r3, [r7, #23]
      break;
 8004a64:	e002      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a72:	4b55      	ldr	r3, [pc, #340]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a76:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	4952      	ldr	r1, [pc, #328]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	650b      	str	r3, [r1, #80]	; 0x50
 8004a84:	e001      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d049      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa0:	d030      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004aa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa6:	d82a      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004aa8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004aac:	d02c      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004aae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ab2:	d824      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab8:	d018      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004abe:	d81e      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ac8:	d007      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004aca:	e018      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004acc:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	4a3d      	ldr	r2, [pc, #244]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ad8:	e017      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 ff49 	bl	8006978 <RCCEx_PLL2_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004aea:	e00e      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3324      	adds	r3, #36	; 0x24
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 fff2 	bl	8006adc <RCCEx_PLL3_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004afc:	e005      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	75fb      	strb	r3, [r7, #23]
      break;
 8004b02:	e002      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b04:	bf00      	nop
 8004b06:	e000      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b10:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b1e:	492a      	ldr	r1, [pc, #168]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	658b      	str	r3, [r1, #88]	; 0x58
 8004b24:	e001      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d04c      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b40:	d030      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004b42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b46:	d82a      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b4c:	d02c      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004b4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b52:	d824      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b58:	d018      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004b5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b5e:	d81e      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b68:	d007      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b6a:	e018      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6c:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b78:	e017      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 fef9 	bl	8006978 <RCCEx_PLL2_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b8a:	e00e      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3324      	adds	r3, #36	; 0x24
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 ffa2 	bl	8006adc <RCCEx_PLL3_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b9c:	e005      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba2:	e002      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ba4:	bf00      	nop
 8004ba6:	e000      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10d      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bbe:	4902      	ldr	r1, [pc, #8]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	658b      	str	r3, [r1, #88]	; 0x58
 8004bc4:	e004      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004bc6:	bf00      	nop
 8004bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d032      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d01c      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d817      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d00c      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d813      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d016      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d10f      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf8:	4bb1      	ldr	r3, [pc, #708]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	4ab0      	ldr	r2, [pc, #704]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c04:	e00e      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	2102      	movs	r1, #2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 feb3 	bl	8006978 <RCCEx_PLL2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c16:	e005      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1c:	e002      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e000      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c2a:	4ba5      	ldr	r3, [pc, #660]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c36:	49a2      	ldr	r1, [pc, #648]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c3c:	e001      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d047      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c56:	d030      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c5c:	d82a      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004c5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c62:	d02c      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004c64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c68:	d824      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6e:	d018      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c74:	d81e      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	d007      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004c80:	e018      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c82:	4b8f      	ldr	r3, [pc, #572]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	4a8e      	ldr	r2, [pc, #568]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c8e:	e017      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	2100      	movs	r1, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f001 fe6e 	bl	8006978 <RCCEx_PLL2_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004ca0:	e00e      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3324      	adds	r3, #36	; 0x24
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 ff17 	bl	8006adc <RCCEx_PLL3_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cb2:	e005      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb8:	e002      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004cc6:	4b7e      	ldr	r3, [pc, #504]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd2:	497b      	ldr	r1, [pc, #492]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	650b      	str	r3, [r1, #80]	; 0x50
 8004cd8:	e001      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d049      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf2:	d02e      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf8:	d828      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004cfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cfe:	d02a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004d00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d04:	d822      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d0a:	d026      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004d0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d10:	d81c      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d16:	d010      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d1c:	d816      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01d      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d26:	d111      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 fe22 	bl	8006978 <RCCEx_PLL2_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d38:	e012      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3324      	adds	r3, #36	; 0x24
 8004d3e:	2101      	movs	r1, #1
 8004d40:	4618      	mov	r0, r3
 8004d42:	f001 fecb 	bl	8006adc <RCCEx_PLL3_Config>
 8004d46:	4603      	mov	r3, r0
 8004d48:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d4a:	e009      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d50:	e006      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004d52:	bf00      	nop
 8004d54:	e004      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004d56:	bf00      	nop
 8004d58:	e002      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e000      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d66:	4b56      	ldr	r3, [pc, #344]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d72:	4953      	ldr	r1, [pc, #332]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	650b      	str	r3, [r1, #80]	; 0x50
 8004d78:	e001      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
 8004d7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d04b      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d94:	d02e      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d9a:	d828      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d02a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da6:	d822      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004da8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dac:	d026      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004dae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004db2:	d81c      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db8:	d010      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dbe:	d816      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01d      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004dc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc8:	d111      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	2101      	movs	r1, #1
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 fdd1 	bl	8006978 <RCCEx_PLL2_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004dda:	e012      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3324      	adds	r3, #36	; 0x24
 8004de0:	2101      	movs	r1, #1
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 fe7a 	bl	8006adc <RCCEx_PLL3_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004dec:	e009      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
      break;
 8004df2:	e006      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004df4:	bf00      	nop
 8004df6:	e004      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004df8:	bf00      	nop
 8004dfa:	e002      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e16:	492a      	ldr	r1, [pc, #168]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	658b      	str	r3, [r1, #88]	; 0x58
 8004e1c:	e001      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d022      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00e      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3a:	d108      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	2101      	movs	r1, #1
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fd98 	bl	8006978 <RCCEx_PLL2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
      break;
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8004e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004e5c:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e68:	4915      	ldr	r1, [pc, #84]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e6e:	e001      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d031      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e88:	d00e      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e8e:	d814      	bhi.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d017      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8004e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e98:	d10f      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ea6:	e00e      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	2101      	movs	r1, #1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 fd62 	bl	8006978 <RCCEx_PLL2_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004eb8:	e005      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ebe:	e002      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004ec0:	58024400 	.word	0x58024400
      break;
 8004ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ecc:	4bbc      	ldr	r3, [pc, #752]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	49b9      	ldr	r1, [pc, #740]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	650b      	str	r3, [r1, #80]	; 0x50
 8004ede:	e001      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
 8004ee2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d032      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d81b      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f37 	.word	0x08004f37
 8004f04:	08004f11 	.word	0x08004f11
 8004f08:	08004f1f 	.word	0x08004f1f
 8004f0c:	08004f37 	.word	0x08004f37
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f10:	4bab      	ldr	r3, [pc, #684]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	4aaa      	ldr	r2, [pc, #680]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f1c:	e00c      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2102      	movs	r1, #2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f001 fd27 	bl	8006978 <RCCEx_PLL2_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f2e:	e003      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
      break;
 8004f34:	e000      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8004f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f3e:	4ba0      	ldr	r3, [pc, #640]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	499d      	ldr	r1, [pc, #628]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f50:	e001      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8086 	beq.w	8005070 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f64:	4b97      	ldr	r3, [pc, #604]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a96      	ldr	r2, [pc, #600]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f70:	f7fc ff9e 	bl	8001eb0 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f76:	e009      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f78:	f7fc ff9a 	bl	8001eb0 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	; 0x64
 8004f84:	d902      	bls.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	75fb      	strb	r3, [r7, #23]
        break;
 8004f8a:	e005      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f8c:	4b8d      	ldr	r3, [pc, #564]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ef      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8004f98:	7dfb      	ldrb	r3, [r7, #23]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d166      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f9e:	4b88      	ldr	r3, [pc, #544]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fa8:	4053      	eors	r3, r2
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d013      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fb2:	4b83      	ldr	r3, [pc, #524]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fbc:	4b80      	ldr	r3, [pc, #512]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	4a7f      	ldr	r2, [pc, #508]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc8:	4b7d      	ldr	r3, [pc, #500]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	4a7c      	ldr	r2, [pc, #496]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fd4:	4a7a      	ldr	r2, [pc, #488]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe4:	d115      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7fc ff63 	bl	8001eb0 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fec:	e00b      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fc ff5f 	bl	8001eb0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d902      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	75fb      	strb	r3, [r7, #23]
            break;
 8005004:	e005      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005006:	4b6e      	ldr	r3, [pc, #440]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0ed      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d126      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005026:	d10d      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8005028:	4b65      	ldr	r3, [pc, #404]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005036:	0919      	lsrs	r1, r3, #4
 8005038:	4b63      	ldr	r3, [pc, #396]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 800503a:	400b      	ands	r3, r1
 800503c:	4960      	ldr	r1, [pc, #384]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800503e:	4313      	orrs	r3, r2
 8005040:	610b      	str	r3, [r1, #16]
 8005042:	e005      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8005044:	4b5e      	ldr	r3, [pc, #376]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	4a5d      	ldr	r2, [pc, #372]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800504a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800504e:	6113      	str	r3, [r2, #16]
 8005050:	4b5b      	ldr	r3, [pc, #364]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800505a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505e:	4958      	ldr	r1, [pc, #352]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005060:	4313      	orrs	r3, r2
 8005062:	670b      	str	r3, [r1, #112]	; 0x70
 8005064:	e004      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	75bb      	strb	r3, [r7, #22]
 800506a:	e001      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d07e      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005080:	2b28      	cmp	r3, #40	; 0x28
 8005082:	d867      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800515b 	.word	0x0800515b
 8005090:	08005155 	.word	0x08005155
 8005094:	08005155 	.word	0x08005155
 8005098:	08005155 	.word	0x08005155
 800509c:	08005155 	.word	0x08005155
 80050a0:	08005155 	.word	0x08005155
 80050a4:	08005155 	.word	0x08005155
 80050a8:	08005155 	.word	0x08005155
 80050ac:	08005131 	.word	0x08005131
 80050b0:	08005155 	.word	0x08005155
 80050b4:	08005155 	.word	0x08005155
 80050b8:	08005155 	.word	0x08005155
 80050bc:	08005155 	.word	0x08005155
 80050c0:	08005155 	.word	0x08005155
 80050c4:	08005155 	.word	0x08005155
 80050c8:	08005155 	.word	0x08005155
 80050cc:	08005143 	.word	0x08005143
 80050d0:	08005155 	.word	0x08005155
 80050d4:	08005155 	.word	0x08005155
 80050d8:	08005155 	.word	0x08005155
 80050dc:	08005155 	.word	0x08005155
 80050e0:	08005155 	.word	0x08005155
 80050e4:	08005155 	.word	0x08005155
 80050e8:	08005155 	.word	0x08005155
 80050ec:	0800515b 	.word	0x0800515b
 80050f0:	08005155 	.word	0x08005155
 80050f4:	08005155 	.word	0x08005155
 80050f8:	08005155 	.word	0x08005155
 80050fc:	08005155 	.word	0x08005155
 8005100:	08005155 	.word	0x08005155
 8005104:	08005155 	.word	0x08005155
 8005108:	08005155 	.word	0x08005155
 800510c:	0800515b 	.word	0x0800515b
 8005110:	08005155 	.word	0x08005155
 8005114:	08005155 	.word	0x08005155
 8005118:	08005155 	.word	0x08005155
 800511c:	08005155 	.word	0x08005155
 8005120:	08005155 	.word	0x08005155
 8005124:	08005155 	.word	0x08005155
 8005128:	08005155 	.word	0x08005155
 800512c:	0800515b 	.word	0x0800515b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	2101      	movs	r1, #1
 8005136:	4618      	mov	r0, r3
 8005138:	f001 fc1e 	bl	8006978 <RCCEx_PLL2_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005140:	e00c      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3324      	adds	r3, #36	; 0x24
 8005146:	2101      	movs	r1, #1
 8005148:	4618      	mov	r0, r3
 800514a:	f001 fcc7 	bl	8006adc <RCCEx_PLL3_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005152:	e003      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
      break;
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 800515a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005162:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516e:	4914      	ldr	r1, [pc, #80]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005170:	4313      	orrs	r3, r2
 8005172:	654b      	str	r3, [r1, #84]	; 0x54
 8005174:	e001      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d03e      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518a:	2b05      	cmp	r3, #5
 800518c:	d827      	bhi.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051e5 	.word	0x080051e5
 8005198:	080051ad 	.word	0x080051ad
 800519c:	080051cd 	.word	0x080051cd
 80051a0:	080051e5 	.word	0x080051e5
 80051a4:	080051e5 	.word	0x080051e5
 80051a8:	080051e5 	.word	0x080051e5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	2101      	movs	r1, #1
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fbe0 	bl	8006978 <RCCEx_PLL2_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051bc:	e013      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 80051be:	bf00      	nop
 80051c0:	58024400 	.word	0x58024400
 80051c4:	58024800 	.word	0x58024800
 80051c8:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3324      	adds	r3, #36	; 0x24
 80051d0:	2101      	movs	r1, #1
 80051d2:	4618      	mov	r0, r3
 80051d4:	f001 fc82 	bl	8006adc <RCCEx_PLL3_Config>
 80051d8:	4603      	mov	r3, r0
 80051da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051dc:	e003      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	75fb      	strb	r3, [r7, #23]
      break;
 80051e2:	e000      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80051e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d109      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051ec:	4b9f      	ldr	r3, [pc, #636]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80051ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f0:	f023 0207 	bic.w	r2, r3, #7
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f8:	499c      	ldr	r1, [pc, #624]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	654b      	str	r3, [r1, #84]	; 0x54
 80051fe:	e001      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d039      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005216:	2b05      	cmp	r3, #5
 8005218:	d820      	bhi.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x988>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005263 	.word	0x08005263
 8005224:	08005239 	.word	0x08005239
 8005228:	0800524b 	.word	0x0800524b
 800522c:	08005263 	.word	0x08005263
 8005230:	08005263 	.word	0x08005263
 8005234:	08005263 	.word	0x08005263
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	2101      	movs	r1, #1
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fb9a 	bl	8006978 <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005248:	e00c      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3324      	adds	r3, #36	; 0x24
 800524e:	2101      	movs	r1, #1
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fc43 	bl	8006adc <RCCEx_PLL3_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800525a:	e003      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
      break;
 8005260:	e000      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8005262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800526a:	4b80      	ldr	r3, [pc, #512]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	f023 0207 	bic.w	r2, r3, #7
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005278:	497c      	ldr	r1, [pc, #496]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800527a:	4313      	orrs	r3, r2
 800527c:	658b      	str	r3, [r1, #88]	; 0x58
 800527e:	e001      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d04b      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800529a:	d02e      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800529c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052a0:	d828      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a6:	d02a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d822      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80052ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052b2:	d026      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 80052b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052b8:	d81c      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80052ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052be:	d010      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80052c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c4:	d816      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01d      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80052ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ce:	d111      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3304      	adds	r3, #4
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 fb4e 	bl	8006978 <RCCEx_PLL2_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052e0:	e012      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3324      	adds	r3, #36	; 0x24
 80052e6:	2102      	movs	r1, #2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 fbf7 	bl	8006adc <RCCEx_PLL3_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052f2:	e009      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	75fb      	strb	r3, [r7, #23]
      break;
 80052f8:	e006      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80052fa:	bf00      	nop
 80052fc:	e004      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80052fe:	bf00      	nop
 8005300:	e002      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8005302:	bf00      	nop
 8005304:	e000      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8005306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800530e:	4b57      	ldr	r3, [pc, #348]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	4953      	ldr	r1, [pc, #332]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800531e:	4313      	orrs	r3, r2
 8005320:	654b      	str	r3, [r1, #84]	; 0x54
 8005322:	e001      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d04b      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800533a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800533e:	d02e      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8005340:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005344:	d828      	bhi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534a:	d02a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xace>
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005350:	d822      	bhi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8005352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005356:	d026      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8005358:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800535c:	d81c      	bhi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800535e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005362:	d010      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005368:	d816      	bhi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01d      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005372:	d111      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fafc 	bl	8006978 <RCCEx_PLL2_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005384:	e012      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3324      	adds	r3, #36	; 0x24
 800538a:	2102      	movs	r1, #2
 800538c:	4618      	mov	r0, r3
 800538e:	f001 fba5 	bl	8006adc <RCCEx_PLL3_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005396:	e009      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
      break;
 800539c:	e006      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800539e:	bf00      	nop
 80053a0:	e004      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80053a2:	bf00      	nop
 80053a4:	e002      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80053a6:	bf00      	nop
 80053a8:	e000      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80053aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053b2:	4b2e      	ldr	r3, [pc, #184]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053c0:	492a      	ldr	r1, [pc, #168]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	658b      	str	r3, [r1, #88]	; 0x58
 80053c6:	e001      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d04d      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053e2:	d02e      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80053e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053e8:	d828      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80053ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ee:	d02a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80053f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f4:	d822      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80053f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053fa:	d026      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80053fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005400:	d81c      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8005402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005406:	d010      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8005408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800540c:	d816      	bhi.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01d      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005416:	d111      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f001 faaa 	bl	8006978 <RCCEx_PLL2_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005428:	e012      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3324      	adds	r3, #36	; 0x24
 800542e:	2102      	movs	r1, #2
 8005430:	4618      	mov	r0, r3
 8005432:	f001 fb53 	bl	8006adc <RCCEx_PLL3_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800543a:	e009      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	75fb      	strb	r3, [r7, #23]
      break;
 8005440:	e006      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8005442:	bf00      	nop
 8005444:	e004      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8005446:	bf00      	nop
 8005448:	e002      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800544a:	bf00      	nop
 800544c:	e000      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800544e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10c      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005464:	4901      	ldr	r1, [pc, #4]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005466:	4313      	orrs	r3, r2
 8005468:	658b      	str	r3, [r1, #88]	; 0x58
 800546a:	e003      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800546c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	d10a      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3324      	adds	r3, #36	; 0x24
 8005490:	2102      	movs	r1, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f001 fb22 	bl	8006adc <RCCEx_PLL3_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054a2:	4b8c      	ldr	r3, [pc, #560]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b0:	4988      	ldr	r1, [pc, #544]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054cc:	d10a      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3324      	adds	r3, #36	; 0x24
 80054d2:	2102      	movs	r1, #2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 fb01 	bl	8006adc <RCCEx_PLL3_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054e4:	4b7b      	ldr	r3, [pc, #492]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80054e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054f2:	4978      	ldr	r1, [pc, #480]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d034      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800550a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800550e:	d01d      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005514:	d817      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800551a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551e:	d009      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8005520:	e011      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3304      	adds	r3, #4
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f001 fa25 	bl	8006978 <RCCEx_PLL2_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005532:	e00c      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3324      	adds	r3, #36	; 0x24
 8005538:	2102      	movs	r1, #2
 800553a:	4618      	mov	r0, r3
 800553c:	f001 face 	bl	8006adc <RCCEx_PLL3_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005544:	e003      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	75fb      	strb	r3, [r7, #23]
      break;
 800554a:	e000      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 800554c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005554:	4b5f      	ldr	r3, [pc, #380]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005562:	495c      	ldr	r1, [pc, #368]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005564:	4313      	orrs	r3, r2
 8005566:	658b      	str	r3, [r1, #88]	; 0x58
 8005568:	e001      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d033      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005584:	d01c      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8005586:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800558a:	d816      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xce6>
 800558c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005590:	d003      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005596:	d007      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8005598:	e00f      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800559a:	4b4e      	ldr	r3, [pc, #312]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	4a4d      	ldr	r2, [pc, #308]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80055a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80055a6:	e00c      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3324      	adds	r3, #36	; 0x24
 80055ac:	2101      	movs	r1, #1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f001 fa94 	bl	8006adc <RCCEx_PLL3_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80055b8:	e003      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	75fb      	strb	r3, [r7, #23]
      break;
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80055c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055c8:	4b42      	ldr	r3, [pc, #264]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80055ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	493f      	ldr	r1, [pc, #252]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	654b      	str	r3, [r1, #84]	; 0x54
 80055dc:	e001      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d029      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	d007      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80055fc:	e00f      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fe:	4b35      	ldr	r3, [pc, #212]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	4a34      	ldr	r2, [pc, #208]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800560a:	e00b      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
 8005610:	2102      	movs	r1, #2
 8005612:	4618      	mov	r0, r3
 8005614:	f001 f9b0 	bl	8006978 <RCCEx_PLL2_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800561c:	e002      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
      break;
 8005622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800562a:	4b2a      	ldr	r3, [pc, #168]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800562c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005636:	4927      	ldr	r1, [pc, #156]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8005638:	4313      	orrs	r3, r2
 800563a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800563c:	e001      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3324      	adds	r3, #36	; 0x24
 8005652:	2102      	movs	r1, #2
 8005654:	4618      	mov	r0, r3
 8005656:	f001 fa41 	bl	8006adc <RCCEx_PLL3_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d035      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800567a:	d017      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 800567c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005680:	d811      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005686:	d013      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d80b      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d010      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8005692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005696:	d106      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005698:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	4a0d      	ldr	r2, [pc, #52]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800569e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80056a4:	e007      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
      break;
 80056aa:	e004      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80056ac:	bf00      	nop
 80056ae:	e002      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80056b0:	bf00      	nop
 80056b2:	e000      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80056b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10d      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80056be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ca:	4902      	ldr	r1, [pc, #8]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	654b      	str	r3, [r1, #84]	; 0x54
 80056d0:	e004      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80056d2:	bf00      	nop
 80056d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056e8:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f4:	492e      	ldr	r1, [pc, #184]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005706:	4b2a      	ldr	r3, [pc, #168]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005714:	4926      	ldr	r1, [pc, #152]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005726:	4b22      	ldr	r3, [pc, #136]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005732:	491f      	ldr	r1, [pc, #124]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005734:	4313      	orrs	r3, r2
 8005736:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00d      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005744:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800574a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800574e:	6113      	str	r3, [r2, #16]
 8005750:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800575a:	4915      	ldr	r1, [pc, #84]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	da08      	bge.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005768:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005774:	490e      	ldr	r1, [pc, #56]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005776:	4313      	orrs	r3, r2
 8005778:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005794:	4906      	ldr	r1, [pc, #24]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8005796:	4313      	orrs	r3, r2
 8005798:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800579a:	7dbb      	ldrb	r3, [r7, #22]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e000      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	58024400 	.word	0x58024400

080057b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b090      	sub	sp, #64	; 0x40
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c2:	f040 8095 	bne.w	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80057c6:	4bae      	ldr	r3, [pc, #696]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	f200 8088 	bhi.w	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f5 	.word	0x080057f5
 80057e4:	0800581d 	.word	0x0800581d
 80057e8:	08005845 	.word	0x08005845
 80057ec:	080058e1 	.word	0x080058e1
 80057f0:	0800586d 	.word	0x0800586d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057f4:	4ba2      	ldr	r3, [pc, #648]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005800:	d108      	bne.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005806:	4618      	mov	r0, r3
 8005808:	f000 ff64 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005810:	f000 bc95 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005818:	f000 bc91 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800581c:	4b98      	ldr	r3, [pc, #608]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005828:	d108      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800582a:	f107 0318 	add.w	r3, r7, #24
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fca8 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005838:	f000 bc81 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005840:	f000 bc7d 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005844:	4b8e      	ldr	r3, [pc, #568]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800584c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005850:	d108      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005852:	f107 030c 	add.w	r3, r7, #12
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fde8 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005860:	f000 bc6d 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005868:	f000 bc69 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800586c:	4b84      	ldr	r3, [pc, #528]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005874:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005876:	4b82      	ldr	r3, [pc, #520]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b04      	cmp	r3, #4
 8005880:	d10c      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005888:	4b7d      	ldr	r3, [pc, #500]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	08db      	lsrs	r3, r3, #3
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	4a7c      	ldr	r2, [pc, #496]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800589a:	e01f      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800589c:	4b78      	ldr	r3, [pc, #480]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a8:	d106      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b0:	d102      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058b2:	4b75      	ldr	r3, [pc, #468]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b6:	e011      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058b8:	4b71      	ldr	r3, [pc, #452]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058c4:	d106      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058cc:	d102      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80058ce:	4b6f      	ldr	r3, [pc, #444]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d2:	e003      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80058d8:	f000 bc31 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80058dc:	f000 bc2f 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80058e0:	4b6b      	ldr	r3, [pc, #428]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e4:	f000 bc2b 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ec:	f000 bc27 	b.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f6:	f040 8095 	bne.w	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80058fa:	4b61      	ldr	r3, [pc, #388]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005902:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d04d      	beq.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005912:	f200 8084 	bhi.w	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	2bc0      	cmp	r3, #192	; 0xc0
 800591a:	d07d      	beq.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	2bc0      	cmp	r3, #192	; 0xc0
 8005920:	d87d      	bhi.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d02d      	beq.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d877      	bhi.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	2b40      	cmp	r3, #64	; 0x40
 8005938:	d012      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800593a:	e070      	b.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800593c:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005948:	d107      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800594a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fec0 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005958:	e3f1      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800595e:	e3ee      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005960:	4b47      	ldr	r3, [pc, #284]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800596c:	d107      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800596e:	f107 0318 	add.w	r3, r7, #24
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fc06 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800597c:	e3df      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005982:	e3dc      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005984:	4b3e      	ldr	r3, [pc, #248]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800598c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005990:	d107      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005992:	f107 030c 	add.w	r3, r7, #12
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fd48 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059a0:	e3cd      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059a6:	e3ca      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059a8:	4b35      	ldr	r3, [pc, #212]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059b2:	4b33      	ldr	r3, [pc, #204]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d10c      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80059be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059c4:	4b2e      	ldr	r3, [pc, #184]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	08db      	lsrs	r3, r3, #3
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	4a2d      	ldr	r2, [pc, #180]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d6:	e01e      	b.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059d8:	4b29      	ldr	r3, [pc, #164]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e4:	d106      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ec:	d102      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80059ee:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f2:	e010      	b.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059f4:	4b22      	ldr	r3, [pc, #136]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a00:	d106      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a08:	d102      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a0a:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0e:	e002      	b.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a14:	e393      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a16:	e392      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a18:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a1c:	e38f      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a22:	e38c      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2a:	f040 80a7 	bne.w	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005a2e:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a32:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005a36:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a3e:	d05f      	beq.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a46:	f200 8096 	bhi.w	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a50:	f000 808e 	beq.w	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a5a:	f200 808c 	bhi.w	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a64:	d03a      	beq.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6c:	f200 8083 	bhi.w	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00e      	beq.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a7c:	d01c      	beq.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005a7e:	e07a      	b.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005a80:	58024400 	.word	0x58024400
 8005a84:	03d09000 	.word	0x03d09000
 8005a88:	003d0900 	.word	0x003d0900
 8005a8c:	017d7840 	.word	0x017d7840
 8005a90:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a94:	4baa      	ldr	r3, [pc, #680]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aa0:	d107      	bne.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fe14 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ab0:	e345      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab6:	e342      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ab8:	4ba1      	ldr	r3, [pc, #644]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ac6:	f107 0318 	add.w	r3, r7, #24
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fb5a 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ad4:	e333      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ada:	e330      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005adc:	4b98      	ldr	r3, [pc, #608]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae8:	d107      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aea:	f107 030c 	add.w	r3, r7, #12
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fc9c 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005af8:	e321      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005afe:	e31e      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b00:	4b8f      	ldr	r3, [pc, #572]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b0a:	4b8d      	ldr	r3, [pc, #564]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d10c      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b1c:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	08db      	lsrs	r3, r3, #3
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	4a87      	ldr	r2, [pc, #540]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b2e:	e01e      	b.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b30:	4b83      	ldr	r3, [pc, #524]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3c:	d106      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b44:	d102      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b46:	4b80      	ldr	r3, [pc, #512]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b4a:	e010      	b.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b4c:	4b7c      	ldr	r3, [pc, #496]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b58:	d106      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b60:	d102      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005b62:	4b7a      	ldr	r3, [pc, #488]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b66:	e002      	b.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005b6c:	e2e7      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005b6e:	e2e6      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b70:	4b77      	ldr	r3, [pc, #476]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b74:	e2e3      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b7a:	e2e0      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b82:	f040 809c 	bne.w	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005b86:	4b6e      	ldr	r3, [pc, #440]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005b8e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b96:	d054      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b9e:	f200 808b 	bhi.w	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ba8:	f000 8083 	beq.w	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bb2:	f200 8081 	bhi.w	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bbc:	d02f      	beq.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bc4:	d878      	bhi.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bd2:	d012      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005bd4:	e070      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bd6:	4b5a      	ldr	r3, [pc, #360]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fd73 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bf2:	e2a4      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bf8:	e2a1      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bfa:	4b51      	ldr	r3, [pc, #324]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c06:	d107      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c08:	f107 0318 	add.w	r3, r7, #24
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fab9 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005c16:	e292      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c1c:	e28f      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c1e:	4b48      	ldr	r3, [pc, #288]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c2a:	d107      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c2c:	f107 030c 	add.w	r3, r7, #12
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fbfb 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c3a:	e280      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c40:	e27d      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c42:	4b3f      	ldr	r3, [pc, #252]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c4c:	4b3c      	ldr	r3, [pc, #240]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d10c      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c5e:	4b38      	ldr	r3, [pc, #224]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	08db      	lsrs	r3, r3, #3
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	4a36      	ldr	r2, [pc, #216]	; (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c70:	e01e      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c72:	4b33      	ldr	r3, [pc, #204]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7e:	d106      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c86:	d102      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005c88:	4b2f      	ldr	r3, [pc, #188]	; (8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8c:	e010      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c8e:	4b2c      	ldr	r3, [pc, #176]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c9a:	d106      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca2:	d102      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005ca4:	4b29      	ldr	r3, [pc, #164]	; (8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca8:	e002      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005cae:	e246      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005cb0:	e245      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cb2:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cb6:	e242      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cbc:	e23f      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc4:	f040 80a8 	bne.w	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005cc8:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ccc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd8:	d060      	beq.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ce0:	f200 8097 	bhi.w	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cea:	f000 808f 	beq.w	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cf4:	f200 808d 	bhi.w	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfe:	d03b      	beq.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d06:	f200 8084 	bhi.w	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d16:	d01d      	beq.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005d18:	e07b      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d26:	d107      	bne.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fcd1 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d36:	e202      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d3c:	e1ff      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d3e:	bf00      	nop
 8005d40:	58024400 	.word	0x58024400
 8005d44:	03d09000 	.word	0x03d09000
 8005d48:	003d0900 	.word	0x003d0900
 8005d4c:	017d7840 	.word	0x017d7840
 8005d50:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d54:	4ba3      	ldr	r3, [pc, #652]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d60:	d107      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d62:	f107 0318 	add.w	r3, r7, #24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fa0c 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d70:	e1e5      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d76:	e1e2      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d78:	4b9a      	ldr	r3, [pc, #616]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d84:	d107      	bne.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fb4e 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d94:	e1d3      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d9a:	e1d0      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d9c:	4b91      	ldr	r3, [pc, #580]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005da6:	4b8f      	ldr	r3, [pc, #572]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d10c      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005db8:	4b8a      	ldr	r3, [pc, #552]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	08db      	lsrs	r3, r3, #3
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	4a89      	ldr	r2, [pc, #548]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dca:	e01e      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dcc:	4b85      	ldr	r3, [pc, #532]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd8:	d106      	bne.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de0:	d102      	bne.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005de2:	4b82      	ldr	r3, [pc, #520]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de6:	e010      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005de8:	4b7e      	ldr	r3, [pc, #504]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df4:	d106      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfc:	d102      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005dfe:	4b7c      	ldr	r3, [pc, #496]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e02:	e002      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e08:	e199      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e0a:	e198      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e0c:	4b79      	ldr	r3, [pc, #484]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e10:	e195      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e16:	e192      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e1e:	d173      	bne.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005e20:	4b70      	ldr	r3, [pc, #448]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e30:	d02f      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e38:	d863      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e46:	d012      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005e48:	e05b      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e4a:	4b66      	ldr	r3, [pc, #408]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e56:	d107      	bne.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e58:	f107 0318 	add.w	r3, r7, #24
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 f991 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e66:	e16a      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e6c:	e167      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e6e:	4b5d      	ldr	r3, [pc, #372]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7a:	d107      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e7c:	f107 030c 	add.w	r3, r7, #12
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fad3 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e8a:	e158      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e90:	e155      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e92:	4b54      	ldr	r3, [pc, #336]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e9c:	4b51      	ldr	r3, [pc, #324]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d10c      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eae:	4b4d      	ldr	r3, [pc, #308]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	4a4b      	ldr	r2, [pc, #300]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005eba:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec0:	e01e      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ec2:	4b48      	ldr	r3, [pc, #288]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ece:	d106      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ed6:	d102      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005ed8:	4b44      	ldr	r3, [pc, #272]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005edc:	e010      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ede:	4b41      	ldr	r3, [pc, #260]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eea:	d106      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef2:	d102      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005ef4:	4b3e      	ldr	r3, [pc, #248]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef8:	e002      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005efe:	e11e      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005f00:	e11d      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f06:	e11a      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0e:	d133      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005f10:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d004      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f26:	d012      	beq.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005f28:	e023      	b.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f2a:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f36:	d107      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fbc9 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f46:	e0fa      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f4c:	e0f7      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f4e:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f5a:	d107      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f5c:	f107 0318 	add.w	r3, r7, #24
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 f90f 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f6a:	e0e8      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f70:	e0e5      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f76:	e0e2      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f7e:	f040 808f 	bne.w	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005f82:	4b18      	ldr	r3, [pc, #96]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f86:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005f8a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f92:	d075      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f9a:	d87e      	bhi.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa2:	d060      	beq.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005faa:	d876      	bhi.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fb2:	d045      	beq.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fba:	d86e      	bhi.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc2:	d02b      	beq.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fca:	d866      	bhi.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005fda:	e05e      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005fdc:	f000 f8bc 	bl	8006158 <HAL_RCCEx_GetD3PCLK1Freq>
 8005fe0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005fe2:	e0ac      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	03d09000 	.word	0x03d09000
 8005fec:	003d0900 	.word	0x003d0900
 8005ff0:	017d7840 	.word	0x017d7840
 8005ff4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ff8:	4b53      	ldr	r3, [pc, #332]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006004:	d107      	bne.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006006:	f107 0318 	add.w	r3, r7, #24
 800600a:	4618      	mov	r0, r3
 800600c:	f000 f8ba 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006014:	e093      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800601a:	e090      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800601c:	4b4a      	ldr	r3, [pc, #296]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006028:	d107      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800602a:	f107 030c 	add.w	r3, r7, #12
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f9fc 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006038:	e081      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800603e:	e07e      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006040:	4b41      	ldr	r3, [pc, #260]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b04      	cmp	r3, #4
 800604a:	d109      	bne.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800604c:	4b3e      	ldr	r3, [pc, #248]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	08db      	lsrs	r3, r3, #3
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	4a3d      	ldr	r2, [pc, #244]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800605e:	e06e      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006064:	e06b      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006066:	4b38      	ldr	r3, [pc, #224]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006072:	d102      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006074:	4b36      	ldr	r3, [pc, #216]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006078:	e061      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800607e:	e05e      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006080:	4b31      	ldr	r3, [pc, #196]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800608c:	d102      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800608e:	4b31      	ldr	r3, [pc, #196]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006092:	e054      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006098:	e051      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800609e:	e04e      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a6:	d148      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80060a8:	4b27      	ldr	r3, [pc, #156]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b8:	d02a      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c0:	d838      	bhi.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ce:	d00d      	beq.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80060d0:	e030      	b.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060d2:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060de:	d102      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80060e0:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80060e4:	e02b      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060ea:	e028      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060ec:	4b16      	ldr	r3, [pc, #88]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060f8:	d107      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fae8 	bl	80066d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006108:	e019      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800610e:	e016      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006110:	4b0d      	ldr	r3, [pc, #52]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800611c:	d107      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800611e:	f107 0318 	add.w	r3, r7, #24
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f82e 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800612c:	e007      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006132:	e004      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006134:	2300      	movs	r3, #0
 8006136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006138:	e001      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006140:	4618      	mov	r0, r3
 8006142:	3740      	adds	r7, #64	; 0x40
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	58024400 	.word	0x58024400
 800614c:	03d09000 	.word	0x03d09000
 8006150:	003d0900 	.word	0x003d0900
 8006154:	017d7840 	.word	0x017d7840

08006158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800615c:	f7fe fb1c 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4904      	ldr	r1, [pc, #16]	; (8006180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800616e:	5ccb      	ldrb	r3, [r1, r3]
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	58024400 	.word	0x58024400
 8006180:	0800e0a0 	.word	0x0800e0a0

08006184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006184:	b480      	push	{r7}
 8006186:	b089      	sub	sp, #36	; 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800618c:	4ba1      	ldr	r3, [pc, #644]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006196:	4b9f      	ldr	r3, [pc, #636]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	0b1b      	lsrs	r3, r3, #12
 800619c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061a2:	4b9c      	ldr	r3, [pc, #624]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	091b      	lsrs	r3, r3, #4
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80061ae:	4b99      	ldr	r3, [pc, #612]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	08db      	lsrs	r3, r3, #3
 80061b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8111 	beq.w	80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	f000 8083 	beq.w	80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	f200 80a1 	bhi.w	8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d056      	beq.n	800629c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80061ee:	e099      	b.n	8006324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f0:	4b88      	ldr	r3, [pc, #544]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02d      	beq.n	8006258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061fc:	4b85      	ldr	r3, [pc, #532]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	08db      	lsrs	r3, r3, #3
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	4a84      	ldr	r2, [pc, #528]	; (8006418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006208:	fa22 f303 	lsr.w	r3, r2, r3
 800620c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006226:	4b7b      	ldr	r3, [pc, #492]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006236:	ed97 6a03 	vldr	s12, [r7, #12]
 800623a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800623e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800624a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006252:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006256:	e087      	b.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006262:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626a:	4b6a      	ldr	r3, [pc, #424]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627a:	ed97 6a03 	vldr	s12, [r7, #12]
 800627e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800628e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800629a:	e065      	b.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ae:	4b59      	ldr	r3, [pc, #356]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062be:	ed97 6a03 	vldr	s12, [r7, #12]
 80062c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062de:	e043      	b.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80062ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f2:	4b48      	ldr	r3, [pc, #288]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006302:	ed97 6a03 	vldr	s12, [r7, #12]
 8006306:	eddf 5a45 	vldr	s11, [pc, #276]	; 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800630a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006322:	e021      	b.n	8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006336:	4b37      	ldr	r3, [pc, #220]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006346:	ed97 6a03 	vldr	s12, [r7, #12]
 800634a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800641c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800634e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800635a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006368:	4b2a      	ldr	r3, [pc, #168]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	0a5b      	lsrs	r3, r3, #9
 800636e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800637e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006382:	edd7 6a07 	vldr	s13, [r7, #28]
 8006386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800638a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800638e:	ee17 2a90 	vmov	r2, s15
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006396:	4b1f      	ldr	r3, [pc, #124]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	0c1b      	lsrs	r3, r3, #16
 800639c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a0:	ee07 3a90 	vmov	s15, r3
 80063a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063bc:	ee17 2a90 	vmov	r2, s15
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80063c4:	4b13      	ldr	r3, [pc, #76]	; (8006414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	0e1b      	lsrs	r3, r3, #24
 80063ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063de:	edd7 6a07 	vldr	s13, [r7, #28]
 80063e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ea:	ee17 2a90 	vmov	r2, s15
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063f2:	e008      	b.n	8006406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	609a      	str	r2, [r3, #8]
}
 8006406:	bf00      	nop
 8006408:	3724      	adds	r7, #36	; 0x24
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	58024400 	.word	0x58024400
 8006418:	03d09000 	.word	0x03d09000
 800641c:	46000000 	.word	0x46000000
 8006420:	4c742400 	.word	0x4c742400
 8006424:	4a742400 	.word	0x4a742400
 8006428:	4bbebc20 	.word	0x4bbebc20

0800642c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800642c:	b480      	push	{r7}
 800642e:	b089      	sub	sp, #36	; 0x24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006434:	4ba1      	ldr	r3, [pc, #644]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800643e:	4b9f      	ldr	r3, [pc, #636]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	0d1b      	lsrs	r3, r3, #20
 8006444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800644a:	4b9c      	ldr	r3, [pc, #624]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	0a1b      	lsrs	r3, r3, #8
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006456:	4b99      	ldr	r3, [pc, #612]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	08db      	lsrs	r3, r3, #3
 800645c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8111 	beq.w	800669c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b02      	cmp	r3, #2
 800647e:	f000 8083 	beq.w	8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b02      	cmp	r3, #2
 8006486:	f200 80a1 	bhi.w	80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d056      	beq.n	8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006496:	e099      	b.n	80065cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006498:	4b88      	ldr	r3, [pc, #544]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d02d      	beq.n	8006500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064a4:	4b85      	ldr	r3, [pc, #532]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	08db      	lsrs	r3, r3, #3
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	4a84      	ldr	r2, [pc, #528]	; (80066c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
 80064b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ce:	4b7b      	ldr	r3, [pc, #492]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064de:	ed97 6a03 	vldr	s12, [r7, #12]
 80064e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80064fe:	e087      	b.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80066c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800650e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006512:	4b6a      	ldr	r3, [pc, #424]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006522:	ed97 6a03 	vldr	s12, [r7, #12]
 8006526:	eddf 5a67 	vldr	s11, [pc, #412]	; 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800652a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006542:	e065      	b.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006556:	4b59      	ldr	r3, [pc, #356]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006566:	ed97 6a03 	vldr	s12, [r7, #12]
 800656a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800656e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800657a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006586:	e043      	b.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	ee07 3a90 	vmov	s15, r3
 800658e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006592:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800659a:	4b48      	ldr	r3, [pc, #288]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065ca:	e021      	b.n	8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065de:	4b37      	ldr	r3, [pc, #220]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800660e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006610:	4b2a      	ldr	r3, [pc, #168]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	0a5b      	lsrs	r3, r3, #9
 8006616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800662a:	edd7 6a07 	vldr	s13, [r7, #28]
 800662e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006636:	ee17 2a90 	vmov	r2, s15
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800663e:	4b1f      	ldr	r3, [pc, #124]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	0c1b      	lsrs	r3, r3, #16
 8006644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006648:	ee07 3a90 	vmov	s15, r3
 800664c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006658:	edd7 6a07 	vldr	s13, [r7, #28]
 800665c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006664:	ee17 2a90 	vmov	r2, s15
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800666c:	4b13      	ldr	r3, [pc, #76]	; (80066bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	0e1b      	lsrs	r3, r3, #24
 8006672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006686:	edd7 6a07 	vldr	s13, [r7, #28]
 800668a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800668e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006692:	ee17 2a90 	vmov	r2, s15
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800669a:	e008      	b.n	80066ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]
}
 80066ae:	bf00      	nop
 80066b0:	3724      	adds	r7, #36	; 0x24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	58024400 	.word	0x58024400
 80066c0:	03d09000 	.word	0x03d09000
 80066c4:	46000000 	.word	0x46000000
 80066c8:	4c742400 	.word	0x4c742400
 80066cc:	4a742400 	.word	0x4a742400
 80066d0:	4bbebc20 	.word	0x4bbebc20

080066d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	; 0x24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066dc:	4ba0      	ldr	r3, [pc, #640]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80066e6:	4b9e      	ldr	r3, [pc, #632]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80066f2:	4b9b      	ldr	r3, [pc, #620]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80066fc:	4b98      	ldr	r3, [pc, #608]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	08db      	lsrs	r3, r3, #3
 8006702:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	fb02 f303 	mul.w	r3, r2, r3
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006714:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8111 	beq.w	8006942 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b02      	cmp	r3, #2
 8006724:	f000 8083 	beq.w	800682e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	2b02      	cmp	r3, #2
 800672c:	f200 80a1 	bhi.w	8006872 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d056      	beq.n	80067ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800673c:	e099      	b.n	8006872 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800673e:	4b88      	ldr	r3, [pc, #544]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d02d      	beq.n	80067a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800674a:	4b85      	ldr	r3, [pc, #532]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	08db      	lsrs	r3, r3, #3
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	4a83      	ldr	r2, [pc, #524]	; (8006964 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006756:	fa22 f303 	lsr.w	r3, r2, r3
 800675a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	ee07 3a90 	vmov	s15, r3
 800676c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006774:	4b7a      	ldr	r3, [pc, #488]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006784:	ed97 6a03 	vldr	s12, [r7, #12]
 8006788:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800678c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067a4:	e087      	b.n	80068b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800696c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80067b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b8:	4b69      	ldr	r3, [pc, #420]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c0:	ee07 3a90 	vmov	s15, r3
 80067c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80067cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067e8:	e065      	b.n	80068b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006970 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80067f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fc:	4b58      	ldr	r3, [pc, #352]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006810:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006828:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800682c:	e043      	b.n	80068b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	ee07 3a90 	vmov	s15, r3
 8006834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006838:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006974 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800683c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006840:	4b47      	ldr	r3, [pc, #284]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006850:	ed97 6a03 	vldr	s12, [r7, #12]
 8006854:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006870:	e021      	b.n	80068b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	ee07 3a90 	vmov	s15, r3
 8006878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800696c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006884:	4b36      	ldr	r3, [pc, #216]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688c:	ee07 3a90 	vmov	s15, r3
 8006890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006894:	ed97 6a03 	vldr	s12, [r7, #12]
 8006898:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800689c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80068b6:	4b2a      	ldr	r3, [pc, #168]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	0a5b      	lsrs	r3, r3, #9
 80068bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068dc:	ee17 2a90 	vmov	r2, s15
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80068e4:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	0c1b      	lsrs	r3, r3, #16
 80068ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800690a:	ee17 2a90 	vmov	r2, s15
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	0e1b      	lsrs	r3, r3, #24
 8006918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800692c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006938:	ee17 2a90 	vmov	r2, s15
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006940:	e008      	b.n	8006954 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	609a      	str	r2, [r3, #8]
}
 8006954:	bf00      	nop
 8006956:	3724      	adds	r7, #36	; 0x24
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	58024400 	.word	0x58024400
 8006964:	03d09000 	.word	0x03d09000
 8006968:	46000000 	.word	0x46000000
 800696c:	4c742400 	.word	0x4c742400
 8006970:	4a742400 	.word	0x4a742400
 8006974:	4bbebc20 	.word	0x4bbebc20

08006978 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006986:	4b53      	ldr	r3, [pc, #332]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b03      	cmp	r3, #3
 8006990:	d101      	bne.n	8006996 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e099      	b.n	8006aca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006996:	4b4f      	ldr	r3, [pc, #316]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a4e      	ldr	r2, [pc, #312]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 800699c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a2:	f7fb fa85 	bl	8001eb0 <HAL_GetTick>
 80069a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069a8:	e008      	b.n	80069bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80069aa:	f7fb fa81 	bl	8001eb0 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e086      	b.n	8006aca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069bc:	4b45      	ldr	r3, [pc, #276]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f0      	bne.n	80069aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069c8:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	031b      	lsls	r3, r3, #12
 80069d6:	493f      	ldr	r1, [pc, #252]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	628b      	str	r3, [r1, #40]	; 0x28
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	025b      	lsls	r3, r3, #9
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	061b      	lsls	r3, r3, #24
 8006a08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a0c:	4931      	ldr	r1, [pc, #196]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a12:	4b30      	ldr	r3, [pc, #192]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	492d      	ldr	r1, [pc, #180]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a24:	4b2b      	ldr	r3, [pc, #172]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	f023 0220 	bic.w	r2, r3, #32
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	4928      	ldr	r1, [pc, #160]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a36:	4b27      	ldr	r3, [pc, #156]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	4a26      	ldr	r2, [pc, #152]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a3c:	f023 0310 	bic.w	r3, r3, #16
 8006a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a42:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a46:	4b24      	ldr	r3, [pc, #144]	; (8006ad8 <RCCEx_PLL2_Config+0x160>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	69d2      	ldr	r2, [r2, #28]
 8006a4e:	00d2      	lsls	r2, r2, #3
 8006a50:	4920      	ldr	r1, [pc, #128]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a56:	4b1f      	ldr	r3, [pc, #124]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a5c:	f043 0310 	orr.w	r3, r3, #16
 8006a60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a68:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a74:	e00f      	b.n	8006a96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d106      	bne.n	8006a8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a7c:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	4a14      	ldr	r2, [pc, #80]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a88:	e005      	b.n	8006a96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a8a:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	4a11      	ldr	r2, [pc, #68]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a96:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a0e      	ldr	r2, [pc, #56]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006a9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa2:	f7fb fa05 	bl	8001eb0 <HAL_GetTick>
 8006aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006aa8:	e008      	b.n	8006abc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006aaa:	f7fb fa01 	bl	8001eb0 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e006      	b.n	8006aca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <RCCEx_PLL2_Config+0x15c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	ffff0007 	.word	0xffff0007

08006adc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006aea:	4b53      	ldr	r3, [pc, #332]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d101      	bne.n	8006afa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e099      	b.n	8006c2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006afa:	4b4f      	ldr	r3, [pc, #316]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a4e      	ldr	r2, [pc, #312]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b06:	f7fb f9d3 	bl	8001eb0 <HAL_GetTick>
 8006b0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b0c:	e008      	b.n	8006b20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b0e:	f7fb f9cf 	bl	8001eb0 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e086      	b.n	8006c2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b20:	4b45      	ldr	r3, [pc, #276]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f0      	bne.n	8006b0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b2c:	4b42      	ldr	r3, [pc, #264]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	051b      	lsls	r3, r3, #20
 8006b3a:	493f      	ldr	r1, [pc, #252]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	628b      	str	r3, [r1, #40]	; 0x28
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	025b      	lsls	r3, r3, #9
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	041b      	lsls	r3, r3, #16
 8006b5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	061b      	lsls	r3, r3, #24
 8006b6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b70:	4931      	ldr	r1, [pc, #196]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b76:	4b30      	ldr	r3, [pc, #192]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	492d      	ldr	r1, [pc, #180]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b88:	4b2b      	ldr	r3, [pc, #172]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	4928      	ldr	r1, [pc, #160]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b9a:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	4a26      	ldr	r2, [pc, #152]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ba6:	4b24      	ldr	r3, [pc, #144]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006baa:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <RCCEx_PLL3_Config+0x160>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	69d2      	ldr	r2, [r2, #28]
 8006bb2:	00d2      	lsls	r2, r2, #3
 8006bb4:	4920      	ldr	r1, [pc, #128]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006bba:	4b1f      	ldr	r3, [pc, #124]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	4a1e      	ldr	r2, [pc, #120]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006bcc:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	4a19      	ldr	r2, [pc, #100]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bd8:	e00f      	b.n	8006bfa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d106      	bne.n	8006bee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006be0:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	4a14      	ldr	r2, [pc, #80]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006be6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bec:	e005      	b.n	8006bfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006bee:	4b12      	ldr	r3, [pc, #72]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf2:	4a11      	ldr	r2, [pc, #68]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a0e      	ldr	r2, [pc, #56]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c06:	f7fb f953 	bl	8001eb0 <HAL_GetTick>
 8006c0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c0c:	e008      	b.n	8006c20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c0e:	f7fb f94f 	bl	8001eb0 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e006      	b.n	8006c2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <RCCEx_PLL3_Config+0x15c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0f0      	beq.n	8006c0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	58024400 	.word	0x58024400
 8006c3c:	ffff0007 	.word	0xffff0007

08006c40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d067      	beq.n	8006d22 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fa fd3a 	bl	80016e0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	22ca      	movs	r2, #202	; 0xca
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2253      	movs	r2, #83	; 0x53
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f99f 	bl	8006fc8 <RTC_EnterInitMode>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d13b      	bne.n	8006d0c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6899      	ldr	r1, [r3, #8]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b23      	ldr	r3, [pc, #140]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006ca0:	400b      	ands	r3, r1
 8006ca2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6899      	ldr	r1, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	0419      	lsls	r1, r3, #16
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f9a7 	bl	8007028 <RTC_ExitInitMode>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d113      	bne.n	8006d0c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0203 	bic.w	r2, r2, #3
 8006cf2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69da      	ldr	r2, [r3, #28]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	22ff      	movs	r2, #255	; 0xff
 8006d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	ff8fffbf 	.word	0xff8fffbf

08006d30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d30:	b590      	push	{r4, r7, lr}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_RTC_SetTime+0x1a>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e089      	b.n	8006e5e <HAL_RTC_SetTime+0x12e>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	22ca      	movs	r2, #202	; 0xca
 8006d60:	625a      	str	r2, [r3, #36]	; 0x24
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2253      	movs	r2, #83	; 0x53
 8006d68:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 f92c 	bl	8006fc8 <RTC_EnterInitMode>
 8006d70:	4603      	mov	r3, r0
 8006d72:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006d74:	7cfb      	ldrb	r3, [r7, #19]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d161      	bne.n	8006e3e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d126      	bne.n	8006dce <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f983 	bl	80070a4 <RTC_ByteToBcd2>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f97c 	bl	80070a4 <RTC_ByteToBcd2>
 8006dac:	4603      	mov	r3, r0
 8006dae:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006db0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	789b      	ldrb	r3, [r3, #2]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f974 	bl	80070a4 <RTC_ByteToBcd2>
 8006dbc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006dbe:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	78db      	ldrb	r3, [r3, #3]
 8006dc6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	e018      	b.n	8006e00 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2200      	movs	r2, #0
 8006de0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006dee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006df4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	78db      	ldrb	r3, [r3, #3]
 8006dfa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	6979      	ldr	r1, [r7, #20]
 8006e06:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <HAL_RTC_SetTime+0x138>)
 8006e08:	400b      	ands	r3, r1
 8006e0a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6899      	ldr	r1, [r3, #8]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f8f7 	bl	8007028 <RTC_ExitInitMode>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	22ff      	movs	r2, #255	; 0xff
 8006e44:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006e46:	7cfb      	ldrb	r3, [r7, #19]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d103      	bne.n	8006e54 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006e5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd90      	pop	{r4, r7, pc}
 8006e66:	bf00      	nop
 8006e68:	007f7f7f 	.word	0x007f7f7f

08006e6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e6c:	b590      	push	{r4, r7, lr}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <HAL_RTC_SetDate+0x1a>
 8006e82:	2302      	movs	r3, #2
 8006e84:	e073      	b.n	8006f6e <HAL_RTC_SetDate+0x102>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2202      	movs	r2, #2
 8006e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10e      	bne.n	8006eba <HAL_RTC_SetDate+0x4e>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	785b      	ldrb	r3, [r3, #1]
 8006eac:	f023 0310 	bic.w	r3, r3, #16
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	330a      	adds	r3, #10
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d11c      	bne.n	8006efa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	78db      	ldrb	r3, [r3, #3]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 f8ed 	bl	80070a4 <RTC_ByteToBcd2>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 f8e6 	bl	80070a4 <RTC_ByteToBcd2>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006edc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	789b      	ldrb	r3, [r3, #2]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f8de 	bl	80070a4 <RTC_ByteToBcd2>
 8006ee8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006eea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e00e      	b.n	8006f18 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	78db      	ldrb	r3, [r3, #3]
 8006efe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f06:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006f0c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	22ca      	movs	r2, #202	; 0xca
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2253      	movs	r2, #83	; 0x53
 8006f26:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 f84d 	bl	8006fc8 <RTC_EnterInitMode>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006f32:	7cfb      	ldrb	r3, [r7, #19]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	6979      	ldr	r1, [r7, #20]
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <HAL_RTC_SetDate+0x10c>)
 8006f40:	400b      	ands	r3, r1
 8006f42:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f86f 	bl	8007028 <RTC_ExitInitMode>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	22ff      	movs	r2, #255	; 0xff
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006f56:	7cfb      	ldrb	r3, [r7, #19]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006f6c:	7cfb      	ldrb	r3, [r7, #19]


}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd90      	pop	{r4, r7, pc}
 8006f76:	bf00      	nop
 8006f78:	00ffff3f 	.word	0x00ffff3f

08006f7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f92:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8006f94:	f7fa ff8c 	bl	8001eb0 <HAL_GetTick>
 8006f98:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f9a:	e009      	b.n	8006fb0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f9c:	f7fa ff88 	bl	8001eb0 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006faa:	d901      	bls.n	8006fb0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e007      	b.n	8006fc0 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0ee      	beq.n	8006f9c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d11d      	bne.n	800701e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006fec:	f7fa ff60 	bl	8001eb0 <HAL_GetTick>
 8006ff0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ff2:	e00d      	b.n	8007010 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ff4:	f7fa ff5c 	bl	8001eb0 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007002:	d905      	bls.n	8007010 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2203      	movs	r2, #3
 800700c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0ea      	beq.n	8006ff4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007034:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <RTC_ExitInitMode+0x78>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	4a19      	ldr	r2, [pc, #100]	; (80070a0 <RTC_ExitInitMode+0x78>)
 800703a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007040:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <RTC_ExitInitMode+0x78>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10c      	bne.n	8007066 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff ff95 	bl	8006f7c <HAL_RTC_WaitForSynchro>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01e      	beq.n	8007096 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2203      	movs	r2, #3
 800705c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	73fb      	strb	r3, [r7, #15]
 8007064:	e017      	b.n	8007096 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007066:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <RTC_ExitInitMode+0x78>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	4a0d      	ldr	r2, [pc, #52]	; (80070a0 <RTC_ExitInitMode+0x78>)
 800706c:	f023 0320 	bic.w	r3, r3, #32
 8007070:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff ff82 	bl	8006f7c <HAL_RTC_WaitForSynchro>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2203      	movs	r2, #3
 8007082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <RTC_ExitInitMode+0x78>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	4a04      	ldr	r2, [pc, #16]	; (80070a0 <RTC_ExitInitMode+0x78>)
 8007090:	f043 0320 	orr.w	r3, r3, #32
 8007094:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	58004000 	.word	0x58004000

080070a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80070b6:	e005      	b.n	80070c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	3b0a      	subs	r3, #10
 80070c2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80070c4:	7afb      	ldrb	r3, [r7, #11]
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d8f6      	bhi.n	80070b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	b2db      	uxtb	r3, r3
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	; 0x28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e07c      	b.n	80071f0 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10c      	bne.n	800711c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fa fb12 	bl	8001740 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2203      	movs	r2, #3
 8007120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f867 	bl	80071f8 <HAL_SD_InitCard>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e05d      	b.n	80071f0 <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007134:	f107 0308 	add.w	r3, r7, #8
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fbfe 	bl	800793c <HAL_SD_GetCardStatus>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e052      	b.n	80071f0 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800714a:	7e3b      	ldrb	r3, [r7, #24]
 800714c:	b2db      	uxtb	r3, r3
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007150:	7e7b      	ldrb	r3, [r7, #25]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	2b01      	cmp	r3, #1
 800715c:	d10a      	bne.n	8007174 <HAL_SD_Init+0x90>
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <HAL_SD_Init+0x86>
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007170:	65da      	str	r2, [r3, #92]	; 0x5c
 8007172:	e00b      	b.n	800718c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d104      	bne.n	8007186 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007182:	65da      	str	r2, [r3, #92]	; 0x5c
 8007184:	e002      	b.n	800718c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fcb4 	bl	8007b00 <HAL_SD_ConfigWideBusOperation>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e026      	b.n	80071f0 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80071a2:	f7fa fe85 	bl	8001eb0 <HAL_GetTick>
 80071a6:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80071a8:	e011      	b.n	80071ce <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071aa:	f7fa fe81 	bl	8001eb0 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d109      	bne.n	80071ce <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e010      	b.n	80071f0 <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fdaa 	bl	8007d28 <HAL_SD_GetCardState>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d1e7      	bne.n	80071aa <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3728      	adds	r7, #40	; 0x28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80071f8:	b5b0      	push	{r4, r5, r7, lr}
 80071fa:	b08e      	sub	sp, #56	; 0x38
 80071fc:	af04      	add	r7, sp, #16
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007200:	2300      	movs	r3, #0
 8007202:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007208:	2300      	movs	r3, #0
 800720a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007210:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007214:	f7fe face 	bl	80057b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007218:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d109      	bne.n	8007234 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800722e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e079      	b.n	8007328 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	4a3d      	ldr	r2, [pc, #244]	; (8007330 <HAL_SD_InitCard+0x138>)
 800723a:	fba2 2303 	umull	r2, r3, r2, r3
 800723e:	091b      	lsrs	r3, r3, #4
 8007240:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d107      	bne.n	8007260 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0210 	orr.w	r2, r2, #16
 800725e:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681d      	ldr	r5, [r3, #0]
 8007264:	466c      	mov	r4, sp
 8007266:	f107 0314 	add.w	r3, r7, #20
 800726a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800726e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007272:	f107 0308 	add.w	r3, r7, #8
 8007276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007278:	4628      	mov	r0, r5
 800727a:	f003 f87b 	bl	800a374 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f003 f8ad 	bl	800a3e2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007294:	4a27      	ldr	r2, [pc, #156]	; (8007334 <HAL_SD_InitCard+0x13c>)
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	3301      	adds	r3, #1
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fa fe12 	bl	8001ec8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fe1b 	bl	8007ee0 <SD_PowerON>
 80072aa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e02e      	b.n	8007328 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fd4c 	bl	8007d68 <SD_InitCard>
 80072d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e01b      	b.n	8007328 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072f8:	4618      	mov	r0, r3
 80072fa:	f003 f907 	bl	800a50c <SDMMC_CmdBlockLength>
 80072fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00f      	beq.n	8007326 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a0b      	ldr	r2, [pc, #44]	; (8007338 <HAL_SD_InitCard+0x140>)
 800730c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3728      	adds	r7, #40	; 0x28
 800732c:	46bd      	mov	sp, r7
 800732e:	bdb0      	pop	{r4, r5, r7, pc}
 8007330:	014f8b59 	.word	0x014f8b59
 8007334:	00012110 	.word	0x00012110
 8007338:	1fe00fff 	.word	0x1fe00fff

0800733c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08c      	sub	sp, #48	; 0x30
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d107      	bne.n	8007364 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e08d      	b.n	8007480 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b01      	cmp	r3, #1
 800736e:	f040 8086 	bne.w	800747e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	441a      	add	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007382:	429a      	cmp	r2, r3
 8007384:	d907      	bls.n	8007396 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e074      	b.n	8007480 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2203      	movs	r2, #3
 800739a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2200      	movs	r2, #0
 80073a4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	025a      	lsls	r2, r3, #9
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d002      	beq.n	80073c2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	025b      	lsls	r3, r3, #9
 80073c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	025b      	lsls	r3, r3, #9
 80073cc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80073ce:	2390      	movs	r3, #144	; 0x90
 80073d0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073d2:	2302      	movs	r3, #2
 80073d4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80073da:	2300      	movs	r3, #0
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f107 0210 	add.w	r2, r7, #16
 80073e6:	4611      	mov	r1, r2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f003 f863 	bl	800a4b4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073fc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2201      	movs	r2, #1
 800740c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d90a      	bls.n	800742a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2282      	movs	r2, #130	; 0x82
 8007418:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007420:	4618      	mov	r0, r3
 8007422:	f003 f8b9 	bl	800a598 <SDMMC_CmdReadMultiBlock>
 8007426:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007428:	e009      	b.n	800743e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2281      	movs	r2, #129	; 0x81
 800742e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007436:	4618      	mov	r0, r3
 8007438:	f003 f88b 	bl	800a552 <SDMMC_CmdReadSingleBlock>
 800743c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d012      	beq.n	800746a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a0f      	ldr	r2, [pc, #60]	; (8007488 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800744a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	431a      	orrs	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e00a      	b.n	8007480 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007478:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	e000      	b.n	8007480 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800747e:	2302      	movs	r3, #2
  }
}
 8007480:	4618      	mov	r0, r3
 8007482:	3730      	adds	r7, #48	; 0x30
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	1fe00fff 	.word	0x1fe00fff

0800748c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08c      	sub	sp, #48	; 0x30
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d107      	bne.n	80074b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e08d      	b.n	80075d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b01      	cmp	r3, #1
 80074be:	f040 8086 	bne.w	80075ce <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80074c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	441a      	add	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d907      	bls.n	80074e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e074      	b.n	80075d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2203      	movs	r2, #3
 80074ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2200      	movs	r2, #0
 80074f4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	025a      	lsls	r2, r3, #9
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d002      	beq.n	8007512 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	025b      	lsls	r3, r3, #9
 8007510:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007512:	f04f 33ff 	mov.w	r3, #4294967295
 8007516:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	025b      	lsls	r3, r3, #9
 800751c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800751e:	2390      	movs	r3, #144	; 0x90
 8007520:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007526:	2300      	movs	r3, #0
 8007528:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800752a:	2300      	movs	r3, #0
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f107 0210 	add.w	r2, r7, #16
 8007536:	4611      	mov	r1, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f002 ffbb 	bl	800a4b4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800754c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2201      	movs	r2, #1
 800755c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d90a      	bls.n	800757a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	22a0      	movs	r2, #160	; 0xa0
 8007568:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007570:	4618      	mov	r0, r3
 8007572:	f003 f857 	bl	800a624 <SDMMC_CmdWriteMultiBlock>
 8007576:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007578:	e009      	b.n	800758e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2290      	movs	r2, #144	; 0x90
 800757e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007586:	4618      	mov	r0, r3
 8007588:	f003 f829 	bl	800a5de <SDMMC_CmdWriteSingleBlock>
 800758c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d012      	beq.n	80075ba <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a0f      	ldr	r2, [pc, #60]	; (80075d8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800759a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	431a      	orrs	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e00a      	b.n	80075d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80075c8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	e000      	b.n	80075d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80075ce:	2302      	movs	r3, #2
  }
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3730      	adds	r7, #48	; 0x30
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	1fe00fff 	.word	0x1fe00fff

080075dc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007602:	0f9b      	lsrs	r3, r3, #30
 8007604:	b2da      	uxtb	r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800760e:	0e9b      	lsrs	r3, r3, #26
 8007610:	b2db      	uxtb	r3, r3
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	b2da      	uxtb	r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007620:	0e1b      	lsrs	r3, r3, #24
 8007622:	b2db      	uxtb	r3, r3
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	b2da      	uxtb	r2, r3
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	b2da      	uxtb	r2, r3
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800763e:	0a1b      	lsrs	r3, r3, #8
 8007640:	b2da      	uxtb	r2, r3
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800764a:	b2da      	uxtb	r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007654:	0d1b      	lsrs	r3, r3, #20
 8007656:	b29a      	uxth	r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007660:	0c1b      	lsrs	r3, r3, #16
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	b2da      	uxtb	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007672:	0bdb      	lsrs	r3, r3, #15
 8007674:	b2db      	uxtb	r3, r3
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	b2da      	uxtb	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007684:	0b9b      	lsrs	r3, r3, #14
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	b2da      	uxtb	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007696:	0b5b      	lsrs	r3, r3, #13
 8007698:	b2db      	uxtb	r3, r3
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a8:	0b1b      	lsrs	r3, r3, #12
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2200      	movs	r2, #0
 80076ba:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d163      	bne.n	800778c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c8:	009a      	lsls	r2, r3, #2
 80076ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 80076ce:	4013      	ands	r3, r2
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076d4:	0f92      	lsrs	r2, r2, #30
 80076d6:	431a      	orrs	r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e0:	0edb      	lsrs	r3, r3, #27
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f2:	0e1b      	lsrs	r3, r3, #24
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007704:	0d5b      	lsrs	r3, r3, #21
 8007706:	b2db      	uxtb	r3, r3
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	b2da      	uxtb	r2, r3
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007716:	0c9b      	lsrs	r3, r3, #18
 8007718:	b2db      	uxtb	r3, r3
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	b2da      	uxtb	r2, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007728:	0bdb      	lsrs	r3, r3, #15
 800772a:	b2db      	uxtb	r3, r3
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	b2da      	uxtb	r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	7e1b      	ldrb	r3, [r3, #24]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	3302      	adds	r3, #2
 800774c:	2201      	movs	r2, #1
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007756:	fb02 f203 	mul.w	r2, r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	7a1b      	ldrb	r3, [r3, #8]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	2201      	movs	r2, #1
 800776a:	409a      	lsls	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007778:	0a52      	lsrs	r2, r2, #9
 800777a:	fb02 f203 	mul.w	r2, r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007788:	659a      	str	r2, [r3, #88]	; 0x58
 800778a:	e031      	b.n	80077f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d11d      	bne.n	80077d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007798:	041b      	lsls	r3, r3, #16
 800779a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a2:	0c1b      	lsrs	r3, r3, #16
 80077a4:	431a      	orrs	r2, r3
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	3301      	adds	r3, #1
 80077b0:	029a      	lsls	r2, r3, #10
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	659a      	str	r2, [r3, #88]	; 0x58
 80077ce:	e00f      	b.n	80077f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a58      	ldr	r2, [pc, #352]	; (8007938 <HAL_SD_GetCardCSD+0x344>)
 80077d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e09d      	b.n	800792c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f4:	0b9b      	lsrs	r3, r3, #14
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007806:	09db      	lsrs	r3, r3, #7
 8007808:	b2db      	uxtb	r3, r3
 800780a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780e:	b2da      	uxtb	r2, r3
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007818:	b2db      	uxtb	r3, r3
 800781a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781e:	b2da      	uxtb	r2, r3
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007828:	0fdb      	lsrs	r3, r3, #31
 800782a:	b2da      	uxtb	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007834:	0f5b      	lsrs	r3, r3, #29
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	b2da      	uxtb	r2, r3
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007846:	0e9b      	lsrs	r3, r3, #26
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	b2da      	uxtb	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007858:	0d9b      	lsrs	r3, r3, #22
 800785a:	b2db      	uxtb	r3, r3
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	b2da      	uxtb	r2, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800786a:	0d5b      	lsrs	r3, r3, #21
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	b2da      	uxtb	r2, r3
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007886:	0c1b      	lsrs	r3, r3, #16
 8007888:	b2db      	uxtb	r3, r3
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	b2da      	uxtb	r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800789a:	0bdb      	lsrs	r3, r3, #15
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ae:	0b9b      	lsrs	r3, r3, #14
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c2:	0b5b      	lsrs	r3, r3, #13
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d6:	0b1b      	lsrs	r3, r3, #12
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ea:	0a9b      	lsrs	r3, r3, #10
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f003 0303 	and.w	r3, r3, #3
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	b2db      	uxtb	r3, r3
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	b2da      	uxtb	r2, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	b2db      	uxtb	r3, r3
 8007916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791a:	b2da      	uxtb	r2, r3
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	1fe00fff 	.word	0x1fe00fff

0800793c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b094      	sub	sp, #80	; 0x50
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800794c:	f107 0308 	add.w	r3, r7, #8
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fbcc 	bl	80080f0 <SD_SendSDStatus>
 8007958:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800795a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800795c:	2b00      	cmp	r3, #0
 800795e:	d011      	beq.n	8007984 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a4f      	ldr	r2, [pc, #316]	; (8007aa4 <HAL_SD_GetCardStatus+0x168>)
 8007966:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007982:	e070      	b.n	8007a66 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	099b      	lsrs	r3, r3, #6
 8007988:	b2db      	uxtb	r3, r3
 800798a:	f003 0303 	and.w	r3, r3, #3
 800798e:	b2da      	uxtb	r2, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	095b      	lsrs	r3, r3, #5
 8007998:	b2db      	uxtb	r3, r3
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	0e1b      	lsrs	r3, r3, #24
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	4313      	orrs	r3, r2
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	061a      	lsls	r2, r3, #24
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079ca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80079d4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	0e1b      	lsrs	r3, r3, #24
 80079da:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	0d1b      	lsrs	r3, r3, #20
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f003 030f 	and.w	r3, r3, #15
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	0c1b      	lsrs	r3, r3, #16
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	4313      	orrs	r3, r2
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	0a9b      	lsrs	r3, r3, #10
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	0a1b      	lsrs	r3, r3, #8
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	091b      	lsrs	r3, r3, #4
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f003 030f 	and.w	r3, r3, #15
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	0e1b      	lsrs	r3, r3, #24
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f002 fd4c 	bl	800a50c <SDMMC_CmdBlockLength>
 8007a74:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00d      	beq.n	8007a98 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a08      	ldr	r2, [pc, #32]	; (8007aa4 <HAL_SD_GetCardStatus+0x168>)
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007a98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3750      	adds	r7, #80	; 0x50
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	1fe00fff 	.word	0x1fe00fff

08007aa8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007b00:	b5b0      	push	{r4, r5, r7, lr}
 8007b02:	b090      	sub	sp, #64	; 0x40
 8007b04:	af04      	add	r7, sp, #16
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2203      	movs	r2, #3
 8007b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d02e      	beq.n	8007b7e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b26:	d106      	bne.n	8007b36 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	639a      	str	r2, [r3, #56]	; 0x38
 8007b34:	e029      	b.n	8007b8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b3c:	d10a      	bne.n	8007b54 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fbce 	bl	80082e0 <SD_WideBus_Enable>
 8007b44:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	639a      	str	r2, [r3, #56]	; 0x38
 8007b52:	e01a      	b.n	8007b8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fc0b 	bl	8008376 <SD_WideBus_Disable>
 8007b60:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007b6e:	e00c      	b.n	8007b8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8007b7c:	e005      	b.n	8007b8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d007      	beq.n	8007ba2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a60      	ldr	r2, [pc, #384]	; (8007d18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007ba0:	e097      	b.n	8007cd2 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007ba2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007ba6:	f7fd fe05 	bl	80057b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007baa:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8086 	beq.w	8007cc0 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	695a      	ldr	r2, [r3, #20]
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	4952      	ldr	r1, [pc, #328]	; (8007d1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007bd2:	fba1 1303 	umull	r1, r3, r1, r3
 8007bd6:	0e1b      	lsrs	r3, r3, #24
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d303      	bcc.n	8007be4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	61fb      	str	r3, [r7, #28]
 8007be2:	e05a      	b.n	8007c9a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bec:	d103      	bne.n	8007bf6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	61fb      	str	r3, [r7, #28]
 8007bf4:	e051      	b.n	8007c9a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfe:	d126      	bne.n	8007c4e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10e      	bne.n	8007c26 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	4a45      	ldr	r2, [pc, #276]	; (8007d20 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d906      	bls.n	8007c1e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	4a42      	ldr	r2, [pc, #264]	; (8007d1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	0e5b      	lsrs	r3, r3, #25
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	e03d      	b.n	8007c9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	61fb      	str	r3, [r7, #28]
 8007c24:	e039      	b.n	8007c9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c32:	4a3b      	ldr	r2, [pc, #236]	; (8007d20 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d906      	bls.n	8007c46 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	4a38      	ldr	r2, [pc, #224]	; (8007d1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c40:	0e5b      	lsrs	r3, r3, #25
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	e029      	b.n	8007c9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	e025      	b.n	8007c9a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10e      	bne.n	8007c74 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	4a32      	ldr	r2, [pc, #200]	; (8007d24 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d906      	bls.n	8007c6c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	4a2e      	ldr	r2, [pc, #184]	; (8007d1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	0e1b      	lsrs	r3, r3, #24
 8007c68:	61fb      	str	r3, [r7, #28]
 8007c6a:	e016      	b.n	8007c9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	61fb      	str	r3, [r7, #28]
 8007c72:	e012      	b.n	8007c9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	4a28      	ldr	r2, [pc, #160]	; (8007d24 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d906      	bls.n	8007c94 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	4a24      	ldr	r2, [pc, #144]	; (8007d1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8e:	0e1b      	lsrs	r3, r3, #24
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	e002      	b.n	8007c9a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681d      	ldr	r5, [r3, #0]
 8007ca4:	466c      	mov	r4, sp
 8007ca6:	f107 0318 	add.w	r3, r7, #24
 8007caa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007cb2:	f107 030c 	add.w	r3, r7, #12
 8007cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f002 fb5b 	bl	800a374 <SDMMC_Init>
 8007cbe:	e008      	b.n	8007cd2 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f002 fc16 	bl	800a50c <SDMMC_CmdBlockLength>
 8007ce0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00c      	beq.n	8007d02 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a0a      	ldr	r2, [pc, #40]	; (8007d18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3730      	adds	r7, #48	; 0x30
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bdb0      	pop	{r4, r5, r7, pc}
 8007d16:	bf00      	nop
 8007d18:	1fe00fff 	.word	0x1fe00fff
 8007d1c:	55e63b89 	.word	0x55e63b89
 8007d20:	02faf080 	.word	0x02faf080
 8007d24:	017d7840 	.word	0x017d7840

08007d28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007d34:	f107 030c 	add.w	r3, r7, #12
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 faa8 	bl	8008290 <SD_SendStatus>
 8007d40:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	0a5b      	lsrs	r3, r3, #9
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007d5e:	693b      	ldr	r3, [r7, #16]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b090      	sub	sp, #64	; 0x40
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007d70:	2301      	movs	r3, #1
 8007d72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f002 fb43 	bl	800a404 <SDMMC_GetPowerState>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007d88:	e0a5      	b.n	8007ed6 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d02e      	beq.n	8007df0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f002 fd50 	bl	800a83c <SDMMC_CmdSendCID>
 8007d9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <SD_InitCard+0x40>
    {
      return errorstate;
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da6:	e096      	b.n	8007ed6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2100      	movs	r1, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f002 fb6d 	bl	800a48e <SDMMC_GetResponse>
 8007db4:	4602      	mov	r2, r0
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2104      	movs	r1, #4
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f002 fb64 	bl	800a48e <SDMMC_GetResponse>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2108      	movs	r1, #8
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f002 fb5b 	bl	800a48e <SDMMC_GetResponse>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	210c      	movs	r1, #12
 8007de4:	4618      	mov	r0, r3
 8007de6:	f002 fb52 	bl	800a48e <SDMMC_GetResponse>
 8007dea:	4602      	mov	r2, r0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d00d      	beq.n	8007e14 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f107 020e 	add.w	r2, r7, #14
 8007e00:	4611      	mov	r1, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f002 fd59 	bl	800a8ba <SDMMC_CmdSetRelAdd>
 8007e08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <SD_InitCard+0xac>
    {
      return errorstate;
 8007e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e12:	e060      	b.n	8007ed6 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d036      	beq.n	8007e8a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007e1c:	89fb      	ldrh	r3, [r7, #14]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2c:	041b      	lsls	r3, r3, #16
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f002 fd22 	bl	800a87a <SDMMC_CmdSendCSD>
 8007e36:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <SD_InitCard+0xda>
    {
      return errorstate;
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	e049      	b.n	8007ed6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2100      	movs	r1, #0
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f002 fb20 	bl	800a48e <SDMMC_GetResponse>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2104      	movs	r1, #4
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f002 fb17 	bl	800a48e <SDMMC_GetResponse>
 8007e60:	4602      	mov	r2, r0
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2108      	movs	r1, #8
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f002 fb0e 	bl	800a48e <SDMMC_GetResponse>
 8007e72:	4602      	mov	r2, r0
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	210c      	movs	r1, #12
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f002 fb05 	bl	800a48e <SDMMC_GetResponse>
 8007e84:	4602      	mov	r2, r0
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2104      	movs	r1, #4
 8007e90:	4618      	mov	r0, r3
 8007e92:	f002 fafc 	bl	800a48e <SDMMC_GetResponse>
 8007e96:	4603      	mov	r3, r0
 8007e98:	0d1a      	lsrs	r2, r3, #20
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007e9e:	f107 0310 	add.w	r3, r7, #16
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fba5 	bl	80075f4 <HAL_SD_GetCardCSD>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007eb4:	e00f      	b.n	8007ed6 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ebe:	041b      	lsls	r3, r3, #16
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f002 fbd1 	bl	800a66a <SDMMC_CmdSelDesel>
 8007ec8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8007eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <SD_InitCard+0x16c>
  {
    return errorstate;
 8007ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed2:	e000      	b.n	8007ed6 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3740      	adds	r7, #64	; 0x40
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8007ef4:	f7f9 ffdc 	bl	8001eb0 <HAL_GetTick>
 8007ef8:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f002 fbd6 	bl	800a6b0 <SDMMC_CmdGoIdleState>
 8007f04:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <SD_PowerON+0x30>
  {
    return errorstate;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	e0e9      	b.n	80080e4 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f002 fbe9 	bl	800a6ec <SDMMC_CmdOperCond>
 8007f1a:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00d      	beq.n	8007f3e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f002 fbbf 	bl	800a6b0 <SDMMC_CmdGoIdleState>
 8007f32:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <SD_PowerON+0x64>
    {
      return errorstate;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	e0d2      	b.n	80080e4 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d137      	bne.n	8007fbc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2100      	movs	r1, #0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f002 fbea 	bl	800a72c <SDMMC_CmdAppCommand>
 8007f58:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d02d      	beq.n	8007fbc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f64:	e0be      	b.n	80080e4 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f002 fbdd 	bl	800a72c <SDMMC_CmdAppCommand>
 8007f72:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <SD_PowerON+0x9e>
    {
      return errorstate;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	e0b2      	b.n	80080e4 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	495a      	ldr	r1, [pc, #360]	; (80080ec <SD_PowerON+0x20c>)
 8007f84:	4618      	mov	r0, r3
 8007f86:	f002 fbf4 	bl	800a772 <SDMMC_CmdAppOperCommand>
 8007f8a:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f96:	e0a5      	b.n	80080e4 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f002 fa75 	bl	800a48e <SDMMC_GetResponse>
 8007fa4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	0fdb      	lsrs	r3, r3, #31
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <SD_PowerON+0xd2>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <SD_PowerON+0xd4>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61bb      	str	r3, [r7, #24]

    count++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d802      	bhi.n	8007fcc <SD_PowerON+0xec>
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0cc      	beq.n	8007f66 <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d902      	bls.n	8007fdc <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007fd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fda:	e083      	b.n	80080e4 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d07d      	beq.n	80080e2 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d176      	bne.n	80080e2 <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d071      	beq.n	80080e2 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008004:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0208 	orr.w	r2, r2, #8
 8008014:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4618      	mov	r0, r3
 800801c:	f002 fcb4 	bl	800a988 <SDMMC_CmdVoltageSwitch>
 8008020:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00c      	beq.n	8008042 <SD_PowerON+0x162>
        {
          return errorstate;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	e05b      	b.n	80080e4 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800802c:	f7f9 ff40 	bl	8001eb0 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d102      	bne.n	8008042 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800803c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008040:	e050      	b.n	80080e4 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800804c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008050:	d1ec      	bne.n	800802c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800805a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800806a:	d002      	beq.n	8008072 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800806c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008070:	e038      	b.n	80080e4 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8008072:	2001      	movs	r0, #1
 8008074:	f7ff fab2 	bl	80075dc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0204 	orr.w	r2, r2, #4
 8008086:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008088:	e00a      	b.n	80080a0 <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800808a:	f7f9 ff11 	bl	8001eb0 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d102      	bne.n	80080a0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800809a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800809e:	e021      	b.n	80080e4 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080ae:	d1ec      	bne.n	800808a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080b8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080c8:	d102      	bne.n	80080d0 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80080ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080ce:	e009      	b.n	80080e4 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2213      	movs	r2, #19
 80080d6:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f04f 32ff 	mov.w	r2, #4294967295
 80080e0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3720      	adds	r7, #32
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	c1100000 	.word	0xc1100000

080080f0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08c      	sub	sp, #48	; 0x30
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80080fa:	f7f9 fed9 	bl	8001eb0 <HAL_GetTick>
 80080fe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2100      	movs	r1, #0
 800810a:	4618      	mov	r0, r3
 800810c:	f002 f9bf 	bl	800a48e <SDMMC_GetResponse>
 8008110:	4603      	mov	r3, r0
 8008112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800811a:	d102      	bne.n	8008122 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800811c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008120:	e0b0      	b.n	8008284 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2140      	movs	r1, #64	; 0x40
 8008128:	4618      	mov	r0, r3
 800812a:	f002 f9ef 	bl	800a50c <SDMMC_CmdBlockLength>
 800812e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	e0a0      	b.n	8008284 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814a:	041b      	lsls	r3, r3, #16
 800814c:	4619      	mov	r1, r3
 800814e:	4610      	mov	r0, r2
 8008150:	f002 faec 	bl	800a72c <SDMMC_CmdAppCommand>
 8008154:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	e08d      	b.n	8008284 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008168:	f04f 33ff 	mov.w	r3, #4294967295
 800816c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800816e:	2340      	movs	r3, #64	; 0x40
 8008170:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008172:	2360      	movs	r3, #96	; 0x60
 8008174:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008176:	2302      	movs	r3, #2
 8008178:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800817a:	2300      	movs	r3, #0
 800817c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800817e:	2301      	movs	r3, #1
 8008180:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f107 0208 	add.w	r2, r7, #8
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f002 f991 	bl	800a4b4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4618      	mov	r0, r3
 8008198:	f002 fbd4 	bl	800a944 <SDMMC_CmdStatusRegister>
 800819c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d02b      	beq.n	80081fc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	e069      	b.n	8008284 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d013      	beq.n	80081e6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80081be:	2300      	movs	r3, #0
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081c2:	e00d      	b.n	80081e0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f002 f8fd 	bl	800a3c8 <SDMMC_ReadFIFO>
 80081ce:	4602      	mov	r2, r0
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	601a      	str	r2, [r3, #0]
        pData++;
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	3304      	adds	r3, #4
 80081d8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	3301      	adds	r3, #1
 80081de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	2b07      	cmp	r3, #7
 80081e4:	d9ee      	bls.n	80081c4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80081e6:	f7f9 fe63 	bl	8001eb0 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f4:	d102      	bne.n	80081fc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80081f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081fa:	e043      	b.n	8008284 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008202:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0d2      	beq.n	80081b0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	f003 0308 	and.w	r3, r3, #8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008218:	2308      	movs	r3, #8
 800821a:	e033      	b.n	8008284 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800822a:	2302      	movs	r3, #2
 800822c:	e02a      	b.n	8008284 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d017      	beq.n	800826c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800823c:	2320      	movs	r3, #32
 800823e:	e021      	b.n	8008284 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4618      	mov	r0, r3
 8008246:	f002 f8bf 	bl	800a3c8 <SDMMC_ReadFIFO>
 800824a:	4602      	mov	r2, r0
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	601a      	str	r2, [r3, #0]
    pData++;
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	3304      	adds	r3, #4
 8008254:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008256:	f7f9 fe2b 	bl	8001eb0 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008264:	d102      	bne.n	800826c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008266:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800826a:	e00b      	b.n	8008284 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e2      	bne.n	8008240 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a03      	ldr	r2, [pc, #12]	; (800828c <SD_SendSDStatus+0x19c>)
 8008280:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3730      	adds	r7, #48	; 0x30
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	18000f3a 	.word	0x18000f3a

08008290 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80082a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082a4:	e018      	b.n	80082d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ae:	041b      	lsls	r3, r3, #16
 80082b0:	4619      	mov	r1, r3
 80082b2:	4610      	mov	r0, r2
 80082b4:	f002 fb23 	bl	800a8fe <SDMMC_CmdSendStatus>
 80082b8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	e009      	b.n	80082d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2100      	movs	r1, #0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f002 f8df 	bl	800a48e <SDMMC_GetResponse>
 80082d0:	4602      	mov	r2, r0
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80082e8:	2300      	movs	r3, #0
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	2300      	movs	r3, #0
 80082ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f002 f8c9 	bl	800a48e <SDMMC_GetResponse>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008306:	d102      	bne.n	800830e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800830c:	e02f      	b.n	800836e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800830e:	f107 030c 	add.w	r3, r7, #12
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f879 	bl	800840c <SD_FindSCR>
 800831a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	e023      	b.n	800836e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01c      	beq.n	800836a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008338:	041b      	lsls	r3, r3, #16
 800833a:	4619      	mov	r1, r3
 800833c:	4610      	mov	r0, r2
 800833e:	f002 f9f5 	bl	800a72c <SDMMC_CmdAppCommand>
 8008342:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	e00f      	b.n	800836e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2102      	movs	r1, #2
 8008354:	4618      	mov	r0, r3
 8008356:	f002 fa2c 	bl	800a7b2 <SDMMC_CmdBusWidth>
 800835a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	e003      	b.n	800836e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008366:	2300      	movs	r3, #0
 8008368:	e001      	b.n	800836e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800836a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	2300      	movs	r3, #0
 8008384:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2100      	movs	r1, #0
 800838c:	4618      	mov	r0, r3
 800838e:	f002 f87e 	bl	800a48e <SDMMC_GetResponse>
 8008392:	4603      	mov	r3, r0
 8008394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800839c:	d102      	bne.n	80083a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800839e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083a2:	e02f      	b.n	8008404 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80083a4:	f107 030c 	add.w	r3, r7, #12
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f82e 	bl	800840c <SD_FindSCR>
 80083b0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	e023      	b.n	8008404 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d01c      	beq.n	8008400 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ce:	041b      	lsls	r3, r3, #16
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f002 f9aa 	bl	800a72c <SDMMC_CmdAppCommand>
 80083d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	e00f      	b.n	8008404 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2100      	movs	r1, #0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f002 f9e1 	bl	800a7b2 <SDMMC_CmdBusWidth>
 80083f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	e003      	b.n	8008404 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e001      	b.n	8008404 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008400:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08e      	sub	sp, #56	; 0x38
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008416:	f7f9 fd4b 	bl	8001eb0 <HAL_GetTick>
 800841a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008420:	2300      	movs	r3, #0
 8008422:	60bb      	str	r3, [r7, #8]
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2108      	movs	r1, #8
 8008432:	4618      	mov	r0, r3
 8008434:	f002 f86a 	bl	800a50c <SDMMC_CmdBlockLength>
 8008438:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	e0ad      	b.n	80085a0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800844c:	041b      	lsls	r3, r3, #16
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f002 f96b 	bl	800a72c <SDMMC_CmdAppCommand>
 8008456:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <SD_FindSCR+0x56>
  {
    return errorstate;
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	e09e      	b.n	80085a0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008462:	f04f 33ff 	mov.w	r3, #4294967295
 8008466:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008468:	2308      	movs	r3, #8
 800846a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800846c:	2330      	movs	r3, #48	; 0x30
 800846e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008470:	2302      	movs	r3, #2
 8008472:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008474:	2300      	movs	r3, #0
 8008476:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008478:	2301      	movs	r3, #1
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f107 0210 	add.w	r2, r7, #16
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f002 f814 	bl	800a4b4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f002 f9b1 	bl	800a7f8 <SDMMC_CmdSendSCR>
 8008496:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	2b00      	cmp	r3, #0
 800849c:	d027      	beq.n	80084ee <SD_FindSCR+0xe2>
  {
    return errorstate;
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	e07e      	b.n	80085a0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d113      	bne.n	80084d8 <SD_FindSCR+0xcc>
 80084b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d110      	bne.n	80084d8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 ff84 	bl	800a3c8 <SDMMC_ReadFIFO>
 80084c0:	4603      	mov	r3, r0
 80084c2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 ff7d 	bl	800a3c8 <SDMMC_ReadFIFO>
 80084ce:	4603      	mov	r3, r0
 80084d0:	60fb      	str	r3, [r7, #12]
      index++;
 80084d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d4:	3301      	adds	r3, #1
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80084d8:	f7f9 fcea 	bl	8001eb0 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e6:	d102      	bne.n	80084ee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80084e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084ec:	e058      	b.n	80085a0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f4:	f240 532a 	movw	r3, #1322	; 0x52a
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0d1      	beq.n	80084a2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2208      	movs	r2, #8
 8008512:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008514:	2308      	movs	r3, #8
 8008516:	e043      	b.n	80085a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2202      	movs	r2, #2
 800852c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800852e:	2302      	movs	r3, #2
 8008530:	e036      	b.n	80085a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	f003 0320 	and.w	r3, r3, #32
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2220      	movs	r2, #32
 8008546:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008548:	2320      	movs	r3, #32
 800854a:	e029      	b.n	80085a0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a15      	ldr	r2, [pc, #84]	; (80085a8 <SD_FindSCR+0x19c>)
 8008552:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	061a      	lsls	r2, r3, #24
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008560:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800856a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	0e1b      	lsrs	r3, r3, #24
 8008570:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	601a      	str	r2, [r3, #0]
    scr++;
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	3304      	adds	r3, #4
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	061a      	lsls	r2, r3, #24
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	021b      	lsls	r3, r3, #8
 8008584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008588:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	0a1b      	lsrs	r3, r3, #8
 800858e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008592:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	0e1b      	lsrs	r3, r3, #24
 8008598:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3738      	adds	r7, #56	; 0x38
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	18000f3a 	.word	0x18000f3a

080085ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e049      	b.n	8008652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d106      	bne.n	80085d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f841 	bl	800865a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4619      	mov	r1, r3
 80085ea:	4610      	mov	r0, r2
 80085ec:	f000 f9f8 	bl	80089e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008662:	bf00      	nop
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
	...

08008670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b01      	cmp	r3, #1
 8008682:	d001      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e04f      	b.n	8008728 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a23      	ldr	r2, [pc, #140]	; (8008734 <HAL_TIM_Base_Start_IT+0xc4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01d      	beq.n	80086e6 <HAL_TIM_Base_Start_IT+0x76>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b2:	d018      	beq.n	80086e6 <HAL_TIM_Base_Start_IT+0x76>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1f      	ldr	r2, [pc, #124]	; (8008738 <HAL_TIM_Base_Start_IT+0xc8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <HAL_TIM_Base_Start_IT+0x76>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1e      	ldr	r2, [pc, #120]	; (800873c <HAL_TIM_Base_Start_IT+0xcc>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00e      	beq.n	80086e6 <HAL_TIM_Base_Start_IT+0x76>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1c      	ldr	r2, [pc, #112]	; (8008740 <HAL_TIM_Base_Start_IT+0xd0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d009      	beq.n	80086e6 <HAL_TIM_Base_Start_IT+0x76>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1b      	ldr	r2, [pc, #108]	; (8008744 <HAL_TIM_Base_Start_IT+0xd4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d004      	beq.n	80086e6 <HAL_TIM_Base_Start_IT+0x76>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a19      	ldr	r2, [pc, #100]	; (8008748 <HAL_TIM_Base_Start_IT+0xd8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d115      	bne.n	8008712 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	4b17      	ldr	r3, [pc, #92]	; (800874c <HAL_TIM_Base_Start_IT+0xdc>)
 80086ee:	4013      	ands	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b06      	cmp	r3, #6
 80086f6:	d015      	beq.n	8008724 <HAL_TIM_Base_Start_IT+0xb4>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086fe:	d011      	beq.n	8008724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0201 	orr.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008710:	e008      	b.n	8008724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f042 0201 	orr.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	e000      	b.n	8008726 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008724:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	40010000 	.word	0x40010000
 8008738:	40000400 	.word	0x40000400
 800873c:	40000800 	.word	0x40000800
 8008740:	40000c00 	.word	0x40000c00
 8008744:	40010400 	.word	0x40010400
 8008748:	40001800 	.word	0x40001800
 800874c:	00010007 	.word	0x00010007

08008750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b02      	cmp	r3, #2
 8008764:	d122      	bne.n	80087ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b02      	cmp	r3, #2
 8008772:	d11b      	bne.n	80087ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0202 	mvn.w	r2, #2
 800877c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f003 0303 	and.w	r3, r3, #3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f905 	bl	80089a2 <HAL_TIM_IC_CaptureCallback>
 8008798:	e005      	b.n	80087a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f8f7 	bl	800898e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f908 	bl	80089b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d122      	bne.n	8008800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d11b      	bne.n	8008800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0204 	mvn.w	r2, #4
 80087d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2202      	movs	r2, #2
 80087d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f8db 	bl	80089a2 <HAL_TIM_IC_CaptureCallback>
 80087ec:	e005      	b.n	80087fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8cd 	bl	800898e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f8de 	bl	80089b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b08      	cmp	r3, #8
 800880c:	d122      	bne.n	8008854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0308 	and.w	r3, r3, #8
 8008818:	2b08      	cmp	r3, #8
 800881a:	d11b      	bne.n	8008854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0208 	mvn.w	r2, #8
 8008824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2204      	movs	r2, #4
 800882a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f8b1 	bl	80089a2 <HAL_TIM_IC_CaptureCallback>
 8008840:	e005      	b.n	800884e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f8a3 	bl	800898e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f8b4 	bl	80089b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0310 	and.w	r3, r3, #16
 800885e:	2b10      	cmp	r3, #16
 8008860:	d122      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b10      	cmp	r3, #16
 800886e:	d11b      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0210 	mvn.w	r2, #16
 8008878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2208      	movs	r2, #8
 800887e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f887 	bl	80089a2 <HAL_TIM_IC_CaptureCallback>
 8008894:	e005      	b.n	80088a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f879 	bl	800898e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f88a 	bl	80089b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d10e      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d107      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0201 	mvn.w	r2, #1
 80088cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7f8 fcf2 	bl	80012b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088de:	2b80      	cmp	r3, #128	; 0x80
 80088e0:	d10e      	bne.n	8008900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ec:	2b80      	cmp	r3, #128	; 0x80
 80088ee:	d107      	bne.n	8008900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f914 	bl	8008b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890e:	d10e      	bne.n	800892e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d107      	bne.n	800892e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f907 	bl	8008b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008938:	2b40      	cmp	r3, #64	; 0x40
 800893a:	d10e      	bne.n	800895a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008946:	2b40      	cmp	r3, #64	; 0x40
 8008948:	d107      	bne.n	800895a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f838 	bl	80089ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	2b20      	cmp	r3, #32
 8008966:	d10e      	bne.n	8008986 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b20      	cmp	r3, #32
 8008974:	d107      	bne.n	8008986 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f06f 0220 	mvn.w	r2, #32
 800897e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f8c7 	bl	8008b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089aa:	bf00      	nop
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a40      	ldr	r2, [pc, #256]	; (8008af4 <TIM_Base_SetConfig+0x114>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d013      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089fe:	d00f      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a3d      	ldr	r2, [pc, #244]	; (8008af8 <TIM_Base_SetConfig+0x118>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00b      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a3c      	ldr	r2, [pc, #240]	; (8008afc <TIM_Base_SetConfig+0x11c>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d007      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a3b      	ldr	r2, [pc, #236]	; (8008b00 <TIM_Base_SetConfig+0x120>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d003      	beq.n	8008a20 <TIM_Base_SetConfig+0x40>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a3a      	ldr	r2, [pc, #232]	; (8008b04 <TIM_Base_SetConfig+0x124>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d108      	bne.n	8008a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a2f      	ldr	r2, [pc, #188]	; (8008af4 <TIM_Base_SetConfig+0x114>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d01f      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a40:	d01b      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a2c      	ldr	r2, [pc, #176]	; (8008af8 <TIM_Base_SetConfig+0x118>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d017      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a2b      	ldr	r2, [pc, #172]	; (8008afc <TIM_Base_SetConfig+0x11c>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d013      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a2a      	ldr	r2, [pc, #168]	; (8008b00 <TIM_Base_SetConfig+0x120>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d00f      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a29      	ldr	r2, [pc, #164]	; (8008b04 <TIM_Base_SetConfig+0x124>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00b      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a28      	ldr	r2, [pc, #160]	; (8008b08 <TIM_Base_SetConfig+0x128>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d007      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a27      	ldr	r2, [pc, #156]	; (8008b0c <TIM_Base_SetConfig+0x12c>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d003      	beq.n	8008a7a <TIM_Base_SetConfig+0x9a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a26      	ldr	r2, [pc, #152]	; (8008b10 <TIM_Base_SetConfig+0x130>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d108      	bne.n	8008a8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a10      	ldr	r2, [pc, #64]	; (8008af4 <TIM_Base_SetConfig+0x114>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d00f      	beq.n	8008ad8 <TIM_Base_SetConfig+0xf8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a12      	ldr	r2, [pc, #72]	; (8008b04 <TIM_Base_SetConfig+0x124>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00b      	beq.n	8008ad8 <TIM_Base_SetConfig+0xf8>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a11      	ldr	r2, [pc, #68]	; (8008b08 <TIM_Base_SetConfig+0x128>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d007      	beq.n	8008ad8 <TIM_Base_SetConfig+0xf8>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a10      	ldr	r2, [pc, #64]	; (8008b0c <TIM_Base_SetConfig+0x12c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d003      	beq.n	8008ad8 <TIM_Base_SetConfig+0xf8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a0f      	ldr	r2, [pc, #60]	; (8008b10 <TIM_Base_SetConfig+0x130>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d103      	bne.n	8008ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	691a      	ldr	r2, [r3, #16]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	615a      	str	r2, [r3, #20]
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	40010000 	.word	0x40010000
 8008af8:	40000400 	.word	0x40000400
 8008afc:	40000800 	.word	0x40000800
 8008b00:	40000c00 	.word	0x40000c00
 8008b04:	40010400 	.word	0x40010400
 8008b08:	40014000 	.word	0x40014000
 8008b0c:	40014400 	.word	0x40014400
 8008b10:	40014800 	.word	0x40014800

08008b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e042      	b.n	8008be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d106      	bne.n	8008b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7f8 fe6f 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2224      	movs	r2, #36	; 0x24
 8008b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0201 	bic.w	r2, r2, #1
 8008b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fb9c 	bl	80092d0 <UART_SetConfig>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d101      	bne.n	8008ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e022      	b.n	8008be8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 f8f0 	bl	8009d90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 f977 	bl	8009ed4 <UART_CheckIdleState>
 8008be6:	4603      	mov	r3, r0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08a      	sub	sp, #40	; 0x28
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	603b      	str	r3, [r7, #0]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	f040 8083 	bne.w	8008d12 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <HAL_UART_Transmit+0x28>
 8008c12:	88fb      	ldrh	r3, [r7, #6]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e07b      	b.n	8008d14 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d101      	bne.n	8008c2a <HAL_UART_Transmit+0x3a>
 8008c26:	2302      	movs	r3, #2
 8008c28:	e074      	b.n	8008d14 <HAL_UART_Transmit+0x124>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2221      	movs	r2, #33	; 0x21
 8008c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c42:	f7f9 f935 	bl	8001eb0 <HAL_GetTick>
 8008c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	88fa      	ldrh	r2, [r7, #6]
 8008c4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	88fa      	ldrh	r2, [r7, #6]
 8008c54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c60:	d108      	bne.n	8008c74 <HAL_UART_Transmit+0x84>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	e003      	b.n	8008c7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008c84:	e02c      	b.n	8008ce0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2180      	movs	r1, #128	; 0x80
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f001 f96a 	bl	8009f6a <UART_WaitOnFlagUntilTimeout>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e039      	b.n	8008d14 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10b      	bne.n	8008cbe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	3302      	adds	r3, #2
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	e007      	b.n	8008cce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1cc      	bne.n	8008c86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2140      	movs	r1, #64	; 0x40
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f001 f937 	bl	8009f6a <UART_WaitOnFlagUntilTimeout>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e006      	b.n	8008d14 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e000      	b.n	8008d14 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008d12:	2302      	movs	r3, #2
  }
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d3c:	69fa      	ldr	r2, [r7, #28]
 8008d3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d42:	4013      	ands	r3, r2
 8008d44:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d118      	bne.n	8008d7e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f003 0320 	and.w	r3, r3, #32
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d013      	beq.n	8008d7e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	f003 0320 	and.w	r3, r3, #32
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d104      	bne.n	8008d6a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 8282 	beq.w	8009278 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	4798      	blx	r3
      }
      return;
 8008d7c:	e27c      	b.n	8009278 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 80ef 	beq.w	8008f64 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	4b73      	ldr	r3, [pc, #460]	; (8008f58 <HAL_UART_IRQHandler+0x23c>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d105      	bne.n	8008d9c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	4b72      	ldr	r3, [pc, #456]	; (8008f5c <HAL_UART_IRQHandler+0x240>)
 8008d94:	4013      	ands	r3, r2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 80e4 	beq.w	8008f64 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d010      	beq.n	8008dc8 <HAL_UART_IRQHandler+0xac>
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00b      	beq.n	8008dc8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2201      	movs	r2, #1
 8008db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dbe:	f043 0201 	orr.w	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d010      	beq.n	8008df4 <HAL_UART_IRQHandler+0xd8>
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2202      	movs	r2, #2
 8008de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dea:	f043 0204 	orr.w	r2, r3, #4
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	f003 0304 	and.w	r3, r3, #4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d010      	beq.n	8008e20 <HAL_UART_IRQHandler+0x104>
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00b      	beq.n	8008e20 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2204      	movs	r2, #4
 8008e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e16:	f043 0202 	orr.w	r2, r3, #2
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f003 0308 	and.w	r3, r3, #8
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d015      	beq.n	8008e56 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d104      	bne.n	8008e3e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	4b48      	ldr	r3, [pc, #288]	; (8008f58 <HAL_UART_IRQHandler+0x23c>)
 8008e38:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2208      	movs	r2, #8
 8008e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4c:	f043 0208 	orr.w	r2, r3, #8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d011      	beq.n	8008e84 <HAL_UART_IRQHandler+0x168>
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00c      	beq.n	8008e84 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e7a:	f043 0220 	orr.w	r2, r3, #32
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 81f6 	beq.w	800927c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d011      	beq.n	8008ebe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	f003 0320 	and.w	r3, r3, #32
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d007      	beq.n	8008ebe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed0:	2b40      	cmp	r3, #64	; 0x40
 8008ed2:	d004      	beq.n	8008ede <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d031      	beq.n	8008f42 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f001 f8c4 	bl	800a06c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eee:	2b40      	cmp	r3, #64	; 0x40
 8008ef0:	d123      	bne.n	8008f3a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f00:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d013      	beq.n	8008f32 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f0e:	4a14      	ldr	r2, [pc, #80]	; (8008f60 <HAL_UART_IRQHandler+0x244>)
 8008f10:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f9 fc04 	bl	8002724 <HAL_DMA_Abort_IT>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d017      	beq.n	8008f52 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f30:	e00f      	b.n	8008f52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f9b6 	bl	80092a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f38:	e00b      	b.n	8008f52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f9b2 	bl	80092a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f40:	e007      	b.n	8008f52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f9ae 	bl	80092a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008f50:	e194      	b.n	800927c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f52:	bf00      	nop
    return;
 8008f54:	e192      	b.n	800927c <HAL_UART_IRQHandler+0x560>
 8008f56:	bf00      	nop
 8008f58:	10000001 	.word	0x10000001
 8008f5c:	04000120 	.word	0x04000120
 8008f60:	0800a0d1 	.word	0x0800a0d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	f040 810f 	bne.w	800918c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	f003 0310 	and.w	r3, r3, #16
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 8109 	beq.w	800918c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	f003 0310 	and.w	r3, r3, #16
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f000 8103 	beq.w	800918c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2210      	movs	r2, #16
 8008f8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f98:	2b40      	cmp	r3, #64	; 0x40
 8008f9a:	f040 80bb 	bne.w	8009114 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a96      	ldr	r2, [pc, #600]	; (8009200 <HAL_UART_IRQHandler+0x4e4>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d059      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a94      	ldr	r2, [pc, #592]	; (8009204 <HAL_UART_IRQHandler+0x4e8>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d053      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a92      	ldr	r2, [pc, #584]	; (8009208 <HAL_UART_IRQHandler+0x4ec>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d04d      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a90      	ldr	r2, [pc, #576]	; (800920c <HAL_UART_IRQHandler+0x4f0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d047      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a8e      	ldr	r2, [pc, #568]	; (8009210 <HAL_UART_IRQHandler+0x4f4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d041      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a8c      	ldr	r2, [pc, #560]	; (8009214 <HAL_UART_IRQHandler+0x4f8>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d03b      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a8a      	ldr	r2, [pc, #552]	; (8009218 <HAL_UART_IRQHandler+0x4fc>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d035      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a88      	ldr	r2, [pc, #544]	; (800921c <HAL_UART_IRQHandler+0x500>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d02f      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a86      	ldr	r2, [pc, #536]	; (8009220 <HAL_UART_IRQHandler+0x504>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d029      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a84      	ldr	r2, [pc, #528]	; (8009224 <HAL_UART_IRQHandler+0x508>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d023      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a82      	ldr	r2, [pc, #520]	; (8009228 <HAL_UART_IRQHandler+0x50c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d01d      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a80      	ldr	r2, [pc, #512]	; (800922c <HAL_UART_IRQHandler+0x510>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d017      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a7e      	ldr	r2, [pc, #504]	; (8009230 <HAL_UART_IRQHandler+0x514>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d011      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a7c      	ldr	r2, [pc, #496]	; (8009234 <HAL_UART_IRQHandler+0x518>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00b      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a7a      	ldr	r2, [pc, #488]	; (8009238 <HAL_UART_IRQHandler+0x51c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d005      	beq.n	800905e <HAL_UART_IRQHandler+0x342>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a78      	ldr	r2, [pc, #480]	; (800923c <HAL_UART_IRQHandler+0x520>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d105      	bne.n	800906a <HAL_UART_IRQHandler+0x34e>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	b29b      	uxth	r3, r3
 8009068:	e004      	b.n	8009074 <HAL_UART_IRQHandler+0x358>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	b29b      	uxth	r3, r3
 8009074:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009076:	893b      	ldrh	r3, [r7, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 8101 	beq.w	8009280 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009084:	893a      	ldrh	r2, [r7, #8]
 8009086:	429a      	cmp	r2, r3
 8009088:	f080 80fa 	bcs.w	8009280 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	893a      	ldrh	r2, [r7, #8]
 8009090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800909e:	d02b      	beq.n	80090f8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 0201 	bic.w	r2, r2, #1
 80090be:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ce:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0210 	bic.w	r2, r2, #16
 80090ec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f8 fff8 	bl	80020e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009104:	b29b      	uxth	r3, r3
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	b29b      	uxth	r3, r3
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f8d3 	bl	80092b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009112:	e0b5      	b.n	8009280 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009120:	b29b      	uxth	r3, r3
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800912c:	b29b      	uxth	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 80a8 	beq.w	8009284 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009134:	897b      	ldrh	r3, [r7, #10]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 80a4 	beq.w	8009284 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800914a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6899      	ldr	r1, [r3, #8]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	4b3a      	ldr	r3, [pc, #232]	; (8009240 <HAL_UART_IRQHandler+0x524>)
 8009158:	400b      	ands	r3, r1
 800915a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2220      	movs	r2, #32
 8009160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0210 	bic.w	r2, r2, #16
 800917e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009180:	897b      	ldrh	r3, [r7, #10]
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f897 	bl	80092b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800918a:	e07b      	b.n	8009284 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00d      	beq.n	80091b2 <HAL_UART_IRQHandler+0x496>
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d008      	beq.n	80091b2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80091a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 ffc0 	bl	800a130 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b0:	e06b      	b.n	800928a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d012      	beq.n	80091e2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d104      	bne.n	80091d0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d008      	beq.n	80091e2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d057      	beq.n	8009288 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	4798      	blx	r3
    }
    return;
 80091e0:	e052      	b.n	8009288 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d02b      	beq.n	8009244 <HAL_UART_IRQHandler+0x528>
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d026      	beq.n	8009244 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 ff80 	bl	800a0fc <UART_EndTransmit_IT>
    return;
 80091fc:	e045      	b.n	800928a <HAL_UART_IRQHandler+0x56e>
 80091fe:	bf00      	nop
 8009200:	40020010 	.word	0x40020010
 8009204:	40020028 	.word	0x40020028
 8009208:	40020040 	.word	0x40020040
 800920c:	40020058 	.word	0x40020058
 8009210:	40020070 	.word	0x40020070
 8009214:	40020088 	.word	0x40020088
 8009218:	400200a0 	.word	0x400200a0
 800921c:	400200b8 	.word	0x400200b8
 8009220:	40020410 	.word	0x40020410
 8009224:	40020428 	.word	0x40020428
 8009228:	40020440 	.word	0x40020440
 800922c:	40020458 	.word	0x40020458
 8009230:	40020470 	.word	0x40020470
 8009234:	40020488 	.word	0x40020488
 8009238:	400204a0 	.word	0x400204a0
 800923c:	400204b8 	.word	0x400204b8
 8009240:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <HAL_UART_IRQHandler+0x544>
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 ff7d 	bl	800a158 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800925e:	e014      	b.n	800928a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00f      	beq.n	800928a <HAL_UART_IRQHandler+0x56e>
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	da0c      	bge.n	800928a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 ff67 	bl	800a144 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009276:	e008      	b.n	800928a <HAL_UART_IRQHandler+0x56e>
      return;
 8009278:	bf00      	nop
 800927a:	e006      	b.n	800928a <HAL_UART_IRQHandler+0x56e>
    return;
 800927c:	bf00      	nop
 800927e:	e004      	b.n	800928a <HAL_UART_IRQHandler+0x56e>
      return;
 8009280:	bf00      	nop
 8009282:	e002      	b.n	800928a <HAL_UART_IRQHandler+0x56e>
      return;
 8009284:	bf00      	nop
 8009286:	e000      	b.n	800928a <HAL_UART_IRQHandler+0x56e>
    return;
 8009288:	bf00      	nop
  }
}
 800928a:	3720      	adds	r7, #32
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092d0:	b5b0      	push	{r4, r5, r7, lr}
 80092d2:	b08e      	sub	sp, #56	; 0x38
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	431a      	orrs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	431a      	orrs	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	4bbf      	ldr	r3, [pc, #764]	; (80095fc <UART_SetConfig+0x32c>)
 80092fe:	4013      	ands	r3, r2
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6812      	ldr	r2, [r2, #0]
 8009304:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009306:	430b      	orrs	r3, r1
 8009308:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4ab5      	ldr	r2, [pc, #724]	; (8009600 <UART_SetConfig+0x330>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d004      	beq.n	800933a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009336:	4313      	orrs	r3, r2
 8009338:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	4bb0      	ldr	r3, [pc, #704]	; (8009604 <UART_SetConfig+0x334>)
 8009342:	4013      	ands	r3, r2
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6812      	ldr	r2, [r2, #0]
 8009348:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800934a:	430b      	orrs	r3, r1
 800934c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	f023 010f 	bic.w	r1, r3, #15
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4aa7      	ldr	r2, [pc, #668]	; (8009608 <UART_SetConfig+0x338>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d176      	bne.n	800945c <UART_SetConfig+0x18c>
 800936e:	4ba7      	ldr	r3, [pc, #668]	; (800960c <UART_SetConfig+0x33c>)
 8009370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009376:	2b28      	cmp	r3, #40	; 0x28
 8009378:	d86c      	bhi.n	8009454 <UART_SetConfig+0x184>
 800937a:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <UART_SetConfig+0xb0>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	08009425 	.word	0x08009425
 8009384:	08009455 	.word	0x08009455
 8009388:	08009455 	.word	0x08009455
 800938c:	08009455 	.word	0x08009455
 8009390:	08009455 	.word	0x08009455
 8009394:	08009455 	.word	0x08009455
 8009398:	08009455 	.word	0x08009455
 800939c:	08009455 	.word	0x08009455
 80093a0:	0800942d 	.word	0x0800942d
 80093a4:	08009455 	.word	0x08009455
 80093a8:	08009455 	.word	0x08009455
 80093ac:	08009455 	.word	0x08009455
 80093b0:	08009455 	.word	0x08009455
 80093b4:	08009455 	.word	0x08009455
 80093b8:	08009455 	.word	0x08009455
 80093bc:	08009455 	.word	0x08009455
 80093c0:	08009435 	.word	0x08009435
 80093c4:	08009455 	.word	0x08009455
 80093c8:	08009455 	.word	0x08009455
 80093cc:	08009455 	.word	0x08009455
 80093d0:	08009455 	.word	0x08009455
 80093d4:	08009455 	.word	0x08009455
 80093d8:	08009455 	.word	0x08009455
 80093dc:	08009455 	.word	0x08009455
 80093e0:	0800943d 	.word	0x0800943d
 80093e4:	08009455 	.word	0x08009455
 80093e8:	08009455 	.word	0x08009455
 80093ec:	08009455 	.word	0x08009455
 80093f0:	08009455 	.word	0x08009455
 80093f4:	08009455 	.word	0x08009455
 80093f8:	08009455 	.word	0x08009455
 80093fc:	08009455 	.word	0x08009455
 8009400:	08009445 	.word	0x08009445
 8009404:	08009455 	.word	0x08009455
 8009408:	08009455 	.word	0x08009455
 800940c:	08009455 	.word	0x08009455
 8009410:	08009455 	.word	0x08009455
 8009414:	08009455 	.word	0x08009455
 8009418:	08009455 	.word	0x08009455
 800941c:	08009455 	.word	0x08009455
 8009420:	0800944d 	.word	0x0800944d
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800942a:	e222      	b.n	8009872 <UART_SetConfig+0x5a2>
 800942c:	2304      	movs	r3, #4
 800942e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009432:	e21e      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009434:	2308      	movs	r3, #8
 8009436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800943a:	e21a      	b.n	8009872 <UART_SetConfig+0x5a2>
 800943c:	2310      	movs	r3, #16
 800943e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009442:	e216      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009444:	2320      	movs	r3, #32
 8009446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944a:	e212      	b.n	8009872 <UART_SetConfig+0x5a2>
 800944c:	2340      	movs	r3, #64	; 0x40
 800944e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009452:	e20e      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009454:	2380      	movs	r3, #128	; 0x80
 8009456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945a:	e20a      	b.n	8009872 <UART_SetConfig+0x5a2>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a6b      	ldr	r2, [pc, #428]	; (8009610 <UART_SetConfig+0x340>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d130      	bne.n	80094c8 <UART_SetConfig+0x1f8>
 8009466:	4b69      	ldr	r3, [pc, #420]	; (800960c <UART_SetConfig+0x33c>)
 8009468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	2b05      	cmp	r3, #5
 8009470:	d826      	bhi.n	80094c0 <UART_SetConfig+0x1f0>
 8009472:	a201      	add	r2, pc, #4	; (adr r2, 8009478 <UART_SetConfig+0x1a8>)
 8009474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009478:	08009491 	.word	0x08009491
 800947c:	08009499 	.word	0x08009499
 8009480:	080094a1 	.word	0x080094a1
 8009484:	080094a9 	.word	0x080094a9
 8009488:	080094b1 	.word	0x080094b1
 800948c:	080094b9 	.word	0x080094b9
 8009490:	2300      	movs	r3, #0
 8009492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009496:	e1ec      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009498:	2304      	movs	r3, #4
 800949a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800949e:	e1e8      	b.n	8009872 <UART_SetConfig+0x5a2>
 80094a0:	2308      	movs	r3, #8
 80094a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094a6:	e1e4      	b.n	8009872 <UART_SetConfig+0x5a2>
 80094a8:	2310      	movs	r3, #16
 80094aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ae:	e1e0      	b.n	8009872 <UART_SetConfig+0x5a2>
 80094b0:	2320      	movs	r3, #32
 80094b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b6:	e1dc      	b.n	8009872 <UART_SetConfig+0x5a2>
 80094b8:	2340      	movs	r3, #64	; 0x40
 80094ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094be:	e1d8      	b.n	8009872 <UART_SetConfig+0x5a2>
 80094c0:	2380      	movs	r3, #128	; 0x80
 80094c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c6:	e1d4      	b.n	8009872 <UART_SetConfig+0x5a2>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a51      	ldr	r2, [pc, #324]	; (8009614 <UART_SetConfig+0x344>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d130      	bne.n	8009534 <UART_SetConfig+0x264>
 80094d2:	4b4e      	ldr	r3, [pc, #312]	; (800960c <UART_SetConfig+0x33c>)
 80094d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	2b05      	cmp	r3, #5
 80094dc:	d826      	bhi.n	800952c <UART_SetConfig+0x25c>
 80094de:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <UART_SetConfig+0x214>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	080094fd 	.word	0x080094fd
 80094e8:	08009505 	.word	0x08009505
 80094ec:	0800950d 	.word	0x0800950d
 80094f0:	08009515 	.word	0x08009515
 80094f4:	0800951d 	.word	0x0800951d
 80094f8:	08009525 	.word	0x08009525
 80094fc:	2300      	movs	r3, #0
 80094fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009502:	e1b6      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009504:	2304      	movs	r3, #4
 8009506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800950a:	e1b2      	b.n	8009872 <UART_SetConfig+0x5a2>
 800950c:	2308      	movs	r3, #8
 800950e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009512:	e1ae      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009514:	2310      	movs	r3, #16
 8009516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800951a:	e1aa      	b.n	8009872 <UART_SetConfig+0x5a2>
 800951c:	2320      	movs	r3, #32
 800951e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009522:	e1a6      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009524:	2340      	movs	r3, #64	; 0x40
 8009526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800952a:	e1a2      	b.n	8009872 <UART_SetConfig+0x5a2>
 800952c:	2380      	movs	r3, #128	; 0x80
 800952e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009532:	e19e      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a37      	ldr	r2, [pc, #220]	; (8009618 <UART_SetConfig+0x348>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d130      	bne.n	80095a0 <UART_SetConfig+0x2d0>
 800953e:	4b33      	ldr	r3, [pc, #204]	; (800960c <UART_SetConfig+0x33c>)
 8009540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	2b05      	cmp	r3, #5
 8009548:	d826      	bhi.n	8009598 <UART_SetConfig+0x2c8>
 800954a:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <UART_SetConfig+0x280>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	08009569 	.word	0x08009569
 8009554:	08009571 	.word	0x08009571
 8009558:	08009579 	.word	0x08009579
 800955c:	08009581 	.word	0x08009581
 8009560:	08009589 	.word	0x08009589
 8009564:	08009591 	.word	0x08009591
 8009568:	2300      	movs	r3, #0
 800956a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800956e:	e180      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009570:	2304      	movs	r3, #4
 8009572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009576:	e17c      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009578:	2308      	movs	r3, #8
 800957a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800957e:	e178      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009580:	2310      	movs	r3, #16
 8009582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009586:	e174      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009588:	2320      	movs	r3, #32
 800958a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800958e:	e170      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009590:	2340      	movs	r3, #64	; 0x40
 8009592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009596:	e16c      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009598:	2380      	movs	r3, #128	; 0x80
 800959a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800959e:	e168      	b.n	8009872 <UART_SetConfig+0x5a2>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a1d      	ldr	r2, [pc, #116]	; (800961c <UART_SetConfig+0x34c>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d142      	bne.n	8009630 <UART_SetConfig+0x360>
 80095aa:	4b18      	ldr	r3, [pc, #96]	; (800960c <UART_SetConfig+0x33c>)
 80095ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ae:	f003 0307 	and.w	r3, r3, #7
 80095b2:	2b05      	cmp	r3, #5
 80095b4:	d838      	bhi.n	8009628 <UART_SetConfig+0x358>
 80095b6:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <UART_SetConfig+0x2ec>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095d5 	.word	0x080095d5
 80095c0:	080095dd 	.word	0x080095dd
 80095c4:	080095e5 	.word	0x080095e5
 80095c8:	080095ed 	.word	0x080095ed
 80095cc:	080095f5 	.word	0x080095f5
 80095d0:	08009621 	.word	0x08009621
 80095d4:	2300      	movs	r3, #0
 80095d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095da:	e14a      	b.n	8009872 <UART_SetConfig+0x5a2>
 80095dc:	2304      	movs	r3, #4
 80095de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e2:	e146      	b.n	8009872 <UART_SetConfig+0x5a2>
 80095e4:	2308      	movs	r3, #8
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e142      	b.n	8009872 <UART_SetConfig+0x5a2>
 80095ec:	2310      	movs	r3, #16
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e13e      	b.n	8009872 <UART_SetConfig+0x5a2>
 80095f4:	2320      	movs	r3, #32
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e13a      	b.n	8009872 <UART_SetConfig+0x5a2>
 80095fc:	cfff69f3 	.word	0xcfff69f3
 8009600:	58000c00 	.word	0x58000c00
 8009604:	11fff4ff 	.word	0x11fff4ff
 8009608:	40011000 	.word	0x40011000
 800960c:	58024400 	.word	0x58024400
 8009610:	40004400 	.word	0x40004400
 8009614:	40004800 	.word	0x40004800
 8009618:	40004c00 	.word	0x40004c00
 800961c:	40005000 	.word	0x40005000
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009626:	e124      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009628:	2380      	movs	r3, #128	; 0x80
 800962a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962e:	e120      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4acc      	ldr	r2, [pc, #816]	; (8009968 <UART_SetConfig+0x698>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d176      	bne.n	8009728 <UART_SetConfig+0x458>
 800963a:	4bcc      	ldr	r3, [pc, #816]	; (800996c <UART_SetConfig+0x69c>)
 800963c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009642:	2b28      	cmp	r3, #40	; 0x28
 8009644:	d86c      	bhi.n	8009720 <UART_SetConfig+0x450>
 8009646:	a201      	add	r2, pc, #4	; (adr r2, 800964c <UART_SetConfig+0x37c>)
 8009648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964c:	080096f1 	.word	0x080096f1
 8009650:	08009721 	.word	0x08009721
 8009654:	08009721 	.word	0x08009721
 8009658:	08009721 	.word	0x08009721
 800965c:	08009721 	.word	0x08009721
 8009660:	08009721 	.word	0x08009721
 8009664:	08009721 	.word	0x08009721
 8009668:	08009721 	.word	0x08009721
 800966c:	080096f9 	.word	0x080096f9
 8009670:	08009721 	.word	0x08009721
 8009674:	08009721 	.word	0x08009721
 8009678:	08009721 	.word	0x08009721
 800967c:	08009721 	.word	0x08009721
 8009680:	08009721 	.word	0x08009721
 8009684:	08009721 	.word	0x08009721
 8009688:	08009721 	.word	0x08009721
 800968c:	08009701 	.word	0x08009701
 8009690:	08009721 	.word	0x08009721
 8009694:	08009721 	.word	0x08009721
 8009698:	08009721 	.word	0x08009721
 800969c:	08009721 	.word	0x08009721
 80096a0:	08009721 	.word	0x08009721
 80096a4:	08009721 	.word	0x08009721
 80096a8:	08009721 	.word	0x08009721
 80096ac:	08009709 	.word	0x08009709
 80096b0:	08009721 	.word	0x08009721
 80096b4:	08009721 	.word	0x08009721
 80096b8:	08009721 	.word	0x08009721
 80096bc:	08009721 	.word	0x08009721
 80096c0:	08009721 	.word	0x08009721
 80096c4:	08009721 	.word	0x08009721
 80096c8:	08009721 	.word	0x08009721
 80096cc:	08009711 	.word	0x08009711
 80096d0:	08009721 	.word	0x08009721
 80096d4:	08009721 	.word	0x08009721
 80096d8:	08009721 	.word	0x08009721
 80096dc:	08009721 	.word	0x08009721
 80096e0:	08009721 	.word	0x08009721
 80096e4:	08009721 	.word	0x08009721
 80096e8:	08009721 	.word	0x08009721
 80096ec:	08009719 	.word	0x08009719
 80096f0:	2301      	movs	r3, #1
 80096f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f6:	e0bc      	b.n	8009872 <UART_SetConfig+0x5a2>
 80096f8:	2304      	movs	r3, #4
 80096fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fe:	e0b8      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009700:	2308      	movs	r3, #8
 8009702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009706:	e0b4      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009708:	2310      	movs	r3, #16
 800970a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970e:	e0b0      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009710:	2320      	movs	r3, #32
 8009712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009716:	e0ac      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009718:	2340      	movs	r3, #64	; 0x40
 800971a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971e:	e0a8      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009720:	2380      	movs	r3, #128	; 0x80
 8009722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009726:	e0a4      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a90      	ldr	r2, [pc, #576]	; (8009970 <UART_SetConfig+0x6a0>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d130      	bne.n	8009794 <UART_SetConfig+0x4c4>
 8009732:	4b8e      	ldr	r3, [pc, #568]	; (800996c <UART_SetConfig+0x69c>)
 8009734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	2b05      	cmp	r3, #5
 800973c:	d826      	bhi.n	800978c <UART_SetConfig+0x4bc>
 800973e:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <UART_SetConfig+0x474>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	0800975d 	.word	0x0800975d
 8009748:	08009765 	.word	0x08009765
 800974c:	0800976d 	.word	0x0800976d
 8009750:	08009775 	.word	0x08009775
 8009754:	0800977d 	.word	0x0800977d
 8009758:	08009785 	.word	0x08009785
 800975c:	2300      	movs	r3, #0
 800975e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009762:	e086      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009764:	2304      	movs	r3, #4
 8009766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800976a:	e082      	b.n	8009872 <UART_SetConfig+0x5a2>
 800976c:	2308      	movs	r3, #8
 800976e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009772:	e07e      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009774:	2310      	movs	r3, #16
 8009776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800977a:	e07a      	b.n	8009872 <UART_SetConfig+0x5a2>
 800977c:	2320      	movs	r3, #32
 800977e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009782:	e076      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009784:	2340      	movs	r3, #64	; 0x40
 8009786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978a:	e072      	b.n	8009872 <UART_SetConfig+0x5a2>
 800978c:	2380      	movs	r3, #128	; 0x80
 800978e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009792:	e06e      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a76      	ldr	r2, [pc, #472]	; (8009974 <UART_SetConfig+0x6a4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d130      	bne.n	8009800 <UART_SetConfig+0x530>
 800979e:	4b73      	ldr	r3, [pc, #460]	; (800996c <UART_SetConfig+0x69c>)
 80097a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d826      	bhi.n	80097f8 <UART_SetConfig+0x528>
 80097aa:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <UART_SetConfig+0x4e0>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	080097c9 	.word	0x080097c9
 80097b4:	080097d1 	.word	0x080097d1
 80097b8:	080097d9 	.word	0x080097d9
 80097bc:	080097e1 	.word	0x080097e1
 80097c0:	080097e9 	.word	0x080097e9
 80097c4:	080097f1 	.word	0x080097f1
 80097c8:	2300      	movs	r3, #0
 80097ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ce:	e050      	b.n	8009872 <UART_SetConfig+0x5a2>
 80097d0:	2304      	movs	r3, #4
 80097d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d6:	e04c      	b.n	8009872 <UART_SetConfig+0x5a2>
 80097d8:	2308      	movs	r3, #8
 80097da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097de:	e048      	b.n	8009872 <UART_SetConfig+0x5a2>
 80097e0:	2310      	movs	r3, #16
 80097e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e6:	e044      	b.n	8009872 <UART_SetConfig+0x5a2>
 80097e8:	2320      	movs	r3, #32
 80097ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ee:	e040      	b.n	8009872 <UART_SetConfig+0x5a2>
 80097f0:	2340      	movs	r3, #64	; 0x40
 80097f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f6:	e03c      	b.n	8009872 <UART_SetConfig+0x5a2>
 80097f8:	2380      	movs	r3, #128	; 0x80
 80097fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fe:	e038      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a5c      	ldr	r2, [pc, #368]	; (8009978 <UART_SetConfig+0x6a8>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d130      	bne.n	800986c <UART_SetConfig+0x59c>
 800980a:	4b58      	ldr	r3, [pc, #352]	; (800996c <UART_SetConfig+0x69c>)
 800980c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980e:	f003 0307 	and.w	r3, r3, #7
 8009812:	2b05      	cmp	r3, #5
 8009814:	d826      	bhi.n	8009864 <UART_SetConfig+0x594>
 8009816:	a201      	add	r2, pc, #4	; (adr r2, 800981c <UART_SetConfig+0x54c>)
 8009818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981c:	08009835 	.word	0x08009835
 8009820:	0800983d 	.word	0x0800983d
 8009824:	08009845 	.word	0x08009845
 8009828:	0800984d 	.word	0x0800984d
 800982c:	08009855 	.word	0x08009855
 8009830:	0800985d 	.word	0x0800985d
 8009834:	2302      	movs	r3, #2
 8009836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983a:	e01a      	b.n	8009872 <UART_SetConfig+0x5a2>
 800983c:	2304      	movs	r3, #4
 800983e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009842:	e016      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009844:	2308      	movs	r3, #8
 8009846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800984a:	e012      	b.n	8009872 <UART_SetConfig+0x5a2>
 800984c:	2310      	movs	r3, #16
 800984e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009852:	e00e      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009854:	2320      	movs	r3, #32
 8009856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985a:	e00a      	b.n	8009872 <UART_SetConfig+0x5a2>
 800985c:	2340      	movs	r3, #64	; 0x40
 800985e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009862:	e006      	b.n	8009872 <UART_SetConfig+0x5a2>
 8009864:	2380      	movs	r3, #128	; 0x80
 8009866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800986a:	e002      	b.n	8009872 <UART_SetConfig+0x5a2>
 800986c:	2380      	movs	r3, #128	; 0x80
 800986e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a40      	ldr	r2, [pc, #256]	; (8009978 <UART_SetConfig+0x6a8>)
 8009878:	4293      	cmp	r3, r2
 800987a:	f040 80ef 	bne.w	8009a5c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800987e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009882:	2b20      	cmp	r3, #32
 8009884:	dc46      	bgt.n	8009914 <UART_SetConfig+0x644>
 8009886:	2b02      	cmp	r3, #2
 8009888:	f2c0 8081 	blt.w	800998e <UART_SetConfig+0x6be>
 800988c:	3b02      	subs	r3, #2
 800988e:	2b1e      	cmp	r3, #30
 8009890:	d87d      	bhi.n	800998e <UART_SetConfig+0x6be>
 8009892:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <UART_SetConfig+0x5c8>)
 8009894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009898:	0800991b 	.word	0x0800991b
 800989c:	0800998f 	.word	0x0800998f
 80098a0:	08009923 	.word	0x08009923
 80098a4:	0800998f 	.word	0x0800998f
 80098a8:	0800998f 	.word	0x0800998f
 80098ac:	0800998f 	.word	0x0800998f
 80098b0:	08009933 	.word	0x08009933
 80098b4:	0800998f 	.word	0x0800998f
 80098b8:	0800998f 	.word	0x0800998f
 80098bc:	0800998f 	.word	0x0800998f
 80098c0:	0800998f 	.word	0x0800998f
 80098c4:	0800998f 	.word	0x0800998f
 80098c8:	0800998f 	.word	0x0800998f
 80098cc:	0800998f 	.word	0x0800998f
 80098d0:	08009943 	.word	0x08009943
 80098d4:	0800998f 	.word	0x0800998f
 80098d8:	0800998f 	.word	0x0800998f
 80098dc:	0800998f 	.word	0x0800998f
 80098e0:	0800998f 	.word	0x0800998f
 80098e4:	0800998f 	.word	0x0800998f
 80098e8:	0800998f 	.word	0x0800998f
 80098ec:	0800998f 	.word	0x0800998f
 80098f0:	0800998f 	.word	0x0800998f
 80098f4:	0800998f 	.word	0x0800998f
 80098f8:	0800998f 	.word	0x0800998f
 80098fc:	0800998f 	.word	0x0800998f
 8009900:	0800998f 	.word	0x0800998f
 8009904:	0800998f 	.word	0x0800998f
 8009908:	0800998f 	.word	0x0800998f
 800990c:	0800998f 	.word	0x0800998f
 8009910:	08009981 	.word	0x08009981
 8009914:	2b40      	cmp	r3, #64	; 0x40
 8009916:	d036      	beq.n	8009986 <UART_SetConfig+0x6b6>
 8009918:	e039      	b.n	800998e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800991a:	f7fc fc1d 	bl	8006158 <HAL_RCCEx_GetD3PCLK1Freq>
 800991e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009920:	e03b      	b.n	800999a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009922:	f107 0314 	add.w	r3, r7, #20
 8009926:	4618      	mov	r0, r3
 8009928:	f7fc fc2c 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009930:	e033      	b.n	800999a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	4618      	mov	r0, r3
 8009938:	f7fc fd78 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009940:	e02b      	b.n	800999a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009942:	4b0a      	ldr	r3, [pc, #40]	; (800996c <UART_SetConfig+0x69c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0320 	and.w	r3, r3, #32
 800994a:	2b00      	cmp	r3, #0
 800994c:	d009      	beq.n	8009962 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800994e:	4b07      	ldr	r3, [pc, #28]	; (800996c <UART_SetConfig+0x69c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	08db      	lsrs	r3, r3, #3
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	4a08      	ldr	r2, [pc, #32]	; (800997c <UART_SetConfig+0x6ac>)
 800995a:	fa22 f303 	lsr.w	r3, r2, r3
 800995e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009960:	e01b      	b.n	800999a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009962:	4b06      	ldr	r3, [pc, #24]	; (800997c <UART_SetConfig+0x6ac>)
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009966:	e018      	b.n	800999a <UART_SetConfig+0x6ca>
 8009968:	40011400 	.word	0x40011400
 800996c:	58024400 	.word	0x58024400
 8009970:	40007800 	.word	0x40007800
 8009974:	40007c00 	.word	0x40007c00
 8009978:	58000c00 	.word	0x58000c00
 800997c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009980:	4bc4      	ldr	r3, [pc, #784]	; (8009c94 <UART_SetConfig+0x9c4>)
 8009982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009984:	e009      	b.n	800999a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800998c:	e005      	b.n	800999a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009998:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 81da 	beq.w	8009d56 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	4abc      	ldr	r2, [pc, #752]	; (8009c98 <UART_SetConfig+0x9c8>)
 80099a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ac:	461a      	mov	r2, r3
 80099ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099b4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	4613      	mov	r3, r2
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4413      	add	r3, r2
 80099c0:	6a3a      	ldr	r2, [r7, #32]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d305      	bcc.n	80099d2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099cc:	6a3a      	ldr	r2, [r7, #32]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d903      	bls.n	80099da <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80099d8:	e1bd      	b.n	8009d56 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	4618      	mov	r0, r3
 80099de:	f04f 0100 	mov.w	r1, #0
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	4aac      	ldr	r2, [pc, #688]	; (8009c98 <UART_SetConfig+0x9c8>)
 80099e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	f04f 0300 	mov.w	r3, #0
 80099f2:	f7f6 fc75 	bl	80002e0 <__aeabi_uldivmod>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4610      	mov	r0, r2
 80099fc:	4619      	mov	r1, r3
 80099fe:	f04f 0200 	mov.w	r2, #0
 8009a02:	f04f 0300 	mov.w	r3, #0
 8009a06:	020b      	lsls	r3, r1, #8
 8009a08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a0c:	0202      	lsls	r2, r0, #8
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	6849      	ldr	r1, [r1, #4]
 8009a12:	0849      	lsrs	r1, r1, #1
 8009a14:	4608      	mov	r0, r1
 8009a16:	f04f 0100 	mov.w	r1, #0
 8009a1a:	1814      	adds	r4, r2, r0
 8009a1c:	eb43 0501 	adc.w	r5, r3, r1
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	461a      	mov	r2, r3
 8009a26:	f04f 0300 	mov.w	r3, #0
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f7f6 fc57 	bl	80002e0 <__aeabi_uldivmod>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4613      	mov	r3, r2
 8009a38:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a40:	d308      	bcc.n	8009a54 <UART_SetConfig+0x784>
 8009a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a48:	d204      	bcs.n	8009a54 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a50:	60da      	str	r2, [r3, #12]
 8009a52:	e180      	b.n	8009d56 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a5a:	e17c      	b.n	8009d56 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a64:	f040 80bf 	bne.w	8009be6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009a68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	dc49      	bgt.n	8009b04 <UART_SetConfig+0x834>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	db7c      	blt.n	8009b6e <UART_SetConfig+0x89e>
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d87a      	bhi.n	8009b6e <UART_SetConfig+0x89e>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <UART_SetConfig+0x7b0>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009b0b 	.word	0x08009b0b
 8009a84:	08009b13 	.word	0x08009b13
 8009a88:	08009b6f 	.word	0x08009b6f
 8009a8c:	08009b6f 	.word	0x08009b6f
 8009a90:	08009b1b 	.word	0x08009b1b
 8009a94:	08009b6f 	.word	0x08009b6f
 8009a98:	08009b6f 	.word	0x08009b6f
 8009a9c:	08009b6f 	.word	0x08009b6f
 8009aa0:	08009b2b 	.word	0x08009b2b
 8009aa4:	08009b6f 	.word	0x08009b6f
 8009aa8:	08009b6f 	.word	0x08009b6f
 8009aac:	08009b6f 	.word	0x08009b6f
 8009ab0:	08009b6f 	.word	0x08009b6f
 8009ab4:	08009b6f 	.word	0x08009b6f
 8009ab8:	08009b6f 	.word	0x08009b6f
 8009abc:	08009b6f 	.word	0x08009b6f
 8009ac0:	08009b3b 	.word	0x08009b3b
 8009ac4:	08009b6f 	.word	0x08009b6f
 8009ac8:	08009b6f 	.word	0x08009b6f
 8009acc:	08009b6f 	.word	0x08009b6f
 8009ad0:	08009b6f 	.word	0x08009b6f
 8009ad4:	08009b6f 	.word	0x08009b6f
 8009ad8:	08009b6f 	.word	0x08009b6f
 8009adc:	08009b6f 	.word	0x08009b6f
 8009ae0:	08009b6f 	.word	0x08009b6f
 8009ae4:	08009b6f 	.word	0x08009b6f
 8009ae8:	08009b6f 	.word	0x08009b6f
 8009aec:	08009b6f 	.word	0x08009b6f
 8009af0:	08009b6f 	.word	0x08009b6f
 8009af4:	08009b6f 	.word	0x08009b6f
 8009af8:	08009b6f 	.word	0x08009b6f
 8009afc:	08009b6f 	.word	0x08009b6f
 8009b00:	08009b61 	.word	0x08009b61
 8009b04:	2b40      	cmp	r3, #64	; 0x40
 8009b06:	d02e      	beq.n	8009b66 <UART_SetConfig+0x896>
 8009b08:	e031      	b.n	8009b6e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b0a:	f7fa fe75 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8009b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b10:	e033      	b.n	8009b7a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b12:	f7fa fe87 	bl	8004824 <HAL_RCC_GetPCLK2Freq>
 8009b16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b18:	e02f      	b.n	8009b7a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b1a:	f107 0314 	add.w	r3, r7, #20
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fc fb30 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b28:	e027      	b.n	8009b7a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fc fc7c 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b38:	e01f      	b.n	8009b7a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b3a:	4b58      	ldr	r3, [pc, #352]	; (8009c9c <UART_SetConfig+0x9cc>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0320 	and.w	r3, r3, #32
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d009      	beq.n	8009b5a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b46:	4b55      	ldr	r3, [pc, #340]	; (8009c9c <UART_SetConfig+0x9cc>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	08db      	lsrs	r3, r3, #3
 8009b4c:	f003 0303 	and.w	r3, r3, #3
 8009b50:	4a53      	ldr	r2, [pc, #332]	; (8009ca0 <UART_SetConfig+0x9d0>)
 8009b52:	fa22 f303 	lsr.w	r3, r2, r3
 8009b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b58:	e00f      	b.n	8009b7a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009b5a:	4b51      	ldr	r3, [pc, #324]	; (8009ca0 <UART_SetConfig+0x9d0>)
 8009b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b5e:	e00c      	b.n	8009b7a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b60:	4b4c      	ldr	r3, [pc, #304]	; (8009c94 <UART_SetConfig+0x9c4>)
 8009b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b64:	e009      	b.n	8009b7a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b6c:	e005      	b.n	8009b7a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 80ea 	beq.w	8009d56 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	4a44      	ldr	r2, [pc, #272]	; (8009c98 <UART_SetConfig+0x9c8>)
 8009b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b94:	005a      	lsls	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	085b      	lsrs	r3, r3, #1
 8009b9c:	441a      	add	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	2b0f      	cmp	r3, #15
 8009bae:	d916      	bls.n	8009bde <UART_SetConfig+0x90e>
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb6:	d212      	bcs.n	8009bde <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	f023 030f 	bic.w	r3, r3, #15
 8009bc0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	085b      	lsrs	r3, r3, #1
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009bda:	60da      	str	r2, [r3, #12]
 8009bdc:	e0bb      	b.n	8009d56 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009be4:	e0b7      	b.n	8009d56 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bea:	2b20      	cmp	r3, #32
 8009bec:	dc4a      	bgt.n	8009c84 <UART_SetConfig+0x9b4>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f2c0 8086 	blt.w	8009d00 <UART_SetConfig+0xa30>
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	f200 8083 	bhi.w	8009d00 <UART_SetConfig+0xa30>
 8009bfa:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <UART_SetConfig+0x930>)
 8009bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c00:	08009c8b 	.word	0x08009c8b
 8009c04:	08009ca5 	.word	0x08009ca5
 8009c08:	08009d01 	.word	0x08009d01
 8009c0c:	08009d01 	.word	0x08009d01
 8009c10:	08009cad 	.word	0x08009cad
 8009c14:	08009d01 	.word	0x08009d01
 8009c18:	08009d01 	.word	0x08009d01
 8009c1c:	08009d01 	.word	0x08009d01
 8009c20:	08009cbd 	.word	0x08009cbd
 8009c24:	08009d01 	.word	0x08009d01
 8009c28:	08009d01 	.word	0x08009d01
 8009c2c:	08009d01 	.word	0x08009d01
 8009c30:	08009d01 	.word	0x08009d01
 8009c34:	08009d01 	.word	0x08009d01
 8009c38:	08009d01 	.word	0x08009d01
 8009c3c:	08009d01 	.word	0x08009d01
 8009c40:	08009ccd 	.word	0x08009ccd
 8009c44:	08009d01 	.word	0x08009d01
 8009c48:	08009d01 	.word	0x08009d01
 8009c4c:	08009d01 	.word	0x08009d01
 8009c50:	08009d01 	.word	0x08009d01
 8009c54:	08009d01 	.word	0x08009d01
 8009c58:	08009d01 	.word	0x08009d01
 8009c5c:	08009d01 	.word	0x08009d01
 8009c60:	08009d01 	.word	0x08009d01
 8009c64:	08009d01 	.word	0x08009d01
 8009c68:	08009d01 	.word	0x08009d01
 8009c6c:	08009d01 	.word	0x08009d01
 8009c70:	08009d01 	.word	0x08009d01
 8009c74:	08009d01 	.word	0x08009d01
 8009c78:	08009d01 	.word	0x08009d01
 8009c7c:	08009d01 	.word	0x08009d01
 8009c80:	08009cf3 	.word	0x08009cf3
 8009c84:	2b40      	cmp	r3, #64	; 0x40
 8009c86:	d037      	beq.n	8009cf8 <UART_SetConfig+0xa28>
 8009c88:	e03a      	b.n	8009d00 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c8a:	f7fa fdb5 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8009c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c90:	e03c      	b.n	8009d0c <UART_SetConfig+0xa3c>
 8009c92:	bf00      	nop
 8009c94:	003d0900 	.word	0x003d0900
 8009c98:	0800e0b0 	.word	0x0800e0b0
 8009c9c:	58024400 	.word	0x58024400
 8009ca0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ca4:	f7fa fdbe 	bl	8004824 <HAL_RCC_GetPCLK2Freq>
 8009ca8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009caa:	e02f      	b.n	8009d0c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cac:	f107 0314 	add.w	r3, r7, #20
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fc fa67 	bl	8006184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cba:	e027      	b.n	8009d0c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cbc:	f107 0308 	add.w	r3, r7, #8
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fc fbb3 	bl	800642c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cca:	e01f      	b.n	8009d0c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ccc:	4b2c      	ldr	r3, [pc, #176]	; (8009d80 <UART_SetConfig+0xab0>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d009      	beq.n	8009cec <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cd8:	4b29      	ldr	r3, [pc, #164]	; (8009d80 <UART_SetConfig+0xab0>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	08db      	lsrs	r3, r3, #3
 8009cde:	f003 0303 	and.w	r3, r3, #3
 8009ce2:	4a28      	ldr	r2, [pc, #160]	; (8009d84 <UART_SetConfig+0xab4>)
 8009ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cea:	e00f      	b.n	8009d0c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009cec:	4b25      	ldr	r3, [pc, #148]	; (8009d84 <UART_SetConfig+0xab4>)
 8009cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cf0:	e00c      	b.n	8009d0c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cf2:	4b25      	ldr	r3, [pc, #148]	; (8009d88 <UART_SetConfig+0xab8>)
 8009cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cf6:	e009      	b.n	8009d0c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cfe:	e005      	b.n	8009d0c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d0a:	bf00      	nop
    }

    if (pclk != 0U)
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d021      	beq.n	8009d56 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	4a1d      	ldr	r2, [pc, #116]	; (8009d8c <UART_SetConfig+0xabc>)
 8009d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	085b      	lsrs	r3, r3, #1
 8009d2a:	441a      	add	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	2b0f      	cmp	r3, #15
 8009d3c:	d908      	bls.n	8009d50 <UART_SetConfig+0xa80>
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d44:	d204      	bcs.n	8009d50 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d4c:	60da      	str	r2, [r3, #12]
 8009d4e:	e002      	b.n	8009d56 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009d72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3738      	adds	r7, #56	; 0x38
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	58024400 	.word	0x58024400
 8009d84:	03d09000 	.word	0x03d09000
 8009d88:	003d0900 	.word	0x003d0900
 8009d8c:	0800e0b0 	.word	0x0800e0b0

08009d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00a      	beq.n	8009dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00a      	beq.n	8009dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e02:	f003 0308 	and.w	r3, r3, #8
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	f003 0310 	and.w	r3, r3, #16
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	f003 0320 	and.w	r3, r3, #32
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d01a      	beq.n	8009ea6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e8e:	d10a      	bne.n	8009ea6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00a      	beq.n	8009ec8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	605a      	str	r2, [r3, #4]
  }
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af02      	add	r7, sp, #8
 8009eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ee4:	f7f7 ffe4 	bl	8001eb0 <HAL_GetTick>
 8009ee8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0308 	and.w	r3, r3, #8
 8009ef4:	2b08      	cmp	r3, #8
 8009ef6:	d10e      	bne.n	8009f16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f82f 	bl	8009f6a <UART_WaitOnFlagUntilTimeout>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f12:	2303      	movs	r3, #3
 8009f14:	e025      	b.n	8009f62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d10e      	bne.n	8009f42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f819 	bl	8009f6a <UART_WaitOnFlagUntilTimeout>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e00f      	b.n	8009f62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	603b      	str	r3, [r7, #0]
 8009f76:	4613      	mov	r3, r2
 8009f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f7a:	e062      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f82:	d05e      	beq.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f84:	f7f7 ff94 	bl	8001eb0 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d302      	bcc.n	8009f9a <UART_WaitOnFlagUntilTimeout+0x30>
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d11d      	bne.n	8009fd6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fa8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689a      	ldr	r2, [r3, #8]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f022 0201 	bic.w	r2, r2, #1
 8009fb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e045      	b.n	800a062 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d02e      	beq.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ff2:	d126      	bne.n	800a042 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ffc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a00c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0201 	bic.w	r2, r2, #1
 800a01c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2220      	movs	r2, #32
 800a022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2220      	movs	r2, #32
 800a02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2220      	movs	r2, #32
 800a032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e00f      	b.n	800a062 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	69da      	ldr	r2, [r3, #28]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4013      	ands	r3, r2
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	429a      	cmp	r2, r3
 800a050:	bf0c      	ite	eq
 800a052:	2301      	moveq	r3, #1
 800a054:	2300      	movne	r3, #0
 800a056:	b2db      	uxtb	r3, r3
 800a058:	461a      	mov	r2, r3
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d08d      	beq.n	8009f7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a082:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6899      	ldr	r1, [r3, #8]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <UART_EndRxTransfer+0x60>)
 800a090:	400b      	ands	r3, r1
 800a092:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d107      	bne.n	800a0ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f022 0210 	bic.w	r2, r2, #16
 800a0aa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	effffffe 	.word	0xeffffffe

0800a0d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f7ff f8d8 	bl	80092a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a112:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7ff f8b4 	bl	8009290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <HAL_UARTEx_DisableFifoMode+0x16>
 800a17e:	2302      	movs	r3, #2
 800a180:	e027      	b.n	800a1d2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2224      	movs	r2, #36	; 0x24
 800a18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f022 0201 	bic.w	r2, r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a1b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d101      	bne.n	800a1f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	e02d      	b.n	800a252 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2224      	movs	r2, #36	; 0x24
 800a202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 0201 	bic.w	r2, r2, #1
 800a21c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f850 	bl	800a2d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2220      	movs	r2, #32
 800a244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d101      	bne.n	800a272 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a26e:	2302      	movs	r3, #2
 800a270:	e02d      	b.n	800a2ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2224      	movs	r2, #36	; 0x24
 800a27e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 0201 	bic.w	r2, r2, #1
 800a298:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f812 	bl	800a2d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2220      	movs	r2, #32
 800a2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d108      	bne.n	800a2fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2f8:	e031      	b.n	800a35e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2fa:	2310      	movs	r3, #16
 800a2fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2fe:	2310      	movs	r3, #16
 800a300:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	0e5b      	lsrs	r3, r3, #25
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	f003 0307 	and.w	r3, r3, #7
 800a310:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	0f5b      	lsrs	r3, r3, #29
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f003 0307 	and.w	r3, r3, #7
 800a320:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	7b3a      	ldrb	r2, [r7, #12]
 800a326:	4911      	ldr	r1, [pc, #68]	; (800a36c <UARTEx_SetNbDataToProcess+0x94>)
 800a328:	5c8a      	ldrb	r2, [r1, r2]
 800a32a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a32e:	7b3a      	ldrb	r2, [r7, #12]
 800a330:	490f      	ldr	r1, [pc, #60]	; (800a370 <UARTEx_SetNbDataToProcess+0x98>)
 800a332:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a334:	fb93 f3f2 	sdiv	r3, r3, r2
 800a338:	b29a      	uxth	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	7b7a      	ldrb	r2, [r7, #13]
 800a344:	4909      	ldr	r1, [pc, #36]	; (800a36c <UARTEx_SetNbDataToProcess+0x94>)
 800a346:	5c8a      	ldrb	r2, [r1, r2]
 800a348:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a34c:	7b7a      	ldrb	r2, [r7, #13]
 800a34e:	4908      	ldr	r1, [pc, #32]	; (800a370 <UARTEx_SetNbDataToProcess+0x98>)
 800a350:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a352:	fb93 f3f2 	sdiv	r3, r3, r2
 800a356:	b29a      	uxth	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a35e:	bf00      	nop
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	0800e0c8 	.word	0x0800e0c8
 800a370:	0800e0d0 	.word	0x0800e0d0

0800a374 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a374:	b084      	sub	sp, #16
 800a376:	b480      	push	{r7}
 800a378:	b085      	sub	sp, #20
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	f107 001c 	add.w	r0, r7, #28
 800a382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a38a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a38c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a38e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a392:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a396:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a39a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <SDMMC_Init+0x50>)
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	b004      	add	sp, #16
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	ffc02c00 	.word	0xffc02c00

0800a3c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b083      	sub	sp, #12
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f043 0203 	orr.w	r2, r3, #3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0303 	and.w	r3, r3, #3
}
 800a414:	4618      	mov	r0, r3
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a43e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a444:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a44a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4313      	orrs	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68da      	ldr	r2, [r3, #12]
 800a456:	4b06      	ldr	r3, [pc, #24]	; (800a470 <SDMMC_SendCommand+0x50>)
 800a458:	4013      	ands	r3, r2
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	431a      	orrs	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	fffee0c0 	.word	0xfffee0c0

0800a474 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	b2db      	uxtb	r3, r3
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a48e:	b480      	push	{r7}
 800a490:	b085      	sub	sp, #20
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	3314      	adds	r3, #20
 800a49c:	461a      	mov	r2, r3
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a4da:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a4e0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a4e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0

}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a51a:	2310      	movs	r3, #16
 800a51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a51e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a524:	2300      	movs	r3, #0
 800a526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a52c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff ff73 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a53a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a53e:	2110      	movs	r1, #16
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fa43 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a548:	69fb      	ldr	r3, [r7, #28]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3720      	adds	r7, #32
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b088      	sub	sp, #32
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a560:	2311      	movs	r3, #17
 800a562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a564:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a56a:	2300      	movs	r3, #0
 800a56c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a56e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a572:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a574:	f107 0308 	add.w	r3, r7, #8
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff ff50 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a580:	f241 3288 	movw	r2, #5000	; 0x1388
 800a584:	2111      	movs	r1, #17
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fa20 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a58c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a58e:	69fb      	ldr	r3, [r7, #28]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3720      	adds	r7, #32
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b088      	sub	sp, #32
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a5a6:	2312      	movs	r3, #18
 800a5a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff ff2d 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a5c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ca:	2112      	movs	r1, #18
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f9fd 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a5d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3720      	adds	r7, #32
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b088      	sub	sp, #32
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a5ec:	2318      	movs	r3, #24
 800a5ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a600:	f107 0308 	add.w	r3, r7, #8
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7ff ff0a 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a60c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a610:	2118      	movs	r1, #24
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f9da 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a61a:	69fb      	ldr	r3, [r7, #28]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3720      	adds	r7, #32
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b088      	sub	sp, #32
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a632:	2319      	movs	r3, #25
 800a634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a63a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a63c:	2300      	movs	r3, #0
 800a63e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a644:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a646:	f107 0308 	add.w	r3, r7, #8
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff fee7 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a652:	f241 3288 	movw	r2, #5000	; 0x1388
 800a656:	2119      	movs	r1, #25
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f9b7 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a65e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a660:	69fb      	ldr	r3, [r7, #28]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3720      	adds	r7, #32
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b088      	sub	sp, #32
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a678:	2307      	movs	r3, #7
 800a67a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a67c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a682:	2300      	movs	r3, #0
 800a684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a68a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a68c:	f107 0308 	add.w	r3, r7, #8
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff fec4 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a698:	f241 3288 	movw	r2, #5000	; 0x1388
 800a69c:	2107      	movs	r1, #7
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f994 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a6a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6a6:	69fb      	ldr	r3, [r7, #28]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3720      	adds	r7, #32
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6ce:	f107 0308 	add.w	r3, r7, #8
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff fea3 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fbb8 	bl	800ae50 <SDMMC_GetCmdError>
 800a6e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6e2:	69fb      	ldr	r3, [r7, #28]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3720      	adds	r7, #32
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a6f4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a6f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a6fa:	2308      	movs	r3, #8
 800a6fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a704:	2300      	movs	r3, #0
 800a706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a70c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a70e:	f107 0308 	add.w	r3, r7, #8
 800a712:	4619      	mov	r1, r3
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7ff fe83 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fb4a 	bl	800adb4 <SDMMC_GetCmdResp7>
 800a720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a722:	69fb      	ldr	r3, [r7, #28]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3720      	adds	r7, #32
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a73a:	2337      	movs	r3, #55	; 0x37
 800a73c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a73e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a744:	2300      	movs	r3, #0
 800a746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a74c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a74e:	f107 0308 	add.w	r3, r7, #8
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff fe63 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a75a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a75e:	2137      	movs	r1, #55	; 0x37
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f933 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a768:	69fb      	ldr	r3, [r7, #28]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3720      	adds	r7, #32
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b088      	sub	sp, #32
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a780:	2329      	movs	r3, #41	; 0x29
 800a782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a784:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a78a:	2300      	movs	r3, #0
 800a78c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a794:	f107 0308 	add.w	r3, r7, #8
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff fe40 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fa4f 	bl	800ac44 <SDMMC_GetCmdResp3>
 800a7a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3720      	adds	r7, #32
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b088      	sub	sp, #32
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a7c0:	2306      	movs	r3, #6
 800a7c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7d4:	f107 0308 	add.w	r3, r7, #8
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff fe20 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a7e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7e4:	2106      	movs	r1, #6
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f8f0 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a7ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ee:	69fb      	ldr	r3, [r7, #28]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3720      	adds	r7, #32
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a800:	2300      	movs	r3, #0
 800a802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a804:	2333      	movs	r3, #51	; 0x33
 800a806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a80c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a80e:	2300      	movs	r3, #0
 800a810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a816:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a818:	f107 0308 	add.w	r3, r7, #8
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff fdfe 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a824:	f241 3288 	movw	r2, #5000	; 0x1388
 800a828:	2133      	movs	r1, #51	; 0x33
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f8ce 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a832:	69fb      	ldr	r3, [r7, #28]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3720      	adds	r7, #32
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a848:	2302      	movs	r3, #2
 800a84a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a84c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a85a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a85c:	f107 0308 	add.w	r3, r7, #8
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff fddc 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f9a1 	bl	800abb0 <SDMMC_GetCmdResp2>
 800a86e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a870:	69fb      	ldr	r3, [r7, #28]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3720      	adds	r7, #32
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b088      	sub	sp, #32
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a888:	2309      	movs	r3, #9
 800a88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a88c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a892:	2300      	movs	r3, #0
 800a894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a89a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff fdbc 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f981 	bl	800abb0 <SDMMC_GetCmdResp2>
 800a8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8b0:	69fb      	ldr	r3, [r7, #28]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3720      	adds	r7, #32
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b088      	sub	sp, #32
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8dc:	f107 0308 	add.w	r3, r7, #8
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff fd9c 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	2103      	movs	r1, #3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f9e9 	bl	800acc4 <SDMMC_GetCmdResp6>
 800a8f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8f4:	69fb      	ldr	r3, [r7, #28]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3720      	adds	r7, #32
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b088      	sub	sp, #32
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a90c:	230d      	movs	r3, #13
 800a90e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a910:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a916:	2300      	movs	r3, #0
 800a918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a91a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a91e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a920:	f107 0308 	add.w	r3, r7, #8
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff fd7a 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a930:	210d      	movs	r1, #13
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f84a 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a93a:	69fb      	ldr	r3, [r7, #28]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a950:	230d      	movs	r3, #13
 800a952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a954:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a95e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a964:	f107 0308 	add.w	r3, r7, #8
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fd58 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a970:	f241 3288 	movw	r2, #5000	; 0x1388
 800a974:	210d      	movs	r1, #13
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f828 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a97e:	69fb      	ldr	r3, [r7, #28]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3720      	adds	r7, #32
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800a990:	2300      	movs	r3, #0
 800a992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800a994:	230b      	movs	r3, #11
 800a996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a99c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9a8:	f107 0308 	add.w	r3, r7, #8
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff fd36 	bl	800a420 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a9b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9b8:	210b      	movs	r1, #11
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f806 	bl	800a9cc <SDMMC_GetCmdResp1>
 800a9c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3720      	adds	r7, #32
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a9da:	4b70      	ldr	r3, [pc, #448]	; (800ab9c <SDMMC_GetCmdResp1+0x1d0>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a70      	ldr	r2, [pc, #448]	; (800aba0 <SDMMC_GetCmdResp1+0x1d4>)
 800a9e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e4:	0a5a      	lsrs	r2, r3, #9
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	fb02 f303 	mul.w	r3, r2, r3
 800a9ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	1e5a      	subs	r2, r3, #1
 800a9f2:	61fa      	str	r2, [r7, #28]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9fc:	e0c9      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa02:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800aa04:	69ba      	ldr	r2, [r7, #24]
 800aa06:	4b67      	ldr	r3, [pc, #412]	; (800aba4 <SDMMC_GetCmdResp1+0x1d8>)
 800aa08:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0ef      	beq.n	800a9ee <SDMMC_GetCmdResp1+0x22>
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1ea      	bne.n	800a9ee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1c:	f003 0304 	and.w	r3, r3, #4
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d004      	beq.n	800aa2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2204      	movs	r2, #4
 800aa28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa2a:	2304      	movs	r3, #4
 800aa2c:	e0b1      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e0a6      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4a58      	ldr	r2, [pc, #352]	; (800aba8 <SDMMC_GetCmdResp1+0x1dc>)
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff fd12 	bl	800a474 <SDMMC_GetCommandResponse>
 800aa50:	4603      	mov	r3, r0
 800aa52:	461a      	mov	r2, r3
 800aa54:	7afb      	ldrb	r3, [r7, #11]
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d001      	beq.n	800aa5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e099      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aa5e:	2100      	movs	r1, #0
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f7ff fd14 	bl	800a48e <SDMMC_GetResponse>
 800aa66:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	4b50      	ldr	r3, [pc, #320]	; (800abac <SDMMC_GetCmdResp1+0x1e0>)
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aa72:	2300      	movs	r3, #0
 800aa74:	e08d      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da02      	bge.n	800aa82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aa7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa80:	e087      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aa8c:	2340      	movs	r3, #64	; 0x40
 800aa8e:	e080      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aa9a:	2380      	movs	r3, #128	; 0x80
 800aa9c:	e079      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aaa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaac:	e071      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aabc:	e069      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aacc:	e061      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aad8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aadc:	e059      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaec:	e051      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aaf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aafc:	e049      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d002      	beq.n	800ab0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab0c:	e041      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab1c:	e039      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab2c:	e031      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab3c:	e029      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab4c:	e021      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d002      	beq.n	800ab5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ab58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ab5c:	e019      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ab68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab6c:	e011      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ab78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab7c:	e009      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f003 0308 	and.w	r3, r3, #8
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d002      	beq.n	800ab8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ab88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ab8c:	e001      	b.n	800ab92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3720      	adds	r7, #32
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	24000000 	.word	0x24000000
 800aba0:	10624dd3 	.word	0x10624dd3
 800aba4:	00200045 	.word	0x00200045
 800aba8:	002000c5 	.word	0x002000c5
 800abac:	fdffe008 	.word	0xfdffe008

0800abb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800abb8:	4b1f      	ldr	r3, [pc, #124]	; (800ac38 <SDMMC_GetCmdResp2+0x88>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a1f      	ldr	r2, [pc, #124]	; (800ac3c <SDMMC_GetCmdResp2+0x8c>)
 800abbe:	fba2 2303 	umull	r2, r3, r2, r3
 800abc2:	0a5b      	lsrs	r3, r3, #9
 800abc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abc8:	fb02 f303 	mul.w	r3, r2, r3
 800abcc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	1e5a      	subs	r2, r3, #1
 800abd2:	60fa      	str	r2, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abdc:	e026      	b.n	800ac2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0ef      	beq.n	800abce <SDMMC_GetCmdResp2+0x1e>
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1ea      	bne.n	800abce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2204      	movs	r2, #4
 800ac08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac0a:	2304      	movs	r3, #4
 800ac0c:	e00e      	b.n	800ac2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac20:	2301      	movs	r3, #1
 800ac22:	e003      	b.n	800ac2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a06      	ldr	r2, [pc, #24]	; (800ac40 <SDMMC_GetCmdResp2+0x90>)
 800ac28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	24000000 	.word	0x24000000
 800ac3c:	10624dd3 	.word	0x10624dd3
 800ac40:	002000c5 	.word	0x002000c5

0800ac44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac4c:	4b1a      	ldr	r3, [pc, #104]	; (800acb8 <SDMMC_GetCmdResp3+0x74>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a1a      	ldr	r2, [pc, #104]	; (800acbc <SDMMC_GetCmdResp3+0x78>)
 800ac52:	fba2 2303 	umull	r2, r3, r2, r3
 800ac56:	0a5b      	lsrs	r3, r3, #9
 800ac58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac5c:	fb02 f303 	mul.w	r3, r2, r3
 800ac60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	1e5a      	subs	r2, r3, #1
 800ac66:	60fa      	str	r2, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d102      	bne.n	800ac72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac70:	e01b      	b.n	800acaa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0ef      	beq.n	800ac62 <SDMMC_GetCmdResp3+0x1e>
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1ea      	bne.n	800ac62 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2204      	movs	r2, #4
 800ac9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac9e:	2304      	movs	r3, #4
 800aca0:	e003      	b.n	800acaa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a06      	ldr	r2, [pc, #24]	; (800acc0 <SDMMC_GetCmdResp3+0x7c>)
 800aca6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	24000000 	.word	0x24000000
 800acbc:	10624dd3 	.word	0x10624dd3
 800acc0:	002000c5 	.word	0x002000c5

0800acc4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	460b      	mov	r3, r1
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800acd2:	4b35      	ldr	r3, [pc, #212]	; (800ada8 <SDMMC_GetCmdResp6+0xe4>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a35      	ldr	r2, [pc, #212]	; (800adac <SDMMC_GetCmdResp6+0xe8>)
 800acd8:	fba2 2303 	umull	r2, r3, r2, r3
 800acdc:	0a5b      	lsrs	r3, r3, #9
 800acde:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace2:	fb02 f303 	mul.w	r3, r2, r3
 800ace6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	1e5a      	subs	r2, r3, #1
 800acec:	61fa      	str	r2, [r7, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d102      	bne.n	800acf8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acf6:	e052      	b.n	800ad9e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d0ef      	beq.n	800ace8 <SDMMC_GetCmdResp6+0x24>
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1ea      	bne.n	800ace8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d004      	beq.n	800ad28 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2204      	movs	r2, #4
 800ad22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad24:	2304      	movs	r3, #4
 800ad26:	e03a      	b.n	800ad9e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e02f      	b.n	800ad9e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f7ff fb98 	bl	800a474 <SDMMC_GetCommandResponse>
 800ad44:	4603      	mov	r3, r0
 800ad46:	461a      	mov	r2, r3
 800ad48:	7afb      	ldrb	r3, [r7, #11]
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d001      	beq.n	800ad52 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e025      	b.n	800ad9e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	4a16      	ldr	r2, [pc, #88]	; (800adb0 <SDMMC_GetCmdResp6+0xec>)
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ad58:	2100      	movs	r1, #0
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7ff fb97 	bl	800a48e <SDMMC_GetResponse>
 800ad60:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	0c1b      	lsrs	r3, r3, #16
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e011      	b.n	800ad9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ad84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad88:	e009      	b.n	800ad9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad98:	e001      	b.n	800ad9e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3720      	adds	r7, #32
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	24000000 	.word	0x24000000
 800adac:	10624dd3 	.word	0x10624dd3
 800adb0:	002000c5 	.word	0x002000c5

0800adb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800adbc:	4b22      	ldr	r3, [pc, #136]	; (800ae48 <SDMMC_GetCmdResp7+0x94>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a22      	ldr	r2, [pc, #136]	; (800ae4c <SDMMC_GetCmdResp7+0x98>)
 800adc2:	fba2 2303 	umull	r2, r3, r2, r3
 800adc6:	0a5b      	lsrs	r3, r3, #9
 800adc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adcc:	fb02 f303 	mul.w	r3, r2, r3
 800add0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	1e5a      	subs	r2, r3, #1
 800add6:	60fa      	str	r2, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800addc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ade0:	e02c      	b.n	800ae3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0ef      	beq.n	800add2 <SDMMC_GetCmdResp7+0x1e>
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1ea      	bne.n	800add2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2204      	movs	r2, #4
 800ae0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae0e:	2304      	movs	r3, #4
 800ae10:	e014      	b.n	800ae3c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e009      	b.n	800ae3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2240      	movs	r2, #64	; 0x40
 800ae38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae3a:	2300      	movs	r3, #0

}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	24000000 	.word	0x24000000
 800ae4c:	10624dd3 	.word	0x10624dd3

0800ae50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae58:	4b11      	ldr	r3, [pc, #68]	; (800aea0 <SDMMC_GetCmdError+0x50>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a11      	ldr	r2, [pc, #68]	; (800aea4 <SDMMC_GetCmdError+0x54>)
 800ae5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae62:	0a5b      	lsrs	r3, r3, #9
 800ae64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae68:	fb02 f303 	mul.w	r3, r2, r3
 800ae6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	1e5a      	subs	r2, r3, #1
 800ae72:	60fa      	str	r2, [r7, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d102      	bne.n	800ae7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae7c:	e009      	b.n	800ae92 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0f1      	beq.n	800ae6e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a06      	ldr	r2, [pc, #24]	; (800aea8 <SDMMC_GetCmdError+0x58>)
 800ae8e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	24000000 	.word	0x24000000
 800aea4:	10624dd3 	.word	0x10624dd3
 800aea8:	002000c5 	.word	0x002000c5

0800aeac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aeb0:	4904      	ldr	r1, [pc, #16]	; (800aec4 <MX_FATFS_Init+0x18>)
 800aeb2:	4805      	ldr	r0, [pc, #20]	; (800aec8 <MX_FATFS_Init+0x1c>)
 800aeb4:	f000 fa54 	bl	800b360 <FATFS_LinkDriver>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	461a      	mov	r2, r3
 800aebc:	4b03      	ldr	r3, [pc, #12]	; (800aecc <MX_FATFS_Init+0x20>)
 800aebe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aec0:	bf00      	nop
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	240063c4 	.word	0x240063c4
 800aec8:	0800e0d8 	.word	0x0800e0d8
 800aecc:	240063c0 	.word	0x240063c0

0800aed0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aeda:	f000 f863 	bl	800afa4 <BSP_SD_IsDetected>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d001      	beq.n	800aee8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800aee4:	2302      	movs	r3, #2
 800aee6:	e005      	b.n	800aef4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800aee8:	4804      	ldr	r0, [pc, #16]	; (800aefc <BSP_SD_Init+0x2c>)
 800aeea:	f7fc f8fb 	bl	80070e4 <HAL_SD_Init>
 800aeee:	4603      	mov	r3, r0
 800aef0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800aef2:	79fb      	ldrb	r3, [r7, #7]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	24004164 	.word	0x24004164

0800af00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	68f9      	ldr	r1, [r7, #12]
 800af16:	4806      	ldr	r0, [pc, #24]	; (800af30 <BSP_SD_ReadBlocks_DMA+0x30>)
 800af18:	f7fc fa10 	bl	800733c <HAL_SD_ReadBlocks_DMA>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af26:	7dfb      	ldrb	r3, [r7, #23]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3718      	adds	r7, #24
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	24004164 	.word	0x24004164

0800af34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	68f9      	ldr	r1, [r7, #12]
 800af4a:	4806      	ldr	r0, [pc, #24]	; (800af64 <BSP_SD_WriteBlocks_DMA+0x30>)
 800af4c:	f7fc fa9e 	bl	800748c <HAL_SD_WriteBlocks_DMA>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	24004164 	.word	0x24004164

0800af68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af6c:	4805      	ldr	r0, [pc, #20]	; (800af84 <BSP_SD_GetCardState+0x1c>)
 800af6e:	f7fc fedb 	bl	8007d28 <HAL_SD_GetCardState>
 800af72:	4603      	mov	r3, r0
 800af74:	2b04      	cmp	r3, #4
 800af76:	bf14      	ite	ne
 800af78:	2301      	movne	r3, #1
 800af7a:	2300      	moveq	r3, #0
 800af7c:	b2db      	uxtb	r3, r3
}
 800af7e:	4618      	mov	r0, r3
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	24004164 	.word	0x24004164

0800af88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	4803      	ldr	r0, [pc, #12]	; (800afa0 <BSP_SD_GetCardInfo+0x18>)
 800af94:	f7fc fd88 	bl	8007aa8 <HAL_SD_GetCardInfo>
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	24004164 	.word	0x24004164

0800afa4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800afaa:	2301      	movs	r3, #1
 800afac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800afae:	79fb      	ldrb	r3, [r7, #7]
 800afb0:	b2db      	uxtb	r3, r3
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800afc6:	f000 fa17 	bl	800b3f8 <osKernelSysTick>
 800afca:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800afcc:	e006      	b.n	800afdc <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800afce:	f7ff ffcb 	bl	800af68 <BSP_SD_GetCardState>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	e009      	b.n	800aff0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800afdc:	f000 fa0c 	bl	800b3f8 <osKernelSysTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d8f0      	bhi.n	800afce <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800afec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b002:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <SD_CheckStatus+0x38>)
 800b004:	2201      	movs	r2, #1
 800b006:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b008:	f7ff ffae 	bl	800af68 <BSP_SD_GetCardState>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d107      	bne.n	800b022 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b012:	4b07      	ldr	r3, [pc, #28]	; (800b030 <SD_CheckStatus+0x38>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	b2db      	uxtb	r3, r3
 800b018:	f023 0301 	bic.w	r3, r3, #1
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	4b04      	ldr	r3, [pc, #16]	; (800b030 <SD_CheckStatus+0x38>)
 800b020:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b022:	4b03      	ldr	r3, [pc, #12]	; (800b030 <SD_CheckStatus+0x38>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	b2db      	uxtb	r3, r3
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	2400000d 	.word	0x2400000d

0800b034 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b034:	b590      	push	{r4, r7, lr}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b03e:	4b20      	ldr	r3, [pc, #128]	; (800b0c0 <SD_initialize+0x8c>)
 800b040:	2201      	movs	r2, #1
 800b042:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b044:	f000 f9cc 	bl	800b3e0 <osKernelRunning>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d030      	beq.n	800b0b0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b04e:	f7ff ff3f 	bl	800aed0 <BSP_SD_Init>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d107      	bne.n	800b068 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b058:	79fb      	ldrb	r3, [r7, #7]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff ffcc 	bl	800aff8 <SD_CheckStatus>
 800b060:	4603      	mov	r3, r0
 800b062:	461a      	mov	r2, r3
 800b064:	4b16      	ldr	r3, [pc, #88]	; (800b0c0 <SD_initialize+0x8c>)
 800b066:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b068:	4b15      	ldr	r3, [pc, #84]	; (800b0c0 <SD_initialize+0x8c>)
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d01e      	beq.n	800b0b0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b072:	4b14      	ldr	r3, [pc, #80]	; (800b0c4 <SD_initialize+0x90>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10e      	bne.n	800b098 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b07a:	4b13      	ldr	r3, [pc, #76]	; (800b0c8 <SD_initialize+0x94>)
 800b07c:	f107 0408 	add.w	r4, r7, #8
 800b080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b086:	f107 0308 	add.w	r3, r7, #8
 800b08a:	2100      	movs	r1, #0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 fa23 	bl	800b4d8 <osMessageCreate>
 800b092:	4603      	mov	r3, r0
 800b094:	4a0b      	ldr	r2, [pc, #44]	; (800b0c4 <SD_initialize+0x90>)
 800b096:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b098:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <SD_initialize+0x90>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d107      	bne.n	800b0b0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b0a0:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <SD_initialize+0x8c>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	4b04      	ldr	r3, [pc, #16]	; (800b0c0 <SD_initialize+0x8c>)
 800b0ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b0b0:	4b03      	ldr	r3, [pc, #12]	; (800b0c0 <SD_initialize+0x8c>)
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	b2db      	uxtb	r3, r3
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd90      	pop	{r4, r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	2400000d 	.word	0x2400000d
 800b0c4:	240002f0 	.word	0x240002f0
 800b0c8:	0800e088 	.word	0x0800e088

0800b0cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b0d6:	79fb      	ldrb	r3, [r7, #7]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7ff ff8d 	bl	800aff8 <SD_CheckStatus>
 800b0de:	4603      	mov	r3, r0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08a      	sub	sp, #40	; 0x28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
 800b0f2:	603b      	str	r3, [r7, #0]
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b0fe:	f247 5030 	movw	r0, #30000	; 0x7530
 800b102:	f7ff ff5c 	bl	800afbe <SD_CheckStatusWithTimeout>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da02      	bge.n	800b112 <SD_read+0x2a>
  {
    return res;
 800b10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b110:	e032      	b.n	800b178 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	68b8      	ldr	r0, [r7, #8]
 800b118:	f7ff fef2 	bl	800af00 <BSP_SD_ReadBlocks_DMA>
 800b11c:	4603      	mov	r3, r0
 800b11e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b122:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b126:	2b00      	cmp	r3, #0
 800b128:	d124      	bne.n	800b174 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b12a:	4b15      	ldr	r3, [pc, #84]	; (800b180 <SD_read+0x98>)
 800b12c:	6819      	ldr	r1, [r3, #0]
 800b12e:	f107 0314 	add.w	r3, r7, #20
 800b132:	f247 5230 	movw	r2, #30000	; 0x7530
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f9f6 	bl	800b528 <osMessageGet>

    if (event.status == osEventMessage)
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	2b10      	cmp	r3, #16
 800b140:	d118      	bne.n	800b174 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d115      	bne.n	800b174 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b148:	f000 f956 	bl	800b3f8 <osKernelSysTick>
 800b14c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b14e:	e008      	b.n	800b162 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b150:	f7ff ff0a 	bl	800af68 <BSP_SD_GetCardState>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d103      	bne.n	800b162 <SD_read+0x7a>
              {
                res = RES_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b160:	e008      	b.n	800b174 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b162:	f000 f949 	bl	800b3f8 <osKernelSysTick>
 800b166:	4602      	mov	r2, r0
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b170:	4293      	cmp	r3, r2
 800b172:	d9ed      	bls.n	800b150 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3728      	adds	r7, #40	; 0x28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	240002f0 	.word	0x240002f0

0800b184 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b08a      	sub	sp, #40	; 0x28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60b9      	str	r1, [r7, #8]
 800b18c:	607a      	str	r2, [r7, #4]
 800b18e:	603b      	str	r3, [r7, #0]
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b19a:	f247 5030 	movw	r0, #30000	; 0x7530
 800b19e:	f7ff ff0e 	bl	800afbe <SD_CheckStatusWithTimeout>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	da02      	bge.n	800b1ae <SD_write+0x2a>
  {
    return res;
 800b1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1ac:	e02e      	b.n	800b20c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	6879      	ldr	r1, [r7, #4]
 800b1b2:	68b8      	ldr	r0, [r7, #8]
 800b1b4:	f7ff febe 	bl	800af34 <BSP_SD_WriteBlocks_DMA>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d124      	bne.n	800b208 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b1be:	4b15      	ldr	r3, [pc, #84]	; (800b214 <SD_write+0x90>)
 800b1c0:	6819      	ldr	r1, [r3, #0]
 800b1c2:	f107 0314 	add.w	r3, r7, #20
 800b1c6:	f247 5230 	movw	r2, #30000	; 0x7530
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 f9ac 	bl	800b528 <osMessageGet>

    if (event.status == osEventMessage)
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2b10      	cmp	r3, #16
 800b1d4:	d118      	bne.n	800b208 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d115      	bne.n	800b208 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b1dc:	f000 f90c 	bl	800b3f8 <osKernelSysTick>
 800b1e0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b1e2:	e008      	b.n	800b1f6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1e4:	f7ff fec0 	bl	800af68 <BSP_SD_GetCardState>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d103      	bne.n	800b1f6 <SD_write+0x72>
          {
            res = RES_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b1f4:	e008      	b.n	800b208 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b1f6:	f000 f8ff 	bl	800b3f8 <osKernelSysTick>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	f247 522f 	movw	r2, #29999	; 0x752f
 800b204:	4293      	cmp	r3, r2
 800b206:	d9ed      	bls.n	800b1e4 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3728      	adds	r7, #40	; 0x28
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	240002f0 	.word	0x240002f0

0800b218 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08c      	sub	sp, #48	; 0x30
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	603a      	str	r2, [r7, #0]
 800b222:	71fb      	strb	r3, [r7, #7]
 800b224:	460b      	mov	r3, r1
 800b226:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b22e:	4b25      	ldr	r3, [pc, #148]	; (800b2c4 <SD_ioctl+0xac>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <SD_ioctl+0x28>
 800b23c:	2303      	movs	r3, #3
 800b23e:	e03c      	b.n	800b2ba <SD_ioctl+0xa2>

  switch (cmd)
 800b240:	79bb      	ldrb	r3, [r7, #6]
 800b242:	2b03      	cmp	r3, #3
 800b244:	d834      	bhi.n	800b2b0 <SD_ioctl+0x98>
 800b246:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <SD_ioctl+0x34>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b25d 	.word	0x0800b25d
 800b250:	0800b265 	.word	0x0800b265
 800b254:	0800b27d 	.word	0x0800b27d
 800b258:	0800b297 	.word	0x0800b297
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b262:	e028      	b.n	800b2b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b264:	f107 0308 	add.w	r3, r7, #8
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fe8d 	bl	800af88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b26e:	6a3a      	ldr	r2, [r7, #32]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b27a:	e01c      	b.n	800b2b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b27c:	f107 0308 	add.w	r3, r7, #8
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fe81 	bl	800af88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	b29a      	uxth	r2, r3
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b294:	e00f      	b.n	800b2b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b296:	f107 0308 	add.w	r3, r7, #8
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff fe74 	bl	800af88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	0a5a      	lsrs	r2, r3, #9
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b2ae:	e002      	b.n	800b2b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b2b0:	2304      	movs	r3, #4
 800b2b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3730      	adds	r7, #48	; 0x30
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	2400000d 	.word	0x2400000d

0800b2c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b2de:	4b1f      	ldr	r3, [pc, #124]	; (800b35c <FATFS_LinkDriverEx+0x94>)
 800b2e0:	7a5b      	ldrb	r3, [r3, #9]
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d131      	bne.n	800b34c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b2e8:	4b1c      	ldr	r3, [pc, #112]	; (800b35c <FATFS_LinkDriverEx+0x94>)
 800b2ea:	7a5b      	ldrb	r3, [r3, #9]
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	4b1a      	ldr	r3, [pc, #104]	; (800b35c <FATFS_LinkDriverEx+0x94>)
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b2f6:	4b19      	ldr	r3, [pc, #100]	; (800b35c <FATFS_LinkDriverEx+0x94>)
 800b2f8:	7a5b      	ldrb	r3, [r3, #9]
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	4a17      	ldr	r2, [pc, #92]	; (800b35c <FATFS_LinkDriverEx+0x94>)
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b306:	4b15      	ldr	r3, [pc, #84]	; (800b35c <FATFS_LinkDriverEx+0x94>)
 800b308:	7a5b      	ldrb	r3, [r3, #9]
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	461a      	mov	r2, r3
 800b30e:	4b13      	ldr	r3, [pc, #76]	; (800b35c <FATFS_LinkDriverEx+0x94>)
 800b310:	4413      	add	r3, r2
 800b312:	79fa      	ldrb	r2, [r7, #7]
 800b314:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b316:	4b11      	ldr	r3, [pc, #68]	; (800b35c <FATFS_LinkDriverEx+0x94>)
 800b318:	7a5b      	ldrb	r3, [r3, #9]
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	b2d1      	uxtb	r1, r2
 800b320:	4a0e      	ldr	r2, [pc, #56]	; (800b35c <FATFS_LinkDriverEx+0x94>)
 800b322:	7251      	strb	r1, [r2, #9]
 800b324:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b326:	7dbb      	ldrb	r3, [r7, #22]
 800b328:	3330      	adds	r3, #48	; 0x30
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	3301      	adds	r3, #1
 800b334:	223a      	movs	r2, #58	; 0x3a
 800b336:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	3302      	adds	r3, #2
 800b33c:	222f      	movs	r2, #47	; 0x2f
 800b33e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	3303      	adds	r3, #3
 800b344:	2200      	movs	r2, #0
 800b346:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b348:	2300      	movs	r3, #0
 800b34a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	240002f4 	.word	0x240002f4

0800b360 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b36a:	2200      	movs	r2, #0
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff ffaa 	bl	800b2c8 <FATFS_LinkDriverEx>
 800b374:	4603      	mov	r3, r0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b37e:	b480      	push	{r7}
 800b380:	b085      	sub	sp, #20
 800b382:	af00      	add	r7, sp, #0
 800b384:	4603      	mov	r3, r0
 800b386:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b388:	2300      	movs	r3, #0
 800b38a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b38c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b390:	2b84      	cmp	r3, #132	; 0x84
 800b392:	d005      	beq.n	800b3a0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b394:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4413      	add	r3, r2
 800b39c:	3303      	adds	r3, #3
 800b39e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3714      	adds	r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b4:	f3ef 8305 	mrs	r3, IPSR
 800b3b8:	607b      	str	r3, [r7, #4]
  return(result);
 800b3ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	bf14      	ite	ne
 800b3c0:	2301      	movne	r3, #1
 800b3c2:	2300      	moveq	r3, #0
 800b3c4:	b2db      	uxtb	r3, r3
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b3d6:	f001 faf7 	bl	800c9c8 <vTaskStartScheduler>
  
  return osOK;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800b3e4:	f001 ff10 	bl	800d208 <xTaskGetSchedulerState>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d101      	bne.n	800b3f2 <osKernelRunning+0x12>
    return 0;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	e000      	b.n	800b3f4 <osKernelRunning+0x14>
  else
    return 1;
 800b3f2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b3fc:	f7ff ffd7 	bl	800b3ae <inHandlerMode>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b406:	f001 fbf9 	bl	800cbfc <xTaskGetTickCountFromISR>
 800b40a:	4603      	mov	r3, r0
 800b40c:	e002      	b.n	800b414 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b40e:	f001 fbe5 	bl	800cbdc <xTaskGetTickCount>
 800b412:	4603      	mov	r3, r0
  }
}
 800b414:	4618      	mov	r0, r3
 800b416:	bd80      	pop	{r7, pc}

0800b418 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41a:	b089      	sub	sp, #36	; 0x24
 800b41c:	af04      	add	r7, sp, #16
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d020      	beq.n	800b46c <osThreadCreate+0x54>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	699b      	ldr	r3, [r3, #24]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d01c      	beq.n	800b46c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	685c      	ldr	r4, [r3, #4]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681d      	ldr	r5, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691e      	ldr	r6, [r3, #16]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff ff9a 	bl	800b37e <makeFreeRtosPriority>
 800b44a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	695b      	ldr	r3, [r3, #20]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b454:	9202      	str	r2, [sp, #8]
 800b456:	9301      	str	r3, [sp, #4]
 800b458:	9100      	str	r1, [sp, #0]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	4632      	mov	r2, r6
 800b45e:	4629      	mov	r1, r5
 800b460:	4620      	mov	r0, r4
 800b462:	f001 f8e9 	bl	800c638 <xTaskCreateStatic>
 800b466:	4603      	mov	r3, r0
 800b468:	60fb      	str	r3, [r7, #12]
 800b46a:	e01c      	b.n	800b4a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685c      	ldr	r4, [r3, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b478:	b29e      	uxth	r6, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff ff7c 	bl	800b37e <makeFreeRtosPriority>
 800b486:	4602      	mov	r2, r0
 800b488:	f107 030c 	add.w	r3, r7, #12
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	9200      	str	r2, [sp, #0]
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	4632      	mov	r2, r6
 800b494:	4629      	mov	r1, r5
 800b496:	4620      	mov	r0, r4
 800b498:	f001 f92b 	bl	800c6f2 <xTaskCreate>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d001      	beq.n	800b4a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	e000      	b.n	800b4a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <osDelay+0x16>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	e000      	b.n	800b4c8 <osDelay+0x18>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f001 fa49 	bl	800c960 <vTaskDelay>
  
  return osOK;
 800b4ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b4d8:	b590      	push	{r4, r7, lr}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af02      	add	r7, sp, #8
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d011      	beq.n	800b50e <osMessageCreate+0x36>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00d      	beq.n	800b50e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6818      	ldr	r0, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6859      	ldr	r1, [r3, #4]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	689a      	ldr	r2, [r3, #8]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	2400      	movs	r4, #0
 800b504:	9400      	str	r4, [sp, #0]
 800b506:	f000 fdd7 	bl	800c0b8 <xQueueGenericCreateStatic>
 800b50a:	4603      	mov	r3, r0
 800b50c:	e008      	b.n	800b520 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	4619      	mov	r1, r3
 800b51a:	f000 fe45 	bl	800c1a8 <xQueueGenericCreate>
 800b51e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b520:	4618      	mov	r0, r3
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	bd90      	pop	{r4, r7, pc}

0800b528 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b528:	b590      	push	{r4, r7, lr}
 800b52a:	b08b      	sub	sp, #44	; 0x2c
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b542:	2380      	movs	r3, #128	; 0x80
 800b544:	617b      	str	r3, [r7, #20]
    return event;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	461c      	mov	r4, r3
 800b54a:	f107 0314 	add.w	r3, r7, #20
 800b54e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b556:	e054      	b.n	800b602 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b558:	2300      	movs	r3, #0
 800b55a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b566:	d103      	bne.n	800b570 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b568:	f04f 33ff 	mov.w	r3, #4294967295
 800b56c:	627b      	str	r3, [r7, #36]	; 0x24
 800b56e:	e009      	b.n	800b584 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d006      	beq.n	800b584 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <osMessageGet+0x5c>
      ticks = 1;
 800b580:	2301      	movs	r3, #1
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b584:	f7ff ff13 	bl	800b3ae <inHandlerMode>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d01c      	beq.n	800b5c8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b58e:	f107 0220 	add.w	r2, r7, #32
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	3304      	adds	r3, #4
 800b598:	4619      	mov	r1, r3
 800b59a:	68b8      	ldr	r0, [r7, #8]
 800b59c:	f000 ff3e 	bl	800c41c <xQueueReceiveFromISR>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d102      	bne.n	800b5ac <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b5a6:	2310      	movs	r3, #16
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	e001      	b.n	800b5b0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d01d      	beq.n	800b5f2 <osMessageGet+0xca>
 800b5b6:	4b15      	ldr	r3, [pc, #84]	; (800b60c <osMessageGet+0xe4>)
 800b5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	e014      	b.n	800b5f2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b5c8:	f107 0314 	add.w	r3, r7, #20
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	68b8      	ldr	r0, [r7, #8]
 800b5d4:	f000 fe42 	bl	800c25c <xQueueReceive>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d102      	bne.n	800b5e4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b5de:	2310      	movs	r3, #16
 800b5e0:	617b      	str	r3, [r7, #20]
 800b5e2:	e006      	b.n	800b5f2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <osMessageGet+0xc6>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	e000      	b.n	800b5f0 <osMessageGet+0xc8>
 800b5ee:	2340      	movs	r3, #64	; 0x40
 800b5f0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	461c      	mov	r4, r3
 800b5f6:	f107 0314 	add.w	r3, r7, #20
 800b5fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	372c      	adds	r7, #44	; 0x2c
 800b606:	46bd      	mov	sp, r7
 800b608:	bd90      	pop	{r4, r7, pc}
 800b60a:	bf00      	nop
 800b60c:	e000ed04 	.word	0xe000ed04

0800b610 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08a      	sub	sp, #40	; 0x28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b618:	2300      	movs	r3, #0
 800b61a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b61c:	f001 fa34 	bl	800ca88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b620:	4b5b      	ldr	r3, [pc, #364]	; (800b790 <pvPortMalloc+0x180>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b628:	f000 f920 	bl	800b86c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b62c:	4b59      	ldr	r3, [pc, #356]	; (800b794 <pvPortMalloc+0x184>)
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4013      	ands	r3, r2
 800b634:	2b00      	cmp	r3, #0
 800b636:	f040 8093 	bne.w	800b760 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01d      	beq.n	800b67c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b640:	2208      	movs	r2, #8
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4413      	add	r3, r2
 800b646:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f003 0307 	and.w	r3, r3, #7
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d014      	beq.n	800b67c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f023 0307 	bic.w	r3, r3, #7
 800b658:	3308      	adds	r3, #8
 800b65a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f003 0307 	and.w	r3, r3, #7
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b678:	bf00      	nop
 800b67a:	e7fe      	b.n	800b67a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d06e      	beq.n	800b760 <pvPortMalloc+0x150>
 800b682:	4b45      	ldr	r3, [pc, #276]	; (800b798 <pvPortMalloc+0x188>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d869      	bhi.n	800b760 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b68c:	4b43      	ldr	r3, [pc, #268]	; (800b79c <pvPortMalloc+0x18c>)
 800b68e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b690:	4b42      	ldr	r3, [pc, #264]	; (800b79c <pvPortMalloc+0x18c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b696:	e004      	b.n	800b6a2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d903      	bls.n	800b6b4 <pvPortMalloc+0xa4>
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1f1      	bne.n	800b698 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6b4:	4b36      	ldr	r3, [pc, #216]	; (800b790 <pvPortMalloc+0x180>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d050      	beq.n	800b760 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2208      	movs	r2, #8
 800b6c4:	4413      	add	r3, r2
 800b6c6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
 800b6ce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	685a      	ldr	r2, [r3, #4]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	1ad2      	subs	r2, r2, r3
 800b6d8:	2308      	movs	r3, #8
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d91f      	bls.n	800b720 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	f003 0307 	and.w	r3, r3, #7
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00a      	beq.n	800b708 <pvPortMalloc+0xf8>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	613b      	str	r3, [r7, #16]
}
 800b704:	bf00      	nop
 800b706:	e7fe      	b.n	800b706 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b71a:	69b8      	ldr	r0, [r7, #24]
 800b71c:	f000 f908 	bl	800b930 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b720:	4b1d      	ldr	r3, [pc, #116]	; (800b798 <pvPortMalloc+0x188>)
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	4a1b      	ldr	r2, [pc, #108]	; (800b798 <pvPortMalloc+0x188>)
 800b72c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b72e:	4b1a      	ldr	r3, [pc, #104]	; (800b798 <pvPortMalloc+0x188>)
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	4b1b      	ldr	r3, [pc, #108]	; (800b7a0 <pvPortMalloc+0x190>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	429a      	cmp	r2, r3
 800b738:	d203      	bcs.n	800b742 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b73a:	4b17      	ldr	r3, [pc, #92]	; (800b798 <pvPortMalloc+0x188>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a18      	ldr	r2, [pc, #96]	; (800b7a0 <pvPortMalloc+0x190>)
 800b740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	4b13      	ldr	r3, [pc, #76]	; (800b794 <pvPortMalloc+0x184>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	431a      	orrs	r2, r3
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b756:	4b13      	ldr	r3, [pc, #76]	; (800b7a4 <pvPortMalloc+0x194>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	3301      	adds	r3, #1
 800b75c:	4a11      	ldr	r2, [pc, #68]	; (800b7a4 <pvPortMalloc+0x194>)
 800b75e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b760:	f001 f9a0 	bl	800caa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	f003 0307 	and.w	r3, r3, #7
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00a      	beq.n	800b784 <pvPortMalloc+0x174>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	60fb      	str	r3, [r7, #12]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <pvPortMalloc+0x172>
	return pvReturn;
 800b784:	69fb      	ldr	r3, [r7, #28]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3728      	adds	r7, #40	; 0x28
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	24003f08 	.word	0x24003f08
 800b794:	24003f1c 	.word	0x24003f1c
 800b798:	24003f0c 	.word	0x24003f0c
 800b79c:	24003f00 	.word	0x24003f00
 800b7a0:	24003f10 	.word	0x24003f10
 800b7a4:	24003f14 	.word	0x24003f14

0800b7a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d04d      	beq.n	800b856 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7ba:	2308      	movs	r3, #8
 800b7bc:	425b      	negs	r3, r3
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	4b24      	ldr	r3, [pc, #144]	; (800b860 <vPortFree+0xb8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10a      	bne.n	800b7ec <vPortFree+0x44>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	60fb      	str	r3, [r7, #12]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00a      	beq.n	800b80a <vPortFree+0x62>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	60bb      	str	r3, [r7, #8]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	4b14      	ldr	r3, [pc, #80]	; (800b860 <vPortFree+0xb8>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4013      	ands	r3, r2
 800b814:	2b00      	cmp	r3, #0
 800b816:	d01e      	beq.n	800b856 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d11a      	bne.n	800b856 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	4b0e      	ldr	r3, [pc, #56]	; (800b860 <vPortFree+0xb8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	43db      	mvns	r3, r3
 800b82a:	401a      	ands	r2, r3
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b830:	f001 f92a 	bl	800ca88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	685a      	ldr	r2, [r3, #4]
 800b838:	4b0a      	ldr	r3, [pc, #40]	; (800b864 <vPortFree+0xbc>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4413      	add	r3, r2
 800b83e:	4a09      	ldr	r2, [pc, #36]	; (800b864 <vPortFree+0xbc>)
 800b840:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b842:	6938      	ldr	r0, [r7, #16]
 800b844:	f000 f874 	bl	800b930 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b848:	4b07      	ldr	r3, [pc, #28]	; (800b868 <vPortFree+0xc0>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3301      	adds	r3, #1
 800b84e:	4a06      	ldr	r2, [pc, #24]	; (800b868 <vPortFree+0xc0>)
 800b850:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b852:	f001 f927 	bl	800caa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b856:	bf00      	nop
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	24003f1c 	.word	0x24003f1c
 800b864:	24003f0c 	.word	0x24003f0c
 800b868:	24003f18 	.word	0x24003f18

0800b86c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b872:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b876:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b878:	4b27      	ldr	r3, [pc, #156]	; (800b918 <prvHeapInit+0xac>)
 800b87a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f003 0307 	and.w	r3, r3, #7
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00c      	beq.n	800b8a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3307      	adds	r3, #7
 800b88a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f023 0307 	bic.w	r3, r3, #7
 800b892:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	4a1f      	ldr	r2, [pc, #124]	; (800b918 <prvHeapInit+0xac>)
 800b89c:	4413      	add	r3, r2
 800b89e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8a4:	4a1d      	ldr	r2, [pc, #116]	; (800b91c <prvHeapInit+0xb0>)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8aa:	4b1c      	ldr	r3, [pc, #112]	; (800b91c <prvHeapInit+0xb0>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8b8:	2208      	movs	r2, #8
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	1a9b      	subs	r3, r3, r2
 800b8be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f023 0307 	bic.w	r3, r3, #7
 800b8c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4a15      	ldr	r2, [pc, #84]	; (800b920 <prvHeapInit+0xb4>)
 800b8cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8ce:	4b14      	ldr	r3, [pc, #80]	; (800b920 <prvHeapInit+0xb4>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8d6:	4b12      	ldr	r3, [pc, #72]	; (800b920 <prvHeapInit+0xb4>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	1ad2      	subs	r2, r2, r3
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8ec:	4b0c      	ldr	r3, [pc, #48]	; (800b920 <prvHeapInit+0xb4>)
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4a0a      	ldr	r2, [pc, #40]	; (800b924 <prvHeapInit+0xb8>)
 800b8fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	4a09      	ldr	r2, [pc, #36]	; (800b928 <prvHeapInit+0xbc>)
 800b902:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b904:	4b09      	ldr	r3, [pc, #36]	; (800b92c <prvHeapInit+0xc0>)
 800b906:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b90a:	601a      	str	r2, [r3, #0]
}
 800b90c:	bf00      	nop
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	24000300 	.word	0x24000300
 800b91c:	24003f00 	.word	0x24003f00
 800b920:	24003f08 	.word	0x24003f08
 800b924:	24003f10 	.word	0x24003f10
 800b928:	24003f0c 	.word	0x24003f0c
 800b92c:	24003f1c 	.word	0x24003f1c

0800b930 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b938:	4b28      	ldr	r3, [pc, #160]	; (800b9dc <prvInsertBlockIntoFreeList+0xac>)
 800b93a:	60fb      	str	r3, [r7, #12]
 800b93c:	e002      	b.n	800b944 <prvInsertBlockIntoFreeList+0x14>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d8f7      	bhi.n	800b93e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	4413      	add	r3, r2
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d108      	bne.n	800b972 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	441a      	add	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	441a      	add	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	429a      	cmp	r2, r3
 800b984:	d118      	bne.n	800b9b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	4b15      	ldr	r3, [pc, #84]	; (800b9e0 <prvInsertBlockIntoFreeList+0xb0>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d00d      	beq.n	800b9ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	441a      	add	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	e008      	b.n	800b9c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9ae:	4b0c      	ldr	r3, [pc, #48]	; (800b9e0 <prvInsertBlockIntoFreeList+0xb0>)
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	e003      	b.n	800b9c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d002      	beq.n	800b9ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9ce:	bf00      	nop
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	24003f00 	.word	0x24003f00
 800b9e0:	24003f08 	.word	0x24003f08

0800b9e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f103 0208 	add.w	r2, r3, #8
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f103 0208 	add.w	r2, r3, #8
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f103 0208 	add.w	r2, r3, #8
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba18:	bf00      	nop
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba32:	bf00      	nop
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	689a      	ldr	r2, [r3, #8]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	601a      	str	r2, [r3, #0]
}
 800ba7a:	bf00      	nop
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba86:	b480      	push	{r7}
 800ba88:	b085      	sub	sp, #20
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9c:	d103      	bne.n	800baa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	e00c      	b.n	800bac0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3308      	adds	r3, #8
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	e002      	b.n	800bab4 <vListInsert+0x2e>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	429a      	cmp	r2, r3
 800babe:	d2f6      	bcs.n	800baae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	601a      	str	r2, [r3, #0]
}
 800baec:	bf00      	nop
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	6892      	ldr	r2, [r2, #8]
 800bb0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	6852      	ldr	r2, [r2, #4]
 800bb18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d103      	bne.n	800bb2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	689a      	ldr	r2, [r3, #8]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	1e5a      	subs	r2, r3, #1
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3714      	adds	r7, #20
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3b04      	subs	r3, #4
 800bb5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3b04      	subs	r3, #4
 800bb6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	f023 0201 	bic.w	r2, r3, #1
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3b04      	subs	r3, #4
 800bb7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb7c:	4a0c      	ldr	r2, [pc, #48]	; (800bbb0 <pxPortInitialiseStack+0x64>)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3b14      	subs	r3, #20
 800bb86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3b04      	subs	r3, #4
 800bb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f06f 0202 	mvn.w	r2, #2
 800bb9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	3b20      	subs	r3, #32
 800bba0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bba2:	68fb      	ldr	r3, [r7, #12]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3714      	adds	r7, #20
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	0800bbb5 	.word	0x0800bbb5

0800bbb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <prvTaskExitError+0x54>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc6:	d00a      	beq.n	800bbde <prvTaskExitError+0x2a>
	__asm volatile
 800bbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbcc:	f383 8811 	msr	BASEPRI, r3
 800bbd0:	f3bf 8f6f 	isb	sy
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	60fb      	str	r3, [r7, #12]
}
 800bbda:	bf00      	nop
 800bbdc:	e7fe      	b.n	800bbdc <prvTaskExitError+0x28>
	__asm volatile
 800bbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe2:	f383 8811 	msr	BASEPRI, r3
 800bbe6:	f3bf 8f6f 	isb	sy
 800bbea:	f3bf 8f4f 	dsb	sy
 800bbee:	60bb      	str	r3, [r7, #8]
}
 800bbf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbf2:	bf00      	nop
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0fc      	beq.n	800bbf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbfa:	bf00      	nop
 800bbfc:	bf00      	nop
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	24000010 	.word	0x24000010
 800bc0c:	00000000 	.word	0x00000000

0800bc10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc10:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <pxCurrentTCBConst2>)
 800bc12:	6819      	ldr	r1, [r3, #0]
 800bc14:	6808      	ldr	r0, [r1, #0]
 800bc16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1a:	f380 8809 	msr	PSP, r0
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f04f 0000 	mov.w	r0, #0
 800bc26:	f380 8811 	msr	BASEPRI, r0
 800bc2a:	4770      	bx	lr
 800bc2c:	f3af 8000 	nop.w

0800bc30 <pxCurrentTCBConst2>:
 800bc30:	24003f28 	.word	0x24003f28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop

0800bc38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc38:	4808      	ldr	r0, [pc, #32]	; (800bc5c <prvPortStartFirstTask+0x24>)
 800bc3a:	6800      	ldr	r0, [r0, #0]
 800bc3c:	6800      	ldr	r0, [r0, #0]
 800bc3e:	f380 8808 	msr	MSP, r0
 800bc42:	f04f 0000 	mov.w	r0, #0
 800bc46:	f380 8814 	msr	CONTROL, r0
 800bc4a:	b662      	cpsie	i
 800bc4c:	b661      	cpsie	f
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	df00      	svc	0
 800bc58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc5a:	bf00      	nop
 800bc5c:	e000ed08 	.word	0xe000ed08

0800bc60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc66:	4b46      	ldr	r3, [pc, #280]	; (800bd80 <xPortStartScheduler+0x120>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a46      	ldr	r2, [pc, #280]	; (800bd84 <xPortStartScheduler+0x124>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d10a      	bne.n	800bc86 <xPortStartScheduler+0x26>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	613b      	str	r3, [r7, #16]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc86:	4b3e      	ldr	r3, [pc, #248]	; (800bd80 <xPortStartScheduler+0x120>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a3f      	ldr	r2, [pc, #252]	; (800bd88 <xPortStartScheduler+0x128>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d10a      	bne.n	800bca6 <xPortStartScheduler+0x46>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	60fb      	str	r3, [r7, #12]
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bca6:	4b39      	ldr	r3, [pc, #228]	; (800bd8c <xPortStartScheduler+0x12c>)
 800bca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	22ff      	movs	r2, #255	; 0xff
 800bcb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bcc0:	78fb      	ldrb	r3, [r7, #3]
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	4b31      	ldr	r3, [pc, #196]	; (800bd90 <xPortStartScheduler+0x130>)
 800bccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcce:	4b31      	ldr	r3, [pc, #196]	; (800bd94 <xPortStartScheduler+0x134>)
 800bcd0:	2207      	movs	r2, #7
 800bcd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcd4:	e009      	b.n	800bcea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bcd6:	4b2f      	ldr	r3, [pc, #188]	; (800bd94 <xPortStartScheduler+0x134>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	4a2d      	ldr	r2, [pc, #180]	; (800bd94 <xPortStartScheduler+0x134>)
 800bcde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcea:	78fb      	ldrb	r3, [r7, #3]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcf2:	2b80      	cmp	r3, #128	; 0x80
 800bcf4:	d0ef      	beq.n	800bcd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcf6:	4b27      	ldr	r3, [pc, #156]	; (800bd94 <xPortStartScheduler+0x134>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f1c3 0307 	rsb	r3, r3, #7
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d00a      	beq.n	800bd18 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	60bb      	str	r3, [r7, #8]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd18:	4b1e      	ldr	r3, [pc, #120]	; (800bd94 <xPortStartScheduler+0x134>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	021b      	lsls	r3, r3, #8
 800bd1e:	4a1d      	ldr	r2, [pc, #116]	; (800bd94 <xPortStartScheduler+0x134>)
 800bd20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd22:	4b1c      	ldr	r3, [pc, #112]	; (800bd94 <xPortStartScheduler+0x134>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd2a:	4a1a      	ldr	r2, [pc, #104]	; (800bd94 <xPortStartScheduler+0x134>)
 800bd2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd36:	4b18      	ldr	r3, [pc, #96]	; (800bd98 <xPortStartScheduler+0x138>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <xPortStartScheduler+0x138>)
 800bd3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd42:	4b15      	ldr	r3, [pc, #84]	; (800bd98 <xPortStartScheduler+0x138>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a14      	ldr	r2, [pc, #80]	; (800bd98 <xPortStartScheduler+0x138>)
 800bd48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd4e:	f000 f8dd 	bl	800bf0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd52:	4b12      	ldr	r3, [pc, #72]	; (800bd9c <xPortStartScheduler+0x13c>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd58:	f000 f8fc 	bl	800bf54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd5c:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <xPortStartScheduler+0x140>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a0f      	ldr	r2, [pc, #60]	; (800bda0 <xPortStartScheduler+0x140>)
 800bd62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd68:	f7ff ff66 	bl	800bc38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd6c:	f001 f810 	bl	800cd90 <vTaskSwitchContext>
	prvTaskExitError();
 800bd70:	f7ff ff20 	bl	800bbb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3718      	adds	r7, #24
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	e000ed00 	.word	0xe000ed00
 800bd84:	410fc271 	.word	0x410fc271
 800bd88:	410fc270 	.word	0x410fc270
 800bd8c:	e000e400 	.word	0xe000e400
 800bd90:	24003f20 	.word	0x24003f20
 800bd94:	24003f24 	.word	0x24003f24
 800bd98:	e000ed20 	.word	0xe000ed20
 800bd9c:	24000010 	.word	0x24000010
 800bda0:	e000ef34 	.word	0xe000ef34

0800bda4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	607b      	str	r3, [r7, #4]
}
 800bdbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bdbe:	4b0f      	ldr	r3, [pc, #60]	; (800bdfc <vPortEnterCritical+0x58>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	4a0d      	ldr	r2, [pc, #52]	; (800bdfc <vPortEnterCritical+0x58>)
 800bdc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bdc8:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <vPortEnterCritical+0x58>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d10f      	bne.n	800bdf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdd0:	4b0b      	ldr	r3, [pc, #44]	; (800be00 <vPortEnterCritical+0x5c>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00a      	beq.n	800bdf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	603b      	str	r3, [r7, #0]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <vPortEnterCritical+0x4a>
	}
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	24000010 	.word	0x24000010
 800be00:	e000ed04 	.word	0xe000ed04

0800be04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be0a:	4b12      	ldr	r3, [pc, #72]	; (800be54 <vPortExitCritical+0x50>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10a      	bne.n	800be28 <vPortExitCritical+0x24>
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	607b      	str	r3, [r7, #4]
}
 800be24:	bf00      	nop
 800be26:	e7fe      	b.n	800be26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be28:	4b0a      	ldr	r3, [pc, #40]	; (800be54 <vPortExitCritical+0x50>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	4a09      	ldr	r2, [pc, #36]	; (800be54 <vPortExitCritical+0x50>)
 800be30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be32:	4b08      	ldr	r3, [pc, #32]	; (800be54 <vPortExitCritical+0x50>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d105      	bne.n	800be46 <vPortExitCritical+0x42>
 800be3a:	2300      	movs	r3, #0
 800be3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800be44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be46:	bf00      	nop
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	24000010 	.word	0x24000010
	...

0800be60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be60:	f3ef 8009 	mrs	r0, PSP
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <pxCurrentTCBConst>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	f01e 0f10 	tst.w	lr, #16
 800be70:	bf08      	it	eq
 800be72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7a:	6010      	str	r0, [r2, #0]
 800be7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be84:	f380 8811 	msr	BASEPRI, r0
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f000 ff7e 	bl	800cd90 <vTaskSwitchContext>
 800be94:	f04f 0000 	mov.w	r0, #0
 800be98:	f380 8811 	msr	BASEPRI, r0
 800be9c:	bc09      	pop	{r0, r3}
 800be9e:	6819      	ldr	r1, [r3, #0]
 800bea0:	6808      	ldr	r0, [r1, #0]
 800bea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea6:	f01e 0f10 	tst.w	lr, #16
 800beaa:	bf08      	it	eq
 800beac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800beb0:	f380 8809 	msr	PSP, r0
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	f3af 8000 	nop.w

0800bec0 <pxCurrentTCBConst>:
 800bec0:	24003f28 	.word	0x24003f28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop

0800bec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	607b      	str	r3, [r7, #4]
}
 800bee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bee2:	f000 fe9d 	bl	800cc20 <xTaskIncrementTick>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d003      	beq.n	800bef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800beec:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <SysTick_Handler+0x40>)
 800beee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	2300      	movs	r3, #0
 800bef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	f383 8811 	msr	BASEPRI, r3
}
 800befe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf00:	bf00      	nop
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	e000ed04 	.word	0xe000ed04

0800bf0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf10:	4b0b      	ldr	r3, [pc, #44]	; (800bf40 <vPortSetupTimerInterrupt+0x34>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <vPortSetupTimerInterrupt+0x38>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf1c:	4b0a      	ldr	r3, [pc, #40]	; (800bf48 <vPortSetupTimerInterrupt+0x3c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a0a      	ldr	r2, [pc, #40]	; (800bf4c <vPortSetupTimerInterrupt+0x40>)
 800bf22:	fba2 2303 	umull	r2, r3, r2, r3
 800bf26:	099b      	lsrs	r3, r3, #6
 800bf28:	4a09      	ldr	r2, [pc, #36]	; (800bf50 <vPortSetupTimerInterrupt+0x44>)
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf2e:	4b04      	ldr	r3, [pc, #16]	; (800bf40 <vPortSetupTimerInterrupt+0x34>)
 800bf30:	2207      	movs	r2, #7
 800bf32:	601a      	str	r2, [r3, #0]
}
 800bf34:	bf00      	nop
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	e000e010 	.word	0xe000e010
 800bf44:	e000e018 	.word	0xe000e018
 800bf48:	24000000 	.word	0x24000000
 800bf4c:	10624dd3 	.word	0x10624dd3
 800bf50:	e000e014 	.word	0xe000e014

0800bf54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf64 <vPortEnableVFP+0x10>
 800bf58:	6801      	ldr	r1, [r0, #0]
 800bf5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf5e:	6001      	str	r1, [r0, #0]
 800bf60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf62:	bf00      	nop
 800bf64:	e000ed88 	.word	0xe000ed88

0800bf68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf6e:	f3ef 8305 	mrs	r3, IPSR
 800bf72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b0f      	cmp	r3, #15
 800bf78:	d914      	bls.n	800bfa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf7a:	4a17      	ldr	r2, [pc, #92]	; (800bfd8 <vPortValidateInterruptPriority+0x70>)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	4413      	add	r3, r2
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf84:	4b15      	ldr	r3, [pc, #84]	; (800bfdc <vPortValidateInterruptPriority+0x74>)
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	7afa      	ldrb	r2, [r7, #11]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d20a      	bcs.n	800bfa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	607b      	str	r3, [r7, #4]
}
 800bfa0:	bf00      	nop
 800bfa2:	e7fe      	b.n	800bfa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfa4:	4b0e      	ldr	r3, [pc, #56]	; (800bfe0 <vPortValidateInterruptPriority+0x78>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <vPortValidateInterruptPriority+0x7c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d90a      	bls.n	800bfca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	603b      	str	r3, [r7, #0]
}
 800bfc6:	bf00      	nop
 800bfc8:	e7fe      	b.n	800bfc8 <vPortValidateInterruptPriority+0x60>
	}
 800bfca:	bf00      	nop
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	e000e3f0 	.word	0xe000e3f0
 800bfdc:	24003f20 	.word	0x24003f20
 800bfe0:	e000ed0c 	.word	0xe000ed0c
 800bfe4:	24003f24 	.word	0x24003f24

0800bfe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10a      	bne.n	800c012 <xQueueGenericReset+0x2a>
	__asm volatile
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	f383 8811 	msr	BASEPRI, r3
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	60bb      	str	r3, [r7, #8]
}
 800c00e:	bf00      	nop
 800c010:	e7fe      	b.n	800c010 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c012:	f7ff fec7 	bl	800bda4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01e:	68f9      	ldr	r1, [r7, #12]
 800c020:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c022:	fb01 f303 	mul.w	r3, r1, r3
 800c026:	441a      	add	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c042:	3b01      	subs	r3, #1
 800c044:	68f9      	ldr	r1, [r7, #12]
 800c046:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c048:	fb01 f303 	mul.w	r3, r1, r3
 800c04c:	441a      	add	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	22ff      	movs	r2, #255	; 0xff
 800c056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	22ff      	movs	r2, #255	; 0xff
 800c05e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d114      	bne.n	800c092 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d01a      	beq.n	800c0a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	3310      	adds	r3, #16
 800c074:	4618      	mov	r0, r3
 800c076:	f000 ff0b 	bl	800ce90 <xTaskRemoveFromEventList>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d012      	beq.n	800c0a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c080:	4b0c      	ldr	r3, [pc, #48]	; (800c0b4 <xQueueGenericReset+0xcc>)
 800c082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	e009      	b.n	800c0a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	3310      	adds	r3, #16
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff fca4 	bl	800b9e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3324      	adds	r3, #36	; 0x24
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff fc9f 	bl	800b9e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0a6:	f7ff fead 	bl	800be04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0aa:	2301      	movs	r3, #1
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	e000ed04 	.word	0xe000ed04

0800c0b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b08e      	sub	sp, #56	; 0x38
 800c0bc:	af02      	add	r7, sp, #8
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
 800c0c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10a      	bne.n	800c0fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ec:	f383 8811 	msr	BASEPRI, r3
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0fa:	bf00      	nop
 800c0fc:	e7fe      	b.n	800c0fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <xQueueGenericCreateStatic+0x52>
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <xQueueGenericCreateStatic+0x56>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e000      	b.n	800c110 <xQueueGenericCreateStatic+0x58>
 800c10e:	2300      	movs	r3, #0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10a      	bne.n	800c12a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	623b      	str	r3, [r7, #32]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <xQueueGenericCreateStatic+0x7e>
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d101      	bne.n	800c13a <xQueueGenericCreateStatic+0x82>
 800c136:	2301      	movs	r3, #1
 800c138:	e000      	b.n	800c13c <xQueueGenericCreateStatic+0x84>
 800c13a:	2300      	movs	r3, #0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10a      	bne.n	800c156 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	61fb      	str	r3, [r7, #28]
}
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c156:	2348      	movs	r3, #72	; 0x48
 800c158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	2b48      	cmp	r3, #72	; 0x48
 800c15e:	d00a      	beq.n	800c176 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	61bb      	str	r3, [r7, #24]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c176:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00d      	beq.n	800c19e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	2201      	movs	r2, #1
 800c186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c18a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	4613      	mov	r3, r2
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	68b9      	ldr	r1, [r7, #8]
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f000 f83f 	bl	800c21c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3730      	adds	r7, #48	; 0x30
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08a      	sub	sp, #40	; 0x28
 800c1ac:	af02      	add	r7, sp, #8
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	613b      	str	r3, [r7, #16]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	fb02 f303 	mul.w	r3, r2, r3
 800c1da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	3348      	adds	r3, #72	; 0x48
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7ff fa15 	bl	800b610 <pvPortMalloc>
 800c1e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d011      	beq.n	800c212 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	3348      	adds	r3, #72	; 0x48
 800c1f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c200:	79fa      	ldrb	r2, [r7, #7]
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	4613      	mov	r3, r2
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	68b9      	ldr	r1, [r7, #8]
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 f805 	bl	800c21c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c212:	69bb      	ldr	r3, [r7, #24]
	}
 800c214:	4618      	mov	r0, r3
 800c216:	3720      	adds	r7, #32
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d103      	bne.n	800c238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	69ba      	ldr	r2, [r7, #24]
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	e002      	b.n	800c23e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c24a:	2101      	movs	r1, #1
 800c24c:	69b8      	ldr	r0, [r7, #24]
 800c24e:	f7ff fecb 	bl	800bfe8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
	...

0800c25c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08c      	sub	sp, #48	; 0x30
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c268:	2300      	movs	r3, #0
 800c26a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10a      	bne.n	800c28c <xQueueReceive+0x30>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	623b      	str	r3, [r7, #32]
}
 800c288:	bf00      	nop
 800c28a:	e7fe      	b.n	800c28a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d103      	bne.n	800c29a <xQueueReceive+0x3e>
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <xQueueReceive+0x42>
 800c29a:	2301      	movs	r3, #1
 800c29c:	e000      	b.n	800c2a0 <xQueueReceive+0x44>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d10a      	bne.n	800c2ba <xQueueReceive+0x5e>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	61fb      	str	r3, [r7, #28]
}
 800c2b6:	bf00      	nop
 800c2b8:	e7fe      	b.n	800c2b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2ba:	f000 ffa5 	bl	800d208 <xTaskGetSchedulerState>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d102      	bne.n	800c2ca <xQueueReceive+0x6e>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d101      	bne.n	800c2ce <xQueueReceive+0x72>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e000      	b.n	800c2d0 <xQueueReceive+0x74>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10a      	bne.n	800c2ea <xQueueReceive+0x8e>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	61bb      	str	r3, [r7, #24]
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2ea:	f7ff fd5b 	bl	800bda4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d01f      	beq.n	800c33a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c2fa:	68b9      	ldr	r1, [r7, #8]
 800c2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2fe:	f000 f90d 	bl	800c51c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c304:	1e5a      	subs	r2, r3, #1
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00f      	beq.n	800c332 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	3310      	adds	r3, #16
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fdba 	bl	800ce90 <xTaskRemoveFromEventList>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d007      	beq.n	800c332 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c322:	4b3d      	ldr	r3, [pc, #244]	; (800c418 <xQueueReceive+0x1bc>)
 800c324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c332:	f7ff fd67 	bl	800be04 <vPortExitCritical>
				return pdPASS;
 800c336:	2301      	movs	r3, #1
 800c338:	e069      	b.n	800c40e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d103      	bne.n	800c348 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c340:	f7ff fd60 	bl	800be04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c344:	2300      	movs	r3, #0
 800c346:	e062      	b.n	800c40e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d106      	bne.n	800c35c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c34e:	f107 0310 	add.w	r3, r7, #16
 800c352:	4618      	mov	r0, r3
 800c354:	f000 fdfe 	bl	800cf54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c358:	2301      	movs	r3, #1
 800c35a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c35c:	f7ff fd52 	bl	800be04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c360:	f000 fb92 	bl	800ca88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c364:	f7ff fd1e 	bl	800bda4 <vPortEnterCritical>
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c36e:	b25b      	sxtb	r3, r3
 800c370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c374:	d103      	bne.n	800c37e <xQueueReceive+0x122>
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c384:	b25b      	sxtb	r3, r3
 800c386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c38a:	d103      	bne.n	800c394 <xQueueReceive+0x138>
 800c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c394:	f7ff fd36 	bl	800be04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c398:	1d3a      	adds	r2, r7, #4
 800c39a:	f107 0310 	add.w	r3, r7, #16
 800c39e:	4611      	mov	r1, r2
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f000 fded 	bl	800cf80 <xTaskCheckForTimeOut>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d123      	bne.n	800c3f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ae:	f000 f92d 	bl	800c60c <prvIsQueueEmpty>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d017      	beq.n	800c3e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	3324      	adds	r3, #36	; 0x24
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 fd41 	bl	800ce48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c8:	f000 f8ce 	bl	800c568 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3cc:	f000 fb6a 	bl	800caa4 <xTaskResumeAll>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d189      	bne.n	800c2ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c3d6:	4b10      	ldr	r3, [pc, #64]	; (800c418 <xQueueReceive+0x1bc>)
 800c3d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	e780      	b.n	800c2ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c3e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ea:	f000 f8bd 	bl	800c568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3ee:	f000 fb59 	bl	800caa4 <xTaskResumeAll>
 800c3f2:	e77a      	b.n	800c2ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f6:	f000 f8b7 	bl	800c568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3fa:	f000 fb53 	bl	800caa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c400:	f000 f904 	bl	800c60c <prvIsQueueEmpty>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	f43f af6f 	beq.w	800c2ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c40c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3730      	adds	r7, #48	; 0x30
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08e      	sub	sp, #56	; 0x38
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10a      	bne.n	800c448 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	623b      	str	r3, [r7, #32]
}
 800c444:	bf00      	nop
 800c446:	e7fe      	b.n	800c446 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d103      	bne.n	800c456 <xQueueReceiveFromISR+0x3a>
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <xQueueReceiveFromISR+0x3e>
 800c456:	2301      	movs	r3, #1
 800c458:	e000      	b.n	800c45c <xQueueReceiveFromISR+0x40>
 800c45a:	2300      	movs	r3, #0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d10a      	bne.n	800c476 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	61fb      	str	r3, [r7, #28]
}
 800c472:	bf00      	nop
 800c474:	e7fe      	b.n	800c474 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c476:	f7ff fd77 	bl	800bf68 <vPortValidateInterruptPriority>
	__asm volatile
 800c47a:	f3ef 8211 	mrs	r2, BASEPRI
 800c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	61ba      	str	r2, [r7, #24]
 800c490:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c492:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c494:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d02f      	beq.n	800c502 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4ac:	68b9      	ldr	r1, [r7, #8]
 800c4ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4b0:	f000 f834 	bl	800c51c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b6:	1e5a      	subs	r2, r3, #1
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c4bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c4:	d112      	bne.n	800c4ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d016      	beq.n	800c4fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	3310      	adds	r3, #16
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 fcdc 	bl	800ce90 <xTaskRemoveFromEventList>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00e      	beq.n	800c4fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	601a      	str	r2, [r3, #0]
 800c4ea:	e007      	b.n	800c4fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	b25a      	sxtb	r2, r3
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800c500:	e001      	b.n	800c506 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c502:	2300      	movs	r3, #0
 800c504:	637b      	str	r3, [r7, #52]	; 0x34
 800c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c508:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	f383 8811 	msr	BASEPRI, r3
}
 800c510:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c514:	4618      	mov	r0, r3
 800c516:	3738      	adds	r7, #56	; 0x38
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d018      	beq.n	800c560 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	68da      	ldr	r2, [r3, #12]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c536:	441a      	add	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	68da      	ldr	r2, [r3, #12]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	429a      	cmp	r2, r3
 800c546:	d303      	bcc.n	800c550 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68d9      	ldr	r1, [r3, #12]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c558:	461a      	mov	r2, r3
 800c55a:	6838      	ldr	r0, [r7, #0]
 800c55c:	f000 ff02 	bl	800d364 <memcpy>
	}
}
 800c560:	bf00      	nop
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c570:	f7ff fc18 	bl	800bda4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c57a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c57c:	e011      	b.n	800c5a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	d012      	beq.n	800c5ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3324      	adds	r3, #36	; 0x24
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fc80 	bl	800ce90 <xTaskRemoveFromEventList>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c596:	f000 fd55 	bl	800d044 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
 800c59c:	3b01      	subs	r3, #1
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dce9      	bgt.n	800c57e <prvUnlockQueue+0x16>
 800c5aa:	e000      	b.n	800c5ae <prvUnlockQueue+0x46>
					break;
 800c5ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	22ff      	movs	r2, #255	; 0xff
 800c5b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c5b6:	f7ff fc25 	bl	800be04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c5ba:	f7ff fbf3 	bl	800bda4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5c6:	e011      	b.n	800c5ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d012      	beq.n	800c5f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	3310      	adds	r3, #16
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 fc5b 	bl	800ce90 <xTaskRemoveFromEventList>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d001      	beq.n	800c5e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c5e0:	f000 fd30 	bl	800d044 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	dce9      	bgt.n	800c5c8 <prvUnlockQueue+0x60>
 800c5f4:	e000      	b.n	800c5f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c5f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	22ff      	movs	r2, #255	; 0xff
 800c5fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c600:	f7ff fc00 	bl	800be04 <vPortExitCritical>
}
 800c604:	bf00      	nop
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c614:	f7ff fbc6 	bl	800bda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d102      	bne.n	800c626 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c620:	2301      	movs	r3, #1
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	e001      	b.n	800c62a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c626:	2300      	movs	r3, #0
 800c628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c62a:	f7ff fbeb 	bl	800be04 <vPortExitCritical>

	return xReturn;
 800c62e:	68fb      	ldr	r3, [r7, #12]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08e      	sub	sp, #56	; 0x38
 800c63c:	af04      	add	r7, sp, #16
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
 800c644:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10a      	bne.n	800c662 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	623b      	str	r3, [r7, #32]
}
 800c65e:	bf00      	nop
 800c660:	e7fe      	b.n	800c660 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10a      	bne.n	800c67e <xTaskCreateStatic+0x46>
	__asm volatile
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	61fb      	str	r3, [r7, #28]
}
 800c67a:	bf00      	nop
 800c67c:	e7fe      	b.n	800c67c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c67e:	2354      	movs	r3, #84	; 0x54
 800c680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	2b54      	cmp	r3, #84	; 0x54
 800c686:	d00a      	beq.n	800c69e <xTaskCreateStatic+0x66>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	61bb      	str	r3, [r7, #24]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c69e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d01e      	beq.n	800c6e4 <xTaskCreateStatic+0xac>
 800c6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d01b      	beq.n	800c6e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	2202      	movs	r2, #2
 800c6ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c6be:	2300      	movs	r3, #0
 800c6c0:	9303      	str	r3, [sp, #12]
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	9302      	str	r3, [sp, #8]
 800c6c6:	f107 0314 	add.w	r3, r7, #20
 800c6ca:	9301      	str	r3, [sp, #4]
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	68b9      	ldr	r1, [r7, #8]
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f000 f850 	bl	800c77c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6de:	f000 f8d5 	bl	800c88c <prvAddNewTaskToReadyList>
 800c6e2:	e001      	b.n	800c6e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c6e8:	697b      	ldr	r3, [r7, #20]
	}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3728      	adds	r7, #40	; 0x28
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b08c      	sub	sp, #48	; 0x30
 800c6f6:	af04      	add	r7, sp, #16
 800c6f8:	60f8      	str	r0, [r7, #12]
 800c6fa:	60b9      	str	r1, [r7, #8]
 800c6fc:	603b      	str	r3, [r7, #0]
 800c6fe:	4613      	mov	r3, r2
 800c700:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c702:	88fb      	ldrh	r3, [r7, #6]
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe ff82 	bl	800b610 <pvPortMalloc>
 800c70c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00e      	beq.n	800c732 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c714:	2054      	movs	r0, #84	; 0x54
 800c716:	f7fe ff7b 	bl	800b610 <pvPortMalloc>
 800c71a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d003      	beq.n	800c72a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	631a      	str	r2, [r3, #48]	; 0x30
 800c728:	e005      	b.n	800c736 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c72a:	6978      	ldr	r0, [r7, #20]
 800c72c:	f7ff f83c 	bl	800b7a8 <vPortFree>
 800c730:	e001      	b.n	800c736 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c732:	2300      	movs	r3, #0
 800c734:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d017      	beq.n	800c76c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c744:	88fa      	ldrh	r2, [r7, #6]
 800c746:	2300      	movs	r3, #0
 800c748:	9303      	str	r3, [sp, #12]
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	9302      	str	r3, [sp, #8]
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	68b9      	ldr	r1, [r7, #8]
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f000 f80e 	bl	800c77c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c760:	69f8      	ldr	r0, [r7, #28]
 800c762:	f000 f893 	bl	800c88c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c766:	2301      	movs	r3, #1
 800c768:	61bb      	str	r3, [r7, #24]
 800c76a:	e002      	b.n	800c772 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c76c:	f04f 33ff 	mov.w	r3, #4294967295
 800c770:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c772:	69bb      	ldr	r3, [r7, #24]
	}
 800c774:	4618      	mov	r0, r3
 800c776:	3720      	adds	r7, #32
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b088      	sub	sp, #32
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c78e:	6879      	ldr	r1, [r7, #4]
 800c790:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c794:	440b      	add	r3, r1
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	f023 0307 	bic.w	r3, r3, #7
 800c7a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00a      	beq.n	800c7c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	617b      	str	r3, [r7, #20]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d01f      	beq.n	800c80a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	61fb      	str	r3, [r7, #28]
 800c7ce:	e012      	b.n	800c7f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	7819      	ldrb	r1, [r3, #0]
 800c7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	4413      	add	r3, r2
 800c7de:	3334      	adds	r3, #52	; 0x34
 800c7e0:	460a      	mov	r2, r1
 800c7e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c7e4:	68ba      	ldr	r2, [r7, #8]
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d006      	beq.n	800c7fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	61fb      	str	r3, [r7, #28]
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	2b0f      	cmp	r3, #15
 800c7fa:	d9e9      	bls.n	800c7d0 <prvInitialiseNewTask+0x54>
 800c7fc:	e000      	b.n	800c800 <prvInitialiseNewTask+0x84>
			{
				break;
 800c7fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	2200      	movs	r2, #0
 800c804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c808:	e003      	b.n	800c812 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	2200      	movs	r2, #0
 800c80e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	2b06      	cmp	r3, #6
 800c816:	d901      	bls.n	800c81c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c818:	2306      	movs	r3, #6
 800c81a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c826:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	2200      	movs	r2, #0
 800c82c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c830:	3304      	adds	r3, #4
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff f8f6 	bl	800ba24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83a:	3318      	adds	r3, #24
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7ff f8f1 	bl	800ba24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	f1c3 0207 	rsb	r2, r3, #7
 800c84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	2200      	movs	r2, #0
 800c85c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	2200      	movs	r2, #0
 800c862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	68f9      	ldr	r1, [r7, #12]
 800c86a:	69b8      	ldr	r0, [r7, #24]
 800c86c:	f7ff f96e 	bl	800bb4c <pxPortInitialiseStack>
 800c870:	4602      	mov	r2, r0
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c882:	bf00      	nop
 800c884:	3720      	adds	r7, #32
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c894:	f7ff fa86 	bl	800bda4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c898:	4b2a      	ldr	r3, [pc, #168]	; (800c944 <prvAddNewTaskToReadyList+0xb8>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3301      	adds	r3, #1
 800c89e:	4a29      	ldr	r2, [pc, #164]	; (800c944 <prvAddNewTaskToReadyList+0xb8>)
 800c8a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c8a2:	4b29      	ldr	r3, [pc, #164]	; (800c948 <prvAddNewTaskToReadyList+0xbc>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d109      	bne.n	800c8be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c8aa:	4a27      	ldr	r2, [pc, #156]	; (800c948 <prvAddNewTaskToReadyList+0xbc>)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c8b0:	4b24      	ldr	r3, [pc, #144]	; (800c944 <prvAddNewTaskToReadyList+0xb8>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d110      	bne.n	800c8da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c8b8:	f000 fbe8 	bl	800d08c <prvInitialiseTaskLists>
 800c8bc:	e00d      	b.n	800c8da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c8be:	4b23      	ldr	r3, [pc, #140]	; (800c94c <prvAddNewTaskToReadyList+0xc0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d109      	bne.n	800c8da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c8c6:	4b20      	ldr	r3, [pc, #128]	; (800c948 <prvAddNewTaskToReadyList+0xbc>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d802      	bhi.n	800c8da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8d4:	4a1c      	ldr	r2, [pc, #112]	; (800c948 <prvAddNewTaskToReadyList+0xbc>)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8da:	4b1d      	ldr	r3, [pc, #116]	; (800c950 <prvAddNewTaskToReadyList+0xc4>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	4a1b      	ldr	r2, [pc, #108]	; (800c950 <prvAddNewTaskToReadyList+0xc4>)
 800c8e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	409a      	lsls	r2, r3
 800c8ec:	4b19      	ldr	r3, [pc, #100]	; (800c954 <prvAddNewTaskToReadyList+0xc8>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	4a18      	ldr	r2, [pc, #96]	; (800c954 <prvAddNewTaskToReadyList+0xc8>)
 800c8f4:	6013      	str	r3, [r2, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	4413      	add	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4a15      	ldr	r2, [pc, #84]	; (800c958 <prvAddNewTaskToReadyList+0xcc>)
 800c904:	441a      	add	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3304      	adds	r3, #4
 800c90a:	4619      	mov	r1, r3
 800c90c:	4610      	mov	r0, r2
 800c90e:	f7ff f896 	bl	800ba3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c912:	f7ff fa77 	bl	800be04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c916:	4b0d      	ldr	r3, [pc, #52]	; (800c94c <prvAddNewTaskToReadyList+0xc0>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00e      	beq.n	800c93c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c91e:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <prvAddNewTaskToReadyList+0xbc>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c928:	429a      	cmp	r2, r3
 800c92a:	d207      	bcs.n	800c93c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c92c:	4b0b      	ldr	r3, [pc, #44]	; (800c95c <prvAddNewTaskToReadyList+0xd0>)
 800c92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	24004028 	.word	0x24004028
 800c948:	24003f28 	.word	0x24003f28
 800c94c:	24004034 	.word	0x24004034
 800c950:	24004044 	.word	0x24004044
 800c954:	24004030 	.word	0x24004030
 800c958:	24003f2c 	.word	0x24003f2c
 800c95c:	e000ed04 	.word	0xe000ed04

0800c960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c968:	2300      	movs	r3, #0
 800c96a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d017      	beq.n	800c9a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c972:	4b13      	ldr	r3, [pc, #76]	; (800c9c0 <vTaskDelay+0x60>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00a      	beq.n	800c990 <vTaskDelay+0x30>
	__asm volatile
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	60bb      	str	r3, [r7, #8]
}
 800c98c:	bf00      	nop
 800c98e:	e7fe      	b.n	800c98e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c990:	f000 f87a 	bl	800ca88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c994:	2100      	movs	r1, #0
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fc54 	bl	800d244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c99c:	f000 f882 	bl	800caa4 <xTaskResumeAll>
 800c9a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d107      	bne.n	800c9b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c9a8:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <vTaskDelay+0x64>)
 800c9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9b8:	bf00      	nop
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	24004050 	.word	0x24004050
 800c9c4:	e000ed04 	.word	0xe000ed04

0800c9c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b08a      	sub	sp, #40	; 0x28
 800c9cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9d6:	463a      	mov	r2, r7
 800c9d8:	1d39      	adds	r1, r7, #4
 800c9da:	f107 0308 	add.w	r3, r7, #8
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f3 fe94 	bl	800070c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	9202      	str	r2, [sp, #8]
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	9300      	str	r3, [sp, #0]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	460a      	mov	r2, r1
 800c9f6:	491e      	ldr	r1, [pc, #120]	; (800ca70 <vTaskStartScheduler+0xa8>)
 800c9f8:	481e      	ldr	r0, [pc, #120]	; (800ca74 <vTaskStartScheduler+0xac>)
 800c9fa:	f7ff fe1d 	bl	800c638 <xTaskCreateStatic>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	4a1d      	ldr	r2, [pc, #116]	; (800ca78 <vTaskStartScheduler+0xb0>)
 800ca02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca04:	4b1c      	ldr	r3, [pc, #112]	; (800ca78 <vTaskStartScheduler+0xb0>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	617b      	str	r3, [r7, #20]
 800ca10:	e001      	b.n	800ca16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca12:	2300      	movs	r3, #0
 800ca14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d116      	bne.n	800ca4a <vTaskStartScheduler+0x82>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	613b      	str	r3, [r7, #16]
}
 800ca2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca30:	4b12      	ldr	r3, [pc, #72]	; (800ca7c <vTaskStartScheduler+0xb4>)
 800ca32:	f04f 32ff 	mov.w	r2, #4294967295
 800ca36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca38:	4b11      	ldr	r3, [pc, #68]	; (800ca80 <vTaskStartScheduler+0xb8>)
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca3e:	4b11      	ldr	r3, [pc, #68]	; (800ca84 <vTaskStartScheduler+0xbc>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca44:	f7ff f90c 	bl	800bc60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca48:	e00e      	b.n	800ca68 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca50:	d10a      	bne.n	800ca68 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ca52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	60fb      	str	r3, [r7, #12]
}
 800ca64:	bf00      	nop
 800ca66:	e7fe      	b.n	800ca66 <vTaskStartScheduler+0x9e>
}
 800ca68:	bf00      	nop
 800ca6a:	3718      	adds	r7, #24
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	0800e098 	.word	0x0800e098
 800ca74:	0800d05d 	.word	0x0800d05d
 800ca78:	2400404c 	.word	0x2400404c
 800ca7c:	24004048 	.word	0x24004048
 800ca80:	24004034 	.word	0x24004034
 800ca84:	2400402c 	.word	0x2400402c

0800ca88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca88:	b480      	push	{r7}
 800ca8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca8c:	4b04      	ldr	r3, [pc, #16]	; (800caa0 <vTaskSuspendAll+0x18>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3301      	adds	r3, #1
 800ca92:	4a03      	ldr	r2, [pc, #12]	; (800caa0 <vTaskSuspendAll+0x18>)
 800ca94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca96:	bf00      	nop
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	24004050 	.word	0x24004050

0800caa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800caae:	2300      	movs	r3, #0
 800cab0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cab2:	4b41      	ldr	r3, [pc, #260]	; (800cbb8 <xTaskResumeAll+0x114>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10a      	bne.n	800cad0 <xTaskResumeAll+0x2c>
	__asm volatile
 800caba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabe:	f383 8811 	msr	BASEPRI, r3
 800cac2:	f3bf 8f6f 	isb	sy
 800cac6:	f3bf 8f4f 	dsb	sy
 800caca:	603b      	str	r3, [r7, #0]
}
 800cacc:	bf00      	nop
 800cace:	e7fe      	b.n	800cace <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cad0:	f7ff f968 	bl	800bda4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cad4:	4b38      	ldr	r3, [pc, #224]	; (800cbb8 <xTaskResumeAll+0x114>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3b01      	subs	r3, #1
 800cada:	4a37      	ldr	r2, [pc, #220]	; (800cbb8 <xTaskResumeAll+0x114>)
 800cadc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cade:	4b36      	ldr	r3, [pc, #216]	; (800cbb8 <xTaskResumeAll+0x114>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d161      	bne.n	800cbaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cae6:	4b35      	ldr	r3, [pc, #212]	; (800cbbc <xTaskResumeAll+0x118>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d05d      	beq.n	800cbaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caee:	e02e      	b.n	800cb4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caf0:	4b33      	ldr	r3, [pc, #204]	; (800cbc0 <xTaskResumeAll+0x11c>)
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3318      	adds	r3, #24
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fe fffb 	bl	800baf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	3304      	adds	r3, #4
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fff6 	bl	800baf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	2201      	movs	r2, #1
 800cb12:	409a      	lsls	r2, r3
 800cb14:	4b2b      	ldr	r3, [pc, #172]	; (800cbc4 <xTaskResumeAll+0x120>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	4a2a      	ldr	r2, [pc, #168]	; (800cbc4 <xTaskResumeAll+0x120>)
 800cb1c:	6013      	str	r3, [r2, #0]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb22:	4613      	mov	r3, r2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4a27      	ldr	r2, [pc, #156]	; (800cbc8 <xTaskResumeAll+0x124>)
 800cb2c:	441a      	add	r2, r3
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3304      	adds	r3, #4
 800cb32:	4619      	mov	r1, r3
 800cb34:	4610      	mov	r0, r2
 800cb36:	f7fe ff82 	bl	800ba3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb3e:	4b23      	ldr	r3, [pc, #140]	; (800cbcc <xTaskResumeAll+0x128>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d302      	bcc.n	800cb4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cb48:	4b21      	ldr	r3, [pc, #132]	; (800cbd0 <xTaskResumeAll+0x12c>)
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb4e:	4b1c      	ldr	r3, [pc, #112]	; (800cbc0 <xTaskResumeAll+0x11c>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1cc      	bne.n	800caf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb5c:	f000 fb34 	bl	800d1c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb60:	4b1c      	ldr	r3, [pc, #112]	; (800cbd4 <xTaskResumeAll+0x130>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d010      	beq.n	800cb8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb6c:	f000 f858 	bl	800cc20 <xTaskIncrementTick>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d002      	beq.n	800cb7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cb76:	4b16      	ldr	r3, [pc, #88]	; (800cbd0 <xTaskResumeAll+0x12c>)
 800cb78:	2201      	movs	r2, #1
 800cb7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1f1      	bne.n	800cb6c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cb88:	4b12      	ldr	r3, [pc, #72]	; (800cbd4 <xTaskResumeAll+0x130>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb8e:	4b10      	ldr	r3, [pc, #64]	; (800cbd0 <xTaskResumeAll+0x12c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d009      	beq.n	800cbaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb96:	2301      	movs	r3, #1
 800cb98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb9a:	4b0f      	ldr	r3, [pc, #60]	; (800cbd8 <xTaskResumeAll+0x134>)
 800cb9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbaa:	f7ff f92b 	bl	800be04 <vPortExitCritical>

	return xAlreadyYielded;
 800cbae:	68bb      	ldr	r3, [r7, #8]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	24004050 	.word	0x24004050
 800cbbc:	24004028 	.word	0x24004028
 800cbc0:	24003fe8 	.word	0x24003fe8
 800cbc4:	24004030 	.word	0x24004030
 800cbc8:	24003f2c 	.word	0x24003f2c
 800cbcc:	24003f28 	.word	0x24003f28
 800cbd0:	2400403c 	.word	0x2400403c
 800cbd4:	24004038 	.word	0x24004038
 800cbd8:	e000ed04 	.word	0xe000ed04

0800cbdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbe2:	4b05      	ldr	r3, [pc, #20]	; (800cbf8 <xTaskGetTickCount+0x1c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbe8:	687b      	ldr	r3, [r7, #4]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	370c      	adds	r7, #12
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	2400402c 	.word	0x2400402c

0800cbfc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc02:	f7ff f9b1 	bl	800bf68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cc06:	2300      	movs	r3, #0
 800cc08:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cc0a:	4b04      	ldr	r3, [pc, #16]	; (800cc1c <xTaskGetTickCountFromISR+0x20>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc10:	683b      	ldr	r3, [r7, #0]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	2400402c 	.word	0x2400402c

0800cc20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc26:	2300      	movs	r3, #0
 800cc28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc2a:	4b4e      	ldr	r3, [pc, #312]	; (800cd64 <xTaskIncrementTick+0x144>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f040 808e 	bne.w	800cd50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc34:	4b4c      	ldr	r3, [pc, #304]	; (800cd68 <xTaskIncrementTick+0x148>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc3c:	4a4a      	ldr	r2, [pc, #296]	; (800cd68 <xTaskIncrementTick+0x148>)
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d120      	bne.n	800cc8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc48:	4b48      	ldr	r3, [pc, #288]	; (800cd6c <xTaskIncrementTick+0x14c>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00a      	beq.n	800cc68 <xTaskIncrementTick+0x48>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	603b      	str	r3, [r7, #0]
}
 800cc64:	bf00      	nop
 800cc66:	e7fe      	b.n	800cc66 <xTaskIncrementTick+0x46>
 800cc68:	4b40      	ldr	r3, [pc, #256]	; (800cd6c <xTaskIncrementTick+0x14c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	4b40      	ldr	r3, [pc, #256]	; (800cd70 <xTaskIncrementTick+0x150>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a3e      	ldr	r2, [pc, #248]	; (800cd6c <xTaskIncrementTick+0x14c>)
 800cc74:	6013      	str	r3, [r2, #0]
 800cc76:	4a3e      	ldr	r2, [pc, #248]	; (800cd70 <xTaskIncrementTick+0x150>)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6013      	str	r3, [r2, #0]
 800cc7c:	4b3d      	ldr	r3, [pc, #244]	; (800cd74 <xTaskIncrementTick+0x154>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3301      	adds	r3, #1
 800cc82:	4a3c      	ldr	r2, [pc, #240]	; (800cd74 <xTaskIncrementTick+0x154>)
 800cc84:	6013      	str	r3, [r2, #0]
 800cc86:	f000 fa9f 	bl	800d1c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc8a:	4b3b      	ldr	r3, [pc, #236]	; (800cd78 <xTaskIncrementTick+0x158>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d348      	bcc.n	800cd26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc94:	4b35      	ldr	r3, [pc, #212]	; (800cd6c <xTaskIncrementTick+0x14c>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d104      	bne.n	800cca8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc9e:	4b36      	ldr	r3, [pc, #216]	; (800cd78 <xTaskIncrementTick+0x158>)
 800cca0:	f04f 32ff 	mov.w	r2, #4294967295
 800cca4:	601a      	str	r2, [r3, #0]
					break;
 800cca6:	e03e      	b.n	800cd26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cca8:	4b30      	ldr	r3, [pc, #192]	; (800cd6c <xTaskIncrementTick+0x14c>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d203      	bcs.n	800ccc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccc0:	4a2d      	ldr	r2, [pc, #180]	; (800cd78 <xTaskIncrementTick+0x158>)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccc6:	e02e      	b.n	800cd26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	3304      	adds	r3, #4
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fe ff13 	bl	800baf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d004      	beq.n	800cce4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	3318      	adds	r3, #24
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fe ff0a 	bl	800baf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce8:	2201      	movs	r2, #1
 800ccea:	409a      	lsls	r2, r3
 800ccec:	4b23      	ldr	r3, [pc, #140]	; (800cd7c <xTaskIncrementTick+0x15c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	4a22      	ldr	r2, [pc, #136]	; (800cd7c <xTaskIncrementTick+0x15c>)
 800ccf4:	6013      	str	r3, [r2, #0]
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4413      	add	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4a1f      	ldr	r2, [pc, #124]	; (800cd80 <xTaskIncrementTick+0x160>)
 800cd04:	441a      	add	r2, r3
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	f7fe fe96 	bl	800ba3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd16:	4b1b      	ldr	r3, [pc, #108]	; (800cd84 <xTaskIncrementTick+0x164>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d3b9      	bcc.n	800cc94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd20:	2301      	movs	r3, #1
 800cd22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd24:	e7b6      	b.n	800cc94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd26:	4b17      	ldr	r3, [pc, #92]	; (800cd84 <xTaskIncrementTick+0x164>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd2c:	4914      	ldr	r1, [pc, #80]	; (800cd80 <xTaskIncrementTick+0x160>)
 800cd2e:	4613      	mov	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	4413      	add	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	440b      	add	r3, r1
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d901      	bls.n	800cd42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd42:	4b11      	ldr	r3, [pc, #68]	; (800cd88 <xTaskIncrementTick+0x168>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d007      	beq.n	800cd5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	617b      	str	r3, [r7, #20]
 800cd4e:	e004      	b.n	800cd5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd50:	4b0e      	ldr	r3, [pc, #56]	; (800cd8c <xTaskIncrementTick+0x16c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3301      	adds	r3, #1
 800cd56:	4a0d      	ldr	r2, [pc, #52]	; (800cd8c <xTaskIncrementTick+0x16c>)
 800cd58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd5a:	697b      	ldr	r3, [r7, #20]
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3718      	adds	r7, #24
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	24004050 	.word	0x24004050
 800cd68:	2400402c 	.word	0x2400402c
 800cd6c:	24003fe0 	.word	0x24003fe0
 800cd70:	24003fe4 	.word	0x24003fe4
 800cd74:	24004040 	.word	0x24004040
 800cd78:	24004048 	.word	0x24004048
 800cd7c:	24004030 	.word	0x24004030
 800cd80:	24003f2c 	.word	0x24003f2c
 800cd84:	24003f28 	.word	0x24003f28
 800cd88:	2400403c 	.word	0x2400403c
 800cd8c:	24004038 	.word	0x24004038

0800cd90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd90:	b480      	push	{r7}
 800cd92:	b087      	sub	sp, #28
 800cd94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd96:	4b27      	ldr	r3, [pc, #156]	; (800ce34 <vTaskSwitchContext+0xa4>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d003      	beq.n	800cda6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd9e:	4b26      	ldr	r3, [pc, #152]	; (800ce38 <vTaskSwitchContext+0xa8>)
 800cda0:	2201      	movs	r2, #1
 800cda2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cda4:	e03f      	b.n	800ce26 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cda6:	4b24      	ldr	r3, [pc, #144]	; (800ce38 <vTaskSwitchContext+0xa8>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdac:	4b23      	ldr	r3, [pc, #140]	; (800ce3c <vTaskSwitchContext+0xac>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	fab3 f383 	clz	r3, r3
 800cdb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cdba:	7afb      	ldrb	r3, [r7, #11]
 800cdbc:	f1c3 031f 	rsb	r3, r3, #31
 800cdc0:	617b      	str	r3, [r7, #20]
 800cdc2:	491f      	ldr	r1, [pc, #124]	; (800ce40 <vTaskSwitchContext+0xb0>)
 800cdc4:	697a      	ldr	r2, [r7, #20]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	4413      	add	r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	440b      	add	r3, r1
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10a      	bne.n	800cdec <vTaskSwitchContext+0x5c>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	607b      	str	r3, [r7, #4]
}
 800cde8:	bf00      	nop
 800cdea:	e7fe      	b.n	800cdea <vTaskSwitchContext+0x5a>
 800cdec:	697a      	ldr	r2, [r7, #20]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4a12      	ldr	r2, [pc, #72]	; (800ce40 <vTaskSwitchContext+0xb0>)
 800cdf8:	4413      	add	r3, r2
 800cdfa:	613b      	str	r3, [r7, #16]
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	605a      	str	r2, [r3, #4]
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d104      	bne.n	800ce1c <vTaskSwitchContext+0x8c>
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	605a      	str	r2, [r3, #4]
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	4a08      	ldr	r2, [pc, #32]	; (800ce44 <vTaskSwitchContext+0xb4>)
 800ce24:	6013      	str	r3, [r2, #0]
}
 800ce26:	bf00      	nop
 800ce28:	371c      	adds	r7, #28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	24004050 	.word	0x24004050
 800ce38:	2400403c 	.word	0x2400403c
 800ce3c:	24004030 	.word	0x24004030
 800ce40:	24003f2c 	.word	0x24003f2c
 800ce44:	24003f28 	.word	0x24003f28

0800ce48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10a      	bne.n	800ce6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	60fb      	str	r3, [r7, #12]
}
 800ce6a:	bf00      	nop
 800ce6c:	e7fe      	b.n	800ce6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce6e:	4b07      	ldr	r3, [pc, #28]	; (800ce8c <vTaskPlaceOnEventList+0x44>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3318      	adds	r3, #24
 800ce74:	4619      	mov	r1, r3
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7fe fe05 	bl	800ba86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	6838      	ldr	r0, [r7, #0]
 800ce80:	f000 f9e0 	bl	800d244 <prvAddCurrentTaskToDelayedList>
}
 800ce84:	bf00      	nop
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	24003f28 	.word	0x24003f28

0800ce90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10a      	bne.n	800cebc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	60fb      	str	r3, [r7, #12]
}
 800ceb8:	bf00      	nop
 800ceba:	e7fe      	b.n	800ceba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	3318      	adds	r3, #24
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fe fe19 	bl	800baf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cec6:	4b1d      	ldr	r3, [pc, #116]	; (800cf3c <xTaskRemoveFromEventList+0xac>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d11c      	bne.n	800cf08 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	3304      	adds	r3, #4
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe fe10 	bl	800baf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cedc:	2201      	movs	r2, #1
 800cede:	409a      	lsls	r2, r3
 800cee0:	4b17      	ldr	r3, [pc, #92]	; (800cf40 <xTaskRemoveFromEventList+0xb0>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	4a16      	ldr	r2, [pc, #88]	; (800cf40 <xTaskRemoveFromEventList+0xb0>)
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceee:	4613      	mov	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4a13      	ldr	r2, [pc, #76]	; (800cf44 <xTaskRemoveFromEventList+0xb4>)
 800cef8:	441a      	add	r2, r3
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	3304      	adds	r3, #4
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f7fe fd9c 	bl	800ba3e <vListInsertEnd>
 800cf06:	e005      	b.n	800cf14 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	3318      	adds	r3, #24
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	480e      	ldr	r0, [pc, #56]	; (800cf48 <xTaskRemoveFromEventList+0xb8>)
 800cf10:	f7fe fd95 	bl	800ba3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf18:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <xTaskRemoveFromEventList+0xbc>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d905      	bls.n	800cf2e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf22:	2301      	movs	r3, #1
 800cf24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf26:	4b0a      	ldr	r3, [pc, #40]	; (800cf50 <xTaskRemoveFromEventList+0xc0>)
 800cf28:	2201      	movs	r2, #1
 800cf2a:	601a      	str	r2, [r3, #0]
 800cf2c:	e001      	b.n	800cf32 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf32:	697b      	ldr	r3, [r7, #20]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	24004050 	.word	0x24004050
 800cf40:	24004030 	.word	0x24004030
 800cf44:	24003f2c 	.word	0x24003f2c
 800cf48:	24003fe8 	.word	0x24003fe8
 800cf4c:	24003f28 	.word	0x24003f28
 800cf50:	2400403c 	.word	0x2400403c

0800cf54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf5c:	4b06      	ldr	r3, [pc, #24]	; (800cf78 <vTaskInternalSetTimeOutState+0x24>)
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf64:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <vTaskInternalSetTimeOutState+0x28>)
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	605a      	str	r2, [r3, #4]
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr
 800cf78:	24004040 	.word	0x24004040
 800cf7c:	2400402c 	.word	0x2400402c

0800cf80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10a      	bne.n	800cfa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	613b      	str	r3, [r7, #16]
}
 800cfa2:	bf00      	nop
 800cfa4:	e7fe      	b.n	800cfa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10a      	bne.n	800cfc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	60fb      	str	r3, [r7, #12]
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cfc2:	f7fe feef 	bl	800bda4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfc6:	4b1d      	ldr	r3, [pc, #116]	; (800d03c <xTaskCheckForTimeOut+0xbc>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	69ba      	ldr	r2, [r7, #24]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfde:	d102      	bne.n	800cfe6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	61fb      	str	r3, [r7, #28]
 800cfe4:	e023      	b.n	800d02e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	4b15      	ldr	r3, [pc, #84]	; (800d040 <xTaskCheckForTimeOut+0xc0>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d007      	beq.n	800d002 <xTaskCheckForTimeOut+0x82>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	69ba      	ldr	r2, [r7, #24]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d302      	bcc.n	800d002 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cffc:	2301      	movs	r3, #1
 800cffe:	61fb      	str	r3, [r7, #28]
 800d000:	e015      	b.n	800d02e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	697a      	ldr	r2, [r7, #20]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d20b      	bcs.n	800d024 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	1ad2      	subs	r2, r2, r3
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7ff ff9b 	bl	800cf54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d01e:	2300      	movs	r3, #0
 800d020:	61fb      	str	r3, [r7, #28]
 800d022:	e004      	b.n	800d02e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2200      	movs	r2, #0
 800d028:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d02a:	2301      	movs	r3, #1
 800d02c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d02e:	f7fe fee9 	bl	800be04 <vPortExitCritical>

	return xReturn;
 800d032:	69fb      	ldr	r3, [r7, #28]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3720      	adds	r7, #32
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	2400402c 	.word	0x2400402c
 800d040:	24004040 	.word	0x24004040

0800d044 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d044:	b480      	push	{r7}
 800d046:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d048:	4b03      	ldr	r3, [pc, #12]	; (800d058 <vTaskMissedYield+0x14>)
 800d04a:	2201      	movs	r2, #1
 800d04c:	601a      	str	r2, [r3, #0]
}
 800d04e:	bf00      	nop
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr
 800d058:	2400403c 	.word	0x2400403c

0800d05c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d064:	f000 f852 	bl	800d10c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d068:	4b06      	ldr	r3, [pc, #24]	; (800d084 <prvIdleTask+0x28>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d9f9      	bls.n	800d064 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d070:	4b05      	ldr	r3, [pc, #20]	; (800d088 <prvIdleTask+0x2c>)
 800d072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d080:	e7f0      	b.n	800d064 <prvIdleTask+0x8>
 800d082:	bf00      	nop
 800d084:	24003f2c 	.word	0x24003f2c
 800d088:	e000ed04 	.word	0xe000ed04

0800d08c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d092:	2300      	movs	r3, #0
 800d094:	607b      	str	r3, [r7, #4]
 800d096:	e00c      	b.n	800d0b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	4613      	mov	r3, r2
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4a12      	ldr	r2, [pc, #72]	; (800d0ec <prvInitialiseTaskLists+0x60>)
 800d0a4:	4413      	add	r3, r2
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fe fc9c 	bl	800b9e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	607b      	str	r3, [r7, #4]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b06      	cmp	r3, #6
 800d0b6:	d9ef      	bls.n	800d098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0b8:	480d      	ldr	r0, [pc, #52]	; (800d0f0 <prvInitialiseTaskLists+0x64>)
 800d0ba:	f7fe fc93 	bl	800b9e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0be:	480d      	ldr	r0, [pc, #52]	; (800d0f4 <prvInitialiseTaskLists+0x68>)
 800d0c0:	f7fe fc90 	bl	800b9e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0c4:	480c      	ldr	r0, [pc, #48]	; (800d0f8 <prvInitialiseTaskLists+0x6c>)
 800d0c6:	f7fe fc8d 	bl	800b9e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0ca:	480c      	ldr	r0, [pc, #48]	; (800d0fc <prvInitialiseTaskLists+0x70>)
 800d0cc:	f7fe fc8a 	bl	800b9e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0d0:	480b      	ldr	r0, [pc, #44]	; (800d100 <prvInitialiseTaskLists+0x74>)
 800d0d2:	f7fe fc87 	bl	800b9e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0d6:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <prvInitialiseTaskLists+0x78>)
 800d0d8:	4a05      	ldr	r2, [pc, #20]	; (800d0f0 <prvInitialiseTaskLists+0x64>)
 800d0da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	; (800d108 <prvInitialiseTaskLists+0x7c>)
 800d0de:	4a05      	ldr	r2, [pc, #20]	; (800d0f4 <prvInitialiseTaskLists+0x68>)
 800d0e0:	601a      	str	r2, [r3, #0]
}
 800d0e2:	bf00      	nop
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	24003f2c 	.word	0x24003f2c
 800d0f0:	24003fb8 	.word	0x24003fb8
 800d0f4:	24003fcc 	.word	0x24003fcc
 800d0f8:	24003fe8 	.word	0x24003fe8
 800d0fc:	24003ffc 	.word	0x24003ffc
 800d100:	24004014 	.word	0x24004014
 800d104:	24003fe0 	.word	0x24003fe0
 800d108:	24003fe4 	.word	0x24003fe4

0800d10c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d112:	e019      	b.n	800d148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d114:	f7fe fe46 	bl	800bda4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d118:	4b10      	ldr	r3, [pc, #64]	; (800d15c <prvCheckTasksWaitingTermination+0x50>)
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	3304      	adds	r3, #4
 800d124:	4618      	mov	r0, r3
 800d126:	f7fe fce7 	bl	800baf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d12a:	4b0d      	ldr	r3, [pc, #52]	; (800d160 <prvCheckTasksWaitingTermination+0x54>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	3b01      	subs	r3, #1
 800d130:	4a0b      	ldr	r2, [pc, #44]	; (800d160 <prvCheckTasksWaitingTermination+0x54>)
 800d132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d134:	4b0b      	ldr	r3, [pc, #44]	; (800d164 <prvCheckTasksWaitingTermination+0x58>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	3b01      	subs	r3, #1
 800d13a:	4a0a      	ldr	r2, [pc, #40]	; (800d164 <prvCheckTasksWaitingTermination+0x58>)
 800d13c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d13e:	f7fe fe61 	bl	800be04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 f810 	bl	800d168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d148:	4b06      	ldr	r3, [pc, #24]	; (800d164 <prvCheckTasksWaitingTermination+0x58>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1e1      	bne.n	800d114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d150:	bf00      	nop
 800d152:	bf00      	nop
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	24003ffc 	.word	0x24003ffc
 800d160:	24004028 	.word	0x24004028
 800d164:	24004010 	.word	0x24004010

0800d168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d176:	2b00      	cmp	r3, #0
 800d178:	d108      	bne.n	800d18c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fe fb12 	bl	800b7a8 <vPortFree>
				vPortFree( pxTCB );
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7fe fb0f 	bl	800b7a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d18a:	e018      	b.n	800d1be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d192:	2b01      	cmp	r3, #1
 800d194:	d103      	bne.n	800d19e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7fe fb06 	bl	800b7a8 <vPortFree>
	}
 800d19c:	e00f      	b.n	800d1be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d00a      	beq.n	800d1be <prvDeleteTCB+0x56>
	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	60fb      	str	r3, [r7, #12]
}
 800d1ba:	bf00      	nop
 800d1bc:	e7fe      	b.n	800d1bc <prvDeleteTCB+0x54>
	}
 800d1be:	bf00      	nop
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
	...

0800d1c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ce:	4b0c      	ldr	r3, [pc, #48]	; (800d200 <prvResetNextTaskUnblockTime+0x38>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d104      	bne.n	800d1e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1d8:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <prvResetNextTaskUnblockTime+0x3c>)
 800d1da:	f04f 32ff 	mov.w	r2, #4294967295
 800d1de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1e0:	e008      	b.n	800d1f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e2:	4b07      	ldr	r3, [pc, #28]	; (800d200 <prvResetNextTaskUnblockTime+0x38>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	4a04      	ldr	r2, [pc, #16]	; (800d204 <prvResetNextTaskUnblockTime+0x3c>)
 800d1f2:	6013      	str	r3, [r2, #0]
}
 800d1f4:	bf00      	nop
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	24003fe0 	.word	0x24003fe0
 800d204:	24004048 	.word	0x24004048

0800d208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d20e:	4b0b      	ldr	r3, [pc, #44]	; (800d23c <xTaskGetSchedulerState+0x34>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d102      	bne.n	800d21c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d216:	2301      	movs	r3, #1
 800d218:	607b      	str	r3, [r7, #4]
 800d21a:	e008      	b.n	800d22e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d21c:	4b08      	ldr	r3, [pc, #32]	; (800d240 <xTaskGetSchedulerState+0x38>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d102      	bne.n	800d22a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d224:	2302      	movs	r3, #2
 800d226:	607b      	str	r3, [r7, #4]
 800d228:	e001      	b.n	800d22e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d22a:	2300      	movs	r3, #0
 800d22c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d22e:	687b      	ldr	r3, [r7, #4]
	}
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	24004034 	.word	0x24004034
 800d240:	24004050 	.word	0x24004050

0800d244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d24e:	4b29      	ldr	r3, [pc, #164]	; (800d2f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d254:	4b28      	ldr	r3, [pc, #160]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3304      	adds	r3, #4
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fe fc4c 	bl	800baf8 <uxListRemove>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10b      	bne.n	800d27e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d266:	4b24      	ldr	r3, [pc, #144]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26c:	2201      	movs	r2, #1
 800d26e:	fa02 f303 	lsl.w	r3, r2, r3
 800d272:	43da      	mvns	r2, r3
 800d274:	4b21      	ldr	r3, [pc, #132]	; (800d2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4013      	ands	r3, r2
 800d27a:	4a20      	ldr	r2, [pc, #128]	; (800d2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d27c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d284:	d10a      	bne.n	800d29c <prvAddCurrentTaskToDelayedList+0x58>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d007      	beq.n	800d29c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d28c:	4b1a      	ldr	r3, [pc, #104]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3304      	adds	r3, #4
 800d292:	4619      	mov	r1, r3
 800d294:	481a      	ldr	r0, [pc, #104]	; (800d300 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d296:	f7fe fbd2 	bl	800ba3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d29a:	e026      	b.n	800d2ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d2a4:	4b14      	ldr	r3, [pc, #80]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d209      	bcs.n	800d2c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2b4:	4b13      	ldr	r3, [pc, #76]	; (800d304 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	4b0f      	ldr	r3, [pc, #60]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	f7fe fbe0 	bl	800ba86 <vListInsert>
}
 800d2c6:	e010      	b.n	800d2ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2c8:	4b0f      	ldr	r3, [pc, #60]	; (800d308 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	4b0a      	ldr	r3, [pc, #40]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	f7fe fbd6 	bl	800ba86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2da:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d202      	bcs.n	800d2ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d2e4:	4a09      	ldr	r2, [pc, #36]	; (800d30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	6013      	str	r3, [r2, #0]
}
 800d2ea:	bf00      	nop
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	2400402c 	.word	0x2400402c
 800d2f8:	24003f28 	.word	0x24003f28
 800d2fc:	24004030 	.word	0x24004030
 800d300:	24004014 	.word	0x24004014
 800d304:	24003fe4 	.word	0x24003fe4
 800d308:	24003fe0 	.word	0x24003fe0
 800d30c:	24004048 	.word	0x24004048

0800d310 <__errno>:
 800d310:	4b01      	ldr	r3, [pc, #4]	; (800d318 <__errno+0x8>)
 800d312:	6818      	ldr	r0, [r3, #0]
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	24000014 	.word	0x24000014

0800d31c <__libc_init_array>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4d0d      	ldr	r5, [pc, #52]	; (800d354 <__libc_init_array+0x38>)
 800d320:	4c0d      	ldr	r4, [pc, #52]	; (800d358 <__libc_init_array+0x3c>)
 800d322:	1b64      	subs	r4, r4, r5
 800d324:	10a4      	asrs	r4, r4, #2
 800d326:	2600      	movs	r6, #0
 800d328:	42a6      	cmp	r6, r4
 800d32a:	d109      	bne.n	800d340 <__libc_init_array+0x24>
 800d32c:	4d0b      	ldr	r5, [pc, #44]	; (800d35c <__libc_init_array+0x40>)
 800d32e:	4c0c      	ldr	r4, [pc, #48]	; (800d360 <__libc_init_array+0x44>)
 800d330:	f000 fcf4 	bl	800dd1c <_init>
 800d334:	1b64      	subs	r4, r4, r5
 800d336:	10a4      	asrs	r4, r4, #2
 800d338:	2600      	movs	r6, #0
 800d33a:	42a6      	cmp	r6, r4
 800d33c:	d105      	bne.n	800d34a <__libc_init_array+0x2e>
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
 800d340:	f855 3b04 	ldr.w	r3, [r5], #4
 800d344:	4798      	blx	r3
 800d346:	3601      	adds	r6, #1
 800d348:	e7ee      	b.n	800d328 <__libc_init_array+0xc>
 800d34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34e:	4798      	blx	r3
 800d350:	3601      	adds	r6, #1
 800d352:	e7f2      	b.n	800d33a <__libc_init_array+0x1e>
 800d354:	0800e158 	.word	0x0800e158
 800d358:	0800e158 	.word	0x0800e158
 800d35c:	0800e158 	.word	0x0800e158
 800d360:	0800e15c 	.word	0x0800e15c

0800d364 <memcpy>:
 800d364:	440a      	add	r2, r1
 800d366:	4291      	cmp	r1, r2
 800d368:	f100 33ff 	add.w	r3, r0, #4294967295
 800d36c:	d100      	bne.n	800d370 <memcpy+0xc>
 800d36e:	4770      	bx	lr
 800d370:	b510      	push	{r4, lr}
 800d372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d37a:	4291      	cmp	r1, r2
 800d37c:	d1f9      	bne.n	800d372 <memcpy+0xe>
 800d37e:	bd10      	pop	{r4, pc}

0800d380 <memset>:
 800d380:	4402      	add	r2, r0
 800d382:	4603      	mov	r3, r0
 800d384:	4293      	cmp	r3, r2
 800d386:	d100      	bne.n	800d38a <memset+0xa>
 800d388:	4770      	bx	lr
 800d38a:	f803 1b01 	strb.w	r1, [r3], #1
 800d38e:	e7f9      	b.n	800d384 <memset+0x4>

0800d390 <_puts_r>:
 800d390:	b570      	push	{r4, r5, r6, lr}
 800d392:	460e      	mov	r6, r1
 800d394:	4605      	mov	r5, r0
 800d396:	b118      	cbz	r0, 800d3a0 <_puts_r+0x10>
 800d398:	6983      	ldr	r3, [r0, #24]
 800d39a:	b90b      	cbnz	r3, 800d3a0 <_puts_r+0x10>
 800d39c:	f000 fa48 	bl	800d830 <__sinit>
 800d3a0:	69ab      	ldr	r3, [r5, #24]
 800d3a2:	68ac      	ldr	r4, [r5, #8]
 800d3a4:	b913      	cbnz	r3, 800d3ac <_puts_r+0x1c>
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	f000 fa42 	bl	800d830 <__sinit>
 800d3ac:	4b2c      	ldr	r3, [pc, #176]	; (800d460 <_puts_r+0xd0>)
 800d3ae:	429c      	cmp	r4, r3
 800d3b0:	d120      	bne.n	800d3f4 <_puts_r+0x64>
 800d3b2:	686c      	ldr	r4, [r5, #4]
 800d3b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3b6:	07db      	lsls	r3, r3, #31
 800d3b8:	d405      	bmi.n	800d3c6 <_puts_r+0x36>
 800d3ba:	89a3      	ldrh	r3, [r4, #12]
 800d3bc:	0598      	lsls	r0, r3, #22
 800d3be:	d402      	bmi.n	800d3c6 <_puts_r+0x36>
 800d3c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3c2:	f000 fad3 	bl	800d96c <__retarget_lock_acquire_recursive>
 800d3c6:	89a3      	ldrh	r3, [r4, #12]
 800d3c8:	0719      	lsls	r1, r3, #28
 800d3ca:	d51d      	bpl.n	800d408 <_puts_r+0x78>
 800d3cc:	6923      	ldr	r3, [r4, #16]
 800d3ce:	b1db      	cbz	r3, 800d408 <_puts_r+0x78>
 800d3d0:	3e01      	subs	r6, #1
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	60a3      	str	r3, [r4, #8]
 800d3dc:	bb39      	cbnz	r1, 800d42e <_puts_r+0x9e>
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	da38      	bge.n	800d454 <_puts_r+0xc4>
 800d3e2:	4622      	mov	r2, r4
 800d3e4:	210a      	movs	r1, #10
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f000 f848 	bl	800d47c <__swbuf_r>
 800d3ec:	3001      	adds	r0, #1
 800d3ee:	d011      	beq.n	800d414 <_puts_r+0x84>
 800d3f0:	250a      	movs	r5, #10
 800d3f2:	e011      	b.n	800d418 <_puts_r+0x88>
 800d3f4:	4b1b      	ldr	r3, [pc, #108]	; (800d464 <_puts_r+0xd4>)
 800d3f6:	429c      	cmp	r4, r3
 800d3f8:	d101      	bne.n	800d3fe <_puts_r+0x6e>
 800d3fa:	68ac      	ldr	r4, [r5, #8]
 800d3fc:	e7da      	b.n	800d3b4 <_puts_r+0x24>
 800d3fe:	4b1a      	ldr	r3, [pc, #104]	; (800d468 <_puts_r+0xd8>)
 800d400:	429c      	cmp	r4, r3
 800d402:	bf08      	it	eq
 800d404:	68ec      	ldreq	r4, [r5, #12]
 800d406:	e7d5      	b.n	800d3b4 <_puts_r+0x24>
 800d408:	4621      	mov	r1, r4
 800d40a:	4628      	mov	r0, r5
 800d40c:	f000 f888 	bl	800d520 <__swsetup_r>
 800d410:	2800      	cmp	r0, #0
 800d412:	d0dd      	beq.n	800d3d0 <_puts_r+0x40>
 800d414:	f04f 35ff 	mov.w	r5, #4294967295
 800d418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d41a:	07da      	lsls	r2, r3, #31
 800d41c:	d405      	bmi.n	800d42a <_puts_r+0x9a>
 800d41e:	89a3      	ldrh	r3, [r4, #12]
 800d420:	059b      	lsls	r3, r3, #22
 800d422:	d402      	bmi.n	800d42a <_puts_r+0x9a>
 800d424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d426:	f000 faa2 	bl	800d96e <__retarget_lock_release_recursive>
 800d42a:	4628      	mov	r0, r5
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
 800d42e:	2b00      	cmp	r3, #0
 800d430:	da04      	bge.n	800d43c <_puts_r+0xac>
 800d432:	69a2      	ldr	r2, [r4, #24]
 800d434:	429a      	cmp	r2, r3
 800d436:	dc06      	bgt.n	800d446 <_puts_r+0xb6>
 800d438:	290a      	cmp	r1, #10
 800d43a:	d004      	beq.n	800d446 <_puts_r+0xb6>
 800d43c:	6823      	ldr	r3, [r4, #0]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	6022      	str	r2, [r4, #0]
 800d442:	7019      	strb	r1, [r3, #0]
 800d444:	e7c5      	b.n	800d3d2 <_puts_r+0x42>
 800d446:	4622      	mov	r2, r4
 800d448:	4628      	mov	r0, r5
 800d44a:	f000 f817 	bl	800d47c <__swbuf_r>
 800d44e:	3001      	adds	r0, #1
 800d450:	d1bf      	bne.n	800d3d2 <_puts_r+0x42>
 800d452:	e7df      	b.n	800d414 <_puts_r+0x84>
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	250a      	movs	r5, #10
 800d458:	1c5a      	adds	r2, r3, #1
 800d45a:	6022      	str	r2, [r4, #0]
 800d45c:	701d      	strb	r5, [r3, #0]
 800d45e:	e7db      	b.n	800d418 <_puts_r+0x88>
 800d460:	0800e110 	.word	0x0800e110
 800d464:	0800e130 	.word	0x0800e130
 800d468:	0800e0f0 	.word	0x0800e0f0

0800d46c <puts>:
 800d46c:	4b02      	ldr	r3, [pc, #8]	; (800d478 <puts+0xc>)
 800d46e:	4601      	mov	r1, r0
 800d470:	6818      	ldr	r0, [r3, #0]
 800d472:	f7ff bf8d 	b.w	800d390 <_puts_r>
 800d476:	bf00      	nop
 800d478:	24000014 	.word	0x24000014

0800d47c <__swbuf_r>:
 800d47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47e:	460e      	mov	r6, r1
 800d480:	4614      	mov	r4, r2
 800d482:	4605      	mov	r5, r0
 800d484:	b118      	cbz	r0, 800d48e <__swbuf_r+0x12>
 800d486:	6983      	ldr	r3, [r0, #24]
 800d488:	b90b      	cbnz	r3, 800d48e <__swbuf_r+0x12>
 800d48a:	f000 f9d1 	bl	800d830 <__sinit>
 800d48e:	4b21      	ldr	r3, [pc, #132]	; (800d514 <__swbuf_r+0x98>)
 800d490:	429c      	cmp	r4, r3
 800d492:	d12b      	bne.n	800d4ec <__swbuf_r+0x70>
 800d494:	686c      	ldr	r4, [r5, #4]
 800d496:	69a3      	ldr	r3, [r4, #24]
 800d498:	60a3      	str	r3, [r4, #8]
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	071a      	lsls	r2, r3, #28
 800d49e:	d52f      	bpl.n	800d500 <__swbuf_r+0x84>
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	b36b      	cbz	r3, 800d500 <__swbuf_r+0x84>
 800d4a4:	6923      	ldr	r3, [r4, #16]
 800d4a6:	6820      	ldr	r0, [r4, #0]
 800d4a8:	1ac0      	subs	r0, r0, r3
 800d4aa:	6963      	ldr	r3, [r4, #20]
 800d4ac:	b2f6      	uxtb	r6, r6
 800d4ae:	4283      	cmp	r3, r0
 800d4b0:	4637      	mov	r7, r6
 800d4b2:	dc04      	bgt.n	800d4be <__swbuf_r+0x42>
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f000 f926 	bl	800d708 <_fflush_r>
 800d4bc:	bb30      	cbnz	r0, 800d50c <__swbuf_r+0x90>
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	60a3      	str	r3, [r4, #8]
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	6022      	str	r2, [r4, #0]
 800d4ca:	701e      	strb	r6, [r3, #0]
 800d4cc:	6963      	ldr	r3, [r4, #20]
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	4283      	cmp	r3, r0
 800d4d2:	d004      	beq.n	800d4de <__swbuf_r+0x62>
 800d4d4:	89a3      	ldrh	r3, [r4, #12]
 800d4d6:	07db      	lsls	r3, r3, #31
 800d4d8:	d506      	bpl.n	800d4e8 <__swbuf_r+0x6c>
 800d4da:	2e0a      	cmp	r6, #10
 800d4dc:	d104      	bne.n	800d4e8 <__swbuf_r+0x6c>
 800d4de:	4621      	mov	r1, r4
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	f000 f911 	bl	800d708 <_fflush_r>
 800d4e6:	b988      	cbnz	r0, 800d50c <__swbuf_r+0x90>
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ec:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <__swbuf_r+0x9c>)
 800d4ee:	429c      	cmp	r4, r3
 800d4f0:	d101      	bne.n	800d4f6 <__swbuf_r+0x7a>
 800d4f2:	68ac      	ldr	r4, [r5, #8]
 800d4f4:	e7cf      	b.n	800d496 <__swbuf_r+0x1a>
 800d4f6:	4b09      	ldr	r3, [pc, #36]	; (800d51c <__swbuf_r+0xa0>)
 800d4f8:	429c      	cmp	r4, r3
 800d4fa:	bf08      	it	eq
 800d4fc:	68ec      	ldreq	r4, [r5, #12]
 800d4fe:	e7ca      	b.n	800d496 <__swbuf_r+0x1a>
 800d500:	4621      	mov	r1, r4
 800d502:	4628      	mov	r0, r5
 800d504:	f000 f80c 	bl	800d520 <__swsetup_r>
 800d508:	2800      	cmp	r0, #0
 800d50a:	d0cb      	beq.n	800d4a4 <__swbuf_r+0x28>
 800d50c:	f04f 37ff 	mov.w	r7, #4294967295
 800d510:	e7ea      	b.n	800d4e8 <__swbuf_r+0x6c>
 800d512:	bf00      	nop
 800d514:	0800e110 	.word	0x0800e110
 800d518:	0800e130 	.word	0x0800e130
 800d51c:	0800e0f0 	.word	0x0800e0f0

0800d520 <__swsetup_r>:
 800d520:	4b32      	ldr	r3, [pc, #200]	; (800d5ec <__swsetup_r+0xcc>)
 800d522:	b570      	push	{r4, r5, r6, lr}
 800d524:	681d      	ldr	r5, [r3, #0]
 800d526:	4606      	mov	r6, r0
 800d528:	460c      	mov	r4, r1
 800d52a:	b125      	cbz	r5, 800d536 <__swsetup_r+0x16>
 800d52c:	69ab      	ldr	r3, [r5, #24]
 800d52e:	b913      	cbnz	r3, 800d536 <__swsetup_r+0x16>
 800d530:	4628      	mov	r0, r5
 800d532:	f000 f97d 	bl	800d830 <__sinit>
 800d536:	4b2e      	ldr	r3, [pc, #184]	; (800d5f0 <__swsetup_r+0xd0>)
 800d538:	429c      	cmp	r4, r3
 800d53a:	d10f      	bne.n	800d55c <__swsetup_r+0x3c>
 800d53c:	686c      	ldr	r4, [r5, #4]
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d544:	0719      	lsls	r1, r3, #28
 800d546:	d42c      	bmi.n	800d5a2 <__swsetup_r+0x82>
 800d548:	06dd      	lsls	r5, r3, #27
 800d54a:	d411      	bmi.n	800d570 <__swsetup_r+0x50>
 800d54c:	2309      	movs	r3, #9
 800d54e:	6033      	str	r3, [r6, #0]
 800d550:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	f04f 30ff 	mov.w	r0, #4294967295
 800d55a:	e03e      	b.n	800d5da <__swsetup_r+0xba>
 800d55c:	4b25      	ldr	r3, [pc, #148]	; (800d5f4 <__swsetup_r+0xd4>)
 800d55e:	429c      	cmp	r4, r3
 800d560:	d101      	bne.n	800d566 <__swsetup_r+0x46>
 800d562:	68ac      	ldr	r4, [r5, #8]
 800d564:	e7eb      	b.n	800d53e <__swsetup_r+0x1e>
 800d566:	4b24      	ldr	r3, [pc, #144]	; (800d5f8 <__swsetup_r+0xd8>)
 800d568:	429c      	cmp	r4, r3
 800d56a:	bf08      	it	eq
 800d56c:	68ec      	ldreq	r4, [r5, #12]
 800d56e:	e7e6      	b.n	800d53e <__swsetup_r+0x1e>
 800d570:	0758      	lsls	r0, r3, #29
 800d572:	d512      	bpl.n	800d59a <__swsetup_r+0x7a>
 800d574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d576:	b141      	cbz	r1, 800d58a <__swsetup_r+0x6a>
 800d578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d57c:	4299      	cmp	r1, r3
 800d57e:	d002      	beq.n	800d586 <__swsetup_r+0x66>
 800d580:	4630      	mov	r0, r6
 800d582:	f000 fa59 	bl	800da38 <_free_r>
 800d586:	2300      	movs	r3, #0
 800d588:	6363      	str	r3, [r4, #52]	; 0x34
 800d58a:	89a3      	ldrh	r3, [r4, #12]
 800d58c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d590:	81a3      	strh	r3, [r4, #12]
 800d592:	2300      	movs	r3, #0
 800d594:	6063      	str	r3, [r4, #4]
 800d596:	6923      	ldr	r3, [r4, #16]
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	89a3      	ldrh	r3, [r4, #12]
 800d59c:	f043 0308 	orr.w	r3, r3, #8
 800d5a0:	81a3      	strh	r3, [r4, #12]
 800d5a2:	6923      	ldr	r3, [r4, #16]
 800d5a4:	b94b      	cbnz	r3, 800d5ba <__swsetup_r+0x9a>
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5b0:	d003      	beq.n	800d5ba <__swsetup_r+0x9a>
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f000 f9ff 	bl	800d9b8 <__smakebuf_r>
 800d5ba:	89a0      	ldrh	r0, [r4, #12]
 800d5bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5c0:	f010 0301 	ands.w	r3, r0, #1
 800d5c4:	d00a      	beq.n	800d5dc <__swsetup_r+0xbc>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	60a3      	str	r3, [r4, #8]
 800d5ca:	6963      	ldr	r3, [r4, #20]
 800d5cc:	425b      	negs	r3, r3
 800d5ce:	61a3      	str	r3, [r4, #24]
 800d5d0:	6923      	ldr	r3, [r4, #16]
 800d5d2:	b943      	cbnz	r3, 800d5e6 <__swsetup_r+0xc6>
 800d5d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5d8:	d1ba      	bne.n	800d550 <__swsetup_r+0x30>
 800d5da:	bd70      	pop	{r4, r5, r6, pc}
 800d5dc:	0781      	lsls	r1, r0, #30
 800d5de:	bf58      	it	pl
 800d5e0:	6963      	ldrpl	r3, [r4, #20]
 800d5e2:	60a3      	str	r3, [r4, #8]
 800d5e4:	e7f4      	b.n	800d5d0 <__swsetup_r+0xb0>
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	e7f7      	b.n	800d5da <__swsetup_r+0xba>
 800d5ea:	bf00      	nop
 800d5ec:	24000014 	.word	0x24000014
 800d5f0:	0800e110 	.word	0x0800e110
 800d5f4:	0800e130 	.word	0x0800e130
 800d5f8:	0800e0f0 	.word	0x0800e0f0

0800d5fc <__sflush_r>:
 800d5fc:	898a      	ldrh	r2, [r1, #12]
 800d5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d602:	4605      	mov	r5, r0
 800d604:	0710      	lsls	r0, r2, #28
 800d606:	460c      	mov	r4, r1
 800d608:	d458      	bmi.n	800d6bc <__sflush_r+0xc0>
 800d60a:	684b      	ldr	r3, [r1, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	dc05      	bgt.n	800d61c <__sflush_r+0x20>
 800d610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d612:	2b00      	cmp	r3, #0
 800d614:	dc02      	bgt.n	800d61c <__sflush_r+0x20>
 800d616:	2000      	movs	r0, #0
 800d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d61c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d61e:	2e00      	cmp	r6, #0
 800d620:	d0f9      	beq.n	800d616 <__sflush_r+0x1a>
 800d622:	2300      	movs	r3, #0
 800d624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d628:	682f      	ldr	r7, [r5, #0]
 800d62a:	602b      	str	r3, [r5, #0]
 800d62c:	d032      	beq.n	800d694 <__sflush_r+0x98>
 800d62e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	075a      	lsls	r2, r3, #29
 800d634:	d505      	bpl.n	800d642 <__sflush_r+0x46>
 800d636:	6863      	ldr	r3, [r4, #4]
 800d638:	1ac0      	subs	r0, r0, r3
 800d63a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d63c:	b10b      	cbz	r3, 800d642 <__sflush_r+0x46>
 800d63e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d640:	1ac0      	subs	r0, r0, r3
 800d642:	2300      	movs	r3, #0
 800d644:	4602      	mov	r2, r0
 800d646:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d648:	6a21      	ldr	r1, [r4, #32]
 800d64a:	4628      	mov	r0, r5
 800d64c:	47b0      	blx	r6
 800d64e:	1c43      	adds	r3, r0, #1
 800d650:	89a3      	ldrh	r3, [r4, #12]
 800d652:	d106      	bne.n	800d662 <__sflush_r+0x66>
 800d654:	6829      	ldr	r1, [r5, #0]
 800d656:	291d      	cmp	r1, #29
 800d658:	d82c      	bhi.n	800d6b4 <__sflush_r+0xb8>
 800d65a:	4a2a      	ldr	r2, [pc, #168]	; (800d704 <__sflush_r+0x108>)
 800d65c:	40ca      	lsrs	r2, r1
 800d65e:	07d6      	lsls	r6, r2, #31
 800d660:	d528      	bpl.n	800d6b4 <__sflush_r+0xb8>
 800d662:	2200      	movs	r2, #0
 800d664:	6062      	str	r2, [r4, #4]
 800d666:	04d9      	lsls	r1, r3, #19
 800d668:	6922      	ldr	r2, [r4, #16]
 800d66a:	6022      	str	r2, [r4, #0]
 800d66c:	d504      	bpl.n	800d678 <__sflush_r+0x7c>
 800d66e:	1c42      	adds	r2, r0, #1
 800d670:	d101      	bne.n	800d676 <__sflush_r+0x7a>
 800d672:	682b      	ldr	r3, [r5, #0]
 800d674:	b903      	cbnz	r3, 800d678 <__sflush_r+0x7c>
 800d676:	6560      	str	r0, [r4, #84]	; 0x54
 800d678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d67a:	602f      	str	r7, [r5, #0]
 800d67c:	2900      	cmp	r1, #0
 800d67e:	d0ca      	beq.n	800d616 <__sflush_r+0x1a>
 800d680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d684:	4299      	cmp	r1, r3
 800d686:	d002      	beq.n	800d68e <__sflush_r+0x92>
 800d688:	4628      	mov	r0, r5
 800d68a:	f000 f9d5 	bl	800da38 <_free_r>
 800d68e:	2000      	movs	r0, #0
 800d690:	6360      	str	r0, [r4, #52]	; 0x34
 800d692:	e7c1      	b.n	800d618 <__sflush_r+0x1c>
 800d694:	6a21      	ldr	r1, [r4, #32]
 800d696:	2301      	movs	r3, #1
 800d698:	4628      	mov	r0, r5
 800d69a:	47b0      	blx	r6
 800d69c:	1c41      	adds	r1, r0, #1
 800d69e:	d1c7      	bne.n	800d630 <__sflush_r+0x34>
 800d6a0:	682b      	ldr	r3, [r5, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d0c4      	beq.n	800d630 <__sflush_r+0x34>
 800d6a6:	2b1d      	cmp	r3, #29
 800d6a8:	d001      	beq.n	800d6ae <__sflush_r+0xb2>
 800d6aa:	2b16      	cmp	r3, #22
 800d6ac:	d101      	bne.n	800d6b2 <__sflush_r+0xb6>
 800d6ae:	602f      	str	r7, [r5, #0]
 800d6b0:	e7b1      	b.n	800d616 <__sflush_r+0x1a>
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	e7ad      	b.n	800d618 <__sflush_r+0x1c>
 800d6bc:	690f      	ldr	r7, [r1, #16]
 800d6be:	2f00      	cmp	r7, #0
 800d6c0:	d0a9      	beq.n	800d616 <__sflush_r+0x1a>
 800d6c2:	0793      	lsls	r3, r2, #30
 800d6c4:	680e      	ldr	r6, [r1, #0]
 800d6c6:	bf08      	it	eq
 800d6c8:	694b      	ldreq	r3, [r1, #20]
 800d6ca:	600f      	str	r7, [r1, #0]
 800d6cc:	bf18      	it	ne
 800d6ce:	2300      	movne	r3, #0
 800d6d0:	eba6 0807 	sub.w	r8, r6, r7
 800d6d4:	608b      	str	r3, [r1, #8]
 800d6d6:	f1b8 0f00 	cmp.w	r8, #0
 800d6da:	dd9c      	ble.n	800d616 <__sflush_r+0x1a>
 800d6dc:	6a21      	ldr	r1, [r4, #32]
 800d6de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6e0:	4643      	mov	r3, r8
 800d6e2:	463a      	mov	r2, r7
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	47b0      	blx	r6
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	dc06      	bgt.n	800d6fa <__sflush_r+0xfe>
 800d6ec:	89a3      	ldrh	r3, [r4, #12]
 800d6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6f2:	81a3      	strh	r3, [r4, #12]
 800d6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f8:	e78e      	b.n	800d618 <__sflush_r+0x1c>
 800d6fa:	4407      	add	r7, r0
 800d6fc:	eba8 0800 	sub.w	r8, r8, r0
 800d700:	e7e9      	b.n	800d6d6 <__sflush_r+0xda>
 800d702:	bf00      	nop
 800d704:	20400001 	.word	0x20400001

0800d708 <_fflush_r>:
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	690b      	ldr	r3, [r1, #16]
 800d70c:	4605      	mov	r5, r0
 800d70e:	460c      	mov	r4, r1
 800d710:	b913      	cbnz	r3, 800d718 <_fflush_r+0x10>
 800d712:	2500      	movs	r5, #0
 800d714:	4628      	mov	r0, r5
 800d716:	bd38      	pop	{r3, r4, r5, pc}
 800d718:	b118      	cbz	r0, 800d722 <_fflush_r+0x1a>
 800d71a:	6983      	ldr	r3, [r0, #24]
 800d71c:	b90b      	cbnz	r3, 800d722 <_fflush_r+0x1a>
 800d71e:	f000 f887 	bl	800d830 <__sinit>
 800d722:	4b14      	ldr	r3, [pc, #80]	; (800d774 <_fflush_r+0x6c>)
 800d724:	429c      	cmp	r4, r3
 800d726:	d11b      	bne.n	800d760 <_fflush_r+0x58>
 800d728:	686c      	ldr	r4, [r5, #4]
 800d72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d0ef      	beq.n	800d712 <_fflush_r+0xa>
 800d732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d734:	07d0      	lsls	r0, r2, #31
 800d736:	d404      	bmi.n	800d742 <_fflush_r+0x3a>
 800d738:	0599      	lsls	r1, r3, #22
 800d73a:	d402      	bmi.n	800d742 <_fflush_r+0x3a>
 800d73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d73e:	f000 f915 	bl	800d96c <__retarget_lock_acquire_recursive>
 800d742:	4628      	mov	r0, r5
 800d744:	4621      	mov	r1, r4
 800d746:	f7ff ff59 	bl	800d5fc <__sflush_r>
 800d74a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d74c:	07da      	lsls	r2, r3, #31
 800d74e:	4605      	mov	r5, r0
 800d750:	d4e0      	bmi.n	800d714 <_fflush_r+0xc>
 800d752:	89a3      	ldrh	r3, [r4, #12]
 800d754:	059b      	lsls	r3, r3, #22
 800d756:	d4dd      	bmi.n	800d714 <_fflush_r+0xc>
 800d758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d75a:	f000 f908 	bl	800d96e <__retarget_lock_release_recursive>
 800d75e:	e7d9      	b.n	800d714 <_fflush_r+0xc>
 800d760:	4b05      	ldr	r3, [pc, #20]	; (800d778 <_fflush_r+0x70>)
 800d762:	429c      	cmp	r4, r3
 800d764:	d101      	bne.n	800d76a <_fflush_r+0x62>
 800d766:	68ac      	ldr	r4, [r5, #8]
 800d768:	e7df      	b.n	800d72a <_fflush_r+0x22>
 800d76a:	4b04      	ldr	r3, [pc, #16]	; (800d77c <_fflush_r+0x74>)
 800d76c:	429c      	cmp	r4, r3
 800d76e:	bf08      	it	eq
 800d770:	68ec      	ldreq	r4, [r5, #12]
 800d772:	e7da      	b.n	800d72a <_fflush_r+0x22>
 800d774:	0800e110 	.word	0x0800e110
 800d778:	0800e130 	.word	0x0800e130
 800d77c:	0800e0f0 	.word	0x0800e0f0

0800d780 <std>:
 800d780:	2300      	movs	r3, #0
 800d782:	b510      	push	{r4, lr}
 800d784:	4604      	mov	r4, r0
 800d786:	e9c0 3300 	strd	r3, r3, [r0]
 800d78a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d78e:	6083      	str	r3, [r0, #8]
 800d790:	8181      	strh	r1, [r0, #12]
 800d792:	6643      	str	r3, [r0, #100]	; 0x64
 800d794:	81c2      	strh	r2, [r0, #14]
 800d796:	6183      	str	r3, [r0, #24]
 800d798:	4619      	mov	r1, r3
 800d79a:	2208      	movs	r2, #8
 800d79c:	305c      	adds	r0, #92	; 0x5c
 800d79e:	f7ff fdef 	bl	800d380 <memset>
 800d7a2:	4b05      	ldr	r3, [pc, #20]	; (800d7b8 <std+0x38>)
 800d7a4:	6263      	str	r3, [r4, #36]	; 0x24
 800d7a6:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <std+0x3c>)
 800d7a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7aa:	4b05      	ldr	r3, [pc, #20]	; (800d7c0 <std+0x40>)
 800d7ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7ae:	4b05      	ldr	r3, [pc, #20]	; (800d7c4 <std+0x44>)
 800d7b0:	6224      	str	r4, [r4, #32]
 800d7b2:	6323      	str	r3, [r4, #48]	; 0x30
 800d7b4:	bd10      	pop	{r4, pc}
 800d7b6:	bf00      	nop
 800d7b8:	0800dbad 	.word	0x0800dbad
 800d7bc:	0800dbcf 	.word	0x0800dbcf
 800d7c0:	0800dc07 	.word	0x0800dc07
 800d7c4:	0800dc2b 	.word	0x0800dc2b

0800d7c8 <_cleanup_r>:
 800d7c8:	4901      	ldr	r1, [pc, #4]	; (800d7d0 <_cleanup_r+0x8>)
 800d7ca:	f000 b8af 	b.w	800d92c <_fwalk_reent>
 800d7ce:	bf00      	nop
 800d7d0:	0800d709 	.word	0x0800d709

0800d7d4 <__sfmoreglue>:
 800d7d4:	b570      	push	{r4, r5, r6, lr}
 800d7d6:	1e4a      	subs	r2, r1, #1
 800d7d8:	2568      	movs	r5, #104	; 0x68
 800d7da:	4355      	muls	r5, r2
 800d7dc:	460e      	mov	r6, r1
 800d7de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7e2:	f000 f979 	bl	800dad8 <_malloc_r>
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	b140      	cbz	r0, 800d7fc <__sfmoreglue+0x28>
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	e9c0 1600 	strd	r1, r6, [r0]
 800d7f0:	300c      	adds	r0, #12
 800d7f2:	60a0      	str	r0, [r4, #8]
 800d7f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7f8:	f7ff fdc2 	bl	800d380 <memset>
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	bd70      	pop	{r4, r5, r6, pc}

0800d800 <__sfp_lock_acquire>:
 800d800:	4801      	ldr	r0, [pc, #4]	; (800d808 <__sfp_lock_acquire+0x8>)
 800d802:	f000 b8b3 	b.w	800d96c <__retarget_lock_acquire_recursive>
 800d806:	bf00      	nop
 800d808:	24008438 	.word	0x24008438

0800d80c <__sfp_lock_release>:
 800d80c:	4801      	ldr	r0, [pc, #4]	; (800d814 <__sfp_lock_release+0x8>)
 800d80e:	f000 b8ae 	b.w	800d96e <__retarget_lock_release_recursive>
 800d812:	bf00      	nop
 800d814:	24008438 	.word	0x24008438

0800d818 <__sinit_lock_acquire>:
 800d818:	4801      	ldr	r0, [pc, #4]	; (800d820 <__sinit_lock_acquire+0x8>)
 800d81a:	f000 b8a7 	b.w	800d96c <__retarget_lock_acquire_recursive>
 800d81e:	bf00      	nop
 800d820:	24008433 	.word	0x24008433

0800d824 <__sinit_lock_release>:
 800d824:	4801      	ldr	r0, [pc, #4]	; (800d82c <__sinit_lock_release+0x8>)
 800d826:	f000 b8a2 	b.w	800d96e <__retarget_lock_release_recursive>
 800d82a:	bf00      	nop
 800d82c:	24008433 	.word	0x24008433

0800d830 <__sinit>:
 800d830:	b510      	push	{r4, lr}
 800d832:	4604      	mov	r4, r0
 800d834:	f7ff fff0 	bl	800d818 <__sinit_lock_acquire>
 800d838:	69a3      	ldr	r3, [r4, #24]
 800d83a:	b11b      	cbz	r3, 800d844 <__sinit+0x14>
 800d83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d840:	f7ff bff0 	b.w	800d824 <__sinit_lock_release>
 800d844:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d848:	6523      	str	r3, [r4, #80]	; 0x50
 800d84a:	4b13      	ldr	r3, [pc, #76]	; (800d898 <__sinit+0x68>)
 800d84c:	4a13      	ldr	r2, [pc, #76]	; (800d89c <__sinit+0x6c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	62a2      	str	r2, [r4, #40]	; 0x28
 800d852:	42a3      	cmp	r3, r4
 800d854:	bf04      	itt	eq
 800d856:	2301      	moveq	r3, #1
 800d858:	61a3      	streq	r3, [r4, #24]
 800d85a:	4620      	mov	r0, r4
 800d85c:	f000 f820 	bl	800d8a0 <__sfp>
 800d860:	6060      	str	r0, [r4, #4]
 800d862:	4620      	mov	r0, r4
 800d864:	f000 f81c 	bl	800d8a0 <__sfp>
 800d868:	60a0      	str	r0, [r4, #8]
 800d86a:	4620      	mov	r0, r4
 800d86c:	f000 f818 	bl	800d8a0 <__sfp>
 800d870:	2200      	movs	r2, #0
 800d872:	60e0      	str	r0, [r4, #12]
 800d874:	2104      	movs	r1, #4
 800d876:	6860      	ldr	r0, [r4, #4]
 800d878:	f7ff ff82 	bl	800d780 <std>
 800d87c:	68a0      	ldr	r0, [r4, #8]
 800d87e:	2201      	movs	r2, #1
 800d880:	2109      	movs	r1, #9
 800d882:	f7ff ff7d 	bl	800d780 <std>
 800d886:	68e0      	ldr	r0, [r4, #12]
 800d888:	2202      	movs	r2, #2
 800d88a:	2112      	movs	r1, #18
 800d88c:	f7ff ff78 	bl	800d780 <std>
 800d890:	2301      	movs	r3, #1
 800d892:	61a3      	str	r3, [r4, #24]
 800d894:	e7d2      	b.n	800d83c <__sinit+0xc>
 800d896:	bf00      	nop
 800d898:	0800e0ec 	.word	0x0800e0ec
 800d89c:	0800d7c9 	.word	0x0800d7c9

0800d8a0 <__sfp>:
 800d8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a2:	4607      	mov	r7, r0
 800d8a4:	f7ff ffac 	bl	800d800 <__sfp_lock_acquire>
 800d8a8:	4b1e      	ldr	r3, [pc, #120]	; (800d924 <__sfp+0x84>)
 800d8aa:	681e      	ldr	r6, [r3, #0]
 800d8ac:	69b3      	ldr	r3, [r6, #24]
 800d8ae:	b913      	cbnz	r3, 800d8b6 <__sfp+0x16>
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	f7ff ffbd 	bl	800d830 <__sinit>
 800d8b6:	3648      	adds	r6, #72	; 0x48
 800d8b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	d503      	bpl.n	800d8c8 <__sfp+0x28>
 800d8c0:	6833      	ldr	r3, [r6, #0]
 800d8c2:	b30b      	cbz	r3, 800d908 <__sfp+0x68>
 800d8c4:	6836      	ldr	r6, [r6, #0]
 800d8c6:	e7f7      	b.n	800d8b8 <__sfp+0x18>
 800d8c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8cc:	b9d5      	cbnz	r5, 800d904 <__sfp+0x64>
 800d8ce:	4b16      	ldr	r3, [pc, #88]	; (800d928 <__sfp+0x88>)
 800d8d0:	60e3      	str	r3, [r4, #12]
 800d8d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8d6:	6665      	str	r5, [r4, #100]	; 0x64
 800d8d8:	f000 f847 	bl	800d96a <__retarget_lock_init_recursive>
 800d8dc:	f7ff ff96 	bl	800d80c <__sfp_lock_release>
 800d8e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8e8:	6025      	str	r5, [r4, #0]
 800d8ea:	61a5      	str	r5, [r4, #24]
 800d8ec:	2208      	movs	r2, #8
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8f4:	f7ff fd44 	bl	800d380 <memset>
 800d8f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d900:	4620      	mov	r0, r4
 800d902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d904:	3468      	adds	r4, #104	; 0x68
 800d906:	e7d9      	b.n	800d8bc <__sfp+0x1c>
 800d908:	2104      	movs	r1, #4
 800d90a:	4638      	mov	r0, r7
 800d90c:	f7ff ff62 	bl	800d7d4 <__sfmoreglue>
 800d910:	4604      	mov	r4, r0
 800d912:	6030      	str	r0, [r6, #0]
 800d914:	2800      	cmp	r0, #0
 800d916:	d1d5      	bne.n	800d8c4 <__sfp+0x24>
 800d918:	f7ff ff78 	bl	800d80c <__sfp_lock_release>
 800d91c:	230c      	movs	r3, #12
 800d91e:	603b      	str	r3, [r7, #0]
 800d920:	e7ee      	b.n	800d900 <__sfp+0x60>
 800d922:	bf00      	nop
 800d924:	0800e0ec 	.word	0x0800e0ec
 800d928:	ffff0001 	.word	0xffff0001

0800d92c <_fwalk_reent>:
 800d92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d930:	4606      	mov	r6, r0
 800d932:	4688      	mov	r8, r1
 800d934:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d938:	2700      	movs	r7, #0
 800d93a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d93e:	f1b9 0901 	subs.w	r9, r9, #1
 800d942:	d505      	bpl.n	800d950 <_fwalk_reent+0x24>
 800d944:	6824      	ldr	r4, [r4, #0]
 800d946:	2c00      	cmp	r4, #0
 800d948:	d1f7      	bne.n	800d93a <_fwalk_reent+0xe>
 800d94a:	4638      	mov	r0, r7
 800d94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d950:	89ab      	ldrh	r3, [r5, #12]
 800d952:	2b01      	cmp	r3, #1
 800d954:	d907      	bls.n	800d966 <_fwalk_reent+0x3a>
 800d956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d95a:	3301      	adds	r3, #1
 800d95c:	d003      	beq.n	800d966 <_fwalk_reent+0x3a>
 800d95e:	4629      	mov	r1, r5
 800d960:	4630      	mov	r0, r6
 800d962:	47c0      	blx	r8
 800d964:	4307      	orrs	r7, r0
 800d966:	3568      	adds	r5, #104	; 0x68
 800d968:	e7e9      	b.n	800d93e <_fwalk_reent+0x12>

0800d96a <__retarget_lock_init_recursive>:
 800d96a:	4770      	bx	lr

0800d96c <__retarget_lock_acquire_recursive>:
 800d96c:	4770      	bx	lr

0800d96e <__retarget_lock_release_recursive>:
 800d96e:	4770      	bx	lr

0800d970 <__swhatbuf_r>:
 800d970:	b570      	push	{r4, r5, r6, lr}
 800d972:	460e      	mov	r6, r1
 800d974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d978:	2900      	cmp	r1, #0
 800d97a:	b096      	sub	sp, #88	; 0x58
 800d97c:	4614      	mov	r4, r2
 800d97e:	461d      	mov	r5, r3
 800d980:	da07      	bge.n	800d992 <__swhatbuf_r+0x22>
 800d982:	2300      	movs	r3, #0
 800d984:	602b      	str	r3, [r5, #0]
 800d986:	89b3      	ldrh	r3, [r6, #12]
 800d988:	061a      	lsls	r2, r3, #24
 800d98a:	d410      	bmi.n	800d9ae <__swhatbuf_r+0x3e>
 800d98c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d990:	e00e      	b.n	800d9b0 <__swhatbuf_r+0x40>
 800d992:	466a      	mov	r2, sp
 800d994:	f000 f970 	bl	800dc78 <_fstat_r>
 800d998:	2800      	cmp	r0, #0
 800d99a:	dbf2      	blt.n	800d982 <__swhatbuf_r+0x12>
 800d99c:	9a01      	ldr	r2, [sp, #4]
 800d99e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9a6:	425a      	negs	r2, r3
 800d9a8:	415a      	adcs	r2, r3
 800d9aa:	602a      	str	r2, [r5, #0]
 800d9ac:	e7ee      	b.n	800d98c <__swhatbuf_r+0x1c>
 800d9ae:	2340      	movs	r3, #64	; 0x40
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	6023      	str	r3, [r4, #0]
 800d9b4:	b016      	add	sp, #88	; 0x58
 800d9b6:	bd70      	pop	{r4, r5, r6, pc}

0800d9b8 <__smakebuf_r>:
 800d9b8:	898b      	ldrh	r3, [r1, #12]
 800d9ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9bc:	079d      	lsls	r5, r3, #30
 800d9be:	4606      	mov	r6, r0
 800d9c0:	460c      	mov	r4, r1
 800d9c2:	d507      	bpl.n	800d9d4 <__smakebuf_r+0x1c>
 800d9c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	6123      	str	r3, [r4, #16]
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	6163      	str	r3, [r4, #20]
 800d9d0:	b002      	add	sp, #8
 800d9d2:	bd70      	pop	{r4, r5, r6, pc}
 800d9d4:	ab01      	add	r3, sp, #4
 800d9d6:	466a      	mov	r2, sp
 800d9d8:	f7ff ffca 	bl	800d970 <__swhatbuf_r>
 800d9dc:	9900      	ldr	r1, [sp, #0]
 800d9de:	4605      	mov	r5, r0
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	f000 f879 	bl	800dad8 <_malloc_r>
 800d9e6:	b948      	cbnz	r0, 800d9fc <__smakebuf_r+0x44>
 800d9e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ec:	059a      	lsls	r2, r3, #22
 800d9ee:	d4ef      	bmi.n	800d9d0 <__smakebuf_r+0x18>
 800d9f0:	f023 0303 	bic.w	r3, r3, #3
 800d9f4:	f043 0302 	orr.w	r3, r3, #2
 800d9f8:	81a3      	strh	r3, [r4, #12]
 800d9fa:	e7e3      	b.n	800d9c4 <__smakebuf_r+0xc>
 800d9fc:	4b0d      	ldr	r3, [pc, #52]	; (800da34 <__smakebuf_r+0x7c>)
 800d9fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	6020      	str	r0, [r4, #0]
 800da04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da08:	81a3      	strh	r3, [r4, #12]
 800da0a:	9b00      	ldr	r3, [sp, #0]
 800da0c:	6163      	str	r3, [r4, #20]
 800da0e:	9b01      	ldr	r3, [sp, #4]
 800da10:	6120      	str	r0, [r4, #16]
 800da12:	b15b      	cbz	r3, 800da2c <__smakebuf_r+0x74>
 800da14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da18:	4630      	mov	r0, r6
 800da1a:	f000 f93f 	bl	800dc9c <_isatty_r>
 800da1e:	b128      	cbz	r0, 800da2c <__smakebuf_r+0x74>
 800da20:	89a3      	ldrh	r3, [r4, #12]
 800da22:	f023 0303 	bic.w	r3, r3, #3
 800da26:	f043 0301 	orr.w	r3, r3, #1
 800da2a:	81a3      	strh	r3, [r4, #12]
 800da2c:	89a0      	ldrh	r0, [r4, #12]
 800da2e:	4305      	orrs	r5, r0
 800da30:	81a5      	strh	r5, [r4, #12]
 800da32:	e7cd      	b.n	800d9d0 <__smakebuf_r+0x18>
 800da34:	0800d7c9 	.word	0x0800d7c9

0800da38 <_free_r>:
 800da38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da3a:	2900      	cmp	r1, #0
 800da3c:	d048      	beq.n	800dad0 <_free_r+0x98>
 800da3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da42:	9001      	str	r0, [sp, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	f1a1 0404 	sub.w	r4, r1, #4
 800da4a:	bfb8      	it	lt
 800da4c:	18e4      	addlt	r4, r4, r3
 800da4e:	f000 f947 	bl	800dce0 <__malloc_lock>
 800da52:	4a20      	ldr	r2, [pc, #128]	; (800dad4 <_free_r+0x9c>)
 800da54:	9801      	ldr	r0, [sp, #4]
 800da56:	6813      	ldr	r3, [r2, #0]
 800da58:	4615      	mov	r5, r2
 800da5a:	b933      	cbnz	r3, 800da6a <_free_r+0x32>
 800da5c:	6063      	str	r3, [r4, #4]
 800da5e:	6014      	str	r4, [r2, #0]
 800da60:	b003      	add	sp, #12
 800da62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da66:	f000 b941 	b.w	800dcec <__malloc_unlock>
 800da6a:	42a3      	cmp	r3, r4
 800da6c:	d90b      	bls.n	800da86 <_free_r+0x4e>
 800da6e:	6821      	ldr	r1, [r4, #0]
 800da70:	1862      	adds	r2, r4, r1
 800da72:	4293      	cmp	r3, r2
 800da74:	bf04      	itt	eq
 800da76:	681a      	ldreq	r2, [r3, #0]
 800da78:	685b      	ldreq	r3, [r3, #4]
 800da7a:	6063      	str	r3, [r4, #4]
 800da7c:	bf04      	itt	eq
 800da7e:	1852      	addeq	r2, r2, r1
 800da80:	6022      	streq	r2, [r4, #0]
 800da82:	602c      	str	r4, [r5, #0]
 800da84:	e7ec      	b.n	800da60 <_free_r+0x28>
 800da86:	461a      	mov	r2, r3
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	b10b      	cbz	r3, 800da90 <_free_r+0x58>
 800da8c:	42a3      	cmp	r3, r4
 800da8e:	d9fa      	bls.n	800da86 <_free_r+0x4e>
 800da90:	6811      	ldr	r1, [r2, #0]
 800da92:	1855      	adds	r5, r2, r1
 800da94:	42a5      	cmp	r5, r4
 800da96:	d10b      	bne.n	800dab0 <_free_r+0x78>
 800da98:	6824      	ldr	r4, [r4, #0]
 800da9a:	4421      	add	r1, r4
 800da9c:	1854      	adds	r4, r2, r1
 800da9e:	42a3      	cmp	r3, r4
 800daa0:	6011      	str	r1, [r2, #0]
 800daa2:	d1dd      	bne.n	800da60 <_free_r+0x28>
 800daa4:	681c      	ldr	r4, [r3, #0]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	6053      	str	r3, [r2, #4]
 800daaa:	4421      	add	r1, r4
 800daac:	6011      	str	r1, [r2, #0]
 800daae:	e7d7      	b.n	800da60 <_free_r+0x28>
 800dab0:	d902      	bls.n	800dab8 <_free_r+0x80>
 800dab2:	230c      	movs	r3, #12
 800dab4:	6003      	str	r3, [r0, #0]
 800dab6:	e7d3      	b.n	800da60 <_free_r+0x28>
 800dab8:	6825      	ldr	r5, [r4, #0]
 800daba:	1961      	adds	r1, r4, r5
 800dabc:	428b      	cmp	r3, r1
 800dabe:	bf04      	itt	eq
 800dac0:	6819      	ldreq	r1, [r3, #0]
 800dac2:	685b      	ldreq	r3, [r3, #4]
 800dac4:	6063      	str	r3, [r4, #4]
 800dac6:	bf04      	itt	eq
 800dac8:	1949      	addeq	r1, r1, r5
 800daca:	6021      	streq	r1, [r4, #0]
 800dacc:	6054      	str	r4, [r2, #4]
 800dace:	e7c7      	b.n	800da60 <_free_r+0x28>
 800dad0:	b003      	add	sp, #12
 800dad2:	bd30      	pop	{r4, r5, pc}
 800dad4:	24004054 	.word	0x24004054

0800dad8 <_malloc_r>:
 800dad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dada:	1ccd      	adds	r5, r1, #3
 800dadc:	f025 0503 	bic.w	r5, r5, #3
 800dae0:	3508      	adds	r5, #8
 800dae2:	2d0c      	cmp	r5, #12
 800dae4:	bf38      	it	cc
 800dae6:	250c      	movcc	r5, #12
 800dae8:	2d00      	cmp	r5, #0
 800daea:	4606      	mov	r6, r0
 800daec:	db01      	blt.n	800daf2 <_malloc_r+0x1a>
 800daee:	42a9      	cmp	r1, r5
 800daf0:	d903      	bls.n	800dafa <_malloc_r+0x22>
 800daf2:	230c      	movs	r3, #12
 800daf4:	6033      	str	r3, [r6, #0]
 800daf6:	2000      	movs	r0, #0
 800daf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dafa:	f000 f8f1 	bl	800dce0 <__malloc_lock>
 800dafe:	4921      	ldr	r1, [pc, #132]	; (800db84 <_malloc_r+0xac>)
 800db00:	680a      	ldr	r2, [r1, #0]
 800db02:	4614      	mov	r4, r2
 800db04:	b99c      	cbnz	r4, 800db2e <_malloc_r+0x56>
 800db06:	4f20      	ldr	r7, [pc, #128]	; (800db88 <_malloc_r+0xb0>)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	b923      	cbnz	r3, 800db16 <_malloc_r+0x3e>
 800db0c:	4621      	mov	r1, r4
 800db0e:	4630      	mov	r0, r6
 800db10:	f000 f83c 	bl	800db8c <_sbrk_r>
 800db14:	6038      	str	r0, [r7, #0]
 800db16:	4629      	mov	r1, r5
 800db18:	4630      	mov	r0, r6
 800db1a:	f000 f837 	bl	800db8c <_sbrk_r>
 800db1e:	1c43      	adds	r3, r0, #1
 800db20:	d123      	bne.n	800db6a <_malloc_r+0x92>
 800db22:	230c      	movs	r3, #12
 800db24:	6033      	str	r3, [r6, #0]
 800db26:	4630      	mov	r0, r6
 800db28:	f000 f8e0 	bl	800dcec <__malloc_unlock>
 800db2c:	e7e3      	b.n	800daf6 <_malloc_r+0x1e>
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	1b5b      	subs	r3, r3, r5
 800db32:	d417      	bmi.n	800db64 <_malloc_r+0x8c>
 800db34:	2b0b      	cmp	r3, #11
 800db36:	d903      	bls.n	800db40 <_malloc_r+0x68>
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	441c      	add	r4, r3
 800db3c:	6025      	str	r5, [r4, #0]
 800db3e:	e004      	b.n	800db4a <_malloc_r+0x72>
 800db40:	6863      	ldr	r3, [r4, #4]
 800db42:	42a2      	cmp	r2, r4
 800db44:	bf0c      	ite	eq
 800db46:	600b      	streq	r3, [r1, #0]
 800db48:	6053      	strne	r3, [r2, #4]
 800db4a:	4630      	mov	r0, r6
 800db4c:	f000 f8ce 	bl	800dcec <__malloc_unlock>
 800db50:	f104 000b 	add.w	r0, r4, #11
 800db54:	1d23      	adds	r3, r4, #4
 800db56:	f020 0007 	bic.w	r0, r0, #7
 800db5a:	1ac2      	subs	r2, r0, r3
 800db5c:	d0cc      	beq.n	800daf8 <_malloc_r+0x20>
 800db5e:	1a1b      	subs	r3, r3, r0
 800db60:	50a3      	str	r3, [r4, r2]
 800db62:	e7c9      	b.n	800daf8 <_malloc_r+0x20>
 800db64:	4622      	mov	r2, r4
 800db66:	6864      	ldr	r4, [r4, #4]
 800db68:	e7cc      	b.n	800db04 <_malloc_r+0x2c>
 800db6a:	1cc4      	adds	r4, r0, #3
 800db6c:	f024 0403 	bic.w	r4, r4, #3
 800db70:	42a0      	cmp	r0, r4
 800db72:	d0e3      	beq.n	800db3c <_malloc_r+0x64>
 800db74:	1a21      	subs	r1, r4, r0
 800db76:	4630      	mov	r0, r6
 800db78:	f000 f808 	bl	800db8c <_sbrk_r>
 800db7c:	3001      	adds	r0, #1
 800db7e:	d1dd      	bne.n	800db3c <_malloc_r+0x64>
 800db80:	e7cf      	b.n	800db22 <_malloc_r+0x4a>
 800db82:	bf00      	nop
 800db84:	24004054 	.word	0x24004054
 800db88:	24004058 	.word	0x24004058

0800db8c <_sbrk_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d06      	ldr	r5, [pc, #24]	; (800dba8 <_sbrk_r+0x1c>)
 800db90:	2300      	movs	r3, #0
 800db92:	4604      	mov	r4, r0
 800db94:	4608      	mov	r0, r1
 800db96:	602b      	str	r3, [r5, #0]
 800db98:	f7f4 f824 	bl	8001be4 <_sbrk>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d102      	bne.n	800dba6 <_sbrk_r+0x1a>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	b103      	cbz	r3, 800dba6 <_sbrk_r+0x1a>
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	bd38      	pop	{r3, r4, r5, pc}
 800dba8:	2400843c 	.word	0x2400843c

0800dbac <__sread>:
 800dbac:	b510      	push	{r4, lr}
 800dbae:	460c      	mov	r4, r1
 800dbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb4:	f000 f8a0 	bl	800dcf8 <_read_r>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	bfab      	itete	ge
 800dbbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dbbe:	89a3      	ldrhlt	r3, [r4, #12]
 800dbc0:	181b      	addge	r3, r3, r0
 800dbc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dbc6:	bfac      	ite	ge
 800dbc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbca:	81a3      	strhlt	r3, [r4, #12]
 800dbcc:	bd10      	pop	{r4, pc}

0800dbce <__swrite>:
 800dbce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd2:	461f      	mov	r7, r3
 800dbd4:	898b      	ldrh	r3, [r1, #12]
 800dbd6:	05db      	lsls	r3, r3, #23
 800dbd8:	4605      	mov	r5, r0
 800dbda:	460c      	mov	r4, r1
 800dbdc:	4616      	mov	r6, r2
 800dbde:	d505      	bpl.n	800dbec <__swrite+0x1e>
 800dbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f000 f868 	bl	800dcbc <_lseek_r>
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbf6:	81a3      	strh	r3, [r4, #12]
 800dbf8:	4632      	mov	r2, r6
 800dbfa:	463b      	mov	r3, r7
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc02:	f000 b817 	b.w	800dc34 <_write_r>

0800dc06 <__sseek>:
 800dc06:	b510      	push	{r4, lr}
 800dc08:	460c      	mov	r4, r1
 800dc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc0e:	f000 f855 	bl	800dcbc <_lseek_r>
 800dc12:	1c43      	adds	r3, r0, #1
 800dc14:	89a3      	ldrh	r3, [r4, #12]
 800dc16:	bf15      	itete	ne
 800dc18:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc22:	81a3      	strheq	r3, [r4, #12]
 800dc24:	bf18      	it	ne
 800dc26:	81a3      	strhne	r3, [r4, #12]
 800dc28:	bd10      	pop	{r4, pc}

0800dc2a <__sclose>:
 800dc2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc2e:	f000 b813 	b.w	800dc58 <_close_r>
	...

0800dc34 <_write_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d07      	ldr	r5, [pc, #28]	; (800dc54 <_write_r+0x20>)
 800dc38:	4604      	mov	r4, r0
 800dc3a:	4608      	mov	r0, r1
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	2200      	movs	r2, #0
 800dc40:	602a      	str	r2, [r5, #0]
 800dc42:	461a      	mov	r2, r3
 800dc44:	f7f3 ff7d 	bl	8001b42 <_write>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d102      	bne.n	800dc52 <_write_r+0x1e>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	b103      	cbz	r3, 800dc52 <_write_r+0x1e>
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	2400843c 	.word	0x2400843c

0800dc58 <_close_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	4d06      	ldr	r5, [pc, #24]	; (800dc74 <_close_r+0x1c>)
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4604      	mov	r4, r0
 800dc60:	4608      	mov	r0, r1
 800dc62:	602b      	str	r3, [r5, #0]
 800dc64:	f7f3 ff89 	bl	8001b7a <_close>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d102      	bne.n	800dc72 <_close_r+0x1a>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	b103      	cbz	r3, 800dc72 <_close_r+0x1a>
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	2400843c 	.word	0x2400843c

0800dc78 <_fstat_r>:
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	4d07      	ldr	r5, [pc, #28]	; (800dc98 <_fstat_r+0x20>)
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	4604      	mov	r4, r0
 800dc80:	4608      	mov	r0, r1
 800dc82:	4611      	mov	r1, r2
 800dc84:	602b      	str	r3, [r5, #0]
 800dc86:	f7f3 ff84 	bl	8001b92 <_fstat>
 800dc8a:	1c43      	adds	r3, r0, #1
 800dc8c:	d102      	bne.n	800dc94 <_fstat_r+0x1c>
 800dc8e:	682b      	ldr	r3, [r5, #0]
 800dc90:	b103      	cbz	r3, 800dc94 <_fstat_r+0x1c>
 800dc92:	6023      	str	r3, [r4, #0]
 800dc94:	bd38      	pop	{r3, r4, r5, pc}
 800dc96:	bf00      	nop
 800dc98:	2400843c 	.word	0x2400843c

0800dc9c <_isatty_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4d06      	ldr	r5, [pc, #24]	; (800dcb8 <_isatty_r+0x1c>)
 800dca0:	2300      	movs	r3, #0
 800dca2:	4604      	mov	r4, r0
 800dca4:	4608      	mov	r0, r1
 800dca6:	602b      	str	r3, [r5, #0]
 800dca8:	f7f3 ff83 	bl	8001bb2 <_isatty>
 800dcac:	1c43      	adds	r3, r0, #1
 800dcae:	d102      	bne.n	800dcb6 <_isatty_r+0x1a>
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	b103      	cbz	r3, 800dcb6 <_isatty_r+0x1a>
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}
 800dcb8:	2400843c 	.word	0x2400843c

0800dcbc <_lseek_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d07      	ldr	r5, [pc, #28]	; (800dcdc <_lseek_r+0x20>)
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	4608      	mov	r0, r1
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	602a      	str	r2, [r5, #0]
 800dcca:	461a      	mov	r2, r3
 800dccc:	f7f3 ff7c 	bl	8001bc8 <_lseek>
 800dcd0:	1c43      	adds	r3, r0, #1
 800dcd2:	d102      	bne.n	800dcda <_lseek_r+0x1e>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	b103      	cbz	r3, 800dcda <_lseek_r+0x1e>
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	bd38      	pop	{r3, r4, r5, pc}
 800dcdc:	2400843c 	.word	0x2400843c

0800dce0 <__malloc_lock>:
 800dce0:	4801      	ldr	r0, [pc, #4]	; (800dce8 <__malloc_lock+0x8>)
 800dce2:	f7ff be43 	b.w	800d96c <__retarget_lock_acquire_recursive>
 800dce6:	bf00      	nop
 800dce8:	24008434 	.word	0x24008434

0800dcec <__malloc_unlock>:
 800dcec:	4801      	ldr	r0, [pc, #4]	; (800dcf4 <__malloc_unlock+0x8>)
 800dcee:	f7ff be3e 	b.w	800d96e <__retarget_lock_release_recursive>
 800dcf2:	bf00      	nop
 800dcf4:	24008434 	.word	0x24008434

0800dcf8 <_read_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4d07      	ldr	r5, [pc, #28]	; (800dd18 <_read_r+0x20>)
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	4608      	mov	r0, r1
 800dd00:	4611      	mov	r1, r2
 800dd02:	2200      	movs	r2, #0
 800dd04:	602a      	str	r2, [r5, #0]
 800dd06:	461a      	mov	r2, r3
 800dd08:	f7f3 fefe 	bl	8001b08 <_read>
 800dd0c:	1c43      	adds	r3, r0, #1
 800dd0e:	d102      	bne.n	800dd16 <_read_r+0x1e>
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	b103      	cbz	r3, 800dd16 <_read_r+0x1e>
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	2400843c 	.word	0x2400843c

0800dd1c <_init>:
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1e:	bf00      	nop
 800dd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd22:	bc08      	pop	{r3}
 800dd24:	469e      	mov	lr, r3
 800dd26:	4770      	bx	lr

0800dd28 <_fini>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	bf00      	nop
 800dd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2e:	bc08      	pop	{r3}
 800dd30:	469e      	mov	lr, r3
 800dd32:	4770      	bx	lr
