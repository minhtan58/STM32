
Dual_Corre_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c00  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f84  08006f84  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f8c  08006f8c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08006f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  24000078  0800700c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000144  0800700c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192d0  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d21  00000000  00000000  00039376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0003c098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0003ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f272  00000000  00000000  0003d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001011e  00000000  00000000  0007caf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194cde  00000000  00000000  0008cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002218ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f4  00000000  00000000  00221944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006e88 	.word	0x08006e88

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08006e88 	.word	0x08006e88

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <SystemInit+0x104>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a3e      	ldr	r2, [pc, #248]	; (800077c <SystemInit+0x104>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800068c:	4b3b      	ldr	r3, [pc, #236]	; (800077c <SystemInit+0x104>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4a3a      	ldr	r2, [pc, #232]	; (800077c <SystemInit+0x104>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0x108>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d807      	bhi.n	80006b4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <SystemInit+0x108>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 030f 	bic.w	r3, r3, #15
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <SystemInit+0x108>)
 80006ae:	f043 0307 	orr.w	r3, r3, #7
 80006b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <SystemInit+0x10c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x10c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <SystemInit+0x10c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <SystemInit+0x10c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	492e      	ldr	r1, [pc, #184]	; (8000784 <SystemInit+0x10c>)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x110>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <SystemInit+0x108>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemInit+0x108>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemInit+0x108>)
 80006e8:	f043 0307 	orr.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemInit+0x10c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemInit+0x10c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemInit+0x10c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemInit+0x10c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <SystemInit+0x114>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemInit+0x10c>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemInit+0x118>)
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <SystemInit+0x10c>)
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x11c>)
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemInit+0x10c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <SystemInit+0x10c>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <SystemInit+0x11c>)
 800071c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemInit+0x10c>)
 8000720:	2200      	movs	r2, #0
 8000722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <SystemInit+0x10c>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemInit+0x11c>)
 8000728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <SystemInit+0x10c>)
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SystemInit+0x10c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <SystemInit+0x10c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <SystemInit+0x10c>)
 800073e:	2200      	movs	r2, #0
 8000740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x120>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <SystemInit+0x120>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x124>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x128>)
 8000754:	4013      	ands	r3, r2
 8000756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075a:	d202      	bcs.n	8000762 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x12c>)
 800075e:	2201      	movs	r2, #1
 8000760:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x130>)
 8000764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000768:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x104>)
 800076c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000770:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART8_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar (int ch) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, 1000);
 80007ba:	f107 010f 	add.w	r1, r7, #15
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	2201      	movs	r2, #1
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <__io_putchar+0x28>)
 80007c6:	f004 f815 	bl	80047f4 <HAL_UART_Transmit>
	return ch;
 80007ca:	687b      	ldr	r3, [r7, #4]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	240000a0 	.word	0x240000a0

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e4:	bf00      	nop
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <main+0xac>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d004      	beq.n	80007fc <main+0x24>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dcf4      	bgt.n	80007e6 <main+0xe>
  if ( timeout < 0 )
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da01      	bge.n	8000806 <main+0x2e>
  {
  Error_Handler();
 8000802:	f000 f961 	bl	8000ac8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000806:	f000 faf1 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080a:	f000 f841 	bl	8000890 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <main+0xac>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <main+0xac>)
 8000816:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <main+0xac>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800082c:	2000      	movs	r0, #0
 800082e:	f001 fbdb 	bl	8001fe8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	f001 fbf1 	bl	800201c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800083a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000840:	bf00      	nop
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <main+0xac>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d104      	bne.n	8000858 <main+0x80>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	dcf4      	bgt.n	8000842 <main+0x6a>
if ( timeout < 0 )
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	da01      	bge.n	8000862 <main+0x8a>
{
Error_Handler();
 800085e:	f000 f933 	bl	8000ac8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 f8db 	bl	8000a1c <MX_GPIO_Init>
  MX_UART8_Init();
 8000866:	f000 f88d 	bl	8000984 <MX_UART8_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf(" WIZnet chip: %d \r\n",*send_data);
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <main+0xb0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <main+0xb4>)
 8000874:	f005 fbb2 	bl	8005fdc <iprintf>
	  HAL_Delay(2000);
 8000878:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800087c:	f000 fb48 	bl	8000f10 <HAL_Delay>
	  printf(" WIZnet chip: %d \r\n",*send_data);
 8000880:	e7f3      	b.n	800086a <main+0x92>
 8000882:	bf00      	nop
 8000884:	58024400 	.word	0x58024400
 8000888:	24000008 	.word	0x24000008
 800088c:	08006ea0 	.word	0x08006ea0

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09c      	sub	sp, #112	; 0x70
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	224c      	movs	r2, #76	; 0x4c
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fb94 	bl	8005fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2220      	movs	r2, #32
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fb8e 	bl	8005fcc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008b0:	2004      	movs	r0, #4
 80008b2:	f001 fbc7 	bl	8002044 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <SystemClock_Config+0xec>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <SystemClock_Config+0xec>)
 80008c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <SystemClock_Config+0xec>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <SystemClock_Config+0xf0>)
 80008d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d4:	4a2a      	ldr	r2, [pc, #168]	; (8000980 <SystemClock_Config+0xf0>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <SystemClock_Config+0xf0>)
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e8:	bf00      	nop
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <SystemClock_Config+0xec>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f6:	d1f8      	bne.n	80008ea <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f8:	2301      	movs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	2302      	movs	r3, #2
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800090a:	2305      	movs	r3, #5
 800090c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800090e:	23c0      	movs	r3, #192	; 0xc0
 8000910:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800091e:	2308      	movs	r3, #8
 8000920:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000922:	2300      	movs	r3, #0
 8000924:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fbe2 	bl	80020f8 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800093a:	f000 f8c5 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	233f      	movs	r3, #63	; 0x3f
 8000940:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2303      	movs	r3, #3
 8000944:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800094a:	2308      	movs	r3, #8
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800094e:	2340      	movs	r3, #64	; 0x40
 8000950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000952:	2340      	movs	r3, #64	; 0x40
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800095c:	2340      	movs	r3, #64	; 0x40
 800095e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2104      	movs	r1, #4
 8000964:	4618      	mov	r0, r3
 8000966:	f001 ffd7 	bl	8002918 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000970:	f000 f8aa 	bl	8000ac8 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3770      	adds	r7, #112	; 0x70
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58024800 	.word	0x58024800
 8000980:	58000400 	.word	0x58000400

08000984 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <MX_UART8_Init+0x90>)
 800098a:	4a23      	ldr	r2, [pc, #140]	; (8000a18 <MX_UART8_Init+0x94>)
 800098c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_UART8_Init+0x90>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_UART8_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_UART8_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_UART8_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_UART8_Init+0x90>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_UART8_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_UART8_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_UART8_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_UART8_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_UART8_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80009cc:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_UART8_Init+0x90>)
 80009ce:	f003 fec1 	bl	8004754 <HAL_UART_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 f876 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_UART8_Init+0x90>)
 80009e0:	f005 f9ff 	bl	8005de2 <HAL_UARTEx_SetTxFifoThreshold>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80009ea:	f000 f86d 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <MX_UART8_Init+0x90>)
 80009f2:	f005 fa34 	bl	8005e5e <HAL_UARTEx_SetRxFifoThreshold>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f000 f864 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_UART8_Init+0x90>)
 8000a02:	f005 f9b5 	bl	8005d70 <HAL_UARTEx_DisableFifoMode>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000a0c:	f000 f85c 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	240000a0 	.word	0x240000a0
 8000a18:	40007c00 	.word	0x40007c00

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_GPIO_Init+0xa4>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <MX_GPIO_Init+0xa4>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_GPIO_Init+0xa4>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_GPIO_Init+0xa4>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <MX_GPIO_Init+0xa4>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_GPIO_Init+0xa4>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_GPIO_Init+0xa4>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0xa4>)
 8000a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_GPIO_Init+0xa4>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <MX_GPIO_Init+0xa8>)
 8000a94:	f001 fa8e 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000a98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_GPIO_Init+0xa8>)
 8000ab2:	f001 f8cf 	bl	8001c54 <HAL_GPIO_Init>

}
 8000ab6:	bf00      	nop
 8000ab8:	3720      	adds	r7, #32
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	58022000 	.word	0x58022000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_MspInit+0x30>)
 8000ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ae4:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x30>)
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x30>)
 8000af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	58024400 	.word	0x58024400

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0ba      	sub	sp, #232	; 0xe8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	22c0      	movs	r2, #192	; 0xc0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f005 fa4d 	bl	8005fcc <memset>
  if(huart->Instance==UART8)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <HAL_UART_MspInit+0xd0>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d14a      	bne.n	8000bd2 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fa70 	bl	8003030 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b56:	f7ff ffb7 	bl	8000ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_UART_MspInit+0xd4>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b60:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HAL_UART_MspInit+0xd4>)
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_UART_MspInit+0xd4>)
 8000b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0xd4>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0xd4>)
 8000b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0xd4>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000b96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_UART_MspInit+0xd8>)
 8000bbe:	f001 f849 	bl	8001c54 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2053      	movs	r0, #83	; 0x53
 8000bc8:	f000 faad 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000bcc:	2053      	movs	r0, #83	; 0x53
 8000bce:	f000 fac4 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	37e8      	adds	r7, #232	; 0xe8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40007c00 	.word	0x40007c00
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58022400 	.word	0x58022400

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f94c 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <UART8_IRQHandler+0x10>)
 8000c42:	f003 fe6d 	bl	8004920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	240000a0 	.word	0x240000a0

08000c50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	e00a      	b.n	8000c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c62:	f3af 8000 	nop.w
 8000c66:	4601      	mov	r1, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf0      	blt.n	8000c62 <_read+0x12>
	}

return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e009      	b.n	8000cb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fd81 	bl	80007ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf1      	blt.n	8000c9c <_write+0x12>
	}
	return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
	return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f005 f90c 	bl	8005f78 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	24040000 	.word	0x24040000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	24000094 	.word	0x24000094
 8000d94:	24000148 	.word	0x24000148

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d9c:	f7ff fc6c 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	; (8000de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f005 f8dd 	bl	8005f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fd05 	bl	80007d8 <main>
  bx  lr
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000dd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dd8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000ddc:	08006f94 	.word	0x08006f94
  ldr r2, =_sbss
 8000de0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000de4:	24000144 	.word	0x24000144

08000de8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC3_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f000 f98c 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000df8:	f001 ff44 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_Init+0x68>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	f003 030f 	and.w	r3, r3, #15
 8000e08:	4913      	ldr	r1, [pc, #76]	; (8000e58 <HAL_Init+0x6c>)
 8000e0a:	5ccb      	ldrb	r3, [r1, r3]
 8000e0c:	f003 031f 	and.w	r3, r3, #31
 8000e10:	fa22 f303 	lsr.w	r3, r2, r3
 8000e14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_Init+0x68>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_Init+0x6c>)
 8000e20:	5cd3      	ldrb	r3, [r2, r3]
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_Init+0x70>)
 8000e2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e30:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_Init+0x74>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f814 	bl	8000e64 <HAL_InitTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e002      	b.n	8000e4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e46:	f7ff fe47 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	58024400 	.word	0x58024400
 8000e58:	08006eb4 	.word	0x08006eb4
 8000e5c:	24000004 	.word	0x24000004
 8000e60:	24000000 	.word	0x24000000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_InitTick+0x60>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e021      	b.n	8000ebc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_InitTick+0x64>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_InitTick+0x60>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f971 	bl	8001176 <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f93b 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_InitTick+0x68>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	24000010 	.word	0x24000010
 8000ec8:	24000000 	.word	0x24000000
 8000ecc:	2400000c 	.word	0x2400000c

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	24000010 	.word	0x24000010
 8000ef4:	24000130 	.word	0x24000130

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	24000130 	.word	0x24000130

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	24000010 	.word	0x24000010

08000f58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetREVID+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0c1b      	lsrs	r3, r3, #16
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	5c001000 	.word	0x5c001000

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	05fa0000 	.word	0x05fa0000

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff40 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff90 	bl	8001064 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5f 	bl	8001010 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff33 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa4 	bl	80010cc <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff feae 	bl	8000ef8 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e2dc      	b.n	8001762 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d008      	beq.n	80011c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e2cd      	b.n	8001762 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a76      	ldr	r2, [pc, #472]	; (80013a4 <HAL_DMA_Abort+0x214>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d04a      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a74      	ldr	r2, [pc, #464]	; (80013a8 <HAL_DMA_Abort+0x218>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d045      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a73      	ldr	r2, [pc, #460]	; (80013ac <HAL_DMA_Abort+0x21c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d040      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a71      	ldr	r2, [pc, #452]	; (80013b0 <HAL_DMA_Abort+0x220>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d03b      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a70      	ldr	r2, [pc, #448]	; (80013b4 <HAL_DMA_Abort+0x224>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d036      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a6e      	ldr	r2, [pc, #440]	; (80013b8 <HAL_DMA_Abort+0x228>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d031      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a6d      	ldr	r2, [pc, #436]	; (80013bc <HAL_DMA_Abort+0x22c>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d02c      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a6b      	ldr	r2, [pc, #428]	; (80013c0 <HAL_DMA_Abort+0x230>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d027      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6a      	ldr	r2, [pc, #424]	; (80013c4 <HAL_DMA_Abort+0x234>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d022      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a68      	ldr	r2, [pc, #416]	; (80013c8 <HAL_DMA_Abort+0x238>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01d      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a67      	ldr	r2, [pc, #412]	; (80013cc <HAL_DMA_Abort+0x23c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d018      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <HAL_DMA_Abort+0x240>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a64      	ldr	r2, [pc, #400]	; (80013d4 <HAL_DMA_Abort+0x244>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00e      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a62      	ldr	r2, [pc, #392]	; (80013d8 <HAL_DMA_Abort+0x248>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d009      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a61      	ldr	r2, [pc, #388]	; (80013dc <HAL_DMA_Abort+0x24c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d004      	beq.n	8001266 <HAL_DMA_Abort+0xd6>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a5f      	ldr	r2, [pc, #380]	; (80013e0 <HAL_DMA_Abort+0x250>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_DMA_Abort+0xda>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_DMA_Abort+0xdc>
 800126a:	2300      	movs	r3, #0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 021e 	bic.w	r2, r2, #30
 800127e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e00a      	b.n	80012ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 020e 	bic.w	r2, r2, #14
 80012a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a3c      	ldr	r2, [pc, #240]	; (80013a4 <HAL_DMA_Abort+0x214>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d072      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a3a      	ldr	r2, [pc, #232]	; (80013a8 <HAL_DMA_Abort+0x218>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d06d      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a39      	ldr	r2, [pc, #228]	; (80013ac <HAL_DMA_Abort+0x21c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d068      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a37      	ldr	r2, [pc, #220]	; (80013b0 <HAL_DMA_Abort+0x220>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d063      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <HAL_DMA_Abort+0x224>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d05e      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a34      	ldr	r2, [pc, #208]	; (80013b8 <HAL_DMA_Abort+0x228>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d059      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a33      	ldr	r2, [pc, #204]	; (80013bc <HAL_DMA_Abort+0x22c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d054      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_DMA_Abort+0x230>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d04f      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <HAL_DMA_Abort+0x234>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d04a      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a2e      	ldr	r2, [pc, #184]	; (80013c8 <HAL_DMA_Abort+0x238>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d045      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a2d      	ldr	r2, [pc, #180]	; (80013cc <HAL_DMA_Abort+0x23c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d040      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <HAL_DMA_Abort+0x240>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d03b      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <HAL_DMA_Abort+0x244>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d036      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a28      	ldr	r2, [pc, #160]	; (80013d8 <HAL_DMA_Abort+0x248>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d031      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_DMA_Abort+0x24c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d02c      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <HAL_DMA_Abort+0x250>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d027      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <HAL_DMA_Abort+0x254>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d022      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <HAL_DMA_Abort+0x258>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d01d      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a21      	ldr	r2, [pc, #132]	; (80013ec <HAL_DMA_Abort+0x25c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d018      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <HAL_DMA_Abort+0x260>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_DMA_Abort+0x264>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d00e      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <HAL_DMA_Abort+0x268>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d009      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_DMA_Abort+0x26c>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d004      	beq.n	800139e <HAL_DMA_Abort+0x20e>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <HAL_DMA_Abort+0x270>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d132      	bne.n	8001404 <HAL_DMA_Abort+0x274>
 800139e:	2301      	movs	r3, #1
 80013a0:	e031      	b.n	8001406 <HAL_DMA_Abort+0x276>
 80013a2:	bf00      	nop
 80013a4:	40020010 	.word	0x40020010
 80013a8:	40020028 	.word	0x40020028
 80013ac:	40020040 	.word	0x40020040
 80013b0:	40020058 	.word	0x40020058
 80013b4:	40020070 	.word	0x40020070
 80013b8:	40020088 	.word	0x40020088
 80013bc:	400200a0 	.word	0x400200a0
 80013c0:	400200b8 	.word	0x400200b8
 80013c4:	40020410 	.word	0x40020410
 80013c8:	40020428 	.word	0x40020428
 80013cc:	40020440 	.word	0x40020440
 80013d0:	40020458 	.word	0x40020458
 80013d4:	40020470 	.word	0x40020470
 80013d8:	40020488 	.word	0x40020488
 80013dc:	400204a0 	.word	0x400204a0
 80013e0:	400204b8 	.word	0x400204b8
 80013e4:	58025408 	.word	0x58025408
 80013e8:	5802541c 	.word	0x5802541c
 80013ec:	58025430 	.word	0x58025430
 80013f0:	58025444 	.word	0x58025444
 80013f4:	58025458 	.word	0x58025458
 80013f8:	5802546c 	.word	0x5802546c
 80013fc:	58025480 	.word	0x58025480
 8001400:	58025494 	.word	0x58025494
 8001404:	2300      	movs	r3, #0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001418:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6d      	ldr	r2, [pc, #436]	; (80015d4 <HAL_DMA_Abort+0x444>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d04a      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6b      	ldr	r2, [pc, #428]	; (80015d8 <HAL_DMA_Abort+0x448>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d045      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6a      	ldr	r2, [pc, #424]	; (80015dc <HAL_DMA_Abort+0x44c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d040      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a68      	ldr	r2, [pc, #416]	; (80015e0 <HAL_DMA_Abort+0x450>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d03b      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a67      	ldr	r2, [pc, #412]	; (80015e4 <HAL_DMA_Abort+0x454>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d036      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <HAL_DMA_Abort+0x458>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d031      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a64      	ldr	r2, [pc, #400]	; (80015ec <HAL_DMA_Abort+0x45c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d02c      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a62      	ldr	r2, [pc, #392]	; (80015f0 <HAL_DMA_Abort+0x460>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d027      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a61      	ldr	r2, [pc, #388]	; (80015f4 <HAL_DMA_Abort+0x464>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d022      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <HAL_DMA_Abort+0x468>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01d      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_DMA_Abort+0x46c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d018      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a5c      	ldr	r2, [pc, #368]	; (8001600 <HAL_DMA_Abort+0x470>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a5b      	ldr	r2, [pc, #364]	; (8001604 <HAL_DMA_Abort+0x474>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00e      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a59      	ldr	r2, [pc, #356]	; (8001608 <HAL_DMA_Abort+0x478>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d009      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a58      	ldr	r2, [pc, #352]	; (800160c <HAL_DMA_Abort+0x47c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d004      	beq.n	80014ba <HAL_DMA_Abort+0x32a>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a56      	ldr	r2, [pc, #344]	; (8001610 <HAL_DMA_Abort+0x480>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d108      	bne.n	80014cc <HAL_DMA_Abort+0x33c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e007      	b.n	80014dc <HAL_DMA_Abort+0x34c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80014dc:	e013      	b.n	8001506 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014de:	f7ff fd0b 	bl	8000ef8 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d90c      	bls.n	8001506 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2220      	movs	r2, #32
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2203      	movs	r2, #3
 80014fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e12d      	b.n	8001762 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1e5      	bne.n	80014de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a2f      	ldr	r2, [pc, #188]	; (80015d4 <HAL_DMA_Abort+0x444>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d04a      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <HAL_DMA_Abort+0x448>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d045      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a2c      	ldr	r2, [pc, #176]	; (80015dc <HAL_DMA_Abort+0x44c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d040      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2a      	ldr	r2, [pc, #168]	; (80015e0 <HAL_DMA_Abort+0x450>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d03b      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a29      	ldr	r2, [pc, #164]	; (80015e4 <HAL_DMA_Abort+0x454>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d036      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_DMA_Abort+0x458>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d031      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a26      	ldr	r2, [pc, #152]	; (80015ec <HAL_DMA_Abort+0x45c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d02c      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <HAL_DMA_Abort+0x460>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d027      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <HAL_DMA_Abort+0x464>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <HAL_DMA_Abort+0x468>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01d      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a20      	ldr	r2, [pc, #128]	; (80015fc <HAL_DMA_Abort+0x46c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d018      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <HAL_DMA_Abort+0x470>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_DMA_Abort+0x474>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_DMA_Abort+0x478>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d009      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1a      	ldr	r2, [pc, #104]	; (800160c <HAL_DMA_Abort+0x47c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d004      	beq.n	80015b2 <HAL_DMA_Abort+0x422>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a18      	ldr	r2, [pc, #96]	; (8001610 <HAL_DMA_Abort+0x480>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Abort+0x426>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_DMA_Abort+0x428>
 80015b6:	2300      	movs	r3, #0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d02b      	beq.n	8001614 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	223f      	movs	r2, #63	; 0x3f
 80015cc:	409a      	lsls	r2, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	e02a      	b.n	800162a <HAL_DMA_Abort+0x49a>
 80015d4:	40020010 	.word	0x40020010
 80015d8:	40020028 	.word	0x40020028
 80015dc:	40020040 	.word	0x40020040
 80015e0:	40020058 	.word	0x40020058
 80015e4:	40020070 	.word	0x40020070
 80015e8:	40020088 	.word	0x40020088
 80015ec:	400200a0 	.word	0x400200a0
 80015f0:	400200b8 	.word	0x400200b8
 80015f4:	40020410 	.word	0x40020410
 80015f8:	40020428 	.word	0x40020428
 80015fc:	40020440 	.word	0x40020440
 8001600:	40020458 	.word	0x40020458
 8001604:	40020470 	.word	0x40020470
 8001608:	40020488 	.word	0x40020488
 800160c:	400204a0 	.word	0x400204a0
 8001610:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	2201      	movs	r2, #1
 8001624:	409a      	lsls	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a4f      	ldr	r2, [pc, #316]	; (800176c <HAL_DMA_Abort+0x5dc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d072      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a4d      	ldr	r2, [pc, #308]	; (8001770 <HAL_DMA_Abort+0x5e0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d06d      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a4c      	ldr	r2, [pc, #304]	; (8001774 <HAL_DMA_Abort+0x5e4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d068      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a4a      	ldr	r2, [pc, #296]	; (8001778 <HAL_DMA_Abort+0x5e8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d063      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a49      	ldr	r2, [pc, #292]	; (800177c <HAL_DMA_Abort+0x5ec>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d05e      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a47      	ldr	r2, [pc, #284]	; (8001780 <HAL_DMA_Abort+0x5f0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d059      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a46      	ldr	r2, [pc, #280]	; (8001784 <HAL_DMA_Abort+0x5f4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d054      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a44      	ldr	r2, [pc, #272]	; (8001788 <HAL_DMA_Abort+0x5f8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d04f      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <HAL_DMA_Abort+0x5fc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d04a      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a41      	ldr	r2, [pc, #260]	; (8001790 <HAL_DMA_Abort+0x600>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d045      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a40      	ldr	r2, [pc, #256]	; (8001794 <HAL_DMA_Abort+0x604>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d040      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a3e      	ldr	r2, [pc, #248]	; (8001798 <HAL_DMA_Abort+0x608>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d03b      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a3d      	ldr	r2, [pc, #244]	; (800179c <HAL_DMA_Abort+0x60c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d036      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a3b      	ldr	r2, [pc, #236]	; (80017a0 <HAL_DMA_Abort+0x610>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d031      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a3a      	ldr	r2, [pc, #232]	; (80017a4 <HAL_DMA_Abort+0x614>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d02c      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a38      	ldr	r2, [pc, #224]	; (80017a8 <HAL_DMA_Abort+0x618>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d027      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a37      	ldr	r2, [pc, #220]	; (80017ac <HAL_DMA_Abort+0x61c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d022      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a35      	ldr	r2, [pc, #212]	; (80017b0 <HAL_DMA_Abort+0x620>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01d      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a34      	ldr	r2, [pc, #208]	; (80017b4 <HAL_DMA_Abort+0x624>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d018      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <HAL_DMA_Abort+0x628>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a31      	ldr	r2, [pc, #196]	; (80017bc <HAL_DMA_Abort+0x62c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00e      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2f      	ldr	r2, [pc, #188]	; (80017c0 <HAL_DMA_Abort+0x630>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d009      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <HAL_DMA_Abort+0x634>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d004      	beq.n	800171a <HAL_DMA_Abort+0x58a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a2c      	ldr	r2, [pc, #176]	; (80017c8 <HAL_DMA_Abort+0x638>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_DMA_Abort+0x58e>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_DMA_Abort+0x590>
 800171e:	2300      	movs	r3, #0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d015      	beq.n	8001750 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800172c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00c      	beq.n	8001750 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001744:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800174e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40020010 	.word	0x40020010
 8001770:	40020028 	.word	0x40020028
 8001774:	40020040 	.word	0x40020040
 8001778:	40020058 	.word	0x40020058
 800177c:	40020070 	.word	0x40020070
 8001780:	40020088 	.word	0x40020088
 8001784:	400200a0 	.word	0x400200a0
 8001788:	400200b8 	.word	0x400200b8
 800178c:	40020410 	.word	0x40020410
 8001790:	40020428 	.word	0x40020428
 8001794:	40020440 	.word	0x40020440
 8001798:	40020458 	.word	0x40020458
 800179c:	40020470 	.word	0x40020470
 80017a0:	40020488 	.word	0x40020488
 80017a4:	400204a0 	.word	0x400204a0
 80017a8:	400204b8 	.word	0x400204b8
 80017ac:	58025408 	.word	0x58025408
 80017b0:	5802541c 	.word	0x5802541c
 80017b4:	58025430 	.word	0x58025430
 80017b8:	58025444 	.word	0x58025444
 80017bc:	58025458 	.word	0x58025458
 80017c0:	5802546c 	.word	0x5802546c
 80017c4:	58025480 	.word	0x58025480
 80017c8:	58025494 	.word	0x58025494

080017cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e205      	b.n	8001bea <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d004      	beq.n	80017f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e1fa      	b.n	8001bea <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a8c      	ldr	r2, [pc, #560]	; (8001a2c <HAL_DMA_Abort_IT+0x260>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d04a      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a8b      	ldr	r2, [pc, #556]	; (8001a30 <HAL_DMA_Abort_IT+0x264>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d045      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a89      	ldr	r2, [pc, #548]	; (8001a34 <HAL_DMA_Abort_IT+0x268>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d040      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a88      	ldr	r2, [pc, #544]	; (8001a38 <HAL_DMA_Abort_IT+0x26c>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d03b      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a86      	ldr	r2, [pc, #536]	; (8001a3c <HAL_DMA_Abort_IT+0x270>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d036      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a85      	ldr	r2, [pc, #532]	; (8001a40 <HAL_DMA_Abort_IT+0x274>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d031      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a83      	ldr	r2, [pc, #524]	; (8001a44 <HAL_DMA_Abort_IT+0x278>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d02c      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a82      	ldr	r2, [pc, #520]	; (8001a48 <HAL_DMA_Abort_IT+0x27c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d027      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a80      	ldr	r2, [pc, #512]	; (8001a4c <HAL_DMA_Abort_IT+0x280>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d022      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a7f      	ldr	r2, [pc, #508]	; (8001a50 <HAL_DMA_Abort_IT+0x284>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d01d      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7d      	ldr	r2, [pc, #500]	; (8001a54 <HAL_DMA_Abort_IT+0x288>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d018      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a7c      	ldr	r2, [pc, #496]	; (8001a58 <HAL_DMA_Abort_IT+0x28c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d013      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_DMA_Abort_IT+0x290>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00e      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a79      	ldr	r2, [pc, #484]	; (8001a60 <HAL_DMA_Abort_IT+0x294>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d009      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <HAL_DMA_Abort_IT+0x298>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d004      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a76      	ldr	r2, [pc, #472]	; (8001a68 <HAL_DMA_Abort_IT+0x29c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_DMA_Abort_IT+0xcc>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_DMA_Abort_IT+0xce>
 8001898:	2300      	movs	r3, #0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d065      	beq.n	800196a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2204      	movs	r2, #4
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a60      	ldr	r2, [pc, #384]	; (8001a2c <HAL_DMA_Abort_IT+0x260>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d04a      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_DMA_Abort_IT+0x264>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d045      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5d      	ldr	r2, [pc, #372]	; (8001a34 <HAL_DMA_Abort_IT+0x268>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d040      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a5b      	ldr	r2, [pc, #364]	; (8001a38 <HAL_DMA_Abort_IT+0x26c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d03b      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5a      	ldr	r2, [pc, #360]	; (8001a3c <HAL_DMA_Abort_IT+0x270>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d036      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a58      	ldr	r2, [pc, #352]	; (8001a40 <HAL_DMA_Abort_IT+0x274>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d031      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a57      	ldr	r2, [pc, #348]	; (8001a44 <HAL_DMA_Abort_IT+0x278>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d02c      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a55      	ldr	r2, [pc, #340]	; (8001a48 <HAL_DMA_Abort_IT+0x27c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d027      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <HAL_DMA_Abort_IT+0x280>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d022      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_DMA_Abort_IT+0x284>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01d      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a51      	ldr	r2, [pc, #324]	; (8001a54 <HAL_DMA_Abort_IT+0x288>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d018      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4f      	ldr	r2, [pc, #316]	; (8001a58 <HAL_DMA_Abort_IT+0x28c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a4e      	ldr	r2, [pc, #312]	; (8001a5c <HAL_DMA_Abort_IT+0x290>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00e      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <HAL_DMA_Abort_IT+0x294>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d009      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a4b      	ldr	r2, [pc, #300]	; (8001a64 <HAL_DMA_Abort_IT+0x298>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d004      	beq.n	8001946 <HAL_DMA_Abort_IT+0x17a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_DMA_Abort_IT+0x29c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d108      	bne.n	8001958 <HAL_DMA_Abort_IT+0x18c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e147      	b.n	8001be8 <HAL_DMA_Abort_IT+0x41c>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e13e      	b.n	8001be8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 020e 	bic.w	r2, r2, #14
 8001978:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <HAL_DMA_Abort_IT+0x260>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d04a      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a29      	ldr	r2, [pc, #164]	; (8001a30 <HAL_DMA_Abort_IT+0x264>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d045      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <HAL_DMA_Abort_IT+0x268>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d040      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_DMA_Abort_IT+0x26c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d03b      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_DMA_Abort_IT+0x270>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d036      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <HAL_DMA_Abort_IT+0x274>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d031      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_DMA_Abort_IT+0x278>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d02c      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <HAL_DMA_Abort_IT+0x27c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d027      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <HAL_DMA_Abort_IT+0x280>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d022      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_DMA_Abort_IT+0x284>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01d      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_DMA_Abort_IT+0x288>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d018      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <HAL_DMA_Abort_IT+0x28c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_DMA_Abort_IT+0x290>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00e      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_DMA_Abort_IT+0x294>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d009      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <HAL_DMA_Abort_IT+0x298>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d004      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x24e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <HAL_DMA_Abort_IT+0x29c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d128      	bne.n	8001a6c <HAL_DMA_Abort_IT+0x2a0>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0201 	bic.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e027      	b.n	8001a7c <HAL_DMA_Abort_IT+0x2b0>
 8001a2c:	40020010 	.word	0x40020010
 8001a30:	40020028 	.word	0x40020028
 8001a34:	40020040 	.word	0x40020040
 8001a38:	40020058 	.word	0x40020058
 8001a3c:	40020070 	.word	0x40020070
 8001a40:	40020088 	.word	0x40020088
 8001a44:	400200a0 	.word	0x400200a0
 8001a48:	400200b8 	.word	0x400200b8
 8001a4c:	40020410 	.word	0x40020410
 8001a50:	40020428 	.word	0x40020428
 8001a54:	40020440 	.word	0x40020440
 8001a58:	40020458 	.word	0x40020458
 8001a5c:	40020470 	.word	0x40020470
 8001a60:	40020488 	.word	0x40020488
 8001a64:	400204a0 	.word	0x400204a0
 8001a68:	400204b8 	.word	0x400204b8
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a5c      	ldr	r2, [pc, #368]	; (8001bf4 <HAL_DMA_Abort_IT+0x428>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d072      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <HAL_DMA_Abort_IT+0x42c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d06d      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a59      	ldr	r2, [pc, #356]	; (8001bfc <HAL_DMA_Abort_IT+0x430>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d068      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_DMA_Abort_IT+0x434>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d063      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a56      	ldr	r2, [pc, #344]	; (8001c04 <HAL_DMA_Abort_IT+0x438>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d05e      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a55      	ldr	r2, [pc, #340]	; (8001c08 <HAL_DMA_Abort_IT+0x43c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d059      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a53      	ldr	r2, [pc, #332]	; (8001c0c <HAL_DMA_Abort_IT+0x440>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d054      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a52      	ldr	r2, [pc, #328]	; (8001c10 <HAL_DMA_Abort_IT+0x444>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d04f      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	; (8001c14 <HAL_DMA_Abort_IT+0x448>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d04a      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a4f      	ldr	r2, [pc, #316]	; (8001c18 <HAL_DMA_Abort_IT+0x44c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d045      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	; (8001c1c <HAL_DMA_Abort_IT+0x450>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d040      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a4c      	ldr	r2, [pc, #304]	; (8001c20 <HAL_DMA_Abort_IT+0x454>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d03b      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <HAL_DMA_Abort_IT+0x458>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d036      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <HAL_DMA_Abort_IT+0x45c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d031      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a47      	ldr	r2, [pc, #284]	; (8001c2c <HAL_DMA_Abort_IT+0x460>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d02c      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <HAL_DMA_Abort_IT+0x464>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d027      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a44      	ldr	r2, [pc, #272]	; (8001c34 <HAL_DMA_Abort_IT+0x468>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d022      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a43      	ldr	r2, [pc, #268]	; (8001c38 <HAL_DMA_Abort_IT+0x46c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d01d      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <HAL_DMA_Abort_IT+0x470>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d018      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_DMA_Abort_IT+0x474>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a3e      	ldr	r2, [pc, #248]	; (8001c44 <HAL_DMA_Abort_IT+0x478>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00e      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a3d      	ldr	r2, [pc, #244]	; (8001c48 <HAL_DMA_Abort_IT+0x47c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	; (8001c4c <HAL_DMA_Abort_IT+0x480>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d004      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x3a0>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <HAL_DMA_Abort_IT+0x484>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_DMA_Abort_IT+0x3a4>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_DMA_Abort_IT+0x3a6>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d028      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b84:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2201      	movs	r2, #1
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ba4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00c      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bbc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bc6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40020010 	.word	0x40020010
 8001bf8:	40020028 	.word	0x40020028
 8001bfc:	40020040 	.word	0x40020040
 8001c00:	40020058 	.word	0x40020058
 8001c04:	40020070 	.word	0x40020070
 8001c08:	40020088 	.word	0x40020088
 8001c0c:	400200a0 	.word	0x400200a0
 8001c10:	400200b8 	.word	0x400200b8
 8001c14:	40020410 	.word	0x40020410
 8001c18:	40020428 	.word	0x40020428
 8001c1c:	40020440 	.word	0x40020440
 8001c20:	40020458 	.word	0x40020458
 8001c24:	40020470 	.word	0x40020470
 8001c28:	40020488 	.word	0x40020488
 8001c2c:	400204a0 	.word	0x400204a0
 8001c30:	400204b8 	.word	0x400204b8
 8001c34:	58025408 	.word	0x58025408
 8001c38:	5802541c 	.word	0x5802541c
 8001c3c:	58025430 	.word	0x58025430
 8001c40:	58025444 	.word	0x58025444
 8001c44:	58025458 	.word	0x58025458
 8001c48:	5802546c 	.word	0x5802546c
 8001c4c:	58025480 	.word	0x58025480
 8001c50:	58025494 	.word	0x58025494

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c62:	4b89      	ldr	r3, [pc, #548]	; (8001e88 <HAL_GPIO_Init+0x234>)
 8001c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c66:	e194      	b.n	8001f92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8186 	beq.w	8001f8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d00b      	beq.n	8001ca0 <HAL_GPIO_Init+0x4c>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d007      	beq.n	8001ca0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c94:	2b11      	cmp	r3, #17
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b12      	cmp	r3, #18
 8001c9e:	d130      	bne.n	8001d02 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	f003 0201 	and.w	r2, r3, #1
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0xee>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b12      	cmp	r3, #18
 8001d40:	d123      	bne.n	8001d8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	69b9      	ldr	r1, [r7, #24]
 8001d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0203 	and.w	r2, r3, #3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80e0 	beq.w	8001f8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_GPIO_Init+0x238>)
 8001dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dd2:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <HAL_GPIO_Init+0x238>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_GPIO_Init+0x238>)
 8001dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dea:	4a29      	ldr	r2, [pc, #164]	; (8001e90 <HAL_GPIO_Init+0x23c>)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a20      	ldr	r2, [pc, #128]	; (8001e94 <HAL_GPIO_Init+0x240>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d052      	beq.n	8001ebc <HAL_GPIO_Init+0x268>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_GPIO_Init+0x244>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d031      	beq.n	8001e82 <HAL_GPIO_Init+0x22e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_GPIO_Init+0x248>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02b      	beq.n	8001e7e <HAL_GPIO_Init+0x22a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_GPIO_Init+0x24c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_GPIO_Init+0x250>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_Init+0x222>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a1b      	ldr	r2, [pc, #108]	; (8001ea8 <HAL_GPIO_Init+0x254>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x21e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x258>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_GPIO_Init+0x25c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x216>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a18      	ldr	r2, [pc, #96]	; (8001eb4 <HAL_GPIO_Init+0x260>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x212>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_GPIO_Init+0x264>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x20e>
 8001e5e:	2309      	movs	r3, #9
 8001e60:	e02d      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e62:	230a      	movs	r3, #10
 8001e64:	e02b      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e66:	2308      	movs	r3, #8
 8001e68:	e029      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e027      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e6e:	2306      	movs	r3, #6
 8001e70:	e025      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e72:	2305      	movs	r3, #5
 8001e74:	e023      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e76:	2304      	movs	r3, #4
 8001e78:	e021      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e01f      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e01d      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e01b      	b.n	8001ebe <HAL_GPIO_Init+0x26a>
 8001e86:	bf00      	nop
 8001e88:	58000080 	.word	0x58000080
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58000400 	.word	0x58000400
 8001e94:	58020000 	.word	0x58020000
 8001e98:	58020400 	.word	0x58020400
 8001e9c:	58020800 	.word	0x58020800
 8001ea0:	58020c00 	.word	0x58020c00
 8001ea4:	58021000 	.word	0x58021000
 8001ea8:	58021400 	.word	0x58021400
 8001eac:	58021800 	.word	0x58021800
 8001eb0:	58021c00 	.word	0x58021c00
 8001eb4:	58022000 	.word	0x58022000
 8001eb8:	58022400 	.word	0x58022400
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	f002 0203 	and.w	r2, r2, #3
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	4093      	lsls	r3, r2
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ece:	4938      	ldr	r1, [pc, #224]	; (8001fb0 <HAL_GPIO_Init+0x35c>)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f47f ae63 	bne.w	8001c68 <HAL_GPIO_Init+0x14>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	3724      	adds	r7, #36	; 0x24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	58000400 	.word	0x58000400

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001ff0:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_HSEM_FastTake+0x2c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	4a07      	ldr	r2, [pc, #28]	; (8002018 <HAL_HSEM_FastTake+0x30>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	e000      	b.n	8002006 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	58026400 	.word	0x58026400
 8002018:	80000300 	.word	0x80000300

0800201c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002026:	4906      	ldr	r1, [pc, #24]	; (8002040 <HAL_HSEM_Release+0x24>)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	58026400 	.word	0x58026400

08002044 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	2b06      	cmp	r3, #6
 8002056:	d00a      	beq.n	800206e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e040      	b.n	80020ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e03e      	b.n	80020ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002076:	491f      	ldr	r1, [pc, #124]	; (80020f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4313      	orrs	r3, r2
 800207c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800207e:	f7fe ff3b 	bl	8000ef8 <HAL_GetTick>
 8002082:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002084:	e009      	b.n	800209a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002086:	f7fe ff37 	bl	8000ef8 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002094:	d901      	bls.n	800209a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e028      	b.n	80020ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800209a:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a6:	d1ee      	bne.n	8002086 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b1e      	cmp	r3, #30
 80020ac:	d008      	beq.n	80020c0 <HAL_PWREx_ConfigSupply+0x7c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b2e      	cmp	r3, #46	; 0x2e
 80020b2:	d005      	beq.n	80020c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b1d      	cmp	r3, #29
 80020b8:	d002      	beq.n	80020c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b2d      	cmp	r3, #45	; 0x2d
 80020be:	d114      	bne.n	80020ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80020c0:	f7fe ff1a 	bl	8000ef8 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020c6:	e009      	b.n	80020dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020c8:	f7fe ff16 	bl	8000ef8 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020d6:	d901      	bls.n	80020dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e007      	b.n	80020ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d1ee      	bne.n	80020c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	58024800 	.word	0x58024800

080020f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e3ff      	b.n	800290a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8087 	beq.w	8002226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002118:	4b99      	ldr	r3, [pc, #612]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002122:	4b97      	ldr	r3, [pc, #604]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	2b10      	cmp	r3, #16
 800212c:	d007      	beq.n	800213e <HAL_RCC_OscConfig+0x46>
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2b18      	cmp	r3, #24
 8002132:	d110      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d10b      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	4b90      	ldr	r3, [pc, #576]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d06c      	beq.n	8002224 <HAL_RCC_OscConfig+0x12c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d168      	bne.n	8002224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e3d9      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x76>
 8002160:	4b87      	ldr	r3, [pc, #540]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a86      	ldr	r2, [pc, #536]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e02e      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x98>
 8002176:	4b82      	ldr	r3, [pc, #520]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a81      	ldr	r2, [pc, #516]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b7f      	ldr	r3, [pc, #508]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7e      	ldr	r2, [pc, #504]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0xbc>
 800219a:	4b79      	ldr	r3, [pc, #484]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a78      	ldr	r2, [pc, #480]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b76      	ldr	r3, [pc, #472]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a75      	ldr	r2, [pc, #468]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 80021b4:	4b72      	ldr	r3, [pc, #456]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a71      	ldr	r2, [pc, #452]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a6e      	ldr	r2, [pc, #440]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe fe90 	bl	8000ef8 <HAL_GetTick>
 80021d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fe8c 	bl	8000ef8 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e38d      	b.n	800290a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ee:	4b64      	ldr	r3, [pc, #400]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0xe4>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fe7c 	bl	8000ef8 <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe fe78 	bl	8000ef8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e379      	b.n	800290a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002216:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x10c>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80ae 	beq.w	8002390 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002234:	4b52      	ldr	r3, [pc, #328]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800223c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800223e:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_RCC_OscConfig+0x162>
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	2b18      	cmp	r3, #24
 800224e:	d13a      	bne.n	80022c6 <HAL_RCC_OscConfig+0x1ce>
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d135      	bne.n	80022c6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x17a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e34b      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	f7fe fe71 	bl	8000f58 <HAL_GetREVID>
 8002276:	4603      	mov	r3, r0
 8002278:	f241 0203 	movw	r2, #4099	; 0x1003
 800227c:	4293      	cmp	r3, r2
 800227e:	d817      	bhi.n	80022b0 <HAL_RCC_OscConfig+0x1b8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b40      	cmp	r3, #64	; 0x40
 8002286:	d108      	bne.n	800229a <HAL_RCC_OscConfig+0x1a2>
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002290:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002296:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002298:	e07a      	b.n	8002390 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	031b      	lsls	r3, r3, #12
 80022a8:	4935      	ldr	r1, [pc, #212]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ae:	e06f      	b.n	8002390 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	4930      	ldr	r1, [pc, #192]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c4:	e064      	b.n	8002390 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d045      	beq.n	800235a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022ce:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0219 	bic.w	r2, r3, #25
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4929      	ldr	r1, [pc, #164]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe fe0a 	bl	8000ef8 <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e8:	f7fe fe06 	bl	8000ef8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e307      	b.n	800290a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	f7fe fe27 	bl	8000f58 <HAL_GetREVID>
 800230a:	4603      	mov	r3, r0
 800230c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002310:	4293      	cmp	r3, r2
 8002312:	d817      	bhi.n	8002344 <HAL_RCC_OscConfig+0x24c>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b40      	cmp	r3, #64	; 0x40
 800231a:	d108      	bne.n	800232e <HAL_RCC_OscConfig+0x236>
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002324:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232a:	6053      	str	r3, [r2, #4]
 800232c:	e030      	b.n	8002390 <HAL_RCC_OscConfig+0x298>
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	031b      	lsls	r3, r3, #12
 800233c:	4910      	ldr	r1, [pc, #64]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
 8002342:	e025      	b.n	8002390 <HAL_RCC_OscConfig+0x298>
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	490b      	ldr	r1, [pc, #44]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
 8002358:	e01a      	b.n	8002390 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_RCC_OscConfig+0x288>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7fe fdc7 	bl	8000ef8 <HAL_GetTick>
 800236a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236e:	f7fe fdc3 	bl	8000ef8 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d903      	bls.n	8002384 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e2c4      	b.n	800290a <HAL_RCC_OscConfig+0x812>
 8002380:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002384:	4ba4      	ldr	r3, [pc, #656]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ee      	bne.n	800236e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a9 	beq.w	80024f0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239e:	4b9e      	ldr	r3, [pc, #632]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023a8:	4b9b      	ldr	r3, [pc, #620]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d007      	beq.n	80023c4 <HAL_RCC_OscConfig+0x2cc>
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b18      	cmp	r3, #24
 80023b8:	d13a      	bne.n	8002430 <HAL_RCC_OscConfig+0x338>
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d135      	bne.n	8002430 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023c4:	4b94      	ldr	r3, [pc, #592]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_OscConfig+0x2e4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b80      	cmp	r3, #128	; 0x80
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e296      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023dc:	f7fe fdbc 	bl	8000f58 <HAL_GetREVID>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d817      	bhi.n	800241a <HAL_RCC_OscConfig+0x322>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_OscConfig+0x30c>
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80023fa:	4a87      	ldr	r2, [pc, #540]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80023fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002400:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002402:	e075      	b.n	80024f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002404:	4b84      	ldr	r3, [pc, #528]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	069b      	lsls	r3, r3, #26
 8002412:	4981      	ldr	r1, [pc, #516]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002418:	e06a      	b.n	80024f0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	061b      	lsls	r3, r3, #24
 8002428:	497b      	ldr	r1, [pc, #492]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 800242a:	4313      	orrs	r3, r2
 800242c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800242e:	e05f      	b.n	80024f0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d042      	beq.n	80024be <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002438:	4b77      	ldr	r3, [pc, #476]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a76      	ldr	r2, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 800243e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fd58 	bl	8000ef8 <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800244c:	f7fe fd54 	bl	8000ef8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e255      	b.n	800290a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800245e:	4b6e      	ldr	r3, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800246a:	f7fe fd75 	bl	8000f58 <HAL_GetREVID>
 800246e:	4603      	mov	r3, r0
 8002470:	f241 0203 	movw	r2, #4099	; 0x1003
 8002474:	4293      	cmp	r3, r2
 8002476:	d817      	bhi.n	80024a8 <HAL_RCC_OscConfig+0x3b0>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	2b20      	cmp	r3, #32
 800247e:	d108      	bne.n	8002492 <HAL_RCC_OscConfig+0x39a>
 8002480:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002488:	4a63      	ldr	r2, [pc, #396]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 800248a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800248e:	6053      	str	r3, [r2, #4]
 8002490:	e02e      	b.n	80024f0 <HAL_RCC_OscConfig+0x3f8>
 8002492:	4b61      	ldr	r3, [pc, #388]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	069b      	lsls	r3, r3, #26
 80024a0:	495d      	ldr	r1, [pc, #372]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
 80024a6:	e023      	b.n	80024f0 <HAL_RCC_OscConfig+0x3f8>
 80024a8:	4b5b      	ldr	r3, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	4958      	ldr	r1, [pc, #352]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
 80024bc:	e018      	b.n	80024f0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024be:	4b56      	ldr	r3, [pc, #344]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a55      	ldr	r2, [pc, #340]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80024c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fd15 	bl	8000ef8 <HAL_GetTick>
 80024ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024d2:	f7fe fd11 	bl	8000ef8 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e212      	b.n	800290a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d036      	beq.n	800256a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d019      	beq.n	8002538 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002504:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002508:	4a43      	ldr	r2, [pc, #268]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7fe fcf2 	bl	8000ef8 <HAL_GetTick>
 8002514:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe fcee 	bl	8000ef8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1ef      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 800252c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x420>
 8002536:	e018      	b.n	800256a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002538:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253c:	4a36      	ldr	r2, [pc, #216]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002544:	f7fe fcd8 	bl	8000ef8 <HAL_GetTick>
 8002548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254c:	f7fe fcd4 	bl	8000ef8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1d5      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800255e:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d036      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d019      	beq.n	80025b2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a25      	ldr	r2, [pc, #148]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 8002584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002588:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800258a:	f7fe fcb5 	bl	8000ef8 <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002592:	f7fe fcb1 	bl	8000ef8 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1b2      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x49a>
 80025b0:	e018      	b.n	80025e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80025b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025be:	f7fe fc9b 	bl	8000ef8 <HAL_GetTick>
 80025c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025c6:	f7fe fc97 	bl	8000ef8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e198      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_RCC_OscConfig+0x520>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8085 	beq.w	80026fc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_RCC_OscConfig+0x524>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_OscConfig+0x524>)
 80025f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fc7b 	bl	8000ef8 <HAL_GetTick>
 8002602:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002604:	e00c      	b.n	8002620 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002606:	f7fe fc77 	bl	8000ef8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b64      	cmp	r3, #100	; 0x64
 8002612:	d905      	bls.n	8002620 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e178      	b.n	800290a <HAL_RCC_OscConfig+0x812>
 8002618:	58024400 	.word	0x58024400
 800261c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002620:	4b96      	ldr	r3, [pc, #600]	; (800287c <HAL_RCC_OscConfig+0x784>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ec      	beq.n	8002606 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x54a>
 8002634:	4b92      	ldr	r3, [pc, #584]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a91      	ldr	r2, [pc, #580]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	e02d      	b.n	800269e <HAL_RCC_OscConfig+0x5a6>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x56c>
 800264a:	4b8d      	ldr	r3, [pc, #564]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a8c      	ldr	r2, [pc, #560]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b8a      	ldr	r3, [pc, #552]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a89      	ldr	r2, [pc, #548]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	e01c      	b.n	800269e <HAL_RCC_OscConfig+0x5a6>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x58e>
 800266c:	4b84      	ldr	r3, [pc, #528]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a83      	ldr	r2, [pc, #524]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
 8002678:	4b81      	ldr	r3, [pc, #516]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a80      	ldr	r2, [pc, #512]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
 8002684:	e00b      	b.n	800269e <HAL_RCC_OscConfig+0x5a6>
 8002686:	4b7e      	ldr	r3, [pc, #504]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a7d      	ldr	r2, [pc, #500]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	4b7b      	ldr	r3, [pc, #492]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a7a      	ldr	r2, [pc, #488]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d015      	beq.n	80026d2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7fe fc27 	bl	8000ef8 <HAL_GetTick>
 80026aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe fc23 	bl	8000ef8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e122      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c4:	4b6e      	ldr	r3, [pc, #440]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ee      	beq.n	80026ae <HAL_RCC_OscConfig+0x5b6>
 80026d0:	e014      	b.n	80026fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fc11 	bl	8000ef8 <HAL_GetTick>
 80026d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fc0d 	bl	8000ef8 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e10c      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026f0:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8101 	beq.w	8002908 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002706:	4b5e      	ldr	r3, [pc, #376]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800270e:	2b18      	cmp	r3, #24
 8002710:	f000 80bc 	beq.w	800288c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2b02      	cmp	r3, #2
 800271a:	f040 8095 	bne.w	8002848 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	4b58      	ldr	r3, [pc, #352]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a57      	ldr	r2, [pc, #348]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fbe5 	bl	8000ef8 <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fbe1 	bl	8000ef8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0e2      	b.n	800290a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002744:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <HAL_RCC_OscConfig+0x78c>)
 8002756:	4013      	ands	r3, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	430a      	orrs	r2, r1
 8002764:	4946      	ldr	r1, [pc, #280]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002766:	4313      	orrs	r3, r2
 8002768:	628b      	str	r3, [r1, #40]	; 0x28
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	3b01      	subs	r3, #1
 8002770:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	3b01      	subs	r3, #1
 800277a:	025b      	lsls	r3, r3, #9
 800277c:	b29b      	uxth	r3, r3
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	3b01      	subs	r3, #1
 8002786:	041b      	lsls	r3, r3, #16
 8002788:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	3b01      	subs	r3, #1
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800279a:	4939      	ldr	r1, [pc, #228]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800279c:	4313      	orrs	r3, r2
 800279e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80027a0:	4b37      	ldr	r3, [pc, #220]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	4a36      	ldr	r2, [pc, #216]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_RCC_OscConfig+0x790>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027b8:	00d2      	lsls	r2, r2, #3
 80027ba:	4931      	ldr	r1, [pc, #196]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027c0:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f023 020c 	bic.w	r2, r3, #12
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	492c      	ldr	r1, [pc, #176]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027d2:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f023 0202 	bic.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	4928      	ldr	r1, [pc, #160]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027e4:	4b26      	ldr	r3, [pc, #152]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	4a25      	ldr	r2, [pc, #148]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027f0:	4b23      	ldr	r3, [pc, #140]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800281a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fb6a 	bl	8000ef8 <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fb66 	bl	8000ef8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e067      	b.n	800290a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x730>
 8002846:	e05f      	b.n	8002908 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002848:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 800284e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fb50 	bl	8000ef8 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe fb4c 	bl	8000ef8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e04d      	b.n	800290a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCC_OscConfig+0x788>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x764>
 800287a:	e045      	b.n	8002908 <HAL_RCC_OscConfig+0x810>
 800287c:	58024800 	.word	0x58024800
 8002880:	58024400 	.word	0x58024400
 8002884:	fffffc0c 	.word	0xfffffc0c
 8002888:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCC_OscConfig+0x81c>)
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCC_OscConfig+0x81c>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2b01      	cmp	r3, #1
 800289e:	d031      	beq.n	8002904 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f003 0203 	and.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d12a      	bne.n	8002904 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d122      	bne.n	8002904 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d11a      	bne.n	8002904 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0a5b      	lsrs	r3, r3, #9
 80028d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d111      	bne.n	8002904 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d108      	bne.n	8002904 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	0e1b      	lsrs	r3, r3, #24
 80028f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3730      	adds	r7, #48	; 0x30
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	58024400 	.word	0x58024400

08002918 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e19c      	b.n	8002c66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800292c:	4b8a      	ldr	r3, [pc, #552]	; (8002b58 <HAL_RCC_ClockConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d910      	bls.n	800295c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b87      	ldr	r3, [pc, #540]	; (8002b58 <HAL_RCC_ClockConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 020f 	bic.w	r2, r3, #15
 8002942:	4985      	ldr	r1, [pc, #532]	; (8002b58 <HAL_RCC_ClockConfig+0x240>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b83      	ldr	r3, [pc, #524]	; (8002b58 <HAL_RCC_ClockConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e184      	b.n	8002c66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	4b7b      	ldr	r3, [pc, #492]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002974:	429a      	cmp	r2, r3
 8002976:	d908      	bls.n	800298a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002978:	4b78      	ldr	r3, [pc, #480]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	4975      	ldr	r1, [pc, #468]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002986:	4313      	orrs	r3, r2
 8002988:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d010      	beq.n	80029b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d908      	bls.n	80029b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029a6:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	496a      	ldr	r1, [pc, #424]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699a      	ldr	r2, [r3, #24]
 80029c8:	4b64      	ldr	r3, [pc, #400]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d908      	bls.n	80029e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029d4:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	495e      	ldr	r1, [pc, #376]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d908      	bls.n	8002a14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a02:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4953      	ldr	r1, [pc, #332]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	4b4d      	ldr	r3, [pc, #308]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d908      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f023 020f 	bic.w	r2, r3, #15
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4947      	ldr	r1, [pc, #284]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d055      	beq.n	8002afa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a4e:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4940      	ldr	r1, [pc, #256]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a68:	4b3c      	ldr	r3, [pc, #240]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d121      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0f6      	b.n	8002c66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d115      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0ea      	b.n	8002c66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0de      	b.n	8002c66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0d6      	b.n	8002c66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ab8:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f023 0207 	bic.w	r2, r3, #7
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4925      	ldr	r1, [pc, #148]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aca:	f7fe fa15 	bl	8000ef8 <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad2:	f7fe fa11 	bl	8000ef8 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e0be      	b.n	8002c66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d1eb      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d208      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f023 020f 	bic.w	r2, r3, #15
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	490e      	ldr	r1, [pc, #56]	; (8002b5c <HAL_RCC_ClockConfig+0x244>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_ClockConfig+0x240>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d214      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_RCC_ClockConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	4906      	ldr	r1, [pc, #24]	; (8002b58 <HAL_RCC_ClockConfig+0x240>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <HAL_RCC_ClockConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e086      	b.n	8002c66 <HAL_RCC_ClockConfig+0x34e>
 8002b58:	52002000 	.word	0x52002000
 8002b5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d010      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d208      	bcs.n	8002b8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b7c:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	4939      	ldr	r1, [pc, #228]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d010      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d208      	bcs.n	8002bbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	492e      	ldr	r1, [pc, #184]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d010      	beq.n	8002bea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d208      	bcs.n	8002bea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bd8:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4922      	ldr	r1, [pc, #136]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d208      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4917      	ldr	r1, [pc, #92]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c18:	f000 f834 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	4912      	ldr	r1, [pc, #72]	; (8002c74 <HAL_RCC_ClockConfig+0x35c>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_RCC_ClockConfig+0x358>)
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <HAL_RCC_ClockConfig+0x35c>)
 8002c40:	5cd3      	ldrb	r3, [r2, r3]
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_RCC_ClockConfig+0x360>)
 8002c4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <HAL_RCC_ClockConfig+0x364>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RCC_ClockConfig+0x368>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe f902 	bl	8000e64 <HAL_InitTick>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	58024400 	.word	0x58024400
 8002c74:	08006eb4 	.word	0x08006eb4
 8002c78:	24000004 	.word	0x24000004
 8002c7c:	24000000 	.word	0x24000000
 8002c80:	2400000c 	.word	0x2400000c

08002c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c8a:	4bb3      	ldr	r3, [pc, #716]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c92:	2b18      	cmp	r3, #24
 8002c94:	f200 8155 	bhi.w	8002f42 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c98:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002d05 	.word	0x08002d05
 8002ca4:	08002f43 	.word	0x08002f43
 8002ca8:	08002f43 	.word	0x08002f43
 8002cac:	08002f43 	.word	0x08002f43
 8002cb0:	08002f43 	.word	0x08002f43
 8002cb4:	08002f43 	.word	0x08002f43
 8002cb8:	08002f43 	.word	0x08002f43
 8002cbc:	08002f43 	.word	0x08002f43
 8002cc0:	08002d2b 	.word	0x08002d2b
 8002cc4:	08002f43 	.word	0x08002f43
 8002cc8:	08002f43 	.word	0x08002f43
 8002ccc:	08002f43 	.word	0x08002f43
 8002cd0:	08002f43 	.word	0x08002f43
 8002cd4:	08002f43 	.word	0x08002f43
 8002cd8:	08002f43 	.word	0x08002f43
 8002cdc:	08002f43 	.word	0x08002f43
 8002ce0:	08002d31 	.word	0x08002d31
 8002ce4:	08002f43 	.word	0x08002f43
 8002ce8:	08002f43 	.word	0x08002f43
 8002cec:	08002f43 	.word	0x08002f43
 8002cf0:	08002f43 	.word	0x08002f43
 8002cf4:	08002f43 	.word	0x08002f43
 8002cf8:	08002f43 	.word	0x08002f43
 8002cfc:	08002f43 	.word	0x08002f43
 8002d00:	08002d37 	.word	0x08002d37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d04:	4b94      	ldr	r3, [pc, #592]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d10:	4b91      	ldr	r3, [pc, #580]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	4a90      	ldr	r2, [pc, #576]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002d22:	e111      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d24:	4b8d      	ldr	r3, [pc, #564]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d26:	61bb      	str	r3, [r7, #24]
    break;
 8002d28:	e10e      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d2c:	61bb      	str	r3, [r7, #24]
    break;
 8002d2e:	e10b      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002d30:	4b8c      	ldr	r3, [pc, #560]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d32:	61bb      	str	r3, [r7, #24]
    break;
 8002d34:	e108      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d36:	4b88      	ldr	r3, [pc, #544]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d40:	4b85      	ldr	r3, [pc, #532]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d4c:	4b82      	ldr	r3, [pc, #520]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d56:	4b80      	ldr	r3, [pc, #512]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	08db      	lsrs	r3, r3, #3
 8002d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80e1 	beq.w	8002f3c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	f000 8083 	beq.w	8002e88 <HAL_RCC_GetSysClockFreq+0x204>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	f200 80a1 	bhi.w	8002ecc <HAL_RCC_GetSysClockFreq+0x248>
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x114>
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d056      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d96:	e099      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d98:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02d      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002da4:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	08db      	lsrs	r3, r3, #3
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	4a6b      	ldr	r2, [pc, #428]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dce:	4b62      	ldr	r3, [pc, #392]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002de2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002dfe:	e087      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e12:	4b51      	ldr	r3, [pc, #324]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e26:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e42:	e065      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e56:	4b40      	ldr	r3, [pc, #256]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e86:	e043      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e92:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9a:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea2:	ee07 3a90 	vmov	s15, r3
 8002ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eca:	e021      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ef2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	0a5b      	lsrs	r3, r3, #9
 8002f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f34:	ee17 3a90 	vmov	r3, s15
 8002f38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002f3a:	e005      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    break;
 8002f40:	e002      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f44:	61bb      	str	r3, [r7, #24]
    break;
 8002f46:	bf00      	nop
  }

  return sysclockfreq;
 8002f48:	69bb      	ldr	r3, [r7, #24]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	03d09000 	.word	0x03d09000
 8002f60:	003d0900 	.word	0x003d0900
 8002f64:	017d7840 	.word	0x017d7840
 8002f68:	46000000 	.word	0x46000000
 8002f6c:	4c742400 	.word	0x4c742400
 8002f70:	4a742400 	.word	0x4a742400
 8002f74:	4bbebc20 	.word	0x4bbebc20

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f7e:	f7ff fe81 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490f      	ldr	r1, [pc, #60]	; (8002fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	58024400 	.word	0x58024400
 8002fcc:	08006eb4 	.word	0x08006eb4
 8002fd0:	24000004 	.word	0x24000004
 8002fd4:	24000000 	.word	0x24000000

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002fdc:	f7ff ffcc 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4904      	ldr	r1, [pc, #16]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	58024400 	.word	0x58024400
 8003000:	08006eb4 	.word	0x08006eb4

08003004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003008:	f7ff ffb6 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4904      	ldr	r1, [pc, #16]	; (800302c <HAL_RCC_GetPCLK2Freq+0x28>)
 800301a:	5ccb      	ldrb	r3, [r1, r3]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	58024400 	.word	0x58024400
 800302c:	08006eb4 	.word	0x08006eb4

08003030 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003038:	2300      	movs	r3, #0
 800303a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800303c:	2300      	movs	r3, #0
 800303e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d03f      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003050:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003054:	d02a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003056:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800305a:	d824      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800305c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003060:	d018      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003066:	d81e      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800306c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003070:	d007      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003072:	e018      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003074:	4bab      	ldr	r3, [pc, #684]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	4aaa      	ldr	r2, [pc, #680]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800307a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003080:	e015      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	2102      	movs	r1, #2
 8003088:	4618      	mov	r0, r3
 800308a:	f001 f9ff 	bl	800448c <RCCEx_PLL2_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003092:	e00c      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3324      	adds	r3, #36	; 0x24
 8003098:	2102      	movs	r1, #2
 800309a:	4618      	mov	r0, r3
 800309c:	f001 faa8 	bl	80045f0 <RCCEx_PLL3_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
      break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030b4:	4b9b      	ldr	r3, [pc, #620]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c0:	4998      	ldr	r1, [pc, #608]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	650b      	str	r3, [r1, #80]	; 0x50
 80030c6:	e001      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d03d      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d826      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80030e0:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	080030fd 	.word	0x080030fd
 80030ec:	0800310b 	.word	0x0800310b
 80030f0:	0800311d 	.word	0x0800311d
 80030f4:	08003135 	.word	0x08003135
 80030f8:	08003135 	.word	0x08003135
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fc:	4b89      	ldr	r3, [pc, #548]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	4a88      	ldr	r2, [pc, #544]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003106:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003108:	e015      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f001 f9bb 	bl	800448c <RCCEx_PLL2_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800311a:	e00c      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3324      	adds	r3, #36	; 0x24
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f001 fa64 	bl	80045f0 <RCCEx_PLL3_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800312c:	e003      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
      break;
 8003132:	e000      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800313c:	4b79      	ldr	r3, [pc, #484]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800313e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003140:	f023 0207 	bic.w	r2, r3, #7
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	4976      	ldr	r1, [pc, #472]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	650b      	str	r3, [r1, #80]	; 0x50
 800314e:	e001      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315c:	2b00      	cmp	r3, #0
 800315e:	d042      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003168:	d02b      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800316a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800316e:	d825      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003170:	2bc0      	cmp	r3, #192	; 0xc0
 8003172:	d028      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003174:	2bc0      	cmp	r3, #192	; 0xc0
 8003176:	d821      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d016      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d81d      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d007      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003188:	e018      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800318a:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	4a65      	ldr	r2, [pc, #404]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003196:	e017      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 f974 	bl	800448c <RCCEx_PLL2_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80031a8:	e00e      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3324      	adds	r3, #36	; 0x24
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 fa1d 	bl	80045f0 <RCCEx_PLL3_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80031ba:	e005      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	75fb      	strb	r3, [r7, #23]
      break;
 80031c0:	e002      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80031c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031ce:	4b55      	ldr	r3, [pc, #340]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	4952      	ldr	r1, [pc, #328]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	650b      	str	r3, [r1, #80]	; 0x50
 80031e0:	e001      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d049      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031fc:	d030      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80031fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003202:	d82a      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003204:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003208:	d02c      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800320a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800320e:	d824      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003214:	d018      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321a:	d81e      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003224:	d007      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003226:	e018      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003228:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	4a3d      	ldr	r2, [pc, #244]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800322e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003234:	e017      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f001 f925 	bl	800448c <RCCEx_PLL2_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003246:	e00e      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3324      	adds	r3, #36	; 0x24
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f001 f9ce 	bl	80045f0 <RCCEx_PLL3_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003258:	e005      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
      break;
 800325e:	e002      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003260:	bf00      	nop
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800327a:	492a      	ldr	r1, [pc, #168]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	658b      	str	r3, [r1, #88]	; 0x58
 8003280:	e001      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04c      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800329c:	d030      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800329e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032a2:	d82a      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80032a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032a8:	d02c      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80032aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032ae:	d824      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80032b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032b4:	d018      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80032b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ba:	d81e      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80032c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c4:	d007      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80032c6:	e018      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c8:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032d4:	e017      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 f8d5 	bl	800448c <RCCEx_PLL2_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032e6:	e00e      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3324      	adds	r3, #36	; 0x24
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 f97e 	bl	80045f0 <RCCEx_PLL3_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032f8:	e005      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
      break;
 80032fe:	e002      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800331a:	4902      	ldr	r1, [pc, #8]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	658b      	str	r3, [r1, #88]	; 0x58
 8003320:	e004      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003322:	bf00      	nop
 8003324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d032      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333c:	2b30      	cmp	r3, #48	; 0x30
 800333e:	d01c      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d817      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d00c      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d813      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d016      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003350:	2b10      	cmp	r3, #16
 8003352:	d10f      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003354:	4bb1      	ldr	r3, [pc, #708]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	4ab0      	ldr	r2, [pc, #704]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800335a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003360:	e00e      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f001 f88f 	bl	800448c <RCCEx_PLL2_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003372:	e005      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
      break;
 8003378:	e002      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800337e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003386:	4ba5      	ldr	r3, [pc, #660]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003392:	49a2      	ldr	r1, [pc, #648]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003398:	e001      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d047      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b2:	d030      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80033b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b8:	d82a      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80033ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033be:	d02c      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80033c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033c4:	d824      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80033c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ca:	d018      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80033cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d0:	d81e      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	d007      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80033dc:	e018      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033de:	4b8f      	ldr	r3, [pc, #572]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	4a8e      	ldr	r2, [pc, #568]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033ea:	e017      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 f84a 	bl	800448c <RCCEx_PLL2_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033fc:	e00e      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3324      	adds	r3, #36	; 0x24
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f001 f8f3 	bl	80045f0 <RCCEx_PLL3_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800340e:	e005      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	75fb      	strb	r3, [r7, #23]
      break;
 8003414:	e002      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800341a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003422:	4b7e      	ldr	r3, [pc, #504]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342e:	497b      	ldr	r1, [pc, #492]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003430:	4313      	orrs	r3, r2
 8003432:	650b      	str	r3, [r1, #80]	; 0x50
 8003434:	e001      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d049      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344e:	d02e      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003454:	d828      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800345a:	d02a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800345c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003460:	d822      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003466:	d026      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003468:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800346c:	d81c      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800346e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003472:	d010      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003478:	d816      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01d      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800347e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003482:	d111      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	2101      	movs	r1, #1
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fffe 	bl	800448c <RCCEx_PLL2_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003494:	e012      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f001 f8a7 	bl	80045f0 <RCCEx_PLL3_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80034a6:	e009      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
      break;
 80034ac:	e006      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80034ae:	bf00      	nop
 80034b0:	e004      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80034b2:	bf00      	nop
 80034b4:	e002      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80034b6:	bf00      	nop
 80034b8:	e000      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80034ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034c2:	4b56      	ldr	r3, [pc, #344]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ce:	4953      	ldr	r1, [pc, #332]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	650b      	str	r3, [r1, #80]	; 0x50
 80034d4:	e001      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d04b      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f0:	d02e      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80034f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f6:	d828      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fc:	d02a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d822      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003508:	d026      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800350a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800350e:	d81c      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003514:	d010      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800351a:	d816      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01d      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003520:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003524:	d111      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	2101      	movs	r1, #1
 800352c:	4618      	mov	r0, r3
 800352e:	f000 ffad 	bl	800448c <RCCEx_PLL2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003536:	e012      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3324      	adds	r3, #36	; 0x24
 800353c:	2101      	movs	r1, #1
 800353e:	4618      	mov	r0, r3
 8003540:	f001 f856 	bl	80045f0 <RCCEx_PLL3_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003548:	e009      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
      break;
 800354e:	e006      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003550:	bf00      	nop
 8003552:	e004      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003554:	bf00      	nop
 8003556:	e002      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800355c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003564:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003572:	492a      	ldr	r1, [pc, #168]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003574:	4313      	orrs	r3, r2
 8003576:	658b      	str	r3, [r1, #88]	; 0x58
 8003578:	e001      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357a:	7dfb      	ldrb	r3, [r7, #23]
 800357c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d022      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00e      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d108      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 ff74 	bl	800448c <RCCEx_PLL2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 80035b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80035b8:	4b18      	ldr	r3, [pc, #96]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c4:	4915      	ldr	r1, [pc, #84]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035ca:	e001      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d031      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e4:	d00e      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ea:	d814      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d017      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80035f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f4:	d10f      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003600:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003602:	e00e      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 ff3e 	bl	800448c <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003614:	e005      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
      break;
 800361a:	e002      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800361c:	58024400 	.word	0x58024400
      break;
 8003620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003628:	4bbc      	ldr	r3, [pc, #752]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	49b9      	ldr	r1, [pc, #740]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	650b      	str	r3, [r1, #80]	; 0x50
 800363a:	e001      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d032      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	2b03      	cmp	r3, #3
 8003652:	d81b      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	08003693 	.word	0x08003693
 8003660:	0800366d 	.word	0x0800366d
 8003664:	0800367b 	.word	0x0800367b
 8003668:	08003693 	.word	0x08003693
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366c:	4bab      	ldr	r3, [pc, #684]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	4aaa      	ldr	r2, [pc, #680]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003678:	e00c      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f000 ff03 	bl	800448c <RCCEx_PLL2_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800368a:	e003      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
      break;
 8003690:	e000      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8003692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800369a:	4ba0      	ldr	r3, [pc, #640]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	499d      	ldr	r1, [pc, #628]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036ac:	e001      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8086 	beq.w	80037cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c0:	4b97      	ldr	r3, [pc, #604]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a96      	ldr	r2, [pc, #600]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036cc:	f7fd fc14 	bl	8000ef8 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d2:	e009      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fd fc10 	bl	8000ef8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d902      	bls.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	75fb      	strb	r3, [r7, #23]
        break;
 80036e6:	e005      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036e8:	4b8d      	ldr	r3, [pc, #564]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ef      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d166      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80036fa:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80036fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003704:	4053      	eors	r3, r2
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370a:	2b00      	cmp	r3, #0
 800370c:	d013      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800370e:	4b83      	ldr	r3, [pc, #524]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003716:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003718:	4b80      	ldr	r3, [pc, #512]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a7f      	ldr	r2, [pc, #508]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003724:	4b7d      	ldr	r3, [pc, #500]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a7c      	ldr	r2, [pc, #496]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800372a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003730:	4a7a      	ldr	r2, [pc, #488]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800373c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003740:	d115      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fd fbd9 	bl	8000ef8 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003748:	e00b      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fd fbd5 	bl	8000ef8 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d902      	bls.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	75fb      	strb	r3, [r7, #23]
            break;
 8003760:	e005      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003762:	4b6e      	ldr	r3, [pc, #440]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0ed      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d126      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800377a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003782:	d10d      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8003784:	4b65      	ldr	r3, [pc, #404]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003792:	0919      	lsrs	r1, r3, #4
 8003794:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8003796:	400b      	ands	r3, r1
 8003798:	4960      	ldr	r1, [pc, #384]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800379a:	4313      	orrs	r3, r2
 800379c:	610b      	str	r3, [r1, #16]
 800379e:	e005      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x77c>
 80037a0:	4b5e      	ldr	r3, [pc, #376]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	4a5d      	ldr	r2, [pc, #372]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037aa:	6113      	str	r3, [r2, #16]
 80037ac:	4b5b      	ldr	r3, [pc, #364]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80037b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ba:	4958      	ldr	r1, [pc, #352]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	670b      	str	r3, [r1, #112]	; 0x70
 80037c0:	e004      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	75bb      	strb	r3, [r7, #22]
 80037c6:	e001      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d07e      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037dc:	2b28      	cmp	r3, #40	; 0x28
 80037de:	d867      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x880>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	080038b7 	.word	0x080038b7
 80037ec:	080038b1 	.word	0x080038b1
 80037f0:	080038b1 	.word	0x080038b1
 80037f4:	080038b1 	.word	0x080038b1
 80037f8:	080038b1 	.word	0x080038b1
 80037fc:	080038b1 	.word	0x080038b1
 8003800:	080038b1 	.word	0x080038b1
 8003804:	080038b1 	.word	0x080038b1
 8003808:	0800388d 	.word	0x0800388d
 800380c:	080038b1 	.word	0x080038b1
 8003810:	080038b1 	.word	0x080038b1
 8003814:	080038b1 	.word	0x080038b1
 8003818:	080038b1 	.word	0x080038b1
 800381c:	080038b1 	.word	0x080038b1
 8003820:	080038b1 	.word	0x080038b1
 8003824:	080038b1 	.word	0x080038b1
 8003828:	0800389f 	.word	0x0800389f
 800382c:	080038b1 	.word	0x080038b1
 8003830:	080038b1 	.word	0x080038b1
 8003834:	080038b1 	.word	0x080038b1
 8003838:	080038b1 	.word	0x080038b1
 800383c:	080038b1 	.word	0x080038b1
 8003840:	080038b1 	.word	0x080038b1
 8003844:	080038b1 	.word	0x080038b1
 8003848:	080038b7 	.word	0x080038b7
 800384c:	080038b1 	.word	0x080038b1
 8003850:	080038b1 	.word	0x080038b1
 8003854:	080038b1 	.word	0x080038b1
 8003858:	080038b1 	.word	0x080038b1
 800385c:	080038b1 	.word	0x080038b1
 8003860:	080038b1 	.word	0x080038b1
 8003864:	080038b1 	.word	0x080038b1
 8003868:	080038b7 	.word	0x080038b7
 800386c:	080038b1 	.word	0x080038b1
 8003870:	080038b1 	.word	0x080038b1
 8003874:	080038b1 	.word	0x080038b1
 8003878:	080038b1 	.word	0x080038b1
 800387c:	080038b1 	.word	0x080038b1
 8003880:	080038b1 	.word	0x080038b1
 8003884:	080038b1 	.word	0x080038b1
 8003888:	080038b7 	.word	0x080038b7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	2101      	movs	r1, #1
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fdfa 	bl	800448c <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800389c:	e00c      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3324      	adds	r3, #36	; 0x24
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fea3 	bl	80045f0 <RCCEx_PLL3_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038ae:	e003      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
      break;
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 80038b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ca:	4914      	ldr	r1, [pc, #80]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	654b      	str	r3, [r1, #84]	; 0x54
 80038d0:	e001      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d03e      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e6:	2b05      	cmp	r3, #5
 80038e8:	d827      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80038ea:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003941 	.word	0x08003941
 80038f4:	08003909 	.word	0x08003909
 80038f8:	08003929 	.word	0x08003929
 80038fc:	08003941 	.word	0x08003941
 8003900:	08003941 	.word	0x08003941
 8003904:	08003941 	.word	0x08003941
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	2101      	movs	r1, #1
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fdbc 	bl	800448c <RCCEx_PLL2_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003918:	e013      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800391a:	bf00      	nop
 800391c:	58024400 	.word	0x58024400
 8003920:	58024800 	.word	0x58024800
 8003924:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3324      	adds	r3, #36	; 0x24
 800392c:	2101      	movs	r1, #1
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fe5e 	bl	80045f0 <RCCEx_PLL3_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003938:	e003      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
      break;
 800393e:	e000      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8003940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003948:	4b9f      	ldr	r3, [pc, #636]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f023 0207 	bic.w	r2, r3, #7
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003954:	499c      	ldr	r1, [pc, #624]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003956:	4313      	orrs	r3, r2
 8003958:	654b      	str	r3, [r1, #84]	; 0x54
 800395a:	e001      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d039      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003972:	2b05      	cmp	r3, #5
 8003974:	d820      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	080039bf 	.word	0x080039bf
 8003980:	08003995 	.word	0x08003995
 8003984:	080039a7 	.word	0x080039a7
 8003988:	080039bf 	.word	0x080039bf
 800398c:	080039bf 	.word	0x080039bf
 8003990:	080039bf 	.word	0x080039bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	2101      	movs	r1, #1
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fd76 	bl	800448c <RCCEx_PLL2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039a4:	e00c      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3324      	adds	r3, #36	; 0x24
 80039aa:	2101      	movs	r1, #1
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fe1f 	bl	80045f0 <RCCEx_PLL3_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039b6:	e003      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	75fb      	strb	r3, [r7, #23]
      break;
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 80039be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039c6:	4b80      	ldr	r3, [pc, #512]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	f023 0207 	bic.w	r2, r3, #7
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d4:	497c      	ldr	r1, [pc, #496]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	658b      	str	r3, [r1, #88]	; 0x58
 80039da:	e001      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d04b      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f6:	d02e      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80039f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039fc:	d828      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a02:	d02a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a08:	d822      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003a0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a0e:	d026      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8003a10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a14:	d81c      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a1a:	d010      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a20:	d816      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01d      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a2a:	d111      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fd2a 	bl	800448c <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a3c:	e012      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3324      	adds	r3, #36	; 0x24
 8003a42:	2102      	movs	r1, #2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fdd3 	bl	80045f0 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a4e:	e009      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
      break;
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003a56:	bf00      	nop
 8003a58:	e004      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a6a:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	4953      	ldr	r1, [pc, #332]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	654b      	str	r3, [r1, #84]	; 0x54
 8003a7e:	e001      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d04b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a9a:	d02e      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003a9c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003aa0:	d828      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa6:	d02a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d822      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ab2:	d026      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003ab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ab8:	d81c      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac4:	d816      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01d      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d111      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fcd8 	bl	800448c <RCCEx_PLL2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ae0:	e012      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3324      	adds	r3, #36	; 0x24
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fd81 	bl	80045f0 <RCCEx_PLL3_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003af2:	e009      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75fb      	strb	r3, [r7, #23]
      break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003afa:	bf00      	nop
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b1c:	492a      	ldr	r1, [pc, #168]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	658b      	str	r3, [r1, #88]	; 0x58
 8003b22:	e001      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d04d      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b3e:	d02e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003b40:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b44:	d828      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4a:	d02a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b50:	d822      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003b52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b56:	d026      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003b58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003b5c:	d81c      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b62:	d010      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b68:	d816      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01d      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b72:	d111      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fc86 	bl	800448c <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b84:	e012      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3324      	adds	r3, #36	; 0x24
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fd2f 	bl	80045f0 <RCCEx_PLL3_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b96:	e009      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b9c:	e006      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e004      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e002      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bc0:	4901      	ldr	r1, [pc, #4]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	658b      	str	r3, [r1, #88]	; 0x58
 8003bc6:	e003      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be6:	d10a      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3324      	adds	r3, #36	; 0x24
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fcfe 	bl	80045f0 <RCCEx_PLL3_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003bfe:	4b8c      	ldr	r3, [pc, #560]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0c:	4988      	ldr	r1, [pc, #544]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c28:	d10a      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3324      	adds	r3, #36	; 0x24
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fcdd 	bl	80045f0 <RCCEx_PLL3_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c40:	4b7b      	ldr	r3, [pc, #492]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c4e:	4978      	ldr	r1, [pc, #480]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d034      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c6a:	d01d      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c70:	d817      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7a:	d009      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8003c7c:	e011      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fc01 	bl	800448c <RCCEx_PLL2_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c8e:	e00c      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3324      	adds	r3, #36	; 0x24
 8003c94:	2102      	movs	r1, #2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fcaa 	bl	80045f0 <RCCEx_PLL3_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8003ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb0:	4b5f      	ldr	r3, [pc, #380]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cbe:	495c      	ldr	r1, [pc, #368]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	658b      	str	r3, [r1, #88]	; 0x58
 8003cc4:	e001      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d033      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ce0:	d01c      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003ce2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ce6:	d816      	bhi.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8003ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf2:	d007      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8003cf4:	e00f      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf6:	4b4e      	ldr	r3, [pc, #312]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	4a4d      	ldr	r2, [pc, #308]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d02:	e00c      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3324      	adds	r3, #36	; 0x24
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fc70 	bl	80045f0 <RCCEx_PLL3_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d14:	e003      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8003d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d24:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	493f      	ldr	r1, [pc, #252]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	654b      	str	r3, [r1, #84]	; 0x54
 8003d38:	e001      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d029      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d007      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003d58:	e00f      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5a:	4b35      	ldr	r3, [pc, #212]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	4a34      	ldr	r2, [pc, #208]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d66:	e00b      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fb8c 	bl	800448c <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d78:	e002      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d86:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d92:	4927      	ldr	r1, [pc, #156]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d98:	e001      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3324      	adds	r3, #36	; 0x24
 8003dae:	2102      	movs	r1, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fc1d 	bl	80045f0 <RCCEx_PLL3_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d035      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd6:	d017      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ddc:	d811      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de2:	d013      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de8:	d80b      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d010      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df2:	d106      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df4:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	4a0d      	ldr	r2, [pc, #52]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e00:	e007      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
      break;
 8003e06:	e004      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003e08:	bf00      	nop
 8003e0a:	e002      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003e0c:	bf00      	nop
 8003e0e:	e000      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e26:	4902      	ldr	r1, [pc, #8]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	654b      	str	r3, [r1, #84]	; 0x54
 8003e2c:	e004      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8003e2e:	bf00      	nop
 8003e30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e50:	492e      	ldr	r1, [pc, #184]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e62:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e70:	4926      	ldr	r1, [pc, #152]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8e:	491f      	ldr	r1, [pc, #124]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00d      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ea6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eaa:	6113      	str	r3, [r2, #16]
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003eb6:	4915      	ldr	r1, [pc, #84]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	da08      	bge.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	490e      	ldr	r1, [pc, #56]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef0:	4906      	ldr	r1, [pc, #24]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003ef6:	7dbb      	ldrb	r3, [r7, #22]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400

08003f10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f14:	f7ff f830 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4904      	ldr	r1, [pc, #16]	; (8003f38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	58024400 	.word	0x58024400
 8003f38:	08006eb4 	.word	0x08006eb4

08003f3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	; 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f44:	4ba1      	ldr	r3, [pc, #644]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f4e:	4b9f      	ldr	r3, [pc, #636]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	0b1b      	lsrs	r3, r3, #12
 8003f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f5a:	4b9c      	ldr	r3, [pc, #624]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f66:	4b99      	ldr	r3, [pc, #612]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	08db      	lsrs	r3, r3, #3
 8003f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8111 	beq.w	80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	f000 8083 	beq.w	8004098 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	f200 80a1 	bhi.w	80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d056      	beq.n	8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003fa6:	e099      	b.n	80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fa8:	4b88      	ldr	r3, [pc, #544]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d02d      	beq.n	8004010 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fb4:	4b85      	ldr	r3, [pc, #532]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	08db      	lsrs	r3, r3, #3
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	4a84      	ldr	r2, [pc, #528]	; (80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fde:	4b7b      	ldr	r3, [pc, #492]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ff2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800400e:	e087      	b.n	8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800401e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004022:	4b6a      	ldr	r3, [pc, #424]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004032:	ed97 6a03 	vldr	s12, [r7, #12]
 8004036:	eddf 5a67 	vldr	s11, [pc, #412]	; 80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800403a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800404a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004052:	e065      	b.n	8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004066:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004076:	ed97 6a03 	vldr	s12, [r7, #12]
 800407a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800407e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800408a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004096:	e043      	b.n	8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040aa:	4b48      	ldr	r3, [pc, #288]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80040be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040da:	e021      	b.n	8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004102:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800411e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	0a5b      	lsrs	r3, r3, #9
 8004126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800413a:	edd7 6a07 	vldr	s13, [r7, #28]
 800413e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004146:	ee17 2a90 	vmov	r2, s15
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800414e:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004168:	edd7 6a07 	vldr	s13, [r7, #28]
 800416c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004174:	ee17 2a90 	vmov	r2, s15
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800417c:	4b13      	ldr	r3, [pc, #76]	; (80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	0e1b      	lsrs	r3, r3, #24
 8004182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004196:	edd7 6a07 	vldr	s13, [r7, #28]
 800419a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800419e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a2:	ee17 2a90 	vmov	r2, s15
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041aa:	e008      	b.n	80041be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	609a      	str	r2, [r3, #8]
}
 80041be:	bf00      	nop
 80041c0:	3724      	adds	r7, #36	; 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	58024400 	.word	0x58024400
 80041d0:	03d09000 	.word	0x03d09000
 80041d4:	46000000 	.word	0x46000000
 80041d8:	4c742400 	.word	0x4c742400
 80041dc:	4a742400 	.word	0x4a742400
 80041e0:	4bbebc20 	.word	0x4bbebc20

080041e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041ec:	4ba1      	ldr	r3, [pc, #644]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80041f6:	4b9f      	ldr	r3, [pc, #636]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	0d1b      	lsrs	r3, r3, #20
 80041fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004200:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004202:	4b9c      	ldr	r3, [pc, #624]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800420e:	4b99      	ldr	r3, [pc, #612]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	08db      	lsrs	r3, r3, #3
 8004214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8111 	beq.w	8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b02      	cmp	r3, #2
 8004236:	f000 8083 	beq.w	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b02      	cmp	r3, #2
 800423e:	f200 80a1 	bhi.w	8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d056      	beq.n	80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800424e:	e099      	b.n	8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004250:	4b88      	ldr	r3, [pc, #544]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02d      	beq.n	80042b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800425c:	4b85      	ldr	r3, [pc, #532]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	4a84      	ldr	r2, [pc, #528]	; (8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004286:	4b7b      	ldr	r3, [pc, #492]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004296:	ed97 6a03 	vldr	s12, [r7, #12]
 800429a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800447c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800429e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042b6:	e087      	b.n	80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ca:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	ed97 6a03 	vldr	s12, [r7, #12]
 80042de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800447c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042fa:	e065      	b.n	80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b59      	ldr	r3, [pc, #356]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004322:	eddf 5a56 	vldr	s11, [pc, #344]	; 800447c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800433e:	e043      	b.n	80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b48      	ldr	r3, [pc, #288]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a03 	vldr	s12, [r7, #12]
 8004366:	eddf 5a45 	vldr	s11, [pc, #276]	; 800447c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004382:	e021      	b.n	80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800447c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80043c8:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	0a5b      	lsrs	r3, r3, #9
 80043ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ee:	ee17 2a90 	vmov	r2, s15
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80043f6:	4b1f      	ldr	r3, [pc, #124]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800440c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004410:	edd7 6a07 	vldr	s13, [r7, #28]
 8004414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441c:	ee17 2a90 	vmov	r2, s15
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	0e1b      	lsrs	r3, r3, #24
 800442a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800443a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800443e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800444a:	ee17 2a90 	vmov	r2, s15
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004452:	e008      	b.n	8004466 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
}
 8004466:	bf00      	nop
 8004468:	3724      	adds	r7, #36	; 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
 8004478:	03d09000 	.word	0x03d09000
 800447c:	46000000 	.word	0x46000000
 8004480:	4c742400 	.word	0x4c742400
 8004484:	4a742400 	.word	0x4a742400
 8004488:	4bbebc20 	.word	0x4bbebc20

0800448c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800449a:	4b53      	ldr	r3, [pc, #332]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d101      	bne.n	80044aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e099      	b.n	80045de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044aa:	4b4f      	ldr	r3, [pc, #316]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4e      	ldr	r2, [pc, #312]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80044b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b6:	f7fc fd1f 	bl	8000ef8 <HAL_GetTick>
 80044ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044bc:	e008      	b.n	80044d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044be:	f7fc fd1b 	bl	8000ef8 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e086      	b.n	80045de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044d0:	4b45      	ldr	r3, [pc, #276]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f0      	bne.n	80044be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044dc:	4b42      	ldr	r3, [pc, #264]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	031b      	lsls	r3, r3, #12
 80044ea:	493f      	ldr	r1, [pc, #252]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	628b      	str	r3, [r1, #40]	; 0x28
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	3b01      	subs	r3, #1
 8004500:	025b      	lsls	r3, r3, #9
 8004502:	b29b      	uxth	r3, r3
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	3b01      	subs	r3, #1
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	3b01      	subs	r3, #1
 800451a:	061b      	lsls	r3, r3, #24
 800451c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004520:	4931      	ldr	r1, [pc, #196]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004522:	4313      	orrs	r3, r2
 8004524:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004526:	4b30      	ldr	r3, [pc, #192]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	492d      	ldr	r1, [pc, #180]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004538:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	f023 0220 	bic.w	r2, r3, #32
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	4928      	ldr	r1, [pc, #160]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004546:	4313      	orrs	r3, r2
 8004548:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800454a:	4b27      	ldr	r3, [pc, #156]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	4a26      	ldr	r2, [pc, #152]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004550:	f023 0310 	bic.w	r3, r3, #16
 8004554:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <RCCEx_PLL2_Config+0x160>)
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	69d2      	ldr	r2, [r2, #28]
 8004562:	00d2      	lsls	r2, r2, #3
 8004564:	4920      	ldr	r1, [pc, #128]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800456a:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004570:	f043 0310 	orr.w	r3, r3, #16
 8004574:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004586:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004588:	e00f      	b.n	80045aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004590:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 8004596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800459c:	e005      	b.n	80045aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	4a11      	ldr	r2, [pc, #68]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80045a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80045b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b6:	f7fc fc9f 	bl	8000ef8 <HAL_GetTick>
 80045ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045bc:	e008      	b.n	80045d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045be:	f7fc fc9b 	bl	8000ef8 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e006      	b.n	80045de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <RCCEx_PLL2_Config+0x15c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	58024400 	.word	0x58024400
 80045ec:	ffff0007 	.word	0xffff0007

080045f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045fe:	4b53      	ldr	r3, [pc, #332]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b03      	cmp	r3, #3
 8004608:	d101      	bne.n	800460e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e099      	b.n	8004742 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800460e:	4b4f      	ldr	r3, [pc, #316]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4e      	ldr	r2, [pc, #312]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461a:	f7fc fc6d 	bl	8000ef8 <HAL_GetTick>
 800461e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004620:	e008      	b.n	8004634 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004622:	f7fc fc69 	bl	8000ef8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e086      	b.n	8004742 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004634:	4b45      	ldr	r3, [pc, #276]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004640:	4b42      	ldr	r3, [pc, #264]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	051b      	lsls	r3, r3, #20
 800464e:	493f      	ldr	r1, [pc, #252]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004650:	4313      	orrs	r3, r2
 8004652:	628b      	str	r3, [r1, #40]	; 0x28
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	3b01      	subs	r3, #1
 800465a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	3b01      	subs	r3, #1
 8004664:	025b      	lsls	r3, r3, #9
 8004666:	b29b      	uxth	r3, r3
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	3b01      	subs	r3, #1
 8004670:	041b      	lsls	r3, r3, #16
 8004672:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	3b01      	subs	r3, #1
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004684:	4931      	ldr	r1, [pc, #196]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004686:	4313      	orrs	r3, r2
 8004688:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	492d      	ldr	r1, [pc, #180]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004698:	4313      	orrs	r3, r2
 800469a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800469c:	4b2b      	ldr	r3, [pc, #172]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	4928      	ldr	r1, [pc, #160]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046ae:	4b27      	ldr	r3, [pc, #156]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	4a26      	ldr	r2, [pc, #152]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046be:	4b24      	ldr	r3, [pc, #144]	; (8004750 <RCCEx_PLL3_Config+0x160>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	69d2      	ldr	r2, [r2, #28]
 80046c6:	00d2      	lsls	r2, r2, #3
 80046c8:	4920      	ldr	r1, [pc, #128]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	4a1e      	ldr	r2, [pc, #120]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	4a19      	ldr	r2, [pc, #100]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046ec:	e00f      	b.n	800470e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d106      	bne.n	8004702 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046f4:	4b15      	ldr	r3, [pc, #84]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	4a14      	ldr	r2, [pc, #80]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 80046fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004700:	e005      	b.n	800470e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	4a11      	ldr	r2, [pc, #68]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800470c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800470e:	4b0f      	ldr	r3, [pc, #60]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a0e      	ldr	r2, [pc, #56]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471a:	f7fc fbed 	bl	8000ef8 <HAL_GetTick>
 800471e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004720:	e008      	b.n	8004734 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004722:	f7fc fbe9 	bl	8000ef8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e006      	b.n	8004742 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <RCCEx_PLL3_Config+0x15c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	58024400 	.word	0x58024400
 8004750:	ffff0007 	.word	0xffff0007

08004754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e042      	b.n	80047ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fc f9c7 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2224      	movs	r2, #36	; 0x24
 8004782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fb9c 	bl	8004ed4 <UART_SetConfig>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e022      	b.n	80047ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f001 f8f0 	bl	8005994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f001 f977 	bl	8005ad8 <UART_CheckIdleState>
 80047ea:	4603      	mov	r3, r0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480a:	2b20      	cmp	r3, #32
 800480c:	f040 8083 	bne.w	8004916 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_UART_Transmit+0x28>
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e07b      	b.n	8004918 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_UART_Transmit+0x3a>
 800482a:	2302      	movs	r3, #2
 800482c:	e074      	b.n	8004918 <HAL_UART_Transmit+0x124>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2221      	movs	r2, #33	; 0x21
 8004842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004846:	f7fc fb57 	bl	8000ef8 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004864:	d108      	bne.n	8004878 <HAL_UART_Transmit+0x84>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	e003      	b.n	8004880 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800487c:	2300      	movs	r3, #0
 800487e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004888:	e02c      	b.n	80048e4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2200      	movs	r2, #0
 8004892:	2180      	movs	r1, #128	; 0x80
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f001 f96a 	bl	8005b6e <UART_WaitOnFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e039      	b.n	8004918 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	3302      	adds	r3, #2
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	e007      	b.n	80048d2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	3301      	adds	r3, #1
 80048d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1cc      	bne.n	800488a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2140      	movs	r1, #64	; 0x40
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f001 f937 	bl	8005b6e <UART_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e006      	b.n	8004918 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	f640 030f 	movw	r3, #2063	; 0x80f
 8004946:	4013      	ands	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d118      	bne.n	8004982 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d013      	beq.n	8004982 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d104      	bne.n	800496e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8282 	beq.w	8004e7c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
      }
      return;
 8004980:	e27c      	b.n	8004e7c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80ef 	beq.w	8004b68 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4b73      	ldr	r3, [pc, #460]	; (8004b5c <HAL_UART_IRQHandler+0x23c>)
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d105      	bne.n	80049a0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4b72      	ldr	r3, [pc, #456]	; (8004b60 <HAL_UART_IRQHandler+0x240>)
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80e4 	beq.w	8004b68 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d010      	beq.n	80049cc <HAL_UART_IRQHandler+0xac>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2201      	movs	r2, #1
 80049ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c2:	f043 0201 	orr.w	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d010      	beq.n	80049f8 <HAL_UART_IRQHandler+0xd8>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2202      	movs	r2, #2
 80049e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d010      	beq.n	8004a24 <HAL_UART_IRQHandler+0x104>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2204      	movs	r2, #4
 8004a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1a:	f043 0202 	orr.w	r2, r3, #2
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d015      	beq.n	8004a5a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4b48      	ldr	r3, [pc, #288]	; (8004b5c <HAL_UART_IRQHandler+0x23c>)
 8004a3c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2208      	movs	r2, #8
 8004a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a50:	f043 0208 	orr.w	r2, r3, #8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d011      	beq.n	8004a88 <HAL_UART_IRQHandler+0x168>
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 81f6 	beq.w	8004e80 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d004      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d031      	beq.n	8004b46 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f001 f8c4 	bl	8005c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d123      	bne.n	8004b3e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d013      	beq.n	8004b36 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b12:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <HAL_UART_IRQHandler+0x244>)
 8004b14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fc fe56 	bl	80017cc <HAL_DMA_Abort_IT>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d017      	beq.n	8004b56 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004b30:	4610      	mov	r0, r2
 8004b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b34:	e00f      	b.n	8004b56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f9b6 	bl	8004ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3c:	e00b      	b.n	8004b56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9b2 	bl	8004ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b44:	e007      	b.n	8004b56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f9ae 	bl	8004ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004b54:	e194      	b.n	8004e80 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b56:	bf00      	nop
    return;
 8004b58:	e192      	b.n	8004e80 <HAL_UART_IRQHandler+0x560>
 8004b5a:	bf00      	nop
 8004b5c:	10000001 	.word	0x10000001
 8004b60:	04000120 	.word	0x04000120
 8004b64:	08005cd5 	.word	0x08005cd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	f040 810f 	bne.w	8004d90 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8109 	beq.w	8004d90 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8103 	beq.w	8004d90 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2210      	movs	r2, #16
 8004b90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	f040 80bb 	bne.w	8004d18 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a96      	ldr	r2, [pc, #600]	; (8004e04 <HAL_UART_IRQHandler+0x4e4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d059      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a94      	ldr	r2, [pc, #592]	; (8004e08 <HAL_UART_IRQHandler+0x4e8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d053      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a92      	ldr	r2, [pc, #584]	; (8004e0c <HAL_UART_IRQHandler+0x4ec>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d04d      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a90      	ldr	r2, [pc, #576]	; (8004e10 <HAL_UART_IRQHandler+0x4f0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d047      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a8e      	ldr	r2, [pc, #568]	; (8004e14 <HAL_UART_IRQHandler+0x4f4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d041      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a8c      	ldr	r2, [pc, #560]	; (8004e18 <HAL_UART_IRQHandler+0x4f8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d03b      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a8a      	ldr	r2, [pc, #552]	; (8004e1c <HAL_UART_IRQHandler+0x4fc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d035      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a88      	ldr	r2, [pc, #544]	; (8004e20 <HAL_UART_IRQHandler+0x500>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02f      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a86      	ldr	r2, [pc, #536]	; (8004e24 <HAL_UART_IRQHandler+0x504>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d029      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a84      	ldr	r2, [pc, #528]	; (8004e28 <HAL_UART_IRQHandler+0x508>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d023      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a82      	ldr	r2, [pc, #520]	; (8004e2c <HAL_UART_IRQHandler+0x50c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a80      	ldr	r2, [pc, #512]	; (8004e30 <HAL_UART_IRQHandler+0x510>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d017      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a7e      	ldr	r2, [pc, #504]	; (8004e34 <HAL_UART_IRQHandler+0x514>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d011      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a7c      	ldr	r2, [pc, #496]	; (8004e38 <HAL_UART_IRQHandler+0x518>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a7a      	ldr	r2, [pc, #488]	; (8004e3c <HAL_UART_IRQHandler+0x51c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d005      	beq.n	8004c62 <HAL_UART_IRQHandler+0x342>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a78      	ldr	r2, [pc, #480]	; (8004e40 <HAL_UART_IRQHandler+0x520>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d105      	bne.n	8004c6e <HAL_UART_IRQHandler+0x34e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	e004      	b.n	8004c78 <HAL_UART_IRQHandler+0x358>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004c7a:	893b      	ldrh	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8101 	beq.w	8004e84 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c88:	893a      	ldrh	r2, [r7, #8]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	f080 80fa 	bcs.w	8004e84 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	893a      	ldrh	r2, [r7, #8]
 8004c94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca2:	d02b      	beq.n	8004cfc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0210 	bic.w	r2, r2, #16
 8004cf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fc fa4a 	bl	8001190 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f8d3 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d16:	e0b5      	b.n	8004e84 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80a8 	beq.w	8004e88 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8004d38:	897b      	ldrh	r3, [r7, #10]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80a4 	beq.w	8004e88 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <HAL_UART_IRQHandler+0x524>)
 8004d5c:	400b      	ands	r3, r1
 8004d5e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0210 	bic.w	r2, r2, #16
 8004d82:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d84:	897b      	ldrh	r3, [r7, #10]
 8004d86:	4619      	mov	r1, r3
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f897 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d8e:	e07b      	b.n	8004e88 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <HAL_UART_IRQHandler+0x496>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 ffc0 	bl	8005d34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004db4:	e06b      	b.n	8004e8e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d012      	beq.n	8004de6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d057      	beq.n	8004e8c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
    }
    return;
 8004de4:	e052      	b.n	8004e8c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02b      	beq.n	8004e48 <HAL_UART_IRQHandler+0x528>
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d026      	beq.n	8004e48 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 ff80 	bl	8005d00 <UART_EndTransmit_IT>
    return;
 8004e00:	e045      	b.n	8004e8e <HAL_UART_IRQHandler+0x56e>
 8004e02:	bf00      	nop
 8004e04:	40020010 	.word	0x40020010
 8004e08:	40020028 	.word	0x40020028
 8004e0c:	40020040 	.word	0x40020040
 8004e10:	40020058 	.word	0x40020058
 8004e14:	40020070 	.word	0x40020070
 8004e18:	40020088 	.word	0x40020088
 8004e1c:	400200a0 	.word	0x400200a0
 8004e20:	400200b8 	.word	0x400200b8
 8004e24:	40020410 	.word	0x40020410
 8004e28:	40020428 	.word	0x40020428
 8004e2c:	40020440 	.word	0x40020440
 8004e30:	40020458 	.word	0x40020458
 8004e34:	40020470 	.word	0x40020470
 8004e38:	40020488 	.word	0x40020488
 8004e3c:	400204a0 	.word	0x400204a0
 8004e40:	400204b8 	.word	0x400204b8
 8004e44:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_UART_IRQHandler+0x544>
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 ff7d 	bl	8005d5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e62:	e014      	b.n	8004e8e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00f      	beq.n	8004e8e <HAL_UART_IRQHandler+0x56e>
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da0c      	bge.n	8004e8e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 ff67 	bl	8005d48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e7a:	e008      	b.n	8004e8e <HAL_UART_IRQHandler+0x56e>
      return;
 8004e7c:	bf00      	nop
 8004e7e:	e006      	b.n	8004e8e <HAL_UART_IRQHandler+0x56e>
    return;
 8004e80:	bf00      	nop
 8004e82:	e004      	b.n	8004e8e <HAL_UART_IRQHandler+0x56e>
      return;
 8004e84:	bf00      	nop
 8004e86:	e002      	b.n	8004e8e <HAL_UART_IRQHandler+0x56e>
      return;
 8004e88:	bf00      	nop
 8004e8a:	e000      	b.n	8004e8e <HAL_UART_IRQHandler+0x56e>
    return;
 8004e8c:	bf00      	nop
  }
}
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed4:	b5b0      	push	{r4, r5, r7, lr}
 8004ed6:	b08e      	sub	sp, #56	; 0x38
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4bbf      	ldr	r3, [pc, #764]	; (8005200 <UART_SetConfig+0x32c>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4ab5      	ldr	r2, [pc, #724]	; (8005204 <UART_SetConfig+0x330>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	4bb0      	ldr	r3, [pc, #704]	; (8005208 <UART_SetConfig+0x334>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	f023 010f 	bic.w	r1, r3, #15
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4aa7      	ldr	r2, [pc, #668]	; (800520c <UART_SetConfig+0x338>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d176      	bne.n	8005060 <UART_SetConfig+0x18c>
 8004f72:	4ba7      	ldr	r3, [pc, #668]	; (8005210 <UART_SetConfig+0x33c>)
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f7a:	2b28      	cmp	r3, #40	; 0x28
 8004f7c:	d86c      	bhi.n	8005058 <UART_SetConfig+0x184>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0xb0>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08005029 	.word	0x08005029
 8004f88:	08005059 	.word	0x08005059
 8004f8c:	08005059 	.word	0x08005059
 8004f90:	08005059 	.word	0x08005059
 8004f94:	08005059 	.word	0x08005059
 8004f98:	08005059 	.word	0x08005059
 8004f9c:	08005059 	.word	0x08005059
 8004fa0:	08005059 	.word	0x08005059
 8004fa4:	08005031 	.word	0x08005031
 8004fa8:	08005059 	.word	0x08005059
 8004fac:	08005059 	.word	0x08005059
 8004fb0:	08005059 	.word	0x08005059
 8004fb4:	08005059 	.word	0x08005059
 8004fb8:	08005059 	.word	0x08005059
 8004fbc:	08005059 	.word	0x08005059
 8004fc0:	08005059 	.word	0x08005059
 8004fc4:	08005039 	.word	0x08005039
 8004fc8:	08005059 	.word	0x08005059
 8004fcc:	08005059 	.word	0x08005059
 8004fd0:	08005059 	.word	0x08005059
 8004fd4:	08005059 	.word	0x08005059
 8004fd8:	08005059 	.word	0x08005059
 8004fdc:	08005059 	.word	0x08005059
 8004fe0:	08005059 	.word	0x08005059
 8004fe4:	08005041 	.word	0x08005041
 8004fe8:	08005059 	.word	0x08005059
 8004fec:	08005059 	.word	0x08005059
 8004ff0:	08005059 	.word	0x08005059
 8004ff4:	08005059 	.word	0x08005059
 8004ff8:	08005059 	.word	0x08005059
 8004ffc:	08005059 	.word	0x08005059
 8005000:	08005059 	.word	0x08005059
 8005004:	08005049 	.word	0x08005049
 8005008:	08005059 	.word	0x08005059
 800500c:	08005059 	.word	0x08005059
 8005010:	08005059 	.word	0x08005059
 8005014:	08005059 	.word	0x08005059
 8005018:	08005059 	.word	0x08005059
 800501c:	08005059 	.word	0x08005059
 8005020:	08005059 	.word	0x08005059
 8005024:	08005051 	.word	0x08005051
 8005028:	2301      	movs	r3, #1
 800502a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502e:	e222      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005036:	e21e      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503e:	e21a      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005046:	e216      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005048:	2320      	movs	r3, #32
 800504a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504e:	e212      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005050:	2340      	movs	r3, #64	; 0x40
 8005052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005056:	e20e      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800505e:	e20a      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a6b      	ldr	r2, [pc, #428]	; (8005214 <UART_SetConfig+0x340>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d130      	bne.n	80050cc <UART_SetConfig+0x1f8>
 800506a:	4b69      	ldr	r3, [pc, #420]	; (8005210 <UART_SetConfig+0x33c>)
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	2b05      	cmp	r3, #5
 8005074:	d826      	bhi.n	80050c4 <UART_SetConfig+0x1f0>
 8005076:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x1a8>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	08005095 	.word	0x08005095
 8005080:	0800509d 	.word	0x0800509d
 8005084:	080050a5 	.word	0x080050a5
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050bd 	.word	0x080050bd
 8005094:	2300      	movs	r3, #0
 8005096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800509a:	e1ec      	b.n	8005476 <UART_SetConfig+0x5a2>
 800509c:	2304      	movs	r3, #4
 800509e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050a2:	e1e8      	b.n	8005476 <UART_SetConfig+0x5a2>
 80050a4:	2308      	movs	r3, #8
 80050a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050aa:	e1e4      	b.n	8005476 <UART_SetConfig+0x5a2>
 80050ac:	2310      	movs	r3, #16
 80050ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050b2:	e1e0      	b.n	8005476 <UART_SetConfig+0x5a2>
 80050b4:	2320      	movs	r3, #32
 80050b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ba:	e1dc      	b.n	8005476 <UART_SetConfig+0x5a2>
 80050bc:	2340      	movs	r3, #64	; 0x40
 80050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c2:	e1d8      	b.n	8005476 <UART_SetConfig+0x5a2>
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ca:	e1d4      	b.n	8005476 <UART_SetConfig+0x5a2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a51      	ldr	r2, [pc, #324]	; (8005218 <UART_SetConfig+0x344>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d130      	bne.n	8005138 <UART_SetConfig+0x264>
 80050d6:	4b4e      	ldr	r3, [pc, #312]	; (8005210 <UART_SetConfig+0x33c>)
 80050d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	2b05      	cmp	r3, #5
 80050e0:	d826      	bhi.n	8005130 <UART_SetConfig+0x25c>
 80050e2:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <UART_SetConfig+0x214>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	08005101 	.word	0x08005101
 80050ec:	08005109 	.word	0x08005109
 80050f0:	08005111 	.word	0x08005111
 80050f4:	08005119 	.word	0x08005119
 80050f8:	08005121 	.word	0x08005121
 80050fc:	08005129 	.word	0x08005129
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005106:	e1b6      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005108:	2304      	movs	r3, #4
 800510a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800510e:	e1b2      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005110:	2308      	movs	r3, #8
 8005112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005116:	e1ae      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005118:	2310      	movs	r3, #16
 800511a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511e:	e1aa      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005120:	2320      	movs	r3, #32
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005126:	e1a6      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005128:	2340      	movs	r3, #64	; 0x40
 800512a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512e:	e1a2      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005136:	e19e      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a37      	ldr	r2, [pc, #220]	; (800521c <UART_SetConfig+0x348>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d130      	bne.n	80051a4 <UART_SetConfig+0x2d0>
 8005142:	4b33      	ldr	r3, [pc, #204]	; (8005210 <UART_SetConfig+0x33c>)
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	2b05      	cmp	r3, #5
 800514c:	d826      	bhi.n	800519c <UART_SetConfig+0x2c8>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0x280>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	0800516d 	.word	0x0800516d
 8005158:	08005175 	.word	0x08005175
 800515c:	0800517d 	.word	0x0800517d
 8005160:	08005185 	.word	0x08005185
 8005164:	0800518d 	.word	0x0800518d
 8005168:	08005195 	.word	0x08005195
 800516c:	2300      	movs	r3, #0
 800516e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005172:	e180      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005174:	2304      	movs	r3, #4
 8005176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800517a:	e17c      	b.n	8005476 <UART_SetConfig+0x5a2>
 800517c:	2308      	movs	r3, #8
 800517e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005182:	e178      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005184:	2310      	movs	r3, #16
 8005186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800518a:	e174      	b.n	8005476 <UART_SetConfig+0x5a2>
 800518c:	2320      	movs	r3, #32
 800518e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005192:	e170      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005194:	2340      	movs	r3, #64	; 0x40
 8005196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519a:	e16c      	b.n	8005476 <UART_SetConfig+0x5a2>
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a2:	e168      	b.n	8005476 <UART_SetConfig+0x5a2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <UART_SetConfig+0x34c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d142      	bne.n	8005234 <UART_SetConfig+0x360>
 80051ae:	4b18      	ldr	r3, [pc, #96]	; (8005210 <UART_SetConfig+0x33c>)
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d838      	bhi.n	800522c <UART_SetConfig+0x358>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <UART_SetConfig+0x2ec>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051d9 	.word	0x080051d9
 80051c4:	080051e1 	.word	0x080051e1
 80051c8:	080051e9 	.word	0x080051e9
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	080051f9 	.word	0x080051f9
 80051d4:	08005225 	.word	0x08005225
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051de:	e14a      	b.n	8005476 <UART_SetConfig+0x5a2>
 80051e0:	2304      	movs	r3, #4
 80051e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e6:	e146      	b.n	8005476 <UART_SetConfig+0x5a2>
 80051e8:	2308      	movs	r3, #8
 80051ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ee:	e142      	b.n	8005476 <UART_SetConfig+0x5a2>
 80051f0:	2310      	movs	r3, #16
 80051f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f6:	e13e      	b.n	8005476 <UART_SetConfig+0x5a2>
 80051f8:	2320      	movs	r3, #32
 80051fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fe:	e13a      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005200:	cfff69f3 	.word	0xcfff69f3
 8005204:	58000c00 	.word	0x58000c00
 8005208:	11fff4ff 	.word	0x11fff4ff
 800520c:	40011000 	.word	0x40011000
 8005210:	58024400 	.word	0x58024400
 8005214:	40004400 	.word	0x40004400
 8005218:	40004800 	.word	0x40004800
 800521c:	40004c00 	.word	0x40004c00
 8005220:	40005000 	.word	0x40005000
 8005224:	2340      	movs	r3, #64	; 0x40
 8005226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522a:	e124      	b.n	8005476 <UART_SetConfig+0x5a2>
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005232:	e120      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4acc      	ldr	r2, [pc, #816]	; (800556c <UART_SetConfig+0x698>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d176      	bne.n	800532c <UART_SetConfig+0x458>
 800523e:	4bcc      	ldr	r3, [pc, #816]	; (8005570 <UART_SetConfig+0x69c>)
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005246:	2b28      	cmp	r3, #40	; 0x28
 8005248:	d86c      	bhi.n	8005324 <UART_SetConfig+0x450>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <UART_SetConfig+0x37c>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	080052f5 	.word	0x080052f5
 8005254:	08005325 	.word	0x08005325
 8005258:	08005325 	.word	0x08005325
 800525c:	08005325 	.word	0x08005325
 8005260:	08005325 	.word	0x08005325
 8005264:	08005325 	.word	0x08005325
 8005268:	08005325 	.word	0x08005325
 800526c:	08005325 	.word	0x08005325
 8005270:	080052fd 	.word	0x080052fd
 8005274:	08005325 	.word	0x08005325
 8005278:	08005325 	.word	0x08005325
 800527c:	08005325 	.word	0x08005325
 8005280:	08005325 	.word	0x08005325
 8005284:	08005325 	.word	0x08005325
 8005288:	08005325 	.word	0x08005325
 800528c:	08005325 	.word	0x08005325
 8005290:	08005305 	.word	0x08005305
 8005294:	08005325 	.word	0x08005325
 8005298:	08005325 	.word	0x08005325
 800529c:	08005325 	.word	0x08005325
 80052a0:	08005325 	.word	0x08005325
 80052a4:	08005325 	.word	0x08005325
 80052a8:	08005325 	.word	0x08005325
 80052ac:	08005325 	.word	0x08005325
 80052b0:	0800530d 	.word	0x0800530d
 80052b4:	08005325 	.word	0x08005325
 80052b8:	08005325 	.word	0x08005325
 80052bc:	08005325 	.word	0x08005325
 80052c0:	08005325 	.word	0x08005325
 80052c4:	08005325 	.word	0x08005325
 80052c8:	08005325 	.word	0x08005325
 80052cc:	08005325 	.word	0x08005325
 80052d0:	08005315 	.word	0x08005315
 80052d4:	08005325 	.word	0x08005325
 80052d8:	08005325 	.word	0x08005325
 80052dc:	08005325 	.word	0x08005325
 80052e0:	08005325 	.word	0x08005325
 80052e4:	08005325 	.word	0x08005325
 80052e8:	08005325 	.word	0x08005325
 80052ec:	08005325 	.word	0x08005325
 80052f0:	0800531d 	.word	0x0800531d
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fa:	e0bc      	b.n	8005476 <UART_SetConfig+0x5a2>
 80052fc:	2304      	movs	r3, #4
 80052fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005302:	e0b8      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005304:	2308      	movs	r3, #8
 8005306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800530a:	e0b4      	b.n	8005476 <UART_SetConfig+0x5a2>
 800530c:	2310      	movs	r3, #16
 800530e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005312:	e0b0      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005314:	2320      	movs	r3, #32
 8005316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531a:	e0ac      	b.n	8005476 <UART_SetConfig+0x5a2>
 800531c:	2340      	movs	r3, #64	; 0x40
 800531e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005322:	e0a8      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532a:	e0a4      	b.n	8005476 <UART_SetConfig+0x5a2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a90      	ldr	r2, [pc, #576]	; (8005574 <UART_SetConfig+0x6a0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d130      	bne.n	8005398 <UART_SetConfig+0x4c4>
 8005336:	4b8e      	ldr	r3, [pc, #568]	; (8005570 <UART_SetConfig+0x69c>)
 8005338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	2b05      	cmp	r3, #5
 8005340:	d826      	bhi.n	8005390 <UART_SetConfig+0x4bc>
 8005342:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <UART_SetConfig+0x474>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	08005361 	.word	0x08005361
 800534c:	08005369 	.word	0x08005369
 8005350:	08005371 	.word	0x08005371
 8005354:	08005379 	.word	0x08005379
 8005358:	08005381 	.word	0x08005381
 800535c:	08005389 	.word	0x08005389
 8005360:	2300      	movs	r3, #0
 8005362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005366:	e086      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005368:	2304      	movs	r3, #4
 800536a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800536e:	e082      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005370:	2308      	movs	r3, #8
 8005372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005376:	e07e      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005378:	2310      	movs	r3, #16
 800537a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800537e:	e07a      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005380:	2320      	movs	r3, #32
 8005382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005386:	e076      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005388:	2340      	movs	r3, #64	; 0x40
 800538a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538e:	e072      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005396:	e06e      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a76      	ldr	r2, [pc, #472]	; (8005578 <UART_SetConfig+0x6a4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d130      	bne.n	8005404 <UART_SetConfig+0x530>
 80053a2:	4b73      	ldr	r3, [pc, #460]	; (8005570 <UART_SetConfig+0x69c>)
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d826      	bhi.n	80053fc <UART_SetConfig+0x528>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <UART_SetConfig+0x4e0>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053cd 	.word	0x080053cd
 80053b8:	080053d5 	.word	0x080053d5
 80053bc:	080053dd 	.word	0x080053dd
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	080053ed 	.word	0x080053ed
 80053c8:	080053f5 	.word	0x080053f5
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d2:	e050      	b.n	8005476 <UART_SetConfig+0x5a2>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053da:	e04c      	b.n	8005476 <UART_SetConfig+0x5a2>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e2:	e048      	b.n	8005476 <UART_SetConfig+0x5a2>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ea:	e044      	b.n	8005476 <UART_SetConfig+0x5a2>
 80053ec:	2320      	movs	r3, #32
 80053ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f2:	e040      	b.n	8005476 <UART_SetConfig+0x5a2>
 80053f4:	2340      	movs	r3, #64	; 0x40
 80053f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fa:	e03c      	b.n	8005476 <UART_SetConfig+0x5a2>
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005402:	e038      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5c      	ldr	r2, [pc, #368]	; (800557c <UART_SetConfig+0x6a8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d130      	bne.n	8005470 <UART_SetConfig+0x59c>
 800540e:	4b58      	ldr	r3, [pc, #352]	; (8005570 <UART_SetConfig+0x69c>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	2b05      	cmp	r3, #5
 8005418:	d826      	bhi.n	8005468 <UART_SetConfig+0x594>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0x54c>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005439 	.word	0x08005439
 8005424:	08005441 	.word	0x08005441
 8005428:	08005449 	.word	0x08005449
 800542c:	08005451 	.word	0x08005451
 8005430:	08005459 	.word	0x08005459
 8005434:	08005461 	.word	0x08005461
 8005438:	2302      	movs	r3, #2
 800543a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543e:	e01a      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005446:	e016      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800544e:	e012      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005456:	e00e      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005458:	2320      	movs	r3, #32
 800545a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800545e:	e00a      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005460:	2340      	movs	r3, #64	; 0x40
 8005462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005466:	e006      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546e:	e002      	b.n	8005476 <UART_SetConfig+0x5a2>
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a40      	ldr	r2, [pc, #256]	; (800557c <UART_SetConfig+0x6a8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	f040 80ef 	bne.w	8005660 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005482:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005486:	2b20      	cmp	r3, #32
 8005488:	dc46      	bgt.n	8005518 <UART_SetConfig+0x644>
 800548a:	2b02      	cmp	r3, #2
 800548c:	f2c0 8081 	blt.w	8005592 <UART_SetConfig+0x6be>
 8005490:	3b02      	subs	r3, #2
 8005492:	2b1e      	cmp	r3, #30
 8005494:	d87d      	bhi.n	8005592 <UART_SetConfig+0x6be>
 8005496:	a201      	add	r2, pc, #4	; (adr r2, 800549c <UART_SetConfig+0x5c8>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	0800551f 	.word	0x0800551f
 80054a0:	08005593 	.word	0x08005593
 80054a4:	08005527 	.word	0x08005527
 80054a8:	08005593 	.word	0x08005593
 80054ac:	08005593 	.word	0x08005593
 80054b0:	08005593 	.word	0x08005593
 80054b4:	08005537 	.word	0x08005537
 80054b8:	08005593 	.word	0x08005593
 80054bc:	08005593 	.word	0x08005593
 80054c0:	08005593 	.word	0x08005593
 80054c4:	08005593 	.word	0x08005593
 80054c8:	08005593 	.word	0x08005593
 80054cc:	08005593 	.word	0x08005593
 80054d0:	08005593 	.word	0x08005593
 80054d4:	08005547 	.word	0x08005547
 80054d8:	08005593 	.word	0x08005593
 80054dc:	08005593 	.word	0x08005593
 80054e0:	08005593 	.word	0x08005593
 80054e4:	08005593 	.word	0x08005593
 80054e8:	08005593 	.word	0x08005593
 80054ec:	08005593 	.word	0x08005593
 80054f0:	08005593 	.word	0x08005593
 80054f4:	08005593 	.word	0x08005593
 80054f8:	08005593 	.word	0x08005593
 80054fc:	08005593 	.word	0x08005593
 8005500:	08005593 	.word	0x08005593
 8005504:	08005593 	.word	0x08005593
 8005508:	08005593 	.word	0x08005593
 800550c:	08005593 	.word	0x08005593
 8005510:	08005593 	.word	0x08005593
 8005514:	08005585 	.word	0x08005585
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d036      	beq.n	800558a <UART_SetConfig+0x6b6>
 800551c:	e039      	b.n	8005592 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800551e:	f7fe fcf7 	bl	8003f10 <HAL_RCCEx_GetD3PCLK1Freq>
 8005522:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005524:	e03b      	b.n	800559e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005526:	f107 0314 	add.w	r3, r7, #20
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe fd06 	bl	8003f3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005534:	e033      	b.n	800559e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fe52 	bl	80041e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005544:	e02b      	b.n	800559e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <UART_SetConfig+0x69c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005552:	4b07      	ldr	r3, [pc, #28]	; (8005570 <UART_SetConfig+0x69c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	08db      	lsrs	r3, r3, #3
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	4a08      	ldr	r2, [pc, #32]	; (8005580 <UART_SetConfig+0x6ac>)
 800555e:	fa22 f303 	lsr.w	r3, r2, r3
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005564:	e01b      	b.n	800559e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <UART_SetConfig+0x6ac>)
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800556a:	e018      	b.n	800559e <UART_SetConfig+0x6ca>
 800556c:	40011400 	.word	0x40011400
 8005570:	58024400 	.word	0x58024400
 8005574:	40007800 	.word	0x40007800
 8005578:	40007c00 	.word	0x40007c00
 800557c:	58000c00 	.word	0x58000c00
 8005580:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005584:	4bc4      	ldr	r3, [pc, #784]	; (8005898 <UART_SetConfig+0x9c4>)
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005588:	e009      	b.n	800559e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005590:	e005      	b.n	800559e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800559c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 81da 	beq.w	800595a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	4abc      	ldr	r2, [pc, #752]	; (800589c <UART_SetConfig+0x9c8>)
 80055ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	6a3a      	ldr	r2, [r7, #32]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d305      	bcc.n	80055d6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055d0:	6a3a      	ldr	r2, [r7, #32]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d903      	bls.n	80055de <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80055dc:	e1bd      	b.n	800595a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	4618      	mov	r0, r3
 80055e2:	f04f 0100 	mov.w	r1, #0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	4aac      	ldr	r2, [pc, #688]	; (800589c <UART_SetConfig+0x9c8>)
 80055ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	f7fa fec3 	bl	8000380 <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4610      	mov	r0, r2
 8005600:	4619      	mov	r1, r3
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	020b      	lsls	r3, r1, #8
 800560c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005610:	0202      	lsls	r2, r0, #8
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	6849      	ldr	r1, [r1, #4]
 8005616:	0849      	lsrs	r1, r1, #1
 8005618:	4608      	mov	r0, r1
 800561a:	f04f 0100 	mov.w	r1, #0
 800561e:	1814      	adds	r4, r2, r0
 8005620:	eb43 0501 	adc.w	r5, r3, r1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	461a      	mov	r2, r3
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	4620      	mov	r0, r4
 8005630:	4629      	mov	r1, r5
 8005632:	f7fa fea5 	bl	8000380 <__aeabi_uldivmod>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4613      	mov	r3, r2
 800563c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005644:	d308      	bcc.n	8005658 <UART_SetConfig+0x784>
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564c:	d204      	bcs.n	8005658 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	e180      	b.n	800595a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800565e:	e17c      	b.n	800595a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005668:	f040 80bf 	bne.w	80057ea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800566c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005670:	2b20      	cmp	r3, #32
 8005672:	dc49      	bgt.n	8005708 <UART_SetConfig+0x834>
 8005674:	2b00      	cmp	r3, #0
 8005676:	db7c      	blt.n	8005772 <UART_SetConfig+0x89e>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d87a      	bhi.n	8005772 <UART_SetConfig+0x89e>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <UART_SetConfig+0x7b0>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	0800570f 	.word	0x0800570f
 8005688:	08005717 	.word	0x08005717
 800568c:	08005773 	.word	0x08005773
 8005690:	08005773 	.word	0x08005773
 8005694:	0800571f 	.word	0x0800571f
 8005698:	08005773 	.word	0x08005773
 800569c:	08005773 	.word	0x08005773
 80056a0:	08005773 	.word	0x08005773
 80056a4:	0800572f 	.word	0x0800572f
 80056a8:	08005773 	.word	0x08005773
 80056ac:	08005773 	.word	0x08005773
 80056b0:	08005773 	.word	0x08005773
 80056b4:	08005773 	.word	0x08005773
 80056b8:	08005773 	.word	0x08005773
 80056bc:	08005773 	.word	0x08005773
 80056c0:	08005773 	.word	0x08005773
 80056c4:	0800573f 	.word	0x0800573f
 80056c8:	08005773 	.word	0x08005773
 80056cc:	08005773 	.word	0x08005773
 80056d0:	08005773 	.word	0x08005773
 80056d4:	08005773 	.word	0x08005773
 80056d8:	08005773 	.word	0x08005773
 80056dc:	08005773 	.word	0x08005773
 80056e0:	08005773 	.word	0x08005773
 80056e4:	08005773 	.word	0x08005773
 80056e8:	08005773 	.word	0x08005773
 80056ec:	08005773 	.word	0x08005773
 80056f0:	08005773 	.word	0x08005773
 80056f4:	08005773 	.word	0x08005773
 80056f8:	08005773 	.word	0x08005773
 80056fc:	08005773 	.word	0x08005773
 8005700:	08005773 	.word	0x08005773
 8005704:	08005765 	.word	0x08005765
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d02e      	beq.n	800576a <UART_SetConfig+0x896>
 800570c:	e031      	b.n	8005772 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800570e:	f7fd fc63 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8005712:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005714:	e033      	b.n	800577e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005716:	f7fd fc75 	bl	8003004 <HAL_RCC_GetPCLK2Freq>
 800571a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800571c:	e02f      	b.n	800577e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800571e:	f107 0314 	add.w	r3, r7, #20
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fc0a 	bl	8003f3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800572c:	e027      	b.n	800577e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800572e:	f107 0308 	add.w	r3, r7, #8
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fd56 	bl	80041e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800573c:	e01f      	b.n	800577e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800573e:	4b58      	ldr	r3, [pc, #352]	; (80058a0 <UART_SetConfig+0x9cc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800574a:	4b55      	ldr	r3, [pc, #340]	; (80058a0 <UART_SetConfig+0x9cc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	08db      	lsrs	r3, r3, #3
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	4a53      	ldr	r2, [pc, #332]	; (80058a4 <UART_SetConfig+0x9d0>)
 8005756:	fa22 f303 	lsr.w	r3, r2, r3
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800575c:	e00f      	b.n	800577e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800575e:	4b51      	ldr	r3, [pc, #324]	; (80058a4 <UART_SetConfig+0x9d0>)
 8005760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005762:	e00c      	b.n	800577e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005764:	4b4c      	ldr	r3, [pc, #304]	; (8005898 <UART_SetConfig+0x9c4>)
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005768:	e009      	b.n	800577e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005770:	e005      	b.n	800577e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800577c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80ea 	beq.w	800595a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	4a44      	ldr	r2, [pc, #272]	; (800589c <UART_SetConfig+0x9c8>)
 800578c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005790:	461a      	mov	r2, r3
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	fbb3 f3f2 	udiv	r3, r3, r2
 8005798:	005a      	lsls	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	441a      	add	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	2b0f      	cmp	r3, #15
 80057b2:	d916      	bls.n	80057e2 <UART_SetConfig+0x90e>
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ba:	d212      	bcs.n	80057e2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f023 030f 	bic.w	r3, r3, #15
 80057c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057d4:	4313      	orrs	r3, r2
 80057d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	e0bb      	b.n	800595a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057e8:	e0b7      	b.n	800595a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	dc4a      	bgt.n	8005888 <UART_SetConfig+0x9b4>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f2c0 8086 	blt.w	8005904 <UART_SetConfig+0xa30>
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	f200 8083 	bhi.w	8005904 <UART_SetConfig+0xa30>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x930>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	0800588f 	.word	0x0800588f
 8005808:	080058a9 	.word	0x080058a9
 800580c:	08005905 	.word	0x08005905
 8005810:	08005905 	.word	0x08005905
 8005814:	080058b1 	.word	0x080058b1
 8005818:	08005905 	.word	0x08005905
 800581c:	08005905 	.word	0x08005905
 8005820:	08005905 	.word	0x08005905
 8005824:	080058c1 	.word	0x080058c1
 8005828:	08005905 	.word	0x08005905
 800582c:	08005905 	.word	0x08005905
 8005830:	08005905 	.word	0x08005905
 8005834:	08005905 	.word	0x08005905
 8005838:	08005905 	.word	0x08005905
 800583c:	08005905 	.word	0x08005905
 8005840:	08005905 	.word	0x08005905
 8005844:	080058d1 	.word	0x080058d1
 8005848:	08005905 	.word	0x08005905
 800584c:	08005905 	.word	0x08005905
 8005850:	08005905 	.word	0x08005905
 8005854:	08005905 	.word	0x08005905
 8005858:	08005905 	.word	0x08005905
 800585c:	08005905 	.word	0x08005905
 8005860:	08005905 	.word	0x08005905
 8005864:	08005905 	.word	0x08005905
 8005868:	08005905 	.word	0x08005905
 800586c:	08005905 	.word	0x08005905
 8005870:	08005905 	.word	0x08005905
 8005874:	08005905 	.word	0x08005905
 8005878:	08005905 	.word	0x08005905
 800587c:	08005905 	.word	0x08005905
 8005880:	08005905 	.word	0x08005905
 8005884:	080058f7 	.word	0x080058f7
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d037      	beq.n	80058fc <UART_SetConfig+0xa28>
 800588c:	e03a      	b.n	8005904 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800588e:	f7fd fba3 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8005892:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005894:	e03c      	b.n	8005910 <UART_SetConfig+0xa3c>
 8005896:	bf00      	nop
 8005898:	003d0900 	.word	0x003d0900
 800589c:	08006ec4 	.word	0x08006ec4
 80058a0:	58024400 	.word	0x58024400
 80058a4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a8:	f7fd fbac 	bl	8003004 <HAL_RCC_GetPCLK2Freq>
 80058ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058ae:	e02f      	b.n	8005910 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058b0:	f107 0314 	add.w	r3, r7, #20
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fb41 	bl	8003f3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058be:	e027      	b.n	8005910 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe fc8d 	bl	80041e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058ce:	e01f      	b.n	8005910 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <UART_SetConfig+0xab0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058dc:	4b29      	ldr	r3, [pc, #164]	; (8005984 <UART_SetConfig+0xab0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	08db      	lsrs	r3, r3, #3
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	4a28      	ldr	r2, [pc, #160]	; (8005988 <UART_SetConfig+0xab4>)
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058ee:	e00f      	b.n	8005910 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b25      	ldr	r3, [pc, #148]	; (8005988 <UART_SetConfig+0xab4>)
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058f4:	e00c      	b.n	8005910 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058f6:	4b25      	ldr	r3, [pc, #148]	; (800598c <UART_SetConfig+0xab8>)
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058fa:	e009      	b.n	8005910 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005902:	e005      	b.n	8005910 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800590e:	bf00      	nop
    }

    if (pclk != 0U)
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d021      	beq.n	800595a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	4a1d      	ldr	r2, [pc, #116]	; (8005990 <UART_SetConfig+0xabc>)
 800591c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005920:	461a      	mov	r2, r3
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	fbb3 f2f2 	udiv	r2, r3, r2
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	441a      	add	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	b29b      	uxth	r3, r3
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	2b0f      	cmp	r3, #15
 8005940:	d908      	bls.n	8005954 <UART_SetConfig+0xa80>
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005948:	d204      	bcs.n	8005954 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005950:	60da      	str	r2, [r3, #12]
 8005952:	e002      	b.n	800595a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005976:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800597a:	4618      	mov	r0, r3
 800597c:	3738      	adds	r7, #56	; 0x38
 800597e:	46bd      	mov	sp, r7
 8005980:	bdb0      	pop	{r4, r5, r7, pc}
 8005982:	bf00      	nop
 8005984:	58024400 	.word	0x58024400
 8005988:	03d09000 	.word	0x03d09000
 800598c:	003d0900 	.word	0x003d0900
 8005990:	08006ec4 	.word	0x08006ec4

08005994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a92:	d10a      	bne.n	8005aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ae8:	f7fb fa06 	bl	8000ef8 <HAL_GetTick>
 8005aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d10e      	bne.n	8005b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f82f 	bl	8005b6e <UART_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e025      	b.n	8005b66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d10e      	bne.n	8005b46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f819 	bl	8005b6e <UART_WaitOnFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e00f      	b.n	8005b66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7e:	e062      	b.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d05e      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b88:	f7fb f9b6 	bl	8000ef8 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x30>
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11d      	bne.n	8005bda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e045      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02e      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf6:	d126      	bne.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e00f      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d08d      	beq.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6899      	ldr	r1, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <UART_EndRxTransfer+0x60>)
 8005c94:	400b      	ands	r3, r1
 8005c96:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d107      	bne.n	8005cb0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0210 	bic.w	r2, r2, #16
 8005cae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	effffffe 	.word	0xeffffffe

08005cd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7ff f8d8 	bl	8004ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d16:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff f8b4 	bl	8004e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e027      	b.n	8005dd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2224      	movs	r2, #36	; 0x24
 8005d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0201 	bic.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005db4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e02d      	b.n	8005e56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2224      	movs	r2, #36	; 0x24
 8005e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f850 	bl	8005edc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e02d      	b.n	8005ed2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2224      	movs	r2, #36	; 0x24
 8005e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f812 	bl	8005edc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d108      	bne.n	8005efe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005efc:	e031      	b.n	8005f62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005efe:	2310      	movs	r3, #16
 8005f00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f02:	2310      	movs	r3, #16
 8005f04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	0e5b      	lsrs	r3, r3, #25
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	0f5b      	lsrs	r3, r3, #29
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	7b3a      	ldrb	r2, [r7, #12]
 8005f2a:	4911      	ldr	r1, [pc, #68]	; (8005f70 <UARTEx_SetNbDataToProcess+0x94>)
 8005f2c:	5c8a      	ldrb	r2, [r1, r2]
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f32:	7b3a      	ldrb	r2, [r7, #12]
 8005f34:	490f      	ldr	r1, [pc, #60]	; (8005f74 <UARTEx_SetNbDataToProcess+0x98>)
 8005f36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f38:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	7b7a      	ldrb	r2, [r7, #13]
 8005f48:	4909      	ldr	r1, [pc, #36]	; (8005f70 <UARTEx_SetNbDataToProcess+0x94>)
 8005f4a:	5c8a      	ldrb	r2, [r1, r2]
 8005f4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f50:	7b7a      	ldrb	r2, [r7, #13]
 8005f52:	4908      	ldr	r1, [pc, #32]	; (8005f74 <UARTEx_SetNbDataToProcess+0x98>)
 8005f54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f56:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	08006edc 	.word	0x08006edc
 8005f74:	08006ee4 	.word	0x08006ee4

08005f78 <__errno>:
 8005f78:	4b01      	ldr	r3, [pc, #4]	; (8005f80 <__errno+0x8>)
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	24000014 	.word	0x24000014

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	4d0d      	ldr	r5, [pc, #52]	; (8005fbc <__libc_init_array+0x38>)
 8005f88:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8a:	1b64      	subs	r4, r4, r5
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	2600      	movs	r6, #0
 8005f90:	42a6      	cmp	r6, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	4d0b      	ldr	r5, [pc, #44]	; (8005fc4 <__libc_init_array+0x40>)
 8005f96:	4c0c      	ldr	r4, [pc, #48]	; (8005fc8 <__libc_init_array+0x44>)
 8005f98:	f000 ff76 	bl	8006e88 <_init>
 8005f9c:	1b64      	subs	r4, r4, r5
 8005f9e:	10a4      	asrs	r4, r4, #2
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	42a6      	cmp	r6, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fac:	4798      	blx	r3
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb6:	4798      	blx	r3
 8005fb8:	3601      	adds	r6, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	08006f8c 	.word	0x08006f8c
 8005fc0:	08006f8c 	.word	0x08006f8c
 8005fc4:	08006f8c 	.word	0x08006f8c
 8005fc8:	08006f90 	.word	0x08006f90

08005fcc <memset>:
 8005fcc:	4402      	add	r2, r0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d100      	bne.n	8005fd6 <memset+0xa>
 8005fd4:	4770      	bx	lr
 8005fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fda:	e7f9      	b.n	8005fd0 <memset+0x4>

08005fdc <iprintf>:
 8005fdc:	b40f      	push	{r0, r1, r2, r3}
 8005fde:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <iprintf+0x2c>)
 8005fe0:	b513      	push	{r0, r1, r4, lr}
 8005fe2:	681c      	ldr	r4, [r3, #0]
 8005fe4:	b124      	cbz	r4, 8005ff0 <iprintf+0x14>
 8005fe6:	69a3      	ldr	r3, [r4, #24]
 8005fe8:	b913      	cbnz	r3, 8005ff0 <iprintf+0x14>
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 f866 	bl	80060bc <__sinit>
 8005ff0:	ab05      	add	r3, sp, #20
 8005ff2:	9a04      	ldr	r2, [sp, #16]
 8005ff4:	68a1      	ldr	r1, [r4, #8]
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 f983 	bl	8006304 <_vfiprintf_r>
 8005ffe:	b002      	add	sp, #8
 8006000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006004:	b004      	add	sp, #16
 8006006:	4770      	bx	lr
 8006008:	24000014 	.word	0x24000014

0800600c <std>:
 800600c:	2300      	movs	r3, #0
 800600e:	b510      	push	{r4, lr}
 8006010:	4604      	mov	r4, r0
 8006012:	e9c0 3300 	strd	r3, r3, [r0]
 8006016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800601a:	6083      	str	r3, [r0, #8]
 800601c:	8181      	strh	r1, [r0, #12]
 800601e:	6643      	str	r3, [r0, #100]	; 0x64
 8006020:	81c2      	strh	r2, [r0, #14]
 8006022:	6183      	str	r3, [r0, #24]
 8006024:	4619      	mov	r1, r3
 8006026:	2208      	movs	r2, #8
 8006028:	305c      	adds	r0, #92	; 0x5c
 800602a:	f7ff ffcf 	bl	8005fcc <memset>
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <std+0x38>)
 8006030:	6263      	str	r3, [r4, #36]	; 0x24
 8006032:	4b05      	ldr	r3, [pc, #20]	; (8006048 <std+0x3c>)
 8006034:	62a3      	str	r3, [r4, #40]	; 0x28
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <std+0x40>)
 8006038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800603a:	4b05      	ldr	r3, [pc, #20]	; (8006050 <std+0x44>)
 800603c:	6224      	str	r4, [r4, #32]
 800603e:	6323      	str	r3, [r4, #48]	; 0x30
 8006040:	bd10      	pop	{r4, pc}
 8006042:	bf00      	nop
 8006044:	080068ad 	.word	0x080068ad
 8006048:	080068cf 	.word	0x080068cf
 800604c:	08006907 	.word	0x08006907
 8006050:	0800692b 	.word	0x0800692b

08006054 <_cleanup_r>:
 8006054:	4901      	ldr	r1, [pc, #4]	; (800605c <_cleanup_r+0x8>)
 8006056:	f000 b8af 	b.w	80061b8 <_fwalk_reent>
 800605a:	bf00      	nop
 800605c:	08006c05 	.word	0x08006c05

08006060 <__sfmoreglue>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	1e4a      	subs	r2, r1, #1
 8006064:	2568      	movs	r5, #104	; 0x68
 8006066:	4355      	muls	r5, r2
 8006068:	460e      	mov	r6, r1
 800606a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800606e:	f000 f8c5 	bl	80061fc <_malloc_r>
 8006072:	4604      	mov	r4, r0
 8006074:	b140      	cbz	r0, 8006088 <__sfmoreglue+0x28>
 8006076:	2100      	movs	r1, #0
 8006078:	e9c0 1600 	strd	r1, r6, [r0]
 800607c:	300c      	adds	r0, #12
 800607e:	60a0      	str	r0, [r4, #8]
 8006080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006084:	f7ff ffa2 	bl	8005fcc <memset>
 8006088:	4620      	mov	r0, r4
 800608a:	bd70      	pop	{r4, r5, r6, pc}

0800608c <__sfp_lock_acquire>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__sfp_lock_acquire+0x8>)
 800608e:	f000 b8b3 	b.w	80061f8 <__retarget_lock_acquire_recursive>
 8006092:	bf00      	nop
 8006094:	2400013c 	.word	0x2400013c

08006098 <__sfp_lock_release>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__sfp_lock_release+0x8>)
 800609a:	f000 b8ae 	b.w	80061fa <__retarget_lock_release_recursive>
 800609e:	bf00      	nop
 80060a0:	2400013c 	.word	0x2400013c

080060a4 <__sinit_lock_acquire>:
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <__sinit_lock_acquire+0x8>)
 80060a6:	f000 b8a7 	b.w	80061f8 <__retarget_lock_acquire_recursive>
 80060aa:	bf00      	nop
 80060ac:	24000137 	.word	0x24000137

080060b0 <__sinit_lock_release>:
 80060b0:	4801      	ldr	r0, [pc, #4]	; (80060b8 <__sinit_lock_release+0x8>)
 80060b2:	f000 b8a2 	b.w	80061fa <__retarget_lock_release_recursive>
 80060b6:	bf00      	nop
 80060b8:	24000137 	.word	0x24000137

080060bc <__sinit>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	4604      	mov	r4, r0
 80060c0:	f7ff fff0 	bl	80060a4 <__sinit_lock_acquire>
 80060c4:	69a3      	ldr	r3, [r4, #24]
 80060c6:	b11b      	cbz	r3, 80060d0 <__sinit+0x14>
 80060c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060cc:	f7ff bff0 	b.w	80060b0 <__sinit_lock_release>
 80060d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060d4:	6523      	str	r3, [r4, #80]	; 0x50
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <__sinit+0x68>)
 80060d8:	4a13      	ldr	r2, [pc, #76]	; (8006128 <__sinit+0x6c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80060de:	42a3      	cmp	r3, r4
 80060e0:	bf04      	itt	eq
 80060e2:	2301      	moveq	r3, #1
 80060e4:	61a3      	streq	r3, [r4, #24]
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 f820 	bl	800612c <__sfp>
 80060ec:	6060      	str	r0, [r4, #4]
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 f81c 	bl	800612c <__sfp>
 80060f4:	60a0      	str	r0, [r4, #8]
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 f818 	bl	800612c <__sfp>
 80060fc:	2200      	movs	r2, #0
 80060fe:	60e0      	str	r0, [r4, #12]
 8006100:	2104      	movs	r1, #4
 8006102:	6860      	ldr	r0, [r4, #4]
 8006104:	f7ff ff82 	bl	800600c <std>
 8006108:	68a0      	ldr	r0, [r4, #8]
 800610a:	2201      	movs	r2, #1
 800610c:	2109      	movs	r1, #9
 800610e:	f7ff ff7d 	bl	800600c <std>
 8006112:	68e0      	ldr	r0, [r4, #12]
 8006114:	2202      	movs	r2, #2
 8006116:	2112      	movs	r1, #18
 8006118:	f7ff ff78 	bl	800600c <std>
 800611c:	2301      	movs	r3, #1
 800611e:	61a3      	str	r3, [r4, #24]
 8006120:	e7d2      	b.n	80060c8 <__sinit+0xc>
 8006122:	bf00      	nop
 8006124:	08006eec 	.word	0x08006eec
 8006128:	08006055 	.word	0x08006055

0800612c <__sfp>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	4607      	mov	r7, r0
 8006130:	f7ff ffac 	bl	800608c <__sfp_lock_acquire>
 8006134:	4b1e      	ldr	r3, [pc, #120]	; (80061b0 <__sfp+0x84>)
 8006136:	681e      	ldr	r6, [r3, #0]
 8006138:	69b3      	ldr	r3, [r6, #24]
 800613a:	b913      	cbnz	r3, 8006142 <__sfp+0x16>
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff ffbd 	bl	80060bc <__sinit>
 8006142:	3648      	adds	r6, #72	; 0x48
 8006144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006148:	3b01      	subs	r3, #1
 800614a:	d503      	bpl.n	8006154 <__sfp+0x28>
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	b30b      	cbz	r3, 8006194 <__sfp+0x68>
 8006150:	6836      	ldr	r6, [r6, #0]
 8006152:	e7f7      	b.n	8006144 <__sfp+0x18>
 8006154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006158:	b9d5      	cbnz	r5, 8006190 <__sfp+0x64>
 800615a:	4b16      	ldr	r3, [pc, #88]	; (80061b4 <__sfp+0x88>)
 800615c:	60e3      	str	r3, [r4, #12]
 800615e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006162:	6665      	str	r5, [r4, #100]	; 0x64
 8006164:	f000 f847 	bl	80061f6 <__retarget_lock_init_recursive>
 8006168:	f7ff ff96 	bl	8006098 <__sfp_lock_release>
 800616c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006174:	6025      	str	r5, [r4, #0]
 8006176:	61a5      	str	r5, [r4, #24]
 8006178:	2208      	movs	r2, #8
 800617a:	4629      	mov	r1, r5
 800617c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006180:	f7ff ff24 	bl	8005fcc <memset>
 8006184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800618c:	4620      	mov	r0, r4
 800618e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006190:	3468      	adds	r4, #104	; 0x68
 8006192:	e7d9      	b.n	8006148 <__sfp+0x1c>
 8006194:	2104      	movs	r1, #4
 8006196:	4638      	mov	r0, r7
 8006198:	f7ff ff62 	bl	8006060 <__sfmoreglue>
 800619c:	4604      	mov	r4, r0
 800619e:	6030      	str	r0, [r6, #0]
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d1d5      	bne.n	8006150 <__sfp+0x24>
 80061a4:	f7ff ff78 	bl	8006098 <__sfp_lock_release>
 80061a8:	230c      	movs	r3, #12
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	e7ee      	b.n	800618c <__sfp+0x60>
 80061ae:	bf00      	nop
 80061b0:	08006eec 	.word	0x08006eec
 80061b4:	ffff0001 	.word	0xffff0001

080061b8 <_fwalk_reent>:
 80061b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061bc:	4606      	mov	r6, r0
 80061be:	4688      	mov	r8, r1
 80061c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061c4:	2700      	movs	r7, #0
 80061c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061ca:	f1b9 0901 	subs.w	r9, r9, #1
 80061ce:	d505      	bpl.n	80061dc <_fwalk_reent+0x24>
 80061d0:	6824      	ldr	r4, [r4, #0]
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	d1f7      	bne.n	80061c6 <_fwalk_reent+0xe>
 80061d6:	4638      	mov	r0, r7
 80061d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061dc:	89ab      	ldrh	r3, [r5, #12]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d907      	bls.n	80061f2 <_fwalk_reent+0x3a>
 80061e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061e6:	3301      	adds	r3, #1
 80061e8:	d003      	beq.n	80061f2 <_fwalk_reent+0x3a>
 80061ea:	4629      	mov	r1, r5
 80061ec:	4630      	mov	r0, r6
 80061ee:	47c0      	blx	r8
 80061f0:	4307      	orrs	r7, r0
 80061f2:	3568      	adds	r5, #104	; 0x68
 80061f4:	e7e9      	b.n	80061ca <_fwalk_reent+0x12>

080061f6 <__retarget_lock_init_recursive>:
 80061f6:	4770      	bx	lr

080061f8 <__retarget_lock_acquire_recursive>:
 80061f8:	4770      	bx	lr

080061fa <__retarget_lock_release_recursive>:
 80061fa:	4770      	bx	lr

080061fc <_malloc_r>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	1ccd      	adds	r5, r1, #3
 8006200:	f025 0503 	bic.w	r5, r5, #3
 8006204:	3508      	adds	r5, #8
 8006206:	2d0c      	cmp	r5, #12
 8006208:	bf38      	it	cc
 800620a:	250c      	movcc	r5, #12
 800620c:	2d00      	cmp	r5, #0
 800620e:	4606      	mov	r6, r0
 8006210:	db01      	blt.n	8006216 <_malloc_r+0x1a>
 8006212:	42a9      	cmp	r1, r5
 8006214:	d903      	bls.n	800621e <_malloc_r+0x22>
 8006216:	230c      	movs	r3, #12
 8006218:	6033      	str	r3, [r6, #0]
 800621a:	2000      	movs	r0, #0
 800621c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800621e:	f000 fda3 	bl	8006d68 <__malloc_lock>
 8006222:	4921      	ldr	r1, [pc, #132]	; (80062a8 <_malloc_r+0xac>)
 8006224:	680a      	ldr	r2, [r1, #0]
 8006226:	4614      	mov	r4, r2
 8006228:	b99c      	cbnz	r4, 8006252 <_malloc_r+0x56>
 800622a:	4f20      	ldr	r7, [pc, #128]	; (80062ac <_malloc_r+0xb0>)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	b923      	cbnz	r3, 800623a <_malloc_r+0x3e>
 8006230:	4621      	mov	r1, r4
 8006232:	4630      	mov	r0, r6
 8006234:	f000 fb2a 	bl	800688c <_sbrk_r>
 8006238:	6038      	str	r0, [r7, #0]
 800623a:	4629      	mov	r1, r5
 800623c:	4630      	mov	r0, r6
 800623e:	f000 fb25 	bl	800688c <_sbrk_r>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d123      	bne.n	800628e <_malloc_r+0x92>
 8006246:	230c      	movs	r3, #12
 8006248:	6033      	str	r3, [r6, #0]
 800624a:	4630      	mov	r0, r6
 800624c:	f000 fd92 	bl	8006d74 <__malloc_unlock>
 8006250:	e7e3      	b.n	800621a <_malloc_r+0x1e>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	1b5b      	subs	r3, r3, r5
 8006256:	d417      	bmi.n	8006288 <_malloc_r+0x8c>
 8006258:	2b0b      	cmp	r3, #11
 800625a:	d903      	bls.n	8006264 <_malloc_r+0x68>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	441c      	add	r4, r3
 8006260:	6025      	str	r5, [r4, #0]
 8006262:	e004      	b.n	800626e <_malloc_r+0x72>
 8006264:	6863      	ldr	r3, [r4, #4]
 8006266:	42a2      	cmp	r2, r4
 8006268:	bf0c      	ite	eq
 800626a:	600b      	streq	r3, [r1, #0]
 800626c:	6053      	strne	r3, [r2, #4]
 800626e:	4630      	mov	r0, r6
 8006270:	f000 fd80 	bl	8006d74 <__malloc_unlock>
 8006274:	f104 000b 	add.w	r0, r4, #11
 8006278:	1d23      	adds	r3, r4, #4
 800627a:	f020 0007 	bic.w	r0, r0, #7
 800627e:	1ac2      	subs	r2, r0, r3
 8006280:	d0cc      	beq.n	800621c <_malloc_r+0x20>
 8006282:	1a1b      	subs	r3, r3, r0
 8006284:	50a3      	str	r3, [r4, r2]
 8006286:	e7c9      	b.n	800621c <_malloc_r+0x20>
 8006288:	4622      	mov	r2, r4
 800628a:	6864      	ldr	r4, [r4, #4]
 800628c:	e7cc      	b.n	8006228 <_malloc_r+0x2c>
 800628e:	1cc4      	adds	r4, r0, #3
 8006290:	f024 0403 	bic.w	r4, r4, #3
 8006294:	42a0      	cmp	r0, r4
 8006296:	d0e3      	beq.n	8006260 <_malloc_r+0x64>
 8006298:	1a21      	subs	r1, r4, r0
 800629a:	4630      	mov	r0, r6
 800629c:	f000 faf6 	bl	800688c <_sbrk_r>
 80062a0:	3001      	adds	r0, #1
 80062a2:	d1dd      	bne.n	8006260 <_malloc_r+0x64>
 80062a4:	e7cf      	b.n	8006246 <_malloc_r+0x4a>
 80062a6:	bf00      	nop
 80062a8:	24000098 	.word	0x24000098
 80062ac:	2400009c 	.word	0x2400009c

080062b0 <__sfputc_r>:
 80062b0:	6893      	ldr	r3, [r2, #8]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	b410      	push	{r4}
 80062b8:	6093      	str	r3, [r2, #8]
 80062ba:	da08      	bge.n	80062ce <__sfputc_r+0x1e>
 80062bc:	6994      	ldr	r4, [r2, #24]
 80062be:	42a3      	cmp	r3, r4
 80062c0:	db01      	blt.n	80062c6 <__sfputc_r+0x16>
 80062c2:	290a      	cmp	r1, #10
 80062c4:	d103      	bne.n	80062ce <__sfputc_r+0x1e>
 80062c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ca:	f000 bb33 	b.w	8006934 <__swbuf_r>
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	1c58      	adds	r0, r3, #1
 80062d2:	6010      	str	r0, [r2, #0]
 80062d4:	7019      	strb	r1, [r3, #0]
 80062d6:	4608      	mov	r0, r1
 80062d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062dc:	4770      	bx	lr

080062de <__sfputs_r>:
 80062de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e0:	4606      	mov	r6, r0
 80062e2:	460f      	mov	r7, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	18d5      	adds	r5, r2, r3
 80062e8:	42ac      	cmp	r4, r5
 80062ea:	d101      	bne.n	80062f0 <__sfputs_r+0x12>
 80062ec:	2000      	movs	r0, #0
 80062ee:	e007      	b.n	8006300 <__sfputs_r+0x22>
 80062f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f4:	463a      	mov	r2, r7
 80062f6:	4630      	mov	r0, r6
 80062f8:	f7ff ffda 	bl	80062b0 <__sfputc_r>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d1f3      	bne.n	80062e8 <__sfputs_r+0xa>
 8006300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006304 <_vfiprintf_r>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	460d      	mov	r5, r1
 800630a:	b09d      	sub	sp, #116	; 0x74
 800630c:	4614      	mov	r4, r2
 800630e:	4698      	mov	r8, r3
 8006310:	4606      	mov	r6, r0
 8006312:	b118      	cbz	r0, 800631c <_vfiprintf_r+0x18>
 8006314:	6983      	ldr	r3, [r0, #24]
 8006316:	b90b      	cbnz	r3, 800631c <_vfiprintf_r+0x18>
 8006318:	f7ff fed0 	bl	80060bc <__sinit>
 800631c:	4b89      	ldr	r3, [pc, #548]	; (8006544 <_vfiprintf_r+0x240>)
 800631e:	429d      	cmp	r5, r3
 8006320:	d11b      	bne.n	800635a <_vfiprintf_r+0x56>
 8006322:	6875      	ldr	r5, [r6, #4]
 8006324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006326:	07d9      	lsls	r1, r3, #31
 8006328:	d405      	bmi.n	8006336 <_vfiprintf_r+0x32>
 800632a:	89ab      	ldrh	r3, [r5, #12]
 800632c:	059a      	lsls	r2, r3, #22
 800632e:	d402      	bmi.n	8006336 <_vfiprintf_r+0x32>
 8006330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006332:	f7ff ff61 	bl	80061f8 <__retarget_lock_acquire_recursive>
 8006336:	89ab      	ldrh	r3, [r5, #12]
 8006338:	071b      	lsls	r3, r3, #28
 800633a:	d501      	bpl.n	8006340 <_vfiprintf_r+0x3c>
 800633c:	692b      	ldr	r3, [r5, #16]
 800633e:	b9eb      	cbnz	r3, 800637c <_vfiprintf_r+0x78>
 8006340:	4629      	mov	r1, r5
 8006342:	4630      	mov	r0, r6
 8006344:	f000 fb5a 	bl	80069fc <__swsetup_r>
 8006348:	b1c0      	cbz	r0, 800637c <_vfiprintf_r+0x78>
 800634a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800634c:	07dc      	lsls	r4, r3, #31
 800634e:	d50e      	bpl.n	800636e <_vfiprintf_r+0x6a>
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	b01d      	add	sp, #116	; 0x74
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	4b7b      	ldr	r3, [pc, #492]	; (8006548 <_vfiprintf_r+0x244>)
 800635c:	429d      	cmp	r5, r3
 800635e:	d101      	bne.n	8006364 <_vfiprintf_r+0x60>
 8006360:	68b5      	ldr	r5, [r6, #8]
 8006362:	e7df      	b.n	8006324 <_vfiprintf_r+0x20>
 8006364:	4b79      	ldr	r3, [pc, #484]	; (800654c <_vfiprintf_r+0x248>)
 8006366:	429d      	cmp	r5, r3
 8006368:	bf08      	it	eq
 800636a:	68f5      	ldreq	r5, [r6, #12]
 800636c:	e7da      	b.n	8006324 <_vfiprintf_r+0x20>
 800636e:	89ab      	ldrh	r3, [r5, #12]
 8006370:	0598      	lsls	r0, r3, #22
 8006372:	d4ed      	bmi.n	8006350 <_vfiprintf_r+0x4c>
 8006374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006376:	f7ff ff40 	bl	80061fa <__retarget_lock_release_recursive>
 800637a:	e7e9      	b.n	8006350 <_vfiprintf_r+0x4c>
 800637c:	2300      	movs	r3, #0
 800637e:	9309      	str	r3, [sp, #36]	; 0x24
 8006380:	2320      	movs	r3, #32
 8006382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006386:	f8cd 800c 	str.w	r8, [sp, #12]
 800638a:	2330      	movs	r3, #48	; 0x30
 800638c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006550 <_vfiprintf_r+0x24c>
 8006390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006394:	f04f 0901 	mov.w	r9, #1
 8006398:	4623      	mov	r3, r4
 800639a:	469a      	mov	sl, r3
 800639c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063a0:	b10a      	cbz	r2, 80063a6 <_vfiprintf_r+0xa2>
 80063a2:	2a25      	cmp	r2, #37	; 0x25
 80063a4:	d1f9      	bne.n	800639a <_vfiprintf_r+0x96>
 80063a6:	ebba 0b04 	subs.w	fp, sl, r4
 80063aa:	d00b      	beq.n	80063c4 <_vfiprintf_r+0xc0>
 80063ac:	465b      	mov	r3, fp
 80063ae:	4622      	mov	r2, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	4630      	mov	r0, r6
 80063b4:	f7ff ff93 	bl	80062de <__sfputs_r>
 80063b8:	3001      	adds	r0, #1
 80063ba:	f000 80aa 	beq.w	8006512 <_vfiprintf_r+0x20e>
 80063be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c0:	445a      	add	r2, fp
 80063c2:	9209      	str	r2, [sp, #36]	; 0x24
 80063c4:	f89a 3000 	ldrb.w	r3, [sl]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80a2 	beq.w	8006512 <_vfiprintf_r+0x20e>
 80063ce:	2300      	movs	r3, #0
 80063d0:	f04f 32ff 	mov.w	r2, #4294967295
 80063d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d8:	f10a 0a01 	add.w	sl, sl, #1
 80063dc:	9304      	str	r3, [sp, #16]
 80063de:	9307      	str	r3, [sp, #28]
 80063e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063e4:	931a      	str	r3, [sp, #104]	; 0x68
 80063e6:	4654      	mov	r4, sl
 80063e8:	2205      	movs	r2, #5
 80063ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ee:	4858      	ldr	r0, [pc, #352]	; (8006550 <_vfiprintf_r+0x24c>)
 80063f0:	f7f9 ff76 	bl	80002e0 <memchr>
 80063f4:	9a04      	ldr	r2, [sp, #16]
 80063f6:	b9d8      	cbnz	r0, 8006430 <_vfiprintf_r+0x12c>
 80063f8:	06d1      	lsls	r1, r2, #27
 80063fa:	bf44      	itt	mi
 80063fc:	2320      	movmi	r3, #32
 80063fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006402:	0713      	lsls	r3, r2, #28
 8006404:	bf44      	itt	mi
 8006406:	232b      	movmi	r3, #43	; 0x2b
 8006408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800640c:	f89a 3000 	ldrb.w	r3, [sl]
 8006410:	2b2a      	cmp	r3, #42	; 0x2a
 8006412:	d015      	beq.n	8006440 <_vfiprintf_r+0x13c>
 8006414:	9a07      	ldr	r2, [sp, #28]
 8006416:	4654      	mov	r4, sl
 8006418:	2000      	movs	r0, #0
 800641a:	f04f 0c0a 	mov.w	ip, #10
 800641e:	4621      	mov	r1, r4
 8006420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006424:	3b30      	subs	r3, #48	; 0x30
 8006426:	2b09      	cmp	r3, #9
 8006428:	d94e      	bls.n	80064c8 <_vfiprintf_r+0x1c4>
 800642a:	b1b0      	cbz	r0, 800645a <_vfiprintf_r+0x156>
 800642c:	9207      	str	r2, [sp, #28]
 800642e:	e014      	b.n	800645a <_vfiprintf_r+0x156>
 8006430:	eba0 0308 	sub.w	r3, r0, r8
 8006434:	fa09 f303 	lsl.w	r3, r9, r3
 8006438:	4313      	orrs	r3, r2
 800643a:	9304      	str	r3, [sp, #16]
 800643c:	46a2      	mov	sl, r4
 800643e:	e7d2      	b.n	80063e6 <_vfiprintf_r+0xe2>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	1d19      	adds	r1, r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	9103      	str	r1, [sp, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	bfbb      	ittet	lt
 800644c:	425b      	neglt	r3, r3
 800644e:	f042 0202 	orrlt.w	r2, r2, #2
 8006452:	9307      	strge	r3, [sp, #28]
 8006454:	9307      	strlt	r3, [sp, #28]
 8006456:	bfb8      	it	lt
 8006458:	9204      	strlt	r2, [sp, #16]
 800645a:	7823      	ldrb	r3, [r4, #0]
 800645c:	2b2e      	cmp	r3, #46	; 0x2e
 800645e:	d10c      	bne.n	800647a <_vfiprintf_r+0x176>
 8006460:	7863      	ldrb	r3, [r4, #1]
 8006462:	2b2a      	cmp	r3, #42	; 0x2a
 8006464:	d135      	bne.n	80064d2 <_vfiprintf_r+0x1ce>
 8006466:	9b03      	ldr	r3, [sp, #12]
 8006468:	1d1a      	adds	r2, r3, #4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	9203      	str	r2, [sp, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	bfb8      	it	lt
 8006472:	f04f 33ff 	movlt.w	r3, #4294967295
 8006476:	3402      	adds	r4, #2
 8006478:	9305      	str	r3, [sp, #20]
 800647a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006560 <_vfiprintf_r+0x25c>
 800647e:	7821      	ldrb	r1, [r4, #0]
 8006480:	2203      	movs	r2, #3
 8006482:	4650      	mov	r0, sl
 8006484:	f7f9 ff2c 	bl	80002e0 <memchr>
 8006488:	b140      	cbz	r0, 800649c <_vfiprintf_r+0x198>
 800648a:	2340      	movs	r3, #64	; 0x40
 800648c:	eba0 000a 	sub.w	r0, r0, sl
 8006490:	fa03 f000 	lsl.w	r0, r3, r0
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	4303      	orrs	r3, r0
 8006498:	3401      	adds	r4, #1
 800649a:	9304      	str	r3, [sp, #16]
 800649c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a0:	482c      	ldr	r0, [pc, #176]	; (8006554 <_vfiprintf_r+0x250>)
 80064a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064a6:	2206      	movs	r2, #6
 80064a8:	f7f9 ff1a 	bl	80002e0 <memchr>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d03f      	beq.n	8006530 <_vfiprintf_r+0x22c>
 80064b0:	4b29      	ldr	r3, [pc, #164]	; (8006558 <_vfiprintf_r+0x254>)
 80064b2:	bb1b      	cbnz	r3, 80064fc <_vfiprintf_r+0x1f8>
 80064b4:	9b03      	ldr	r3, [sp, #12]
 80064b6:	3307      	adds	r3, #7
 80064b8:	f023 0307 	bic.w	r3, r3, #7
 80064bc:	3308      	adds	r3, #8
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c2:	443b      	add	r3, r7
 80064c4:	9309      	str	r3, [sp, #36]	; 0x24
 80064c6:	e767      	b.n	8006398 <_vfiprintf_r+0x94>
 80064c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064cc:	460c      	mov	r4, r1
 80064ce:	2001      	movs	r0, #1
 80064d0:	e7a5      	b.n	800641e <_vfiprintf_r+0x11a>
 80064d2:	2300      	movs	r3, #0
 80064d4:	3401      	adds	r4, #1
 80064d6:	9305      	str	r3, [sp, #20]
 80064d8:	4619      	mov	r1, r3
 80064da:	f04f 0c0a 	mov.w	ip, #10
 80064de:	4620      	mov	r0, r4
 80064e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064e4:	3a30      	subs	r2, #48	; 0x30
 80064e6:	2a09      	cmp	r2, #9
 80064e8:	d903      	bls.n	80064f2 <_vfiprintf_r+0x1ee>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0c5      	beq.n	800647a <_vfiprintf_r+0x176>
 80064ee:	9105      	str	r1, [sp, #20]
 80064f0:	e7c3      	b.n	800647a <_vfiprintf_r+0x176>
 80064f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064f6:	4604      	mov	r4, r0
 80064f8:	2301      	movs	r3, #1
 80064fa:	e7f0      	b.n	80064de <_vfiprintf_r+0x1da>
 80064fc:	ab03      	add	r3, sp, #12
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	462a      	mov	r2, r5
 8006502:	4b16      	ldr	r3, [pc, #88]	; (800655c <_vfiprintf_r+0x258>)
 8006504:	a904      	add	r1, sp, #16
 8006506:	4630      	mov	r0, r6
 8006508:	f3af 8000 	nop.w
 800650c:	4607      	mov	r7, r0
 800650e:	1c78      	adds	r0, r7, #1
 8006510:	d1d6      	bne.n	80064c0 <_vfiprintf_r+0x1bc>
 8006512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006514:	07d9      	lsls	r1, r3, #31
 8006516:	d405      	bmi.n	8006524 <_vfiprintf_r+0x220>
 8006518:	89ab      	ldrh	r3, [r5, #12]
 800651a:	059a      	lsls	r2, r3, #22
 800651c:	d402      	bmi.n	8006524 <_vfiprintf_r+0x220>
 800651e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006520:	f7ff fe6b 	bl	80061fa <__retarget_lock_release_recursive>
 8006524:	89ab      	ldrh	r3, [r5, #12]
 8006526:	065b      	lsls	r3, r3, #25
 8006528:	f53f af12 	bmi.w	8006350 <_vfiprintf_r+0x4c>
 800652c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800652e:	e711      	b.n	8006354 <_vfiprintf_r+0x50>
 8006530:	ab03      	add	r3, sp, #12
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	462a      	mov	r2, r5
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <_vfiprintf_r+0x258>)
 8006538:	a904      	add	r1, sp, #16
 800653a:	4630      	mov	r0, r6
 800653c:	f000 f880 	bl	8006640 <_printf_i>
 8006540:	e7e4      	b.n	800650c <_vfiprintf_r+0x208>
 8006542:	bf00      	nop
 8006544:	08006f10 	.word	0x08006f10
 8006548:	08006f30 	.word	0x08006f30
 800654c:	08006ef0 	.word	0x08006ef0
 8006550:	08006f50 	.word	0x08006f50
 8006554:	08006f5a 	.word	0x08006f5a
 8006558:	00000000 	.word	0x00000000
 800655c:	080062df 	.word	0x080062df
 8006560:	08006f56 	.word	0x08006f56

08006564 <_printf_common>:
 8006564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	4616      	mov	r6, r2
 800656a:	4699      	mov	r9, r3
 800656c:	688a      	ldr	r2, [r1, #8]
 800656e:	690b      	ldr	r3, [r1, #16]
 8006570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006574:	4293      	cmp	r3, r2
 8006576:	bfb8      	it	lt
 8006578:	4613      	movlt	r3, r2
 800657a:	6033      	str	r3, [r6, #0]
 800657c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006580:	4607      	mov	r7, r0
 8006582:	460c      	mov	r4, r1
 8006584:	b10a      	cbz	r2, 800658a <_printf_common+0x26>
 8006586:	3301      	adds	r3, #1
 8006588:	6033      	str	r3, [r6, #0]
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	0699      	lsls	r1, r3, #26
 800658e:	bf42      	ittt	mi
 8006590:	6833      	ldrmi	r3, [r6, #0]
 8006592:	3302      	addmi	r3, #2
 8006594:	6033      	strmi	r3, [r6, #0]
 8006596:	6825      	ldr	r5, [r4, #0]
 8006598:	f015 0506 	ands.w	r5, r5, #6
 800659c:	d106      	bne.n	80065ac <_printf_common+0x48>
 800659e:	f104 0a19 	add.w	sl, r4, #25
 80065a2:	68e3      	ldr	r3, [r4, #12]
 80065a4:	6832      	ldr	r2, [r6, #0]
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	42ab      	cmp	r3, r5
 80065aa:	dc26      	bgt.n	80065fa <_printf_common+0x96>
 80065ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065b0:	1e13      	subs	r3, r2, #0
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	bf18      	it	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	0692      	lsls	r2, r2, #26
 80065ba:	d42b      	bmi.n	8006614 <_printf_common+0xb0>
 80065bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065c0:	4649      	mov	r1, r9
 80065c2:	4638      	mov	r0, r7
 80065c4:	47c0      	blx	r8
 80065c6:	3001      	adds	r0, #1
 80065c8:	d01e      	beq.n	8006608 <_printf_common+0xa4>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	68e5      	ldr	r5, [r4, #12]
 80065ce:	6832      	ldr	r2, [r6, #0]
 80065d0:	f003 0306 	and.w	r3, r3, #6
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	bf08      	it	eq
 80065d8:	1aad      	subeq	r5, r5, r2
 80065da:	68a3      	ldr	r3, [r4, #8]
 80065dc:	6922      	ldr	r2, [r4, #16]
 80065de:	bf0c      	ite	eq
 80065e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065e4:	2500      	movne	r5, #0
 80065e6:	4293      	cmp	r3, r2
 80065e8:	bfc4      	itt	gt
 80065ea:	1a9b      	subgt	r3, r3, r2
 80065ec:	18ed      	addgt	r5, r5, r3
 80065ee:	2600      	movs	r6, #0
 80065f0:	341a      	adds	r4, #26
 80065f2:	42b5      	cmp	r5, r6
 80065f4:	d11a      	bne.n	800662c <_printf_common+0xc8>
 80065f6:	2000      	movs	r0, #0
 80065f8:	e008      	b.n	800660c <_printf_common+0xa8>
 80065fa:	2301      	movs	r3, #1
 80065fc:	4652      	mov	r2, sl
 80065fe:	4649      	mov	r1, r9
 8006600:	4638      	mov	r0, r7
 8006602:	47c0      	blx	r8
 8006604:	3001      	adds	r0, #1
 8006606:	d103      	bne.n	8006610 <_printf_common+0xac>
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006610:	3501      	adds	r5, #1
 8006612:	e7c6      	b.n	80065a2 <_printf_common+0x3e>
 8006614:	18e1      	adds	r1, r4, r3
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	2030      	movs	r0, #48	; 0x30
 800661a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800661e:	4422      	add	r2, r4
 8006620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006628:	3302      	adds	r3, #2
 800662a:	e7c7      	b.n	80065bc <_printf_common+0x58>
 800662c:	2301      	movs	r3, #1
 800662e:	4622      	mov	r2, r4
 8006630:	4649      	mov	r1, r9
 8006632:	4638      	mov	r0, r7
 8006634:	47c0      	blx	r8
 8006636:	3001      	adds	r0, #1
 8006638:	d0e6      	beq.n	8006608 <_printf_common+0xa4>
 800663a:	3601      	adds	r6, #1
 800663c:	e7d9      	b.n	80065f2 <_printf_common+0x8e>
	...

08006640 <_printf_i>:
 8006640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	460c      	mov	r4, r1
 8006646:	4691      	mov	r9, r2
 8006648:	7e27      	ldrb	r7, [r4, #24]
 800664a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800664c:	2f78      	cmp	r7, #120	; 0x78
 800664e:	4680      	mov	r8, r0
 8006650:	469a      	mov	sl, r3
 8006652:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006656:	d807      	bhi.n	8006668 <_printf_i+0x28>
 8006658:	2f62      	cmp	r7, #98	; 0x62
 800665a:	d80a      	bhi.n	8006672 <_printf_i+0x32>
 800665c:	2f00      	cmp	r7, #0
 800665e:	f000 80d8 	beq.w	8006812 <_printf_i+0x1d2>
 8006662:	2f58      	cmp	r7, #88	; 0x58
 8006664:	f000 80a3 	beq.w	80067ae <_printf_i+0x16e>
 8006668:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800666c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006670:	e03a      	b.n	80066e8 <_printf_i+0xa8>
 8006672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006676:	2b15      	cmp	r3, #21
 8006678:	d8f6      	bhi.n	8006668 <_printf_i+0x28>
 800667a:	a001      	add	r0, pc, #4	; (adr r0, 8006680 <_printf_i+0x40>)
 800667c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006680:	080066d9 	.word	0x080066d9
 8006684:	080066ed 	.word	0x080066ed
 8006688:	08006669 	.word	0x08006669
 800668c:	08006669 	.word	0x08006669
 8006690:	08006669 	.word	0x08006669
 8006694:	08006669 	.word	0x08006669
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006669 	.word	0x08006669
 80066a0:	08006669 	.word	0x08006669
 80066a4:	08006669 	.word	0x08006669
 80066a8:	08006669 	.word	0x08006669
 80066ac:	080067f9 	.word	0x080067f9
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	080067db 	.word	0x080067db
 80066b8:	08006669 	.word	0x08006669
 80066bc:	08006669 	.word	0x08006669
 80066c0:	0800681b 	.word	0x0800681b
 80066c4:	08006669 	.word	0x08006669
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006669 	.word	0x08006669
 80066d0:	08006669 	.word	0x08006669
 80066d4:	080067e3 	.word	0x080067e3
 80066d8:	680b      	ldr	r3, [r1, #0]
 80066da:	1d1a      	adds	r2, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	600a      	str	r2, [r1, #0]
 80066e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80066e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0a3      	b.n	8006834 <_printf_i+0x1f4>
 80066ec:	6825      	ldr	r5, [r4, #0]
 80066ee:	6808      	ldr	r0, [r1, #0]
 80066f0:	062e      	lsls	r6, r5, #24
 80066f2:	f100 0304 	add.w	r3, r0, #4
 80066f6:	d50a      	bpl.n	800670e <_printf_i+0xce>
 80066f8:	6805      	ldr	r5, [r0, #0]
 80066fa:	600b      	str	r3, [r1, #0]
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	da03      	bge.n	8006708 <_printf_i+0xc8>
 8006700:	232d      	movs	r3, #45	; 0x2d
 8006702:	426d      	negs	r5, r5
 8006704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006708:	485e      	ldr	r0, [pc, #376]	; (8006884 <_printf_i+0x244>)
 800670a:	230a      	movs	r3, #10
 800670c:	e019      	b.n	8006742 <_printf_i+0x102>
 800670e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006712:	6805      	ldr	r5, [r0, #0]
 8006714:	600b      	str	r3, [r1, #0]
 8006716:	bf18      	it	ne
 8006718:	b22d      	sxthne	r5, r5
 800671a:	e7ef      	b.n	80066fc <_printf_i+0xbc>
 800671c:	680b      	ldr	r3, [r1, #0]
 800671e:	6825      	ldr	r5, [r4, #0]
 8006720:	1d18      	adds	r0, r3, #4
 8006722:	6008      	str	r0, [r1, #0]
 8006724:	0628      	lsls	r0, r5, #24
 8006726:	d501      	bpl.n	800672c <_printf_i+0xec>
 8006728:	681d      	ldr	r5, [r3, #0]
 800672a:	e002      	b.n	8006732 <_printf_i+0xf2>
 800672c:	0669      	lsls	r1, r5, #25
 800672e:	d5fb      	bpl.n	8006728 <_printf_i+0xe8>
 8006730:	881d      	ldrh	r5, [r3, #0]
 8006732:	4854      	ldr	r0, [pc, #336]	; (8006884 <_printf_i+0x244>)
 8006734:	2f6f      	cmp	r7, #111	; 0x6f
 8006736:	bf0c      	ite	eq
 8006738:	2308      	moveq	r3, #8
 800673a:	230a      	movne	r3, #10
 800673c:	2100      	movs	r1, #0
 800673e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006742:	6866      	ldr	r6, [r4, #4]
 8006744:	60a6      	str	r6, [r4, #8]
 8006746:	2e00      	cmp	r6, #0
 8006748:	bfa2      	ittt	ge
 800674a:	6821      	ldrge	r1, [r4, #0]
 800674c:	f021 0104 	bicge.w	r1, r1, #4
 8006750:	6021      	strge	r1, [r4, #0]
 8006752:	b90d      	cbnz	r5, 8006758 <_printf_i+0x118>
 8006754:	2e00      	cmp	r6, #0
 8006756:	d04d      	beq.n	80067f4 <_printf_i+0x1b4>
 8006758:	4616      	mov	r6, r2
 800675a:	fbb5 f1f3 	udiv	r1, r5, r3
 800675e:	fb03 5711 	mls	r7, r3, r1, r5
 8006762:	5dc7      	ldrb	r7, [r0, r7]
 8006764:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006768:	462f      	mov	r7, r5
 800676a:	42bb      	cmp	r3, r7
 800676c:	460d      	mov	r5, r1
 800676e:	d9f4      	bls.n	800675a <_printf_i+0x11a>
 8006770:	2b08      	cmp	r3, #8
 8006772:	d10b      	bne.n	800678c <_printf_i+0x14c>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	07df      	lsls	r7, r3, #31
 8006778:	d508      	bpl.n	800678c <_printf_i+0x14c>
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	6861      	ldr	r1, [r4, #4]
 800677e:	4299      	cmp	r1, r3
 8006780:	bfde      	ittt	le
 8006782:	2330      	movle	r3, #48	; 0x30
 8006784:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006788:	f106 36ff 	addle.w	r6, r6, #4294967295
 800678c:	1b92      	subs	r2, r2, r6
 800678e:	6122      	str	r2, [r4, #16]
 8006790:	f8cd a000 	str.w	sl, [sp]
 8006794:	464b      	mov	r3, r9
 8006796:	aa03      	add	r2, sp, #12
 8006798:	4621      	mov	r1, r4
 800679a:	4640      	mov	r0, r8
 800679c:	f7ff fee2 	bl	8006564 <_printf_common>
 80067a0:	3001      	adds	r0, #1
 80067a2:	d14c      	bne.n	800683e <_printf_i+0x1fe>
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295
 80067a8:	b004      	add	sp, #16
 80067aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ae:	4835      	ldr	r0, [pc, #212]	; (8006884 <_printf_i+0x244>)
 80067b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	680e      	ldr	r6, [r1, #0]
 80067b8:	061f      	lsls	r7, r3, #24
 80067ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80067be:	600e      	str	r6, [r1, #0]
 80067c0:	d514      	bpl.n	80067ec <_printf_i+0x1ac>
 80067c2:	07d9      	lsls	r1, r3, #31
 80067c4:	bf44      	itt	mi
 80067c6:	f043 0320 	orrmi.w	r3, r3, #32
 80067ca:	6023      	strmi	r3, [r4, #0]
 80067cc:	b91d      	cbnz	r5, 80067d6 <_printf_i+0x196>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f023 0320 	bic.w	r3, r3, #32
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	2310      	movs	r3, #16
 80067d8:	e7b0      	b.n	800673c <_printf_i+0xfc>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f043 0320 	orr.w	r3, r3, #32
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	2378      	movs	r3, #120	; 0x78
 80067e4:	4828      	ldr	r0, [pc, #160]	; (8006888 <_printf_i+0x248>)
 80067e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ea:	e7e3      	b.n	80067b4 <_printf_i+0x174>
 80067ec:	065e      	lsls	r6, r3, #25
 80067ee:	bf48      	it	mi
 80067f0:	b2ad      	uxthmi	r5, r5
 80067f2:	e7e6      	b.n	80067c2 <_printf_i+0x182>
 80067f4:	4616      	mov	r6, r2
 80067f6:	e7bb      	b.n	8006770 <_printf_i+0x130>
 80067f8:	680b      	ldr	r3, [r1, #0]
 80067fa:	6826      	ldr	r6, [r4, #0]
 80067fc:	6960      	ldr	r0, [r4, #20]
 80067fe:	1d1d      	adds	r5, r3, #4
 8006800:	600d      	str	r5, [r1, #0]
 8006802:	0635      	lsls	r5, r6, #24
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	d501      	bpl.n	800680c <_printf_i+0x1cc>
 8006808:	6018      	str	r0, [r3, #0]
 800680a:	e002      	b.n	8006812 <_printf_i+0x1d2>
 800680c:	0671      	lsls	r1, r6, #25
 800680e:	d5fb      	bpl.n	8006808 <_printf_i+0x1c8>
 8006810:	8018      	strh	r0, [r3, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	4616      	mov	r6, r2
 8006818:	e7ba      	b.n	8006790 <_printf_i+0x150>
 800681a:	680b      	ldr	r3, [r1, #0]
 800681c:	1d1a      	adds	r2, r3, #4
 800681e:	600a      	str	r2, [r1, #0]
 8006820:	681e      	ldr	r6, [r3, #0]
 8006822:	6862      	ldr	r2, [r4, #4]
 8006824:	2100      	movs	r1, #0
 8006826:	4630      	mov	r0, r6
 8006828:	f7f9 fd5a 	bl	80002e0 <memchr>
 800682c:	b108      	cbz	r0, 8006832 <_printf_i+0x1f2>
 800682e:	1b80      	subs	r0, r0, r6
 8006830:	6060      	str	r0, [r4, #4]
 8006832:	6863      	ldr	r3, [r4, #4]
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	2300      	movs	r3, #0
 8006838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800683c:	e7a8      	b.n	8006790 <_printf_i+0x150>
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	4632      	mov	r2, r6
 8006842:	4649      	mov	r1, r9
 8006844:	4640      	mov	r0, r8
 8006846:	47d0      	blx	sl
 8006848:	3001      	adds	r0, #1
 800684a:	d0ab      	beq.n	80067a4 <_printf_i+0x164>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	079b      	lsls	r3, r3, #30
 8006850:	d413      	bmi.n	800687a <_printf_i+0x23a>
 8006852:	68e0      	ldr	r0, [r4, #12]
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	4298      	cmp	r0, r3
 8006858:	bfb8      	it	lt
 800685a:	4618      	movlt	r0, r3
 800685c:	e7a4      	b.n	80067a8 <_printf_i+0x168>
 800685e:	2301      	movs	r3, #1
 8006860:	4632      	mov	r2, r6
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	47d0      	blx	sl
 8006868:	3001      	adds	r0, #1
 800686a:	d09b      	beq.n	80067a4 <_printf_i+0x164>
 800686c:	3501      	adds	r5, #1
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	9903      	ldr	r1, [sp, #12]
 8006872:	1a5b      	subs	r3, r3, r1
 8006874:	42ab      	cmp	r3, r5
 8006876:	dcf2      	bgt.n	800685e <_printf_i+0x21e>
 8006878:	e7eb      	b.n	8006852 <_printf_i+0x212>
 800687a:	2500      	movs	r5, #0
 800687c:	f104 0619 	add.w	r6, r4, #25
 8006880:	e7f5      	b.n	800686e <_printf_i+0x22e>
 8006882:	bf00      	nop
 8006884:	08006f61 	.word	0x08006f61
 8006888:	08006f72 	.word	0x08006f72

0800688c <_sbrk_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d06      	ldr	r5, [pc, #24]	; (80068a8 <_sbrk_r+0x1c>)
 8006890:	2300      	movs	r3, #0
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	f7fa fa48 	bl	8000d2c <_sbrk>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d102      	bne.n	80068a6 <_sbrk_r+0x1a>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	b103      	cbz	r3, 80068a6 <_sbrk_r+0x1a>
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	24000140 	.word	0x24000140

080068ac <__sread>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	460c      	mov	r4, r1
 80068b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b4:	f000 fab4 	bl	8006e20 <_read_r>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	bfab      	itete	ge
 80068bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068be:	89a3      	ldrhlt	r3, [r4, #12]
 80068c0:	181b      	addge	r3, r3, r0
 80068c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068c6:	bfac      	ite	ge
 80068c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ca:	81a3      	strhlt	r3, [r4, #12]
 80068cc:	bd10      	pop	{r4, pc}

080068ce <__swrite>:
 80068ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d2:	461f      	mov	r7, r3
 80068d4:	898b      	ldrh	r3, [r1, #12]
 80068d6:	05db      	lsls	r3, r3, #23
 80068d8:	4605      	mov	r5, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	4616      	mov	r6, r2
 80068de:	d505      	bpl.n	80068ec <__swrite+0x1e>
 80068e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e4:	2302      	movs	r3, #2
 80068e6:	2200      	movs	r2, #0
 80068e8:	f000 f9c8 	bl	8006c7c <_lseek_r>
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	4632      	mov	r2, r6
 80068fa:	463b      	mov	r3, r7
 80068fc:	4628      	mov	r0, r5
 80068fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006902:	f000 b869 	b.w	80069d8 <_write_r>

08006906 <__sseek>:
 8006906:	b510      	push	{r4, lr}
 8006908:	460c      	mov	r4, r1
 800690a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690e:	f000 f9b5 	bl	8006c7c <_lseek_r>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	bf15      	itete	ne
 8006918:	6560      	strne	r0, [r4, #84]	; 0x54
 800691a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800691e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006922:	81a3      	strheq	r3, [r4, #12]
 8006924:	bf18      	it	ne
 8006926:	81a3      	strhne	r3, [r4, #12]
 8006928:	bd10      	pop	{r4, pc}

0800692a <__sclose>:
 800692a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800692e:	f000 b8d3 	b.w	8006ad8 <_close_r>
	...

08006934 <__swbuf_r>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	460e      	mov	r6, r1
 8006938:	4614      	mov	r4, r2
 800693a:	4605      	mov	r5, r0
 800693c:	b118      	cbz	r0, 8006946 <__swbuf_r+0x12>
 800693e:	6983      	ldr	r3, [r0, #24]
 8006940:	b90b      	cbnz	r3, 8006946 <__swbuf_r+0x12>
 8006942:	f7ff fbbb 	bl	80060bc <__sinit>
 8006946:	4b21      	ldr	r3, [pc, #132]	; (80069cc <__swbuf_r+0x98>)
 8006948:	429c      	cmp	r4, r3
 800694a:	d12b      	bne.n	80069a4 <__swbuf_r+0x70>
 800694c:	686c      	ldr	r4, [r5, #4]
 800694e:	69a3      	ldr	r3, [r4, #24]
 8006950:	60a3      	str	r3, [r4, #8]
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	071a      	lsls	r2, r3, #28
 8006956:	d52f      	bpl.n	80069b8 <__swbuf_r+0x84>
 8006958:	6923      	ldr	r3, [r4, #16]
 800695a:	b36b      	cbz	r3, 80069b8 <__swbuf_r+0x84>
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	6820      	ldr	r0, [r4, #0]
 8006960:	1ac0      	subs	r0, r0, r3
 8006962:	6963      	ldr	r3, [r4, #20]
 8006964:	b2f6      	uxtb	r6, r6
 8006966:	4283      	cmp	r3, r0
 8006968:	4637      	mov	r7, r6
 800696a:	dc04      	bgt.n	8006976 <__swbuf_r+0x42>
 800696c:	4621      	mov	r1, r4
 800696e:	4628      	mov	r0, r5
 8006970:	f000 f948 	bl	8006c04 <_fflush_r>
 8006974:	bb30      	cbnz	r0, 80069c4 <__swbuf_r+0x90>
 8006976:	68a3      	ldr	r3, [r4, #8]
 8006978:	3b01      	subs	r3, #1
 800697a:	60a3      	str	r3, [r4, #8]
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	6022      	str	r2, [r4, #0]
 8006982:	701e      	strb	r6, [r3, #0]
 8006984:	6963      	ldr	r3, [r4, #20]
 8006986:	3001      	adds	r0, #1
 8006988:	4283      	cmp	r3, r0
 800698a:	d004      	beq.n	8006996 <__swbuf_r+0x62>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	07db      	lsls	r3, r3, #31
 8006990:	d506      	bpl.n	80069a0 <__swbuf_r+0x6c>
 8006992:	2e0a      	cmp	r6, #10
 8006994:	d104      	bne.n	80069a0 <__swbuf_r+0x6c>
 8006996:	4621      	mov	r1, r4
 8006998:	4628      	mov	r0, r5
 800699a:	f000 f933 	bl	8006c04 <_fflush_r>
 800699e:	b988      	cbnz	r0, 80069c4 <__swbuf_r+0x90>
 80069a0:	4638      	mov	r0, r7
 80069a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <__swbuf_r+0x9c>)
 80069a6:	429c      	cmp	r4, r3
 80069a8:	d101      	bne.n	80069ae <__swbuf_r+0x7a>
 80069aa:	68ac      	ldr	r4, [r5, #8]
 80069ac:	e7cf      	b.n	800694e <__swbuf_r+0x1a>
 80069ae:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <__swbuf_r+0xa0>)
 80069b0:	429c      	cmp	r4, r3
 80069b2:	bf08      	it	eq
 80069b4:	68ec      	ldreq	r4, [r5, #12]
 80069b6:	e7ca      	b.n	800694e <__swbuf_r+0x1a>
 80069b8:	4621      	mov	r1, r4
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 f81e 	bl	80069fc <__swsetup_r>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d0cb      	beq.n	800695c <__swbuf_r+0x28>
 80069c4:	f04f 37ff 	mov.w	r7, #4294967295
 80069c8:	e7ea      	b.n	80069a0 <__swbuf_r+0x6c>
 80069ca:	bf00      	nop
 80069cc:	08006f10 	.word	0x08006f10
 80069d0:	08006f30 	.word	0x08006f30
 80069d4:	08006ef0 	.word	0x08006ef0

080069d8 <_write_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d07      	ldr	r5, [pc, #28]	; (80069f8 <_write_r+0x20>)
 80069dc:	4604      	mov	r4, r0
 80069de:	4608      	mov	r0, r1
 80069e0:	4611      	mov	r1, r2
 80069e2:	2200      	movs	r2, #0
 80069e4:	602a      	str	r2, [r5, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f7fa f94f 	bl	8000c8a <_write>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_write_r+0x1e>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_write_r+0x1e>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	24000140 	.word	0x24000140

080069fc <__swsetup_r>:
 80069fc:	4b32      	ldr	r3, [pc, #200]	; (8006ac8 <__swsetup_r+0xcc>)
 80069fe:	b570      	push	{r4, r5, r6, lr}
 8006a00:	681d      	ldr	r5, [r3, #0]
 8006a02:	4606      	mov	r6, r0
 8006a04:	460c      	mov	r4, r1
 8006a06:	b125      	cbz	r5, 8006a12 <__swsetup_r+0x16>
 8006a08:	69ab      	ldr	r3, [r5, #24]
 8006a0a:	b913      	cbnz	r3, 8006a12 <__swsetup_r+0x16>
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f7ff fb55 	bl	80060bc <__sinit>
 8006a12:	4b2e      	ldr	r3, [pc, #184]	; (8006acc <__swsetup_r+0xd0>)
 8006a14:	429c      	cmp	r4, r3
 8006a16:	d10f      	bne.n	8006a38 <__swsetup_r+0x3c>
 8006a18:	686c      	ldr	r4, [r5, #4]
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a20:	0719      	lsls	r1, r3, #28
 8006a22:	d42c      	bmi.n	8006a7e <__swsetup_r+0x82>
 8006a24:	06dd      	lsls	r5, r3, #27
 8006a26:	d411      	bmi.n	8006a4c <__swsetup_r+0x50>
 8006a28:	2309      	movs	r3, #9
 8006a2a:	6033      	str	r3, [r6, #0]
 8006a2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a30:	81a3      	strh	r3, [r4, #12]
 8006a32:	f04f 30ff 	mov.w	r0, #4294967295
 8006a36:	e03e      	b.n	8006ab6 <__swsetup_r+0xba>
 8006a38:	4b25      	ldr	r3, [pc, #148]	; (8006ad0 <__swsetup_r+0xd4>)
 8006a3a:	429c      	cmp	r4, r3
 8006a3c:	d101      	bne.n	8006a42 <__swsetup_r+0x46>
 8006a3e:	68ac      	ldr	r4, [r5, #8]
 8006a40:	e7eb      	b.n	8006a1a <__swsetup_r+0x1e>
 8006a42:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <__swsetup_r+0xd8>)
 8006a44:	429c      	cmp	r4, r3
 8006a46:	bf08      	it	eq
 8006a48:	68ec      	ldreq	r4, [r5, #12]
 8006a4a:	e7e6      	b.n	8006a1a <__swsetup_r+0x1e>
 8006a4c:	0758      	lsls	r0, r3, #29
 8006a4e:	d512      	bpl.n	8006a76 <__swsetup_r+0x7a>
 8006a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a52:	b141      	cbz	r1, 8006a66 <__swsetup_r+0x6a>
 8006a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a58:	4299      	cmp	r1, r3
 8006a5a:	d002      	beq.n	8006a62 <__swsetup_r+0x66>
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f000 f98f 	bl	8006d80 <_free_r>
 8006a62:	2300      	movs	r3, #0
 8006a64:	6363      	str	r3, [r4, #52]	; 0x34
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f043 0308 	orr.w	r3, r3, #8
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	b94b      	cbnz	r3, 8006a96 <__swsetup_r+0x9a>
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8c:	d003      	beq.n	8006a96 <__swsetup_r+0x9a>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4630      	mov	r0, r6
 8006a92:	f000 f929 	bl	8006ce8 <__smakebuf_r>
 8006a96:	89a0      	ldrh	r0, [r4, #12]
 8006a98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a9c:	f010 0301 	ands.w	r3, r0, #1
 8006aa0:	d00a      	beq.n	8006ab8 <__swsetup_r+0xbc>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60a3      	str	r3, [r4, #8]
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	425b      	negs	r3, r3
 8006aaa:	61a3      	str	r3, [r4, #24]
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	b943      	cbnz	r3, 8006ac2 <__swsetup_r+0xc6>
 8006ab0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ab4:	d1ba      	bne.n	8006a2c <__swsetup_r+0x30>
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	0781      	lsls	r1, r0, #30
 8006aba:	bf58      	it	pl
 8006abc:	6963      	ldrpl	r3, [r4, #20]
 8006abe:	60a3      	str	r3, [r4, #8]
 8006ac0:	e7f4      	b.n	8006aac <__swsetup_r+0xb0>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	e7f7      	b.n	8006ab6 <__swsetup_r+0xba>
 8006ac6:	bf00      	nop
 8006ac8:	24000014 	.word	0x24000014
 8006acc:	08006f10 	.word	0x08006f10
 8006ad0:	08006f30 	.word	0x08006f30
 8006ad4:	08006ef0 	.word	0x08006ef0

08006ad8 <_close_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d06      	ldr	r5, [pc, #24]	; (8006af4 <_close_r+0x1c>)
 8006adc:	2300      	movs	r3, #0
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7fa f8ed 	bl	8000cc2 <_close>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d102      	bne.n	8006af2 <_close_r+0x1a>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b103      	cbz	r3, 8006af2 <_close_r+0x1a>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	24000140 	.word	0x24000140

08006af8 <__sflush_r>:
 8006af8:	898a      	ldrh	r2, [r1, #12]
 8006afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afe:	4605      	mov	r5, r0
 8006b00:	0710      	lsls	r0, r2, #28
 8006b02:	460c      	mov	r4, r1
 8006b04:	d458      	bmi.n	8006bb8 <__sflush_r+0xc0>
 8006b06:	684b      	ldr	r3, [r1, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	dc05      	bgt.n	8006b18 <__sflush_r+0x20>
 8006b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dc02      	bgt.n	8006b18 <__sflush_r+0x20>
 8006b12:	2000      	movs	r0, #0
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	d0f9      	beq.n	8006b12 <__sflush_r+0x1a>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b24:	682f      	ldr	r7, [r5, #0]
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	d032      	beq.n	8006b90 <__sflush_r+0x98>
 8006b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	075a      	lsls	r2, r3, #29
 8006b30:	d505      	bpl.n	8006b3e <__sflush_r+0x46>
 8006b32:	6863      	ldr	r3, [r4, #4]
 8006b34:	1ac0      	subs	r0, r0, r3
 8006b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b38:	b10b      	cbz	r3, 8006b3e <__sflush_r+0x46>
 8006b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b3c:	1ac0      	subs	r0, r0, r3
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4602      	mov	r2, r0
 8006b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b44:	6a21      	ldr	r1, [r4, #32]
 8006b46:	4628      	mov	r0, r5
 8006b48:	47b0      	blx	r6
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	d106      	bne.n	8006b5e <__sflush_r+0x66>
 8006b50:	6829      	ldr	r1, [r5, #0]
 8006b52:	291d      	cmp	r1, #29
 8006b54:	d82c      	bhi.n	8006bb0 <__sflush_r+0xb8>
 8006b56:	4a2a      	ldr	r2, [pc, #168]	; (8006c00 <__sflush_r+0x108>)
 8006b58:	40ca      	lsrs	r2, r1
 8006b5a:	07d6      	lsls	r6, r2, #31
 8006b5c:	d528      	bpl.n	8006bb0 <__sflush_r+0xb8>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	6062      	str	r2, [r4, #4]
 8006b62:	04d9      	lsls	r1, r3, #19
 8006b64:	6922      	ldr	r2, [r4, #16]
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	d504      	bpl.n	8006b74 <__sflush_r+0x7c>
 8006b6a:	1c42      	adds	r2, r0, #1
 8006b6c:	d101      	bne.n	8006b72 <__sflush_r+0x7a>
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	b903      	cbnz	r3, 8006b74 <__sflush_r+0x7c>
 8006b72:	6560      	str	r0, [r4, #84]	; 0x54
 8006b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b76:	602f      	str	r7, [r5, #0]
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	d0ca      	beq.n	8006b12 <__sflush_r+0x1a>
 8006b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b80:	4299      	cmp	r1, r3
 8006b82:	d002      	beq.n	8006b8a <__sflush_r+0x92>
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 f8fb 	bl	8006d80 <_free_r>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b8e:	e7c1      	b.n	8006b14 <__sflush_r+0x1c>
 8006b90:	6a21      	ldr	r1, [r4, #32]
 8006b92:	2301      	movs	r3, #1
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b0      	blx	r6
 8006b98:	1c41      	adds	r1, r0, #1
 8006b9a:	d1c7      	bne.n	8006b2c <__sflush_r+0x34>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0c4      	beq.n	8006b2c <__sflush_r+0x34>
 8006ba2:	2b1d      	cmp	r3, #29
 8006ba4:	d001      	beq.n	8006baa <__sflush_r+0xb2>
 8006ba6:	2b16      	cmp	r3, #22
 8006ba8:	d101      	bne.n	8006bae <__sflush_r+0xb6>
 8006baa:	602f      	str	r7, [r5, #0]
 8006bac:	e7b1      	b.n	8006b12 <__sflush_r+0x1a>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	e7ad      	b.n	8006b14 <__sflush_r+0x1c>
 8006bb8:	690f      	ldr	r7, [r1, #16]
 8006bba:	2f00      	cmp	r7, #0
 8006bbc:	d0a9      	beq.n	8006b12 <__sflush_r+0x1a>
 8006bbe:	0793      	lsls	r3, r2, #30
 8006bc0:	680e      	ldr	r6, [r1, #0]
 8006bc2:	bf08      	it	eq
 8006bc4:	694b      	ldreq	r3, [r1, #20]
 8006bc6:	600f      	str	r7, [r1, #0]
 8006bc8:	bf18      	it	ne
 8006bca:	2300      	movne	r3, #0
 8006bcc:	eba6 0807 	sub.w	r8, r6, r7
 8006bd0:	608b      	str	r3, [r1, #8]
 8006bd2:	f1b8 0f00 	cmp.w	r8, #0
 8006bd6:	dd9c      	ble.n	8006b12 <__sflush_r+0x1a>
 8006bd8:	6a21      	ldr	r1, [r4, #32]
 8006bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bdc:	4643      	mov	r3, r8
 8006bde:	463a      	mov	r2, r7
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b0      	blx	r6
 8006be4:	2800      	cmp	r0, #0
 8006be6:	dc06      	bgt.n	8006bf6 <__sflush_r+0xfe>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	e78e      	b.n	8006b14 <__sflush_r+0x1c>
 8006bf6:	4407      	add	r7, r0
 8006bf8:	eba8 0800 	sub.w	r8, r8, r0
 8006bfc:	e7e9      	b.n	8006bd2 <__sflush_r+0xda>
 8006bfe:	bf00      	nop
 8006c00:	20400001 	.word	0x20400001

08006c04 <_fflush_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	690b      	ldr	r3, [r1, #16]
 8006c08:	4605      	mov	r5, r0
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	b913      	cbnz	r3, 8006c14 <_fflush_r+0x10>
 8006c0e:	2500      	movs	r5, #0
 8006c10:	4628      	mov	r0, r5
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	b118      	cbz	r0, 8006c1e <_fflush_r+0x1a>
 8006c16:	6983      	ldr	r3, [r0, #24]
 8006c18:	b90b      	cbnz	r3, 8006c1e <_fflush_r+0x1a>
 8006c1a:	f7ff fa4f 	bl	80060bc <__sinit>
 8006c1e:	4b14      	ldr	r3, [pc, #80]	; (8006c70 <_fflush_r+0x6c>)
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d11b      	bne.n	8006c5c <_fflush_r+0x58>
 8006c24:	686c      	ldr	r4, [r5, #4]
 8006c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0ef      	beq.n	8006c0e <_fflush_r+0xa>
 8006c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c30:	07d0      	lsls	r0, r2, #31
 8006c32:	d404      	bmi.n	8006c3e <_fflush_r+0x3a>
 8006c34:	0599      	lsls	r1, r3, #22
 8006c36:	d402      	bmi.n	8006c3e <_fflush_r+0x3a>
 8006c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c3a:	f7ff fadd 	bl	80061f8 <__retarget_lock_acquire_recursive>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	4621      	mov	r1, r4
 8006c42:	f7ff ff59 	bl	8006af8 <__sflush_r>
 8006c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c48:	07da      	lsls	r2, r3, #31
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	d4e0      	bmi.n	8006c10 <_fflush_r+0xc>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	059b      	lsls	r3, r3, #22
 8006c52:	d4dd      	bmi.n	8006c10 <_fflush_r+0xc>
 8006c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c56:	f7ff fad0 	bl	80061fa <__retarget_lock_release_recursive>
 8006c5a:	e7d9      	b.n	8006c10 <_fflush_r+0xc>
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <_fflush_r+0x70>)
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d101      	bne.n	8006c66 <_fflush_r+0x62>
 8006c62:	68ac      	ldr	r4, [r5, #8]
 8006c64:	e7df      	b.n	8006c26 <_fflush_r+0x22>
 8006c66:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <_fflush_r+0x74>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	bf08      	it	eq
 8006c6c:	68ec      	ldreq	r4, [r5, #12]
 8006c6e:	e7da      	b.n	8006c26 <_fflush_r+0x22>
 8006c70:	08006f10 	.word	0x08006f10
 8006c74:	08006f30 	.word	0x08006f30
 8006c78:	08006ef0 	.word	0x08006ef0

08006c7c <_lseek_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d07      	ldr	r5, [pc, #28]	; (8006c9c <_lseek_r+0x20>)
 8006c80:	4604      	mov	r4, r0
 8006c82:	4608      	mov	r0, r1
 8006c84:	4611      	mov	r1, r2
 8006c86:	2200      	movs	r2, #0
 8006c88:	602a      	str	r2, [r5, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f7fa f840 	bl	8000d10 <_lseek>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_lseek_r+0x1e>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_lseek_r+0x1e>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	24000140 	.word	0x24000140

08006ca0 <__swhatbuf_r>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	460e      	mov	r6, r1
 8006ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	b096      	sub	sp, #88	; 0x58
 8006cac:	4614      	mov	r4, r2
 8006cae:	461d      	mov	r5, r3
 8006cb0:	da07      	bge.n	8006cc2 <__swhatbuf_r+0x22>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	602b      	str	r3, [r5, #0]
 8006cb6:	89b3      	ldrh	r3, [r6, #12]
 8006cb8:	061a      	lsls	r2, r3, #24
 8006cba:	d410      	bmi.n	8006cde <__swhatbuf_r+0x3e>
 8006cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cc0:	e00e      	b.n	8006ce0 <__swhatbuf_r+0x40>
 8006cc2:	466a      	mov	r2, sp
 8006cc4:	f000 f8be 	bl	8006e44 <_fstat_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	dbf2      	blt.n	8006cb2 <__swhatbuf_r+0x12>
 8006ccc:	9a01      	ldr	r2, [sp, #4]
 8006cce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cd6:	425a      	negs	r2, r3
 8006cd8:	415a      	adcs	r2, r3
 8006cda:	602a      	str	r2, [r5, #0]
 8006cdc:	e7ee      	b.n	8006cbc <__swhatbuf_r+0x1c>
 8006cde:	2340      	movs	r3, #64	; 0x40
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	6023      	str	r3, [r4, #0]
 8006ce4:	b016      	add	sp, #88	; 0x58
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}

08006ce8 <__smakebuf_r>:
 8006ce8:	898b      	ldrh	r3, [r1, #12]
 8006cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cec:	079d      	lsls	r5, r3, #30
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	d507      	bpl.n	8006d04 <__smakebuf_r+0x1c>
 8006cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	6163      	str	r3, [r4, #20]
 8006d00:	b002      	add	sp, #8
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	ab01      	add	r3, sp, #4
 8006d06:	466a      	mov	r2, sp
 8006d08:	f7ff ffca 	bl	8006ca0 <__swhatbuf_r>
 8006d0c:	9900      	ldr	r1, [sp, #0]
 8006d0e:	4605      	mov	r5, r0
 8006d10:	4630      	mov	r0, r6
 8006d12:	f7ff fa73 	bl	80061fc <_malloc_r>
 8006d16:	b948      	cbnz	r0, 8006d2c <__smakebuf_r+0x44>
 8006d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d1c:	059a      	lsls	r2, r3, #22
 8006d1e:	d4ef      	bmi.n	8006d00 <__smakebuf_r+0x18>
 8006d20:	f023 0303 	bic.w	r3, r3, #3
 8006d24:	f043 0302 	orr.w	r3, r3, #2
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	e7e3      	b.n	8006cf4 <__smakebuf_r+0xc>
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <__smakebuf_r+0x7c>)
 8006d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	6020      	str	r0, [r4, #0]
 8006d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	9b00      	ldr	r3, [sp, #0]
 8006d3c:	6163      	str	r3, [r4, #20]
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	6120      	str	r0, [r4, #16]
 8006d42:	b15b      	cbz	r3, 8006d5c <__smakebuf_r+0x74>
 8006d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f000 f88d 	bl	8006e68 <_isatty_r>
 8006d4e:	b128      	cbz	r0, 8006d5c <__smakebuf_r+0x74>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	f043 0301 	orr.w	r3, r3, #1
 8006d5a:	81a3      	strh	r3, [r4, #12]
 8006d5c:	89a0      	ldrh	r0, [r4, #12]
 8006d5e:	4305      	orrs	r5, r0
 8006d60:	81a5      	strh	r5, [r4, #12]
 8006d62:	e7cd      	b.n	8006d00 <__smakebuf_r+0x18>
 8006d64:	08006055 	.word	0x08006055

08006d68 <__malloc_lock>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__malloc_lock+0x8>)
 8006d6a:	f7ff ba45 	b.w	80061f8 <__retarget_lock_acquire_recursive>
 8006d6e:	bf00      	nop
 8006d70:	24000138 	.word	0x24000138

08006d74 <__malloc_unlock>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__malloc_unlock+0x8>)
 8006d76:	f7ff ba40 	b.w	80061fa <__retarget_lock_release_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	24000138 	.word	0x24000138

08006d80 <_free_r>:
 8006d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d82:	2900      	cmp	r1, #0
 8006d84:	d048      	beq.n	8006e18 <_free_r+0x98>
 8006d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8a:	9001      	str	r0, [sp, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d92:	bfb8      	it	lt
 8006d94:	18e4      	addlt	r4, r4, r3
 8006d96:	f7ff ffe7 	bl	8006d68 <__malloc_lock>
 8006d9a:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <_free_r+0x9c>)
 8006d9c:	9801      	ldr	r0, [sp, #4]
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	4615      	mov	r5, r2
 8006da2:	b933      	cbnz	r3, 8006db2 <_free_r+0x32>
 8006da4:	6063      	str	r3, [r4, #4]
 8006da6:	6014      	str	r4, [r2, #0]
 8006da8:	b003      	add	sp, #12
 8006daa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dae:	f7ff bfe1 	b.w	8006d74 <__malloc_unlock>
 8006db2:	42a3      	cmp	r3, r4
 8006db4:	d90b      	bls.n	8006dce <_free_r+0x4e>
 8006db6:	6821      	ldr	r1, [r4, #0]
 8006db8:	1862      	adds	r2, r4, r1
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	bf04      	itt	eq
 8006dbe:	681a      	ldreq	r2, [r3, #0]
 8006dc0:	685b      	ldreq	r3, [r3, #4]
 8006dc2:	6063      	str	r3, [r4, #4]
 8006dc4:	bf04      	itt	eq
 8006dc6:	1852      	addeq	r2, r2, r1
 8006dc8:	6022      	streq	r2, [r4, #0]
 8006dca:	602c      	str	r4, [r5, #0]
 8006dcc:	e7ec      	b.n	8006da8 <_free_r+0x28>
 8006dce:	461a      	mov	r2, r3
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	b10b      	cbz	r3, 8006dd8 <_free_r+0x58>
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	d9fa      	bls.n	8006dce <_free_r+0x4e>
 8006dd8:	6811      	ldr	r1, [r2, #0]
 8006dda:	1855      	adds	r5, r2, r1
 8006ddc:	42a5      	cmp	r5, r4
 8006dde:	d10b      	bne.n	8006df8 <_free_r+0x78>
 8006de0:	6824      	ldr	r4, [r4, #0]
 8006de2:	4421      	add	r1, r4
 8006de4:	1854      	adds	r4, r2, r1
 8006de6:	42a3      	cmp	r3, r4
 8006de8:	6011      	str	r1, [r2, #0]
 8006dea:	d1dd      	bne.n	8006da8 <_free_r+0x28>
 8006dec:	681c      	ldr	r4, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	6053      	str	r3, [r2, #4]
 8006df2:	4421      	add	r1, r4
 8006df4:	6011      	str	r1, [r2, #0]
 8006df6:	e7d7      	b.n	8006da8 <_free_r+0x28>
 8006df8:	d902      	bls.n	8006e00 <_free_r+0x80>
 8006dfa:	230c      	movs	r3, #12
 8006dfc:	6003      	str	r3, [r0, #0]
 8006dfe:	e7d3      	b.n	8006da8 <_free_r+0x28>
 8006e00:	6825      	ldr	r5, [r4, #0]
 8006e02:	1961      	adds	r1, r4, r5
 8006e04:	428b      	cmp	r3, r1
 8006e06:	bf04      	itt	eq
 8006e08:	6819      	ldreq	r1, [r3, #0]
 8006e0a:	685b      	ldreq	r3, [r3, #4]
 8006e0c:	6063      	str	r3, [r4, #4]
 8006e0e:	bf04      	itt	eq
 8006e10:	1949      	addeq	r1, r1, r5
 8006e12:	6021      	streq	r1, [r4, #0]
 8006e14:	6054      	str	r4, [r2, #4]
 8006e16:	e7c7      	b.n	8006da8 <_free_r+0x28>
 8006e18:	b003      	add	sp, #12
 8006e1a:	bd30      	pop	{r4, r5, pc}
 8006e1c:	24000098 	.word	0x24000098

08006e20 <_read_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	; (8006e40 <_read_r+0x20>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7f9 ff0e 	bl	8000c50 <_read>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_read_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_read_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	24000140 	.word	0x24000140

08006e44 <_fstat_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d07      	ldr	r5, [pc, #28]	; (8006e64 <_fstat_r+0x20>)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	4611      	mov	r1, r2
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	f7f9 ff42 	bl	8000cda <_fstat>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	d102      	bne.n	8006e60 <_fstat_r+0x1c>
 8006e5a:	682b      	ldr	r3, [r5, #0]
 8006e5c:	b103      	cbz	r3, 8006e60 <_fstat_r+0x1c>
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	bd38      	pop	{r3, r4, r5, pc}
 8006e62:	bf00      	nop
 8006e64:	24000140 	.word	0x24000140

08006e68 <_isatty_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d06      	ldr	r5, [pc, #24]	; (8006e84 <_isatty_r+0x1c>)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	f7f9 ff41 	bl	8000cfa <_isatty>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_isatty_r+0x1a>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_isatty_r+0x1a>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	24000140 	.word	0x24000140

08006e88 <_init>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr

08006e94 <_fini>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	bf00      	nop
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr
