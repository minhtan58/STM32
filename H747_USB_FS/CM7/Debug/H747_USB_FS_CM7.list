
H747_USB_FS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaf4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  0800ed94  0800ed94  0001ed94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f8d4  0800f8d4  0001f8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f8dc  0800f8dc  0001f8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f8e0  0800f8e0  0001f8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  0800f8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002dd8  20000098  0800f978  00020098  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20002e70  0800f978  00022e70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035ba3  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005b8c  00000000  00000000  00055c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000015e8  00000000  00000000  0005b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001420  00000000  00000000  0005cde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000447b6  00000000  00000000  0005e200  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001a3c2  00000000  00000000  000a29b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0019971b  00000000  00000000  000bcd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00256493  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cc8  00000000  00000000  00256510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000098 	.word	0x20000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ed7c 	.word	0x0800ed7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	0800ed7c 	.word	0x0800ed7c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b972 	b.w	80006ac <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	4688      	mov	r8, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14b      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4615      	mov	r5, r2
 80003f2:	d967      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0720 	rsb	r7, r2, #32
 80003fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000402:	fa20 f707 	lsr.w	r7, r0, r7
 8000406:	4095      	lsls	r5, r2
 8000408:	ea47 0803 	orr.w	r8, r7, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbb8 f7fe 	udiv	r7, r8, lr
 8000418:	fa1f fc85 	uxth.w	ip, r5
 800041c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	fb07 f10c 	mul.w	r1, r7, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000432:	f080 811b 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8118 	bls.w	800066c <__udivmoddi4+0x28c>
 800043c:	3f02      	subs	r7, #2
 800043e:	442b      	add	r3, r5
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	45a4      	cmp	ip, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8107 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000462:	45a4      	cmp	ip, r4
 8000464:	f240 8104 	bls.w	8000670 <__udivmoddi4+0x290>
 8000468:	3802      	subs	r0, #2
 800046a:	442c      	add	r4, r5
 800046c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000470:	eba4 040c 	sub.w	r4, r4, ip
 8000474:	2700      	movs	r7, #0
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0xbe>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80eb 	beq.w	8000666 <__udivmoddi4+0x286>
 8000490:	2700      	movs	r7, #0
 8000492:	e9c6 0100 	strd	r0, r1, [r6]
 8000496:	4638      	mov	r0, r7
 8000498:	4639      	mov	r1, r7
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f783 	clz	r7, r3
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d147      	bne.n	8000536 <__udivmoddi4+0x156>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0xd0>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80fa 	bhi.w	80006a4 <__udivmoddi4+0x2c4>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0303 	sbc.w	r3, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	d0e0      	beq.n	8000480 <__udivmoddi4+0xa0>
 80004be:	e9c6 4800 	strd	r4, r8, [r6]
 80004c2:	e7dd      	b.n	8000480 <__udivmoddi4+0xa0>
 80004c4:	b902      	cbnz	r2, 80004c8 <__udivmoddi4+0xe8>
 80004c6:	deff      	udf	#255	; 0xff
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 808f 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d2:	1b49      	subs	r1, r1, r5
 80004d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d8:	fa1f f885 	uxth.w	r8, r5
 80004dc:	2701      	movs	r7, #1
 80004de:	fbb1 fcfe 	udiv	ip, r1, lr
 80004e2:	0c23      	lsrs	r3, r4, #16
 80004e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb08 f10c 	mul.w	r1, r8, ip
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	f200 80cd 	bhi.w	800069c <__udivmoddi4+0x2bc>
 8000502:	4684      	mov	ip, r0
 8000504:	1a59      	subs	r1, r3, r1
 8000506:	b2a3      	uxth	r3, r4
 8000508:	fbb1 f0fe 	udiv	r0, r1, lr
 800050c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000510:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000514:	fb08 f800 	mul.w	r8, r8, r0
 8000518:	45a0      	cmp	r8, r4
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x14c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x14a>
 8000524:	45a0      	cmp	r8, r4
 8000526:	f200 80b6 	bhi.w	8000696 <__udivmoddi4+0x2b6>
 800052a:	4618      	mov	r0, r3
 800052c:	eba4 0408 	sub.w	r4, r4, r8
 8000530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000534:	e79f      	b.n	8000476 <__udivmoddi4+0x96>
 8000536:	f1c7 0c20 	rsb	ip, r7, #32
 800053a:	40bb      	lsls	r3, r7
 800053c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000540:	ea4e 0e03 	orr.w	lr, lr, r3
 8000544:	fa01 f407 	lsl.w	r4, r1, r7
 8000548:	fa20 f50c 	lsr.w	r5, r0, ip
 800054c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000550:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000554:	4325      	orrs	r5, r4
 8000556:	fbb3 f9f8 	udiv	r9, r3, r8
 800055a:	0c2c      	lsrs	r4, r5, #16
 800055c:	fb08 3319 	mls	r3, r8, r9, r3
 8000560:	fa1f fa8e 	uxth.w	sl, lr
 8000564:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000568:	fb09 f40a 	mul.w	r4, r9, sl
 800056c:	429c      	cmp	r4, r3
 800056e:	fa02 f207 	lsl.w	r2, r2, r7
 8000572:	fa00 f107 	lsl.w	r1, r0, r7
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1e 0303 	adds.w	r3, lr, r3
 800057c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000580:	f080 8087 	bcs.w	8000692 <__udivmoddi4+0x2b2>
 8000584:	429c      	cmp	r4, r3
 8000586:	f240 8084 	bls.w	8000692 <__udivmoddi4+0x2b2>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4473      	add	r3, lr
 8000590:	1b1b      	subs	r3, r3, r4
 8000592:	b2ad      	uxth	r5, r5
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005a4:	45a2      	cmp	sl, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1e 0404 	adds.w	r4, lr, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	d26b      	bcs.n	800068a <__udivmoddi4+0x2aa>
 80005b2:	45a2      	cmp	sl, r4
 80005b4:	d969      	bls.n	800068a <__udivmoddi4+0x2aa>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4474      	add	r4, lr
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	fba0 8902 	umull	r8, r9, r0, r2
 80005c2:	eba4 040a 	sub.w	r4, r4, sl
 80005c6:	454c      	cmp	r4, r9
 80005c8:	46c2      	mov	sl, r8
 80005ca:	464b      	mov	r3, r9
 80005cc:	d354      	bcc.n	8000678 <__udivmoddi4+0x298>
 80005ce:	d051      	beq.n	8000674 <__udivmoddi4+0x294>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2c8>
 80005d4:	ebb1 050a 	subs.w	r5, r1, sl
 80005d8:	eb64 0403 	sbc.w	r4, r4, r3
 80005dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005e0:	40fd      	lsrs	r5, r7
 80005e2:	40fc      	lsrs	r4, r7
 80005e4:	ea4c 0505 	orr.w	r5, ip, r5
 80005e8:	e9c6 5400 	strd	r5, r4, [r6]
 80005ec:	2700      	movs	r7, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa0>
 80005f0:	f1c2 0320 	rsb	r3, r2, #32
 80005f4:	fa20 f703 	lsr.w	r7, r0, r3
 80005f8:	4095      	lsls	r5, r2
 80005fa:	fa01 f002 	lsl.w	r0, r1, r2
 80005fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000602:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000606:	4338      	orrs	r0, r7
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	fbb3 f7fe 	udiv	r7, r3, lr
 800060e:	fa1f f885 	uxth.w	r8, r5
 8000612:	fb0e 3317 	mls	r3, lr, r7, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb07 f308 	mul.w	r3, r7, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x256>
 8000626:	1869      	adds	r1, r5, r1
 8000628:	f107 3cff 	add.w	ip, r7, #4294967295
 800062c:	d22f      	bcs.n	800068e <__udivmoddi4+0x2ae>
 800062e:	428b      	cmp	r3, r1
 8000630:	d92d      	bls.n	800068e <__udivmoddi4+0x2ae>
 8000632:	3f02      	subs	r7, #2
 8000634:	4429      	add	r1, r5
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	b281      	uxth	r1, r0
 800063a:	fbb3 f0fe 	udiv	r0, r3, lr
 800063e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000642:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000646:	fb00 f308 	mul.w	r3, r0, r8
 800064a:	428b      	cmp	r3, r1
 800064c:	d907      	bls.n	800065e <__udivmoddi4+0x27e>
 800064e:	1869      	adds	r1, r5, r1
 8000650:	f100 3cff 	add.w	ip, r0, #4294967295
 8000654:	d217      	bcs.n	8000686 <__udivmoddi4+0x2a6>
 8000656:	428b      	cmp	r3, r1
 8000658:	d915      	bls.n	8000686 <__udivmoddi4+0x2a6>
 800065a:	3802      	subs	r0, #2
 800065c:	4429      	add	r1, r5
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000664:	e73b      	b.n	80004de <__udivmoddi4+0xfe>
 8000666:	4637      	mov	r7, r6
 8000668:	4630      	mov	r0, r6
 800066a:	e709      	b.n	8000480 <__udivmoddi4+0xa0>
 800066c:	4607      	mov	r7, r0
 800066e:	e6e7      	b.n	8000440 <__udivmoddi4+0x60>
 8000670:	4618      	mov	r0, r3
 8000672:	e6fb      	b.n	800046c <__udivmoddi4+0x8c>
 8000674:	4541      	cmp	r1, r8
 8000676:	d2ab      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 8000678:	ebb8 0a02 	subs.w	sl, r8, r2
 800067c:	eb69 020e 	sbc.w	r2, r9, lr
 8000680:	3801      	subs	r0, #1
 8000682:	4613      	mov	r3, r2
 8000684:	e7a4      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000686:	4660      	mov	r0, ip
 8000688:	e7e9      	b.n	800065e <__udivmoddi4+0x27e>
 800068a:	4618      	mov	r0, r3
 800068c:	e795      	b.n	80005ba <__udivmoddi4+0x1da>
 800068e:	4667      	mov	r7, ip
 8000690:	e7d1      	b.n	8000636 <__udivmoddi4+0x256>
 8000692:	4681      	mov	r9, r0
 8000694:	e77c      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000696:	3802      	subs	r0, #2
 8000698:	442c      	add	r4, r5
 800069a:	e747      	b.n	800052c <__udivmoddi4+0x14c>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	442b      	add	r3, r5
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x124>
 80006a4:	4638      	mov	r0, r7
 80006a6:	e708      	b.n	80004ba <__udivmoddi4+0xda>
 80006a8:	4637      	mov	r7, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa0>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b4:	4b3f      	ldr	r3, [pc, #252]	; (80007b4 <SystemInit+0x104>)
 80006b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ba:	4a3e      	ldr	r2, [pc, #248]	; (80007b4 <SystemInit+0x104>)
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <SystemInit+0x104>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	4a3a      	ldr	r2, [pc, #232]	; (80007b4 <SystemInit+0x104>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d0:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <SystemInit+0x108>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	2b06      	cmp	r3, #6
 80006da:	d807      	bhi.n	80006ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006dc:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <SystemInit+0x108>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f023 030f 	bic.w	r3, r3, #15
 80006e4:	4a34      	ldr	r2, [pc, #208]	; (80007b8 <SystemInit+0x108>)
 80006e6:	f043 0307 	orr.w	r3, r3, #7
 80006ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ec:	4b33      	ldr	r3, [pc, #204]	; (80007bc <SystemInit+0x10c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a32      	ldr	r2, [pc, #200]	; (80007bc <SystemInit+0x10c>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <SystemInit+0x10c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fe:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <SystemInit+0x10c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	492e      	ldr	r1, [pc, #184]	; (80007bc <SystemInit+0x10c>)
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <SystemInit+0x110>)
 8000706:	4013      	ands	r3, r2
 8000708:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <SystemInit+0x108>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	2b07      	cmp	r3, #7
 8000714:	d907      	bls.n	8000726 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <SystemInit+0x108>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f023 030f 	bic.w	r3, r3, #15
 800071e:	4a26      	ldr	r2, [pc, #152]	; (80007b8 <SystemInit+0x108>)
 8000720:	f043 0307 	orr.w	r3, r3, #7
 8000724:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemInit+0x10c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <SystemInit+0x10c>)
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <SystemInit+0x114>)
 800073c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemInit+0x10c>)
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemInit+0x118>)
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <SystemInit+0x10c>)
 8000746:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemInit+0x11c>)
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <SystemInit+0x10c>)
 800074c:	2200      	movs	r2, #0
 800074e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <SystemInit+0x10c>)
 8000752:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <SystemInit+0x11c>)
 8000754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <SystemInit+0x10c>)
 8000758:	2200      	movs	r2, #0
 800075a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <SystemInit+0x10c>)
 800075e:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <SystemInit+0x11c>)
 8000760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <SystemInit+0x10c>)
 8000764:	2200      	movs	r2, #0
 8000766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <SystemInit+0x10c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <SystemInit+0x10c>)
 800076e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x10c>)
 8000776:	2200      	movs	r2, #0
 8000778:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <SystemInit+0x120>)
 800077c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <SystemInit+0x120>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <SystemInit+0x124>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <SystemInit+0x128>)
 800078c:	4013      	ands	r3, r2
 800078e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000792:	d202      	bcs.n	800079a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <SystemInit+0x12c>)
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <SystemInit+0x130>)
 800079c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SystemInit+0x104>)
 80007a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	52002000 	.word	0x52002000
 80007bc:	58024400 	.word	0x58024400
 80007c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c4:	02020200 	.word	0x02020200
 80007c8:	01ff0000 	.word	0x01ff0000
 80007cc:	01010280 	.word	0x01010280
 80007d0:	580000c0 	.word	0x580000c0
 80007d4:	5c001000 	.word	0x5c001000
 80007d8:	ffff0000 	.word	0xffff0000
 80007dc:	51008108 	.word	0x51008108
 80007e0:	52004000 	.word	0x52004000

080007e4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff fd81 	bl	80002f4 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <Send_Uart+0x28>)
 80007fe:	f004 f9f7 	bl	8004bf0 <HAL_UART_Transmit>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000069c 	.word	0x2000069c

08000810 <Mount_USB>:



void Mount_USB (void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	490a      	ldr	r1, [pc, #40]	; (8000840 <Mount_USB+0x30>)
 8000818:	480a      	ldr	r0, [pc, #40]	; (8000844 <Mount_USB+0x34>)
 800081a:	f00c f91f 	bl	800ca5c <f_mount>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <Mount_USB+0x38>)
 8000824:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <Mount_USB+0x38>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d003      	beq.n	8000836 <Mount_USB+0x26>
 800082e:	4807      	ldr	r0, [pc, #28]	; (800084c <Mount_USB+0x3c>)
 8000830:	f7ff ffd8 	bl	80007e4 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000834:	e002      	b.n	800083c <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <Mount_USB+0x40>)
 8000838:	f7ff ffd4 	bl	80007e4 <Send_Uart>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000730 	.word	0x20000730
 8000844:	20001790 	.word	0x20001790
 8000848:	20000574 	.word	0x20000574
 800084c:	0800ed94 	.word	0x0800ed94
 8000850:	0800edb4 	.word	0x0800edb4

08000854 <Unmount_USB>:

void Unmount_USB (void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000858:	2201      	movs	r2, #1
 800085a:	490a      	ldr	r1, [pc, #40]	; (8000884 <Unmount_USB+0x30>)
 800085c:	2000      	movs	r0, #0
 800085e:	f00c f8fd 	bl	800ca5c <f_mount>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <Unmount_USB+0x34>)
 8000868:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <Unmount_USB+0x34>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d103      	bne.n	800087a <Unmount_USB+0x26>
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <Unmount_USB+0x38>)
 8000874:	f7ff ffb6 	bl	80007e4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000878:	e002      	b.n	8000880 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <Unmount_USB+0x3c>)
 800087c:	f7ff ffb2 	bl	80007e4 <Send_Uart>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000730 	.word	0x20000730
 8000888:	20000574 	.word	0x20000574
 800088c:	0800edd4 	.word	0x0800edd4
 8000890:	0800edf8 	.word	0x0800edf8

08000894 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09a      	sub	sp, #104	; 0x68
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 800089c:	2014      	movs	r0, #20
 800089e:	f00d fe45 	bl	800e52c <malloc>
 80008a2:	4603      	mov	r3, r0
 80008a4:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80008aa:	f00d ff3b 	bl	800e724 <strcpy>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80008b4:	4618      	mov	r0, r3
 80008b6:	f00c fef4 	bl	800d6a2 <f_opendir>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <Scan_USB+0x128>)
 80008c0:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80008c2:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <Scan_USB+0x128>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d16e      	bne.n	80009a8 <Scan_USB+0x114>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	493c      	ldr	r1, [pc, #240]	; (80009c0 <Scan_USB+0x12c>)
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00c ffb4 	bl	800d83e <f_readdir>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <Scan_USB+0x128>)
 80008dc:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <Scan_USB+0x128>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d15b      	bne.n	800099e <Scan_USB+0x10a>
 80008e6:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <Scan_USB+0x12c>)
 80008e8:	7e9b      	ldrb	r3, [r3, #26]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d057      	beq.n	800099e <Scan_USB+0x10a>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 80008ee:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <Scan_USB+0x12c>)
 80008f0:	7b1b      	ldrb	r3, [r3, #12]
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d03a      	beq.n	8000970 <Scan_USB+0xdc>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80008fa:	4932      	ldr	r1, [pc, #200]	; (80009c4 <Scan_USB+0x130>)
 80008fc:	4832      	ldr	r0, [pc, #200]	; (80009c8 <Scan_USB+0x134>)
 80008fe:	f7ff fcef 	bl	80002e0 <strcmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d045      	beq.n	8000994 <Scan_USB+0x100>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000908:	492e      	ldr	r1, [pc, #184]	; (80009c4 <Scan_USB+0x130>)
 800090a:	4830      	ldr	r0, [pc, #192]	; (80009cc <Scan_USB+0x138>)
 800090c:	f7ff fce8 	bl	80002e0 <strcmp>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d040      	beq.n	8000998 <Scan_USB+0x104>
            	char *buf = malloc(30*sizeof(char));
 8000916:	201e      	movs	r0, #30
 8000918:	f00d fe08 	bl	800e52c <malloc>
 800091c:	4603      	mov	r3, r0
 800091e:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000920:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <Scan_USB+0x130>)
 8000922:	492b      	ldr	r1, [pc, #172]	; (80009d0 <Scan_USB+0x13c>)
 8000924:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000926:	f00d fedd 	bl	800e6e4 <siprintf>
            	Send_Uart(buf);
 800092a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800092c:	f7ff ff5a 	bl	80007e4 <Send_Uart>
            	free(buf);
 8000930:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000932:	f00d fe03 	bl	800e53c <free>
                i = strlen(path);
 8000936:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000938:	f7ff fcdc 	bl	80002f4 <strlen>
 800093c:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 800093e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000942:	4413      	add	r3, r2
 8000944:	4a1f      	ldr	r2, [pc, #124]	; (80009c4 <Scan_USB+0x130>)
 8000946:	4923      	ldr	r1, [pc, #140]	; (80009d4 <Scan_USB+0x140>)
 8000948:	4618      	mov	r0, r3
 800094a:	f00d fecb 	bl	800e6e4 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 800094e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000950:	f7ff ffa0 	bl	8000894 <Scan_USB>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <Scan_USB+0x128>)
 800095a:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <Scan_USB+0x128>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d11b      	bne.n	800099c <Scan_USB+0x108>
                path[i] = 0;
 8000964:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000968:	4413      	add	r3, r2
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e7ac      	b.n	80008ca <Scan_USB+0x36>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000970:	201e      	movs	r0, #30
 8000972:	f00d fddb 	bl	800e52c <malloc>
 8000976:	4603      	mov	r3, r0
 8000978:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <Scan_USB+0x130>)
 800097c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800097e:	4916      	ldr	r1, [pc, #88]	; (80009d8 <Scan_USB+0x144>)
 8000980:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000982:	f00d feaf 	bl	800e6e4 <siprintf>
               Send_Uart(buf);
 8000986:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000988:	f7ff ff2c 	bl	80007e4 <Send_Uart>
               free(buf);
 800098c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800098e:	f00d fdd5 	bl	800e53c <free>
 8000992:	e79a      	b.n	80008ca <Scan_USB+0x36>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000994:	bf00      	nop
 8000996:	e798      	b.n	80008ca <Scan_USB+0x36>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000998:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 800099a:	e796      	b.n	80008ca <Scan_USB+0x36>
                if (fresult != FR_OK) break;
 800099c:	bf00      	nop
            }
        }
        f_closedir(&dir);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4618      	mov	r0, r3
 80009a4:	f00c ff25 	bl	800d7f2 <f_closedir>
    }
    free(path);
 80009a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80009aa:	f00d fdc7 	bl	800e53c <free>
    return fresult;
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <Scan_USB+0x128>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3768      	adds	r7, #104	; 0x68
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000574 	.word	0x20000574
 80009c0:	20000578 	.word	0x20000578
 80009c4:	20000592 	.word	0x20000592
 80009c8:	0800ee18 	.word	0x0800ee18
 80009cc:	0800ee24 	.word	0x0800ee24
 80009d0:	0800ee40 	.word	0x0800ee40
 80009d4:	0800ee4c 	.word	0x0800ee4c
 80009d8:	0800ee50 	.word	0x0800ee50

080009dc <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80009e6:	4955      	ldr	r1, [pc, #340]	; (8000b3c <Write_File+0x160>)
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f00c ff65 	bl	800d8b8 <f_stat>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <Write_File+0x164>)
 80009f4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80009f6:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <Write_File+0x164>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d012      	beq.n	8000a24 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f00d fd94 	bl	800e52c <malloc>
 8000a04:	4603      	mov	r3, r0
 8000a06:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	494e      	ldr	r1, [pc, #312]	; (8000b44 <Write_File+0x168>)
 8000a0c:	68b8      	ldr	r0, [r7, #8]
 8000a0e:	f00d fe69 	bl	800e6e4 <siprintf>
		Send_Uart (buf);
 8000a12:	68b8      	ldr	r0, [r7, #8]
 8000a14:	f7ff fee6 	bl	80007e4 <Send_Uart>
	    free(buf);
 8000a18:	68b8      	ldr	r0, [r7, #8]
 8000a1a:	f00d fd8f 	bl	800e53c <free>
	    return fresult;
 8000a1e:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <Write_File+0x164>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	e087      	b.n	8000b34 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000a24:	2202      	movs	r2, #2
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	4847      	ldr	r0, [pc, #284]	; (8000b48 <Write_File+0x16c>)
 8000a2a:	f00c f85d 	bl	800cae8 <f_open>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <Write_File+0x164>)
 8000a34:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <Write_File+0x164>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d015      	beq.n	8000a6a <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000a3e:	2064      	movs	r0, #100	; 0x64
 8000a40:	f00d fd74 	bl	800e52c <malloc>
 8000a44:	4603      	mov	r3, r0
 8000a46:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000a48:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <Write_File+0x164>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	493e      	ldr	r1, [pc, #248]	; (8000b4c <Write_File+0x170>)
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f00d fe46 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff fec3 	bl	80007e4 <Send_Uart>
	        free(buf);
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f00d fd6c 	bl	800e53c <free>
	        return fresult;
 8000a64:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <Write_File+0x164>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	e064      	b.n	8000b34 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f00d fd5e 	bl	800e52c <malloc>
 8000a70:	4603      	mov	r3, r0
 8000a72:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4936      	ldr	r1, [pc, #216]	; (8000b50 <Write_File+0x174>)
 8000a78:	69f8      	ldr	r0, [r7, #28]
 8000a7a:	f00d fe33 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8000a7e:	69f8      	ldr	r0, [r7, #28]
 8000a80:	f7ff feb0 	bl	80007e4 <Send_Uart>
	        free(buf);
 8000a84:	69f8      	ldr	r0, [r7, #28]
 8000a86:	f00d fd59 	bl	800e53c <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000a8a:	6838      	ldr	r0, [r7, #0]
 8000a8c:	f7ff fc32 	bl	80002f4 <strlen>
 8000a90:	4602      	mov	r2, r0
 8000a92:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <Write_File+0x178>)
 8000a94:	6839      	ldr	r1, [r7, #0]
 8000a96:	482c      	ldr	r0, [pc, #176]	; (8000b48 <Write_File+0x16c>)
 8000a98:	f00c fae1 	bl	800d05e <f_write>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <Write_File+0x164>)
 8000aa2:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <Write_File+0x164>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d012      	beq.n	8000ad2 <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000aac:	2064      	movs	r0, #100	; 0x64
 8000aae:	f00d fd3d 	bl	800e52c <malloc>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <Write_File+0x164>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4926      	ldr	r1, [pc, #152]	; (8000b58 <Write_File+0x17c>)
 8000ac0:	69b8      	ldr	r0, [r7, #24]
 8000ac2:	f00d fe0f 	bl	800e6e4 <siprintf>
	    		Send_Uart(buf);
 8000ac6:	69b8      	ldr	r0, [r7, #24]
 8000ac8:	f7ff fe8c 	bl	80007e4 <Send_Uart>
	    		free(buf);
 8000acc:	69b8      	ldr	r0, [r7, #24]
 8000ace:	f00d fd35 	bl	800e53c <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000ad2:	481d      	ldr	r0, [pc, #116]	; (8000b48 <Write_File+0x16c>)
 8000ad4:	f00c fdbb 	bl	800d64e <f_close>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <Write_File+0x164>)
 8000ade:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <Write_File+0x164>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d013      	beq.n	8000b10 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ae8:	2064      	movs	r0, #100	; 0x64
 8000aea:	f00d fd1f 	bl	800e52c <malloc>
 8000aee:	4603      	mov	r3, r0
 8000af0:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <Write_File+0x164>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4918      	ldr	r1, [pc, #96]	; (8000b5c <Write_File+0x180>)
 8000afc:	6938      	ldr	r0, [r7, #16]
 8000afe:	f00d fdf1 	bl	800e6e4 <siprintf>
	    		Send_Uart(buf);
 8000b02:	6938      	ldr	r0, [r7, #16]
 8000b04:	f7ff fe6e 	bl	80007e4 <Send_Uart>
	    		free(buf);
 8000b08:	6938      	ldr	r0, [r7, #16]
 8000b0a:	f00d fd17 	bl	800e53c <free>
 8000b0e:	e00f      	b.n	8000b30 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f00d fd0b 	bl	800e52c <malloc>
 8000b16:	4603      	mov	r3, r0
 8000b18:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4910      	ldr	r1, [pc, #64]	; (8000b60 <Write_File+0x184>)
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f00d fde0 	bl	800e6e4 <siprintf>
	    		Send_Uart(buf);
 8000b24:	6978      	ldr	r0, [r7, #20]
 8000b26:	f7ff fe5d 	bl	80007e4 <Send_Uart>
	    		free(buf);
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f00d fd06 	bl	800e53c <free>
	    	}
	    }
	    return fresult;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <Write_File+0x164>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000578 	.word	0x20000578
 8000b40:	20000574 	.word	0x20000574
 8000b44:	0800ee64 	.word	0x0800ee64
 8000b48:	20000738 	.word	0x20000738
 8000b4c:	0800ee84 	.word	0x0800ee84
 8000b50:	0800eeac 	.word	0x0800eeac
 8000b54:	20000570 	.word	0x20000570
 8000b58:	0800eed8 	.word	0x0800eed8
 8000b5c:	0800ef0c 	.word	0x0800ef0c
 8000b60:	0800ef44 	.word	0x0800ef44

08000b64 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000b6c:	4943      	ldr	r1, [pc, #268]	; (8000c7c <Create_File+0x118>)
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f00c fea2 	bl	800d8b8 <f_stat>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <Create_File+0x11c>)
 8000b7a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000b7c:	4b40      	ldr	r3, [pc, #256]	; (8000c80 <Create_File+0x11c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d112      	bne.n	8000baa <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000b84:	2064      	movs	r0, #100	; 0x64
 8000b86:	f00d fcd1 	bl	800e52c <malloc>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	493c      	ldr	r1, [pc, #240]	; (8000c84 <Create_File+0x120>)
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f00d fda6 	bl	800e6e4 <siprintf>
		Send_Uart(buf);
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff fe23 	bl	80007e4 <Send_Uart>
		free(buf);
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f00d fccc 	bl	800e53c <free>
	    return fresult;
 8000ba4:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <Create_File+0x11c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	e063      	b.n	8000c72 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000baa:	220b      	movs	r2, #11
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	4836      	ldr	r0, [pc, #216]	; (8000c88 <Create_File+0x124>)
 8000bb0:	f00b ff9a 	bl	800cae8 <f_open>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <Create_File+0x11c>)
 8000bba:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000bbc:	4b30      	ldr	r3, [pc, #192]	; (8000c80 <Create_File+0x11c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d015      	beq.n	8000bf0 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f00d fcb1 	bl	800e52c <malloc>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <Create_File+0x11c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	492d      	ldr	r1, [pc, #180]	; (8000c8c <Create_File+0x128>)
 8000bd8:	6938      	ldr	r0, [r7, #16]
 8000bda:	f00d fd83 	bl	800e6e4 <siprintf>
			Send_Uart(buf);
 8000bde:	6938      	ldr	r0, [r7, #16]
 8000be0:	f7ff fe00 	bl	80007e4 <Send_Uart>
			free(buf);
 8000be4:	6938      	ldr	r0, [r7, #16]
 8000be6:	f00d fca9 	bl	800e53c <free>
		    return fresult;
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <Create_File+0x11c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	e040      	b.n	8000c72 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000bf0:	2064      	movs	r0, #100	; 0x64
 8000bf2:	f00d fc9b 	bl	800e52c <malloc>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4924      	ldr	r1, [pc, #144]	; (8000c90 <Create_File+0x12c>)
 8000bfe:	69f8      	ldr	r0, [r7, #28]
 8000c00:	f00d fd70 	bl	800e6e4 <siprintf>
			Send_Uart(buf);
 8000c04:	69f8      	ldr	r0, [r7, #28]
 8000c06:	f7ff fded 	bl	80007e4 <Send_Uart>
			free(buf);
 8000c0a:	69f8      	ldr	r0, [r7, #28]
 8000c0c:	f00d fc96 	bl	800e53c <free>
		}

		fresult = f_close(&USBHFile);
 8000c10:	481d      	ldr	r0, [pc, #116]	; (8000c88 <Create_File+0x124>)
 8000c12:	f00c fd1c 	bl	800d64e <f_close>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <Create_File+0x11c>)
 8000c1c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <Create_File+0x11c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d013      	beq.n	8000c4e <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000c26:	2064      	movs	r0, #100	; 0x64
 8000c28:	f00d fc80 	bl	800e52c <malloc>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <Create_File+0x11c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4916      	ldr	r1, [pc, #88]	; (8000c94 <Create_File+0x130>)
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f00d fd52 	bl	800e6e4 <siprintf>
			Send_Uart(buf);
 8000c40:	6978      	ldr	r0, [r7, #20]
 8000c42:	f7ff fdcf 	bl	80007e4 <Send_Uart>
			free(buf);
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f00d fc78 	bl	800e53c <free>
 8000c4c:	e00f      	b.n	8000c6e <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000c4e:	2064      	movs	r0, #100	; 0x64
 8000c50:	f00d fc6c 	bl	800e52c <malloc>
 8000c54:	4603      	mov	r3, r0
 8000c56:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	490f      	ldr	r1, [pc, #60]	; (8000c98 <Create_File+0x134>)
 8000c5c:	69b8      	ldr	r0, [r7, #24]
 8000c5e:	f00d fd41 	bl	800e6e4 <siprintf>
			Send_Uart(buf);
 8000c62:	69b8      	ldr	r0, [r7, #24]
 8000c64:	f7ff fdbe 	bl	80007e4 <Send_Uart>
			free(buf);
 8000c68:	69b8      	ldr	r0, [r7, #24]
 8000c6a:	f00d fc67 	bl	800e53c <free>
		}
	}
    return fresult;
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <Create_File+0x11c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000578 	.word	0x20000578
 8000c80:	20000574 	.word	0x20000574
 8000c84:	0800f038 	.word	0x0800f038
 8000c88:	20000738 	.word	0x20000738
 8000c8c:	0800f070 	.word	0x0800f070
 8000c90:	0800f098 	.word	0x0800f098
 8000c94:	0800f0d8 	.word	0x0800f0d8
 8000c98:	0800f018 	.word	0x0800f018

08000c9c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000ca6:	495e      	ldr	r1, [pc, #376]	; (8000e20 <Update_File+0x184>)
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f00c fe05 	bl	800d8b8 <f_stat>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b5c      	ldr	r3, [pc, #368]	; (8000e24 <Update_File+0x188>)
 8000cb4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000cb6:	4b5b      	ldr	r3, [pc, #364]	; (8000e24 <Update_File+0x188>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d012      	beq.n	8000ce4 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000cbe:	2064      	movs	r0, #100	; 0x64
 8000cc0:	f00d fc34 	bl	800e52c <malloc>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4957      	ldr	r1, [pc, #348]	; (8000e28 <Update_File+0x18c>)
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f00d fd09 	bl	800e6e4 <siprintf>
		Send_Uart (buf);
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff fd86 	bl	80007e4 <Send_Uart>
		free(buf);
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f00d fc2f 	bl	800e53c <free>
	    return fresult;
 8000cde:	4b51      	ldr	r3, [pc, #324]	; (8000e24 <Update_File+0x188>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	e098      	b.n	8000e16 <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8000ce4:	2232      	movs	r2, #50	; 0x32
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <Update_File+0x190>)
 8000cea:	f00b fefd 	bl	800cae8 <f_open>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <Update_File+0x188>)
 8000cf4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000cf6:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <Update_File+0x188>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d015      	beq.n	8000d2a <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000cfe:	2064      	movs	r0, #100	; 0x64
 8000d00:	f00d fc14 	bl	800e52c <malloc>
 8000d04:	4603      	mov	r3, r0
 8000d06:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000d08:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <Update_File+0x188>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4947      	ldr	r1, [pc, #284]	; (8000e30 <Update_File+0x194>)
 8000d12:	6938      	ldr	r0, [r7, #16]
 8000d14:	f00d fce6 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8000d18:	6938      	ldr	r0, [r7, #16]
 8000d1a:	f7ff fd63 	bl	80007e4 <Send_Uart>
	        free(buf);
 8000d1e:	6938      	ldr	r0, [r7, #16]
 8000d20:	f00d fc0c 	bl	800e53c <free>
	        return fresult;
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <Update_File+0x188>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	e075      	b.n	8000e16 <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8000d2a:	2064      	movs	r0, #100	; 0x64
 8000d2c:	f00d fbfe 	bl	800e52c <malloc>
 8000d30:	4603      	mov	r3, r0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	493f      	ldr	r1, [pc, #252]	; (8000e34 <Update_File+0x198>)
 8000d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d3a:	f00d fcd3 	bl	800e6e4 <siprintf>
    	Send_Uart(buf);
 8000d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d40:	f7ff fd50 	bl	80007e4 <Send_Uart>
        free(buf);
 8000d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d46:	f00d fbf9 	bl	800e53c <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8000d4a:	6838      	ldr	r0, [r7, #0]
 8000d4c:	f7ff fad2 	bl	80002f4 <strlen>
 8000d50:	4602      	mov	r2, r0
 8000d52:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <Update_File+0x19c>)
 8000d54:	6839      	ldr	r1, [r7, #0]
 8000d56:	4835      	ldr	r0, [pc, #212]	; (8000e2c <Update_File+0x190>)
 8000d58:	f00c f981 	bl	800d05e <f_write>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <Update_File+0x188>)
 8000d62:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000d64:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <Update_File+0x188>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d013      	beq.n	8000d94 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000d6c:	2064      	movs	r0, #100	; 0x64
 8000d6e:	f00d fbdd 	bl	800e52c <malloc>
 8000d72:	4603      	mov	r3, r0
 8000d74:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <Update_File+0x188>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	492f      	ldr	r1, [pc, #188]	; (8000e3c <Update_File+0x1a0>)
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f00d fcaf 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8000d86:	69f8      	ldr	r0, [r7, #28]
 8000d88:	f7ff fd2c 	bl	80007e4 <Send_Uart>
	    	free(buf);
 8000d8c:	69f8      	ldr	r0, [r7, #28]
 8000d8e:	f00d fbd5 	bl	800e53c <free>
 8000d92:	e00f      	b.n	8000db4 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	f00d fbc9 	bl	800e52c <malloc>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4927      	ldr	r1, [pc, #156]	; (8000e40 <Update_File+0x1a4>)
 8000da2:	6a38      	ldr	r0, [r7, #32]
 8000da4:	f00d fc9e 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8000da8:	6a38      	ldr	r0, [r7, #32]
 8000daa:	f7ff fd1b 	bl	80007e4 <Send_Uart>
	    	free(buf);
 8000dae:	6a38      	ldr	r0, [r7, #32]
 8000db0:	f00d fbc4 	bl	800e53c <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8000db4:	481d      	ldr	r0, [pc, #116]	; (8000e2c <Update_File+0x190>)
 8000db6:	f00c fc4a 	bl	800d64e <f_close>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <Update_File+0x188>)
 8000dc0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <Update_File+0x188>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d013      	beq.n	8000df2 <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f00d fbae 	bl	800e52c <malloc>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <Update_File+0x188>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4919      	ldr	r1, [pc, #100]	; (8000e44 <Update_File+0x1a8>)
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f00d fc80 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8000de4:	6978      	ldr	r0, [r7, #20]
 8000de6:	f7ff fcfd 	bl	80007e4 <Send_Uart>
	    	free(buf);
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f00d fba6 	bl	800e53c <free>
 8000df0:	e00f      	b.n	8000e12 <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f00d fb9a 	bl	800e52c <malloc>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4912      	ldr	r1, [pc, #72]	; (8000e48 <Update_File+0x1ac>)
 8000e00:	69b8      	ldr	r0, [r7, #24]
 8000e02:	f00d fc6f 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8000e06:	69b8      	ldr	r0, [r7, #24]
 8000e08:	f7ff fcec 	bl	80007e4 <Send_Uart>
	    	free(buf);
 8000e0c:	69b8      	ldr	r0, [r7, #24]
 8000e0e:	f00d fb95 	bl	800e53c <free>
	     }
	}
    return fresult;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <Update_File+0x188>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000578 	.word	0x20000578
 8000e24:	20000574 	.word	0x20000574
 8000e28:	0800ee64 	.word	0x0800ee64
 8000e2c:	20000738 	.word	0x20000738
 8000e30:	0800ee84 	.word	0x0800ee84
 8000e34:	0800f0fc 	.word	0x0800f0fc
 8000e38:	20000570 	.word	0x20000570
 8000e3c:	0800f12c 	.word	0x0800f12c
 8000e40:	0800f154 	.word	0x0800f154
 8000e44:	0800eff0 	.word	0x0800eff0
 8000e48:	0800f018 	.word	0x0800f018

08000e4c <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f00c fe6f 	bl	800db38 <f_mkdir>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <Create_Dir+0x74>)
 8000e60:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <Create_Dir+0x74>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d110      	bne.n	8000e8c <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 8000e6a:	2064      	movs	r0, #100	; 0x64
 8000e6c:	f00d fb5e 	bl	800e52c <malloc>
 8000e70:	4603      	mov	r3, r0
 8000e72:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4913      	ldr	r1, [pc, #76]	; (8000ec4 <Create_Dir+0x78>)
 8000e78:	68b8      	ldr	r0, [r7, #8]
 8000e7a:	f00d fc33 	bl	800e6e4 <siprintf>
    	Send_Uart (buf);
 8000e7e:	68b8      	ldr	r0, [r7, #8]
 8000e80:	f7ff fcb0 	bl	80007e4 <Send_Uart>
    	free(buf);
 8000e84:	68b8      	ldr	r0, [r7, #8]
 8000e86:	f00d fb59 	bl	800e53c <free>
 8000e8a:	e012      	b.n	8000eb2 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f00d fb4d 	bl	800e52c <malloc>
 8000e92:	4603      	mov	r3, r0
 8000e94:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <Create_Dir+0x74>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	490a      	ldr	r1, [pc, #40]	; (8000ec8 <Create_Dir+0x7c>)
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f00d fc1f 	bl	800e6e4 <siprintf>
    	Send_Uart(buf);
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f7ff fc9c 	bl	80007e4 <Send_Uart>
    	free(buf);
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f00d fb45 	bl	800e53c <free>
    }
    return fresult;
 8000eb2:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <Create_Dir+0x74>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000574 	.word	0x20000574
 8000ec4:	0800f1b8 	.word	0x0800f1b8
 8000ec8:	0800f1e0 	.word	0x0800f1e0

08000ecc <Check_USB_Details>:

void Check_USB_Details (void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8000ed2:	4a2d      	ldr	r2, [pc, #180]	; (8000f88 <Check_USB_Details+0xbc>)
 8000ed4:	492d      	ldr	r1, [pc, #180]	; (8000f8c <Check_USB_Details+0xc0>)
 8000ed6:	482e      	ldr	r0, [pc, #184]	; (8000f90 <Check_USB_Details+0xc4>)
 8000ed8:	f00c fd27 	bl	800d92a <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <Check_USB_Details+0xbc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <Check_USB_Details+0xbc>)
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	8952      	ldrh	r2, [r2, #10]
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ef6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000efa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f02:	ee17 2a90 	vmov	r2, s15
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <Check_USB_Details+0xc8>)
 8000f08:	601a      	str	r2, [r3, #0]
    char *buf = malloc(30*sizeof(char));
 8000f0a:	201e      	movs	r0, #30
 8000f0c:	f00d fb0e 	bl	800e52c <malloc>
 8000f10:	4603      	mov	r3, r0
 8000f12:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <Check_USB_Details+0xc8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	491f      	ldr	r1, [pc, #124]	; (8000f98 <Check_USB_Details+0xcc>)
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f00d fbe1 	bl	800e6e4 <siprintf>
    Send_Uart(buf);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fc5e 	bl	80007e4 <Send_Uart>
    free(buf);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f00d fb07 	bl	800e53c <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <Check_USB_Details+0xbc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	895b      	ldrh	r3, [r3, #10]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <Check_USB_Details+0xc0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	fb03 f302 	mul.w	r3, r3, r2
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f46:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f52:	ee17 2a90 	vmov	r2, s15
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <Check_USB_Details+0xd0>)
 8000f58:	601a      	str	r2, [r3, #0]
    buf = malloc(30*sizeof(char));
 8000f5a:	201e      	movs	r0, #30
 8000f5c:	f00d fae6 	bl	800e52c <malloc>
 8000f60:	4603      	mov	r3, r0
 8000f62:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <Check_USB_Details+0xd0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <Check_USB_Details+0xd4>)
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f00d fbb9 	bl	800e6e4 <siprintf>
    Send_Uart(buf);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fc36 	bl	80007e4 <Send_Uart>
    free(buf);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f00d fadf 	bl	800e53c <free>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000568 	.word	0x20000568
 8000f8c:	20000560 	.word	0x20000560
 8000f90:	0800f20c 	.word	0x0800f20c
 8000f94:	20000698 	.word	0x20000698
 8000f98:	0800f210 	.word	0x0800f210
 8000f9c:	2000056c 	.word	0x2000056c
 8000fa0:	0800f228 	.word	0x0800f228

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fae:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000fb0:	bf00      	nop
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <main+0xac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <main+0x24>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dcf4      	bgt.n	8000fb2 <main+0xe>
	if ( timeout < 0 )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	da01      	bge.n	8000fd2 <main+0x2e>
	{
		Error_Handler();
 8000fce:	f000 f987 	bl	80012e0 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fd2:	f000 fa85 	bl	80014e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fd6:	f000 f83f 	bl	8001058 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <main+0xac>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <main+0xac>)
 8000fe2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <main+0xac>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f002 fadf 	bl	80035bc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000ffe:	2100      	movs	r1, #0
 8001000:	2000      	movs	r0, #0
 8001002:	f002 faf5 	bl	80035f0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800100c:	bf00      	nop
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <main+0xac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d104      	bne.n	8001024 <main+0x80>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	1e5a      	subs	r2, r3, #1
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	dcf4      	bgt.n	800100e <main+0x6a>
	if ( timeout < 0 )
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	da01      	bge.n	800102e <main+0x8a>
	{
		Error_Handler();
 800102a:	f000 f959 	bl	80012e0 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800102e:	f000 f8dd 	bl	80011ec <MX_GPIO_Init>
	MX_UART8_Init();
 8001032:	f000 f88f 	bl	8001154 <MX_UART8_Init>
	MX_FATFS_Init();
 8001036:	f005 fdad 	bl	8006b94 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 800103a:	f00c ff27 	bl	800de8c <MX_USB_HOST_Init>
	//		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
	//		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
	//		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
	//		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
	//		printf("DHCP IP\r\n");
			HAL_Delay(1000);
 800103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001042:	f000 fadf 	bl	8001604 <HAL_Delay>
		Send_Uart("USB mounted successfully...\n");
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <main+0xb0>)
 8001048:	f7ff fbcc 	bl	80007e4 <Send_Uart>
			HAL_Delay(1000);
 800104c:	e7f7      	b.n	800103e <main+0x9a>
 800104e:	bf00      	nop
 8001050:	58024400 	.word	0x58024400
 8001054:	0800f240 	.word	0x0800f240

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	; 0x78
 800105c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001064:	2004      	movs	r0, #4
 8001066:	f002 fad7 	bl	8003618 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <SystemClock_Config+0xf4>)
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	4a36      	ldr	r2, [pc, #216]	; (800114c <SystemClock_Config+0xf4>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	62d3      	str	r3, [r2, #44]	; 0x2c
 800107a:	4b34      	ldr	r3, [pc, #208]	; (800114c <SystemClock_Config+0xf4>)
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <SystemClock_Config+0xf8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a31      	ldr	r2, [pc, #196]	; (8001150 <SystemClock_Config+0xf8>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <SystemClock_Config+0xf8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800109c:	bf00      	nop
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <SystemClock_Config+0xf8>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010aa:	d1f8      	bne.n	800109e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ac:	2301      	movs	r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	2302      	movs	r3, #2
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80010c6:	2305      	movs	r3, #5
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 80010ca:	23a0      	movs	r3, #160	; 0xa0
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010da:	2304      	movs	r3, #4
 80010dc:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010de:	2300      	movs	r3, #0
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010e2:	2308      	movs	r3, #8
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 faee 	bl	80036cc <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80010f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010fe:	f000 f8ef 	bl	80012e0 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001102:	233f      	movs	r3, #63	; 0x3f
 8001104:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2303      	movs	r3, #3
 8001108:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800110e:	2308      	movs	r3, #8
 8001110:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001112:	2340      	movs	r3, #64	; 0x40
 8001114:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800111a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001124:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001128:	2104      	movs	r1, #4
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fede 	bl	8003eec <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8001136:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800113e:	f000 f8cf 	bl	80012e0 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 8001142:	bf00      	nop
 8001144:	3778      	adds	r7, #120	; 0x78
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	58000400 	.word	0x58000400
 8001150:	58024800 	.word	0x58024800

08001154 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_UART8_Init+0x90>)
 800115a:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <MX_UART8_Init+0x94>)
 800115c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_UART8_Init+0x90>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_UART8_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_UART8_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_UART8_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_UART8_Init+0x90>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_UART8_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_UART8_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_UART8_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_UART8_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_UART8_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800119c:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_UART8_Init+0x90>)
 800119e:	f003 fcd7 	bl	8004b50 <HAL_UART_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80011a8:	f000 f89a 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_UART8_Init+0x90>)
 80011b0:	f004 fd07 	bl	8005bc2 <HAL_UARTEx_SetTxFifoThreshold>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80011ba:	f000 f891 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_UART8_Init+0x90>)
 80011c2:	f004 fd3c 	bl	8005c3e <HAL_UARTEx_SetRxFifoThreshold>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f000 f888 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_UART8_Init+0x90>)
 80011d2:	f004 fcbd 	bl	8005b50 <HAL_UARTEx_DisableFifoMode>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80011dc:	f000 f880 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000069c 	.word	0x2000069c
 80011e8:	40007c00 	.word	0x40007c00

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <MX_GPIO_Init+0xe8>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	4a32      	ldr	r2, [pc, #200]	; (80012d4 <MX_GPIO_Init+0xe8>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <MX_GPIO_Init+0xe8>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001220:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <MX_GPIO_Init+0xe8>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	4a2b      	ldr	r2, [pc, #172]	; (80012d4 <MX_GPIO_Init+0xe8>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <MX_GPIO_Init+0xe8>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <MX_GPIO_Init+0xe8>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <MX_GPIO_Init+0xe8>)
 8001246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_GPIO_Init+0xe8>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_GPIO_Init+0xe8>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <MX_GPIO_Init+0xe8>)
 8001264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_GPIO_Init+0xe8>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001280:	4815      	ldr	r0, [pc, #84]	; (80012d8 <MX_GPIO_Init+0xec>)
 8001282:	f000 fcad 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_3, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2108      	movs	r1, #8
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_GPIO_Init+0xf0>)
 800128c:	f000 fca8 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001290:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <MX_GPIO_Init+0xec>)
 80012aa:	f000 fae9 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ae:	2308      	movs	r3, #8
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0xf0>)
 80012c6:	f000 fadb 	bl	8001880 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58022000 	.word	0x58022000
 80012dc:	58022400 	.word	0x58022400

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_MspInit+0x30>)
 80012f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_MspInit+0x30>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_MspInit+0x30>)
 8001308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	58024400 	.word	0x58024400

08001324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12e      	bne.n	80013a4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 8001348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800134c:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 800134e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001352:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 8001358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800135c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 800136c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001382:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001394:	2308      	movs	r3, #8
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_UART_MspInit+0x90>)
 80013a0:	f000 fa6e 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40007c00 	.word	0x40007c00
 80013b0:	58024400 	.word	0x58024400
 80013b4:	58022400 	.word	0x58022400

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f8de 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <OTG_FS_IRQHandler+0x10>)
 8001412:	f000 fe8d 	bl	8002130 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20002ba8 	.word	0x20002ba8

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f00d f842 	bl	800e4d8 <__errno>
 8001454:	4602      	mov	r2, r0
 8001456:	230c      	movs	r3, #12
 8001458:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20020000 	.word	0x20020000
 8001480:	00000400 	.word	0x00000400
 8001484:	200000b4 	.word	0x200000b4
 8001488:	20002e70 	.word	0x20002e70

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001490:	f7ff f90e 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001494:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001496:	e003      	b.n	80014a0 <LoopCopyDataInit>

08001498 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800149a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800149c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800149e:	3104      	adds	r1, #4

080014a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014a0:	480a      	ldr	r0, [pc, #40]	; (80014cc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80014a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014a8:	d3f6      	bcc.n	8001498 <CopyDataInit>
  ldr  r2, =_sbss
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80014ac:	e002      	b.n	80014b4 <LoopFillZerobss>

080014ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014b0:	f842 3b04 	str.w	r3, [r2], #4

080014b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80014b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014b8:	d3f9      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ba:	f00d f813 	bl	800e4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fd71 	bl	8000fa4 <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014c8:	0800f8e4 	.word	0x0800f8e4
  ldr  r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014d0:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80014d4:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80014d8:	20002e70 	.word	0x20002e70

080014dc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC3_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e6:	2003      	movs	r0, #3
 80014e8:	f000 f98a 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014ec:	f002 feb4 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 80014f0:	4601      	mov	r1, r0
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_Init+0x68>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	4a13      	ldr	r2, [pc, #76]	; (800154c <HAL_Init+0x6c>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	fa21 f303 	lsr.w	r3, r1, r3
 8001508:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_Init+0x68>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_Init+0x6c>)
 8001514:	5cd3      	ldrb	r3, [r2, r3]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_Init+0x70>)
 8001522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_Init+0x74>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f814 	bl	8001558 <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e002      	b.n	8001540 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800153a:	f7ff fed9 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	58024400 	.word	0x58024400
 800154c:	0800f428 	.word	0x0800f428
 8001550:	20000004 	.word	0x20000004
 8001554:	20000000 	.word	0x20000000

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_InitTick+0x60>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e021      	b.n	80015b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_InitTick+0x64>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_InitTick+0x60>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f96f 	bl	8001866 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 f939 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x68>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000000c 	.word	0x2000000c
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000008 	.word	0x20000008

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	20000728 	.word	0x20000728

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000728 	.word	0x20000728

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff ffee 	bl	80015ec <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d005      	beq.n	800162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_Delay+0x40>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800162a:	bf00      	nop
 800162c:	f7ff ffde 	bl	80015ec <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8f7      	bhi.n	800162c <HAL_Delay+0x28>
  {
  }
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000000c 	.word	0x2000000c

08001648 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetREVID+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0c1b      	lsrs	r3, r3, #16
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	5c001000 	.word	0x5c001000

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	05fa0000 	.word	0x05fa0000

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <__NVIC_EnableIRQ+0x38>)
 80016de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f7ff ff8e 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff29 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff40 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff90 	bl	8001754 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5f 	bl	8001700 <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff33 	bl	80016c4 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa4 	bl	80017bc <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800188e:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <HAL_GPIO_Init+0x234>)
 8001890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001892:	e194      	b.n	8001bbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8186 	beq.w	8001bb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d00b      	beq.n	80018cc <HAL_GPIO_Init+0x4c>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c0:	2b11      	cmp	r3, #17
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b12      	cmp	r3, #18
 80018ca:	d130      	bne.n	800192e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001902:	2201      	movs	r2, #1
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	f003 0201 	and.w	r2, r3, #1
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0xee>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b12      	cmp	r3, #18
 800196c:	d123      	bne.n	80019b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	220f      	movs	r2, #15
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	69b9      	ldr	r1, [r7, #24]
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0203 	and.w	r2, r3, #3
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80e0 	beq.w	8001bb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_GPIO_Init+0x238>)
 80019fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019fe:	4a2e      	ldr	r2, [pc, #184]	; (8001ab8 <HAL_GPIO_Init+0x238>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_GPIO_Init+0x238>)
 8001a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a16:	4a29      	ldr	r2, [pc, #164]	; (8001abc <HAL_GPIO_Init+0x23c>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <HAL_GPIO_Init+0x240>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d052      	beq.n	8001ae8 <HAL_GPIO_Init+0x268>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <HAL_GPIO_Init+0x244>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d031      	beq.n	8001aae <HAL_GPIO_Init+0x22e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <HAL_GPIO_Init+0x248>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d02b      	beq.n	8001aaa <HAL_GPIO_Init+0x22a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_GPIO_Init+0x24c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d025      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_GPIO_Init+0x250>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x222>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x254>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x21e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x258>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x21a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_GPIO_Init+0x25c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x216>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <HAL_GPIO_Init+0x260>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x212>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_GPIO_Init+0x264>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x20e>
 8001a8a:	2309      	movs	r3, #9
 8001a8c:	e02d      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a8e:	230a      	movs	r3, #10
 8001a90:	e02b      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a92:	2308      	movs	r3, #8
 8001a94:	e029      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a96:	2307      	movs	r3, #7
 8001a98:	e027      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a9a:	2306      	movs	r3, #6
 8001a9c:	e025      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	e023      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e021      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e01f      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e01d      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e01b      	b.n	8001aea <HAL_GPIO_Init+0x26a>
 8001ab2:	bf00      	nop
 8001ab4:	58000080 	.word	0x58000080
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	58000400 	.word	0x58000400
 8001ac0:	58020000 	.word	0x58020000
 8001ac4:	58020400 	.word	0x58020400
 8001ac8:	58020800 	.word	0x58020800
 8001acc:	58020c00 	.word	0x58020c00
 8001ad0:	58021000 	.word	0x58021000
 8001ad4:	58021400 	.word	0x58021400
 8001ad8:	58021800 	.word	0x58021800
 8001adc:	58021c00 	.word	0x58021c00
 8001ae0:	58022000 	.word	0x58022000
 8001ae4:	58022400 	.word	0x58022400
 8001ae8:	2300      	movs	r3, #0
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afa:	4938      	ldr	r1, [pc, #224]	; (8001bdc <HAL_GPIO_Init+0x35c>)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f47f ae63 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	58000400 	.word	0x58000400

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001bfc:	e003      	b.n	8001c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c14:	b08f      	sub	sp, #60	; 0x3c
 8001c16:	af0a      	add	r7, sp, #40	; 0x28
 8001c18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e054      	b.n	8001cce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f00c f9ba 	bl	800dfb8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2203      	movs	r2, #3
 8001c48:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f905 	bl	8005e72 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	687e      	ldr	r6, [r7, #4]
 8001c70:	466d      	mov	r5, sp
 8001c72:	f106 0410 	add.w	r4, r6, #16
 8001c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c86:	1d33      	adds	r3, r6, #4
 8001c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c8a:	6838      	ldr	r0, [r7, #0]
 8001c8c:	f004 f87e 	bl	8005d8c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 f8fc 	bl	8005e94 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	687e      	ldr	r6, [r7, #4]
 8001ca4:	466d      	mov	r5, sp
 8001ca6:	f106 0410 	add.w	r4, r6, #16
 8001caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cba:	1d33      	adds	r3, r6, #4
 8001cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cbe:	6838      	ldr	r0, [r7, #0]
 8001cc0:	f004 fa0e 	bl	80060e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001cd6:	b590      	push	{r4, r7, lr}
 8001cd8:	b089      	sub	sp, #36	; 0x24
 8001cda:	af04      	add	r7, sp, #16
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	4608      	mov	r0, r1
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	70fb      	strb	r3, [r7, #3]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70bb      	strb	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_HCD_HC_Init+0x28>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e07f      	b.n	8001dfe <HAL_HCD_HC_Init+0x128>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d06:	78fa      	ldrb	r2, [r7, #3]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	333d      	adds	r3, #61	; 0x3d
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	3338      	adds	r3, #56	; 0x38
 8001d2a:	787a      	ldrb	r2, [r7, #1]
 8001d2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3340      	adds	r3, #64	; 0x40
 8001d3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d40:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	3339      	adds	r3, #57	; 0x39
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	333f      	adds	r3, #63	; 0x3f
 8001d66:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	78bb      	ldrb	r3, [r7, #2]
 8001d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d74:	b2d8      	uxtb	r0, r3
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	333a      	adds	r3, #58	; 0x3a
 8001d84:	4602      	mov	r2, r0
 8001d86:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da0a      	bge.n	8001da6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	333b      	adds	r3, #59	; 0x3b
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
 8001da4:	e009      	b.n	8001dba <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	333b      	adds	r3, #59	; 0x3b
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	333c      	adds	r3, #60	; 0x3c
 8001dca:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dce:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	787c      	ldrb	r4, [r7, #1]
 8001dd6:	78ba      	ldrb	r2, [r7, #2]
 8001dd8:	78f9      	ldrb	r1, [r7, #3]
 8001dda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	4623      	mov	r3, r4
 8001dec:	f004 fab2 	bl	8006354 <USB_HC_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd90      	pop	{r4, r7, pc}

08001e06 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_HCD_HC_Halt+0x1e>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e00f      	b.n	8001e44 <HAL_HCD_HC_Halt+0x3e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f004 fcec 	bl	8006812 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	70fb      	strb	r3, [r7, #3]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70bb      	strb	r3, [r7, #2]
 8001e62:	4613      	mov	r3, r2
 8001e64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	333b      	adds	r3, #59	; 0x3b
 8001e76:	78ba      	ldrb	r2, [r7, #2]
 8001e78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	333f      	adds	r3, #63	; 0x3f
 8001e8a:	787a      	ldrb	r2, [r7, #1]
 8001e8c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e8e:	7c3b      	ldrb	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d114      	bne.n	8001ebe <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3342      	adds	r3, #66	; 0x42
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	333d      	adds	r3, #61	; 0x3d
 8001eb8:	7f3a      	ldrb	r2, [r7, #28]
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	e009      	b.n	8001ed2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	440b      	add	r3, r1
 8001ecc:	3342      	adds	r3, #66	; 0x42
 8001ece:	2202      	movs	r2, #2
 8001ed0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ed2:	787b      	ldrb	r3, [r7, #1]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	f200 80d6 	bhi.w	8002086 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001ef1 	.word	0x08001ef1
 8001ee4:	08002071 	.word	0x08002071
 8001ee8:	08001f5d 	.word	0x08001f5d
 8001eec:	08001fe7 	.word	0x08001fe7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ef0:	7c3b      	ldrb	r3, [r7, #16]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	f040 80c9 	bne.w	800208a <HAL_HCD_HC_SubmitRequest+0x23e>
 8001ef8:	78bb      	ldrb	r3, [r7, #2]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 80c5 	bne.w	800208a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001f00:	8b3b      	ldrh	r3, [r7, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	3351      	adds	r3, #81	; 0x51
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3351      	adds	r3, #81	; 0x51
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3342      	adds	r3, #66	; 0x42
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f44:	e0a1      	b.n	800208a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3342      	adds	r3, #66	; 0x42
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
      break;
 8001f5a:	e096      	b.n	800208a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f5c:	78bb      	ldrb	r3, [r7, #2]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d120      	bne.n	8001fa4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	3351      	adds	r3, #81	; 0x51
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	3342      	adds	r3, #66	; 0x42
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f8c:	e07e      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3342      	adds	r3, #66	; 0x42
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	701a      	strb	r2, [r3, #0]
      break;
 8001fa2:	e073      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3350      	adds	r3, #80	; 0x50
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3342      	adds	r3, #66	; 0x42
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
      break;
 8001fce:	e05d      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3342      	adds	r3, #66	; 0x42
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	701a      	strb	r2, [r3, #0]
      break;
 8001fe4:	e052      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001fe6:	78bb      	ldrb	r3, [r7, #2]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d120      	bne.n	800202e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3351      	adds	r3, #81	; 0x51
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10a      	bne.n	8002018 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	3342      	adds	r3, #66	; 0x42
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002016:	e039      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	3342      	adds	r3, #66	; 0x42
 8002028:	2202      	movs	r2, #2
 800202a:	701a      	strb	r2, [r3, #0]
      break;
 800202c:	e02e      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	3350      	adds	r3, #80	; 0x50
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	3342      	adds	r3, #66	; 0x42
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
      break;
 8002058:	e018      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	3342      	adds	r3, #66	; 0x42
 800206a:	2202      	movs	r2, #2
 800206c:	701a      	strb	r2, [r3, #0]
      break;
 800206e:	e00d      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	3342      	adds	r3, #66	; 0x42
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
      break;
 8002084:	e002      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800208a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	3344      	adds	r3, #68	; 0x44
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	8b39      	ldrh	r1, [r7, #24]
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4403      	add	r3, r0
 80020b0:	3348      	adds	r3, #72	; 0x48
 80020b2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	335c      	adds	r3, #92	; 0x5c
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	334c      	adds	r3, #76	; 0x4c
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	3339      	adds	r3, #57	; 0x39
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	335d      	adds	r3, #93	; 0x5d
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	3338      	adds	r3, #56	; 0x38
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	18d1      	adds	r1, r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	f004 fa22 	bl	8006568 <USB_HC_StartXfer>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop

08002130 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f003 ff87 	bl	800605a <USB_GetMode>
 800214c:	4603      	mov	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	f040 80ef 	bne.w	8002332 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f003 ff6b 	bl	8006034 <USB_ReadInterrupts>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80e5 	beq.w	8002330 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f003 ff62 	bl	8006034 <USB_ReadInterrupts>
 8002170:	4603      	mov	r3, r0
 8002172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800217a:	d104      	bne.n	8002186 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002184:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 ff52 	bl	8006034 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800219a:	d104      	bne.n	80021a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 ff42 	bl	8006034 <USB_ReadInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ba:	d104      	bne.n	80021c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 ff32 	bl	8006034 <USB_ReadInterrupts>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d103      	bne.n	80021e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2202      	movs	r2, #2
 80021e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 ff24 	bl	8006034 <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f6:	d115      	bne.n	8002224 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002200:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d108      	bne.n	8002224 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f00b ff4c 	bl	800e0b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	4618      	mov	r0, r3
 8002220:	f004 f814 	bl	800624c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 ff03 	bl	8006034 <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002238:	d102      	bne.n	8002240 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f001 f94a 	bl	80034d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f003 fef5 	bl	8006034 <USB_ReadInterrupts>
 800224a:	4603      	mov	r3, r0
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b08      	cmp	r3, #8
 8002252:	d106      	bne.n	8002262 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f00b ff0f 	bl	800e078 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2208      	movs	r2, #8
 8002260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fee4 	bl	8006034 <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002276:	d138      	bne.n	80022ea <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f004 fab7 	bl	80067f0 <USB_HC_ReadInterrupt>
 8002282:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	e025      	b.n	80022d6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d018      	beq.n	80022d0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b4:	d106      	bne.n	80022c4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f8b3 	bl	8002428 <HCD_HC_IN_IRQHandler>
 80022c2:	e005      	b.n	80022d0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fce1 	bl	8002c92 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3d4      	bcc.n	800228a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fea0 	bl	8006034 <USB_ReadInterrupts>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d101      	bne.n	8002302 <HAL_HCD_IRQHandler+0x1d2>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_HCD_IRQHandler+0x1d4>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d014      	beq.n	8002332 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0210 	bic.w	r2, r2, #16
 8002316:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f001 f82f 	bl	800337c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0210 	orr.w	r2, r2, #16
 800232c:	619a      	str	r2, [r3, #24]
 800232e:	e000      	b.n	8002332 <HAL_HCD_IRQHandler+0x202>
      return;
 8002330:	bf00      	nop
    }
  }
}
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_HCD_Start+0x16>
 800234a:	2302      	movs	r3, #2
 800234c:	e013      	b.n	8002376 <HAL_HCD_Start+0x3e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f003 fd78 	bl	8005e50 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f003 ffaa 	bl	80062c0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_HCD_Stop+0x16>
 8002390:	2302      	movs	r3, #2
 8002392:	e00d      	b.n	80023b0 <HAL_HCD_Stop+0x32>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 fb71 	bl	8006a88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	335c      	adds	r3, #92	; 0x5c
 80023d4:	781b      	ldrb	r3, [r3, #0]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	334c      	adds	r3, #76	; 0x4c
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f003 ff8a 	bl	8006332 <USB_GetCurrentFrame>
 800241e:	4603      	mov	r3, r0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b04      	cmp	r3, #4
 8002456:	d119      	bne.n	800248c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	2304      	movs	r3, #4
 8002468:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	0151      	lsls	r1, r2, #5
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	440a      	add	r2, r1
 8002480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	60d3      	str	r3, [r2, #12]
 800248a:	e0ce      	b.n	800262a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a2:	d12c      	bne.n	80024fe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	461a      	mov	r2, r3
 80024b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	335d      	adds	r3, #93	; 0x5d
 80024c8:	2207      	movs	r2, #7
 80024ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	0151      	lsls	r1, r2, #5
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	440a      	add	r2, r1
 80024e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 f98b 	bl	8006812 <USB_HC_Halt>
 80024fc:	e095      	b.n	800262a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b20      	cmp	r3, #32
 8002512:	d109      	bne.n	8002528 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	2320      	movs	r3, #32
 8002524:	6093      	str	r3, [r2, #8]
 8002526:	e080      	b.n	800262a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b08      	cmp	r3, #8
 800253c:	d134      	bne.n	80025a8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	0151      	lsls	r1, r2, #5
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	440a      	add	r2, r1
 8002554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	335d      	adds	r3, #93	; 0x5d
 800256e:	2205      	movs	r2, #5
 8002570:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	461a      	mov	r2, r3
 8002580:	2310      	movs	r3, #16
 8002582:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	461a      	mov	r2, r3
 8002592:	2308      	movs	r3, #8
 8002594:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 f936 	bl	8006812 <USB_HC_Halt>
 80025a6:	e040      	b.n	800262a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d134      	bne.n	800262a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	0151      	lsls	r1, r2, #5
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	440a      	add	r2, r1
 80025d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 f911 	bl	8006812 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	461a      	mov	r2, r3
 80025fe:	2310      	movs	r3, #16
 8002600:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	335d      	adds	r3, #93	; 0x5d
 8002612:	2208      	movs	r2, #8
 8002614:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	461a      	mov	r2, r3
 8002624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002628:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002640:	d122      	bne.n	8002688 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	440a      	add	r2, r1
 8002658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f004 f8d0 	bl	8006812 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002684:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002686:	e300      	b.n	8002c8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	f040 80fd 	bne.w	800289a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	3348      	adds	r3, #72	; 0x48
 80026b8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	0159      	lsls	r1, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	440b      	add	r3, r1
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80026cc:	1ad1      	subs	r1, r2, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4403      	add	r3, r0
 80026dc:	334c      	adds	r3, #76	; 0x4c
 80026de:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	335d      	adds	r3, #93	; 0x5d
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	3358      	adds	r3, #88	; 0x58
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	461a      	mov	r2, r3
 8002716:	2301      	movs	r3, #1
 8002718:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	333f      	adds	r3, #63	; 0x3f
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	333f      	adds	r3, #63	; 0x3f
 8002740:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002742:	2b02      	cmp	r3, #2
 8002744:	d121      	bne.n	800278a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	0151      	lsls	r1, r2, #5
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	440a      	add	r2, r1
 800275c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f004 f84e 	bl	8006812 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	461a      	mov	r2, r3
 8002784:	2310      	movs	r3, #16
 8002786:	6093      	str	r3, [r2, #8]
 8002788:	e070      	b.n	800286c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	333f      	adds	r3, #63	; 0x3f
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d12a      	bne.n	80027f6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027be:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	335c      	adds	r3, #92	; 0x5c
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	b2d8      	uxtb	r0, r3
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	335c      	adds	r3, #92	; 0x5c
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	4601      	mov	r1, r0
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f00b fc6c 	bl	800e0cc <HAL_HCD_HC_NotifyURBChange_Callback>
 80027f4:	e03a      	b.n	800286c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	333f      	adds	r3, #63	; 0x3f
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d12f      	bne.n	800286c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	335c      	adds	r3, #92	; 0x5c
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	3350      	adds	r3, #80	; 0x50
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2d8      	uxtb	r0, r3
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	3350      	adds	r3, #80	; 0x50
 8002848:	4602      	mov	r2, r0
 800284a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	b2d8      	uxtb	r0, r3
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	335c      	adds	r3, #92	; 0x5c
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	4601      	mov	r1, r0
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f00b fc30 	bl	800e0cc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	3350      	adds	r3, #80	; 0x50
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	f083 0301 	eor.w	r3, r3, #1
 8002882:	b2d8      	uxtb	r0, r3
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	3350      	adds	r3, #80	; 0x50
 8002894:	4602      	mov	r2, r0
 8002896:	701a      	strb	r2, [r3, #0]
}
 8002898:	e1f7      	b.n	8002c8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	f040 811a 	bne.w	8002ae6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	0151      	lsls	r1, r2, #5
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	440a      	add	r2, r1
 80028c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028cc:	f023 0302 	bic.w	r3, r3, #2
 80028d0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	335d      	adds	r3, #93	; 0x5d
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d10a      	bne.n	80028fe <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	335c      	adds	r3, #92	; 0x5c
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e0d9      	b.n	8002ab2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	335d      	adds	r3, #93	; 0x5d
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b05      	cmp	r3, #5
 8002912:	d10a      	bne.n	800292a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	2205      	movs	r2, #5
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e0c3      	b.n	8002ab2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	335d      	adds	r3, #93	; 0x5d
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b06      	cmp	r3, #6
 800293e:	d00a      	beq.n	8002956 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	335d      	adds	r3, #93	; 0x5d
 8002950:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002952:	2b08      	cmp	r3, #8
 8002954:	d156      	bne.n	8002a04 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	3358      	adds	r3, #88	; 0x58
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1c59      	adds	r1, r3, #1
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4403      	add	r3, r0
 8002978:	3358      	adds	r3, #88	; 0x58
 800297a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3358      	adds	r3, #88	; 0x58
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d914      	bls.n	80029bc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	3358      	adds	r3, #88	; 0x58
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	335c      	adds	r3, #92	; 0x5c
 80029b6:	2204      	movs	r2, #4
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e009      	b.n	80029d0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	335c      	adds	r3, #92	; 0x5c
 80029cc:	2202      	movs	r2, #2
 80029ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e056      	b.n	8002ab2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	335d      	adds	r3, #93	; 0x5d
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d123      	bne.n	8002a62 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	335c      	adds	r3, #92	; 0x5c
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a44:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a4c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	e027      	b.n	8002ab2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	335d      	adds	r3, #93	; 0x5d
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b07      	cmp	r3, #7
 8002a76:	d11c      	bne.n	8002ab2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	3358      	adds	r3, #88	; 0x58
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1c59      	adds	r1, r3, #1
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4403      	add	r3, r0
 8002a9a:	3358      	adds	r3, #88	; 0x58
 8002a9c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	335c      	adds	r3, #92	; 0x5c
 8002aae:	2204      	movs	r2, #4
 8002ab0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	b2d8      	uxtb	r0, r3
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	335c      	adds	r3, #92	; 0x5c
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	4601      	mov	r1, r0
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f00b faf4 	bl	800e0cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ae4:	e0d1      	b.n	8002c8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d13e      	bne.n	8002b7a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	0151      	lsls	r1, r2, #5
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	440a      	add	r2, r1
 8002b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3358      	adds	r3, #88	; 0x58
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4403      	add	r3, r0
 8002b3e:	3358      	adds	r3, #88	; 0x58
 8002b40:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	335d      	adds	r3, #93	; 0x5d
 8002b52:	2206      	movs	r2, #6
 8002b54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 fe56 	bl	8006812 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	461a      	mov	r2, r3
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	6093      	str	r3, [r2, #8]
}
 8002b78:	e087      	b.n	8002c8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d17c      	bne.n	8002c8a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	333f      	adds	r3, #63	; 0x3f
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d122      	bne.n	8002bec <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3358      	adds	r3, #88	; 0x58
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	0151      	lsls	r1, r2, #5
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	440a      	add	r2, r1
 8002bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fe14 	bl	8006812 <USB_HC_Halt>
 8002bea:	e045      	b.n	8002c78 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	333f      	adds	r3, #63	; 0x3f
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	333f      	adds	r3, #63	; 0x3f
 8002c12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d12f      	bne.n	8002c78 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	3358      	adds	r3, #88	; 0x58
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d121      	bne.n	8002c78 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	335d      	adds	r3, #93	; 0x5d
 8002c44:	2203      	movs	r2, #3
 8002c46:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	0151      	lsls	r1, r2, #5
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	440a      	add	r2, r1
 8002c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fdcd 	bl	8006812 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	461a      	mov	r2, r3
 8002c86:	2310      	movs	r3, #16
 8002c88:	6093      	str	r3, [r2, #8]
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d119      	bne.n	8002cf6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	0151      	lsls	r1, r2, #5
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	440a      	add	r2, r1
 8002cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002cf4:	e33e      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d141      	bne.n	8002d90 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	333d      	adds	r3, #61	; 0x3d
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	f040 831f 	bne.w	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	333d      	adds	r3, #61	; 0x3d
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	440b      	add	r3, r1
 8002d58:	335c      	adds	r3, #92	; 0x5c
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	0151      	lsls	r1, r2, #5
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	440a      	add	r2, r1
 8002d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fd42 	bl	8006812 <USB_HC_Halt>
}
 8002d8e:	e2f1      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	d13f      	bne.n	8002e26 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	440b      	add	r3, r1
 8002db4:	335d      	adds	r3, #93	; 0x5d
 8002db6:	2204      	movs	r2, #4
 8002db8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	333d      	adds	r3, #61	; 0x3d
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	3358      	adds	r3, #88	; 0x58
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	0151      	lsls	r1, r2, #5
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	440a      	add	r2, r1
 8002df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 fd00 	bl	8006812 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2340      	movs	r3, #64	; 0x40
 8002e22:	6093      	str	r3, [r2, #8]
}
 8002e24:	e2a6      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3c:	d122      	bne.n	8002e84 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	0151      	lsls	r1, r2, #5
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	440a      	add	r2, r1
 8002e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 fcd2 	bl	8006812 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e80:	6093      	str	r3, [r2, #8]
}
 8002e82:	e277      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d135      	bne.n	8002f06 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3358      	adds	r3, #88	; 0x58
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	0151      	lsls	r1, r2, #5
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	440a      	add	r2, r1
 8002ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 fc9a 	bl	8006812 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	461a      	mov	r2, r3
 8002eec:	2301      	movs	r3, #1
 8002eee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	335d      	adds	r3, #93	; 0x5d
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
}
 8002f04:	e236      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d12b      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	0151      	lsls	r1, r2, #5
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	440a      	add	r2, r1
 8002f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fc5a 	bl	8006812 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	440b      	add	r3, r1
 8002f6c:	335d      	adds	r3, #93	; 0x5d
 8002f6e:	2205      	movs	r2, #5
 8002f70:	701a      	strb	r2, [r3, #0]
}
 8002f72:	e1ff      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d155      	bne.n	8003036 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	3358      	adds	r3, #88	; 0x58
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	335d      	adds	r3, #93	; 0x5d
 8002fae:	2203      	movs	r2, #3
 8002fb0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	333d      	adds	r3, #61	; 0x3d
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d114      	bne.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	333c      	adds	r3, #60	; 0x3c
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	440b      	add	r3, r1
 8002fec:	333d      	adds	r3, #61	; 0x3d
 8002fee:	2201      	movs	r2, #1
 8002ff0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	0151      	lsls	r1, r2, #5
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	440a      	add	r2, r1
 8003008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f003 fbf8 	bl	8006812 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	461a      	mov	r2, r3
 8003030:	2310      	movs	r3, #16
 8003032:	6093      	str	r3, [r2, #8]
}
 8003034:	e19e      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4413      	add	r3, r2
 800303e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d12b      	bne.n	80030a4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	0151      	lsls	r1, r2, #5
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	440a      	add	r2, r1
 8003062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003066:	f043 0302 	orr.w	r3, r3, #2
 800306a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fbcb 	bl	8006812 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	335d      	adds	r3, #93	; 0x5d
 800308c:	2206      	movs	r2, #6
 800308e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	461a      	mov	r2, r3
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	6093      	str	r3, [r2, #8]
}
 80030a2:	e167      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ba:	d135      	bne.n	8003128 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	0151      	lsls	r1, r2, #5
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	440a      	add	r2, r1
 80030d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fb93 	bl	8006812 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	461a      	mov	r2, r3
 80030fa:	2310      	movs	r3, #16
 80030fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	461a      	mov	r2, r3
 800310c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003110:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	335d      	adds	r3, #93	; 0x5d
 8003122:	2208      	movs	r2, #8
 8003124:	701a      	strb	r2, [r3, #0]
}
 8003126:	e125      	b.n	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	f040 811a 	bne.w	8003374 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	0151      	lsls	r1, r2, #5
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	440a      	add	r2, r1
 8003156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315a:	f023 0302 	bic.w	r3, r3, #2
 800315e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	335d      	adds	r3, #93	; 0x5d
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d137      	bne.n	80031e6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	335c      	adds	r3, #92	; 0x5c
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	440b      	add	r3, r1
 8003198:	333f      	adds	r3, #63	; 0x3f
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d00b      	beq.n	80031b8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	333f      	adds	r3, #63	; 0x3f
 80031b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	f040 80c5 	bne.w	8003342 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	3351      	adds	r3, #81	; 0x51
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2d8      	uxtb	r0, r3
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	3351      	adds	r3, #81	; 0x51
 80031e0:	4602      	mov	r2, r0
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e0ad      	b.n	8003342 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	335d      	adds	r3, #93	; 0x5d
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d10a      	bne.n	8003212 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	440b      	add	r3, r1
 800320a:	335c      	adds	r3, #92	; 0x5c
 800320c:	2202      	movs	r2, #2
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e097      	b.n	8003342 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	335d      	adds	r3, #93	; 0x5d
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d10a      	bne.n	800323e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	335c      	adds	r3, #92	; 0x5c
 8003238:	2202      	movs	r2, #2
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e081      	b.n	8003342 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	335d      	adds	r3, #93	; 0x5d
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d10a      	bne.n	800326a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	335c      	adds	r3, #92	; 0x5c
 8003264:	2205      	movs	r2, #5
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e06b      	b.n	8003342 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	440b      	add	r3, r1
 8003278:	335d      	adds	r3, #93	; 0x5d
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b06      	cmp	r3, #6
 800327e:	d00a      	beq.n	8003296 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	335d      	adds	r3, #93	; 0x5d
 8003290:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003292:	2b08      	cmp	r3, #8
 8003294:	d155      	bne.n	8003342 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	440b      	add	r3, r1
 80032a4:	3358      	adds	r3, #88	; 0x58
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	1c59      	adds	r1, r3, #1
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4403      	add	r3, r0
 80032b8:	3358      	adds	r3, #88	; 0x58
 80032ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	3358      	adds	r3, #88	; 0x58
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d914      	bls.n	80032fc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	3358      	adds	r3, #88	; 0x58
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	335c      	adds	r3, #92	; 0x5c
 80032f6:	2204      	movs	r2, #4
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e009      	b.n	8003310 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	335c      	adds	r3, #92	; 0x5c
 800330c:	2202      	movs	r2, #2
 800330e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003326:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800332e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	461a      	mov	r2, r3
 8003350:	2302      	movs	r3, #2
 8003352:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	b2d8      	uxtb	r0, r3
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	335c      	adds	r3, #92	; 0x5c
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	4601      	mov	r1, r0
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f00a feac 	bl	800e0cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003374:	bf00      	nop
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	0c5b      	lsrs	r3, r3, #17
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d003      	beq.n	80033c0 <HCD_RXQLVL_IRQHandler+0x44>
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	f000 8082 	beq.w	80034c2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033be:	e083      	b.n	80034c8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d07f      	beq.n	80034c6 <HCD_RXQLVL_IRQHandler+0x14a>
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	3344      	adds	r3, #68	; 0x44
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d074      	beq.n	80034c6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	3344      	adds	r3, #68	; 0x44
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	b292      	uxth	r2, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	f002 fdf3 	bl	8005fe2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	440b      	add	r3, r1
 800340a:	3344      	adds	r3, #68	; 0x44
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	18d1      	adds	r1, r2, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4403      	add	r3, r0
 8003420:	3344      	adds	r3, #68	; 0x44
 8003422:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	334c      	adds	r3, #76	; 0x4c
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	18d1      	adds	r1, r2, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4403      	add	r3, r0
 8003448:	334c      	adds	r3, #76	; 0x4c
 800344a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HCD_RXQLVL_IRQHandler+0x154>)
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d031      	beq.n	80034c6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003478:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003480:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	3350      	adds	r3, #80	; 0x50
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	f083 0301 	eor.w	r3, r3, #1
 80034aa:	b2d8      	uxtb	r0, r3
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	3350      	adds	r3, #80	; 0x50
 80034bc:	4602      	mov	r2, r0
 80034be:	701a      	strb	r2, [r3, #0]
      break;
 80034c0:	e001      	b.n	80034c6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80034c6:	bf00      	nop
  }
}
 80034c8:	bf00      	nop
 80034ca:	3728      	adds	r7, #40	; 0x28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	1ff80000 	.word	0x1ff80000

080034d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003500:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d10b      	bne.n	8003524 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b01      	cmp	r3, #1
 8003514:	d102      	bne.n	800351c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f00a fdbc 	bl	800e094 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f043 0302 	orr.w	r3, r3, #2
 8003522:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	d132      	bne.n	8003594 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f043 0308 	orr.w	r3, r3, #8
 8003534:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b04      	cmp	r3, #4
 800353e:	d126      	bne.n	800358e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d113      	bne.n	8003570 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800354e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003552:	d106      	bne.n	8003562 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2102      	movs	r1, #2
 800355a:	4618      	mov	r0, r3
 800355c:	f002 fe76 	bl	800624c <USB_InitFSLSPClkSel>
 8003560:	e011      	b.n	8003586 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f002 fe6f 	bl	800624c <USB_InitFSLSPClkSel>
 800356e:	e00a      	b.n	8003586 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800357e:	461a      	mov	r2, r3
 8003580:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003584:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f00a fdae 	bl	800e0e8 <HAL_HCD_PortEnabled_Callback>
 800358c:	e002      	b.n	8003594 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f00a fdb8 	bl	800e104 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b20      	cmp	r3, #32
 800359c:	d103      	bne.n	80035a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f043 0320 	orr.w	r3, r3, #32
 80035a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6013      	str	r3, [r2, #0]
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <HAL_HSEM_FastTake+0x2c>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3320      	adds	r3, #32
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_HSEM_FastTake+0x30>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e000      	b.n	80035da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	58026400 	.word	0x58026400
 80035ec:	80000300 	.word	0x80000300

080035f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80035fa:	4906      	ldr	r1, [pc, #24]	; (8003614 <HAL_HSEM_Release+0x24>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	58026400 	.word	0x58026400

08003618 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003620:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	2b06      	cmp	r3, #6
 800362a:	d00a      	beq.n	8003642 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800362c:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e040      	b.n	80036c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e03e      	b.n	80036c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003642:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800364a:	491f      	ldr	r1, [pc, #124]	; (80036c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4313      	orrs	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003652:	f7fd ffcb 	bl	80015ec <HAL_GetTick>
 8003656:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003658:	e009      	b.n	800366e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800365a:	f7fd ffc7 	bl	80015ec <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003668:	d901      	bls.n	800366e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e028      	b.n	80036c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800366e:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367a:	d1ee      	bne.n	800365a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b1e      	cmp	r3, #30
 8003680:	d008      	beq.n	8003694 <HAL_PWREx_ConfigSupply+0x7c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b2e      	cmp	r3, #46	; 0x2e
 8003686:	d005      	beq.n	8003694 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b1d      	cmp	r3, #29
 800368c:	d002      	beq.n	8003694 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b2d      	cmp	r3, #45	; 0x2d
 8003692:	d114      	bne.n	80036be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003694:	f7fd ffaa 	bl	80015ec <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800369a:	e009      	b.n	80036b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800369c:	f7fd ffa6 	bl	80015ec <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036aa:	d901      	bls.n	80036b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e007      	b.n	80036c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	d1ee      	bne.n	800369c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	58024800 	.word	0x58024800

080036cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	; 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e3ff      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8087 	beq.w	80037fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ec:	4b99      	ldr	r3, [pc, #612]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036f6:	4b97      	ldr	r3, [pc, #604]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d007      	beq.n	8003712 <HAL_RCC_OscConfig+0x46>
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	2b18      	cmp	r3, #24
 8003706:	d110      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d10b      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003712:	4b90      	ldr	r3, [pc, #576]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d06c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x12c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d168      	bne.n	80037f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e3d9      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x76>
 8003734:	4b87      	ldr	r3, [pc, #540]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a86      	ldr	r2, [pc, #536]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e02e      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x98>
 800374a:	4b82      	ldr	r3, [pc, #520]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a81      	ldr	r2, [pc, #516]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b7f      	ldr	r3, [pc, #508]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7e      	ldr	r2, [pc, #504]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800375c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e01d      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0xbc>
 800376e:	4b79      	ldr	r3, [pc, #484]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a78      	ldr	r2, [pc, #480]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a75      	ldr	r2, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e00b      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003788:	4b72      	ldr	r3, [pc, #456]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a71      	ldr	r2, [pc, #452]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b6f      	ldr	r3, [pc, #444]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a6e      	ldr	r2, [pc, #440]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800379a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd ff20 	bl	80015ec <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fd ff1c 	bl	80015ec <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e38d      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037c2:	4b64      	ldr	r3, [pc, #400]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0xe4>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fd ff0c 	bl	80015ec <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fd ff08 	bl	80015ec <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e379      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037ea:	4b5a      	ldr	r3, [pc, #360]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x10c>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80ae 	beq.w	8003964 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003808:	4b52      	ldr	r3, [pc, #328]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003810:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003812:	4b50      	ldr	r3, [pc, #320]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_RCC_OscConfig+0x162>
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	2b18      	cmp	r3, #24
 8003822:	d13a      	bne.n	800389a <HAL_RCC_OscConfig+0x1ce>
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d135      	bne.n	800389a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800382e:	4b49      	ldr	r3, [pc, #292]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RCC_OscConfig+0x17a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e34b      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003846:	f7fd feff 	bl	8001648 <HAL_GetREVID>
 800384a:	4602      	mov	r2, r0
 800384c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003850:	429a      	cmp	r2, r3
 8003852:	d817      	bhi.n	8003884 <HAL_RCC_OscConfig+0x1b8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d108      	bne.n	800386e <HAL_RCC_OscConfig+0x1a2>
 800385c:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003864:	4a3b      	ldr	r2, [pc, #236]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386c:	e07a      	b.n	8003964 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	4b39      	ldr	r3, [pc, #228]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	031b      	lsls	r3, r3, #12
 800387c:	4935      	ldr	r1, [pc, #212]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003882:	e06f      	b.n	8003964 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	4930      	ldr	r1, [pc, #192]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	e064      	b.n	8003964 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d045      	beq.n	800392e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038a2:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 0219 	bic.w	r2, r3, #25
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	4929      	ldr	r1, [pc, #164]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fe9a 	bl	80015ec <HAL_GetTick>
 80038b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fd fe96 	bl	80015ec <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e307      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ce:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	f7fd feb5 	bl	8001648 <HAL_GetREVID>
 80038de:	4602      	mov	r2, r0
 80038e0:	f241 0303 	movw	r3, #4099	; 0x1003
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d817      	bhi.n	8003918 <HAL_RCC_OscConfig+0x24c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d108      	bne.n	8003902 <HAL_RCC_OscConfig+0x236>
 80038f0:	4b18      	ldr	r3, [pc, #96]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038f8:	4a16      	ldr	r2, [pc, #88]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 80038fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fe:	6053      	str	r3, [r2, #4]
 8003900:	e030      	b.n	8003964 <HAL_RCC_OscConfig+0x298>
 8003902:	4b14      	ldr	r3, [pc, #80]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	031b      	lsls	r3, r3, #12
 8003910:	4910      	ldr	r1, [pc, #64]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
 8003916:	e025      	b.n	8003964 <HAL_RCC_OscConfig+0x298>
 8003918:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	490b      	ldr	r1, [pc, #44]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
 800392c:	e01a      	b.n	8003964 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a08      	ldr	r2, [pc, #32]	; (8003954 <HAL_RCC_OscConfig+0x288>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fd fe57 	bl	80015ec <HAL_GetTick>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003942:	f7fd fe53 	bl	80015ec <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d903      	bls.n	8003958 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e2c4      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
 8003954:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003958:	4ba4      	ldr	r3, [pc, #656]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ee      	bne.n	8003942 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a9 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003972:	4b9e      	ldr	r3, [pc, #632]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800397a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800397c:	4b9b      	ldr	r3, [pc, #620]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d007      	beq.n	8003998 <HAL_RCC_OscConfig+0x2cc>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b18      	cmp	r3, #24
 800398c:	d13a      	bne.n	8003a04 <HAL_RCC_OscConfig+0x338>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d135      	bne.n	8003a04 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003998:	4b94      	ldr	r3, [pc, #592]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_OscConfig+0x2e4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e296      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039b0:	f7fd fe4a 	bl	8001648 <HAL_GetREVID>
 80039b4:	4602      	mov	r2, r0
 80039b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d817      	bhi.n	80039ee <HAL_RCC_OscConfig+0x322>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d108      	bne.n	80039d8 <HAL_RCC_OscConfig+0x30c>
 80039c6:	4b89      	ldr	r3, [pc, #548]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039ce:	4a87      	ldr	r2, [pc, #540]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 80039d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039d6:	e075      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d8:	4b84      	ldr	r3, [pc, #528]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	069b      	lsls	r3, r3, #26
 80039e6:	4981      	ldr	r1, [pc, #516]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ec:	e06a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ee:	4b7f      	ldr	r3, [pc, #508]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	497b      	ldr	r1, [pc, #492]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a02:	e05f      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d042      	beq.n	8003a92 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a0c:	4b77      	ldr	r3, [pc, #476]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a76      	ldr	r2, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fd fde8 	bl	80015ec <HAL_GetTick>
 8003a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a20:	f7fd fde4 	bl	80015ec <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e255      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a32:	4b6e      	ldr	r3, [pc, #440]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a3e:	f7fd fe03 	bl	8001648 <HAL_GetREVID>
 8003a42:	4602      	mov	r2, r0
 8003a44:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d817      	bhi.n	8003a7c <HAL_RCC_OscConfig+0x3b0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d108      	bne.n	8003a66 <HAL_RCC_OscConfig+0x39a>
 8003a54:	4b65      	ldr	r3, [pc, #404]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a5c:	4a63      	ldr	r2, [pc, #396]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a62:	6053      	str	r3, [r2, #4]
 8003a64:	e02e      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3f8>
 8003a66:	4b61      	ldr	r3, [pc, #388]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	069b      	lsls	r3, r3, #26
 8003a74:	495d      	ldr	r1, [pc, #372]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
 8003a7a:	e023      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3f8>
 8003a7c:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	4958      	ldr	r1, [pc, #352]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60cb      	str	r3, [r1, #12]
 8003a90:	e018      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a92:	4b56      	ldr	r3, [pc, #344]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a55      	ldr	r2, [pc, #340]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fd fda5 	bl	80015ec <HAL_GetTick>
 8003aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003aa6:	f7fd fda1 	bl	80015ec <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e212      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d036      	beq.n	8003b3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d019      	beq.n	8003b0c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad8:	4b44      	ldr	r3, [pc, #272]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003adc:	4a43      	ldr	r2, [pc, #268]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7fd fd82 	bl	80015ec <HAL_GetTick>
 8003ae8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fd fd7e 	bl	80015ec <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e1ef      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x420>
 8003b0a:	e018      	b.n	8003b3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0c:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b10:	4a36      	ldr	r2, [pc, #216]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd fd68 	bl	80015ec <HAL_GetTick>
 8003b1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fd fd64 	bl	80015ec <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e1d5      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d036      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d019      	beq.n	8003b86 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b52:	4b26      	ldr	r3, [pc, #152]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a25      	ldr	r2, [pc, #148]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fd45 	bl	80015ec <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b66:	f7fd fd41 	bl	80015ec <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e1b2      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b78:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x49a>
 8003b84:	e018      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b86:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a18      	ldr	r2, [pc, #96]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b92:	f7fd fd2b 	bl	80015ec <HAL_GetTick>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b9a:	f7fd fd27 	bl	80015ec <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e198      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <HAL_RCC_OscConfig+0x520>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8085 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <HAL_RCC_OscConfig+0x524>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a09      	ldr	r2, [pc, #36]	; (8003bf0 <HAL_RCC_OscConfig+0x524>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd2:	f7fd fd0b 	bl	80015ec <HAL_GetTick>
 8003bd6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd8:	e00c      	b.n	8003bf4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bda:	f7fd fd07 	bl	80015ec <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b64      	cmp	r3, #100	; 0x64
 8003be6:	d905      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e178      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf4:	4b96      	ldr	r3, [pc, #600]	; (8003e50 <HAL_RCC_OscConfig+0x784>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ec      	beq.n	8003bda <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x54a>
 8003c08:	4b92      	ldr	r3, [pc, #584]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a91      	ldr	r2, [pc, #580]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
 8003c14:	e02d      	b.n	8003c72 <HAL_RCC_OscConfig+0x5a6>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x56c>
 8003c1e:	4b8d      	ldr	r3, [pc, #564]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a8c      	ldr	r2, [pc, #560]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2a:	4b8a      	ldr	r3, [pc, #552]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a89      	ldr	r2, [pc, #548]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	e01c      	b.n	8003c72 <HAL_RCC_OscConfig+0x5a6>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d10c      	bne.n	8003c5a <HAL_RCC_OscConfig+0x58e>
 8003c40:	4b84      	ldr	r3, [pc, #528]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a83      	ldr	r2, [pc, #524]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4c:	4b81      	ldr	r3, [pc, #516]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a80      	ldr	r2, [pc, #512]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	e00b      	b.n	8003c72 <HAL_RCC_OscConfig+0x5a6>
 8003c5a:	4b7e      	ldr	r3, [pc, #504]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a7d      	ldr	r2, [pc, #500]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	4b7b      	ldr	r3, [pc, #492]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a7a      	ldr	r2, [pc, #488]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c6c:	f023 0304 	bic.w	r3, r3, #4
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d015      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fd fcb7 	bl	80015ec <HAL_GetTick>
 8003c7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fd fcb3 	bl	80015ec <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e122      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c98:	4b6e      	ldr	r3, [pc, #440]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ee      	beq.n	8003c82 <HAL_RCC_OscConfig+0x5b6>
 8003ca4:	e014      	b.n	8003cd0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fca1 	bl	80015ec <HAL_GetTick>
 8003caa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd fc9d 	bl	80015ec <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e10c      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cc4:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ee      	bne.n	8003cae <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8101 	beq.w	8003edc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cda:	4b5e      	ldr	r3, [pc, #376]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ce2:	2b18      	cmp	r3, #24
 8003ce4:	f000 80bc 	beq.w	8003e60 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	f040 8095 	bne.w	8003e1c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a57      	ldr	r2, [pc, #348]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fd fc75 	bl	80015ec <HAL_GetTick>
 8003d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fd fc71 	bl	80015ec <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e0e2      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d18:	4b4e      	ldr	r3, [pc, #312]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCC_OscConfig+0x78c>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d34:	0112      	lsls	r2, r2, #4
 8003d36:	430a      	orrs	r2, r1
 8003d38:	4946      	ldr	r1, [pc, #280]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	628b      	str	r3, [r1, #40]	; 0x28
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	3b01      	subs	r3, #1
 8003d44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	025b      	lsls	r3, r3, #9
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	3b01      	subs	r3, #1
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d6e:	4939      	ldr	r1, [pc, #228]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d74:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a36      	ldr	r2, [pc, #216]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d80:	4b34      	ldr	r3, [pc, #208]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d84:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <HAL_RCC_OscConfig+0x790>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d8c:	00d2      	lsls	r2, r2, #3
 8003d8e:	4931      	ldr	r1, [pc, #196]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d94:	4b2f      	ldr	r3, [pc, #188]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f023 020c 	bic.w	r2, r3, #12
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	492c      	ldr	r1, [pc, #176]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003da6:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f023 0202 	bic.w	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	4928      	ldr	r1, [pc, #160]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003db8:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc4:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	4a22      	ldr	r2, [pc, #136]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003dd0:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a1c      	ldr	r2, [pc, #112]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de8:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fd fbfa 	bl	80015ec <HAL_GetTick>
 8003df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fd fbf6 	bl	80015ec <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e067      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x730>
 8003e1a:	e05f      	b.n	8003edc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a0c      	ldr	r2, [pc, #48]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd fbe0 	bl	80015ec <HAL_GetTick>
 8003e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd fbdc 	bl	80015ec <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e04d      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e42:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <HAL_RCC_OscConfig+0x788>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x764>
 8003e4e:	e045      	b.n	8003edc <HAL_RCC_OscConfig+0x810>
 8003e50:	58024800 	.word	0x58024800
 8003e54:	58024400 	.word	0x58024400
 8003e58:	fffffc0c 	.word	0xfffffc0c
 8003e5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e60:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <HAL_RCC_OscConfig+0x81c>)
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_RCC_OscConfig+0x81c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d031      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d12a      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d122      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d11a      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	0a5b      	lsrs	r3, r3, #9
 8003ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d108      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	0e1b      	lsrs	r3, r3, #24
 8003eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3730      	adds	r7, #48	; 0x30
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400

08003eec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e19c      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f00:	4b8a      	ldr	r3, [pc, #552]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d910      	bls.n	8003f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b87      	ldr	r3, [pc, #540]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 020f 	bic.w	r2, r3, #15
 8003f16:	4985      	ldr	r1, [pc, #532]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b83      	ldr	r3, [pc, #524]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e184      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d908      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f4c:	4b78      	ldr	r3, [pc, #480]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	4975      	ldr	r1, [pc, #468]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d010      	beq.n	8003f8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	4b70      	ldr	r3, [pc, #448]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d908      	bls.n	8003f8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f7a:	4b6d      	ldr	r3, [pc, #436]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	496a      	ldr	r1, [pc, #424]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	4b64      	ldr	r3, [pc, #400]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d908      	bls.n	8003fba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	495e      	ldr	r1, [pc, #376]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d010      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	4b59      	ldr	r3, [pc, #356]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d908      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4953      	ldr	r1, [pc, #332]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	4b4d      	ldr	r3, [pc, #308]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	429a      	cmp	r2, r3
 8004002:	d908      	bls.n	8004016 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b4a      	ldr	r3, [pc, #296]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f023 020f 	bic.w	r2, r3, #15
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4947      	ldr	r1, [pc, #284]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004012:	4313      	orrs	r3, r2
 8004014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d055      	beq.n	80040ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004022:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4940      	ldr	r1, [pc, #256]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004030:	4313      	orrs	r3, r2
 8004032:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d107      	bne.n	800404c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800403c:	4b3c      	ldr	r3, [pc, #240]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d121      	bne.n	800408c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0f6      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d107      	bne.n	8004064 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004054:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d115      	bne.n	800408c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0ea      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d107      	bne.n	800407c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800406c:	4b30      	ldr	r3, [pc, #192]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0de      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407c:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0d6      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800408c:	4b28      	ldr	r3, [pc, #160]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f023 0207 	bic.w	r2, r3, #7
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4925      	ldr	r1, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fd faa5 	bl	80015ec <HAL_GetTick>
 80040a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a6:	f7fd faa1 	bl	80015ec <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0be      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040bc:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d1eb      	bne.n	80040a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d010      	beq.n	80040fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d208      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ea:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f023 020f 	bic.w	r2, r3, #15
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	490e      	ldr	r1, [pc, #56]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d214      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 020f 	bic.w	r2, r3, #15
 8004112:	4906      	ldr	r1, [pc, #24]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d005      	beq.n	8004134 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e086      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
 800412c:	52002000 	.word	0x52002000
 8004130:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d010      	beq.n	8004162 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800414c:	429a      	cmp	r2, r3
 800414e:	d208      	bcs.n	8004162 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004150:	4b3c      	ldr	r3, [pc, #240]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	4939      	ldr	r1, [pc, #228]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 800415e:	4313      	orrs	r3, r2
 8004160:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	4b34      	ldr	r3, [pc, #208]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800417a:	429a      	cmp	r2, r3
 800417c:	d208      	bcs.n	8004190 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800417e:	4b31      	ldr	r3, [pc, #196]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	492e      	ldr	r1, [pc, #184]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 800418c:	4313      	orrs	r3, r2
 800418e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	4b28      	ldr	r3, [pc, #160]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d208      	bcs.n	80041be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4922      	ldr	r1, [pc, #136]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d010      	beq.n	80041ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d208      	bcs.n	80041ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041da:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	4917      	ldr	r1, [pc, #92]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041ec:	f000 f834 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 80041f0:	4601      	mov	r1, r0
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	4a12      	ldr	r2, [pc, #72]	; (8004248 <HAL_RCC_ClockConfig+0x35c>)
 80041fe:	5cd3      	ldrb	r3, [r2, r3]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa21 f303 	lsr.w	r3, r1, r3
 8004208:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <HAL_RCC_ClockConfig+0x35c>)
 8004214:	5cd3      	ldrb	r3, [r2, r3]
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x360>)
 8004222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004224:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <HAL_RCC_ClockConfig+0x364>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_RCC_ClockConfig+0x368>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd f992 	bl	8001558 <HAL_InitTick>
 8004234:	4603      	mov	r3, r0
 8004236:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	58024400 	.word	0x58024400
 8004248:	0800f428 	.word	0x0800f428
 800424c:	20000004 	.word	0x20000004
 8004250:	20000000 	.word	0x20000000
 8004254:	20000008 	.word	0x20000008

08004258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	; 0x24
 800425c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425e:	4baf      	ldr	r3, [pc, #700]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004266:	2b18      	cmp	r3, #24
 8004268:	f200 814e 	bhi.w	8004508 <HAL_RCC_GetSysClockFreq+0x2b0>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <HAL_RCC_GetSysClockFreq+0x1c>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	080042d9 	.word	0x080042d9
 8004278:	08004509 	.word	0x08004509
 800427c:	08004509 	.word	0x08004509
 8004280:	08004509 	.word	0x08004509
 8004284:	08004509 	.word	0x08004509
 8004288:	08004509 	.word	0x08004509
 800428c:	08004509 	.word	0x08004509
 8004290:	08004509 	.word	0x08004509
 8004294:	080042ff 	.word	0x080042ff
 8004298:	08004509 	.word	0x08004509
 800429c:	08004509 	.word	0x08004509
 80042a0:	08004509 	.word	0x08004509
 80042a4:	08004509 	.word	0x08004509
 80042a8:	08004509 	.word	0x08004509
 80042ac:	08004509 	.word	0x08004509
 80042b0:	08004509 	.word	0x08004509
 80042b4:	08004305 	.word	0x08004305
 80042b8:	08004509 	.word	0x08004509
 80042bc:	08004509 	.word	0x08004509
 80042c0:	08004509 	.word	0x08004509
 80042c4:	08004509 	.word	0x08004509
 80042c8:	08004509 	.word	0x08004509
 80042cc:	08004509 	.word	0x08004509
 80042d0:	08004509 	.word	0x08004509
 80042d4:	0800430b 	.word	0x0800430b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042d8:	4b90      	ldr	r3, [pc, #576]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042e4:	4b8d      	ldr	r3, [pc, #564]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	4a8c      	ldr	r2, [pc, #560]	; (8004520 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
 80042f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042f6:	e10a      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042f8:	4b89      	ldr	r3, [pc, #548]	; (8004520 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80042fa:	61bb      	str	r3, [r7, #24]
    break;
 80042fc:	e107      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042fe:	4b89      	ldr	r3, [pc, #548]	; (8004524 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004300:	61bb      	str	r3, [r7, #24]
    break;
 8004302:	e104      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004304:	4b88      	ldr	r3, [pc, #544]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004306:	61bb      	str	r3, [r7, #24]
    break;
 8004308:	e101      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800430a:	4b84      	ldr	r3, [pc, #528]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004314:	4b81      	ldr	r3, [pc, #516]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004320:	4b7e      	ldr	r3, [pc, #504]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800432a:	4b7c      	ldr	r3, [pc, #496]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	08db      	lsrs	r3, r3, #3
 8004330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80da 	beq.w	8004502 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d05a      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0x1b2>
 8004354:	2b01      	cmp	r3, #1
 8004356:	d302      	bcc.n	800435e <HAL_RCC_GetSysClockFreq+0x106>
 8004358:	2b02      	cmp	r3, #2
 800435a:	d078      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x1f6>
 800435c:	e099      	b.n	8004492 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800435e:	4b6f      	ldr	r3, [pc, #444]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d02d      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800436a:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	08db      	lsrs	r3, r3, #3
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	4a6a      	ldr	r2, [pc, #424]	; (8004520 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004376:	fa22 f303 	lsr.w	r3, r2, r3
 800437a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	ee07 3a90 	vmov	s15, r3
 800438c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80043a8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800452c <HAL_RCC_GetSysClockFreq+0x2d4>
 80043ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80043c4:	e087      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004530 <HAL_RCC_GetSysClockFreq+0x2d8>
 80043d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e0:	ee07 3a90 	vmov	s15, r3
 80043e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ec:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800452c <HAL_RCC_GetSysClockFreq+0x2d4>
 80043f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004404:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004408:	e065      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	ee07 3a90 	vmov	s15, r3
 8004410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004414:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004534 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441c:	4b3f      	ldr	r3, [pc, #252]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004430:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800452c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004448:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800444c:	e043      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	ee07 3a90 	vmov	s15, r3
 8004454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004458:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004538 <HAL_RCC_GetSysClockFreq+0x2e0>
 800445c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004460:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004468:	ee07 3a90 	vmov	s15, r3
 800446c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004470:	ed97 6a02 	vldr	s12, [r7, #8]
 8004474:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800452c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004490:	e021      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004534 <HAL_RCC_GetSysClockFreq+0x2dc>
 80044a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ac:	ee07 3a90 	vmov	s15, r3
 80044b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80044b8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800452c <HAL_RCC_GetSysClockFreq+0x2d4>
 80044bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044d4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	0a5b      	lsrs	r3, r3, #9
 80044dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e0:	3301      	adds	r3, #1
 80044e2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80044f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044fa:	ee17 3a90 	vmov	r3, s15
 80044fe:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004500:	e005      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
    break;
 8004506:	e002      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800450a:	61bb      	str	r3, [r7, #24]
    break;
 800450c:	bf00      	nop
  }

  return sysclockfreq;
 800450e:	69bb      	ldr	r3, [r7, #24]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3724      	adds	r7, #36	; 0x24
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	58024400 	.word	0x58024400
 8004520:	03d09000 	.word	0x03d09000
 8004524:	003d0900 	.word	0x003d0900
 8004528:	017d7840 	.word	0x017d7840
 800452c:	46000000 	.word	0x46000000
 8004530:	4c742400 	.word	0x4c742400
 8004534:	4a742400 	.word	0x4a742400
 8004538:	4bbebc20 	.word	0x4bbebc20

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004542:	f7ff fe89 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 8004546:	4601      	mov	r1, r0
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <HAL_RCC_GetHCLKFreq+0x50>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	4a0f      	ldr	r2, [pc, #60]	; (8004590 <HAL_RCC_GetHCLKFreq+0x54>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	fa21 f303 	lsr.w	r3, r1, r3
 800455e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004560:	4b0a      	ldr	r3, [pc, #40]	; (800458c <HAL_RCC_GetHCLKFreq+0x50>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <HAL_RCC_GetHCLKFreq+0x54>)
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	fa22 f303 	lsr.w	r3, r2, r3
 8004576:	4a07      	ldr	r2, [pc, #28]	; (8004594 <HAL_RCC_GetHCLKFreq+0x58>)
 8004578:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800457a:	4a07      	ldr	r2, [pc, #28]	; (8004598 <HAL_RCC_GetHCLKFreq+0x5c>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <HAL_RCC_GetHCLKFreq+0x58>)
 8004582:	681b      	ldr	r3, [r3, #0]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	58024400 	.word	0x58024400
 8004590:	0800f428 	.word	0x0800f428
 8004594:	20000004 	.word	0x20000004
 8004598:	20000000 	.word	0x20000000

0800459c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045a0:	f7ff ffcc 	bl	800453c <HAL_RCC_GetHCLKFreq>
 80045a4:	4601      	mov	r1, r0
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	58024400 	.word	0x58024400
 80045c4:	0800f428 	.word	0x0800f428

080045c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045cc:	f7ff ffb6 	bl	800453c <HAL_RCC_GetHCLKFreq>
 80045d0:	4601      	mov	r1, r0
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045de:	5cd3      	ldrb	r3, [r2, r3]
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	58024400 	.word	0x58024400
 80045f0:	0800f428 	.word	0x0800f428

080045f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045f8:	f7ff ffa0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 80045fc:	4601      	mov	r1, r0
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4a04      	ldr	r2, [pc, #16]	; (800461c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800460a:	5cd3      	ldrb	r3, [r2, r3]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	58024400 	.word	0x58024400
 800461c:	0800f428 	.word	0x0800f428

08004620 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004628:	4b9d      	ldr	r3, [pc, #628]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004632:	4b9b      	ldr	r3, [pc, #620]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	0b1b      	lsrs	r3, r3, #12
 8004638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800463c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800463e:	4b98      	ldr	r3, [pc, #608]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800464a:	4b95      	ldr	r3, [pc, #596]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	08db      	lsrs	r3, r3, #3
 8004650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004662:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 810a 	beq.w	8004882 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d05a      	beq.n	800472a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004674:	2b01      	cmp	r3, #1
 8004676:	d302      	bcc.n	800467e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004678:	2b02      	cmp	r3, #2
 800467a:	d078      	beq.n	800476e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800467c:	e099      	b.n	80047b2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467e:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d02d      	beq.n	80046e6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800468a:	4b85      	ldr	r3, [pc, #532]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	08db      	lsrs	r3, r3, #3
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	4a83      	ldr	r2, [pc, #524]	; (80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004696:	fa22 f303 	lsr.w	r3, r2, r3
 800469a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	ee07 3a90 	vmov	s15, r3
 80046ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b4:	4b7a      	ldr	r3, [pc, #488]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046bc:	ee07 3a90 	vmov	s15, r3
 80046c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046e4:	e087      	b.n	80047f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80046f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f8:	4b69      	ldr	r3, [pc, #420]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004700:	ee07 3a90 	vmov	s15, r3
 8004704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004708:	ed97 6a03 	vldr	s12, [r7, #12]
 800470c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004728:	e065      	b.n	80047f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004734:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473c:	4b58      	ldr	r3, [pc, #352]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004750:	eddf 5a55 	vldr	s11, [pc, #340]	; 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004768:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800476c:	e043      	b.n	80047f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	ee07 3a90 	vmov	s15, r3
 8004774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004778:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800477c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004780:	4b47      	ldr	r3, [pc, #284]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004790:	ed97 6a03 	vldr	s12, [r7, #12]
 8004794:	eddf 5a44 	vldr	s11, [pc, #272]	; 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047b0:	e021      	b.n	80047f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047bc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80047c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c4:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80047dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047f4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80047f6:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	0a5b      	lsrs	r3, r3, #9
 80047fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800480c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004810:	edd7 6a07 	vldr	s13, [r7, #28]
 8004814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481c:	ee17 2a90 	vmov	r2, s15
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004824:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800483a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800483e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800484a:	ee17 2a90 	vmov	r2, s15
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004852:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	0e1b      	lsrs	r3, r3, #24
 8004858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800486c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004878:	ee17 2a90 	vmov	r2, s15
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004880:	e008      	b.n	8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
}
 8004894:	bf00      	nop
 8004896:	3724      	adds	r7, #36	; 0x24
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	58024400 	.word	0x58024400
 80048a4:	03d09000 	.word	0x03d09000
 80048a8:	46000000 	.word	0x46000000
 80048ac:	4c742400 	.word	0x4c742400
 80048b0:	4a742400 	.word	0x4a742400
 80048b4:	4bbebc20 	.word	0x4bbebc20

080048b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	; 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048c0:	4b9d      	ldr	r3, [pc, #628]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80048ca:	4b9b      	ldr	r3, [pc, #620]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	0d1b      	lsrs	r3, r3, #20
 80048d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048d6:	4b98      	ldr	r3, [pc, #608]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048e2:	4b95      	ldr	r3, [pc, #596]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	08db      	lsrs	r3, r3, #3
 80048e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 810a 	beq.w	8004b1a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d05a      	beq.n	80049c2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800490c:	2b01      	cmp	r3, #1
 800490e:	d302      	bcc.n	8004916 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004910:	2b02      	cmp	r3, #2
 8004912:	d078      	beq.n	8004a06 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004914:	e099      	b.n	8004a4a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004916:	4b88      	ldr	r3, [pc, #544]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d02d      	beq.n	800497e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004922:	4b85      	ldr	r3, [pc, #532]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	08db      	lsrs	r3, r3, #3
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	4a83      	ldr	r2, [pc, #524]	; (8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	ee07 3a90 	vmov	s15, r3
 8004944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494c:	4b7a      	ldr	r3, [pc, #488]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004960:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004978:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800497c:	e087      	b.n	8004a8e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004988:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800498c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004990:	4b69      	ldr	r3, [pc, #420]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049c0:	e065      	b.n	8004a8e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049cc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80049d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d4:	4b58      	ldr	r3, [pc, #352]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a04:	e043      	b.n	8004a8e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a10:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a18:	4b47      	ldr	r3, [pc, #284]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a28:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a2c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a48:	e021      	b.n	8004a8e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a54:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5c:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a64:	ee07 3a90 	vmov	s15, r3
 8004a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a70:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a8c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a8e:	4b2a      	ldr	r3, [pc, #168]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	0a5b      	lsrs	r3, r3, #9
 8004a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab4:	ee17 2a90 	vmov	r2, s15
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004abc:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae2:	ee17 2a90 	vmov	r2, s15
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	0e1b      	lsrs	r3, r3, #24
 8004af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b10:	ee17 2a90 	vmov	r2, s15
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b18:	e008      	b.n	8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	609a      	str	r2, [r3, #8]
}
 8004b2c:	bf00      	nop
 8004b2e:	3724      	adds	r7, #36	; 0x24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	03d09000 	.word	0x03d09000
 8004b40:	46000000 	.word	0x46000000
 8004b44:	4c742400 	.word	0x4c742400
 8004b48:	4a742400 	.word	0x4a742400
 8004b4c:	4bbebc20 	.word	0x4bbebc20

08004b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e042      	b.n	8004be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fc fbd5 	bl	8001324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2224      	movs	r2, #36	; 0x24
 8004b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8c2 	bl	8004d1c <UART_SetConfig>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e022      	b.n	8004be8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fe66 	bl	800587c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 feed 	bl	80059c0 <UART_CheckIdleState>
 8004be6:	4603      	mov	r3, r0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	f040 8083 	bne.w	8004d12 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_UART_Transmit+0x28>
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e07b      	b.n	8004d14 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_UART_Transmit+0x3a>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e074      	b.n	8004d14 <HAL_UART_Transmit+0x124>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2221      	movs	r2, #33	; 0x21
 8004c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c42:	f7fc fcd3 	bl	80015ec <HAL_GetTick>
 8004c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	d108      	bne.n	8004c74 <HAL_UART_Transmit+0x84>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	e003      	b.n	8004c7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004c84:	e02c      	b.n	8004ce0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2180      	movs	r1, #128	; 0x80
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fedd 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e039      	b.n	8004d14 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3302      	adds	r3, #2
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e007      	b.n	8004cce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1cc      	bne.n	8004c86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2140      	movs	r1, #64	; 0x40
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 feaa 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e006      	b.n	8004d14 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3720      	adds	r7, #32
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d1c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004d20:	b08e      	sub	sp, #56	; 0x38
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4bc1      	ldr	r3, [pc, #772]	; (800505c <UART_SetConfig+0x340>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4ab7      	ldr	r2, [pc, #732]	; (8005060 <UART_SetConfig+0x344>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d004      	beq.n	8004d92 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	4bb2      	ldr	r3, [pc, #712]	; (8005064 <UART_SetConfig+0x348>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004da2:	430b      	orrs	r3, r1
 8004da4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	f023 010f 	bic.w	r1, r3, #15
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4aa9      	ldr	r2, [pc, #676]	; (8005068 <UART_SetConfig+0x34c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d177      	bne.n	8004eb6 <UART_SetConfig+0x19a>
 8004dc6:	4ba9      	ldr	r3, [pc, #676]	; (800506c <UART_SetConfig+0x350>)
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dce:	2b28      	cmp	r3, #40	; 0x28
 8004dd0:	d86c      	bhi.n	8004eac <UART_SetConfig+0x190>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <UART_SetConfig+0xbc>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004e7d 	.word	0x08004e7d
 8004ddc:	08004ead 	.word	0x08004ead
 8004de0:	08004ead 	.word	0x08004ead
 8004de4:	08004ead 	.word	0x08004ead
 8004de8:	08004ead 	.word	0x08004ead
 8004dec:	08004ead 	.word	0x08004ead
 8004df0:	08004ead 	.word	0x08004ead
 8004df4:	08004ead 	.word	0x08004ead
 8004df8:	08004e85 	.word	0x08004e85
 8004dfc:	08004ead 	.word	0x08004ead
 8004e00:	08004ead 	.word	0x08004ead
 8004e04:	08004ead 	.word	0x08004ead
 8004e08:	08004ead 	.word	0x08004ead
 8004e0c:	08004ead 	.word	0x08004ead
 8004e10:	08004ead 	.word	0x08004ead
 8004e14:	08004ead 	.word	0x08004ead
 8004e18:	08004e8d 	.word	0x08004e8d
 8004e1c:	08004ead 	.word	0x08004ead
 8004e20:	08004ead 	.word	0x08004ead
 8004e24:	08004ead 	.word	0x08004ead
 8004e28:	08004ead 	.word	0x08004ead
 8004e2c:	08004ead 	.word	0x08004ead
 8004e30:	08004ead 	.word	0x08004ead
 8004e34:	08004ead 	.word	0x08004ead
 8004e38:	08004e95 	.word	0x08004e95
 8004e3c:	08004ead 	.word	0x08004ead
 8004e40:	08004ead 	.word	0x08004ead
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004ead 	.word	0x08004ead
 8004e4c:	08004ead 	.word	0x08004ead
 8004e50:	08004ead 	.word	0x08004ead
 8004e54:	08004ead 	.word	0x08004ead
 8004e58:	08004e9d 	.word	0x08004e9d
 8004e5c:	08004ead 	.word	0x08004ead
 8004e60:	08004ead 	.word	0x08004ead
 8004e64:	08004ead 	.word	0x08004ead
 8004e68:	08004ead 	.word	0x08004ead
 8004e6c:	08004ead 	.word	0x08004ead
 8004e70:	08004ead 	.word	0x08004ead
 8004e74:	08004ead 	.word	0x08004ead
 8004e78:	08004ea5 	.word	0x08004ea5
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e82:	e233      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004e84:	2304      	movs	r3, #4
 8004e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e8a:	e22f      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e92:	e22b      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e9a:	e227      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004e9c:	2320      	movs	r3, #32
 8004e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ea2:	e223      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004ea4:	2340      	movs	r3, #64	; 0x40
 8004ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eaa:	e21f      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eb2:	bf00      	nop
 8004eb4:	e21a      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6d      	ldr	r2, [pc, #436]	; (8005070 <UART_SetConfig+0x354>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d132      	bne.n	8004f26 <UART_SetConfig+0x20a>
 8004ec0:	4b6a      	ldr	r3, [pc, #424]	; (800506c <UART_SetConfig+0x350>)
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	2b05      	cmp	r3, #5
 8004eca:	d827      	bhi.n	8004f1c <UART_SetConfig+0x200>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <UART_SetConfig+0x1b8>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004eed 	.word	0x08004eed
 8004ed8:	08004ef5 	.word	0x08004ef5
 8004edc:	08004efd 	.word	0x08004efd
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f0d 	.word	0x08004f0d
 8004ee8:	08004f15 	.word	0x08004f15
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ef2:	e1fb      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004efa:	e1f7      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f02:	e1f3      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f0a:	e1ef      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f12:	e1eb      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f14:	2340      	movs	r3, #64	; 0x40
 8004f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f1a:	e1e7      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f1c:	2380      	movs	r3, #128	; 0x80
 8004f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f22:	bf00      	nop
 8004f24:	e1e2      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a52      	ldr	r2, [pc, #328]	; (8005074 <UART_SetConfig+0x358>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d132      	bne.n	8004f96 <UART_SetConfig+0x27a>
 8004f30:	4b4e      	ldr	r3, [pc, #312]	; (800506c <UART_SetConfig+0x350>)
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	2b05      	cmp	r3, #5
 8004f3a:	d827      	bhi.n	8004f8c <UART_SetConfig+0x270>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0x228>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f5d 	.word	0x08004f5d
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f6d 	.word	0x08004f6d
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f62:	e1c3      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f6a:	e1bf      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f72:	e1bb      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f7a:	e1b7      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f82:	e1b3      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f84:	2340      	movs	r3, #64	; 0x40
 8004f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f8a:	e1af      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f92:	bf00      	nop
 8004f94:	e1aa      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a37      	ldr	r2, [pc, #220]	; (8005078 <UART_SetConfig+0x35c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d132      	bne.n	8005006 <UART_SetConfig+0x2ea>
 8004fa0:	4b32      	ldr	r3, [pc, #200]	; (800506c <UART_SetConfig+0x350>)
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d827      	bhi.n	8004ffc <UART_SetConfig+0x2e0>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <UART_SetConfig+0x298>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fcd 	.word	0x08004fcd
 8004fb8:	08004fd5 	.word	0x08004fd5
 8004fbc:	08004fdd 	.word	0x08004fdd
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004ff5 	.word	0x08004ff5
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fd2:	e18b      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fda:	e187      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004fdc:	2308      	movs	r3, #8
 8004fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe2:	e183      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fea:	e17f      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004fec:	2320      	movs	r3, #32
 8004fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ff2:	e17b      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004ff4:	2340      	movs	r3, #64	; 0x40
 8004ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ffa:	e177      	b.n	80052ec <UART_SetConfig+0x5d0>
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005002:	bf00      	nop
 8005004:	e172      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1c      	ldr	r2, [pc, #112]	; (800507c <UART_SetConfig+0x360>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d144      	bne.n	800509a <UART_SetConfig+0x37e>
 8005010:	4b16      	ldr	r3, [pc, #88]	; (800506c <UART_SetConfig+0x350>)
 8005012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	2b05      	cmp	r3, #5
 800501a:	d839      	bhi.n	8005090 <UART_SetConfig+0x374>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0x308>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	0800503d 	.word	0x0800503d
 8005028:	08005045 	.word	0x08005045
 800502c:	0800504d 	.word	0x0800504d
 8005030:	08005055 	.word	0x08005055
 8005034:	08005081 	.word	0x08005081
 8005038:	08005089 	.word	0x08005089
 800503c:	2300      	movs	r3, #0
 800503e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005042:	e153      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504a:	e14f      	b.n	80052ec <UART_SetConfig+0x5d0>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005052:	e14b      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800505a:	e147      	b.n	80052ec <UART_SetConfig+0x5d0>
 800505c:	cfff69f3 	.word	0xcfff69f3
 8005060:	58000c00 	.word	0x58000c00
 8005064:	11fff4ff 	.word	0x11fff4ff
 8005068:	40011000 	.word	0x40011000
 800506c:	58024400 	.word	0x58024400
 8005070:	40004400 	.word	0x40004400
 8005074:	40004800 	.word	0x40004800
 8005078:	40004c00 	.word	0x40004c00
 800507c:	40005000 	.word	0x40005000
 8005080:	2320      	movs	r3, #32
 8005082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005086:	e131      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005088:	2340      	movs	r3, #64	; 0x40
 800508a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800508e:	e12d      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005096:	bf00      	nop
 8005098:	e128      	b.n	80052ec <UART_SetConfig+0x5d0>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4ab6      	ldr	r2, [pc, #728]	; (8005378 <UART_SetConfig+0x65c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d178      	bne.n	8005196 <UART_SetConfig+0x47a>
 80050a4:	4bb5      	ldr	r3, [pc, #724]	; (800537c <UART_SetConfig+0x660>)
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ac:	2b28      	cmp	r3, #40	; 0x28
 80050ae:	d86d      	bhi.n	800518c <UART_SetConfig+0x470>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x39c>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	0800515d 	.word	0x0800515d
 80050bc:	0800518d 	.word	0x0800518d
 80050c0:	0800518d 	.word	0x0800518d
 80050c4:	0800518d 	.word	0x0800518d
 80050c8:	0800518d 	.word	0x0800518d
 80050cc:	0800518d 	.word	0x0800518d
 80050d0:	0800518d 	.word	0x0800518d
 80050d4:	0800518d 	.word	0x0800518d
 80050d8:	08005165 	.word	0x08005165
 80050dc:	0800518d 	.word	0x0800518d
 80050e0:	0800518d 	.word	0x0800518d
 80050e4:	0800518d 	.word	0x0800518d
 80050e8:	0800518d 	.word	0x0800518d
 80050ec:	0800518d 	.word	0x0800518d
 80050f0:	0800518d 	.word	0x0800518d
 80050f4:	0800518d 	.word	0x0800518d
 80050f8:	0800516d 	.word	0x0800516d
 80050fc:	0800518d 	.word	0x0800518d
 8005100:	0800518d 	.word	0x0800518d
 8005104:	0800518d 	.word	0x0800518d
 8005108:	0800518d 	.word	0x0800518d
 800510c:	0800518d 	.word	0x0800518d
 8005110:	0800518d 	.word	0x0800518d
 8005114:	0800518d 	.word	0x0800518d
 8005118:	08005175 	.word	0x08005175
 800511c:	0800518d 	.word	0x0800518d
 8005120:	0800518d 	.word	0x0800518d
 8005124:	0800518d 	.word	0x0800518d
 8005128:	0800518d 	.word	0x0800518d
 800512c:	0800518d 	.word	0x0800518d
 8005130:	0800518d 	.word	0x0800518d
 8005134:	0800518d 	.word	0x0800518d
 8005138:	0800517d 	.word	0x0800517d
 800513c:	0800518d 	.word	0x0800518d
 8005140:	0800518d 	.word	0x0800518d
 8005144:	0800518d 	.word	0x0800518d
 8005148:	0800518d 	.word	0x0800518d
 800514c:	0800518d 	.word	0x0800518d
 8005150:	0800518d 	.word	0x0800518d
 8005154:	0800518d 	.word	0x0800518d
 8005158:	08005185 	.word	0x08005185
 800515c:	2301      	movs	r3, #1
 800515e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005162:	e0c3      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005164:	2304      	movs	r3, #4
 8005166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800516a:	e0bf      	b.n	80052ec <UART_SetConfig+0x5d0>
 800516c:	2308      	movs	r3, #8
 800516e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005172:	e0bb      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005174:	2310      	movs	r3, #16
 8005176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800517a:	e0b7      	b.n	80052ec <UART_SetConfig+0x5d0>
 800517c:	2320      	movs	r3, #32
 800517e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005182:	e0b3      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005184:	2340      	movs	r3, #64	; 0x40
 8005186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800518a:	e0af      	b.n	80052ec <UART_SetConfig+0x5d0>
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005192:	bf00      	nop
 8005194:	e0aa      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a79      	ldr	r2, [pc, #484]	; (8005380 <UART_SetConfig+0x664>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d132      	bne.n	8005206 <UART_SetConfig+0x4ea>
 80051a0:	4b76      	ldr	r3, [pc, #472]	; (800537c <UART_SetConfig+0x660>)
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d827      	bhi.n	80051fc <UART_SetConfig+0x4e0>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x498>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051cd 	.word	0x080051cd
 80051b8:	080051d5 	.word	0x080051d5
 80051bc:	080051dd 	.word	0x080051dd
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051d2:	e08b      	b.n	80052ec <UART_SetConfig+0x5d0>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051da:	e087      	b.n	80052ec <UART_SetConfig+0x5d0>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e2:	e083      	b.n	80052ec <UART_SetConfig+0x5d0>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ea:	e07f      	b.n	80052ec <UART_SetConfig+0x5d0>
 80051ec:	2320      	movs	r3, #32
 80051ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f2:	e07b      	b.n	80052ec <UART_SetConfig+0x5d0>
 80051f4:	2340      	movs	r3, #64	; 0x40
 80051f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fa:	e077      	b.n	80052ec <UART_SetConfig+0x5d0>
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005202:	bf00      	nop
 8005204:	e072      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a5e      	ldr	r2, [pc, #376]	; (8005384 <UART_SetConfig+0x668>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d132      	bne.n	8005276 <UART_SetConfig+0x55a>
 8005210:	4b5a      	ldr	r3, [pc, #360]	; (800537c <UART_SetConfig+0x660>)
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	2b05      	cmp	r3, #5
 800521a:	d827      	bhi.n	800526c <UART_SetConfig+0x550>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <UART_SetConfig+0x508>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	0800523d 	.word	0x0800523d
 8005228:	08005245 	.word	0x08005245
 800522c:	0800524d 	.word	0x0800524d
 8005230:	08005255 	.word	0x08005255
 8005234:	0800525d 	.word	0x0800525d
 8005238:	08005265 	.word	0x08005265
 800523c:	2300      	movs	r3, #0
 800523e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005242:	e053      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005244:	2304      	movs	r3, #4
 8005246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524a:	e04f      	b.n	80052ec <UART_SetConfig+0x5d0>
 800524c:	2308      	movs	r3, #8
 800524e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005252:	e04b      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525a:	e047      	b.n	80052ec <UART_SetConfig+0x5d0>
 800525c:	2320      	movs	r3, #32
 800525e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005262:	e043      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005264:	2340      	movs	r3, #64	; 0x40
 8005266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526a:	e03f      	b.n	80052ec <UART_SetConfig+0x5d0>
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005272:	bf00      	nop
 8005274:	e03a      	b.n	80052ec <UART_SetConfig+0x5d0>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a43      	ldr	r2, [pc, #268]	; (8005388 <UART_SetConfig+0x66c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d132      	bne.n	80052e6 <UART_SetConfig+0x5ca>
 8005280:	4b3e      	ldr	r3, [pc, #248]	; (800537c <UART_SetConfig+0x660>)
 8005282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	2b05      	cmp	r3, #5
 800528a:	d827      	bhi.n	80052dc <UART_SetConfig+0x5c0>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <UART_SetConfig+0x578>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052ad 	.word	0x080052ad
 8005298:	080052b5 	.word	0x080052b5
 800529c:	080052bd 	.word	0x080052bd
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	2302      	movs	r3, #2
 80052ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b2:	e01b      	b.n	80052ec <UART_SetConfig+0x5d0>
 80052b4:	2304      	movs	r3, #4
 80052b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ba:	e017      	b.n	80052ec <UART_SetConfig+0x5d0>
 80052bc:	2308      	movs	r3, #8
 80052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c2:	e013      	b.n	80052ec <UART_SetConfig+0x5d0>
 80052c4:	2310      	movs	r3, #16
 80052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ca:	e00f      	b.n	80052ec <UART_SetConfig+0x5d0>
 80052cc:	2320      	movs	r3, #32
 80052ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d2:	e00b      	b.n	80052ec <UART_SetConfig+0x5d0>
 80052d4:	2340      	movs	r3, #64	; 0x40
 80052d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052da:	e007      	b.n	80052ec <UART_SetConfig+0x5d0>
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052e2:	bf00      	nop
 80052e4:	e002      	b.n	80052ec <UART_SetConfig+0x5d0>
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a25      	ldr	r2, [pc, #148]	; (8005388 <UART_SetConfig+0x66c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	f040 80b8 	bne.w	8005468 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d019      	beq.n	8005334 <UART_SetConfig+0x618>
 8005300:	2b08      	cmp	r3, #8
 8005302:	dc04      	bgt.n	800530e <UART_SetConfig+0x5f2>
 8005304:	2b02      	cmp	r3, #2
 8005306:	d009      	beq.n	800531c <UART_SetConfig+0x600>
 8005308:	2b04      	cmp	r3, #4
 800530a:	d00b      	beq.n	8005324 <UART_SetConfig+0x608>
 800530c:	e042      	b.n	8005394 <UART_SetConfig+0x678>
 800530e:	2b20      	cmp	r3, #32
 8005310:	d02b      	beq.n	800536a <UART_SetConfig+0x64e>
 8005312:	2b40      	cmp	r3, #64	; 0x40
 8005314:	d02c      	beq.n	8005370 <UART_SetConfig+0x654>
 8005316:	2b10      	cmp	r3, #16
 8005318:	d014      	beq.n	8005344 <UART_SetConfig+0x628>
 800531a:	e03b      	b.n	8005394 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800531c:	f7ff f96a 	bl	80045f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005320:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005322:	e03d      	b.n	80053a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005324:	f107 0314 	add.w	r3, r7, #20
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff f979 	bl	8004620 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005332:	e035      	b.n	80053a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005334:	f107 0308 	add.w	r3, r7, #8
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fabd 	bl	80048b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005342:	e02d      	b.n	80053a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <UART_SetConfig+0x660>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <UART_SetConfig+0x660>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	08db      	lsrs	r3, r3, #3
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	4a0c      	ldr	r2, [pc, #48]	; (800538c <UART_SetConfig+0x670>)
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005362:	e01d      	b.n	80053a0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005364:	4b09      	ldr	r3, [pc, #36]	; (800538c <UART_SetConfig+0x670>)
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005368:	e01a      	b.n	80053a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <UART_SetConfig+0x674>)
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800536e:	e017      	b.n	80053a0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005376:	e013      	b.n	80053a0 <UART_SetConfig+0x684>
 8005378:	40011400 	.word	0x40011400
 800537c:	58024400 	.word	0x58024400
 8005380:	40007800 	.word	0x40007800
 8005384:	40007c00 	.word	0x40007c00
 8005388:	58000c00 	.word	0x58000c00
 800538c:	03d09000 	.word	0x03d09000
 8005390:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800539e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 824d 	beq.w	8005842 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	4aad      	ldr	r2, [pc, #692]	; (8005664 <UART_SetConfig+0x948>)
 80053ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b2:	461a      	mov	r2, r3
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80053ba:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	4413      	add	r3, r2
 80053c6:	6a3a      	ldr	r2, [r7, #32]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d305      	bcc.n	80053d8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053d2:	6a3a      	ldr	r2, [r7, #32]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d903      	bls.n	80053e0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80053de:	e230      	b.n	8005842 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	4618      	mov	r0, r3
 80053e4:	f04f 0100 	mov.w	r1, #0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	4a9d      	ldr	r2, [pc, #628]	; (8005664 <UART_SetConfig+0x948>)
 80053ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f04f 0400 	mov.w	r4, #0
 80053f8:	461a      	mov	r2, r3
 80053fa:	4623      	mov	r3, r4
 80053fc:	f7fa ffd8 	bl	80003b0 <__aeabi_uldivmod>
 8005400:	4603      	mov	r3, r0
 8005402:	460c      	mov	r4, r1
 8005404:	4619      	mov	r1, r3
 8005406:	4622      	mov	r2, r4
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	f04f 0400 	mov.w	r4, #0
 8005410:	0214      	lsls	r4, r2, #8
 8005412:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005416:	020b      	lsls	r3, r1, #8
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6852      	ldr	r2, [r2, #4]
 800541c:	0852      	lsrs	r2, r2, #1
 800541e:	4611      	mov	r1, r2
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	eb13 0b01 	adds.w	fp, r3, r1
 8005428:	eb44 0c02 	adc.w	ip, r4, r2
 800542c:	4658      	mov	r0, fp
 800542e:	4661      	mov	r1, ip
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f04f 0400 	mov.w	r4, #0
 8005438:	461a      	mov	r2, r3
 800543a:	4623      	mov	r3, r4
 800543c:	f7fa ffb8 	bl	80003b0 <__aeabi_uldivmod>
 8005440:	4603      	mov	r3, r0
 8005442:	460c      	mov	r4, r1
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800544c:	d308      	bcc.n	8005460 <UART_SetConfig+0x744>
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005454:	d204      	bcs.n	8005460 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	e1f0      	b.n	8005842 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005466:	e1ec      	b.n	8005842 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005470:	f040 8100 	bne.w	8005674 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	f200 80b7 	bhi.w	80055ec <UART_SetConfig+0x8d0>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0x768>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	08005589 	.word	0x08005589
 8005488:	08005591 	.word	0x08005591
 800548c:	080055ed 	.word	0x080055ed
 8005490:	080055ed 	.word	0x080055ed
 8005494:	08005599 	.word	0x08005599
 8005498:	080055ed 	.word	0x080055ed
 800549c:	080055ed 	.word	0x080055ed
 80054a0:	080055ed 	.word	0x080055ed
 80054a4:	080055a9 	.word	0x080055a9
 80054a8:	080055ed 	.word	0x080055ed
 80054ac:	080055ed 	.word	0x080055ed
 80054b0:	080055ed 	.word	0x080055ed
 80054b4:	080055ed 	.word	0x080055ed
 80054b8:	080055ed 	.word	0x080055ed
 80054bc:	080055ed 	.word	0x080055ed
 80054c0:	080055ed 	.word	0x080055ed
 80054c4:	080055b9 	.word	0x080055b9
 80054c8:	080055ed 	.word	0x080055ed
 80054cc:	080055ed 	.word	0x080055ed
 80054d0:	080055ed 	.word	0x080055ed
 80054d4:	080055ed 	.word	0x080055ed
 80054d8:	080055ed 	.word	0x080055ed
 80054dc:	080055ed 	.word	0x080055ed
 80054e0:	080055ed 	.word	0x080055ed
 80054e4:	080055ed 	.word	0x080055ed
 80054e8:	080055ed 	.word	0x080055ed
 80054ec:	080055ed 	.word	0x080055ed
 80054f0:	080055ed 	.word	0x080055ed
 80054f4:	080055ed 	.word	0x080055ed
 80054f8:	080055ed 	.word	0x080055ed
 80054fc:	080055ed 	.word	0x080055ed
 8005500:	080055ed 	.word	0x080055ed
 8005504:	080055df 	.word	0x080055df
 8005508:	080055ed 	.word	0x080055ed
 800550c:	080055ed 	.word	0x080055ed
 8005510:	080055ed 	.word	0x080055ed
 8005514:	080055ed 	.word	0x080055ed
 8005518:	080055ed 	.word	0x080055ed
 800551c:	080055ed 	.word	0x080055ed
 8005520:	080055ed 	.word	0x080055ed
 8005524:	080055ed 	.word	0x080055ed
 8005528:	080055ed 	.word	0x080055ed
 800552c:	080055ed 	.word	0x080055ed
 8005530:	080055ed 	.word	0x080055ed
 8005534:	080055ed 	.word	0x080055ed
 8005538:	080055ed 	.word	0x080055ed
 800553c:	080055ed 	.word	0x080055ed
 8005540:	080055ed 	.word	0x080055ed
 8005544:	080055ed 	.word	0x080055ed
 8005548:	080055ed 	.word	0x080055ed
 800554c:	080055ed 	.word	0x080055ed
 8005550:	080055ed 	.word	0x080055ed
 8005554:	080055ed 	.word	0x080055ed
 8005558:	080055ed 	.word	0x080055ed
 800555c:	080055ed 	.word	0x080055ed
 8005560:	080055ed 	.word	0x080055ed
 8005564:	080055ed 	.word	0x080055ed
 8005568:	080055ed 	.word	0x080055ed
 800556c:	080055ed 	.word	0x080055ed
 8005570:	080055ed 	.word	0x080055ed
 8005574:	080055ed 	.word	0x080055ed
 8005578:	080055ed 	.word	0x080055ed
 800557c:	080055ed 	.word	0x080055ed
 8005580:	080055ed 	.word	0x080055ed
 8005584:	080055e5 	.word	0x080055e5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7ff f808 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 800558c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800558e:	e033      	b.n	80055f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7ff f81a 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 8005594:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005596:	e02f      	b.n	80055f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff f83f 	bl	8004620 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055a6:	e027      	b.n	80055f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055a8:	f107 0308 	add.w	r3, r7, #8
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff f983 	bl	80048b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055b6:	e01f      	b.n	80055f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b8:	4b2b      	ldr	r3, [pc, #172]	; (8005668 <UART_SetConfig+0x94c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055c4:	4b28      	ldr	r3, [pc, #160]	; (8005668 <UART_SetConfig+0x94c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	4a27      	ldr	r2, [pc, #156]	; (800566c <UART_SetConfig+0x950>)
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055d6:	e00f      	b.n	80055f8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b24      	ldr	r3, [pc, #144]	; (800566c <UART_SetConfig+0x950>)
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055dc:	e00c      	b.n	80055f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055de:	4b24      	ldr	r3, [pc, #144]	; (8005670 <UART_SetConfig+0x954>)
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055e2:	e009      	b.n	80055f8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055ea:	e005      	b.n	80055f8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80055f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 8121 	beq.w	8005842 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	4a17      	ldr	r2, [pc, #92]	; (8005664 <UART_SetConfig+0x948>)
 8005606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800560a:	461a      	mov	r2, r3
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005612:	005a      	lsls	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	085b      	lsrs	r3, r3, #1
 800561a:	441a      	add	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	b29b      	uxth	r3, r3
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	2b0f      	cmp	r3, #15
 800562c:	d916      	bls.n	800565c <UART_SetConfig+0x940>
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d212      	bcs.n	800565c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	b29b      	uxth	r3, r3
 800563a:	f023 030f 	bic.w	r3, r3, #15
 800563e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	b29b      	uxth	r3, r3
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	b29a      	uxth	r2, r3
 800564c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800564e:	4313      	orrs	r3, r2
 8005650:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	e0f2      	b.n	8005842 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005662:	e0ee      	b.n	8005842 <UART_SetConfig+0xb26>
 8005664:	0800f438 	.word	0x0800f438
 8005668:	58024400 	.word	0x58024400
 800566c:	03d09000 	.word	0x03d09000
 8005670:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	f200 80b7 	bhi.w	80057ec <UART_SetConfig+0xad0>
 800567e:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <UART_SetConfig+0x968>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	08005789 	.word	0x08005789
 8005688:	08005791 	.word	0x08005791
 800568c:	080057ed 	.word	0x080057ed
 8005690:	080057ed 	.word	0x080057ed
 8005694:	08005799 	.word	0x08005799
 8005698:	080057ed 	.word	0x080057ed
 800569c:	080057ed 	.word	0x080057ed
 80056a0:	080057ed 	.word	0x080057ed
 80056a4:	080057a9 	.word	0x080057a9
 80056a8:	080057ed 	.word	0x080057ed
 80056ac:	080057ed 	.word	0x080057ed
 80056b0:	080057ed 	.word	0x080057ed
 80056b4:	080057ed 	.word	0x080057ed
 80056b8:	080057ed 	.word	0x080057ed
 80056bc:	080057ed 	.word	0x080057ed
 80056c0:	080057ed 	.word	0x080057ed
 80056c4:	080057b9 	.word	0x080057b9
 80056c8:	080057ed 	.word	0x080057ed
 80056cc:	080057ed 	.word	0x080057ed
 80056d0:	080057ed 	.word	0x080057ed
 80056d4:	080057ed 	.word	0x080057ed
 80056d8:	080057ed 	.word	0x080057ed
 80056dc:	080057ed 	.word	0x080057ed
 80056e0:	080057ed 	.word	0x080057ed
 80056e4:	080057ed 	.word	0x080057ed
 80056e8:	080057ed 	.word	0x080057ed
 80056ec:	080057ed 	.word	0x080057ed
 80056f0:	080057ed 	.word	0x080057ed
 80056f4:	080057ed 	.word	0x080057ed
 80056f8:	080057ed 	.word	0x080057ed
 80056fc:	080057ed 	.word	0x080057ed
 8005700:	080057ed 	.word	0x080057ed
 8005704:	080057df 	.word	0x080057df
 8005708:	080057ed 	.word	0x080057ed
 800570c:	080057ed 	.word	0x080057ed
 8005710:	080057ed 	.word	0x080057ed
 8005714:	080057ed 	.word	0x080057ed
 8005718:	080057ed 	.word	0x080057ed
 800571c:	080057ed 	.word	0x080057ed
 8005720:	080057ed 	.word	0x080057ed
 8005724:	080057ed 	.word	0x080057ed
 8005728:	080057ed 	.word	0x080057ed
 800572c:	080057ed 	.word	0x080057ed
 8005730:	080057ed 	.word	0x080057ed
 8005734:	080057ed 	.word	0x080057ed
 8005738:	080057ed 	.word	0x080057ed
 800573c:	080057ed 	.word	0x080057ed
 8005740:	080057ed 	.word	0x080057ed
 8005744:	080057ed 	.word	0x080057ed
 8005748:	080057ed 	.word	0x080057ed
 800574c:	080057ed 	.word	0x080057ed
 8005750:	080057ed 	.word	0x080057ed
 8005754:	080057ed 	.word	0x080057ed
 8005758:	080057ed 	.word	0x080057ed
 800575c:	080057ed 	.word	0x080057ed
 8005760:	080057ed 	.word	0x080057ed
 8005764:	080057ed 	.word	0x080057ed
 8005768:	080057ed 	.word	0x080057ed
 800576c:	080057ed 	.word	0x080057ed
 8005770:	080057ed 	.word	0x080057ed
 8005774:	080057ed 	.word	0x080057ed
 8005778:	080057ed 	.word	0x080057ed
 800577c:	080057ed 	.word	0x080057ed
 8005780:	080057ed 	.word	0x080057ed
 8005784:	080057e5 	.word	0x080057e5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe ff08 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 800578c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800578e:	e033      	b.n	80057f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005790:	f7fe ff1a 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 8005794:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005796:	e02f      	b.n	80057f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe ff3f 	bl	8004620 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057a6:	e027      	b.n	80057f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057a8:	f107 0308 	add.w	r3, r7, #8
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff f883 	bl	80048b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057b6:	e01f      	b.n	80057f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b8:	4b2c      	ldr	r3, [pc, #176]	; (800586c <UART_SetConfig+0xb50>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057c4:	4b29      	ldr	r3, [pc, #164]	; (800586c <UART_SetConfig+0xb50>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	08db      	lsrs	r3, r3, #3
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	4a28      	ldr	r2, [pc, #160]	; (8005870 <UART_SetConfig+0xb54>)
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057d6:	e00f      	b.n	80057f8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <UART_SetConfig+0xb54>)
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057dc:	e00c      	b.n	80057f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057de:	4b25      	ldr	r3, [pc, #148]	; (8005874 <UART_SetConfig+0xb58>)
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057e2:	e009      	b.n	80057f8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057ea:	e005      	b.n	80057f8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80057f6:	bf00      	nop
    }

    if (pclk != 0U)
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d021      	beq.n	8005842 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <UART_SetConfig+0xb5c>)
 8005804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005808:	461a      	mov	r2, r3
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	441a      	add	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	b29b      	uxth	r3, r3
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	2b0f      	cmp	r3, #15
 8005828:	d908      	bls.n	800583c <UART_SetConfig+0xb20>
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005830:	d204      	bcs.n	800583c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	e002      	b.n	8005842 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800585e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005862:	4618      	mov	r0, r3
 8005864:	3738      	adds	r7, #56	; 0x38
 8005866:	46bd      	mov	sp, r7
 8005868:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800586c:	58024400 	.word	0x58024400
 8005870:	03d09000 	.word	0x03d09000
 8005874:	003d0900 	.word	0x003d0900
 8005878:	0800f438 	.word	0x0800f438

0800587c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01a      	beq.n	8005992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800597a:	d10a      	bne.n	8005992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80059d0:	f7fb fe0c 	bl	80015ec <HAL_GetTick>
 80059d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d10e      	bne.n	8005a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f82c 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e022      	b.n	8005a48 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d10e      	bne.n	8005a2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f816 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e00c      	b.n	8005a48 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a60:	e062      	b.n	8005b28 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d05e      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6a:	f7fb fdbf 	bl	80015ec <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11d      	bne.n	8005abc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a8e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e045      	b.n	8005b48 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d02e      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad8:	d126      	bne.n	8005b28 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005af2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e00f      	b.n	8005b48 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d08d      	beq.n	8005a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e027      	b.n	8005bb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2224      	movs	r2, #36	; 0x24
 8005b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e02d      	b.n	8005c36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2224      	movs	r2, #36	; 0x24
 8005be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0201 	bic.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f850 	bl	8005cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e02d      	b.n	8005cb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2224      	movs	r2, #36	; 0x24
 8005c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f812 	bl	8005cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b089      	sub	sp, #36	; 0x24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005cc4:	4a2f      	ldr	r2, [pc, #188]	; (8005d84 <UARTEx_SetNbDataToProcess+0xc8>)
 8005cc6:	f107 0314 	add.w	r3, r7, #20
 8005cca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005cd2:	4a2d      	ldr	r2, [pc, #180]	; (8005d88 <UARTEx_SetNbDataToProcess+0xcc>)
 8005cd4:	f107 030c 	add.w	r3, r7, #12
 8005cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cdc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d108      	bne.n	8005cfa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cf8:	e03d      	b.n	8005d76 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cfa:	2310      	movs	r3, #16
 8005cfc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cfe:	2310      	movs	r3, #16
 8005d00:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	0e5b      	lsrs	r3, r3, #25
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	0f5b      	lsrs	r3, r3, #29
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005d22:	7fbb      	ldrb	r3, [r7, #30]
 8005d24:	7f3a      	ldrb	r2, [r7, #28]
 8005d26:	f107 0120 	add.w	r1, r7, #32
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005d30:	fb02 f303 	mul.w	r3, r2, r3
 8005d34:	7f3a      	ldrb	r2, [r7, #28]
 8005d36:	f107 0120 	add.w	r1, r7, #32
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005d4c:	7ffb      	ldrb	r3, [r7, #31]
 8005d4e:	7f7a      	ldrb	r2, [r7, #29]
 8005d50:	f107 0120 	add.w	r1, r7, #32
 8005d54:	440a      	add	r2, r1
 8005d56:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005d5a:	fb02 f303 	mul.w	r3, r2, r3
 8005d5e:	7f7a      	ldrb	r2, [r7, #29]
 8005d60:	f107 0120 	add.w	r1, r7, #32
 8005d64:	440a      	add	r2, r1
 8005d66:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d76:	bf00      	nop
 8005d78:	3724      	adds	r7, #36	; 0x24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	0800f260 	.word	0x0800f260
 8005d88:	0800f268 	.word	0x0800f268

08005d8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	f107 001c 	add.w	r0, r7, #28
 8005d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d120      	bne.n	8005de6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	4b25      	ldr	r3, [pc, #148]	; (8005e4c <USB_CoreInit+0xc0>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d105      	bne.n	8005dda <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f94c 	bl	8006078 <USB_CoreReset>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]
 8005de4:	e01a      	b.n	8005e1c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f940 	bl	8006078 <USB_CoreReset>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e0e:	e005      	b.n	8005e1c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d10b      	bne.n	8005e3a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f043 0206 	orr.w	r2, r3, #6
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f043 0220 	orr.w	r2, r3, #32
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e46:	b004      	add	sp, #16
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	ffbdffbf 	.word	0xffbdffbf

08005e50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f043 0201 	orr.w	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f023 0201 	bic.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d106      	bne.n	8005ec0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	e00b      	b.n	8005ed8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60da      	str	r2, [r3, #12]
 8005ed2:	e001      	b.n	8005ed8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e003      	b.n	8005ee0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ed8:	2032      	movs	r0, #50	; 0x32
 8005eda:	f7fb fb93 	bl	8001604 <HAL_Delay>

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	019b      	lsls	r3, r3, #6
 8005efa:	f043 0220 	orr.w	r2, r3, #32
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <USB_FlushTxFifo+0x48>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d901      	bls.n	8005f14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e006      	b.n	8005f22 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d0f0      	beq.n	8005f02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	00030d40 	.word	0x00030d40

08005f34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2210      	movs	r2, #16
 8005f44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <USB_FlushRxFifo+0x40>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d901      	bls.n	8005f58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e006      	b.n	8005f66 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d0f0      	beq.n	8005f46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	00030d40 	.word	0x00030d40

08005f78 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b089      	sub	sp, #36	; 0x24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	460b      	mov	r3, r1
 8005f88:	71fb      	strb	r3, [r7, #7]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d11a      	bne.n	8005fd4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f9e:	88bb      	ldrh	r3, [r7, #4]
 8005fa0:	3303      	adds	r3, #3
 8005fa2:	089b      	lsrs	r3, r3, #2
 8005fa4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	e00f      	b.n	8005fcc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	031a      	lsls	r2, r3, #12
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb8:	461a      	mov	r2, r3
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d3eb      	bcc.n	8005fac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3724      	adds	r7, #36	; 0x24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b089      	sub	sp, #36	; 0x24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	4613      	mov	r3, r2
 8005fee:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ff8:	88fb      	ldrh	r3, [r7, #6]
 8005ffa:	3303      	adds	r3, #3
 8005ffc:	089b      	lsrs	r3, r3, #2
 8005ffe:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006000:	2300      	movs	r3, #0
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	e00b      	b.n	800601e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	601a      	str	r2, [r3, #0]
    pDest++;
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	3304      	adds	r3, #4
 8006016:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	3301      	adds	r3, #1
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	429a      	cmp	r2, r3
 8006024:	d3ef      	bcc.n	8006006 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006026:	69fb      	ldr	r3, [r7, #28]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3724      	adds	r7, #36	; 0x24
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4013      	ands	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800604c:	68fb      	ldr	r3, [r7, #12]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0301 	and.w	r3, r3, #1
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
	...

08006078 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3301      	adds	r3, #1
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a13      	ldr	r2, [pc, #76]	; (80060dc <USB_CoreReset+0x64>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e01b      	b.n	80060ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	daf2      	bge.n	8006084 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f043 0201 	orr.w	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a09      	ldr	r2, [pc, #36]	; (80060dc <USB_CoreReset+0x64>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e006      	b.n	80060ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d0f0      	beq.n	80060ae <USB_CoreReset+0x36>

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	00030d40 	.word	0x00030d40

080060e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060e0:	b084      	sub	sp, #16
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	f107 001c 	add.w	r0, r7, #28
 80060ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060fc:	461a      	mov	r2, r3
 80060fe:	2300      	movs	r3, #0
 8006100:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	2b01      	cmp	r3, #1
 800612a:	d10a      	bne.n	8006142 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800613a:	f043 0304 	orr.w	r3, r3, #4
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	e014      	b.n	800616c <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006150:	f023 0304 	bic.w	r3, r3, #4
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e009      	b.n	800616c <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006166:	f023 0304 	bic.w	r3, r3, #4
 800616a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800616c:	2110      	movs	r1, #16
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff feba 	bl	8005ee8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff fedd 	bl	8005f34 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	e015      	b.n	80061ac <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4413      	add	r3, r2
 8006188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618c:	461a      	mov	r2, r3
 800618e:	f04f 33ff 	mov.w	r3, #4294967295
 8006192:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	461a      	mov	r2, r3
 80061a2:	2300      	movs	r3, #0
 80061a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d3e5      	bcc.n	8006180 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80061b4:	2101      	movs	r1, #1
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f882 	bl	80062c0 <USB_DriveVbus>

  HAL_Delay(200U);
 80061bc:	20c8      	movs	r0, #200	; 0xc8
 80061be:	f7fb fa21 	bl	8001604 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f04f 32ff 	mov.w	r2, #4294967295
 80061ce:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a14      	ldr	r2, [pc, #80]	; (8006238 <USB_HostInit+0x158>)
 80061e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a13      	ldr	r2, [pc, #76]	; (800623c <USB_HostInit+0x15c>)
 80061ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80061f2:	e009      	b.n	8006208 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2280      	movs	r2, #128	; 0x80
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a10      	ldr	r2, [pc, #64]	; (8006240 <USB_HostInit+0x160>)
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a10      	ldr	r2, [pc, #64]	; (8006244 <USB_HostInit+0x164>)
 8006204:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d105      	bne.n	800621a <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f043 0210 	orr.w	r2, r3, #16
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <USB_HostInit+0x168>)
 8006220:	4313      	orrs	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006232:	b004      	add	sp, #16
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	01000200 	.word	0x01000200
 800623c:	00e00300 	.word	0x00e00300
 8006240:	00600080 	.word	0x00600080
 8006244:	004000e0 	.word	0x004000e0
 8006248:	a3200008 	.word	0xa3200008

0800624c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800626a:	f023 0303 	bic.w	r3, r3, #3
 800626e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006284:	4313      	orrs	r3, r2
 8006286:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d107      	bne.n	800629e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006294:	461a      	mov	r2, r3
 8006296:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800629a:	6053      	str	r3, [r2, #4]
 800629c:	e009      	b.n	80062b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d106      	bne.n	80062b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062aa:	461a      	mov	r2, r3
 80062ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80062b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d109      	bne.n	8006304 <USB_DriveVbus+0x44>
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d106      	bne.n	8006304 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006302:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630e:	d109      	bne.n	8006324 <USB_DriveVbus+0x64>
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800631e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006322:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	b29b      	uxth	r3, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	4608      	mov	r0, r1
 800635e:	4611      	mov	r1, r2
 8006360:	461a      	mov	r2, r3
 8006362:	4603      	mov	r3, r0
 8006364:	70fb      	strb	r3, [r7, #3]
 8006366:	460b      	mov	r3, r1
 8006368:	70bb      	strb	r3, [r7, #2]
 800636a:	4613      	mov	r3, r2
 800636c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4413      	add	r3, r2
 800637e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006382:	461a      	mov	r2, r3
 8006384:	f04f 33ff 	mov.w	r3, #4294967295
 8006388:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800638a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800638e:	2b03      	cmp	r3, #3
 8006390:	d87e      	bhi.n	8006490 <USB_HC_Init+0x13c>
 8006392:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <USB_HC_Init+0x44>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	080063a9 	.word	0x080063a9
 800639c:	08006453 	.word	0x08006453
 80063a0:	080063a9 	.word	0x080063a9
 80063a4:	08006415 	.word	0x08006415
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b4:	461a      	mov	r2, r3
 80063b6:	f240 439d 	movw	r3, #1181	; 0x49d
 80063ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80063bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da10      	bge.n	80063e6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80063e4:	e057      	b.n	8006496 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d051      	beq.n	8006496 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	78fa      	ldrb	r2, [r7, #3]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	440a      	add	r2, r1
 8006408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006410:	60d3      	str	r3, [r2, #12]
      break;
 8006412:	e040      	b.n	8006496 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4413      	add	r3, r2
 800641c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006420:	461a      	mov	r2, r3
 8006422:	f240 639d 	movw	r3, #1693	; 0x69d
 8006426:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006428:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800642c:	2b00      	cmp	r3, #0
 800642e:	da34      	bge.n	800649a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4413      	add	r3, r2
 8006438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	440a      	add	r2, r1
 8006446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800644a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006450:	e023      	b.n	800649a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	461a      	mov	r2, r3
 8006460:	f240 2325 	movw	r3, #549	; 0x225
 8006464:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006466:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800646a:	2b00      	cmp	r3, #0
 800646c:	da17      	bge.n	800649e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	78fa      	ldrb	r2, [r7, #3]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	440a      	add	r2, r1
 8006484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006488:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800648c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800648e:	e006      	b.n	800649e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]
      break;
 8006494:	e004      	b.n	80064a0 <USB_HC_Init+0x14c>
      break;
 8006496:	bf00      	nop
 8006498:	e002      	b.n	80064a0 <USB_HC_Init+0x14c>
      break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <USB_HC_Init+0x14c>
      break;
 800649e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	2101      	movs	r1, #1
 80064b0:	fa01 f303 	lsl.w	r3, r1, r3
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064ba:	4313      	orrs	r3, r2
 80064bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80064ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da03      	bge.n	80064da <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80064d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	e001      	b.n	80064de <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80064de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d103      	bne.n	80064ee <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80064e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	e001      	b.n	80064f2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064f2:	787b      	ldrb	r3, [r7, #1]
 80064f4:	059b      	lsls	r3, r3, #22
 80064f6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064fa:	78bb      	ldrb	r3, [r7, #2]
 80064fc:	02db      	lsls	r3, r3, #11
 80064fe:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006502:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006504:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006508:	049b      	lsls	r3, r3, #18
 800650a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800650e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006510:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006512:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006516:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	0159      	lsls	r1, r3, #5
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	440b      	add	r3, r1
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800652e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006530:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006534:	2b03      	cmp	r3, #3
 8006536:	d10f      	bne.n	8006558 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	440a      	add	r2, r1
 800654e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006556:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
}
 800655a:	4618      	mov	r0, r3
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop

08006568 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08c      	sub	sp, #48	; 0x30
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	4613      	mov	r3, r2
 8006574:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006584:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658e:	2b00      	cmp	r3, #0
 8006590:	d028      	beq.n	80065e4 <USB_HC_StartXfer+0x7c>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	791b      	ldrb	r3, [r3, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d124      	bne.n	80065e4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <USB_HC_StartXfer+0x50>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	795b      	ldrb	r3, [r3, #5]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d107      	bne.n	80065b8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	4619      	mov	r1, r3
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fa2e 	bl	8006a10 <USB_DoPing>
      return HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e112      	b.n	80067de <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d112      	bne.n	80065e4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	6a3a      	ldr	r2, [r7, #32]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80065dc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2200      	movs	r2, #0
 80065e2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d018      	beq.n	800661e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	8912      	ldrh	r2, [r2, #8]
 80065f4:	4413      	add	r3, r2
 80065f6:	3b01      	subs	r3, #1
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	8912      	ldrh	r2, [r2, #8]
 80065fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006600:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006604:	8b7b      	ldrh	r3, [r7, #26]
 8006606:	429a      	cmp	r2, r3
 8006608:	d90b      	bls.n	8006622 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800660a:	8b7b      	ldrh	r3, [r7, #26]
 800660c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800660e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	8912      	ldrh	r2, [r2, #8]
 8006614:	fb02 f203 	mul.w	r2, r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	611a      	str	r2, [r3, #16]
 800661c:	e001      	b.n	8006622 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800661e:	2301      	movs	r3, #1
 8006620:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	78db      	ldrb	r3, [r3, #3]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d006      	beq.n	8006638 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800662a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	8912      	ldrh	r2, [r2, #8]
 8006630:	fb02 f203 	mul.w	r2, r2, r3
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006640:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006642:	04d9      	lsls	r1, r3, #19
 8006644:	4b68      	ldr	r3, [pc, #416]	; (80067e8 <USB_HC_StartXfer+0x280>)
 8006646:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006648:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	7a9b      	ldrb	r3, [r3, #10]
 800664e:	075b      	lsls	r3, r3, #29
 8006650:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006654:	69f9      	ldr	r1, [r7, #28]
 8006656:	0148      	lsls	r0, r1, #5
 8006658:	6a39      	ldr	r1, [r7, #32]
 800665a:	4401      	add	r1, r0
 800665c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006660:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006662:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d009      	beq.n	800667e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	68d9      	ldr	r1, [r3, #12]
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	460a      	mov	r2, r1
 800667c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	bf0c      	ite	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	2300      	movne	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	4413      	add	r3, r2
 800669e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	6a3a      	ldr	r2, [r7, #32]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066b4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	7e7b      	ldrb	r3, [r7, #25]
 80066c6:	075b      	lsls	r3, r3, #29
 80066c8:	69f9      	ldr	r1, [r7, #28]
 80066ca:	0148      	lsls	r0, r1, #5
 80066cc:	6a39      	ldr	r1, [r7, #32]
 80066ce:	4401      	add	r1, r0
 80066d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80066d4:	4313      	orrs	r3, r2
 80066d6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a41      	ldr	r2, [pc, #260]	; (80067ec <USB_HC_StartXfer+0x284>)
 80066e8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066ea:	4b40      	ldr	r3, [pc, #256]	; (80067ec <USB_HC_StartXfer+0x284>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066f2:	4a3e      	ldr	r2, [pc, #248]	; (80067ec <USB_HC_StartXfer+0x284>)
 80066f4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	78db      	ldrb	r3, [r3, #3]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d006      	beq.n	800670c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066fe:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <USB_HC_StartXfer+0x284>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006706:	4a39      	ldr	r2, [pc, #228]	; (80067ec <USB_HC_StartXfer+0x284>)
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e005      	b.n	8006718 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800670c:	4b37      	ldr	r3, [pc, #220]	; (80067ec <USB_HC_StartXfer+0x284>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006714:	4a35      	ldr	r2, [pc, #212]	; (80067ec <USB_HC_StartXfer+0x284>)
 8006716:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006718:	4b34      	ldr	r3, [pc, #208]	; (80067ec <USB_HC_StartXfer+0x284>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006720:	4a32      	ldr	r2, [pc, #200]	; (80067ec <USB_HC_StartXfer+0x284>)
 8006722:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006730:	461a      	mov	r2, r3
 8006732:	4b2e      	ldr	r3, [pc, #184]	; (80067ec <USB_HC_StartXfer+0x284>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d14e      	bne.n	80067dc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	78db      	ldrb	r3, [r3, #3]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d14a      	bne.n	80067dc <USB_HC_StartXfer+0x274>
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d046      	beq.n	80067dc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	79db      	ldrb	r3, [r3, #7]
 8006752:	2b03      	cmp	r3, #3
 8006754:	d830      	bhi.n	80067b8 <USB_HC_StartXfer+0x250>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <USB_HC_StartXfer+0x1f4>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	0800676d 	.word	0x0800676d
 8006760:	08006791 	.word	0x08006791
 8006764:	0800676d 	.word	0x0800676d
 8006768:	08006791 	.word	0x08006791
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	3303      	adds	r3, #3
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006776:	8afa      	ldrh	r2, [r7, #22]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	b29b      	uxth	r3, r3
 800677e:	429a      	cmp	r2, r3
 8006780:	d91c      	bls.n	80067bc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f043 0220 	orr.w	r2, r3, #32
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	619a      	str	r2, [r3, #24]
          }
          break;
 800678e:	e015      	b.n	80067bc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	3303      	adds	r3, #3
 8006796:	089b      	lsrs	r3, r3, #2
 8006798:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800679a:	8afa      	ldrh	r2, [r7, #22]
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d90a      	bls.n	80067c0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	619a      	str	r2, [r3, #24]
          }
          break;
 80067b6:	e003      	b.n	80067c0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80067b8:	bf00      	nop
 80067ba:	e002      	b.n	80067c2 <USB_HC_StartXfer+0x25a>
          break;
 80067bc:	bf00      	nop
 80067be:	e000      	b.n	80067c2 <USB_HC_StartXfer+0x25a>
          break;
 80067c0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	68d9      	ldr	r1, [r3, #12]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	785a      	ldrb	r2, [r3, #1]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	b298      	uxth	r0, r3
 80067d0:	2300      	movs	r3, #0
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	4603      	mov	r3, r0
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff fbce 	bl	8005f78 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3728      	adds	r7, #40	; 0x28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	1ff80000 	.word	0x1ff80000
 80067ec:	200000b8 	.word	0x200000b8

080067f0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	b29b      	uxth	r3, r3
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006812:	b480      	push	{r7}
 8006814:	b087      	sub	sp, #28
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	0c9b      	lsrs	r3, r3, #18
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <USB_HC_Halt+0x3a>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d16c      	bne.n	8006926 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	440a      	add	r2, r1
 8006862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800686a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d143      	bne.n	8006900 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	440a      	add	r2, r1
 800688e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006892:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006896:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068d6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	3301      	adds	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068e4:	d81d      	bhi.n	8006922 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068fc:	d0ec      	beq.n	80068d8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068fe:	e080      	b.n	8006a02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	440a      	add	r2, r1
 8006916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800691e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006920:	e06f      	b.n	8006a02 <USB_HC_Halt+0x1f0>
          break;
 8006922:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006924:	e06d      	b.n	8006a02 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4413      	add	r3, r2
 800692e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	0151      	lsls	r1, r2, #5
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	440a      	add	r2, r1
 800693c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006944:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d143      	bne.n	80069de <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	440a      	add	r2, r1
 800696c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006974:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	440a      	add	r2, r1
 800698c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006994:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069b4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	3301      	adds	r3, #1
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c2:	d81d      	bhi.n	8006a00 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069da:	d0ec      	beq.n	80069b6 <USB_HC_Halt+0x1a4>
 80069dc:	e011      	b.n	8006a02 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	e000      	b.n	8006a02 <USB_HC_Halt+0x1f0>
          break;
 8006a00:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a24:	2301      	movs	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	04da      	lsls	r2, r3, #19
 8006a2c:	4b15      	ldr	r3, [pc, #84]	; (8006a84 <USB_DoPing+0x74>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a58:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a60:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	1ff80000 	.word	0x1ff80000

08006a88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff f9ea 	bl	8005e72 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006a9e:	2110      	movs	r1, #16
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff fa21 	bl	8005ee8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fa44 	bl	8005f34 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006aac:	2300      	movs	r3, #0
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	e01f      	b.n	8006af2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ad0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ad8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	3301      	adds	r3, #1
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b0f      	cmp	r3, #15
 8006af6:	d9dc      	bls.n	8006ab2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	e034      	b.n	8006b68 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b14:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b1c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b24:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b32:	461a      	mov	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b44:	d80c      	bhi.n	8006b60 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b5c:	d0ec      	beq.n	8006b38 <USB_StopHost+0xb0>
 8006b5e:	e000      	b.n	8006b62 <USB_StopHost+0xda>
        break;
 8006b60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	3301      	adds	r3, #1
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2b0f      	cmp	r3, #15
 8006b6c:	d9c7      	bls.n	8006afe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b74:	461a      	mov	r2, r3
 8006b76:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff f963 	bl	8005e50 <USB_EnableGlobalInt>

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006b98:	4904      	ldr	r1, [pc, #16]	; (8006bac <MX_FATFS_Init+0x18>)
 8006b9a:	4805      	ldr	r0, [pc, #20]	; (8006bb0 <MX_FATFS_Init+0x1c>)
 8006b9c:	f007 f966 	bl	800de6c <FATFS_LinkDriver>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <MX_FATFS_Init+0x20>)
 8006ba6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ba8:	bf00      	nop
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20000730 	.word	0x20000730
 8006bb0:	0800f450 	.word	0x0800f450
 8006bb4:	200027cc 	.word	0x200027cc

08006bb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006bbc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4808      	ldr	r0, [pc, #32]	; (8006c14 <USBH_status+0x34>)
 8006bf4:	f001 fa43 	bl	800807e <USBH_MSC_UnitIsReady>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <USBH_status+0x24>
  {
    res = RES_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]
 8006c02:	e001      	b.n	8006c08 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	200027d0 	.word	0x200027d0

08006c18 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b094      	sub	sp, #80	; 0x50
 8006c1c:	af02      	add	r7, sp, #8
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	607a      	str	r2, [r7, #4]
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	4603      	mov	r3, r0
 8006c26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006c2e:	7bf9      	ldrb	r1, [r7, #15]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	4812      	ldr	r0, [pc, #72]	; (8006c84 <USBH_read+0x6c>)
 8006c3a:	f001 fa6a 	bl	8008112 <USBH_MSC_Read>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d103      	bne.n	8006c4c <USBH_read+0x34>
  {
    res = RES_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006c4a:	e015      	b.n	8006c78 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006c4c:	f107 0210 	add.w	r2, r7, #16
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	4619      	mov	r1, r3
 8006c54:	480b      	ldr	r0, [pc, #44]	; (8006c84 <USBH_read+0x6c>)
 8006c56:	f001 fa38 	bl	80080ca <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006c5a:	7f7b      	ldrb	r3, [r7, #29]
 8006c5c:	2b28      	cmp	r3, #40	; 0x28
 8006c5e:	d003      	beq.n	8006c68 <USBH_read+0x50>
 8006c60:	2b3a      	cmp	r3, #58	; 0x3a
 8006c62:	d001      	beq.n	8006c68 <USBH_read+0x50>
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d103      	bne.n	8006c70 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006c6e:	e003      	b.n	8006c78 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006c76:	bf00      	nop
    }
  }

  return res;
 8006c78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3748      	adds	r7, #72	; 0x48
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	200027d0 	.word	0x200027d0

08006c88 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b094      	sub	sp, #80	; 0x50
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006c9e:	7bf9      	ldrb	r1, [r7, #15]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4817      	ldr	r0, [pc, #92]	; (8006d08 <USBH_write+0x80>)
 8006caa:	f001 fa9b 	bl	80081e4 <USBH_MSC_Write>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <USBH_write+0x34>
  {
    res = RES_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006cba:	e01f      	b.n	8006cfc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006cbc:	f107 0210 	add.w	r2, r7, #16
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4810      	ldr	r0, [pc, #64]	; (8006d08 <USBH_write+0x80>)
 8006cc6:	f001 fa00 	bl	80080ca <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006cca:	7f7b      	ldrb	r3, [r7, #29]
 8006ccc:	2b27      	cmp	r3, #39	; 0x27
 8006cce:	d009      	beq.n	8006ce4 <USBH_write+0x5c>
 8006cd0:	2b27      	cmp	r3, #39	; 0x27
 8006cd2:	dc02      	bgt.n	8006cda <USBH_write+0x52>
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d009      	beq.n	8006cec <USBH_write+0x64>
 8006cd8:	e00c      	b.n	8006cf4 <USBH_write+0x6c>
 8006cda:	2b28      	cmp	r3, #40	; 0x28
 8006cdc:	d006      	beq.n	8006cec <USBH_write+0x64>
 8006cde:	2b3a      	cmp	r3, #58	; 0x3a
 8006ce0:	d004      	beq.n	8006cec <USBH_write+0x64>
 8006ce2:	e007      	b.n	8006cf4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006cea:	e007      	b.n	8006cfc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006cec:	2303      	movs	r3, #3
 8006cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006cf2:	e003      	b.n	8006cfc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006cfa:	bf00      	nop
    }
  }

  return res;
 8006cfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3748      	adds	r7, #72	; 0x48
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	200027d0 	.word	0x200027d0

08006d0c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b090      	sub	sp, #64	; 0x40
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	603a      	str	r2, [r7, #0]
 8006d16:	71fb      	strb	r3, [r7, #7]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006d22:	79bb      	ldrb	r3, [r7, #6]
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d852      	bhi.n	8006dce <USBH_ioctl+0xc2>
 8006d28:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <USBH_ioctl+0x24>)
 8006d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2e:	bf00      	nop
 8006d30:	08006d41 	.word	0x08006d41
 8006d34:	08006d49 	.word	0x08006d49
 8006d38:	08006d73 	.word	0x08006d73
 8006d3c:	08006d9f 	.word	0x08006d9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006d46:	e045      	b.n	8006dd4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006d48:	f107 0208 	add.w	r2, r7, #8
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4823      	ldr	r0, [pc, #140]	; (8006de0 <USBH_ioctl+0xd4>)
 8006d52:	f001 f9ba 	bl	80080ca <USBH_MSC_GetLUNInfo>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006d68:	e034      	b.n	8006dd4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006d70:	e030      	b.n	8006dd4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006d72:	f107 0208 	add.w	r2, r7, #8
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4819      	ldr	r0, [pc, #100]	; (8006de0 <USBH_ioctl+0xd4>)
 8006d7c:	f001 f9a5 	bl	80080ca <USBH_MSC_GetLUNInfo>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d107      	bne.n	8006d96 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006d86:	8a3b      	ldrh	r3, [r7, #16]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006d94:	e01e      	b.n	8006dd4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006d9c:	e01a      	b.n	8006dd4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006d9e:	f107 0208 	add.w	r2, r7, #8
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	4619      	mov	r1, r3
 8006da6:	480e      	ldr	r0, [pc, #56]	; (8006de0 <USBH_ioctl+0xd4>)
 8006da8:	f001 f98f 	bl	80080ca <USBH_MSC_GetLUNInfo>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006db2:	8a3b      	ldrh	r3, [r7, #16]
 8006db4:	0a5b      	lsrs	r3, r3, #9
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006dc4:	e006      	b.n	8006dd4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006dcc:	e002      	b.n	8006dd4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006dce:	2304      	movs	r3, #4
 8006dd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006dd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3740      	adds	r7, #64	; 0x40
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	200027d0 	.word	0x200027d0

08006de4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e029      	b.n	8006e50 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	79fa      	ldrb	r2, [r7, #7]
 8006e00:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f81f 	bl	8006e58 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f007 f969 	bl	800e120 <USBH_LL_Init>

  return USBH_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e009      	b.n	8006e7e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	33e0      	adds	r3, #224	; 0xe0
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	2200      	movs	r2, #0
 8006e76:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b0e      	cmp	r3, #14
 8006e82:	d9f2      	bls.n	8006e6a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	e009      	b.n	8006e9e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea4:	d3f1      	bcc.n	8006e8a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2240      	movs	r2, #64	; 0x40
 8006eca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d016      	beq.n	8006f42 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10e      	bne.n	8006f3c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f24:	1c59      	adds	r1, r3, #1
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	33de      	adds	r3, #222	; 0xde
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
 8006f3a:	e004      	b.n	8006f46 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	73fb      	strb	r3, [r7, #15]
 8006f40:	e001      	b.n	8006f46 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f42:	2302      	movs	r3, #2
 8006f44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f6a:	78fa      	ldrb	r2, [r7, #3]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d204      	bcs.n	8006f7a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	78fa      	ldrb	r2, [r7, #3]
 8006f74:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006f78:	e001      	b.n	8006f7e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	4608      	mov	r0, r1
 8006f96:	4611      	mov	r1, r2
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	70fb      	strb	r3, [r7, #3]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	70bb      	strb	r3, [r7, #2]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006fb4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fb6:	e025      	b.n	8007004 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	221a      	movs	r2, #26
 8006fbc:	fb02 f303 	mul.w	r3, r2, r3
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	3302      	adds	r3, #2
 8006fc8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	795b      	ldrb	r3, [r3, #5]
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d002      	beq.n	8006fda <USBH_FindInterface+0x4e>
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	2bff      	cmp	r3, #255	; 0xff
 8006fd8:	d111      	bne.n	8006ffe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fde:	78ba      	ldrb	r2, [r7, #2]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d002      	beq.n	8006fea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fe4:	78bb      	ldrb	r3, [r7, #2]
 8006fe6:	2bff      	cmp	r3, #255	; 0xff
 8006fe8:	d109      	bne.n	8006ffe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fee:	787a      	ldrb	r2, [r7, #1]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d002      	beq.n	8006ffa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ff4:	787b      	ldrb	r3, [r7, #1]
 8006ff6:	2bff      	cmp	r3, #255	; 0xff
 8006ff8:	d101      	bne.n	8006ffe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	e006      	b.n	800700c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	3301      	adds	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d9d6      	bls.n	8006fb8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800700a:	23ff      	movs	r3, #255	; 0xff
}
 800700c:	4618      	mov	r0, r3
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f007 f8b9 	bl	800e198 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007026:	2101      	movs	r1, #1
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f007 f990 	bl	800e34e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f804 	bl	800707a <USBH_HandleSof>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b0b      	cmp	r3, #11
 800708a:	d10a      	bne.n	80070a2 <USBH_HandleSof+0x28>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
  }
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80070ba:	bf00      	nop
}
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80070d6:	bf00      	nop
}
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f007 f84c 	bl	800e1ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	791b      	ldrb	r3, [r3, #4]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fe5b 	bl	8008df8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fe55 	bl	8008df8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	789b      	ldrb	r3, [r3, #2]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d10f      	bne.n	800718c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	b29a      	uxth	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800718c:	2200      	movs	r2, #0
 800718e:	2100      	movs	r1, #0
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f805 	bl	80071a0 <USBH_CtlReq>
 8007196:	4603      	mov	r3, r0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80071ae:	2301      	movs	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	789b      	ldrb	r3, [r3, #2]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d002      	beq.n	80071c0 <USBH_CtlReq+0x20>
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d00f      	beq.n	80071de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80071be:	e027      	b.n	8007210 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	88fa      	ldrh	r2, [r7, #6]
 80071ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2202      	movs	r2, #2
 80071d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
      break;
 80071dc:	e018      	b.n	8007210 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f81c 	bl	800721c <USBH_HandleControl>
 80071e4:	4603      	mov	r3, r0
 80071e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <USBH_CtlReq+0x54>
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d106      	bne.n	8007202 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	761a      	strb	r2, [r3, #24]
      break;
 8007200:	e005      	b.n	800720e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	2b02      	cmp	r3, #2
 8007206:	d102      	bne.n	800720e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	709a      	strb	r2, [r3, #2]
      break;
 800720e:	bf00      	nop
  }
  return status;
 8007210:	7dfb      	ldrb	r3, [r7, #23]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007228:	2300      	movs	r3, #0
 800722a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	7e1b      	ldrb	r3, [r3, #24]
 8007230:	3b01      	subs	r3, #1
 8007232:	2b0a      	cmp	r3, #10
 8007234:	f200 8158 	bhi.w	80074e8 <USBH_HandleControl+0x2cc>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <USBH_HandleControl+0x24>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	0800726d 	.word	0x0800726d
 8007244:	08007287 	.word	0x08007287
 8007248:	080072f1 	.word	0x080072f1
 800724c:	08007317 	.word	0x08007317
 8007250:	0800734f 	.word	0x0800734f
 8007254:	0800737b 	.word	0x0800737b
 8007258:	080073cd 	.word	0x080073cd
 800725c:	080073ef 	.word	0x080073ef
 8007260:	0800742b 	.word	0x0800742b
 8007264:	08007453 	.word	0x08007453
 8007268:	08007491 	.word	0x08007491
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f103 0110 	add.w	r1, r3, #16
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	795b      	ldrb	r3, [r3, #5]
 8007276:	461a      	mov	r2, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f945 	bl	8007508 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	761a      	strb	r2, [r3, #24]
      break;
 8007284:	e13b      	b.n	80074fe <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	795b      	ldrb	r3, [r3, #5]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f007 f84b 	bl	800e328 <USBH_LL_GetURBState>
 8007292:	4603      	mov	r3, r0
 8007294:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d11e      	bne.n	80072da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	7c1b      	ldrb	r3, [r3, #16]
 80072a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8adb      	ldrh	r3, [r3, #22]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80072ae:	7b7b      	ldrb	r3, [r7, #13]
 80072b0:	2b80      	cmp	r3, #128	; 0x80
 80072b2:	d103      	bne.n	80072bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2203      	movs	r2, #3
 80072b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80072ba:	e117      	b.n	80074ec <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2205      	movs	r2, #5
 80072c0:	761a      	strb	r2, [r3, #24]
      break;
 80072c2:	e113      	b.n	80074ec <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80072c4:	7b7b      	ldrb	r3, [r7, #13]
 80072c6:	2b80      	cmp	r3, #128	; 0x80
 80072c8:	d103      	bne.n	80072d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2209      	movs	r2, #9
 80072ce:	761a      	strb	r2, [r3, #24]
      break;
 80072d0:	e10c      	b.n	80074ec <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2207      	movs	r2, #7
 80072d6:	761a      	strb	r2, [r3, #24]
      break;
 80072d8:	e108      	b.n	80074ec <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d003      	beq.n	80072e8 <USBH_HandleControl+0xcc>
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	f040 8102 	bne.w	80074ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	220b      	movs	r2, #11
 80072ec:	761a      	strb	r2, [r3, #24]
      break;
 80072ee:	e0fd      	b.n	80074ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6899      	ldr	r1, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	899a      	ldrh	r2, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	791b      	ldrb	r3, [r3, #4]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f93c 	bl	8007586 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2204      	movs	r2, #4
 8007312:	761a      	strb	r2, [r3, #24]
      break;
 8007314:	e0f3      	b.n	80074fe <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	791b      	ldrb	r3, [r3, #4]
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f007 f803 	bl	800e328 <USBH_LL_GetURBState>
 8007322:	4603      	mov	r3, r0
 8007324:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d102      	bne.n	8007332 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2209      	movs	r2, #9
 8007330:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	2b05      	cmp	r3, #5
 8007336:	d102      	bne.n	800733e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007338:	2303      	movs	r3, #3
 800733a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800733c:	e0d8      	b.n	80074f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b04      	cmp	r3, #4
 8007342:	f040 80d5 	bne.w	80074f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	220b      	movs	r2, #11
 800734a:	761a      	strb	r2, [r3, #24]
      break;
 800734c:	e0d0      	b.n	80074f0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6899      	ldr	r1, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	899a      	ldrh	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	7958      	ldrb	r0, [r3, #5]
 800735a:	2301      	movs	r3, #1
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	4603      	mov	r3, r0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f8eb 	bl	800753c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800736c:	b29a      	uxth	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2206      	movs	r2, #6
 8007376:	761a      	strb	r2, [r3, #24]
      break;
 8007378:	e0c1      	b.n	80074fe <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	795b      	ldrb	r3, [r3, #5]
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f006 ffd1 	bl	800e328 <USBH_LL_GetURBState>
 8007386:	4603      	mov	r3, r0
 8007388:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d103      	bne.n	8007398 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2207      	movs	r2, #7
 8007394:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007396:	e0ad      	b.n	80074f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b05      	cmp	r3, #5
 800739c:	d105      	bne.n	80073aa <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	220c      	movs	r2, #12
 80073a2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80073a4:	2303      	movs	r3, #3
 80073a6:	73fb      	strb	r3, [r7, #15]
      break;
 80073a8:	e0a4      	b.n	80074f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d103      	bne.n	80073b8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2205      	movs	r2, #5
 80073b4:	761a      	strb	r2, [r3, #24]
      break;
 80073b6:	e09d      	b.n	80074f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	f040 809a 	bne.w	80074f4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	220b      	movs	r2, #11
 80073c4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80073c6:	2302      	movs	r3, #2
 80073c8:	73fb      	strb	r3, [r7, #15]
      break;
 80073ca:	e093      	b.n	80074f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	791b      	ldrb	r3, [r3, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	2100      	movs	r1, #0
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f8d6 	bl	8007586 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2208      	movs	r2, #8
 80073ea:	761a      	strb	r2, [r3, #24]

      break;
 80073ec:	e087      	b.n	80074fe <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	791b      	ldrb	r3, [r3, #4]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f006 ff97 	bl	800e328 <USBH_LL_GetURBState>
 80073fa:	4603      	mov	r3, r0
 80073fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d105      	bne.n	8007410 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	220d      	movs	r2, #13
 8007408:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800740e:	e073      	b.n	80074f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	2b04      	cmp	r3, #4
 8007414:	d103      	bne.n	800741e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	220b      	movs	r2, #11
 800741a:	761a      	strb	r2, [r3, #24]
      break;
 800741c:	e06c      	b.n	80074f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b05      	cmp	r3, #5
 8007422:	d169      	bne.n	80074f8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007424:	2303      	movs	r3, #3
 8007426:	73fb      	strb	r3, [r7, #15]
      break;
 8007428:	e066      	b.n	80074f8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	795a      	ldrb	r2, [r3, #5]
 800742e:	2301      	movs	r3, #1
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	4613      	mov	r3, r2
 8007434:	2200      	movs	r2, #0
 8007436:	2100      	movs	r1, #0
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f87f 	bl	800753c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007444:	b29a      	uxth	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	220a      	movs	r2, #10
 800744e:	761a      	strb	r2, [r3, #24]
      break;
 8007450:	e055      	b.n	80074fe <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	795b      	ldrb	r3, [r3, #5]
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f006 ff65 	bl	800e328 <USBH_LL_GetURBState>
 800745e:	4603      	mov	r3, r0
 8007460:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d105      	bne.n	8007474 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	220d      	movs	r2, #13
 8007470:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007472:	e043      	b.n	80074fc <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d103      	bne.n	8007482 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2209      	movs	r2, #9
 800747e:	761a      	strb	r2, [r3, #24]
      break;
 8007480:	e03c      	b.n	80074fc <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b04      	cmp	r3, #4
 8007486:	d139      	bne.n	80074fc <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	220b      	movs	r2, #11
 800748c:	761a      	strb	r2, [r3, #24]
      break;
 800748e:	e035      	b.n	80074fc <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7e5b      	ldrb	r3, [r3, #25]
 8007494:	3301      	adds	r3, #1
 8007496:	b2da      	uxtb	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	765a      	strb	r2, [r3, #25]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7e5b      	ldrb	r3, [r3, #25]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d806      	bhi.n	80074b2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80074b0:	e025      	b.n	80074fe <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074b8:	2106      	movs	r1, #6
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	795b      	ldrb	r3, [r3, #5]
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 fc94 	bl	8008df8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	791b      	ldrb	r3, [r3, #4]
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 fc8e 	bl	8008df8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80074e2:	2302      	movs	r3, #2
 80074e4:	73fb      	strb	r3, [r7, #15]
      break;
 80074e6:	e00a      	b.n	80074fe <USBH_HandleControl+0x2e2>

    default:
      break;
 80074e8:	bf00      	nop
 80074ea:	e008      	b.n	80074fe <USBH_HandleControl+0x2e2>
      break;
 80074ec:	bf00      	nop
 80074ee:	e006      	b.n	80074fe <USBH_HandleControl+0x2e2>
      break;
 80074f0:	bf00      	nop
 80074f2:	e004      	b.n	80074fe <USBH_HandleControl+0x2e2>
      break;
 80074f4:	bf00      	nop
 80074f6:	e002      	b.n	80074fe <USBH_HandleControl+0x2e2>
      break;
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <USBH_HandleControl+0x2e2>
      break;
 80074fc:	bf00      	nop
  }

  return status;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af04      	add	r7, sp, #16
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007516:	79f9      	ldrb	r1, [r7, #7]
 8007518:	2300      	movs	r3, #0
 800751a:	9303      	str	r3, [sp, #12]
 800751c:	2308      	movs	r3, #8
 800751e:	9302      	str	r3, [sp, #8]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	2300      	movs	r3, #0
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	2300      	movs	r3, #0
 800752a:	2200      	movs	r2, #0
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f006 feca 	bl	800e2c6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af04      	add	r7, sp, #16
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4611      	mov	r1, r2
 8007548:	461a      	mov	r2, r3
 800754a:	460b      	mov	r3, r1
 800754c:	80fb      	strh	r3, [r7, #6]
 800754e:	4613      	mov	r3, r2
 8007550:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007560:	7979      	ldrb	r1, [r7, #5]
 8007562:	7e3b      	ldrb	r3, [r7, #24]
 8007564:	9303      	str	r3, [sp, #12]
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	9302      	str	r3, [sp, #8]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	2301      	movs	r3, #1
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	2300      	movs	r3, #0
 8007574:	2200      	movs	r2, #0
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f006 fea5 	bl	800e2c6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b088      	sub	sp, #32
 800758a:	af04      	add	r7, sp, #16
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	4611      	mov	r1, r2
 8007592:	461a      	mov	r2, r3
 8007594:	460b      	mov	r3, r1
 8007596:	80fb      	strh	r3, [r7, #6]
 8007598:	4613      	mov	r3, r2
 800759a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800759c:	7979      	ldrb	r1, [r7, #5]
 800759e:	2300      	movs	r3, #0
 80075a0:	9303      	str	r3, [sp, #12]
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	9302      	str	r3, [sp, #8]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	9301      	str	r3, [sp, #4]
 80075aa:	2301      	movs	r3, #1
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	2300      	movs	r3, #0
 80075b0:	2201      	movs	r2, #1
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f006 fe87 	bl	800e2c6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80075b8:	2300      	movs	r3, #0

}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b088      	sub	sp, #32
 80075c6:	af04      	add	r7, sp, #16
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	4611      	mov	r1, r2
 80075ce:	461a      	mov	r2, r3
 80075d0:	460b      	mov	r3, r1
 80075d2:	80fb      	strh	r3, [r7, #6]
 80075d4:	4613      	mov	r3, r2
 80075d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075e6:	7979      	ldrb	r1, [r7, #5]
 80075e8:	7e3b      	ldrb	r3, [r7, #24]
 80075ea:	9303      	str	r3, [sp, #12]
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	9302      	str	r3, [sp, #8]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	2301      	movs	r3, #1
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	2302      	movs	r3, #2
 80075fa:	2200      	movs	r2, #0
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f006 fe62 	bl	800e2c6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	af04      	add	r7, sp, #16
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4611      	mov	r1, r2
 8007618:	461a      	mov	r2, r3
 800761a:	460b      	mov	r3, r1
 800761c:	80fb      	strh	r3, [r7, #6]
 800761e:	4613      	mov	r3, r2
 8007620:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007622:	7979      	ldrb	r1, [r7, #5]
 8007624:	2300      	movs	r3, #0
 8007626:	9303      	str	r3, [sp, #12]
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	9302      	str	r3, [sp, #8]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	2301      	movs	r3, #1
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2302      	movs	r3, #2
 8007636:	2201      	movs	r2, #1
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f006 fe44 	bl	800e2c6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b089      	sub	sp, #36	; 0x24
 800764c:	af04      	add	r7, sp, #16
 800764e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007656:	7919      	ldrb	r1, [r3, #4]
 8007658:	2350      	movs	r3, #80	; 0x50
 800765a:	2206      	movs	r2, #6
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff fc95 	bl	8006f8c <USBH_FindInterface>
 8007662:	4603      	mov	r3, r0
 8007664:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	2bff      	cmp	r3, #255	; 0xff
 800766a:	d002      	beq.n	8007672 <USBH_MSC_InterfaceInit+0x2a>
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d901      	bls.n	8007676 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007672:	2302      	movs	r3, #2
 8007674:	e0ef      	b.n	8007856 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fc6a 	bl	8006f54 <USBH_SelectInterface>
 8007680:	4603      	mov	r3, r0
 8007682:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800768a:	2302      	movs	r3, #2
 800768c:	e0e3      	b.n	8007856 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007694:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007698:	f006 ff48 	bl	800e52c <malloc>
 800769c:	4603      	mov	r3, r0
 800769e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80076b0:	2302      	movs	r3, #2
 80076b2:	e0d0      	b.n	8007856 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80076b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076b8:	2100      	movs	r1, #0
 80076ba:	68b8      	ldr	r0, [r7, #8]
 80076bc:	f006 ff51 	bl	800e562 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	211a      	movs	r1, #26
 80076c6:	fb01 f303 	mul.w	r3, r1, r3
 80076ca:	4413      	add	r3, r2
 80076cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b25b      	sxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	da16      	bge.n	8007706 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	211a      	movs	r1, #26
 80076de:	fb01 f303 	mul.w	r3, r1, r3
 80076e2:	4413      	add	r3, r2
 80076e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	211a      	movs	r1, #26
 80076f4:	fb01 f303 	mul.w	r3, r1, r3
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076fe:	881a      	ldrh	r2, [r3, #0]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	815a      	strh	r2, [r3, #10]
 8007704:	e015      	b.n	8007732 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	211a      	movs	r1, #26
 800770c:	fb01 f303 	mul.w	r3, r1, r3
 8007710:	4413      	add	r3, r2
 8007712:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007716:	781a      	ldrb	r2, [r3, #0]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	211a      	movs	r1, #26
 8007722:	fb01 f303 	mul.w	r3, r1, r3
 8007726:	4413      	add	r3, r2
 8007728:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800772c:	881a      	ldrh	r2, [r3, #0]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	211a      	movs	r1, #26
 8007738:	fb01 f303 	mul.w	r3, r1, r3
 800773c:	4413      	add	r3, r2
 800773e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	b25b      	sxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	da16      	bge.n	8007778 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	211a      	movs	r1, #26
 8007750:	fb01 f303 	mul.w	r3, r1, r3
 8007754:	4413      	add	r3, r2
 8007756:	f203 3356 	addw	r3, r3, #854	; 0x356
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	211a      	movs	r1, #26
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	4413      	add	r3, r2
 800776c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007770:	881a      	ldrh	r2, [r3, #0]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	815a      	strh	r2, [r3, #10]
 8007776:	e015      	b.n	80077a4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	211a      	movs	r1, #26
 800777e:	fb01 f303 	mul.w	r3, r1, r3
 8007782:	4413      	add	r3, r2
 8007784:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	211a      	movs	r1, #26
 8007794:	fb01 f303 	mul.w	r3, r1, r3
 8007798:	4413      	add	r3, r2
 800779a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800779e:	881a      	ldrh	r2, [r3, #0]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2200      	movs	r2, #0
 80077a8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2200      	movs	r2, #0
 80077ae:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	799b      	ldrb	r3, [r3, #6]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 fafa 	bl	8008db6 <USBH_AllocPipe>
 80077c2:	4603      	mov	r3, r0
 80077c4:	461a      	mov	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	79db      	ldrb	r3, [r3, #7]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 faf0 	bl	8008db6 <USBH_AllocPipe>
 80077d6:	4603      	mov	r3, r0
 80077d8:	461a      	mov	r2, r3
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fda4 	bl	800832c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	7959      	ldrb	r1, [r3, #5]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	7998      	ldrb	r0, [r3, #6]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	8912      	ldrh	r2, [r2, #8]
 80077fc:	9202      	str	r2, [sp, #8]
 80077fe:	2202      	movs	r2, #2
 8007800:	9201      	str	r2, [sp, #4]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	4623      	mov	r3, r4
 8007806:	4602      	mov	r2, r0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 faa5 	bl	8008d58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	7919      	ldrb	r1, [r3, #4]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	79d8      	ldrb	r0, [r3, #7]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	8952      	ldrh	r2, [r2, #10]
 8007826:	9202      	str	r2, [sp, #8]
 8007828:	2202      	movs	r2, #2
 800782a:	9201      	str	r2, [sp, #4]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	4623      	mov	r3, r4
 8007830:	4602      	mov	r2, r0
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 fa90 	bl	8008d58 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	791b      	ldrb	r3, [r3, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f006 fd9b 	bl	800e37c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	795b      	ldrb	r3, [r3, #5]
 800784a:	2200      	movs	r2, #0
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f006 fd94 	bl	800e37c <USBH_LL_SetToggle>

  return USBH_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	bd90      	pop	{r4, r7, pc}

0800785e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	795b      	ldrb	r3, [r3, #5]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	795b      	ldrb	r3, [r3, #5]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 fa89 	bl	8008d96 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	795b      	ldrb	r3, [r3, #5]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 fab4 	bl	8008df8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	791b      	ldrb	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00e      	beq.n	80078bc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	791b      	ldrb	r3, [r3, #4]
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 fa76 	bl	8008d96 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	791b      	ldrb	r3, [r3, #4]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 faa1 	bl	8008df8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f006 fe33 	bl	800e53c <free>
    phost->pActiveClass->pData = 0U;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078dc:	2200      	movs	r2, #0
 80078de:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80078fc:	2301      	movs	r3, #1
 80078fe:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	7b9b      	ldrb	r3, [r3, #14]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d004      	beq.n	8007912 <USBH_MSC_ClassRequest+0x28>
 8007908:	2b03      	cmp	r3, #3
 800790a:	d03e      	beq.n	800798a <USBH_MSC_ClassRequest+0xa0>
 800790c:	2b00      	cmp	r3, #0
 800790e:	d000      	beq.n	8007912 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8007910:	e04a      	b.n	80079a8 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fcea 	bl	80082f0 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	2b03      	cmp	r3, #3
 8007924:	d104      	bne.n	8007930 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2200      	movs	r2, #0
 800792a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d135      	bne.n	80079a2 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d804      	bhi.n	8007948 <USBH_MSC_ClassRequest+0x5e>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	b2da      	uxtb	r2, r3
 8007946:	e000      	b.n	800794a <USBH_MSC_ClassRequest+0x60>
 8007948:	2202      	movs	r2, #2
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800794e:	2300      	movs	r3, #0
 8007950:	73bb      	strb	r3, [r7, #14]
 8007952:	e014      	b.n	800797e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	2134      	movs	r1, #52	; 0x34
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	4413      	add	r3, r2
 8007960:	3392      	adds	r3, #146	; 0x92
 8007962:	2202      	movs	r2, #2
 8007964:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	2134      	movs	r1, #52	; 0x34
 800796c:	fb01 f303 	mul.w	r3, r1, r3
 8007970:	4413      	add	r3, r2
 8007972:	33c1      	adds	r3, #193	; 0xc1
 8007974:	2200      	movs	r2, #0
 8007976:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	3301      	adds	r3, #1
 800797c:	73bb      	strb	r3, [r7, #14]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	7bba      	ldrb	r2, [r7, #14]
 8007984:	429a      	cmp	r2, r3
 8007986:	d3e5      	bcc.n	8007954 <USBH_MSC_ClassRequest+0x6a>
      break;
 8007988:	e00b      	b.n	80079a2 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800798a:	2100      	movs	r1, #0
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fbe3 	bl	8007158 <USBH_ClrFeature>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d106      	bne.n	80079a6 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	7bda      	ldrb	r2, [r3, #15]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	739a      	strb	r2, [r3, #14]
      break;
 80079a0:	e001      	b.n	80079a6 <USBH_MSC_ClassRequest+0xbc>
      break;
 80079a2:	bf00      	nop
 80079a4:	e000      	b.n	80079a8 <USBH_MSC_ClassRequest+0xbe>
      break;
 80079a6:	bf00      	nop
  }

  return status;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80079ca:	2301      	movs	r3, #1
 80079cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80079ce:	2301      	movs	r3, #1
 80079d0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	7b1b      	ldrb	r3, [r3, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <USBH_MSC_Process+0x2e>
 80079da:	2b01      	cmp	r3, #1
 80079dc:	f000 8271 	beq.w	8007ec2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80079e0:	e272      	b.n	8007ec8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	429a      	cmp	r2, r3
 80079f0:	f080 824f 	bcs.w	8007e92 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079fa:	4619      	mov	r1, r3
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	2334      	movs	r3, #52	; 0x34
 8007a00:	fb03 f301 	mul.w	r3, r3, r1
 8007a04:	4413      	add	r3, r2
 8007a06:	3391      	adds	r3, #145	; 0x91
 8007a08:	2201      	movs	r2, #1
 8007a0a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a12:	4619      	mov	r1, r3
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	2334      	movs	r3, #52	; 0x34
 8007a18:	fb03 f301 	mul.w	r3, r3, r1
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3390      	adds	r3, #144	; 0x90
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	f200 8243 	bhi.w	8007eae <USBH_MSC_Process+0x4fa>
 8007a28:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <USBH_MSC_Process+0x7c>)
 8007a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2e:	bf00      	nop
 8007a30:	08007a55 	.word	0x08007a55
 8007a34:	08007eaf 	.word	0x08007eaf
 8007a38:	08007b1d 	.word	0x08007b1d
 8007a3c:	08007ca1 	.word	0x08007ca1
 8007a40:	08007a7b 	.word	0x08007a7b
 8007a44:	08007d6d 	.word	0x08007d6d
 8007a48:	08007eaf 	.word	0x08007eaf
 8007a4c:	08007eaf 	.word	0x08007eaf
 8007a50:	08007e81 	.word	0x08007e81
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	2334      	movs	r3, #52	; 0x34
 8007a60:	fb03 f301 	mul.w	r3, r3, r1
 8007a64:	4413      	add	r3, r2
 8007a66:	3390      	adds	r3, #144	; 0x90
 8007a68:	2204      	movs	r2, #4
 8007a6a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007a78:	e222      	b.n	8007ec0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a80:	b2d9      	uxtb	r1, r3
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a88:	461a      	mov	r2, r3
 8007a8a:	2334      	movs	r3, #52	; 0x34
 8007a8c:	fb03 f302 	mul.w	r3, r3, r2
 8007a90:	3398      	adds	r3, #152	; 0x98
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4413      	add	r3, r2
 8007a96:	3307      	adds	r3, #7
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 ff68 	bl	8008970 <USBH_MSC_SCSI_Inquiry>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10b      	bne.n	8007ac2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	2334      	movs	r3, #52	; 0x34
 8007ab6:	fb03 f301 	mul.w	r3, r3, r1
 8007aba:	4413      	add	r3, r2
 8007abc:	3390      	adds	r3, #144	; 0x90
 8007abe:	2202      	movs	r2, #2
 8007ac0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d10c      	bne.n	8007ae2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ace:	4619      	mov	r1, r3
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	2334      	movs	r3, #52	; 0x34
 8007ad4:	fb03 f301 	mul.w	r3, r3, r1
 8007ad8:	4413      	add	r3, r2
 8007ada:	3390      	adds	r3, #144	; 0x90
 8007adc:	2205      	movs	r2, #5
 8007ade:	701a      	strb	r2, [r3, #0]
            break;
 8007ae0:	e1e7      	b.n	8007eb2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	f040 81e4 	bne.w	8007eb2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007af0:	4619      	mov	r1, r3
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	2334      	movs	r3, #52	; 0x34
 8007af6:	fb03 f301 	mul.w	r3, r3, r1
 8007afa:	4413      	add	r3, r2
 8007afc:	3390      	adds	r3, #144	; 0x90
 8007afe:	2201      	movs	r2, #1
 8007b00:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b08:	4619      	mov	r1, r3
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	2334      	movs	r3, #52	; 0x34
 8007b0e:	fb03 f301 	mul.w	r3, r3, r1
 8007b12:	4413      	add	r3, r2
 8007b14:	3391      	adds	r3, #145	; 0x91
 8007b16:	2202      	movs	r2, #2
 8007b18:	701a      	strb	r2, [r3, #0]
            break;
 8007b1a:	e1ca      	b.n	8007eb2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fe64 	bl	80087f4 <USBH_MSC_SCSI_TestUnitReady>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d149      	bne.n	8007bca <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	2334      	movs	r3, #52	; 0x34
 8007b42:	fb03 f301 	mul.w	r3, r3, r1
 8007b46:	4413      	add	r3, r2
 8007b48:	3392      	adds	r3, #146	; 0x92
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00c      	beq.n	8007b6a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b56:	4619      	mov	r1, r3
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	2334      	movs	r3, #52	; 0x34
 8007b5c:	fb03 f301 	mul.w	r3, r3, r1
 8007b60:	4413      	add	r3, r2
 8007b62:	33c1      	adds	r3, #193	; 0xc1
 8007b64:	2201      	movs	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e00b      	b.n	8007b82 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b70:	4619      	mov	r1, r3
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	2334      	movs	r3, #52	; 0x34
 8007b76:	fb03 f301 	mul.w	r3, r3, r1
 8007b7a:	4413      	add	r3, r2
 8007b7c:	33c1      	adds	r3, #193	; 0xc1
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b88:	4619      	mov	r1, r3
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	2334      	movs	r3, #52	; 0x34
 8007b8e:	fb03 f301 	mul.w	r3, r3, r1
 8007b92:	4413      	add	r3, r2
 8007b94:	3390      	adds	r3, #144	; 0x90
 8007b96:	2203      	movs	r2, #3
 8007b98:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	2334      	movs	r3, #52	; 0x34
 8007ba6:	fb03 f301 	mul.w	r3, r3, r1
 8007baa:	4413      	add	r3, r2
 8007bac:	3391      	adds	r3, #145	; 0x91
 8007bae:	2200      	movs	r2, #0
 8007bb0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bb8:	4619      	mov	r1, r3
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	2334      	movs	r3, #52	; 0x34
 8007bbe:	fb03 f301 	mul.w	r3, r3, r1
 8007bc2:	4413      	add	r3, r2
 8007bc4:	3392      	adds	r3, #146	; 0x92
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d14a      	bne.n	8007c66 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	2334      	movs	r3, #52	; 0x34
 8007bdc:	fb03 f301 	mul.w	r3, r3, r1
 8007be0:	4413      	add	r3, r2
 8007be2:	3392      	adds	r3, #146	; 0x92
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d00c      	beq.n	8007c04 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	2334      	movs	r3, #52	; 0x34
 8007bf6:	fb03 f301 	mul.w	r3, r3, r1
 8007bfa:	4413      	add	r3, r2
 8007bfc:	33c1      	adds	r3, #193	; 0xc1
 8007bfe:	2201      	movs	r2, #1
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	e00b      	b.n	8007c1c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	2334      	movs	r3, #52	; 0x34
 8007c10:	fb03 f301 	mul.w	r3, r3, r1
 8007c14:	4413      	add	r3, r2
 8007c16:	33c1      	adds	r3, #193	; 0xc1
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c22:	4619      	mov	r1, r3
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	2334      	movs	r3, #52	; 0x34
 8007c28:	fb03 f301 	mul.w	r3, r3, r1
 8007c2c:	4413      	add	r3, r2
 8007c2e:	3390      	adds	r3, #144	; 0x90
 8007c30:	2205      	movs	r2, #5
 8007c32:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	2334      	movs	r3, #52	; 0x34
 8007c40:	fb03 f301 	mul.w	r3, r3, r1
 8007c44:	4413      	add	r3, r2
 8007c46:	3391      	adds	r3, #145	; 0x91
 8007c48:	2201      	movs	r2, #1
 8007c4a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c52:	4619      	mov	r1, r3
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	2334      	movs	r3, #52	; 0x34
 8007c58:	fb03 f301 	mul.w	r3, r3, r1
 8007c5c:	4413      	add	r3, r2
 8007c5e:	3392      	adds	r3, #146	; 0x92
 8007c60:	2202      	movs	r2, #2
 8007c62:	701a      	strb	r2, [r3, #0]
            break;
 8007c64:	e127      	b.n	8007eb6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	f040 8124 	bne.w	8007eb6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c74:	4619      	mov	r1, r3
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	2334      	movs	r3, #52	; 0x34
 8007c7a:	fb03 f301 	mul.w	r3, r3, r1
 8007c7e:	4413      	add	r3, r2
 8007c80:	3390      	adds	r3, #144	; 0x90
 8007c82:	2201      	movs	r2, #1
 8007c84:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	2334      	movs	r3, #52	; 0x34
 8007c92:	fb03 f301 	mul.w	r3, r3, r1
 8007c96:	4413      	add	r3, r2
 8007c98:	3391      	adds	r3, #145	; 0x91
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	701a      	strb	r2, [r3, #0]
            break;
 8007c9e:	e10a      	b.n	8007eb6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ca6:	b2d9      	uxtb	r1, r3
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cae:	461a      	mov	r2, r3
 8007cb0:	2334      	movs	r3, #52	; 0x34
 8007cb2:	fb03 f302 	mul.w	r3, r3, r2
 8007cb6:	3390      	adds	r3, #144	; 0x90
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4413      	add	r3, r2
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fdda 	bl	800887a <USBH_MSC_SCSI_ReadCapacity>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d120      	bne.n	8007d12 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	2334      	movs	r3, #52	; 0x34
 8007cdc:	fb03 f301 	mul.w	r3, r3, r1
 8007ce0:	4413      	add	r3, r2
 8007ce2:	3390      	adds	r3, #144	; 0x90
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007cee:	4619      	mov	r1, r3
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	2334      	movs	r3, #52	; 0x34
 8007cf4:	fb03 f301 	mul.w	r3, r3, r1
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3391      	adds	r3, #145	; 0x91
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d06:	3301      	adds	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007d10:	e0d3      	b.n	8007eba <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d10c      	bne.n	8007d32 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d1e:	4619      	mov	r1, r3
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	2334      	movs	r3, #52	; 0x34
 8007d24:	fb03 f301 	mul.w	r3, r3, r1
 8007d28:	4413      	add	r3, r2
 8007d2a:	3390      	adds	r3, #144	; 0x90
 8007d2c:	2205      	movs	r2, #5
 8007d2e:	701a      	strb	r2, [r3, #0]
            break;
 8007d30:	e0c3      	b.n	8007eba <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	f040 80c0 	bne.w	8007eba <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d40:	4619      	mov	r1, r3
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	2334      	movs	r3, #52	; 0x34
 8007d46:	fb03 f301 	mul.w	r3, r3, r1
 8007d4a:	4413      	add	r3, r2
 8007d4c:	3390      	adds	r3, #144	; 0x90
 8007d4e:	2201      	movs	r2, #1
 8007d50:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d58:	4619      	mov	r1, r3
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	2334      	movs	r3, #52	; 0x34
 8007d5e:	fb03 f301 	mul.w	r3, r3, r1
 8007d62:	4413      	add	r3, r2
 8007d64:	3391      	adds	r3, #145	; 0x91
 8007d66:	2202      	movs	r2, #2
 8007d68:	701a      	strb	r2, [r3, #0]
            break;
 8007d6a:	e0a6      	b.n	8007eba <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d72:	b2d9      	uxtb	r1, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	2334      	movs	r3, #52	; 0x34
 8007d7e:	fb03 f302 	mul.w	r3, r3, r2
 8007d82:	3398      	adds	r3, #152	; 0x98
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4413      	add	r3, r2
 8007d88:	3304      	adds	r3, #4
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fe94 	bl	8008aba <USBH_MSC_SCSI_RequestSense>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d145      	bne.n	8007e28 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007da2:	4619      	mov	r1, r3
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	2334      	movs	r3, #52	; 0x34
 8007da8:	fb03 f301 	mul.w	r3, r3, r1
 8007dac:	4413      	add	r3, r2
 8007dae:	339c      	adds	r3, #156	; 0x9c
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b06      	cmp	r3, #6
 8007db4:	d00c      	beq.n	8007dd0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	2334      	movs	r3, #52	; 0x34
 8007dc2:	fb03 f301 	mul.w	r3, r3, r1
 8007dc6:	4413      	add	r3, r2
 8007dc8:	339c      	adds	r3, #156	; 0x9c
 8007dca:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d117      	bne.n	8007e00 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	f242 720f 	movw	r2, #9999	; 0x270f
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d80c      	bhi.n	8007e00 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007dec:	4619      	mov	r1, r3
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	2334      	movs	r3, #52	; 0x34
 8007df2:	fb03 f301 	mul.w	r3, r3, r1
 8007df6:	4413      	add	r3, r2
 8007df8:	3390      	adds	r3, #144	; 0x90
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	701a      	strb	r2, [r3, #0]
                  break;
 8007dfe:	e05f      	b.n	8007ec0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e06:	4619      	mov	r1, r3
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	2334      	movs	r3, #52	; 0x34
 8007e0c:	fb03 f301 	mul.w	r3, r3, r1
 8007e10:	4413      	add	r3, r2
 8007e12:	3390      	adds	r3, #144	; 0x90
 8007e14:	2201      	movs	r2, #1
 8007e16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e1e:	3301      	adds	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d10c      	bne.n	8007e48 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e34:	4619      	mov	r1, r3
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	2334      	movs	r3, #52	; 0x34
 8007e3a:	fb03 f301 	mul.w	r3, r3, r1
 8007e3e:	4413      	add	r3, r2
 8007e40:	3390      	adds	r3, #144	; 0x90
 8007e42:	2208      	movs	r2, #8
 8007e44:	701a      	strb	r2, [r3, #0]
            break;
 8007e46:	e03a      	b.n	8007ebe <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d137      	bne.n	8007ebe <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e54:	4619      	mov	r1, r3
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	2334      	movs	r3, #52	; 0x34
 8007e5a:	fb03 f301 	mul.w	r3, r3, r1
 8007e5e:	4413      	add	r3, r2
 8007e60:	3390      	adds	r3, #144	; 0x90
 8007e62:	2201      	movs	r2, #1
 8007e64:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	2334      	movs	r3, #52	; 0x34
 8007e72:	fb03 f301 	mul.w	r3, r3, r1
 8007e76:	4413      	add	r3, r2
 8007e78:	3391      	adds	r3, #145	; 0x91
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	701a      	strb	r2, [r3, #0]
            break;
 8007e7e:	e01e      	b.n	8007ebe <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007e86:	3301      	adds	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007e90:	e016      	b.n	8007ec0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ea6:	2102      	movs	r1, #2
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
      break;
 8007eac:	e00c      	b.n	8007ec8 <USBH_MSC_Process+0x514>
            break;
 8007eae:	bf00      	nop
 8007eb0:	e00a      	b.n	8007ec8 <USBH_MSC_Process+0x514>
            break;
 8007eb2:	bf00      	nop
 8007eb4:	e008      	b.n	8007ec8 <USBH_MSC_Process+0x514>
            break;
 8007eb6:	bf00      	nop
 8007eb8:	e006      	b.n	8007ec8 <USBH_MSC_Process+0x514>
            break;
 8007eba:	bf00      	nop
 8007ebc:	e004      	b.n	8007ec8 <USBH_MSC_Process+0x514>
            break;
 8007ebe:	bf00      	nop
      break;
 8007ec0:	e002      	b.n	8007ec8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec6:	bf00      	nop
  }
  return error;
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop

08007ed4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b088      	sub	sp, #32
 8007eee:	af02      	add	r7, sp, #8
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007f00:	2301      	movs	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007f04:	2301      	movs	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	2134      	movs	r1, #52	; 0x34
 8007f0e:	fb01 f303 	mul.w	r3, r1, r3
 8007f12:	4413      	add	r3, r2
 8007f14:	3390      	adds	r3, #144	; 0x90
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b06      	cmp	r3, #6
 8007f1a:	d004      	beq.n	8007f26 <USBH_MSC_RdWrProcess+0x3c>
 8007f1c:	2b07      	cmp	r3, #7
 8007f1e:	d037      	beq.n	8007f90 <USBH_MSC_RdWrProcess+0xa6>
 8007f20:	2b05      	cmp	r3, #5
 8007f22:	d06a      	beq.n	8007ffa <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8007f24:	e0a6      	b.n	8008074 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007f26:	78f9      	ldrb	r1, [r7, #3]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2200      	movs	r2, #0
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fea6 	bl	8008c82 <USBH_MSC_SCSI_Read>
 8007f36:	4603      	mov	r3, r0
 8007f38:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10b      	bne.n	8007f58 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	2134      	movs	r1, #52	; 0x34
 8007f46:	fb01 f303 	mul.w	r3, r1, r3
 8007f4a:	4413      	add	r3, r2
 8007f4c:	3390      	adds	r3, #144	; 0x90
 8007f4e:	2201      	movs	r2, #1
 8007f50:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	75fb      	strb	r3, [r7, #23]
      break;
 8007f56:	e088      	b.n	800806a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d109      	bne.n	8007f72 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	2134      	movs	r1, #52	; 0x34
 8007f64:	fb01 f303 	mul.w	r3, r1, r3
 8007f68:	4413      	add	r3, r2
 8007f6a:	3390      	adds	r3, #144	; 0x90
 8007f6c:	2205      	movs	r2, #5
 8007f6e:	701a      	strb	r2, [r3, #0]
      break;
 8007f70:	e07b      	b.n	800806a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d178      	bne.n	800806a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	2134      	movs	r1, #52	; 0x34
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	4413      	add	r3, r2
 8007f84:	3390      	adds	r3, #144	; 0x90
 8007f86:	2208      	movs	r2, #8
 8007f88:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f8e:	e06c      	b.n	800806a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007f90:	78f9      	ldrb	r1, [r7, #3]
 8007f92:	2300      	movs	r3, #0
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	2300      	movs	r3, #0
 8007f98:	2200      	movs	r2, #0
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fe06 	bl	8008bac <USBH_MSC_SCSI_Write>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10b      	bne.n	8007fc2 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	2134      	movs	r1, #52	; 0x34
 8007fb0:	fb01 f303 	mul.w	r3, r1, r3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	3390      	adds	r3, #144	; 0x90
 8007fb8:	2201      	movs	r2, #1
 8007fba:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc0:	e055      	b.n	800806e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d109      	bne.n	8007fdc <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	2134      	movs	r1, #52	; 0x34
 8007fce:	fb01 f303 	mul.w	r3, r1, r3
 8007fd2:	4413      	add	r3, r2
 8007fd4:	3390      	adds	r3, #144	; 0x90
 8007fd6:	2205      	movs	r2, #5
 8007fd8:	701a      	strb	r2, [r3, #0]
      break;
 8007fda:	e048      	b.n	800806e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d145      	bne.n	800806e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007fe2:	78fb      	ldrb	r3, [r7, #3]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	2134      	movs	r1, #52	; 0x34
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	3390      	adds	r3, #144	; 0x90
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff8:	e039      	b.n	800806e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	2234      	movs	r2, #52	; 0x34
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	3398      	adds	r3, #152	; 0x98
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4413      	add	r3, r2
 8008008:	1d1a      	adds	r2, r3, #4
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fd53 	bl	8008aba <USBH_MSC_SCSI_RequestSense>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d113      	bne.n	8008046 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	2134      	movs	r1, #52	; 0x34
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	4413      	add	r3, r2
 800802a:	3390      	adds	r3, #144	; 0x90
 800802c:	2201      	movs	r2, #1
 800802e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	2134      	movs	r1, #52	; 0x34
 8008036:	fb01 f303 	mul.w	r3, r1, r3
 800803a:	4413      	add	r3, r2
 800803c:	3391      	adds	r3, #145	; 0x91
 800803e:	2202      	movs	r2, #2
 8008040:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8008042:	2302      	movs	r3, #2
 8008044:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	2b02      	cmp	r3, #2
 800804a:	d012      	beq.n	8008072 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	2b04      	cmp	r3, #4
 8008050:	d10f      	bne.n	8008072 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008052:	78fb      	ldrb	r3, [r7, #3]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	2134      	movs	r1, #52	; 0x34
 8008058:	fb01 f303 	mul.w	r3, r1, r3
 800805c:	4413      	add	r3, r2
 800805e:	3390      	adds	r3, #144	; 0x90
 8008060:	2208      	movs	r2, #8
 8008062:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008064:	2302      	movs	r3, #2
 8008066:	75fb      	strb	r3, [r7, #23]
      break;
 8008068:	e003      	b.n	8008072 <USBH_MSC_RdWrProcess+0x188>
      break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8008072:	bf00      	nop

  }
  return error;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b0b      	cmp	r3, #11
 800809c:	d10c      	bne.n	80080b8 <USBH_MSC_UnitIsReady+0x3a>
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	2134      	movs	r1, #52	; 0x34
 80080a4:	fb01 f303 	mul.w	r3, r1, r3
 80080a8:	4413      	add	r3, r2
 80080aa:	3391      	adds	r3, #145	; 0x91
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80080b2:	2301      	movs	r3, #1
 80080b4:	73fb      	strb	r3, [r7, #15]
 80080b6:	e001      	b.n	80080bc <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b086      	sub	sp, #24
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	460b      	mov	r3, r1
 80080d4:	607a      	str	r2, [r7, #4]
 80080d6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b0b      	cmp	r3, #11
 80080ea:	d10d      	bne.n	8008108 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	2234      	movs	r2, #52	; 0x34
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
 80080f4:	3390      	adds	r3, #144	; 0x90
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4413      	add	r3, r2
 80080fa:	2234      	movs	r2, #52	; 0x34
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f006 fa24 	bl	800e54c <memcpy>
    return USBH_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	e000      	b.n	800810a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008108:	2302      	movs	r3, #2
  }
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b088      	sub	sp, #32
 8008116:	af02      	add	r7, sp, #8
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
 800811e:	460b      	mov	r3, r1
 8008120:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00e      	beq.n	8008156 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800813e:	2b0b      	cmp	r3, #11
 8008140:	d109      	bne.n	8008156 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	2134      	movs	r1, #52	; 0x34
 8008148:	fb01 f303 	mul.w	r3, r1, r3
 800814c:	4413      	add	r3, r2
 800814e:	3390      	adds	r3, #144	; 0x90
 8008150:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008152:	2b01      	cmp	r3, #1
 8008154:	d001      	beq.n	800815a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008156:	2302      	movs	r3, #2
 8008158:	e040      	b.n	80081dc <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2206      	movs	r2, #6
 800815e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	2134      	movs	r1, #52	; 0x34
 8008166:	fb01 f303 	mul.w	r3, r1, r3
 800816a:	4413      	add	r3, r2
 800816c:	3390      	adds	r3, #144	; 0x90
 800816e:	2206      	movs	r2, #6
 8008170:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008172:	7afb      	ldrb	r3, [r7, #11]
 8008174:	b29a      	uxth	r2, r3
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800817c:	7af9      	ldrb	r1, [r7, #11]
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fd7b 	bl	8008c82 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008192:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008194:	e016      	b.n	80081c4 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	1ad2      	subs	r2, r2, r3
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	f242 7110 	movw	r1, #10000	; 0x2710
 80081a6:	fb01 f303 	mul.w	r3, r1, r3
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d805      	bhi.n	80081ba <USBH_MSC_Read+0xa8>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d104      	bne.n	80081c4 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2201      	movs	r2, #1
 80081be:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80081c0:	2302      	movs	r3, #2
 80081c2:	e00b      	b.n	80081dc <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80081c4:	7afb      	ldrb	r3, [r7, #11]
 80081c6:	4619      	mov	r1, r3
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7ff fe8e 	bl	8007eea <USBH_MSC_RdWrProcess>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d0e0      	beq.n	8008196 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2201      	movs	r2, #1
 80081d8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	460b      	mov	r3, r1
 80081f2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00e      	beq.n	8008228 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008210:	2b0b      	cmp	r3, #11
 8008212:	d109      	bne.n	8008228 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	2134      	movs	r1, #52	; 0x34
 800821a:	fb01 f303 	mul.w	r3, r1, r3
 800821e:	4413      	add	r3, r2
 8008220:	3390      	adds	r3, #144	; 0x90
 8008222:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008224:	2b01      	cmp	r3, #1
 8008226:	d001      	beq.n	800822c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008228:	2302      	movs	r3, #2
 800822a:	e040      	b.n	80082ae <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2207      	movs	r2, #7
 8008230:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	2134      	movs	r1, #52	; 0x34
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	4413      	add	r3, r2
 800823e:	3390      	adds	r3, #144	; 0x90
 8008240:	2207      	movs	r2, #7
 8008242:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	b29a      	uxth	r2, r3
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800824e:	7af9      	ldrb	r1, [r7, #11]
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 fca7 	bl	8008bac <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008264:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008266:	e016      	b.n	8008296 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	1ad2      	subs	r2, r2, r3
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	f242 7110 	movw	r1, #10000	; 0x2710
 8008278:	fb01 f303 	mul.w	r3, r1, r3
 800827c:	429a      	cmp	r2, r3
 800827e:	d805      	bhi.n	800828c <USBH_MSC_Write+0xa8>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2201      	movs	r2, #1
 8008290:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	e00b      	b.n	80082ae <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008296:	7afb      	ldrb	r3, [r7, #11]
 8008298:	4619      	mov	r1, r3
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7ff fe25 	bl	8007eea <USBH_MSC_RdWrProcess>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d0e0      	beq.n	8008268 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2201      	movs	r2, #1
 80082aa:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2221      	movs	r2, #33	; 0x21
 80082c2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	22ff      	movs	r2, #255	; 0xff
 80082c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80082dc:	2200      	movs	r2, #0
 80082de:	2100      	movs	r1, #0
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7fe ff5d 	bl	80071a0 <USBH_CtlReq>
 80082e6:	4603      	mov	r3, r0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	22a1      	movs	r2, #161	; 0xa1
 80082fe:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	22fe      	movs	r2, #254	; 0xfe
 8008304:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008318:	2201      	movs	r2, #1
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7fe ff3f 	bl	80071a0 <USBH_CtlReq>
 8008322:	4603      	mov	r3, r0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4a09      	ldr	r2, [pc, #36]	; (8008368 <USBH_MSC_BOT_Init+0x3c>)
 8008342:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4a09      	ldr	r2, [pc, #36]	; (800836c <USBH_MSC_BOT_Init+0x40>)
 8008348:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	43425355 	.word	0x43425355
 800836c:	20304050 	.word	0x20304050

08008370 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af02      	add	r7, sp, #8
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800837c:	2301      	movs	r3, #1
 800837e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008380:	2301      	movs	r3, #1
 8008382:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008384:	2301      	movs	r3, #1
 8008386:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008388:	2300      	movs	r3, #0
 800838a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083a0:	3b01      	subs	r3, #1
 80083a2:	2b0a      	cmp	r3, #10
 80083a4:	f200 81a1 	bhi.w	80086ea <USBH_MSC_BOT_Process+0x37a>
 80083a8:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <USBH_MSC_BOT_Process+0x40>)
 80083aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ae:	bf00      	nop
 80083b0:	080083dd 	.word	0x080083dd
 80083b4:	08008407 	.word	0x08008407
 80083b8:	08008471 	.word	0x08008471
 80083bc:	0800848f 	.word	0x0800848f
 80083c0:	08008513 	.word	0x08008513
 80083c4:	08008537 	.word	0x08008537
 80083c8:	080085d1 	.word	0x080085d1
 80083cc:	080085ed 	.word	0x080085ed
 80083d0:	0800863f 	.word	0x0800863f
 80083d4:	0800866f 	.word	0x0800866f
 80083d8:	080086d1 	.word	0x080086d1
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	78fa      	ldrb	r2, [r7, #3]
 80083e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	795a      	ldrb	r2, [r3, #5]
 80083f6:	2301      	movs	r3, #1
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	4613      	mov	r3, r2
 80083fc:	221f      	movs	r2, #31
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff f8df 	bl	80075c2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008404:	e180      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	795b      	ldrb	r3, [r3, #5]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f005 ff8b 	bl	800e328 <USBH_LL_GetURBState>
 8008412:	4603      	mov	r3, r0
 8008414:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008416:	7d3b      	ldrb	r3, [r7, #20]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d118      	bne.n	800844e <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00f      	beq.n	8008444 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800842a:	b25b      	sxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	da04      	bge.n	800843a <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	2203      	movs	r2, #3
 8008434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008438:	e159      	b.n	80086ee <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2205      	movs	r2, #5
 800843e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008442:	e154      	b.n	80086ee <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2207      	movs	r2, #7
 8008448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800844c:	e14f      	b.n	80086ee <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800844e:	7d3b      	ldrb	r3, [r7, #20]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d104      	bne.n	800845e <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800845c:	e147      	b.n	80086ee <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800845e:	7d3b      	ldrb	r3, [r7, #20]
 8008460:	2b05      	cmp	r3, #5
 8008462:	f040 8144 	bne.w	80086ee <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	220a      	movs	r2, #10
 800846a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800846e:	e13e      	b.n	80086ee <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	895a      	ldrh	r2, [r3, #10]
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	791b      	ldrb	r3, [r3, #4]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff f8c4 	bl	800760c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	2204      	movs	r2, #4
 8008488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800848c:	e13c      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	791b      	ldrb	r3, [r3, #4]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f005 ff47 	bl	800e328 <USBH_LL_GetURBState>
 800849a:	4603      	mov	r3, r0
 800849c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800849e:	7d3b      	ldrb	r3, [r7, #20]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d12d      	bne.n	8008500 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	8952      	ldrh	r2, [r2, #10]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d910      	bls.n	80084d2 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	8952      	ldrh	r2, [r2, #10]
 80084ba:	441a      	add	r2, r3
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	8952      	ldrh	r2, [r2, #10]
 80084ca:	1a9a      	subs	r2, r3, r2
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80084d0:	e002      	b.n	80084d8 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2200      	movs	r2, #0
 80084d6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00a      	beq.n	80084f6 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	895a      	ldrh	r2, [r3, #10]
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	791b      	ldrb	r3, [r3, #4]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff f88c 	bl	800760c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80084f4:	e0fd      	b.n	80086f2 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	2207      	movs	r2, #7
 80084fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80084fe:	e0f8      	b.n	80086f2 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8008500:	7d3b      	ldrb	r3, [r7, #20]
 8008502:	2b05      	cmp	r3, #5
 8008504:	f040 80f5 	bne.w	80086f2 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2209      	movs	r2, #9
 800850c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008510:	e0ef      	b.n	80086f2 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	891a      	ldrh	r2, [r3, #8]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	7958      	ldrb	r0, [r3, #5]
 8008520:	2301      	movs	r3, #1
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	4603      	mov	r3, r0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff f84b 	bl	80075c2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2206      	movs	r2, #6
 8008530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008534:	e0e8      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	795b      	ldrb	r3, [r3, #5]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f005 fef3 	bl	800e328 <USBH_LL_GetURBState>
 8008542:	4603      	mov	r3, r0
 8008544:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008546:	7d3b      	ldrb	r3, [r7, #20]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d130      	bne.n	80085ae <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	8912      	ldrh	r2, [r2, #8]
 8008554:	4293      	cmp	r3, r2
 8008556:	d910      	bls.n	800857a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	8912      	ldrh	r2, [r2, #8]
 8008562:	441a      	add	r2, r3
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	8912      	ldrh	r2, [r2, #8]
 8008572:	1a9a      	subs	r2, r3, r2
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	65da      	str	r2, [r3, #92]	; 0x5c
 8008578:	e002      	b.n	8008580 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	2200      	movs	r2, #0
 800857e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00d      	beq.n	80085a4 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	891a      	ldrh	r2, [r3, #8]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	7958      	ldrb	r0, [r3, #5]
 8008596:	2301      	movs	r3, #1
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	4603      	mov	r3, r0
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff f810 	bl	80075c2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80085a2:	e0a8      	b.n	80086f6 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2207      	movs	r2, #7
 80085a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80085ac:	e0a3      	b.n	80086f6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085ae:	7d3b      	ldrb	r3, [r7, #20]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d104      	bne.n	80085be <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	2205      	movs	r2, #5
 80085b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80085bc:	e09b      	b.n	80086f6 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 80085be:	7d3b      	ldrb	r3, [r7, #20]
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	f040 8098 	bne.w	80086f6 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	220a      	movs	r2, #10
 80085ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80085ce:	e092      	b.n	80086f6 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	791b      	ldrb	r3, [r3, #4]
 80085da:	220d      	movs	r2, #13
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff f815 	bl	800760c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2208      	movs	r2, #8
 80085e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80085ea:	e08d      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	791b      	ldrb	r3, [r3, #4]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f005 fe98 	bl	800e328 <USBH_LL_GetURBState>
 80085f8:	4603      	mov	r3, r0
 80085fa:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80085fc:	7d3b      	ldrb	r3, [r7, #20]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d115      	bne.n	800862e <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f8aa 	bl	800876c <USBH_MSC_DecodeCSW>
 8008618:	4603      	mov	r3, r0
 800861a:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800861c:	7d7b      	ldrb	r3, [r7, #21]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d102      	bne.n	8008628 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008626:	e068      	b.n	80086fa <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8008628:	2302      	movs	r3, #2
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	e065      	b.n	80086fa <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800862e:	7d3b      	ldrb	r3, [r7, #20]
 8008630:	2b05      	cmp	r3, #5
 8008632:	d162      	bne.n	80086fa <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2209      	movs	r2, #9
 8008638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800863c:	e05d      	b.n	80086fa <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	2200      	movs	r2, #0
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f865 	bl	8008714 <USBH_MSC_BOT_Abort>
 800864a:	4603      	mov	r3, r0
 800864c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800864e:	7dbb      	ldrb	r3, [r7, #22]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d104      	bne.n	800865e <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2207      	movs	r2, #7
 8008658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800865c:	e04f      	b.n	80086fe <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800865e:	7dbb      	ldrb	r3, [r7, #22]
 8008660:	2b04      	cmp	r3, #4
 8008662:	d14c      	bne.n	80086fe <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	220b      	movs	r2, #11
 8008668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800866c:	e047      	b.n	80086fe <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	2201      	movs	r2, #1
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f84d 	bl	8008714 <USBH_MSC_BOT_Abort>
 800867a:	4603      	mov	r3, r0
 800867c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800867e:	7dbb      	ldrb	r3, [r7, #22]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11d      	bne.n	80086c0 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	795b      	ldrb	r3, [r3, #5]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f005 fea9 	bl	800e3e2 <USBH_LL_GetToggle>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	7959      	ldrb	r1, [r3, #5]
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	f1c3 0301 	rsb	r3, r3, #1
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	461a      	mov	r2, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f005 fe6a 	bl	800e37c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	791b      	ldrb	r3, [r3, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f005 fe63 	bl	800e37c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2209      	movs	r2, #9
 80086ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80086be:	e020      	b.n	8008702 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 80086c0:	7dbb      	ldrb	r3, [r7, #22]
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d11d      	bne.n	8008702 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	220b      	movs	r2, #11
 80086ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80086ce:	e018      	b.n	8008702 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff fdf0 	bl	80082b6 <USBH_MSC_BOT_REQ_Reset>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d112      	bne.n	8008706 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80086e8:	e00d      	b.n	8008706 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 80086ea:	bf00      	nop
 80086ec:	e00c      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>
      break;
 80086ee:	bf00      	nop
 80086f0:	e00a      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>
      break;
 80086f2:	bf00      	nop
 80086f4:	e008      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>
      break;
 80086f6:	bf00      	nop
 80086f8:	e006      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>
      break;
 80086fa:	bf00      	nop
 80086fc:	e004      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>
      break;
 80086fe:	bf00      	nop
 8008700:	e002      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>
      break;
 8008702:	bf00      	nop
 8008704:	e000      	b.n	8008708 <USBH_MSC_BOT_Process+0x398>
      break;
 8008706:	bf00      	nop
  }
  return status;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop

08008714 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
 8008720:	4613      	mov	r3, r2
 8008722:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008724:	2302      	movs	r3, #2
 8008726:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008732:	78bb      	ldrb	r3, [r7, #2]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <USBH_MSC_BOT_Abort+0x2a>
 8008738:	2b01      	cmp	r3, #1
 800873a:	d009      	beq.n	8008750 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800873c:	e011      	b.n	8008762 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	79db      	ldrb	r3, [r3, #7]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7fe fd07 	bl	8007158 <USBH_ClrFeature>
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]
      break;
 800874e:	e008      	b.n	8008762 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	799b      	ldrb	r3, [r3, #6]
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7fe fcfe 	bl	8007158 <USBH_ClrFeature>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]
      break;
 8008760:	bf00      	nop
  }
  return status;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800877e:	2301      	movs	r3, #1
 8008780:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	791b      	ldrb	r3, [r3, #4]
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f005 fd3b 	bl	800e204 <USBH_LL_GetLastXferSize>
 800878e:	4603      	mov	r3, r0
 8008790:	2b0d      	cmp	r3, #13
 8008792:	d002      	beq.n	800879a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008794:	2302      	movs	r3, #2
 8008796:	73fb      	strb	r3, [r7, #15]
 8008798:	e024      	b.n	80087e4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800879e:	4a14      	ldr	r2, [pc, #80]	; (80087f0 <USBH_MSC_DecodeCSW+0x84>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d11d      	bne.n	80087e0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d119      	bne.n	80087e4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73fb      	strb	r3, [r7, #15]
 80087be:	e011      	b.n	80087e4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d102      	bne.n	80087d0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80087ca:	2301      	movs	r3, #1
 80087cc:	73fb      	strb	r3, [r7, #15]
 80087ce:	e009      	b.n	80087e4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d104      	bne.n	80087e4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80087da:	2302      	movs	r3, #2
 80087dc:	73fb      	strb	r3, [r7, #15]
 80087de:	e001      	b.n	80087e4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80087e0:	2302      	movs	r3, #2
 80087e2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	53425355 	.word	0x53425355

080087f4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008800:	2302      	movs	r3, #2
 8008802:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008814:	2b01      	cmp	r3, #1
 8008816:	d002      	beq.n	800881e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008818:	2b02      	cmp	r3, #2
 800881a:	d021      	beq.n	8008860 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800881c:	e028      	b.n	8008870 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	220a      	movs	r2, #10
 8008830:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	3363      	adds	r3, #99	; 0x63
 8008838:	2210      	movs	r2, #16
 800883a:	2100      	movs	r1, #0
 800883c:	4618      	mov	r0, r3
 800883e:	f005 fe90 	bl	800e562 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800885a:	2301      	movs	r3, #1
 800885c:	73fb      	strb	r3, [r7, #15]
      break;
 800885e:	e007      	b.n	8008870 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008860:	78fb      	ldrb	r3, [r7, #3]
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff fd83 	bl	8008370 <USBH_MSC_BOT_Process>
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]
      break;
 800886e:	bf00      	nop
  }

  return error;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	460b      	mov	r3, r1
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008888:	2301      	movs	r3, #1
 800888a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800889c:	2b01      	cmp	r3, #1
 800889e:	d002      	beq.n	80088a6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d027      	beq.n	80088f4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80088a4:	e05f      	b.n	8008966 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2208      	movs	r2, #8
 80088aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	2280      	movs	r2, #128	; 0x80
 80088b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	220a      	movs	r2, #10
 80088b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	3363      	adds	r3, #99	; 0x63
 80088c0:	2210      	movs	r2, #16
 80088c2:	2100      	movs	r1, #0
 80088c4:	4618      	mov	r0, r3
 80088c6:	f005 fe4c 	bl	800e562 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2225      	movs	r2, #37	; 0x25
 80088ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2202      	movs	r2, #2
 80088de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f103 0210 	add.w	r2, r3, #16
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80088ee:	2301      	movs	r3, #1
 80088f0:	75fb      	strb	r3, [r7, #23]
      break;
 80088f2:	e038      	b.n	8008966 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80088f4:	7afb      	ldrb	r3, [r7, #11]
 80088f6:	4619      	mov	r1, r3
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f7ff fd39 	bl	8008370 <USBH_MSC_BOT_Process>
 80088fe:	4603      	mov	r3, r0
 8008900:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d12d      	bne.n	8008964 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800890e:	3303      	adds	r3, #3
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800891a:	3302      	adds	r3, #2
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	021b      	lsls	r3, r3, #8
 8008920:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008928:	3301      	adds	r3, #1
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800892e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008946:	3307      	adds	r3, #7
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	b29a      	uxth	r2, r3
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008952:	3306      	adds	r3, #6
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	b29b      	uxth	r3, r3
 800895c:	4313      	orrs	r3, r2
 800895e:	b29a      	uxth	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	809a      	strh	r2, [r3, #4]
      break;
 8008964:	bf00      	nop
  }

  return error;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	460b      	mov	r3, r1
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800897e:	2302      	movs	r3, #2
 8008980:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008992:	2b01      	cmp	r3, #1
 8008994:	d002      	beq.n	800899c <USBH_MSC_SCSI_Inquiry+0x2c>
 8008996:	2b02      	cmp	r3, #2
 8008998:	d03d      	beq.n	8008a16 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800899a:	e089      	b.n	8008ab0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	2224      	movs	r2, #36	; 0x24
 80089a0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2280      	movs	r2, #128	; 0x80
 80089a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	220a      	movs	r2, #10
 80089ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	3363      	adds	r3, #99	; 0x63
 80089b6:	220a      	movs	r2, #10
 80089b8:	2100      	movs	r1, #0
 80089ba:	4618      	mov	r0, r3
 80089bc:	f005 fdd1 	bl	800e562 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2212      	movs	r2, #18
 80089c4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	015b      	lsls	r3, r3, #5
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2224      	movs	r2, #36	; 0x24
 80089e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f103 0210 	add.w	r2, r3, #16
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008a10:	2301      	movs	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
      break;
 8008a14:	e04c      	b.n	8008ab0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008a16:	7afb      	ldrb	r3, [r7, #11]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7ff fca8 	bl	8008370 <USBH_MSC_BOT_Process>
 8008a20:	4603      	mov	r3, r0
 8008a22:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d141      	bne.n	8008aae <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008a2a:	2222      	movs	r2, #34	; 0x22
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f005 fd97 	bl	800e562 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	f003 031f 	and.w	r3, r3, #31
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	095b      	lsrs	r3, r3, #5
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	b25b      	sxtb	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	da03      	bge.n	8008a6e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	709a      	strb	r2, [r3, #2]
 8008a6c:	e002      	b.n	8008a74 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	1cd8      	adds	r0, r3, #3
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a7e:	3308      	adds	r3, #8
 8008a80:	2208      	movs	r2, #8
 8008a82:	4619      	mov	r1, r3
 8008a84:	f005 fd62 	bl	800e54c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f103 000c 	add.w	r0, r3, #12
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a94:	3310      	adds	r3, #16
 8008a96:	2210      	movs	r2, #16
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f005 fd57 	bl	800e54c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	331d      	adds	r3, #29
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008aa8:	3220      	adds	r2, #32
 8008aaa:	6812      	ldr	r2, [r2, #0]
 8008aac:	601a      	str	r2, [r3, #0]
      break;
 8008aae:	bf00      	nop
  }

  return error;
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b086      	sub	sp, #24
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	607a      	str	r2, [r7, #4]
 8008ac6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d002      	beq.n	8008ae6 <USBH_MSC_SCSI_RequestSense+0x2c>
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d03d      	beq.n	8008b60 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008ae4:	e05d      	b.n	8008ba2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	220e      	movs	r2, #14
 8008aea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	2280      	movs	r2, #128	; 0x80
 8008af0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	220a      	movs	r2, #10
 8008af8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	3363      	adds	r3, #99	; 0x63
 8008b00:	2210      	movs	r2, #16
 8008b02:	2100      	movs	r1, #0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f005 fd2c 	bl	800e562 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008b12:	7afb      	ldrb	r3, [r7, #11]
 8008b14:	015b      	lsls	r3, r3, #5
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	220e      	movs	r2, #14
 8008b32:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f103 0210 	add.w	r2, r3, #16
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b5e:	e020      	b.n	8008ba2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008b60:	7afb      	ldrb	r3, [r7, #11]
 8008b62:	4619      	mov	r1, r3
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff fc03 	bl	8008370 <USBH_MSC_BOT_Process>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d115      	bne.n	8008ba0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	f003 030f 	and.w	r3, r3, #15
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b8e:	7b1a      	ldrb	r2, [r3, #12]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b9a:	7b5a      	ldrb	r2, [r3, #13]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	709a      	strb	r2, [r3, #2]
      break;
 8008ba0:	bf00      	nop
  }

  return error;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	607a      	str	r2, [r7, #4]
 8008bb6:	603b      	str	r3, [r7, #0]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d002      	beq.n	8008bda <USBH_MSC_SCSI_Write+0x2e>
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d047      	beq.n	8008c68 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008bd8:	e04e      	b.n	8008c78 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008be0:	461a      	mov	r2, r3
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	fb03 f202 	mul.w	r2, r3, r2
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	220a      	movs	r2, #10
 8008bf8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	3363      	adds	r3, #99	; 0x63
 8008c00:	2210      	movs	r2, #16
 8008c02:	2100      	movs	r1, #0
 8008c04:	4618      	mov	r0, r3
 8008c06:	f005 fcac 	bl	800e562 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	222a      	movs	r2, #42	; 0x2a
 8008c0e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008c12:	79fa      	ldrb	r2, [r7, #7]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008c1a:	79ba      	ldrb	r2, [r7, #6]
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008c22:	797a      	ldrb	r2, [r7, #5]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008c2a:	1d3b      	adds	r3, r7, #4
 8008c2c:	781a      	ldrb	r2, [r3, #0]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008c34:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008c3e:	f107 0320 	add.w	r3, r7, #32
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	2202      	movs	r2, #2
 8008c56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008c62:	2301      	movs	r3, #1
 8008c64:	75fb      	strb	r3, [r7, #23]
      break;
 8008c66:	e007      	b.n	8008c78 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008c68:	7afb      	ldrb	r3, [r7, #11]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f7ff fb7f 	bl	8008370 <USBH_MSC_BOT_Process>
 8008c72:	4603      	mov	r3, r0
 8008c74:	75fb      	strb	r3, [r7, #23]
      break;
 8008c76:	bf00      	nop
  }

  return error;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b086      	sub	sp, #24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008c92:	2302      	movs	r3, #2
 8008c94:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d002      	beq.n	8008cb0 <USBH_MSC_SCSI_Read+0x2e>
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d047      	beq.n	8008d3e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008cae:	e04e      	b.n	8008d4e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	fb03 f202 	mul.w	r2, r3, r2
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2280      	movs	r2, #128	; 0x80
 8008cc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	220a      	movs	r2, #10
 8008cce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	3363      	adds	r3, #99	; 0x63
 8008cd6:	2210      	movs	r2, #16
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f005 fc41 	bl	800e562 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	2228      	movs	r2, #40	; 0x28
 8008ce4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008ce8:	79fa      	ldrb	r2, [r7, #7]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008cf0:	79ba      	ldrb	r2, [r7, #6]
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008cf8:	797a      	ldrb	r2, [r7, #5]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008d00:	1d3b      	adds	r3, r7, #4
 8008d02:	781a      	ldrb	r2, [r3, #0]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008d0a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008d14:	f107 0320 	add.w	r3, r7, #32
 8008d18:	781a      	ldrb	r2, [r3, #0]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3c:	e007      	b.n	8008d4e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008d3e:	7afb      	ldrb	r3, [r7, #11]
 8008d40:	4619      	mov	r1, r3
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff fb14 	bl	8008370 <USBH_MSC_BOT_Process>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d4c:	bf00      	nop
  }

  return error;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af04      	add	r7, sp, #16
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	4608      	mov	r0, r1
 8008d62:	4611      	mov	r1, r2
 8008d64:	461a      	mov	r2, r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	70fb      	strb	r3, [r7, #3]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	70bb      	strb	r3, [r7, #2]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d72:	7878      	ldrb	r0, [r7, #1]
 8008d74:	78ba      	ldrb	r2, [r7, #2]
 8008d76:	78f9      	ldrb	r1, [r7, #3]
 8008d78:	8b3b      	ldrh	r3, [r7, #24]
 8008d7a:	9302      	str	r3, [sp, #8]
 8008d7c:	7d3b      	ldrb	r3, [r7, #20]
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	7c3b      	ldrb	r3, [r7, #16]
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	4603      	mov	r3, r0
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f005 fa4f 	bl	800e22a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f005 fa6e 	bl	800e288 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f836 	bl	8008e34 <USBH_GetFreePipe>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008dcc:	89fb      	ldrh	r3, [r7, #14]
 8008dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d00a      	beq.n	8008dec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008dd6:	78fa      	ldrb	r2, [r7, #3]
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	33e0      	adds	r3, #224	; 0xe0
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008dec:	89fb      	ldrh	r3, [r7, #14]
 8008dee:	b2db      	uxtb	r3, r3
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	2b0a      	cmp	r3, #10
 8008e08:	d80d      	bhi.n	8008e26 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	33e0      	adds	r3, #224	; 0xe0
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	33e0      	adds	r3, #224	; 0xe0
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	440b      	add	r3, r1
 8008e24:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
 8008e44:	e00f      	b.n	8008e66 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	33e0      	adds	r3, #224	; 0xe0
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d102      	bne.n	8008e60 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	e007      	b.n	8008e70 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	3301      	adds	r3, #1
 8008e64:	73fb      	strb	r3, [r7, #15]
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b0a      	cmp	r3, #10
 8008e6a:	d9ec      	bls.n	8008e46 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	6039      	str	r1, [r7, #0]
 8008e86:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008e88:	88fb      	ldrh	r3, [r7, #6]
 8008e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e8c:	d802      	bhi.n	8008e94 <ff_convert+0x18>
		c = chr;
 8008e8e:	88fb      	ldrh	r3, [r7, #6]
 8008e90:	81fb      	strh	r3, [r7, #14]
 8008e92:	e025      	b.n	8008ee0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00b      	beq.n	8008eb2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008e9a:	88fb      	ldrh	r3, [r7, #6]
 8008e9c:	2bff      	cmp	r3, #255	; 0xff
 8008e9e:	d805      	bhi.n	8008eac <ff_convert+0x30>
 8008ea0:	88fb      	ldrh	r3, [r7, #6]
 8008ea2:	3b80      	subs	r3, #128	; 0x80
 8008ea4:	4a12      	ldr	r2, [pc, #72]	; (8008ef0 <ff_convert+0x74>)
 8008ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eaa:	e000      	b.n	8008eae <ff_convert+0x32>
 8008eac:	2300      	movs	r3, #0
 8008eae:	81fb      	strh	r3, [r7, #14]
 8008eb0:	e016      	b.n	8008ee0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	81fb      	strh	r3, [r7, #14]
 8008eb6:	e009      	b.n	8008ecc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008eb8:	89fb      	ldrh	r3, [r7, #14]
 8008eba:	4a0d      	ldr	r2, [pc, #52]	; (8008ef0 <ff_convert+0x74>)
 8008ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec0:	88fa      	ldrh	r2, [r7, #6]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d006      	beq.n	8008ed4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008ec6:	89fb      	ldrh	r3, [r7, #14]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	81fb      	strh	r3, [r7, #14]
 8008ecc:	89fb      	ldrh	r3, [r7, #14]
 8008ece:	2b7f      	cmp	r3, #127	; 0x7f
 8008ed0:	d9f2      	bls.n	8008eb8 <ff_convert+0x3c>
 8008ed2:	e000      	b.n	8008ed6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008ed4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008ed6:	89fb      	ldrh	r3, [r7, #14]
 8008ed8:	3380      	adds	r3, #128	; 0x80
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008ee0:	89fb      	ldrh	r3, [r7, #14]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	0800f464 	.word	0x0800f464

08008ef4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008efe:	88fb      	ldrh	r3, [r7, #6]
 8008f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f04:	d201      	bcs.n	8008f0a <ff_wtoupper+0x16>
 8008f06:	4b3e      	ldr	r3, [pc, #248]	; (8009000 <ff_wtoupper+0x10c>)
 8008f08:	e000      	b.n	8008f0c <ff_wtoupper+0x18>
 8008f0a:	4b3e      	ldr	r3, [pc, #248]	; (8009004 <ff_wtoupper+0x110>)
 8008f0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	1c9a      	adds	r2, r3, #2
 8008f12:	617a      	str	r2, [r7, #20]
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008f18:	8a7b      	ldrh	r3, [r7, #18]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d068      	beq.n	8008ff0 <ff_wtoupper+0xfc>
 8008f1e:	88fa      	ldrh	r2, [r7, #6]
 8008f20:	8a7b      	ldrh	r3, [r7, #18]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d364      	bcc.n	8008ff0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	1c9a      	adds	r2, r3, #2
 8008f2a:	617a      	str	r2, [r7, #20]
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	823b      	strh	r3, [r7, #16]
 8008f30:	8a3b      	ldrh	r3, [r7, #16]
 8008f32:	0a1b      	lsrs	r3, r3, #8
 8008f34:	81fb      	strh	r3, [r7, #14]
 8008f36:	8a3b      	ldrh	r3, [r7, #16]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008f3c:	88fa      	ldrh	r2, [r7, #6]
 8008f3e:	8a79      	ldrh	r1, [r7, #18]
 8008f40:	8a3b      	ldrh	r3, [r7, #16]
 8008f42:	440b      	add	r3, r1
 8008f44:	429a      	cmp	r2, r3
 8008f46:	da49      	bge.n	8008fdc <ff_wtoupper+0xe8>
			switch (cmd) {
 8008f48:	89fb      	ldrh	r3, [r7, #14]
 8008f4a:	2b08      	cmp	r3, #8
 8008f4c:	d84f      	bhi.n	8008fee <ff_wtoupper+0xfa>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <ff_wtoupper+0x60>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f79 	.word	0x08008f79
 8008f58:	08008f8b 	.word	0x08008f8b
 8008f5c:	08008fa1 	.word	0x08008fa1
 8008f60:	08008fa9 	.word	0x08008fa9
 8008f64:	08008fb1 	.word	0x08008fb1
 8008f68:	08008fb9 	.word	0x08008fb9
 8008f6c:	08008fc1 	.word	0x08008fc1
 8008f70:	08008fc9 	.word	0x08008fc9
 8008f74:	08008fd1 	.word	0x08008fd1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008f78:	88fa      	ldrh	r2, [r7, #6]
 8008f7a:	8a7b      	ldrh	r3, [r7, #18]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	4413      	add	r3, r2
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	80fb      	strh	r3, [r7, #6]
 8008f88:	e027      	b.n	8008fda <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008f8a:	88fa      	ldrh	r2, [r7, #6]
 8008f8c:	8a7b      	ldrh	r3, [r7, #18]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	88fa      	ldrh	r2, [r7, #6]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	80fb      	strh	r3, [r7, #6]
 8008f9e:	e01c      	b.n	8008fda <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008fa0:	88fb      	ldrh	r3, [r7, #6]
 8008fa2:	3b10      	subs	r3, #16
 8008fa4:	80fb      	strh	r3, [r7, #6]
 8008fa6:	e018      	b.n	8008fda <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
 8008faa:	3b20      	subs	r3, #32
 8008fac:	80fb      	strh	r3, [r7, #6]
 8008fae:	e014      	b.n	8008fda <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008fb0:	88fb      	ldrh	r3, [r7, #6]
 8008fb2:	3b30      	subs	r3, #48	; 0x30
 8008fb4:	80fb      	strh	r3, [r7, #6]
 8008fb6:	e010      	b.n	8008fda <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	3b1a      	subs	r3, #26
 8008fbc:	80fb      	strh	r3, [r7, #6]
 8008fbe:	e00c      	b.n	8008fda <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008fc0:	88fb      	ldrh	r3, [r7, #6]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	80fb      	strh	r3, [r7, #6]
 8008fc6:	e008      	b.n	8008fda <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008fc8:	88fb      	ldrh	r3, [r7, #6]
 8008fca:	3b50      	subs	r3, #80	; 0x50
 8008fcc:	80fb      	strh	r3, [r7, #6]
 8008fce:	e004      	b.n	8008fda <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008fd0:	88fb      	ldrh	r3, [r7, #6]
 8008fd2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008fd6:	80fb      	strh	r3, [r7, #6]
 8008fd8:	bf00      	nop
			}
			break;
 8008fda:	e008      	b.n	8008fee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008fdc:	89fb      	ldrh	r3, [r7, #14]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d195      	bne.n	8008f0e <ff_wtoupper+0x1a>
 8008fe2:	8a3b      	ldrh	r3, [r7, #16]
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008fec:	e78f      	b.n	8008f0e <ff_wtoupper+0x1a>
			break;
 8008fee:	bf00      	nop
	}

	return chr;
 8008ff0:	88fb      	ldrh	r3, [r7, #6]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	0800f564 	.word	0x0800f564
 8009004:	0800f758 	.word	0x0800f758

08009008 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	4a08      	ldr	r2, [pc, #32]	; (8009038 <disk_status+0x30>)
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	79fa      	ldrb	r2, [r7, #7]
 8009020:	4905      	ldr	r1, [pc, #20]	; (8009038 <disk_status+0x30>)
 8009022:	440a      	add	r2, r1
 8009024:	7a12      	ldrb	r2, [r2, #8]
 8009026:	4610      	mov	r0, r2
 8009028:	4798      	blx	r3
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800902e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20000544 	.word	0x20000544

0800903c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	4a0d      	ldr	r2, [pc, #52]	; (8009084 <disk_initialize+0x48>)
 800904e:	5cd3      	ldrb	r3, [r2, r3]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d111      	bne.n	8009078 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	4a0b      	ldr	r2, [pc, #44]	; (8009084 <disk_initialize+0x48>)
 8009058:	2101      	movs	r1, #1
 800905a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	4a09      	ldr	r2, [pc, #36]	; (8009084 <disk_initialize+0x48>)
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	79fa      	ldrb	r2, [r7, #7]
 800906a:	4906      	ldr	r1, [pc, #24]	; (8009084 <disk_initialize+0x48>)
 800906c:	440a      	add	r2, r1
 800906e:	7a12      	ldrb	r2, [r2, #8]
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009078:	7bfb      	ldrb	r3, [r7, #15]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20000544 	.word	0x20000544

08009088 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009088:	b590      	push	{r4, r7, lr}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <disk_read+0x3c>)
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	689c      	ldr	r4, [r3, #8]
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	4a07      	ldr	r2, [pc, #28]	; (80090c4 <disk_read+0x3c>)
 80090a8:	4413      	add	r3, r2
 80090aa:	7a18      	ldrb	r0, [r3, #8]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	47a0      	blx	r4
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	371c      	adds	r7, #28
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd90      	pop	{r4, r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000544 	.word	0x20000544

080090c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80090c8:	b590      	push	{r4, r7, lr}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4a0a      	ldr	r2, [pc, #40]	; (8009104 <disk_write+0x3c>)
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	68dc      	ldr	r4, [r3, #12]
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	4a07      	ldr	r2, [pc, #28]	; (8009104 <disk_write+0x3c>)
 80090e8:	4413      	add	r3, r2
 80090ea:	7a18      	ldrb	r0, [r3, #8]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	47a0      	blx	r4
 80090f4:	4603      	mov	r3, r0
 80090f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd90      	pop	{r4, r7, pc}
 8009102:	bf00      	nop
 8009104:	20000544 	.word	0x20000544

08009108 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	603a      	str	r2, [r7, #0]
 8009112:	71fb      	strb	r3, [r7, #7]
 8009114:	460b      	mov	r3, r1
 8009116:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009118:	79fb      	ldrb	r3, [r7, #7]
 800911a:	4a09      	ldr	r2, [pc, #36]	; (8009140 <disk_ioctl+0x38>)
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	79fa      	ldrb	r2, [r7, #7]
 8009126:	4906      	ldr	r1, [pc, #24]	; (8009140 <disk_ioctl+0x38>)
 8009128:	440a      	add	r2, r1
 800912a:	7a10      	ldrb	r0, [r2, #8]
 800912c:	79b9      	ldrb	r1, [r7, #6]
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	4798      	blx	r3
 8009132:	4603      	mov	r3, r0
 8009134:	73fb      	strb	r3, [r7, #15]
  return res;
 8009136:	7bfb      	ldrb	r3, [r7, #15]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000544 	.word	0x20000544

08009144 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3301      	adds	r3, #1
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009154:	89fb      	ldrh	r3, [r7, #14]
 8009156:	021b      	lsls	r3, r3, #8
 8009158:	b21a      	sxth	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	b21b      	sxth	r3, r3
 8009160:	4313      	orrs	r3, r2
 8009162:	b21b      	sxth	r3, r3
 8009164:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009166:	89fb      	ldrh	r3, [r7, #14]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3303      	adds	r3, #3
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	021b      	lsls	r3, r3, #8
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	3202      	adds	r2, #2
 800918c:	7812      	ldrb	r2, [r2, #0]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	021b      	lsls	r3, r3, #8
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	3201      	adds	r2, #1
 800919a:	7812      	ldrb	r2, [r2, #0]
 800919c:	4313      	orrs	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	021b      	lsls	r3, r3, #8
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	7812      	ldrb	r2, [r2, #0]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80091ac:	68fb      	ldr	r3, [r7, #12]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80091ba:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3307      	adds	r3, #7
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	f04f 0400 	mov.w	r4, #0
 80091d0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 80091d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80091d8:	f04f 0b00 	mov.w	fp, #0
 80091dc:	f04f 0c00 	mov.w	ip, #0
 80091e0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80091e4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80091e8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	3206      	adds	r2, #6
 80091f0:	7812      	ldrb	r2, [r2, #0]
 80091f2:	b2d1      	uxtb	r1, r2
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	ea4b 0301 	orr.w	r3, fp, r1
 80091fc:	ea4c 0402 	orr.w	r4, ip, r2
 8009200:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8009204:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009208:	f04f 0b00 	mov.w	fp, #0
 800920c:	f04f 0c00 	mov.w	ip, #0
 8009210:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8009214:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8009218:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	3205      	adds	r2, #5
 8009220:	7812      	ldrb	r2, [r2, #0]
 8009222:	b2d1      	uxtb	r1, r2
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	ea4b 0301 	orr.w	r3, fp, r1
 800922c:	ea4c 0402 	orr.w	r4, ip, r2
 8009230:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8009234:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009238:	f04f 0b00 	mov.w	fp, #0
 800923c:	f04f 0c00 	mov.w	ip, #0
 8009240:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8009244:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8009248:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	3204      	adds	r2, #4
 8009250:	7812      	ldrb	r2, [r2, #0]
 8009252:	b2d1      	uxtb	r1, r2
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	ea4b 0301 	orr.w	r3, fp, r1
 800925c:	ea4c 0402 	orr.w	r4, ip, r2
 8009260:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8009264:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009268:	f04f 0b00 	mov.w	fp, #0
 800926c:	f04f 0c00 	mov.w	ip, #0
 8009270:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8009274:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8009278:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	3203      	adds	r2, #3
 8009280:	7812      	ldrb	r2, [r2, #0]
 8009282:	b2d1      	uxtb	r1, r2
 8009284:	f04f 0200 	mov.w	r2, #0
 8009288:	ea4b 0301 	orr.w	r3, fp, r1
 800928c:	ea4c 0402 	orr.w	r4, ip, r2
 8009290:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8009294:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009298:	f04f 0b00 	mov.w	fp, #0
 800929c:	f04f 0c00 	mov.w	ip, #0
 80092a0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80092a4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80092a8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	3202      	adds	r2, #2
 80092b0:	7812      	ldrb	r2, [r2, #0]
 80092b2:	b2d1      	uxtb	r1, r2
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	ea4b 0301 	orr.w	r3, fp, r1
 80092bc:	ea4c 0402 	orr.w	r4, ip, r2
 80092c0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 80092c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80092c8:	f04f 0b00 	mov.w	fp, #0
 80092cc:	f04f 0c00 	mov.w	ip, #0
 80092d0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80092d4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80092d8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	3201      	adds	r2, #1
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	b2d1      	uxtb	r1, r2
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	ea4b 0301 	orr.w	r3, fp, r1
 80092ec:	ea4c 0402 	orr.w	r4, ip, r2
 80092f0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 80092f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80092f8:	f04f 0b00 	mov.w	fp, #0
 80092fc:	f04f 0c00 	mov.w	ip, #0
 8009300:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8009304:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8009308:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	7812      	ldrb	r2, [r2, #0]
 8009310:	b2d1      	uxtb	r1, r2
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	ea4b 0301 	orr.w	r3, fp, r1
 800931a:	ea4c 0402 	orr.w	r4, ip, r2
 800931e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 8009322:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8009326:	4618      	mov	r0, r3
 8009328:	4621      	mov	r1, r4
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8009332:	4770      	bx	lr

08009334 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	607a      	str	r2, [r7, #4]
 8009346:	887a      	ldrh	r2, [r7, #2]
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	701a      	strb	r2, [r3, #0]
 800934c:	887b      	ldrh	r3, [r7, #2]
 800934e:	0a1b      	lsrs	r3, r3, #8
 8009350:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	887a      	ldrh	r2, [r7, #2]
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	607a      	str	r2, [r7, #4]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	b2d2      	uxtb	r2, r2
 800937e:	701a      	strb	r2, [r3, #0]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	0a1b      	lsrs	r3, r3, #8
 8009384:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	b2d2      	uxtb	r2, r2
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	0a1b      	lsrs	r3, r3, #8
 8009396:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	b2d2      	uxtb	r2, r2
 80093a2:	701a      	strb	r2, [r3, #0]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	0a1b      	lsrs	r3, r3, #8
 80093a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	701a      	strb	r2, [r3, #0]
}
 80093b6:	bf00      	nop
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80093c2:	b490      	push	{r4, r7}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	60fa      	str	r2, [r7, #12]
 80093d4:	783a      	ldrb	r2, [r7, #0]
 80093d6:	701a      	strb	r2, [r3, #0]
 80093d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	f04f 0400 	mov.w	r4, #0
 80093e4:	0a0b      	lsrs	r3, r1, #8
 80093e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80093ea:	0a14      	lsrs	r4, r2, #8
 80093ec:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	60fa      	str	r2, [r7, #12]
 80093f6:	783a      	ldrb	r2, [r7, #0]
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80093fe:	f04f 0300 	mov.w	r3, #0
 8009402:	f04f 0400 	mov.w	r4, #0
 8009406:	0a0b      	lsrs	r3, r1, #8
 8009408:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800940c:	0a14      	lsrs	r4, r2, #8
 800940e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	60fa      	str	r2, [r7, #12]
 8009418:	783a      	ldrb	r2, [r7, #0]
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009420:	f04f 0300 	mov.w	r3, #0
 8009424:	f04f 0400 	mov.w	r4, #0
 8009428:	0a0b      	lsrs	r3, r1, #8
 800942a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800942e:	0a14      	lsrs	r4, r2, #8
 8009430:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	1c5a      	adds	r2, r3, #1
 8009438:	60fa      	str	r2, [r7, #12]
 800943a:	783a      	ldrb	r2, [r7, #0]
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009442:	f04f 0300 	mov.w	r3, #0
 8009446:	f04f 0400 	mov.w	r4, #0
 800944a:	0a0b      	lsrs	r3, r1, #8
 800944c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009450:	0a14      	lsrs	r4, r2, #8
 8009452:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	60fa      	str	r2, [r7, #12]
 800945c:	783a      	ldrb	r2, [r7, #0]
 800945e:	701a      	strb	r2, [r3, #0]
 8009460:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	f04f 0400 	mov.w	r4, #0
 800946c:	0a0b      	lsrs	r3, r1, #8
 800946e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009472:	0a14      	lsrs	r4, r2, #8
 8009474:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	60fa      	str	r2, [r7, #12]
 800947e:	783a      	ldrb	r2, [r7, #0]
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009486:	f04f 0300 	mov.w	r3, #0
 800948a:	f04f 0400 	mov.w	r4, #0
 800948e:	0a0b      	lsrs	r3, r1, #8
 8009490:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009494:	0a14      	lsrs	r4, r2, #8
 8009496:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	60fa      	str	r2, [r7, #12]
 80094a0:	783a      	ldrb	r2, [r7, #0]
 80094a2:	701a      	strb	r2, [r3, #0]
 80094a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	f04f 0400 	mov.w	r4, #0
 80094b0:	0a0b      	lsrs	r3, r1, #8
 80094b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80094b6:	0a14      	lsrs	r4, r2, #8
 80094b8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	1c5a      	adds	r2, r3, #1
 80094c0:	60fa      	str	r2, [r7, #12]
 80094c2:	783a      	ldrb	r2, [r7, #0]
 80094c4:	701a      	strb	r2, [r3, #0]
}
 80094c6:	bf00      	nop
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bc90      	pop	{r4, r7}
 80094ce:	4770      	bx	lr

080094d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00d      	beq.n	8009506 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	1c53      	adds	r3, r2, #1
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	1c59      	adds	r1, r3, #1
 80094f4:	6179      	str	r1, [r7, #20]
 80094f6:	7812      	ldrb	r2, [r2, #0]
 80094f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	607b      	str	r3, [r7, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f1      	bne.n	80094ea <mem_cpy+0x1a>
	}
}
 8009506:	bf00      	nop
 8009508:	371c      	adds	r7, #28
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009512:	b480      	push	{r7}
 8009514:	b087      	sub	sp, #28
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	617a      	str	r2, [r7, #20]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	b2d2      	uxtb	r2, r2
 800952c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3b01      	subs	r3, #1
 8009532:	607b      	str	r3, [r7, #4]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1f3      	bne.n	8009522 <mem_set+0x10>
}
 800953a:	bf00      	nop
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009546:	b480      	push	{r7}
 8009548:	b089      	sub	sp, #36	; 0x24
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	61fb      	str	r3, [r7, #28]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	61fa      	str	r2, [r7, #28]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	4619      	mov	r1, r3
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	61ba      	str	r2, [r7, #24]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	1acb      	subs	r3, r1, r3
 8009572:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3b01      	subs	r3, #1
 8009578:	607b      	str	r3, [r7, #4]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <mem_cmp+0x40>
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0eb      	beq.n	800955e <mem_cmp+0x18>

	return r;
 8009586:	697b      	ldr	r3, [r7, #20]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3724      	adds	r7, #36	; 0x24
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800959e:	e002      	b.n	80095a6 <chk_chr+0x12>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3301      	adds	r3, #1
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d005      	beq.n	80095ba <chk_chr+0x26>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d1f2      	bne.n	80095a0 <chk_chr+0xc>
	return *str;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	781b      	ldrb	r3, [r3, #0]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80095d6:	2300      	movs	r3, #0
 80095d8:	60bb      	str	r3, [r7, #8]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	60fb      	str	r3, [r7, #12]
 80095de:	e029      	b.n	8009634 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80095e0:	4a27      	ldr	r2, [pc, #156]	; (8009680 <chk_lock+0xb4>)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	4413      	add	r3, r2
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d01d      	beq.n	800962a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80095ee:	4a24      	ldr	r2, [pc, #144]	; (8009680 <chk_lock+0xb4>)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	4413      	add	r3, r2
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d116      	bne.n	800962e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009600:	4a1f      	ldr	r2, [pc, #124]	; (8009680 <chk_lock+0xb4>)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	4413      	add	r3, r2
 8009608:	3304      	adds	r3, #4
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009610:	429a      	cmp	r2, r3
 8009612:	d10c      	bne.n	800962e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009614:	4a1a      	ldr	r2, [pc, #104]	; (8009680 <chk_lock+0xb4>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	011b      	lsls	r3, r3, #4
 800961a:	4413      	add	r3, r2
 800961c:	3308      	adds	r3, #8
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8009624:	429a      	cmp	r2, r3
 8009626:	d102      	bne.n	800962e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009628:	e007      	b.n	800963a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800962a:	2301      	movs	r3, #1
 800962c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3301      	adds	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d9d2      	bls.n	80095e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b02      	cmp	r3, #2
 800963e:	d109      	bne.n	8009654 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d102      	bne.n	800964c <chk_lock+0x80>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b02      	cmp	r3, #2
 800964a:	d101      	bne.n	8009650 <chk_lock+0x84>
 800964c:	2300      	movs	r3, #0
 800964e:	e010      	b.n	8009672 <chk_lock+0xa6>
 8009650:	2312      	movs	r3, #18
 8009652:	e00e      	b.n	8009672 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d108      	bne.n	800966c <chk_lock+0xa0>
 800965a:	4a09      	ldr	r2, [pc, #36]	; (8009680 <chk_lock+0xb4>)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	4413      	add	r3, r2
 8009662:	330c      	adds	r3, #12
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800966a:	d101      	bne.n	8009670 <chk_lock+0xa4>
 800966c:	2310      	movs	r3, #16
 800966e:	e000      	b.n	8009672 <chk_lock+0xa6>
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	200000c4 	.word	0x200000c4

08009684 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800968a:	2300      	movs	r3, #0
 800968c:	607b      	str	r3, [r7, #4]
 800968e:	e002      	b.n	8009696 <enq_lock+0x12>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3301      	adds	r3, #1
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d806      	bhi.n	80096aa <enq_lock+0x26>
 800969c:	4a09      	ldr	r2, [pc, #36]	; (80096c4 <enq_lock+0x40>)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	011b      	lsls	r3, r3, #4
 80096a2:	4413      	add	r3, r2
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1f2      	bne.n	8009690 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	bf14      	ite	ne
 80096b0:	2301      	movne	r3, #1
 80096b2:	2300      	moveq	r3, #0
 80096b4:	b2db      	uxtb	r3, r3
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	200000c4 	.word	0x200000c4

080096c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	e01f      	b.n	8009718 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80096d8:	4a41      	ldr	r2, [pc, #260]	; (80097e0 <inc_lock+0x118>)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	4413      	add	r3, r2
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d113      	bne.n	8009712 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80096ea:	4a3d      	ldr	r2, [pc, #244]	; (80097e0 <inc_lock+0x118>)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	011b      	lsls	r3, r3, #4
 80096f0:	4413      	add	r3, r2
 80096f2:	3304      	adds	r3, #4
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d109      	bne.n	8009712 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80096fe:	4a38      	ldr	r2, [pc, #224]	; (80097e0 <inc_lock+0x118>)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	4413      	add	r3, r2
 8009706:	3308      	adds	r3, #8
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800970e:	429a      	cmp	r2, r3
 8009710:	d006      	beq.n	8009720 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3301      	adds	r3, #1
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d9dc      	bls.n	80096d8 <inc_lock+0x10>
 800971e:	e000      	b.n	8009722 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009720:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d132      	bne.n	800978e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009728:	2300      	movs	r3, #0
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	e002      	b.n	8009734 <inc_lock+0x6c>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3301      	adds	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d806      	bhi.n	8009748 <inc_lock+0x80>
 800973a:	4a29      	ldr	r2, [pc, #164]	; (80097e0 <inc_lock+0x118>)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	011b      	lsls	r3, r3, #4
 8009740:	4413      	add	r3, r2
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1f2      	bne.n	800972e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b02      	cmp	r3, #2
 800974c:	d101      	bne.n	8009752 <inc_lock+0x8a>
 800974e:	2300      	movs	r3, #0
 8009750:	e040      	b.n	80097d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	4922      	ldr	r1, [pc, #136]	; (80097e0 <inc_lock+0x118>)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	440b      	add	r3, r1
 800975e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	491e      	ldr	r1, [pc, #120]	; (80097e0 <inc_lock+0x118>)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	011b      	lsls	r3, r3, #4
 800976a:	440b      	add	r3, r1
 800976c:	3304      	adds	r3, #4
 800976e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009774:	491a      	ldr	r1, [pc, #104]	; (80097e0 <inc_lock+0x118>)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	011b      	lsls	r3, r3, #4
 800977a:	440b      	add	r3, r1
 800977c:	3308      	adds	r3, #8
 800977e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009780:	4a17      	ldr	r2, [pc, #92]	; (80097e0 <inc_lock+0x118>)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	011b      	lsls	r3, r3, #4
 8009786:	4413      	add	r3, r2
 8009788:	330c      	adds	r3, #12
 800978a:	2200      	movs	r2, #0
 800978c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d009      	beq.n	80097a8 <inc_lock+0xe0>
 8009794:	4a12      	ldr	r2, [pc, #72]	; (80097e0 <inc_lock+0x118>)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	4413      	add	r3, r2
 800979c:	330c      	adds	r3, #12
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <inc_lock+0xe0>
 80097a4:	2300      	movs	r3, #0
 80097a6:	e015      	b.n	80097d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d108      	bne.n	80097c0 <inc_lock+0xf8>
 80097ae:	4a0c      	ldr	r2, [pc, #48]	; (80097e0 <inc_lock+0x118>)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	011b      	lsls	r3, r3, #4
 80097b4:	4413      	add	r3, r2
 80097b6:	330c      	adds	r3, #12
 80097b8:	881b      	ldrh	r3, [r3, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	b29a      	uxth	r2, r3
 80097be:	e001      	b.n	80097c4 <inc_lock+0xfc>
 80097c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097c4:	4906      	ldr	r1, [pc, #24]	; (80097e0 <inc_lock+0x118>)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	011b      	lsls	r3, r3, #4
 80097ca:	440b      	add	r3, r1
 80097cc:	330c      	adds	r3, #12
 80097ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3301      	adds	r3, #1
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	200000c4 	.word	0x200000c4

080097e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	607b      	str	r3, [r7, #4]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d825      	bhi.n	8009844 <dec_lock+0x60>
		n = Files[i].ctr;
 80097f8:	4a17      	ldr	r2, [pc, #92]	; (8009858 <dec_lock+0x74>)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	011b      	lsls	r3, r3, #4
 80097fe:	4413      	add	r3, r2
 8009800:	330c      	adds	r3, #12
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009806:	89fb      	ldrh	r3, [r7, #14]
 8009808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980c:	d101      	bne.n	8009812 <dec_lock+0x2e>
 800980e:	2300      	movs	r3, #0
 8009810:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009812:	89fb      	ldrh	r3, [r7, #14]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <dec_lock+0x3a>
 8009818:	89fb      	ldrh	r3, [r7, #14]
 800981a:	3b01      	subs	r3, #1
 800981c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800981e:	4a0e      	ldr	r2, [pc, #56]	; (8009858 <dec_lock+0x74>)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	4413      	add	r3, r2
 8009826:	330c      	adds	r3, #12
 8009828:	89fa      	ldrh	r2, [r7, #14]
 800982a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800982c:	89fb      	ldrh	r3, [r7, #14]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d105      	bne.n	800983e <dec_lock+0x5a>
 8009832:	4a09      	ldr	r2, [pc, #36]	; (8009858 <dec_lock+0x74>)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	4413      	add	r3, r2
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	737b      	strb	r3, [r7, #13]
 8009842:	e001      	b.n	8009848 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009844:	2302      	movs	r3, #2
 8009846:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009848:	7b7b      	ldrb	r3, [r7, #13]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	200000c4 	.word	0x200000c4

0800985c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	e010      	b.n	800988c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800986a:	4a0d      	ldr	r2, [pc, #52]	; (80098a0 <clear_lock+0x44>)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	011b      	lsls	r3, r3, #4
 8009870:	4413      	add	r3, r2
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	429a      	cmp	r2, r3
 8009878:	d105      	bne.n	8009886 <clear_lock+0x2a>
 800987a:	4a09      	ldr	r2, [pc, #36]	; (80098a0 <clear_lock+0x44>)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	4413      	add	r3, r2
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3301      	adds	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d9eb      	bls.n	800986a <clear_lock+0xe>
	}
}
 8009892:	bf00      	nop
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	200000c4 	.word	0x200000c4

080098a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	78db      	ldrb	r3, [r3, #3]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d034      	beq.n	8009922 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	7858      	ldrb	r0, [r3, #1]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80098c8:	2301      	movs	r3, #1
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	f7ff fbfc 	bl	80090c8 <disk_write>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <sync_window+0x38>
			res = FR_DISK_ERR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	73fb      	strb	r3, [r7, #15]
 80098da:	e022      	b.n	8009922 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	1ad2      	subs	r2, r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d217      	bcs.n	8009922 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	789b      	ldrb	r3, [r3, #2]
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	e010      	b.n	800991c <sync_window+0x78>
					wsect += fs->fsize;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4413      	add	r3, r2
 8009902:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7858      	ldrb	r0, [r3, #1]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800990e:	2301      	movs	r3, #1
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	f7ff fbd9 	bl	80090c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	3b01      	subs	r3, #1
 800991a:	613b      	str	r3, [r7, #16]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d8eb      	bhi.n	80098fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3718      	adds	r7, #24
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	429a      	cmp	r2, r3
 8009942:	d01b      	beq.n	800997c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff ffad 	bl	80098a4 <sync_window>
 800994a:	4603      	mov	r3, r0
 800994c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d113      	bne.n	800997c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	7858      	ldrb	r0, [r3, #1]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800995e:	2301      	movs	r3, #1
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	f7ff fb91 	bl	8009088 <disk_read>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800996c:	f04f 33ff 	mov.w	r3, #4294967295
 8009970:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009972:	2301      	movs	r3, #1
 8009974:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff ff87 	bl	80098a4 <sync_window>
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d159      	bne.n	8009a54 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d149      	bne.n	8009a3c <sync_fs+0xb4>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	791b      	ldrb	r3, [r3, #4]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d145      	bne.n	8009a3c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	899b      	ldrh	r3, [r3, #12]
 80099ba:	461a      	mov	r2, r3
 80099bc:	2100      	movs	r1, #0
 80099be:	f7ff fda8 	bl	8009512 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	333c      	adds	r3, #60	; 0x3c
 80099c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80099ca:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff fcb0 	bl	8009334 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	333c      	adds	r3, #60	; 0x3c
 80099d8:	4921      	ldr	r1, [pc, #132]	; (8009a60 <sync_fs+0xd8>)
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff fcc5 	bl	800936a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	333c      	adds	r3, #60	; 0x3c
 80099e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80099e8:	491e      	ldr	r1, [pc, #120]	; (8009a64 <sync_fs+0xdc>)
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff fcbd 	bl	800936a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	333c      	adds	r3, #60	; 0x3c
 80099f4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	4619      	mov	r1, r3
 80099fe:	4610      	mov	r0, r2
 8009a00:	f7ff fcb3 	bl	800936a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	333c      	adds	r3, #60	; 0x3c
 8009a08:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f7ff fca9 	bl	800936a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	7858      	ldrb	r0, [r3, #1]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a30:	2301      	movs	r3, #1
 8009a32:	f7ff fb49 	bl	80090c8 <disk_write>
			fs->fsi_flag = 0;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	785b      	ldrb	r3, [r3, #1]
 8009a40:	2200      	movs	r2, #0
 8009a42:	2100      	movs	r1, #0
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff fb5f 	bl	8009108 <disk_ioctl>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <sync_fs+0xcc>
 8009a50:	2301      	movs	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	41615252 	.word	0x41615252
 8009a64:	61417272 	.word	0x61417272

08009a68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	3b02      	subs	r3, #2
 8009a76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	3b02      	subs	r3, #2
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d301      	bcc.n	8009a88 <clust2sect+0x20>
 8009a84:	2300      	movs	r3, #0
 8009a86:	e008      	b.n	8009a9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	895b      	ldrh	r3, [r3, #10]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	fb03 f202 	mul.w	r2, r3, r2
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a98:	4413      	add	r3, r2
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
	...

08009aa8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009aa8:	b590      	push	{r4, r7, lr}
 8009aaa:	b089      	sub	sp, #36	; 0x24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d904      	bls.n	8009ac8 <get_fat+0x20>
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d302      	bcc.n	8009ace <get_fat+0x26>
		val = 1;	/* Internal error */
 8009ac8:	2301      	movs	r3, #1
 8009aca:	61fb      	str	r3, [r7, #28]
 8009acc:	e13a      	b.n	8009d44 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ace:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad2:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	f200 8126 	bhi.w	8009d2c <get_fat+0x284>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <get_fat+0x40>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009ba7 	.word	0x08009ba7
 8009af0:	08009bf3 	.word	0x08009bf3
 8009af4:	08009c43 	.word	0x08009c43
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	085b      	lsrs	r3, r3, #1
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	4413      	add	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	899b      	ldrh	r3, [r3, #12]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b16:	4413      	add	r3, r2
 8009b18:	4619      	mov	r1, r3
 8009b1a:	69b8      	ldr	r0, [r7, #24]
 8009b1c:	f7ff ff06 	bl	800992c <move_window>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f040 8105 	bne.w	8009d32 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	60fa      	str	r2, [r7, #12]
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	8992      	ldrh	r2, [r2, #12]
 8009b32:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b36:	fb02 f201 	mul.w	r2, r2, r1
 8009b3a:	1a9b      	subs	r3, r3, r2
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	899b      	ldrh	r3, [r3, #12]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b56:	4413      	add	r3, r2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	69b8      	ldr	r0, [r7, #24]
 8009b5c:	f7ff fee6 	bl	800992c <move_window>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f040 80e7 	bne.w	8009d36 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	899b      	ldrh	r3, [r3, #12]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b74:	fb02 f201 	mul.w	r2, r2, r1
 8009b78:	1a9b      	subs	r3, r3, r2
 8009b7a:	69ba      	ldr	r2, [r7, #24]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b82:	021b      	lsls	r3, r3, #8
 8009b84:	461a      	mov	r2, r3
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <get_fat+0xf4>
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	091b      	lsrs	r3, r3, #4
 8009b9a:	e002      	b.n	8009ba2 <get_fat+0xfa>
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ba2:	61fb      	str	r3, [r7, #28]
			break;
 8009ba4:	e0ce      	b.n	8009d44 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	899b      	ldrh	r3, [r3, #12]
 8009bae:	085b      	lsrs	r3, r3, #1
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bba:	4413      	add	r3, r2
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	69b8      	ldr	r0, [r7, #24]
 8009bc0:	f7ff feb4 	bl	800992c <move_window>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f040 80b7 	bne.w	8009d3a <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	8992      	ldrh	r2, [r2, #12]
 8009bda:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bde:	fb02 f200 	mul.w	r2, r2, r0
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	440b      	add	r3, r1
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff faac 	bl	8009144 <ld_word>
 8009bec:	4603      	mov	r3, r0
 8009bee:	61fb      	str	r3, [r7, #28]
			break;
 8009bf0:	e0a8      	b.n	8009d44 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	899b      	ldrh	r3, [r3, #12]
 8009bfa:	089b      	lsrs	r3, r3, #2
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	4619      	mov	r1, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c06:	4413      	add	r3, r2
 8009c08:	4619      	mov	r1, r3
 8009c0a:	69b8      	ldr	r0, [r7, #24]
 8009c0c:	f7ff fe8e 	bl	800992c <move_window>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f040 8093 	bne.w	8009d3e <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	69ba      	ldr	r2, [r7, #24]
 8009c24:	8992      	ldrh	r2, [r2, #12]
 8009c26:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c2a:	fb02 f200 	mul.w	r2, r2, r0
 8009c2e:	1a9b      	subs	r3, r3, r2
 8009c30:	440b      	add	r3, r1
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7ff fa9e 	bl	8009174 <ld_dword>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009c3e:	61fb      	str	r3, [r7, #28]
			break;
 8009c40:	e080      	b.n	8009d44 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009c48:	4323      	orrs	r3, r4
 8009c4a:	d06f      	beq.n	8009d2c <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009c5c:	f113 30ff 	adds.w	r0, r3, #4294967295
 8009c60:	f144 31ff 	adc.w	r1, r4, #4294967295
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	899b      	ldrh	r3, [r3, #12]
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f04f 0400 	mov.w	r4, #0
 8009c6e:	461a      	mov	r2, r3
 8009c70:	4623      	mov	r3, r4
 8009c72:	f7f6 fb9d 	bl	80003b0 <__aeabi_uldivmod>
 8009c76:	4603      	mov	r3, r0
 8009c78:	460c      	mov	r4, r1
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	895b      	ldrh	r3, [r3, #10]
 8009c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c84:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	79db      	ldrb	r3, [r3, #7]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d10e      	bne.n	8009cac <get_fat+0x204>
					if (cofs <= clen) {
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d80a      	bhi.n	8009cac <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d002      	beq.n	8009ca4 <get_fat+0x1fc>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	e001      	b.n	8009ca8 <get_fat+0x200>
 8009ca4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009ca8:	61fb      	str	r3, [r7, #28]
						break;
 8009caa:	e04b      	b.n	8009d44 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	79db      	ldrb	r3, [r3, #7]
 8009cb0:	2b03      	cmp	r3, #3
 8009cb2:	d108      	bne.n	8009cc6 <get_fat+0x21e>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d203      	bcs.n	8009cc6 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	61fb      	str	r3, [r7, #28]
					break;
 8009cc4:	e03e      	b.n	8009d44 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	79db      	ldrb	r3, [r3, #7]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d02e      	beq.n	8009d2c <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8009cd6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009cda:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8009cdc:	e032      	b.n	8009d44 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	899b      	ldrh	r3, [r3, #12]
 8009ce6:	089b      	lsrs	r3, r3, #2
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	4619      	mov	r1, r3
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cf2:	4413      	add	r3, r2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	69b8      	ldr	r0, [r7, #24]
 8009cf8:	f7ff fe18 	bl	800992c <move_window>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d11f      	bne.n	8009d42 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	69ba      	ldr	r2, [r7, #24]
 8009d0e:	8992      	ldrh	r2, [r2, #12]
 8009d10:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d14:	fb02 f200 	mul.w	r2, r2, r0
 8009d18:	1a9b      	subs	r3, r3, r2
 8009d1a:	440b      	add	r3, r1
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff fa29 	bl	8009174 <ld_dword>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d28:	61fb      	str	r3, [r7, #28]
					break;
 8009d2a:	e00b      	b.n	8009d44 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	61fb      	str	r3, [r7, #28]
 8009d30:	e008      	b.n	8009d44 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d32:	bf00      	nop
 8009d34:	e006      	b.n	8009d44 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d36:	bf00      	nop
 8009d38:	e004      	b.n	8009d44 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d3a:	bf00      	nop
 8009d3c:	e002      	b.n	8009d44 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d3e:	bf00      	nop
 8009d40:	e000      	b.n	8009d44 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d42:	bf00      	nop
		}
	}

	return val;
 8009d44:	69fb      	ldr	r3, [r7, #28]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3724      	adds	r7, #36	; 0x24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd90      	pop	{r4, r7, pc}
 8009d4e:	bf00      	nop

08009d50 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b089      	sub	sp, #36	; 0x24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	f240 8111 	bls.w	8009f8a <put_fat+0x23a>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	f080 810b 	bcs.w	8009f8a <put_fat+0x23a>
		switch (fs->fs_type) {
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	f200 8105 	bhi.w	8009f8a <put_fat+0x23a>
 8009d80:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <put_fat+0x38>)
 8009d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d86:	bf00      	nop
 8009d88:	08009d99 	.word	0x08009d99
 8009d8c:	08009e9d 	.word	0x08009e9d
 8009d90:	08009ef3 	.word	0x08009ef3
 8009d94:	08009ef3 	.word	0x08009ef3
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	61bb      	str	r3, [r7, #24]
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	085b      	lsrs	r3, r3, #1
 8009da0:	69ba      	ldr	r2, [r7, #24]
 8009da2:	4413      	add	r3, r2
 8009da4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	899b      	ldrh	r3, [r3, #12]
 8009dae:	4619      	mov	r1, r3
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009db6:	4413      	add	r3, r2
 8009db8:	4619      	mov	r1, r3
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7ff fdb6 	bl	800992c <move_window>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009dc4:	7ffb      	ldrb	r3, [r7, #31]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f040 80d8 	bne.w	8009f7c <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	1c5a      	adds	r2, r3, #1
 8009dd6:	61ba      	str	r2, [r7, #24]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	8992      	ldrh	r2, [r2, #12]
 8009ddc:	fbb3 f0f2 	udiv	r0, r3, r2
 8009de0:	fb02 f200 	mul.w	r2, r2, r0
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	440b      	add	r3, r1
 8009de8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00d      	beq.n	8009e10 <put_fat+0xc0>
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	b25b      	sxtb	r3, r3
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	b25a      	sxtb	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	011b      	lsls	r3, r3, #4
 8009e06:	b25b      	sxtb	r3, r3
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	b25b      	sxtb	r3, r3
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	e001      	b.n	8009e14 <put_fat+0xc4>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	899b      	ldrh	r3, [r3, #12]
 8009e26:	4619      	mov	r1, r3
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e2e:	4413      	add	r3, r2
 8009e30:	4619      	mov	r1, r3
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f7ff fd7a 	bl	800992c <move_window>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e3c:	7ffb      	ldrb	r3, [r7, #31]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f040 809e 	bne.w	8009f80 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	899b      	ldrh	r3, [r3, #12]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e56:	fb02 f200 	mul.w	r2, r2, r0
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	440b      	add	r3, r1
 8009e5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <put_fat+0x122>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	091b      	lsrs	r3, r3, #4
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	e00e      	b.n	8009e90 <put_fat+0x140>
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	b25b      	sxtb	r3, r3
 8009e78:	f023 030f 	bic.w	r3, r3, #15
 8009e7c:	b25a      	sxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	0a1b      	lsrs	r3, r3, #8
 8009e82:	b25b      	sxtb	r3, r3
 8009e84:	f003 030f 	and.w	r3, r3, #15
 8009e88:	b25b      	sxtb	r3, r3
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	b25b      	sxtb	r3, r3
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2201      	movs	r2, #1
 8009e98:	70da      	strb	r2, [r3, #3]
			break;
 8009e9a:	e076      	b.n	8009f8a <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	899b      	ldrh	r3, [r3, #12]
 8009ea4:	085b      	lsrs	r3, r3, #1
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	fbb3 f3f1 	udiv	r3, r3, r1
 8009eb0:	4413      	add	r3, r2
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7ff fd39 	bl	800992c <move_window>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ebe:	7ffb      	ldrb	r3, [r7, #31]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d15f      	bne.n	8009f84 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	005b      	lsls	r3, r3, #1
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	8992      	ldrh	r2, [r2, #12]
 8009ed2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ed6:	fb02 f200 	mul.w	r2, r2, r0
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	440b      	add	r3, r1
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	b292      	uxth	r2, r2
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff fa25 	bl	8009334 <st_word>
			fs->wflag = 1;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2201      	movs	r2, #1
 8009eee:	70da      	strb	r2, [r3, #3]
			break;
 8009ef0:	e04b      	b.n	8009f8a <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	899b      	ldrh	r3, [r3, #12]
 8009efa:	089b      	lsrs	r3, r3, #2
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	4619      	mov	r1, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f06:	4413      	add	r3, r2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f7ff fd0e 	bl	800992c <move_window>
 8009f10:	4603      	mov	r3, r0
 8009f12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f14:	7ffb      	ldrb	r3, [r7, #31]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d136      	bne.n	8009f88 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	2b04      	cmp	r3, #4
 8009f20:	d017      	beq.n	8009f52 <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	8992      	ldrh	r2, [r2, #12]
 8009f36:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f3a:	fb02 f200 	mul.w	r2, r2, r0
 8009f3e:	1a9b      	subs	r3, r3, r2
 8009f40:	440b      	add	r3, r1
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7ff f916 	bl	8009174 <ld_dword>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009f4e:	4323      	orrs	r3, r4
 8009f50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	8992      	ldrh	r2, [r2, #12]
 8009f60:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f64:	fb02 f200 	mul.w	r2, r2, r0
 8009f68:	1a9b      	subs	r3, r3, r2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff f9fb 	bl	800936a <st_dword>
			fs->wflag = 1;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	70da      	strb	r2, [r3, #3]
			break;
 8009f7a:	e006      	b.n	8009f8a <put_fat+0x23a>
			if (res != FR_OK) break;
 8009f7c:	bf00      	nop
 8009f7e:	e004      	b.n	8009f8a <put_fat+0x23a>
			if (res != FR_OK) break;
 8009f80:	bf00      	nop
 8009f82:	e002      	b.n	8009f8a <put_fat+0x23a>
			if (res != FR_OK) break;
 8009f84:	bf00      	nop
 8009f86:	e000      	b.n	8009f8a <put_fat+0x23a>
			if (res != FR_OK) break;
 8009f88:	bf00      	nop
		}
	}
	return res;
 8009f8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3724      	adds	r7, #36	; 0x24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd90      	pop	{r4, r7, pc}

08009f94 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08a      	sub	sp, #40	; 0x28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	3b02      	subs	r3, #2
 8009fa4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	3b02      	subs	r3, #2
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d301      	bcc.n	8009fb6 <find_bitmap+0x22>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	61bb      	str	r3, [r7, #24]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	08db      	lsrs	r3, r3, #3
 8009fca:	68f9      	ldr	r1, [r7, #12]
 8009fcc:	8989      	ldrh	r1, [r1, #12]
 8009fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fd2:	4413      	add	r3, r2
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff fca8 	bl	800992c <move_window>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <find_bitmap+0x54>
 8009fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe6:	e058      	b.n	800a09a <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	08db      	lsrs	r3, r3, #3
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	8992      	ldrh	r2, [r2, #12]
 8009ff0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ff4:	fb02 f201 	mul.w	r2, r2, r1
 8009ff8:	1a9b      	subs	r3, r3, r2
 8009ffa:	623b      	str	r3, [r7, #32]
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	f003 0307 	and.w	r3, r3, #7
 800a002:	2201      	movs	r2, #1
 800a004:	fa02 f303 	lsl.w	r3, r2, r3
 800a008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	4413      	add	r3, r2
 800a012:	333c      	adds	r3, #60	; 0x3c
 800a014:	781a      	ldrb	r2, [r3, #0]
 800a016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a01a:	4013      	ands	r3, r2
 800a01c:	74fb      	strb	r3, [r7, #19]
 800a01e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	3301      	adds	r3, #1
 800a02c:	61fb      	str	r3, [r7, #28]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	3b02      	subs	r3, #2
 800a034:	69fa      	ldr	r2, [r7, #28]
 800a036:	429a      	cmp	r2, r3
 800a038:	d307      	bcc.n	800a04a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800a03a:	2300      	movs	r3, #0
 800a03c:	61fb      	str	r3, [r7, #28]
 800a03e:	2300      	movs	r3, #0
 800a040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	899b      	ldrh	r3, [r3, #12]
 800a048:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800a04a:	7cfb      	ldrb	r3, [r7, #19]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d109      	bne.n	800a064 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	3301      	adds	r3, #1
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d106      	bne.n	800a06c <find_bitmap+0xd8>
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	3302      	adds	r3, #2
 800a062:	e01a      	b.n	800a09a <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	61bb      	str	r3, [r7, #24]
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	429a      	cmp	r2, r3
 800a072:	d101      	bne.n	800a078 <find_bitmap+0xe4>
 800a074:	2300      	movs	r3, #0
 800a076:	e010      	b.n	800a09a <find_bitmap+0x106>
			} while (bm);
 800a078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1c5      	bne.n	800a00c <find_bitmap+0x78>
			bm = 1;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	3301      	adds	r3, #1
 800a08a:	623b      	str	r3, [r7, #32]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	899b      	ldrh	r3, [r3, #12]
 800a090:	461a      	mov	r2, r3
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	4293      	cmp	r3, r2
 800a096:	d3b9      	bcc.n	800a00c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a098:	e793      	b.n	8009fc2 <find_bitmap+0x2e>
	}
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3728      	adds	r7, #40	; 0x28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b088      	sub	sp, #32
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	3b02      	subs	r3, #2
 800a0b4:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	08db      	lsrs	r3, r3, #3
 800a0be:	68f9      	ldr	r1, [r7, #12]
 800a0c0:	8989      	ldrh	r1, [r1, #12]
 800a0c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0c6:	4413      	add	r3, r2
 800a0c8:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	08db      	lsrs	r3, r3, #3
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	8992      	ldrh	r2, [r2, #12]
 800a0d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0d6:	fb02 f201 	mul.w	r2, r2, r1
 800a0da:	1a9b      	subs	r3, r3, r2
 800a0dc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	f003 0307 	and.w	r3, r3, #7
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ea:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	617a      	str	r2, [r7, #20]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff fc19 	bl	800992c <move_window>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <change_bitmap+0x62>
 800a100:	2301      	movs	r3, #1
 800a102:	e03f      	b.n	800a184 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	4413      	add	r3, r2
 800a10a:	333c      	adds	r3, #60	; 0x3c
 800a10c:	781a      	ldrb	r2, [r3, #0]
 800a10e:	7ffb      	ldrb	r3, [r7, #31]
 800a110:	4013      	ands	r3, r2
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	bf14      	ite	ne
 800a118:	2301      	movne	r3, #1
 800a11a:	2300      	moveq	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	461a      	mov	r2, r3
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	4293      	cmp	r3, r2
 800a124:	d101      	bne.n	800a12a <change_bitmap+0x88>
 800a126:	2302      	movs	r3, #2
 800a128:	e02c      	b.n	800a184 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	4413      	add	r3, r2
 800a130:	333c      	adds	r3, #60	; 0x3c
 800a132:	781a      	ldrb	r2, [r3, #0]
 800a134:	7ffb      	ldrb	r3, [r7, #31]
 800a136:	4053      	eors	r3, r2
 800a138:	b2d9      	uxtb	r1, r3
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	4413      	add	r3, r2
 800a140:	333c      	adds	r3, #60	; 0x3c
 800a142:	460a      	mov	r2, r1
 800a144:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2201      	movs	r2, #1
 800a14a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3b01      	subs	r3, #1
 800a150:	607b      	str	r3, [r7, #4]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <change_bitmap+0xba>
 800a158:	2300      	movs	r3, #0
 800a15a:	e013      	b.n	800a184 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800a15c:	7ffb      	ldrb	r3, [r7, #31]
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	77fb      	strb	r3, [r7, #31]
 800a162:	7ffb      	ldrb	r3, [r7, #31]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1cd      	bne.n	800a104 <change_bitmap+0x62>
			bm = 1;
 800a168:	2301      	movs	r3, #1
 800a16a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	3301      	adds	r3, #1
 800a170:	61bb      	str	r3, [r7, #24]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	899b      	ldrh	r3, [r3, #12]
 800a176:	461a      	mov	r2, r3
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d3c2      	bcc.n	800a104 <change_bitmap+0x62>
		i = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a182:	e7b3      	b.n	800a0ec <change_bitmap+0x4a>
	}
}
 800a184:	4618      	mov	r0, r3
 800a186:	3720      	adds	r7, #32
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	79db      	ldrb	r3, [r3, #7]
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d121      	bne.n	800a1e0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	617b      	str	r3, [r7, #20]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	e014      	b.n	800a1d4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	6979      	ldr	r1, [r7, #20]
 800a1b6:	f7ff fdcb 	bl	8009d50 <put_fat>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800a1be:	7bfb      	ldrb	r3, [r7, #15]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <fill_first_frag+0x3c>
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	e00c      	b.n	800a1e2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	617b      	str	r3, [r7, #20]
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1e7      	bne.n	800a1aa <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b086      	sub	sp, #24
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	60f8      	str	r0, [r7, #12]
 800a1f2:	60b9      	str	r1, [r7, #8]
 800a1f4:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a1f6:	e020      	b.n	800a23a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	1c59      	adds	r1, r3, #1
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d905      	bls.n	800a21a <fill_last_frag+0x30>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	3302      	adds	r3, #2
 800a218:	e000      	b.n	800a21c <fill_last_frag+0x32>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	461a      	mov	r2, r3
 800a21e:	f7ff fd97 	bl	8009d50 <put_fat>
 800a222:	4603      	mov	r3, r0
 800a224:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800a226:	7dfb      	ldrb	r3, [r7, #23]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <fill_last_frag+0x46>
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	e009      	b.n	800a244 <fill_last_frag+0x5a>
		obj->n_frag--;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	69db      	ldr	r3, [r3, #28]
 800a234:	1e5a      	subs	r2, r3, #1
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1da      	bne.n	800a1f8 <fill_last_frag+0xe>
	}
	return FR_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	; 0x28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d904      	bls.n	800a27a <remove_chain+0x2e>
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	429a      	cmp	r2, r3
 800a278:	d301      	bcc.n	800a27e <remove_chain+0x32>
 800a27a:	2302      	movs	r3, #2
 800a27c:	e096      	b.n	800a3ac <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d014      	beq.n	800a2ae <remove_chain+0x62>
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	2b04      	cmp	r3, #4
 800a28a:	d103      	bne.n	800a294 <remove_chain+0x48>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	79db      	ldrb	r3, [r3, #7]
 800a290:	2b02      	cmp	r3, #2
 800a292:	d00c      	beq.n	800a2ae <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a294:	f04f 32ff 	mov.w	r2, #4294967295
 800a298:	6879      	ldr	r1, [r7, #4]
 800a29a:	69b8      	ldr	r0, [r7, #24]
 800a29c:	f7ff fd58 	bl	8009d50 <put_fat>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a2a4:	7ffb      	ldrb	r3, [r7, #31]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <remove_chain+0x62>
 800a2aa:	7ffb      	ldrb	r3, [r7, #31]
 800a2ac:	e07e      	b.n	800a3ac <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a2ae:	68b9      	ldr	r1, [r7, #8]
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f7ff fbf9 	bl	8009aa8 <get_fat>
 800a2b6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d055      	beq.n	800a36a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d101      	bne.n	800a2c8 <remove_chain+0x7c>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	e071      	b.n	800a3ac <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ce:	d101      	bne.n	800a2d4 <remove_chain+0x88>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e06b      	b.n	800a3ac <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b04      	cmp	r3, #4
 800a2da:	d00b      	beq.n	800a2f4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a2dc:	2200      	movs	r2, #0
 800a2de:	68b9      	ldr	r1, [r7, #8]
 800a2e0:	69b8      	ldr	r0, [r7, #24]
 800a2e2:	f7ff fd35 	bl	8009d50 <put_fat>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a2ea:	7ffb      	ldrb	r3, [r7, #31]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <remove_chain+0xa8>
 800a2f0:	7ffb      	ldrb	r3, [r7, #31]
 800a2f2:	e05b      	b.n	800a3ac <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	69da      	ldr	r2, [r3, #28]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	3b02      	subs	r3, #2
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d20b      	bcs.n	800a31a <remove_chain+0xce>
			fs->free_clst++;
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	791b      	ldrb	r3, [r3, #4]
 800a310:	f043 0301 	orr.w	r3, r3, #1
 800a314:	b2da      	uxtb	r2, r3
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	3301      	adds	r3, #1
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	429a      	cmp	r2, r3
 800a322:	d102      	bne.n	800a32a <remove_chain+0xde>
			ecl = nxt;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	623b      	str	r3, [r7, #32]
 800a328:	e017      	b.n	800a35a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d10f      	bne.n	800a352 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800a332:	6a3a      	ldr	r2, [r7, #32]
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	2300      	movs	r3, #0
 800a33c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a33e:	69b8      	ldr	r0, [r7, #24]
 800a340:	f7ff feaf 	bl	800a0a2 <change_bitmap>
 800a344:	4603      	mov	r3, r0
 800a346:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800a348:	7ffb      	ldrb	r3, [r7, #31]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <remove_chain+0x106>
 800a34e:	7ffb      	ldrb	r3, [r7, #31]
 800a350:	e02c      	b.n	800a3ac <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	623b      	str	r3, [r7, #32]
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	429a      	cmp	r2, r3
 800a366:	d3a2      	bcc.n	800a2ae <remove_chain+0x62>
 800a368:	e000      	b.n	800a36c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800a36a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2b04      	cmp	r3, #4
 800a372:	d11a      	bne.n	800a3aa <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d103      	bne.n	800a382 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	71da      	strb	r2, [r3, #7]
 800a380:	e013      	b.n	800a3aa <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	79db      	ldrb	r3, [r3, #7]
 800a386:	2b03      	cmp	r3, #3
 800a388:	d10f      	bne.n	800a3aa <remove_chain+0x15e>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	429a      	cmp	r2, r3
 800a392:	d30a      	bcc.n	800a3aa <remove_chain+0x15e>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	4413      	add	r3, r2
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d802      	bhi.n	800a3aa <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3728      	adds	r7, #40	; 0x28
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10d      	bne.n	800a3e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d004      	beq.n	800a3e0 <create_chain+0x2c>
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	69ba      	ldr	r2, [r7, #24]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d31b      	bcc.n	800a418 <create_chain+0x64>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	61bb      	str	r3, [r7, #24]
 800a3e4:	e018      	b.n	800a418 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff fb5d 	bl	8009aa8 <get_fat>
 800a3ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d801      	bhi.n	800a3fa <create_chain+0x46>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e0d9      	b.n	800a5ae <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d101      	bne.n	800a406 <create_chain+0x52>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	e0d3      	b.n	800a5ae <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d201      	bcs.n	800a414 <create_chain+0x60>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	e0cc      	b.n	800a5ae <create_chain+0x1fa>
		scl = clst;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	d164      	bne.n	800a4ea <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800a420:	2201      	movs	r2, #1
 800a422:	69b9      	ldr	r1, [r7, #24]
 800a424:	6938      	ldr	r0, [r7, #16]
 800a426:	f7ff fdb5 	bl	8009f94 <find_bitmap>
 800a42a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <create_chain+0x86>
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a438:	d101      	bne.n	800a43e <create_chain+0x8a>
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	e0b7      	b.n	800a5ae <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800a43e:	2301      	movs	r3, #1
 800a440:	2201      	movs	r2, #1
 800a442:	69f9      	ldr	r1, [r7, #28]
 800a444:	6938      	ldr	r0, [r7, #16]
 800a446:	f7ff fe2c 	bl	800a0a2 <change_bitmap>
 800a44a:	4603      	mov	r3, r0
 800a44c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	2b02      	cmp	r3, #2
 800a452:	d101      	bne.n	800a458 <create_chain+0xa4>
 800a454:	2301      	movs	r3, #1
 800a456:	e0aa      	b.n	800a5ae <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800a458:	7dfb      	ldrb	r3, [r7, #23]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d102      	bne.n	800a464 <create_chain+0xb0>
 800a45e:	f04f 33ff 	mov.w	r3, #4294967295
 800a462:	e0a4      	b.n	800a5ae <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d103      	bne.n	800a472 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2202      	movs	r2, #2
 800a46e:	71da      	strb	r2, [r3, #7]
 800a470:	e011      	b.n	800a496 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	79db      	ldrb	r3, [r3, #7]
 800a476:	2b02      	cmp	r3, #2
 800a478:	d10d      	bne.n	800a496 <create_chain+0xe2>
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	3301      	adds	r3, #1
 800a47e:	69fa      	ldr	r2, [r7, #28]
 800a480:	429a      	cmp	r2, r3
 800a482:	d008      	beq.n	800a496 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	69ba      	ldr	r2, [r7, #24]
 800a48a:	1ad2      	subs	r2, r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2203      	movs	r2, #3
 800a494:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	79db      	ldrb	r3, [r3, #7]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d064      	beq.n	800a568 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	69fa      	ldr	r2, [r7, #28]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d10b      	bne.n	800a4c0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d003      	beq.n	800a4b8 <create_chain+0x104>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	e000      	b.n	800a4ba <create_chain+0x106>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	61d3      	str	r3, [r2, #28]
 800a4be:	e053      	b.n	800a568 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <create_chain+0x11a>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800a4ce:	69fa      	ldr	r2, [r7, #28]
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff fe89 	bl	800a1ea <fill_last_frag>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d142      	bne.n	800a568 <create_chain+0x1b4>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	61da      	str	r2, [r3, #28]
 800a4e8:	e03e      	b.n	800a568 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	69fa      	ldr	r2, [r7, #28]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d307      	bcc.n	800a50e <create_chain+0x15a>
				ncl = 2;
 800a4fe:	2302      	movs	r3, #2
 800a500:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a502:	69fa      	ldr	r2, [r7, #28]
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	429a      	cmp	r2, r3
 800a508:	d901      	bls.n	800a50e <create_chain+0x15a>
 800a50a:	2300      	movs	r3, #0
 800a50c:	e04f      	b.n	800a5ae <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a50e:	69f9      	ldr	r1, [r7, #28]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7ff fac9 	bl	8009aa8 <get_fat>
 800a516:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00e      	beq.n	800a53c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d003      	beq.n	800a52c <create_chain+0x178>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52a:	d101      	bne.n	800a530 <create_chain+0x17c>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	e03e      	b.n	800a5ae <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	429a      	cmp	r2, r3
 800a536:	d1da      	bne.n	800a4ee <create_chain+0x13a>
 800a538:	2300      	movs	r3, #0
 800a53a:	e038      	b.n	800a5ae <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800a53c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a53e:	f04f 32ff 	mov.w	r2, #4294967295
 800a542:	69f9      	ldr	r1, [r7, #28]
 800a544:	6938      	ldr	r0, [r7, #16]
 800a546:	f7ff fc03 	bl	8009d50 <put_fat>
 800a54a:	4603      	mov	r3, r0
 800a54c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d109      	bne.n	800a568 <create_chain+0x1b4>
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d006      	beq.n	800a568 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a55a:	69fa      	ldr	r2, [r7, #28]
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6938      	ldr	r0, [r7, #16]
 800a560:	f7ff fbf6 	bl	8009d50 <put_fat>
 800a564:	4603      	mov	r3, r0
 800a566:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d116      	bne.n	800a59c <create_chain+0x1e8>
		fs->last_clst = ncl;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	69da      	ldr	r2, [r3, #28]
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	3b02      	subs	r3, #2
 800a57e:	429a      	cmp	r2, r3
 800a580:	d804      	bhi.n	800a58c <create_chain+0x1d8>
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	791b      	ldrb	r3, [r3, #4]
 800a590:	f043 0301 	orr.w	r3, r3, #1
 800a594:	b2da      	uxtb	r2, r3
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	711a      	strb	r2, [r3, #4]
 800a59a:	e007      	b.n	800a5ac <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d102      	bne.n	800a5a8 <create_chain+0x1f4>
 800a5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a6:	e000      	b.n	800a5aa <create_chain+0x1f6>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a5ac:	69fb      	ldr	r3, [r7, #28]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3720      	adds	r7, #32
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a5b6:	b590      	push	{r4, r7, lr}
 800a5b8:	b089      	sub	sp, #36	; 0x24
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	899b      	ldrh	r3, [r3, #12]
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	f04f 0400 	mov.w	r4, #0
 800a5da:	461a      	mov	r2, r3
 800a5dc:	4623      	mov	r3, r4
 800a5de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5e2:	f7f5 fee5 	bl	80003b0 <__aeabi_uldivmod>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	895b      	ldrh	r3, [r3, #10]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	f04f 0400 	mov.w	r4, #0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4623      	mov	r3, r4
 800a5fc:	f7f5 fed8 	bl	80003b0 <__aeabi_uldivmod>
 800a600:	4603      	mov	r3, r0
 800a602:	460c      	mov	r4, r1
 800a604:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	1d1a      	adds	r2, r3, #4
 800a60a:	61ba      	str	r2, [r7, #24]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <clmt_clust+0x64>
 800a616:	2300      	movs	r3, #0
 800a618:	e010      	b.n	800a63c <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 800a61a:	69fa      	ldr	r2, [r7, #28]
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d307      	bcc.n	800a632 <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	61fb      	str	r3, [r7, #28]
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	3304      	adds	r3, #4
 800a62e:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a630:	e7e9      	b.n	800a606 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 800a632:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	4413      	add	r3, r2
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3724      	adds	r7, #36	; 0x24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd90      	pop	{r4, r7, pc}

0800a644 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b04      	cmp	r3, #4
 800a65a:	d102      	bne.n	800a662 <dir_sdi+0x1e>
 800a65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a660:	e001      	b.n	800a666 <dir_sdi+0x22>
 800a662:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d904      	bls.n	800a676 <dir_sdi+0x32>
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	f003 031f 	and.w	r3, r3, #31
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <dir_sdi+0x36>
		return FR_INT_ERR;
 800a676:	2302      	movs	r3, #2
 800a678:	e074      	b.n	800a764 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d109      	bne.n	800a6a0 <dir_sdi+0x5c>
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	2b02      	cmp	r3, #2
 800a692:	d905      	bls.n	800a6a0 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a698:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10c      	bne.n	800a6c0 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	095b      	lsrs	r3, r3, #5
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	8912      	ldrh	r2, [r2, #8]
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d301      	bcc.n	800a6b6 <dir_sdi+0x72>
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	e056      	b.n	800a764 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38
 800a6be:	e02d      	b.n	800a71c <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	895b      	ldrh	r3, [r3, #10]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	899b      	ldrh	r3, [r3, #12]
 800a6ca:	fb03 f302 	mul.w	r3, r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6d0:	e019      	b.n	800a706 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6979      	ldr	r1, [r7, #20]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7ff f9e6 	bl	8009aa8 <get_fat>
 800a6dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e4:	d101      	bne.n	800a6ea <dir_sdi+0xa6>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e03c      	b.n	800a764 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d904      	bls.n	800a6fa <dir_sdi+0xb6>
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d301      	bcc.n	800a6fe <dir_sdi+0xba>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e032      	b.n	800a764 <dir_sdi+0x120>
			ofs -= csz;
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d2e1      	bcs.n	800a6d2 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800a70e:	6979      	ldr	r1, [r7, #20]
 800a710:	6938      	ldr	r0, [r7, #16]
 800a712:	f7ff f9a9 	bl	8009a68 <clust2sect>
 800a716:	4602      	mov	r2, r0
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <dir_sdi+0xea>
 800a72a:	2302      	movs	r3, #2
 800a72c:	e01a      	b.n	800a764 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	899b      	ldrh	r3, [r3, #12]
 800a736:	4619      	mov	r1, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a73e:	441a      	add	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	899b      	ldrh	r3, [r3, #12]
 800a74e:	461a      	mov	r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	fbb3 f0f2 	udiv	r0, r3, r2
 800a756:	fb02 f200 	mul.w	r2, r2, r0
 800a75a:	1a9b      	subs	r3, r3, r2
 800a75c:	18ca      	adds	r2, r1, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a780:	3320      	adds	r3, #32
 800a782:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00b      	beq.n	800a7a4 <dir_next+0x38>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2b04      	cmp	r3, #4
 800a792:	d102      	bne.n	800a79a <dir_next+0x2e>
 800a794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a798:	e001      	b.n	800a79e <dir_next+0x32>
 800a79a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d801      	bhi.n	800a7a8 <dir_next+0x3c>
 800a7a4:	2304      	movs	r3, #4
 800a7a6:	e0c3      	b.n	800a930 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	899b      	ldrh	r3, [r3, #12]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7b4:	fb02 f201 	mul.w	r2, r2, r1
 800a7b8:	1a9b      	subs	r3, r3, r2
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f040 80a5 	bne.w	800a90a <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	1c5a      	adds	r2, r3, #1
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10b      	bne.n	800a7ea <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	095b      	lsrs	r3, r3, #5
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	8912      	ldrh	r2, [r2, #8]
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	f0c0 8095 	bcc.w	800a90a <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	639a      	str	r2, [r3, #56]	; 0x38
 800a7e6:	2304      	movs	r3, #4
 800a7e8:	e0a2      	b.n	800a930 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	899b      	ldrh	r3, [r3, #12]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	8952      	ldrh	r2, [r2, #10]
 800a7fa:	3a01      	subs	r2, #1
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 8083 	bne.w	800a90a <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80a:	4619      	mov	r1, r3
 800a80c:	4610      	mov	r0, r2
 800a80e:	f7ff f94b 	bl	8009aa8 <get_fat>
 800a812:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d801      	bhi.n	800a81e <dir_next+0xb2>
 800a81a:	2302      	movs	r3, #2
 800a81c:	e088      	b.n	800a930 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d101      	bne.n	800a82a <dir_next+0xbe>
 800a826:	2301      	movs	r3, #1
 800a828:	e082      	b.n	800a930 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	429a      	cmp	r2, r3
 800a832:	d360      	bcc.n	800a8f6 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d104      	bne.n	800a844 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	639a      	str	r2, [r3, #56]	; 0x38
 800a840:	2304      	movs	r3, #4
 800a842:	e075      	b.n	800a930 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a84a:	4619      	mov	r1, r3
 800a84c:	4610      	mov	r0, r2
 800a84e:	f7ff fdb1 	bl	800a3b4 <create_chain>
 800a852:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <dir_next+0xf2>
 800a85a:	2307      	movs	r3, #7
 800a85c:	e068      	b.n	800a930 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d101      	bne.n	800a868 <dir_next+0xfc>
 800a864:	2302      	movs	r3, #2
 800a866:	e063      	b.n	800a930 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86e:	d101      	bne.n	800a874 <dir_next+0x108>
 800a870:	2301      	movs	r3, #1
 800a872:	e05d      	b.n	800a930 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	79db      	ldrb	r3, [r3, #7]
 800a878:	f043 0304 	orr.w	r3, r3, #4
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f7ff f80e 	bl	80098a4 <sync_window>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <dir_next+0x126>
 800a88e:	2301      	movs	r3, #1
 800a890:	e04e      	b.n	800a930 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	899b      	ldrh	r3, [r3, #12]
 800a89c:	461a      	mov	r2, r3
 800a89e:	2100      	movs	r1, #0
 800a8a0:	f7fe fe37 	bl	8009512 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	613b      	str	r3, [r7, #16]
 800a8a8:	6979      	ldr	r1, [r7, #20]
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7ff f8dc 	bl	8009a68 <clust2sect>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	639a      	str	r2, [r3, #56]	; 0x38
 800a8b6:	e012      	b.n	800a8de <dir_next+0x172>
						fs->wflag = 1;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7fe fff0 	bl	80098a4 <sync_window>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <dir_next+0x162>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e030      	b.n	800a930 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	613b      	str	r3, [r7, #16]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	639a      	str	r2, [r3, #56]	; 0x38
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	895b      	ldrh	r3, [r3, #10]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d3e6      	bcc.n	800a8b8 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	1ad2      	subs	r2, r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800a8fc:	6979      	ldr	r1, [r7, #20]
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f7ff f8b2 	bl	8009a68 <clust2sect>
 800a904:	4602      	mov	r2, r0
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	899b      	ldrh	r3, [r3, #12]
 800a91a:	461a      	mov	r2, r3
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a922:	fb02 f200 	mul.w	r2, r2, r0
 800a926:	1a9b      	subs	r3, r3, r2
 800a928:	18ca      	adds	r2, r1, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3718      	adds	r7, #24
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a948:	2100      	movs	r1, #0
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff fe7a 	bl	800a644 <dir_sdi>
 800a950:	4603      	mov	r3, r0
 800a952:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d140      	bne.n	800a9dc <dir_alloc+0xa4>
		n = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a962:	4619      	mov	r1, r3
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7fe ffe1 	bl	800992c <move_window>
 800a96a:	4603      	mov	r3, r0
 800a96c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d132      	bne.n	800a9da <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b04      	cmp	r3, #4
 800a97a:	d108      	bne.n	800a98e <dir_alloc+0x56>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	b25b      	sxtb	r3, r3
 800a984:	43db      	mvns	r3, r3
 800a986:	b2db      	uxtb	r3, r3
 800a988:	09db      	lsrs	r3, r3, #7
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	e00f      	b.n	800a9ae <dir_alloc+0x76>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	2be5      	cmp	r3, #229	; 0xe5
 800a996:	d004      	beq.n	800a9a2 <dir_alloc+0x6a>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <dir_alloc+0x6e>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e000      	b.n	800a9a8 <dir_alloc+0x70>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d007      	beq.n	800a9c2 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	613b      	str	r3, [r7, #16]
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d102      	bne.n	800a9c6 <dir_alloc+0x8e>
 800a9c0:	e00c      	b.n	800a9dc <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7ff fecf 	bl	800a76c <dir_next>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d0c2      	beq.n	800a95e <dir_alloc+0x26>
 800a9d8:	e000      	b.n	800a9dc <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a9da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d101      	bne.n	800a9e6 <dir_alloc+0xae>
 800a9e2:	2307      	movs	r3, #7
 800a9e4:	75fb      	strb	r3, [r7, #23]
	return res;
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	331a      	adds	r3, #26
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fba0 	bl	8009144 <ld_word>
 800aa04:	4603      	mov	r3, r0
 800aa06:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	2b03      	cmp	r3, #3
 800aa0e:	d109      	bne.n	800aa24 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	3314      	adds	r3, #20
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe fb95 	bl	8009144 <ld_word>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	041b      	lsls	r3, r3, #16
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aa24:	68fb      	ldr	r3, [r7, #12]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	331a      	adds	r3, #26
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	b292      	uxth	r2, r2
 800aa42:	4611      	mov	r1, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe fc75 	bl	8009334 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d109      	bne.n	800aa66 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f103 0214 	add.w	r2, r3, #20
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	0c1b      	lsrs	r3, r3, #16
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4610      	mov	r0, r2
 800aa62:	f7fe fc67 	bl	8009334 <st_word>
	}
}
 800aa66:	bf00      	nop
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800aa70:	b590      	push	{r4, r7, lr}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	331a      	adds	r3, #26
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fe fb60 	bl	8009144 <ld_word>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <cmp_lfn+0x1e>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e059      	b.n	800ab42 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa96:	1e5a      	subs	r2, r3, #1
 800aa98:	4613      	mov	r3, r2
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	4413      	add	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	81fb      	strh	r3, [r7, #14]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	613b      	str	r3, [r7, #16]
 800aaac:	e033      	b.n	800ab16 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800aaae:	4a27      	ldr	r2, [pc, #156]	; (800ab4c <cmp_lfn+0xdc>)
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	4413      	add	r3, r2
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	4413      	add	r3, r2
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe fb41 	bl	8009144 <ld_word>
 800aac2:	4603      	mov	r3, r0
 800aac4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800aac6:	89fb      	ldrh	r3, [r7, #14]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d01a      	beq.n	800ab02 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	2bfe      	cmp	r3, #254	; 0xfe
 800aad0:	d812      	bhi.n	800aaf8 <cmp_lfn+0x88>
 800aad2:	89bb      	ldrh	r3, [r7, #12]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fe fa0d 	bl	8008ef4 <ff_wtoupper>
 800aada:	4603      	mov	r3, r0
 800aadc:	461c      	mov	r4, r3
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	617a      	str	r2, [r7, #20]
 800aae4:	005b      	lsls	r3, r3, #1
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	4413      	add	r3, r2
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe fa01 	bl	8008ef4 <ff_wtoupper>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	429c      	cmp	r4, r3
 800aaf6:	d001      	beq.n	800aafc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800aaf8:	2300      	movs	r3, #0
 800aafa:	e022      	b.n	800ab42 <cmp_lfn+0xd2>
			}
			wc = uc;
 800aafc:	89bb      	ldrh	r3, [r7, #12]
 800aafe:	81fb      	strh	r3, [r7, #14]
 800ab00:	e006      	b.n	800ab10 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ab02:	89bb      	ldrh	r3, [r7, #12]
 800ab04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d001      	beq.n	800ab10 <cmp_lfn+0xa0>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	e018      	b.n	800ab42 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	3301      	adds	r3, #1
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	2b0c      	cmp	r3, #12
 800ab1a:	d9c8      	bls.n	800aaae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00b      	beq.n	800ab40 <cmp_lfn+0xd0>
 800ab28:	89fb      	ldrh	r3, [r7, #14]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d008      	beq.n	800ab40 <cmp_lfn+0xd0>
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	4413      	add	r3, r2
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <cmp_lfn+0xd0>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	e000      	b.n	800ab42 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ab40:	2301      	movs	r3, #1
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	371c      	adds	r7, #28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd90      	pop	{r4, r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	0800f894 	.word	0x0800f894

0800ab50 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	331a      	adds	r3, #26
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe faf0 	bl	8009144 <ld_word>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <pick_lfn+0x1e>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e04d      	b.n	800ac0a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab76:	1e5a      	subs	r2, r3, #1
 800ab78:	4613      	mov	r3, r2
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	4413      	add	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ab84:	2301      	movs	r3, #1
 800ab86:	81fb      	strh	r3, [r7, #14]
 800ab88:	2300      	movs	r3, #0
 800ab8a:	613b      	str	r3, [r7, #16]
 800ab8c:	e028      	b.n	800abe0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ab8e:	4a21      	ldr	r2, [pc, #132]	; (800ac14 <pick_lfn+0xc4>)
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	4413      	add	r3, r2
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fe fad1 	bl	8009144 <ld_word>
 800aba2:	4603      	mov	r3, r0
 800aba4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800aba6:	89fb      	ldrh	r3, [r7, #14]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00f      	beq.n	800abcc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2bfe      	cmp	r3, #254	; 0xfe
 800abb0:	d901      	bls.n	800abb6 <pick_lfn+0x66>
 800abb2:	2300      	movs	r3, #0
 800abb4:	e029      	b.n	800ac0a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800abb6:	89bb      	ldrh	r3, [r7, #12]
 800abb8:	81fb      	strh	r3, [r7, #14]
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	617a      	str	r2, [r7, #20]
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	89fa      	ldrh	r2, [r7, #14]
 800abc8:	801a      	strh	r2, [r3, #0]
 800abca:	e006      	b.n	800abda <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800abcc:	89bb      	ldrh	r3, [r7, #12]
 800abce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d001      	beq.n	800abda <pick_lfn+0x8a>
 800abd6:	2300      	movs	r3, #0
 800abd8:	e017      	b.n	800ac0a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	3301      	adds	r3, #1
 800abde:	613b      	str	r3, [r7, #16]
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	2b0c      	cmp	r3, #12
 800abe4:	d9d3      	bls.n	800ab8e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00a      	beq.n	800ac08 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2bfe      	cmp	r3, #254	; 0xfe
 800abf6:	d901      	bls.n	800abfc <pick_lfn+0xac>
 800abf8:	2300      	movs	r3, #0
 800abfa:	e006      	b.n	800ac0a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	4413      	add	r3, r2
 800ac04:	2200      	movs	r2, #0
 800ac06:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ac08:	2301      	movs	r3, #1
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	0800f894 	.word	0x0800f894

0800ac18 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	4611      	mov	r1, r2
 800ac24:	461a      	mov	r2, r3
 800ac26:	460b      	mov	r3, r1
 800ac28:	71fb      	strb	r3, [r7, #7]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	330d      	adds	r3, #13
 800ac32:	79ba      	ldrb	r2, [r7, #6]
 800ac34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	330b      	adds	r3, #11
 800ac3a:	220f      	movs	r2, #15
 800ac3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	330c      	adds	r3, #12
 800ac42:	2200      	movs	r2, #0
 800ac44:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	331a      	adds	r3, #26
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fe fb71 	bl	8009334 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ac52:	79fb      	ldrb	r3, [r7, #7]
 800ac54:	1e5a      	subs	r2, r3, #1
 800ac56:	4613      	mov	r3, r2
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	82fb      	strh	r3, [r7, #22]
 800ac66:	2300      	movs	r3, #0
 800ac68:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ac6a:	8afb      	ldrh	r3, [r7, #22]
 800ac6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d007      	beq.n	800ac84 <put_lfn+0x6c>
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	61fa      	str	r2, [r7, #28]
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	881b      	ldrh	r3, [r3, #0]
 800ac82:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ac84:	4a17      	ldr	r2, [pc, #92]	; (800ace4 <put_lfn+0xcc>)
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	4413      	add	r3, r2
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	4413      	add	r3, r2
 800ac92:	8afa      	ldrh	r2, [r7, #22]
 800ac94:	4611      	mov	r1, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fe fb4c 	bl	8009334 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ac9c:	8afb      	ldrh	r3, [r7, #22]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d102      	bne.n	800aca8 <put_lfn+0x90>
 800aca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aca6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	3301      	adds	r3, #1
 800acac:	61bb      	str	r3, [r7, #24]
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	2b0c      	cmp	r3, #12
 800acb2:	d9da      	bls.n	800ac6a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800acb4:	8afb      	ldrh	r3, [r7, #22]
 800acb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acba:	4293      	cmp	r3, r2
 800acbc:	d006      	beq.n	800accc <put_lfn+0xb4>
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	005b      	lsls	r3, r3, #1
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4413      	add	r3, r2
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d103      	bne.n	800acd4 <put_lfn+0xbc>
 800accc:	79fb      	ldrb	r3, [r7, #7]
 800acce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	79fa      	ldrb	r2, [r7, #7]
 800acd8:	701a      	strb	r2, [r3, #0]
}
 800acda:	bf00      	nop
 800acdc:	3720      	adds	r7, #32
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	0800f894 	.word	0x0800f894

0800ace8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08c      	sub	sp, #48	; 0x30
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800acf6:	220b      	movs	r2, #11
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7fe fbe8 	bl	80094d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b05      	cmp	r3, #5
 800ad04:	d929      	bls.n	800ad5a <gen_numname+0x72>
		sr = seq;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ad0a:	e020      	b.n	800ad4e <gen_numname+0x66>
			wc = *lfn++;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	1c9a      	adds	r2, r3, #2
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ad16:	2300      	movs	r3, #0
 800ad18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad1a:	e015      	b.n	800ad48 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	005a      	lsls	r2, r3, #1
 800ad20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	4413      	add	r3, r2
 800ad28:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ad2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad2c:	085b      	lsrs	r3, r3, #1
 800ad2e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d003      	beq.n	800ad42 <gen_numname+0x5a>
 800ad3a:	69fa      	ldr	r2, [r7, #28]
 800ad3c:	4b31      	ldr	r3, [pc, #196]	; (800ae04 <gen_numname+0x11c>)
 800ad3e:	4053      	eors	r3, r2
 800ad40:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	3301      	adds	r3, #1
 800ad46:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4a:	2b0f      	cmp	r3, #15
 800ad4c:	d9e6      	bls.n	800ad1c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1da      	bne.n	800ad0c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ad5a:	2307      	movs	r3, #7
 800ad5c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	f003 030f 	and.w	r3, r3, #15
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	3330      	adds	r3, #48	; 0x30
 800ad6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ad6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad72:	2b39      	cmp	r3, #57	; 0x39
 800ad74:	d904      	bls.n	800ad80 <gen_numname+0x98>
 800ad76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad7a:	3307      	adds	r3, #7
 800ad7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	1e5a      	subs	r2, r3, #1
 800ad84:	62ba      	str	r2, [r7, #40]	; 0x28
 800ad86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ad90:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	091b      	lsrs	r3, r3, #4
 800ad98:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1de      	bne.n	800ad5e <gen_numname+0x76>
	ns[i] = '~';
 800ada0:	f107 0214 	add.w	r2, r7, #20
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	4413      	add	r3, r2
 800ada8:	227e      	movs	r2, #126	; 0x7e
 800adaa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800adac:	2300      	movs	r3, #0
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
 800adb0:	e002      	b.n	800adb8 <gen_numname+0xd0>
 800adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb4:	3301      	adds	r3, #1
 800adb6:	627b      	str	r3, [r7, #36]	; 0x24
 800adb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d205      	bcs.n	800adcc <gen_numname+0xe4>
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	4413      	add	r3, r2
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b20      	cmp	r3, #32
 800adca:	d1f2      	bne.n	800adb2 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800adcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adce:	2b07      	cmp	r3, #7
 800add0:	d808      	bhi.n	800ade4 <gen_numname+0xfc>
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	62ba      	str	r2, [r7, #40]	; 0x28
 800add8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800addc:	4413      	add	r3, r2
 800adde:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ade2:	e000      	b.n	800ade6 <gen_numname+0xfe>
 800ade4:	2120      	movs	r1, #32
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	627a      	str	r2, [r7, #36]	; 0x24
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	460a      	mov	r2, r1
 800adf2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf6:	2b07      	cmp	r3, #7
 800adf8:	d9e8      	bls.n	800adcc <gen_numname+0xe4>
}
 800adfa:	bf00      	nop
 800adfc:	3730      	adds	r7, #48	; 0x30
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	00011021 	.word	0x00011021

0800ae08 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ae14:	230b      	movs	r3, #11
 800ae16:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	0852      	lsrs	r2, r2, #1
 800ae1e:	01db      	lsls	r3, r3, #7
 800ae20:	4313      	orrs	r3, r2
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	1c59      	adds	r1, r3, #1
 800ae28:	6079      	str	r1, [r7, #4]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	3b01      	subs	r3, #1
 800ae34:	60bb      	str	r3, [r7, #8]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1ed      	bne.n	800ae18 <sum_sfn+0x10>
	return sum;
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b087      	sub	sp, #28
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3301      	adds	r3, #1
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	015b      	lsls	r3, r3, #5
 800ae5c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800ae5e:	2300      	movs	r3, #0
 800ae60:	827b      	strh	r3, [r7, #18]
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]
 800ae66:	e018      	b.n	800ae9a <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d103      	bne.n	800ae76 <xdir_sum+0x2c>
			i++;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	3301      	adds	r3, #1
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	e00e      	b.n	800ae94 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ae76:	8a7b      	ldrh	r3, [r7, #18]
 800ae78:	03db      	lsls	r3, r3, #15
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	8a7b      	ldrh	r3, [r7, #18]
 800ae7e:	085b      	lsrs	r3, r3, #1
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	4413      	add	r3, r2
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	440b      	add	r3, r1
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	4413      	add	r3, r2
 800ae92:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	3301      	adds	r3, #1
 800ae98:	617b      	str	r3, [r7, #20]
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d3e2      	bcc.n	800ae68 <xdir_sum+0x1e>
		}
	}
	return sum;
 800aea2:	8a7b      	ldrh	r3, [r7, #18]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	371c      	adds	r7, #28
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800aebc:	e01f      	b.n	800aefe <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800aebe:	89bb      	ldrh	r3, [r7, #12]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe f817 	bl	8008ef4 <ff_wtoupper>
 800aec6:	4603      	mov	r3, r0
 800aec8:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800aeca:	89fb      	ldrh	r3, [r7, #14]
 800aecc:	03db      	lsls	r3, r3, #15
 800aece:	b29a      	uxth	r2, r3
 800aed0:	89fb      	ldrh	r3, [r7, #14]
 800aed2:	085b      	lsrs	r3, r3, #1
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	4413      	add	r3, r2
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	89bb      	ldrh	r3, [r7, #12]
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	b29b      	uxth	r3, r3
 800aee0:	4413      	add	r3, r2
 800aee2:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800aee4:	89fb      	ldrh	r3, [r7, #14]
 800aee6:	03db      	lsls	r3, r3, #15
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	89fb      	ldrh	r3, [r7, #14]
 800aeec:	085b      	lsrs	r3, r3, #1
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	4413      	add	r3, r2
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	89bb      	ldrh	r3, [r7, #12]
 800aef6:	0a1b      	lsrs	r3, r3, #8
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	4413      	add	r3, r2
 800aefc:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	1c9a      	adds	r2, r3, #2
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	81bb      	strh	r3, [r7, #12]
 800af08:	89bb      	ldrh	r3, [r7, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1d7      	bne.n	800aebe <xname_sum+0xe>
	}
	return sum;
 800af0e:	89fb      	ldrh	r3, [r7, #14]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800af18:	b590      	push	{r4, r7, lr}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800af26:	2340      	movs	r3, #64	; 0x40
 800af28:	613b      	str	r3, [r7, #16]
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	e02c      	b.n	800af8a <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f003 031f 	and.w	r3, r3, #31
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <get_xdir_info+0x28>
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	3302      	adds	r3, #2
 800af3e:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	4413      	add	r3, r2
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe f8fc 	bl	8009144 <ld_word>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f7fd ff93 	bl	8008e7c <ff_convert>
 800af56:	4603      	mov	r3, r0
 800af58:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800af5a:	897b      	ldrh	r3, [r7, #10]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <get_xdir_info+0x4e>
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2bfe      	cmp	r3, #254	; 0xfe
 800af64:	d902      	bls.n	800af6c <get_xdir_info+0x54>
 800af66:	2300      	movs	r3, #0
 800af68:	617b      	str	r3, [r7, #20]
 800af6a:	e015      	b.n	800af98 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	617a      	str	r2, [r7, #20]
 800af72:	897a      	ldrh	r2, [r7, #10]
 800af74:	b2d1      	uxtb	r1, r2
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	4413      	add	r3, r2
 800af7a:	460a      	mov	r2, r1
 800af7c:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	3302      	adds	r3, #2
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	3301      	adds	r3, #1
 800af88:	60fb      	str	r3, [r7, #12]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3323      	adds	r3, #35	; 0x23
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	461a      	mov	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4293      	cmp	r3, r2
 800af96:	d3cb      	bcc.n	800af30 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d106      	bne.n	800afac <get_xdir_info+0x94>
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	617a      	str	r2, [r7, #20]
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	4413      	add	r3, r2
 800afa8:	223f      	movs	r2, #63	; 0x3f
 800afaa:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	4413      	add	r3, r2
 800afb2:	331a      	adds	r3, #26
 800afb4:	2200      	movs	r2, #0
 800afb6:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	2200      	movs	r2, #0
 800afbc:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	791a      	ldrb	r2, [r3, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	7b1b      	ldrb	r3, [r3, #12]
 800afca:	f003 0310 	and.w	r3, r3, #16
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d107      	bne.n	800afe2 <get_xdir_info+0xca>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3338      	adds	r3, #56	; 0x38
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe f8ef 	bl	80091ba <ld_qword>
 800afdc:	4603      	mov	r3, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	e003      	b.n	800afea <get_xdir_info+0xd2>
 800afe2:	f04f 0300 	mov.w	r3, #0
 800afe6:	f04f 0400 	mov.w	r4, #0
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	330c      	adds	r3, #12
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe f8a5 	bl	8009144 <ld_word>
 800affa:	4603      	mov	r3, r0
 800affc:	461a      	mov	r2, r3
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	330e      	adds	r3, #14
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe f89c 	bl	8009144 <ld_word>
 800b00c:	4603      	mov	r3, r0
 800b00e:	461a      	mov	r2, r3
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	811a      	strh	r2, [r3, #8]
}
 800b014:	bf00      	nop
 800b016:	371c      	adds	r7, #28
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd90      	pop	{r4, r7, pc}

0800b01c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800b01c:	b590      	push	{r4, r7, lr}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b034:	4619      	mov	r1, r3
 800b036:	4610      	mov	r0, r2
 800b038:	f7fe fc78 	bl	800992c <move_window>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <load_xdir+0x2e>
 800b046:	7bfb      	ldrb	r3, [r7, #15]
 800b048:	e09f      	b.n	800b18a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b85      	cmp	r3, #133	; 0x85
 800b052:	d001      	beq.n	800b058 <load_xdir+0x3c>
 800b054:	2302      	movs	r3, #2
 800b056:	e098      	b.n	800b18a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05c:	2220      	movs	r2, #32
 800b05e:	4619      	mov	r1, r3
 800b060:	6938      	ldr	r0, [r7, #16]
 800b062:	f7fe fa35 	bl	80094d0 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	3301      	adds	r3, #1
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	3301      	adds	r3, #1
 800b06e:	015b      	lsls	r3, r3, #5
 800b070:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2b5f      	cmp	r3, #95	; 0x5f
 800b076:	d903      	bls.n	800b080 <load_xdir+0x64>
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b07e:	d901      	bls.n	800b084 <load_xdir+0x68>
 800b080:	2302      	movs	r3, #2
 800b082:	e082      	b.n	800b18a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800b084:	2100      	movs	r1, #0
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff fb70 	bl	800a76c <dir_next>
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b090:	7bfb      	ldrb	r3, [r7, #15]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <load_xdir+0x7e>
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	e077      	b.n	800b18a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	f7fe fc41 	bl	800992c <move_window>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <load_xdir+0x9c>
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	e068      	b.n	800b18a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2bc0      	cmp	r3, #192	; 0xc0
 800b0c0:	d001      	beq.n	800b0c6 <load_xdir+0xaa>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	e061      	b.n	800b18a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f103 0020 	add.w	r0, r3, #32
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	f7fe f9fc 	bl	80094d0 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	3323      	adds	r3, #35	; 0x23
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	332c      	adds	r3, #44	; 0x2c
 800b0e0:	4a2c      	ldr	r2, [pc, #176]	; (800b194 <load_xdir+0x178>)
 800b0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e6:	08db      	lsrs	r3, r3, #3
 800b0e8:	015b      	lsls	r3, r3, #5
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d201      	bcs.n	800b0f4 <load_xdir+0xd8>
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e04a      	b.n	800b18a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800b0f4:	2340      	movs	r3, #64	; 0x40
 800b0f6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7ff fb36 	bl	800a76c <dir_next>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <load_xdir+0xf2>
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	e03d      	b.n	800b18a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f7fe fc07 	bl	800992c <move_window>
 800b11e:	4603      	mov	r3, r0
 800b120:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <load_xdir+0x110>
 800b128:	7bfb      	ldrb	r3, [r7, #15]
 800b12a:	e02e      	b.n	800b18a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2bc1      	cmp	r3, #193	; 0xc1
 800b134:	d001      	beq.n	800b13a <load_xdir+0x11e>
 800b136:	2302      	movs	r3, #2
 800b138:	e027      	b.n	800b18a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b140:	d208      	bcs.n	800b154 <load_xdir+0x138>
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	18d0      	adds	r0, r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b14c:	2220      	movs	r2, #32
 800b14e:	4619      	mov	r1, r3
 800b150:	f7fe f9be 	bl	80094d0 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	3320      	adds	r3, #32
 800b158:	617b      	str	r3, [r7, #20]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d3ca      	bcc.n	800b0f8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b168:	d80e      	bhi.n	800b188 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800b16a:	6938      	ldr	r0, [r7, #16]
 800b16c:	f7ff fe6d 	bl	800ae4a <xdir_sum>
 800b170:	4603      	mov	r3, r0
 800b172:	461c      	mov	r4, r3
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	3302      	adds	r3, #2
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fd ffe3 	bl	8009144 <ld_word>
 800b17e:	4603      	mov	r3, r0
 800b180:	429c      	cmp	r4, r3
 800b182:	d001      	beq.n	800b188 <load_xdir+0x16c>
 800b184:	2302      	movs	r3, #2
 800b186:	e000      	b.n	800b18a <load_xdir+0x16e>
	}
	return FR_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd90      	pop	{r4, r7, pc}
 800b192:	bf00      	nop
 800b194:	88888889 	.word	0x88888889

0800b198 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800b198:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	6a1a      	ldr	r2, [r3, #32]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	469b      	mov	fp, r3
 800b1c4:	f04f 0c00 	mov.w	ip, #0
 800b1c8:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800b1cc:	f04f 0200 	mov.w	r2, #0
 800b1d0:	ea0b 0301 	and.w	r3, fp, r1
 800b1d4:	ea0c 0402 	and.w	r4, ip, r2
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff fa29 	bl	800a644 <dir_sdi>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d104      	bne.n	800b206 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f7ff ff0d 	bl	800b01c <load_xdir>
 800b202:	4603      	mov	r3, r0
 800b204:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800b206:	7bfb      	ldrb	r3, [r7, #15]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b212 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800b212:	b590      	push	{r4, r7, lr}
 800b214:	b087      	sub	sp, #28
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	695b      	ldr	r3, [r3, #20]
 800b220:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	1c9c      	adds	r4, r3, #2
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7ff fe0f 	bl	800ae4a <xdir_sum>
 800b22c:	4603      	mov	r3, r0
 800b22e:	4619      	mov	r1, r3
 800b230:	4620      	mov	r0, r4
 800b232:	f7fe f87f 	bl	8009334 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3301      	adds	r3, #1
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	3301      	adds	r3, #1
 800b23e:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7ff f9fc 	bl	800a644 <dir_sdi>
 800b24c:	4603      	mov	r3, r0
 800b24e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b250:	e026      	b.n	800b2a0 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25a:	4619      	mov	r1, r3
 800b25c:	4610      	mov	r0, r2
 800b25e:	f7fe fb65 	bl	800992c <move_window>
 800b262:	4603      	mov	r3, r0
 800b264:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d11d      	bne.n	800b2a8 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b270:	2220      	movs	r2, #32
 800b272:	68f9      	ldr	r1, [r7, #12]
 800b274:	4618      	mov	r0, r3
 800b276:	f7fe f92b 	bl	80094d0 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2201      	movs	r2, #1
 800b280:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	3b01      	subs	r3, #1
 800b286:	613b      	str	r3, [r7, #16]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00e      	beq.n	800b2ac <store_xdir+0x9a>
		dirb += SZDIRE;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3320      	adds	r3, #32
 800b292:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800b294:	2100      	movs	r1, #0
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff fa68 	bl	800a76c <dir_next>
 800b29c:	4603      	mov	r3, r0
 800b29e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d0d5      	beq.n	800b252 <store_xdir+0x40>
 800b2a6:	e002      	b.n	800b2ae <store_xdir+0x9c>
		if (res != FR_OK) break;
 800b2a8:	bf00      	nop
 800b2aa:	e000      	b.n	800b2ae <store_xdir+0x9c>
		if (--nent == 0) break;
 800b2ac:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <store_xdir+0xa8>
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d101      	bne.n	800b2be <store_xdir+0xac>
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	e000      	b.n	800b2c0 <store_xdir+0xae>
 800b2be:	2302      	movs	r3, #2
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	371c      	adds	r7, #28
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd90      	pop	{r4, r7, pc}

0800b2c8 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800b2c8:	b590      	push	{r4, r7, lr}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800b2d2:	2240      	movs	r2, #64	; 0x40
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7fe f91b 	bl	8009512 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2285      	movs	r2, #133	; 0x85
 800b2e0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3320      	adds	r3, #32
 800b2e6:	22c0      	movs	r2, #192	; 0xc0
 800b2e8:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	72bb      	strb	r3, [r7, #10]
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	72fb      	strb	r3, [r7, #11]
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	813b      	strh	r3, [r7, #8]
 800b2f6:	2340      	movs	r3, #64	; 0x40
 800b2f8:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	60fa      	str	r2, [r7, #12]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	4413      	add	r3, r2
 800b304:	22c1      	movs	r2, #193	; 0xc1
 800b306:	701a      	strb	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	60fa      	str	r2, [r7, #12]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	4413      	add	r3, r2
 800b312:	2200      	movs	r2, #0
 800b314:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800b316:	893b      	ldrh	r3, [r7, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00b      	beq.n	800b334 <create_xdir+0x6c>
 800b31c:	7abb      	ldrb	r3, [r7, #10]
 800b31e:	005b      	lsls	r3, r3, #1
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	4413      	add	r3, r2
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	813b      	strh	r3, [r7, #8]
 800b328:	893b      	ldrh	r3, [r7, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <create_xdir+0x6c>
 800b32e:	7abb      	ldrb	r3, [r7, #10]
 800b330:	3301      	adds	r3, #1
 800b332:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	4413      	add	r3, r2
 800b33a:	893a      	ldrh	r2, [r7, #8]
 800b33c:	4611      	mov	r1, r2
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fd fff8 	bl	8009334 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3302      	adds	r3, #2
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f003 031f 	and.w	r3, r3, #31
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1e0      	bne.n	800b316 <create_xdir+0x4e>
		nb++;
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	3301      	adds	r3, #1
 800b358:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800b35a:	7abb      	ldrb	r3, [r7, #10]
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	4413      	add	r3, r2
 800b362:	881b      	ldrh	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1c8      	bne.n	800b2fa <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3323      	adds	r3, #35	; 0x23
 800b36c:	7aba      	ldrb	r2, [r7, #10]
 800b36e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	3301      	adds	r3, #1
 800b374:	7afa      	ldrb	r2, [r7, #11]
 800b376:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800b37e:	6838      	ldr	r0, [r7, #0]
 800b380:	f7ff fd96 	bl	800aeb0 <xname_sum>
 800b384:	4603      	mov	r3, r0
 800b386:	4619      	mov	r1, r3
 800b388:	4620      	mov	r0, r4
 800b38a:	f7fd ffd3 	bl	8009334 <st_word>
}
 800b38e:	bf00      	nop
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	bd90      	pop	{r4, r7, pc}

0800b396 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b086      	sub	sp, #24
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b3a0:	2304      	movs	r3, #4
 800b3a2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b3aa:	23ff      	movs	r3, #255	; 0xff
 800b3ac:	757b      	strb	r3, [r7, #21]
 800b3ae:	23ff      	movs	r3, #255	; 0xff
 800b3b0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b3b2:	e09f      	b.n	800b4f4 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6938      	ldr	r0, [r7, #16]
 800b3bc:	f7fe fab6 	bl	800992c <move_window>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f040 809a 	bne.w	800b500 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b3d4:	7dbb      	ldrb	r3, [r7, #22]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d102      	bne.n	800b3e0 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b3da:	2304      	movs	r3, #4
 800b3dc:	75fb      	strb	r3, [r7, #23]
 800b3de:	e096      	b.n	800b50e <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d118      	bne.n	800b41a <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800b3e8:	7dbb      	ldrb	r3, [r7, #22]
 800b3ea:	2b85      	cmp	r3, #133	; 0x85
 800b3ec:	d179      	bne.n	800b4e2 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7ff fe10 	bl	800b01c <load_xdir>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d17e      	bne.n	800b504 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	3304      	adds	r3, #4
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b412:	b2da      	uxtb	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	719a      	strb	r2, [r3, #6]
					}
					break;
 800b418:	e074      	b.n	800b504 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b41e:	330b      	adds	r3, #11
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b426:	73fb      	strb	r3, [r7, #15]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	7bfa      	ldrb	r2, [r7, #15]
 800b42c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b42e:	7dbb      	ldrb	r3, [r7, #22]
 800b430:	2be5      	cmp	r3, #229	; 0xe5
 800b432:	d00e      	beq.n	800b452 <dir_read+0xbc>
 800b434:	7dbb      	ldrb	r3, [r7, #22]
 800b436:	2b2e      	cmp	r3, #46	; 0x2e
 800b438:	d00b      	beq.n	800b452 <dir_read+0xbc>
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	f023 0320 	bic.w	r3, r3, #32
 800b440:	2b08      	cmp	r3, #8
 800b442:	bf0c      	ite	eq
 800b444:	2301      	moveq	r3, #1
 800b446:	2300      	movne	r3, #0
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	461a      	mov	r2, r3
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	4293      	cmp	r3, r2
 800b450:	d002      	beq.n	800b458 <dir_read+0xc2>
				ord = 0xFF;
 800b452:	23ff      	movs	r3, #255	; 0xff
 800b454:	757b      	strb	r3, [r7, #21]
 800b456:	e044      	b.n	800b4e2 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b458:	7bfb      	ldrb	r3, [r7, #15]
 800b45a:	2b0f      	cmp	r3, #15
 800b45c:	d12f      	bne.n	800b4be <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b45e:	7dbb      	ldrb	r3, [r7, #22]
 800b460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00d      	beq.n	800b484 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46c:	7b5b      	ldrb	r3, [r3, #13]
 800b46e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b470:	7dbb      	ldrb	r3, [r7, #22]
 800b472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b476:	75bb      	strb	r3, [r7, #22]
 800b478:	7dbb      	ldrb	r3, [r7, #22]
 800b47a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b484:	7dba      	ldrb	r2, [r7, #22]
 800b486:	7d7b      	ldrb	r3, [r7, #21]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d115      	bne.n	800b4b8 <dir_read+0x122>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b490:	330d      	adds	r3, #13
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	7d3a      	ldrb	r2, [r7, #20]
 800b496:	429a      	cmp	r2, r3
 800b498:	d10e      	bne.n	800b4b8 <dir_read+0x122>
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	691a      	ldr	r2, [r3, #16]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	f7ff fb53 	bl	800ab50 <pick_lfn>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <dir_read+0x122>
 800b4b0:	7d7b      	ldrb	r3, [r7, #21]
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	e000      	b.n	800b4ba <dir_read+0x124>
 800b4b8:	23ff      	movs	r3, #255	; 0xff
 800b4ba:	757b      	strb	r3, [r7, #21]
 800b4bc:	e011      	b.n	800b4e2 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b4be:	7d7b      	ldrb	r3, [r7, #21]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d109      	bne.n	800b4d8 <dir_read+0x142>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff fc9d 	bl	800ae08 <sum_sfn>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	7d3b      	ldrb	r3, [r7, #20]
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d017      	beq.n	800b508 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f04f 32ff 	mov.w	r2, #4294967295
 800b4de:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800b4e0:	e012      	b.n	800b508 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7ff f941 	bl	800a76c <dir_next>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b4ee:	7dfb      	ldrb	r3, [r7, #23]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10b      	bne.n	800b50c <dir_read+0x176>
	while (dp->sect) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f47f af5b 	bne.w	800b3b4 <dir_read+0x1e>
 800b4fe:	e006      	b.n	800b50e <dir_read+0x178>
		if (res != FR_OK) break;
 800b500:	bf00      	nop
 800b502:	e004      	b.n	800b50e <dir_read+0x178>
					break;
 800b504:	bf00      	nop
 800b506:	e002      	b.n	800b50e <dir_read+0x178>
					break;
 800b508:	bf00      	nop
 800b50a:	e000      	b.n	800b50e <dir_read+0x178>
		if (res != FR_OK) break;
 800b50c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <dir_read+0x184>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b524:	b590      	push	{r4, r7, lr}
 800b526:	b089      	sub	sp, #36	; 0x24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b532:	2100      	movs	r1, #0
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7ff f885 	bl	800a644 <dir_sdi>
 800b53a:	4603      	mov	r3, r0
 800b53c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800b53e:	7ffb      	ldrb	r3, [r7, #31]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <dir_find+0x24>
 800b544:	7ffb      	ldrb	r3, [r7, #31]
 800b546:	e112      	b.n	800b76e <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d164      	bne.n	800b61a <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	4618      	mov	r0, r3
 800b556:	f7ff fcab 	bl	800aeb0 <xname_sum>
 800b55a:	4603      	mov	r3, r0
 800b55c:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b55e:	e04f      	b.n	800b600 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	695b      	ldr	r3, [r3, #20]
 800b564:	3324      	adds	r3, #36	; 0x24
 800b566:	4618      	mov	r0, r3
 800b568:	f7fd fdec 	bl	8009144 <ld_word>
 800b56c:	4603      	mov	r3, r0
 800b56e:	461a      	mov	r2, r3
 800b570:	893b      	ldrh	r3, [r7, #8]
 800b572:	4293      	cmp	r3, r2
 800b574:	d000      	beq.n	800b578 <dir_find+0x54>
 800b576:	e043      	b.n	800b600 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	695b      	ldr	r3, [r3, #20]
 800b57c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b580:	76fb      	strb	r3, [r7, #27]
 800b582:	2340      	movs	r3, #64	; 0x40
 800b584:	617b      	str	r3, [r7, #20]
 800b586:	2300      	movs	r3, #0
 800b588:	613b      	str	r3, [r7, #16]
 800b58a:	e029      	b.n	800b5e0 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	f003 031f 	and.w	r3, r3, #31
 800b592:	2b00      	cmp	r3, #0
 800b594:	d102      	bne.n	800b59c <dir_find+0x78>
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	3302      	adds	r3, #2
 800b59a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	695a      	ldr	r2, [r3, #20]
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fd fdcd 	bl	8009144 <ld_word>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fd fca1 	bl	8008ef4 <ff_wtoupper>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	461c      	mov	r4, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	691a      	ldr	r2, [r3, #16]
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	005b      	lsls	r3, r3, #1
 800b5be:	4413      	add	r3, r2
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fd fc96 	bl	8008ef4 <ff_wtoupper>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	d10c      	bne.n	800b5e8 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b5ce:	7efb      	ldrb	r3, [r7, #27]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	76fb      	strb	r3, [r7, #27]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	613b      	str	r3, [r7, #16]
 800b5e0:	7efb      	ldrb	r3, [r7, #27]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1d2      	bne.n	800b58c <dir_find+0x68>
 800b5e6:	e000      	b.n	800b5ea <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b5e8:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b5ea:	7efb      	ldrb	r3, [r7, #27]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d107      	bne.n	800b600 <dir_find+0xdc>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	691a      	ldr	r2, [r3, #16]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	4413      	add	r3, r2
 800b5fa:	881b      	ldrh	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d009      	beq.n	800b614 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b600:	2100      	movs	r1, #0
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7ff fec7 	bl	800b396 <dir_read>
 800b608:	4603      	mov	r3, r0
 800b60a:	77fb      	strb	r3, [r7, #31]
 800b60c:	7ffb      	ldrb	r3, [r7, #31]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d0a6      	beq.n	800b560 <dir_find+0x3c>
 800b612:	e000      	b.n	800b616 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b614:	bf00      	nop
		}
		return res;
 800b616:	7ffb      	ldrb	r3, [r7, #31]
 800b618:	e0a9      	b.n	800b76e <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b61a:	23ff      	movs	r3, #255	; 0xff
 800b61c:	773b      	strb	r3, [r7, #28]
 800b61e:	7f3b      	ldrb	r3, [r7, #28]
 800b620:	777b      	strb	r3, [r7, #29]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f04f 32ff 	mov.w	r2, #4294967295
 800b628:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62e:	4619      	mov	r1, r3
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7fe f97b 	bl	800992c <move_window>
 800b636:	4603      	mov	r3, r0
 800b638:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800b63a:	7ffb      	ldrb	r3, [r7, #31]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f040 8090 	bne.w	800b762 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b64a:	7fbb      	ldrb	r3, [r7, #30]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d102      	bne.n	800b656 <dir_find+0x132>
 800b650:	2304      	movs	r3, #4
 800b652:	77fb      	strb	r3, [r7, #31]
 800b654:	e08a      	b.n	800b76c <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b65a:	330b      	adds	r3, #11
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b662:	72fb      	strb	r3, [r7, #11]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	7afa      	ldrb	r2, [r7, #11]
 800b668:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b66a:	7fbb      	ldrb	r3, [r7, #30]
 800b66c:	2be5      	cmp	r3, #229	; 0xe5
 800b66e:	d007      	beq.n	800b680 <dir_find+0x15c>
 800b670:	7afb      	ldrb	r3, [r7, #11]
 800b672:	f003 0308 	and.w	r3, r3, #8
 800b676:	2b00      	cmp	r3, #0
 800b678:	d009      	beq.n	800b68e <dir_find+0x16a>
 800b67a:	7afb      	ldrb	r3, [r7, #11]
 800b67c:	2b0f      	cmp	r3, #15
 800b67e:	d006      	beq.n	800b68e <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b680:	23ff      	movs	r3, #255	; 0xff
 800b682:	777b      	strb	r3, [r7, #29]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f04f 32ff 	mov.w	r2, #4294967295
 800b68a:	64da      	str	r2, [r3, #76]	; 0x4c
 800b68c:	e05e      	b.n	800b74c <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b68e:	7afb      	ldrb	r3, [r7, #11]
 800b690:	2b0f      	cmp	r3, #15
 800b692:	d136      	bne.n	800b702 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d154      	bne.n	800b74c <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b6a2:	7fbb      	ldrb	r3, [r7, #30]
 800b6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00d      	beq.n	800b6c8 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b0:	7b5b      	ldrb	r3, [r3, #13]
 800b6b2:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b6b4:	7fbb      	ldrb	r3, [r7, #30]
 800b6b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ba:	77bb      	strb	r3, [r7, #30]
 800b6bc:	7fbb      	ldrb	r3, [r7, #30]
 800b6be:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b6c8:	7fba      	ldrb	r2, [r7, #30]
 800b6ca:	7f7b      	ldrb	r3, [r7, #29]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d115      	bne.n	800b6fc <dir_find+0x1d8>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d4:	330d      	adds	r3, #13
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	7f3a      	ldrb	r2, [r7, #28]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d10e      	bne.n	800b6fc <dir_find+0x1d8>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	691a      	ldr	r2, [r3, #16]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	f7ff f9c1 	bl	800aa70 <cmp_lfn>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d003      	beq.n	800b6fc <dir_find+0x1d8>
 800b6f4:	7f7b      	ldrb	r3, [r7, #29]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	e000      	b.n	800b6fe <dir_find+0x1da>
 800b6fc:	23ff      	movs	r3, #255	; 0xff
 800b6fe:	777b      	strb	r3, [r7, #29]
 800b700:	e024      	b.n	800b74c <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b702:	7f7b      	ldrb	r3, [r7, #29]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d109      	bne.n	800b71c <dir_find+0x1f8>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff fb7b 	bl	800ae08 <sum_sfn>
 800b712:	4603      	mov	r3, r0
 800b714:	461a      	mov	r2, r3
 800b716:	7f3b      	ldrb	r3, [r7, #28]
 800b718:	4293      	cmp	r3, r2
 800b71a:	d024      	beq.n	800b766 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b722:	f003 0301 	and.w	r3, r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <dir_find+0x21c>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3340      	adds	r3, #64	; 0x40
 800b732:	220b      	movs	r2, #11
 800b734:	4619      	mov	r1, r3
 800b736:	f7fd ff06 	bl	8009546 <mem_cmp>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d014      	beq.n	800b76a <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b740:	23ff      	movs	r3, #255	; 0xff
 800b742:	777b      	strb	r3, [r7, #29]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f04f 32ff 	mov.w	r2, #4294967295
 800b74a:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b74c:	2100      	movs	r1, #0
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff f80c 	bl	800a76c <dir_next>
 800b754:	4603      	mov	r3, r0
 800b756:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800b758:	7ffb      	ldrb	r3, [r7, #31]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f43f af65 	beq.w	800b62a <dir_find+0x106>
 800b760:	e004      	b.n	800b76c <dir_find+0x248>
		if (res != FR_OK) break;
 800b762:	bf00      	nop
 800b764:	e002      	b.n	800b76c <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b766:	bf00      	nop
 800b768:	e000      	b.n	800b76c <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b76a:	bf00      	nop

	return res;
 800b76c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3724      	adds	r7, #36	; 0x24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd90      	pop	{r4, r7, pc}
	...

0800b778 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b778:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b77c:	b0a0      	sub	sp, #128	; 0x80
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b78e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <dir_register+0x22>
 800b796:	2306      	movs	r3, #6
 800b798:	e198      	b.n	800bacc <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b79a:	2300      	movs	r3, #0
 800b79c:	677b      	str	r3, [r7, #116]	; 0x74
 800b79e:	e002      	b.n	800b7a6 <dir_register+0x2e>
 800b7a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	677b      	str	r3, [r7, #116]	; 0x74
 800b7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a8:	691a      	ldr	r2, [r3, #16]
 800b7aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	4413      	add	r3, r2
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1f4      	bne.n	800b7a0 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b7b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	f040 80a9 	bne.w	800b912 <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800b7c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7c2:	330e      	adds	r3, #14
 800b7c4:	4aa7      	ldr	r2, [pc, #668]	; (800ba64 <dir_register+0x2ec>)
 800b7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ca:	08db      	lsrs	r3, r3, #3
 800b7cc:	3302      	adds	r3, #2
 800b7ce:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800b7d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff f8b0 	bl	800a938 <dir_alloc>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800b7de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <dir_register+0x74>
 800b7e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b7ea:	e16f      	b.n	800bacc <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b7f2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800b7f6:	440b      	add	r3, r1
 800b7f8:	015b      	lsls	r3, r3, #5
 800b7fa:	1ad2      	subs	r2, r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d07a      	beq.n	800b8fe <dir_register+0x186>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	79db      	ldrb	r3, [r3, #7]
 800b80c:	f003 0304 	and.w	r3, r3, #4
 800b810:	2b00      	cmp	r3, #0
 800b812:	d074      	beq.n	800b8fe <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800b81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b81c:	895b      	ldrh	r3, [r3, #10]
 800b81e:	4618      	mov	r0, r3
 800b820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b822:	899b      	ldrh	r3, [r3, #12]
 800b824:	fb03 f300 	mul.w	r3, r3, r0
 800b828:	469b      	mov	fp, r3
 800b82a:	f04f 0c00 	mov.w	ip, #0
 800b82e:	eb1b 0301 	adds.w	r3, fp, r1
 800b832:	eb4c 0402 	adc.w	r4, ip, r2
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fca4 	bl	800a18c <fill_first_frag>
 800b844:	4603      	mov	r3, r0
 800b846:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b84a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <dir_register+0xe0>
 800b852:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b856:	e139      	b.n	800bacc <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85e:	f04f 32ff 	mov.w	r2, #4294967295
 800b862:	4619      	mov	r1, r3
 800b864:	f7fe fcc1 	bl	800a1ea <fill_last_frag>
 800b868:	4603      	mov	r3, r0
 800b86a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b86e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <dir_register+0x104>
 800b876:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b87a:	e127      	b.n	800bacc <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	f107 0308 	add.w	r3, r7, #8
 800b882:	4611      	mov	r1, r2
 800b884:	4618      	mov	r0, r3
 800b886:	f7ff fc87 	bl	800b198 <load_obj_dir>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b890:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <dir_register+0x126>
 800b898:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b89c:	e116      	b.n	800bacc <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	4623      	mov	r3, r4
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	f7fd fd86 	bl	80093c2 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b8b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4623      	mov	r3, r4
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	f7fd fd7a 	bl	80093c2 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	79da      	ldrb	r2, [r3, #7]
 800b8d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	3321      	adds	r3, #33	; 0x21
 800b8d8:	f042 0201 	orr.w	r2, r2, #1
 800b8dc:	b2d2      	uxtb	r2, r2
 800b8de:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b8e0:	f107 0308 	add.w	r3, r7, #8
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fc94 	bl	800b212 <store_xdir>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b8f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <dir_register+0x186>
 800b8f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b8fc:	e0e6      	b.n	800bacc <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b900:	695a      	ldr	r2, [r3, #20]
 800b902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	4619      	mov	r1, r3
 800b908:	4610      	mov	r0, r2
 800b90a:	f7ff fcdd 	bl	800b2c8 <create_xdir>
		return FR_OK;
 800b90e:	2300      	movs	r3, #0
 800b910:	e0dc      	b.n	800bacc <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800b918:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b91c:	220c      	movs	r2, #12
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fd fdd6 	bl	80094d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b924:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b928:	f003 0301 	and.w	r3, r3, #1
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d033      	beq.n	800b998 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2240      	movs	r2, #64	; 0x40
 800b934:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800b938:	2301      	movs	r3, #1
 800b93a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b93c:	e016      	b.n	800b96c <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b946:	691a      	ldr	r2, [r3, #16]
 800b948:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800b94c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b94e:	f7ff f9cb 	bl	800ace8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7ff fde6 	bl	800b524 <dir_find>
 800b958:	4603      	mov	r3, r0
 800b95a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800b95e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800b966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b968:	3301      	adds	r3, #1
 800b96a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b96c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b96e:	2b63      	cmp	r3, #99	; 0x63
 800b970:	d9e5      	bls.n	800b93e <dir_register+0x1c6>
 800b972:	e000      	b.n	800b976 <dir_register+0x1fe>
			if (res != FR_OK) break;
 800b974:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b978:	2b64      	cmp	r3, #100	; 0x64
 800b97a:	d101      	bne.n	800b980 <dir_register+0x208>
 800b97c:	2307      	movs	r3, #7
 800b97e:	e0a5      	b.n	800bacc <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b980:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b984:	2b04      	cmp	r3, #4
 800b986:	d002      	beq.n	800b98e <dir_register+0x216>
 800b988:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b98c:	e09e      	b.n	800bacc <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b98e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b998:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b99c:	f003 0302 	and.w	r3, r3, #2
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d007      	beq.n	800b9b4 <dir_register+0x23c>
 800b9a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9a6:	330c      	adds	r3, #12
 800b9a8:	4a2f      	ldr	r2, [pc, #188]	; (800ba68 <dir_register+0x2f0>)
 800b9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ae:	089b      	lsrs	r3, r3, #2
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	e000      	b.n	800b9b6 <dir_register+0x23e>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b9b8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7fe ffbc 	bl	800a938 <dir_alloc>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b9c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d14f      	bne.n	800ba6e <dir_register+0x2f6>
 800b9ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	673b      	str	r3, [r7, #112]	; 0x70
 800b9d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d049      	beq.n	800ba6e <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9e0:	015b      	lsls	r3, r3, #5
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7fe fe2c 	bl	800a644 <dir_sdi>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800b9f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d139      	bne.n	800ba6e <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	3340      	adds	r3, #64	; 0x40
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7ff fa02 	bl	800ae08 <sum_sfn>
 800ba04:	4603      	mov	r3, r0
 800ba06:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ba12:	f7fd ff8b 	bl	800992c <move_window>
 800ba16:	4603      	mov	r3, r0
 800ba18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800ba1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d123      	bne.n	800ba6c <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ba24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba26:	6918      	ldr	r0, [r3, #16]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ba2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ba34:	f7ff f8f0 	bl	800ac18 <put_lfn>
				fs->wflag = 1;
 800ba38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ba3e:	2100      	movs	r1, #0
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f7fe fe93 	bl	800a76c <dir_next>
 800ba46:	4603      	mov	r3, r0
 800ba48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800ba4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10c      	bne.n	800ba6e <dir_register+0x2f6>
 800ba54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba56:	3b01      	subs	r3, #1
 800ba58:	673b      	str	r3, [r7, #112]	; 0x70
 800ba5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1d4      	bne.n	800ba0a <dir_register+0x292>
 800ba60:	e005      	b.n	800ba6e <dir_register+0x2f6>
 800ba62:	bf00      	nop
 800ba64:	88888889 	.word	0x88888889
 800ba68:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800ba6c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ba6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d128      	bne.n	800bac8 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ba7e:	f7fd ff55 	bl	800992c <move_window>
 800ba82:	4603      	mov	r3, r0
 800ba84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ba88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d11b      	bne.n	800bac8 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba94:	2220      	movs	r2, #32
 800ba96:	2100      	movs	r1, #0
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fd fd3a 	bl	8009512 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3340      	adds	r3, #64	; 0x40
 800baa6:	220b      	movs	r2, #11
 800baa8:	4619      	mov	r1, r3
 800baaa:	f7fd fd11 	bl	80094d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab8:	330c      	adds	r3, #12
 800baba:	f002 0218 	and.w	r2, r2, #24
 800babe:	b2d2      	uxtb	r2, r2
 800bac0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bac4:	2201      	movs	r2, #1
 800bac6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bac8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3780      	adds	r7, #128	; 0x80
 800bad0:	46bd      	mov	sp, r7
 800bad2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bad6:	bf00      	nop

0800bad8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bad8:	b590      	push	{r4, r7, lr}
 800bada:	b089      	sub	sp, #36	; 0x24
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	2200      	movs	r2, #0
 800baec:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f000 80d7 	beq.w	800bca6 <get_fileinfo+0x1ce>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b04      	cmp	r3, #4
 800bafe:	d106      	bne.n	800bb0e <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	6839      	ldr	r1, [r7, #0]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7ff fa06 	bl	800af18 <get_xdir_info>
		return;
 800bb0c:	e0cc      	b.n	800bca8 <get_fileinfo+0x1d0>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb16:	d032      	beq.n	800bb7e <get_fileinfo+0xa6>
			i = j = 0;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	61bb      	str	r3, [r7, #24]
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bb20:	e01b      	b.n	800bb5a <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800bb22:	89fb      	ldrh	r3, [r7, #14]
 800bb24:	2100      	movs	r1, #0
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fd f9a8 	bl	8008e7c <ff_convert>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800bb30:	89fb      	ldrh	r3, [r7, #14]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d102      	bne.n	800bb3c <get_fileinfo+0x64>
 800bb36:	2300      	movs	r3, #0
 800bb38:	61fb      	str	r3, [r7, #28]
 800bb3a:	e01a      	b.n	800bb72 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	2bfe      	cmp	r3, #254	; 0xfe
 800bb40:	d902      	bls.n	800bb48 <get_fileinfo+0x70>
 800bb42:	2300      	movs	r3, #0
 800bb44:	61fb      	str	r3, [r7, #28]
 800bb46:	e014      	b.n	800bb72 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	61fa      	str	r2, [r7, #28]
 800bb4e:	89fa      	ldrh	r2, [r7, #14]
 800bb50:	b2d1      	uxtb	r1, r2
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	4413      	add	r3, r2
 800bb56:	460a      	mov	r2, r1
 800bb58:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	691a      	ldr	r2, [r3, #16]
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	1c59      	adds	r1, r3, #1
 800bb62:	61b9      	str	r1, [r7, #24]
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	4413      	add	r3, r2
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	81fb      	strh	r3, [r7, #14]
 800bb6c:	89fb      	ldrh	r3, [r7, #14]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1d7      	bne.n	800bb22 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	4413      	add	r3, r2
 800bb78:	331a      	adds	r3, #26
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	61bb      	str	r3, [r7, #24]
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	331a      	adds	r3, #26
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800bb92:	e04c      	b.n	800bc2e <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	1c59      	adds	r1, r3, #1
 800bb9c:	61f9      	str	r1, [r7, #28]
 800bb9e:	4413      	add	r3, r2
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bba4:	7dfb      	ldrb	r3, [r7, #23]
 800bba6:	2b20      	cmp	r3, #32
 800bba8:	d100      	bne.n	800bbac <get_fileinfo+0xd4>
 800bbaa:	e040      	b.n	800bc2e <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
 800bbae:	2b05      	cmp	r3, #5
 800bbb0:	d101      	bne.n	800bbb6 <get_fileinfo+0xde>
 800bbb2:	23e5      	movs	r3, #229	; 0xe5
 800bbb4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	2b09      	cmp	r3, #9
 800bbba:	d10f      	bne.n	800bbdc <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800bbbc:	89bb      	ldrh	r3, [r7, #12]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d105      	bne.n	800bbce <get_fileinfo+0xf6>
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	331a      	adds	r3, #26
 800bbca:	222e      	movs	r2, #46	; 0x2e
 800bbcc:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	61ba      	str	r2, [r7, #24]
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	222e      	movs	r2, #46	; 0x2e
 800bbda:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	330d      	adds	r3, #13
 800bbe4:	7dfa      	ldrb	r2, [r7, #23]
 800bbe6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800bbe8:	89bb      	ldrh	r3, [r7, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d11c      	bne.n	800bc28 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	2b40      	cmp	r3, #64	; 0x40
 800bbf2:	d913      	bls.n	800bc1c <get_fileinfo+0x144>
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
 800bbf6:	2b5a      	cmp	r3, #90	; 0x5a
 800bbf8:	d810      	bhi.n	800bc1c <get_fileinfo+0x144>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfe:	330c      	adds	r3, #12
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	2b08      	cmp	r3, #8
 800bc08:	d901      	bls.n	800bc0e <get_fileinfo+0x136>
 800bc0a:	2310      	movs	r3, #16
 800bc0c:	e000      	b.n	800bc10 <get_fileinfo+0x138>
 800bc0e:	2308      	movs	r3, #8
 800bc10:	4013      	ands	r3, r2
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d002      	beq.n	800bc1c <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800bc16:	7dfb      	ldrb	r3, [r7, #23]
 800bc18:	3320      	adds	r3, #32
 800bc1a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	4413      	add	r3, r2
 800bc22:	331a      	adds	r3, #26
 800bc24:	7dfa      	ldrb	r2, [r7, #23]
 800bc26:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	2b0a      	cmp	r3, #10
 800bc32:	d9af      	bls.n	800bb94 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800bc34:	89bb      	ldrh	r3, [r7, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10d      	bne.n	800bc56 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	4413      	add	r3, r2
 800bc40:	331a      	adds	r3, #26
 800bc42:	2200      	movs	r2, #0
 800bc44:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc4a:	330c      	adds	r3, #12
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <get_fileinfo+0x17e>
 800bc52:	2300      	movs	r3, #0
 800bc54:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	330d      	adds	r3, #13
 800bc5e:	2200      	movs	r2, #0
 800bc60:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc66:	7ada      	ldrb	r2, [r3, #11]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc70:	331c      	adds	r3, #28
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fd fa7e 	bl	8009174 <ld_dword>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f04f 0400 	mov.w	r4, #0
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	e9c2 3400 	strd	r3, r4, [r2]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc88:	3316      	adds	r3, #22
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fd fa72 	bl	8009174 <ld_dword>
 800bc90:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	815a      	strh	r2, [r3, #10]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	0c1b      	lsrs	r3, r3, #16
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	811a      	strh	r2, [r3, #8]
 800bca4:	e000      	b.n	800bca8 <get_fileinfo+0x1d0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bca6:	bf00      	nop
}
 800bca8:	3724      	adds	r7, #36	; 0x24
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd90      	pop	{r4, r7, pc}
	...

0800bcb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08a      	sub	sp, #40	; 0x28
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	613b      	str	r3, [r7, #16]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	61ba      	str	r2, [r7, #24]
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	4413      	add	r3, r2
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bcde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bce0:	2b1f      	cmp	r3, #31
 800bce2:	d940      	bls.n	800bd66 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bce6:	2b2f      	cmp	r3, #47	; 0x2f
 800bce8:	d006      	beq.n	800bcf8 <create_name+0x48>
 800bcea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcec:	2b5c      	cmp	r3, #92	; 0x5c
 800bcee:	d110      	bne.n	800bd12 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bcf0:	e002      	b.n	800bcf8 <create_name+0x48>
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	61bb      	str	r3, [r7, #24]
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2b2f      	cmp	r3, #47	; 0x2f
 800bd02:	d0f6      	beq.n	800bcf2 <create_name+0x42>
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	4413      	add	r3, r2
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	2b5c      	cmp	r3, #92	; 0x5c
 800bd0e:	d0f0      	beq.n	800bcf2 <create_name+0x42>
			break;
 800bd10:	e02a      	b.n	800bd68 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	2bfe      	cmp	r3, #254	; 0xfe
 800bd16:	d901      	bls.n	800bd1c <create_name+0x6c>
 800bd18:	2306      	movs	r3, #6
 800bd1a:	e177      	b.n	800c00c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bd1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bd22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd24:	2101      	movs	r1, #1
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fd f8a8 	bl	8008e7c <ff_convert>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <create_name+0x8a>
 800bd36:	2306      	movs	r3, #6
 800bd38:	e168      	b.n	800c00c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bd3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd3c:	2b7f      	cmp	r3, #127	; 0x7f
 800bd3e:	d809      	bhi.n	800bd54 <create_name+0xa4>
 800bd40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd42:	4619      	mov	r1, r3
 800bd44:	48b3      	ldr	r0, [pc, #716]	; (800c014 <create_name+0x364>)
 800bd46:	f7fd fc25 	bl	8009594 <chk_chr>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <create_name+0xa4>
 800bd50:	2306      	movs	r3, #6
 800bd52:	e15b      	b.n	800c00c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	1c5a      	adds	r2, r3, #1
 800bd58:	617a      	str	r2, [r7, #20]
 800bd5a:	005b      	lsls	r3, r3, #1
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd62:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bd64:	e7b4      	b.n	800bcd0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bd66:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	441a      	add	r2, r3
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bd72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd74:	2b1f      	cmp	r3, #31
 800bd76:	d801      	bhi.n	800bd7c <create_name+0xcc>
 800bd78:	2304      	movs	r3, #4
 800bd7a:	e000      	b.n	800bd7e <create_name+0xce>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bd82:	e011      	b.n	800bda8 <create_name+0xf8>
		w = lfn[di - 1];
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bd8a:	4413      	add	r3, r2
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	4413      	add	r3, r2
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bd96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd98:	2b20      	cmp	r3, #32
 800bd9a:	d002      	beq.n	800bda2 <create_name+0xf2>
 800bd9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd9e:	2b2e      	cmp	r3, #46	; 0x2e
 800bda0:	d106      	bne.n	800bdb0 <create_name+0x100>
		di--;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	3b01      	subs	r3, #1
 800bda6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1ea      	bne.n	800bd84 <create_name+0xd4>
 800bdae:	e000      	b.n	800bdb2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bdb0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	4413      	add	r3, r2
 800bdba:	2200      	movs	r2, #0
 800bdbc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d101      	bne.n	800bdc8 <create_name+0x118>
 800bdc4:	2306      	movs	r3, #6
 800bdc6:	e121      	b.n	800c00c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	3340      	adds	r3, #64	; 0x40
 800bdcc:	220b      	movs	r2, #11
 800bdce:	2120      	movs	r1, #32
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fd fb9e 	bl	8009512 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	61bb      	str	r3, [r7, #24]
 800bdda:	e002      	b.n	800bde2 <create_name+0x132>
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	3301      	adds	r3, #1
 800bde0:	61bb      	str	r3, [r7, #24]
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	005b      	lsls	r3, r3, #1
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	4413      	add	r3, r2
 800bdea:	881b      	ldrh	r3, [r3, #0]
 800bdec:	2b20      	cmp	r3, #32
 800bdee:	d0f5      	beq.n	800bddc <create_name+0x12c>
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	2b2e      	cmp	r3, #46	; 0x2e
 800bdfc:	d0ee      	beq.n	800bddc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d009      	beq.n	800be18 <create_name+0x168>
 800be04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be08:	f043 0303 	orr.w	r3, r3, #3
 800be0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800be10:	e002      	b.n	800be18 <create_name+0x168>
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	3b01      	subs	r3, #1
 800be16:	617b      	str	r3, [r7, #20]
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d009      	beq.n	800be32 <create_name+0x182>
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800be24:	4413      	add	r3, r2
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	4413      	add	r3, r2
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	2b2e      	cmp	r3, #46	; 0x2e
 800be30:	d1ef      	bne.n	800be12 <create_name+0x162>

	i = b = 0; ni = 8;
 800be32:	2300      	movs	r3, #0
 800be34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800be38:	2300      	movs	r3, #0
 800be3a:	623b      	str	r3, [r7, #32]
 800be3c:	2308      	movs	r3, #8
 800be3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	61ba      	str	r2, [r7, #24]
 800be46:	005b      	lsls	r3, r3, #1
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4413      	add	r3, r2
 800be4c:	881b      	ldrh	r3, [r3, #0]
 800be4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800be50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be52:	2b00      	cmp	r3, #0
 800be54:	f000 8090 	beq.w	800bf78 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800be58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be5a:	2b20      	cmp	r3, #32
 800be5c:	d006      	beq.n	800be6c <create_name+0x1bc>
 800be5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be60:	2b2e      	cmp	r3, #46	; 0x2e
 800be62:	d10a      	bne.n	800be7a <create_name+0x1ca>
 800be64:	69ba      	ldr	r2, [r7, #24]
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d006      	beq.n	800be7a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800be6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be70:	f043 0303 	orr.w	r3, r3, #3
 800be74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be78:	e07d      	b.n	800bf76 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800be7a:	6a3a      	ldr	r2, [r7, #32]
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d203      	bcs.n	800be8a <create_name+0x1da>
 800be82:	69ba      	ldr	r2, [r7, #24]
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	429a      	cmp	r2, r3
 800be88:	d123      	bne.n	800bed2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	2b0b      	cmp	r3, #11
 800be8e:	d106      	bne.n	800be9e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800be90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be94:	f043 0303 	orr.w	r3, r3, #3
 800be98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be9c:	e06f      	b.n	800bf7e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800be9e:	69ba      	ldr	r2, [r7, #24]
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d005      	beq.n	800beb2 <create_name+0x202>
 800bea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800beaa:	f043 0303 	orr.w	r3, r3, #3
 800beae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800beb2:	69ba      	ldr	r2, [r7, #24]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d860      	bhi.n	800bf7c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	61bb      	str	r3, [r7, #24]
 800bebe:	2308      	movs	r3, #8
 800bec0:	623b      	str	r3, [r7, #32]
 800bec2:	230b      	movs	r3, #11
 800bec4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bed0:	e051      	b.n	800bf76 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bed4:	2b7f      	cmp	r3, #127	; 0x7f
 800bed6:	d914      	bls.n	800bf02 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beda:	2100      	movs	r1, #0
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fc ffcd 	bl	8008e7c <ff_convert>
 800bee2:	4603      	mov	r3, r0
 800bee4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d004      	beq.n	800bef6 <create_name+0x246>
 800beec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beee:	3b80      	subs	r3, #128	; 0x80
 800bef0:	4a49      	ldr	r2, [pc, #292]	; (800c018 <create_name+0x368>)
 800bef2:	5cd3      	ldrb	r3, [r2, r3]
 800bef4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800befa:	f043 0302 	orr.w	r3, r3, #2
 800befe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bf02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d007      	beq.n	800bf18 <create_name+0x268>
 800bf08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	4843      	ldr	r0, [pc, #268]	; (800c01c <create_name+0x36c>)
 800bf0e:	f7fd fb41 	bl	8009594 <chk_chr>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d008      	beq.n	800bf2a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bf18:	235f      	movs	r3, #95	; 0x5f
 800bf1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf20:	f043 0303 	orr.w	r3, r3, #3
 800bf24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf28:	e01b      	b.n	800bf62 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bf2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf2c:	2b40      	cmp	r3, #64	; 0x40
 800bf2e:	d909      	bls.n	800bf44 <create_name+0x294>
 800bf30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf32:	2b5a      	cmp	r3, #90	; 0x5a
 800bf34:	d806      	bhi.n	800bf44 <create_name+0x294>
					b |= 2;
 800bf36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf3a:	f043 0302 	orr.w	r3, r3, #2
 800bf3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf42:	e00e      	b.n	800bf62 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bf44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf46:	2b60      	cmp	r3, #96	; 0x60
 800bf48:	d90b      	bls.n	800bf62 <create_name+0x2b2>
 800bf4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf4c:	2b7a      	cmp	r3, #122	; 0x7a
 800bf4e:	d808      	bhi.n	800bf62 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bf50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf54:	f043 0301 	orr.w	r3, r3, #1
 800bf58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf5e:	3b20      	subs	r3, #32
 800bf60:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	1c5a      	adds	r2, r3, #1
 800bf66:	623a      	str	r2, [r7, #32]
 800bf68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf6a:	b2d1      	uxtb	r1, r2
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	4413      	add	r3, r2
 800bf70:	460a      	mov	r2, r1
 800bf72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800bf76:	e763      	b.n	800be40 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bf78:	bf00      	nop
 800bf7a:	e000      	b.n	800bf7e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800bf7c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf84:	2be5      	cmp	r3, #229	; 0xe5
 800bf86:	d103      	bne.n	800bf90 <create_name+0x2e0>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2205      	movs	r2, #5
 800bf8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	2b08      	cmp	r3, #8
 800bf94:	d104      	bne.n	800bfa0 <create_name+0x2f0>
 800bf96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bfa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfa4:	f003 030c 	and.w	r3, r3, #12
 800bfa8:	2b0c      	cmp	r3, #12
 800bfaa:	d005      	beq.n	800bfb8 <create_name+0x308>
 800bfac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfb0:	f003 0303 	and.w	r3, r3, #3
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	d105      	bne.n	800bfc4 <create_name+0x314>
 800bfb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfbc:	f043 0302 	orr.w	r3, r3, #2
 800bfc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bfc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfc8:	f003 0302 	and.w	r3, r3, #2
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d117      	bne.n	800c000 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bfd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfd4:	f003 0303 	and.w	r3, r3, #3
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d105      	bne.n	800bfe8 <create_name+0x338>
 800bfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfe0:	f043 0310 	orr.w	r3, r3, #16
 800bfe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bfe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfec:	f003 030c 	and.w	r3, r3, #12
 800bff0:	2b04      	cmp	r3, #4
 800bff2:	d105      	bne.n	800c000 <create_name+0x350>
 800bff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bff8:	f043 0308 	orr.w	r3, r3, #8
 800bffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c006:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800c00a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3728      	adds	r7, #40	; 0x28
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	0800f274 	.word	0x0800f274
 800c018:	0800f814 	.word	0x0800f814
 800c01c:	0800f280 	.word	0x0800f280

0800c020 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c034:	e002      	b.n	800c03c <follow_path+0x1c>
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	3301      	adds	r3, #1
 800c03a:	603b      	str	r3, [r7, #0]
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	2b2f      	cmp	r3, #47	; 0x2f
 800c042:	d0f8      	beq.n	800c036 <follow_path+0x16>
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	2b5c      	cmp	r3, #92	; 0x5c
 800c04a:	d0f4      	beq.n	800c036 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	2200      	movs	r2, #0
 800c050:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2200      	movs	r2, #0
 800c056:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	2b1f      	cmp	r3, #31
 800c05e:	d80a      	bhi.n	800c076 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2280      	movs	r2, #128	; 0x80
 800c064:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800c068:	2100      	movs	r1, #0
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7fe faea 	bl	800a644 <dir_sdi>
 800c070:	4603      	mov	r3, r0
 800c072:	75fb      	strb	r3, [r7, #23]
 800c074:	e07c      	b.n	800c170 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c076:	463b      	mov	r3, r7
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff fe18 	bl	800bcb0 <create_name>
 800c080:	4603      	mov	r3, r0
 800c082:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d16d      	bne.n	800c166 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff fa4a 	bl	800b524 <dir_find>
 800c090:	4603      	mov	r3, r0
 800c092:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c09a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00a      	beq.n	800c0b8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	2b04      	cmp	r3, #4
 800c0a6:	d160      	bne.n	800c16a <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c0a8:	7afb      	ldrb	r3, [r7, #11]
 800c0aa:	f003 0304 	and.w	r3, r3, #4
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d15b      	bne.n	800c16a <follow_path+0x14a>
 800c0b2:	2305      	movs	r3, #5
 800c0b4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c0b6:	e058      	b.n	800c16a <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c0b8:	7afb      	ldrb	r3, [r7, #11]
 800c0ba:	f003 0304 	and.w	r3, r3, #4
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d155      	bne.n	800c16e <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	799b      	ldrb	r3, [r3, #6]
 800c0c6:	f003 0310 	and.w	r3, r3, #16
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800c0ce:	2305      	movs	r3, #5
 800c0d0:	75fb      	strb	r3, [r7, #23]
 800c0d2:	e04d      	b.n	800c170 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	2b04      	cmp	r3, #4
 800c0da:	d12f      	bne.n	800c13c <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	689a      	ldr	r2, [r3, #8]
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800c0ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0ee:	693a      	ldr	r2, [r7, #16]
 800c0f0:	79d2      	ldrb	r2, [r2, #7]
 800c0f2:	431a      	orrs	r2, r3
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	3334      	adds	r3, #52	; 0x34
 800c106:	4618      	mov	r0, r3
 800c108:	f7fd f834 	bl	8009174 <ld_dword>
 800c10c:	4602      	mov	r2, r0
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	3321      	adds	r3, #33	; 0x21
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	f003 0302 	and.w	r3, r3, #2
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	3338      	adds	r3, #56	; 0x38
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fd f845 	bl	80091ba <ld_qword>
 800c130:	4603      	mov	r3, r0
 800c132:	460c      	mov	r4, r1
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800c13a:	e79c      	b.n	800c076 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	8992      	ldrh	r2, [r2, #12]
 800c14a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c14e:	fb02 f200 	mul.w	r2, r2, r0
 800c152:	1a9b      	subs	r3, r3, r2
 800c154:	440b      	add	r3, r1
 800c156:	4619      	mov	r1, r3
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f7fe fc49 	bl	800a9f0 <ld_clust>
 800c15e:	4602      	mov	r2, r0
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c164:	e787      	b.n	800c076 <follow_path+0x56>
			if (res != FR_OK) break;
 800c166:	bf00      	nop
 800c168:	e002      	b.n	800c170 <follow_path+0x150>
				break;
 800c16a:	bf00      	nop
 800c16c:	e000      	b.n	800c170 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c16e:	bf00      	nop
			}
		}
	}

	return res;
 800c170:	7dfb      	ldrb	r3, [r7, #23]
}
 800c172:	4618      	mov	r0, r3
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	bd90      	pop	{r4, r7, pc}

0800c17a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c17a:	b480      	push	{r7}
 800c17c:	b087      	sub	sp, #28
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c182:	f04f 33ff 	mov.w	r3, #4294967295
 800c186:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d031      	beq.n	800c1f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	617b      	str	r3, [r7, #20]
 800c196:	e002      	b.n	800c19e <get_ldnumber+0x24>
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	3301      	adds	r3, #1
 800c19c:	617b      	str	r3, [r7, #20]
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	2b1f      	cmp	r3, #31
 800c1a4:	d903      	bls.n	800c1ae <get_ldnumber+0x34>
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b3a      	cmp	r3, #58	; 0x3a
 800c1ac:	d1f4      	bne.n	800c198 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b3a      	cmp	r3, #58	; 0x3a
 800c1b4:	d11c      	bne.n	800c1f0 <get_ldnumber+0x76>
			tp = *path;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	60fa      	str	r2, [r7, #12]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	3b30      	subs	r3, #48	; 0x30
 800c1c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b09      	cmp	r3, #9
 800c1cc:	d80e      	bhi.n	800c1ec <get_ldnumber+0x72>
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d10a      	bne.n	800c1ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d107      	bne.n	800c1ec <get_ldnumber+0x72>
					vol = (int)i;
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	617b      	str	r3, [r7, #20]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	697a      	ldr	r2, [r7, #20]
 800c1ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	e002      	b.n	800c1f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c1f4:	693b      	ldr	r3, [r7, #16]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	371c      	adds	r7, #28
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
	...

0800c204 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	70da      	strb	r2, [r3, #3]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f04f 32ff 	mov.w	r2, #4294967295
 800c21a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7fd fb84 	bl	800992c <move_window>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d001      	beq.n	800c22e <check_fs+0x2a>
 800c22a:	2304      	movs	r3, #4
 800c22c:	e044      	b.n	800c2b8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	333c      	adds	r3, #60	; 0x3c
 800c232:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c236:	4618      	mov	r0, r3
 800c238:	f7fc ff84 	bl	8009144 <ld_word>
 800c23c:	4603      	mov	r3, r0
 800c23e:	461a      	mov	r2, r3
 800c240:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c244:	429a      	cmp	r2, r3
 800c246:	d001      	beq.n	800c24c <check_fs+0x48>
 800c248:	2303      	movs	r3, #3
 800c24a:	e035      	b.n	800c2b8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c252:	2be9      	cmp	r3, #233	; 0xe9
 800c254:	d009      	beq.n	800c26a <check_fs+0x66>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c25c:	2beb      	cmp	r3, #235	; 0xeb
 800c25e:	d11e      	bne.n	800c29e <check_fs+0x9a>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c266:	2b90      	cmp	r3, #144	; 0x90
 800c268:	d119      	bne.n	800c29e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	333c      	adds	r3, #60	; 0x3c
 800c26e:	3336      	adds	r3, #54	; 0x36
 800c270:	4618      	mov	r0, r3
 800c272:	f7fc ff7f 	bl	8009174 <ld_dword>
 800c276:	4603      	mov	r3, r0
 800c278:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c27c:	4a10      	ldr	r2, [pc, #64]	; (800c2c0 <check_fs+0xbc>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d101      	bne.n	800c286 <check_fs+0x82>
 800c282:	2300      	movs	r3, #0
 800c284:	e018      	b.n	800c2b8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	333c      	adds	r3, #60	; 0x3c
 800c28a:	3352      	adds	r3, #82	; 0x52
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fc ff71 	bl	8009174 <ld_dword>
 800c292:	4602      	mov	r2, r0
 800c294:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <check_fs+0xc0>)
 800c296:	429a      	cmp	r2, r3
 800c298:	d101      	bne.n	800c29e <check_fs+0x9a>
 800c29a:	2300      	movs	r3, #0
 800c29c:	e00c      	b.n	800c2b8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	333c      	adds	r3, #60	; 0x3c
 800c2a2:	220b      	movs	r2, #11
 800c2a4:	4908      	ldr	r1, [pc, #32]	; (800c2c8 <check_fs+0xc4>)
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fd f94d 	bl	8009546 <mem_cmp>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d101      	bne.n	800c2b6 <check_fs+0xb2>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e000      	b.n	800c2b8 <check_fs+0xb4>
#endif
	return 2;
 800c2b6:	2302      	movs	r3, #2
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	00544146 	.word	0x00544146
 800c2c4:	33544146 	.word	0x33544146
 800c2c8:	0800f288 	.word	0x0800f288

0800c2cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c2cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c2d0:	b098      	sub	sp, #96	; 0x60
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f7ff ff49 	bl	800c17a <get_ldnumber>
 800c2e8:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800c2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	da01      	bge.n	800c2f4 <find_volume+0x28>
 800c2f0:	230b      	movs	r3, #11
 800c2f2:	e36e      	b.n	800c9d2 <find_volume+0x706>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c2f4:	4aaa      	ldr	r2, [pc, #680]	; (800c5a0 <find_volume+0x2d4>)
 800c2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2fc:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c300:	2b00      	cmp	r3, #0
 800c302:	d101      	bne.n	800c308 <find_volume+0x3c>
 800c304:	230c      	movs	r3, #12
 800c306:	e364      	b.n	800c9d2 <find_volume+0x706>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c30c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c30e:	79fb      	ldrb	r3, [r7, #7]
 800c310:	f023 0301 	bic.w	r3, r3, #1
 800c314:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d01a      	beq.n	800c354 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800c31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c320:	785b      	ldrb	r3, [r3, #1]
 800c322:	4618      	mov	r0, r3
 800c324:	f7fc fe70 	bl	8009008 <disk_status>
 800c328:	4603      	mov	r3, r0
 800c32a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c32e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10c      	bne.n	800c354 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c33a:	79fb      	ldrb	r3, [r7, #7]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d007      	beq.n	800c350 <find_volume+0x84>
 800c340:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c34c:	230a      	movs	r3, #10
 800c34e:	e340      	b.n	800c9d2 <find_volume+0x706>
			}
			return FR_OK;				/* The file system object is valid */
 800c350:	2300      	movs	r3, #0
 800c352:	e33e      	b.n	800c9d2 <find_volume+0x706>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c356:	2200      	movs	r2, #0
 800c358:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c360:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c364:	785b      	ldrb	r3, [r3, #1]
 800c366:	4618      	mov	r0, r3
 800c368:	f7fc fe68 	bl	800903c <disk_initialize>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c372:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c37e:	2303      	movs	r3, #3
 800c380:	e327      	b.n	800c9d2 <find_volume+0x706>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d007      	beq.n	800c398 <find_volume+0xcc>
 800c388:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c38c:	f003 0304 	and.w	r3, r3, #4
 800c390:	2b00      	cmp	r3, #0
 800c392:	d001      	beq.n	800c398 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c394:	230a      	movs	r3, #10
 800c396:	e31c      	b.n	800c9d2 <find_volume+0x706>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c39a:	7858      	ldrb	r0, [r3, #1]
 800c39c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c39e:	330c      	adds	r3, #12
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	2102      	movs	r1, #2
 800c3a4:	f7fc feb0 	bl	8009108 <disk_ioctl>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <find_volume+0xe6>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e30f      	b.n	800c9d2 <find_volume+0x706>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3b4:	899b      	ldrh	r3, [r3, #12]
 800c3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3ba:	d80d      	bhi.n	800c3d8 <find_volume+0x10c>
 800c3bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3be:	899b      	ldrh	r3, [r3, #12]
 800c3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3c4:	d308      	bcc.n	800c3d8 <find_volume+0x10c>
 800c3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3c8:	899b      	ldrh	r3, [r3, #12]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ce:	899b      	ldrh	r3, [r3, #12]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <find_volume+0x110>
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e2fa      	b.n	800c9d2 <find_volume+0x706>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c3e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c3e4:	f7ff ff0e 	bl	800c204 <check_fs>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c3ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d14b      	bne.n	800c48e <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3fa:	e01f      	b.n	800c43c <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3fe:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c404:	011b      	lsls	r3, r3, #4
 800c406:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c40a:	4413      	add	r3, r2
 800c40c:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	3304      	adds	r3, #4
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d006      	beq.n	800c426 <find_volume+0x15a>
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	3308      	adds	r3, #8
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fc fea9 	bl	8009174 <ld_dword>
 800c422:	4602      	mov	r2, r0
 800c424:	e000      	b.n	800c428 <find_volume+0x15c>
 800c426:	2200      	movs	r2, #0
 800c428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800c430:	440b      	add	r3, r1
 800c432:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c438:	3301      	adds	r3, #1
 800c43a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d9dc      	bls.n	800c3fc <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c442:	2300      	movs	r3, #0
 800c444:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800c446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <find_volume+0x186>
 800c44c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c44e:	3b01      	subs	r3, #1
 800c450:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c45a:	4413      	add	r3, r2
 800c45c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800c460:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c464:	2b00      	cmp	r3, #0
 800c466:	d005      	beq.n	800c474 <find_volume+0x1a8>
 800c468:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c46a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c46c:	f7ff feca 	bl	800c204 <check_fs>
 800c470:	4603      	mov	r3, r0
 800c472:	e000      	b.n	800c476 <find_volume+0x1aa>
 800c474:	2303      	movs	r3, #3
 800c476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c47a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d905      	bls.n	800c48e <find_volume+0x1c2>
 800c482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c484:	3301      	adds	r3, #1
 800c486:	64bb      	str	r3, [r7, #72]	; 0x48
 800c488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d9e1      	bls.n	800c452 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c48e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c492:	2b04      	cmp	r3, #4
 800c494:	d101      	bne.n	800c49a <find_volume+0x1ce>
 800c496:	2301      	movs	r3, #1
 800c498:	e29b      	b.n	800c9d2 <find_volume+0x706>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c49a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d901      	bls.n	800c4a6 <find_volume+0x1da>
 800c4a2:	230d      	movs	r3, #13
 800c4a4:	e295      	b.n	800c9d2 <find_volume+0x706>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800c4a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	f040 8101 	bne.w	800c6b2 <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800c4b0:	230b      	movs	r3, #11
 800c4b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4b4:	e002      	b.n	800c4bc <find_volume+0x1f0>
 800c4b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4be:	2b3f      	cmp	r3, #63	; 0x3f
 800c4c0:	d806      	bhi.n	800c4d0 <find_volume+0x204>
 800c4c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4c6:	4413      	add	r3, r2
 800c4c8:	333c      	adds	r3, #60	; 0x3c
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d0f2      	beq.n	800c4b6 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800c4d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4d2:	2b3f      	cmp	r3, #63	; 0x3f
 800c4d4:	d801      	bhi.n	800c4da <find_volume+0x20e>
 800c4d6:	230d      	movs	r3, #13
 800c4d8:	e27b      	b.n	800c9d2 <find_volume+0x706>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800c4da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4dc:	333c      	adds	r3, #60	; 0x3c
 800c4de:	3368      	adds	r3, #104	; 0x68
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fc fe2f 	bl	8009144 <ld_word>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ec:	d001      	beq.n	800c4f2 <find_volume+0x226>
 800c4ee:	230d      	movs	r3, #13
 800c4f0:	e26f      	b.n	800c9d2 <find_volume+0x706>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800c4f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4f4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4093      	lsls	r3, r2
 800c4fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c500:	8992      	ldrh	r2, [r2, #12]
 800c502:	4293      	cmp	r3, r2
 800c504:	d001      	beq.n	800c50a <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800c506:	230d      	movs	r3, #13
 800c508:	e263      	b.n	800c9d2 <find_volume+0x706>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800c50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c50c:	333c      	adds	r3, #60	; 0x3c
 800c50e:	3348      	adds	r3, #72	; 0x48
 800c510:	4618      	mov	r0, r3
 800c512:	f7fc fe52 	bl	80091ba <ld_qword>
 800c516:	460a      	mov	r2, r1
 800c518:	4601      	mov	r1, r0
 800c51a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c51c:	469b      	mov	fp, r3
 800c51e:	f04f 0c00 	mov.w	ip, #0
 800c522:	eb1b 0301 	adds.w	r3, fp, r1
 800c526:	eb4c 0402 	adc.w	r4, ip, r2
 800c52a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800c52e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c532:	2c01      	cmp	r4, #1
 800c534:	bf08      	it	eq
 800c536:	2b00      	cmpeq	r3, #0
 800c538:	d301      	bcc.n	800c53e <find_volume+0x272>
 800c53a:	230d      	movs	r3, #13
 800c53c:	e249      	b.n	800c9d2 <find_volume+0x706>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800c53e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c540:	333c      	adds	r3, #60	; 0x3c
 800c542:	3354      	adds	r3, #84	; 0x54
 800c544:	4618      	mov	r0, r3
 800c546:	f7fc fe15 	bl	8009174 <ld_dword>
 800c54a:	4602      	mov	r2, r0
 800c54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c54e:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800c550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c552:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800c556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c558:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800c55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c55c:	789b      	ldrb	r3, [r3, #2]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d001      	beq.n	800c566 <find_volume+0x29a>
 800c562:	230d      	movs	r3, #13
 800c564:	e235      	b.n	800c9d2 <find_volume+0x706>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800c566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c568:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800c56c:	461a      	mov	r2, r3
 800c56e:	2301      	movs	r3, #1
 800c570:	4093      	lsls	r3, r2
 800c572:	b29a      	uxth	r2, r3
 800c574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c576:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800c578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57a:	895b      	ldrh	r3, [r3, #10]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <find_volume+0x2b8>
 800c580:	230d      	movs	r3, #13
 800c582:	e226      	b.n	800c9d2 <find_volume+0x706>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800c584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c586:	333c      	adds	r3, #60	; 0x3c
 800c588:	335c      	adds	r3, #92	; 0x5c
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fc fdf2 	bl	8009174 <ld_dword>
 800c590:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	4a03      	ldr	r2, [pc, #12]	; (800c5a4 <find_volume+0x2d8>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d906      	bls.n	800c5a8 <find_volume+0x2dc>
 800c59a:	230d      	movs	r3, #13
 800c59c:	e219      	b.n	800c9d2 <find_volume+0x706>
 800c59e:	bf00      	nop
 800c5a0:	200000bc 	.word	0x200000bc
 800c5a4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	1c9a      	adds	r2, r3, #2
 800c5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ae:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800c5b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5b4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800c5b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b8:	333c      	adds	r3, #60	; 0x3c
 800c5ba:	3358      	adds	r3, #88	; 0x58
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7fc fdd9 	bl	8009174 <ld_dword>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5c6:	441a      	add	r2, r3
 800c5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ca:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800c5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ce:	333c      	adds	r3, #60	; 0x3c
 800c5d0:	3350      	adds	r3, #80	; 0x50
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fc fdce 	bl	8009174 <ld_dword>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5dc:	441a      	add	r2, r3
 800c5de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800c5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	f04f 0200 	mov.w	r2, #0
 800c5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ee:	895b      	ldrh	r3, [r3, #10]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f4:	fb03 f300 	mul.w	r3, r3, r0
 800c5f8:	469b      	mov	fp, r3
 800c5fa:	f04f 0c00 	mov.w	ip, #0
 800c5fe:	eb1b 0301 	adds.w	r3, fp, r1
 800c602:	eb4c 0402 	adc.w	r4, ip, r2
 800c606:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c60a:	42a2      	cmp	r2, r4
 800c60c:	bf08      	it	eq
 800c60e:	4299      	cmpeq	r1, r3
 800c610:	d201      	bcs.n	800c616 <find_volume+0x34a>
 800c612:	230d      	movs	r3, #13
 800c614:	e1dd      	b.n	800c9d2 <find_volume+0x706>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800c616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c618:	333c      	adds	r3, #60	; 0x3c
 800c61a:	3360      	adds	r3, #96	; 0x60
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fc fda9 	bl	8009174 <ld_dword>
 800c622:	4602      	mov	r2, r0
 800c624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c626:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800c628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c62c:	4619      	mov	r1, r3
 800c62e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c630:	f7fd fa1a 	bl	8009a68 <clust2sect>
 800c634:	4603      	mov	r3, r0
 800c636:	4619      	mov	r1, r3
 800c638:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c63a:	f7fd f977 	bl	800992c <move_window>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d001      	beq.n	800c648 <find_volume+0x37c>
 800c644:	2301      	movs	r3, #1
 800c646:	e1c4      	b.n	800c9d2 <find_volume+0x706>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c648:	2300      	movs	r3, #0
 800c64a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c64c:	e015      	b.n	800c67a <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c64e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c652:	4413      	add	r3, r2
 800c654:	333c      	adds	r3, #60	; 0x3c
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	2b81      	cmp	r3, #129	; 0x81
 800c65a:	d10b      	bne.n	800c674 <find_volume+0x3a8>
 800c65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c65e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c664:	3314      	adds	r3, #20
 800c666:	4413      	add	r3, r2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fc fd83 	bl	8009174 <ld_dword>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b02      	cmp	r3, #2
 800c672:	d009      	beq.n	800c688 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c676:	3320      	adds	r3, #32
 800c678:	64bb      	str	r3, [r7, #72]	; 0x48
 800c67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c67c:	899b      	ldrh	r3, [r3, #12]
 800c67e:	461a      	mov	r2, r3
 800c680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c682:	4293      	cmp	r3, r2
 800c684:	d3e3      	bcc.n	800c64e <find_volume+0x382>
 800c686:	e000      	b.n	800c68a <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c688:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c68c:	899b      	ldrh	r3, [r3, #12]
 800c68e:	461a      	mov	r2, r3
 800c690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c692:	4293      	cmp	r3, r2
 800c694:	d101      	bne.n	800c69a <find_volume+0x3ce>
 800c696:	230d      	movs	r3, #13
 800c698:	e19b      	b.n	800c9d2 <find_volume+0x706>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c69a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c69c:	f04f 32ff 	mov.w	r2, #4294967295
 800c6a0:	61da      	str	r2, [r3, #28]
 800c6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6a4:	69da      	ldr	r2, [r3, #28]
 800c6a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6a8:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c6aa:	2304      	movs	r3, #4
 800c6ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c6b0:	e177      	b.n	800c9a2 <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c6b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6b4:	333c      	adds	r3, #60	; 0x3c
 800c6b6:	330b      	adds	r3, #11
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fc fd43 	bl	8009144 <ld_word>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c4:	899b      	ldrh	r3, [r3, #12]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d001      	beq.n	800c6ce <find_volume+0x402>
 800c6ca:	230d      	movs	r3, #13
 800c6cc:	e181      	b.n	800c9d2 <find_volume+0x706>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d0:	333c      	adds	r3, #60	; 0x3c
 800c6d2:	3316      	adds	r3, #22
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fc fd35 	bl	8009144 <ld_word>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d106      	bne.n	800c6f2 <find_volume+0x426>
 800c6e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e6:	333c      	adds	r3, #60	; 0x3c
 800c6e8:	3324      	adds	r3, #36	; 0x24
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fc fd42 	bl	8009174 <ld_dword>
 800c6f0:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800c6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6f6:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6fa:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800c6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c700:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c704:	789b      	ldrb	r3, [r3, #2]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d005      	beq.n	800c716 <find_volume+0x44a>
 800c70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c70c:	789b      	ldrb	r3, [r3, #2]
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d001      	beq.n	800c716 <find_volume+0x44a>
 800c712:	230d      	movs	r3, #13
 800c714:	e15d      	b.n	800c9d2 <find_volume+0x706>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c718:	789b      	ldrb	r3, [r3, #2]
 800c71a:	461a      	mov	r2, r3
 800c71c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c71e:	fb02 f303 	mul.w	r3, r2, r3
 800c722:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c726:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c72e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c732:	895b      	ldrh	r3, [r3, #10]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d008      	beq.n	800c74a <find_volume+0x47e>
 800c738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c73a:	895b      	ldrh	r3, [r3, #10]
 800c73c:	461a      	mov	r2, r3
 800c73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c740:	895b      	ldrh	r3, [r3, #10]
 800c742:	3b01      	subs	r3, #1
 800c744:	4013      	ands	r3, r2
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <find_volume+0x482>
 800c74a:	230d      	movs	r3, #13
 800c74c:	e141      	b.n	800c9d2 <find_volume+0x706>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c74e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c750:	333c      	adds	r3, #60	; 0x3c
 800c752:	3311      	adds	r3, #17
 800c754:	4618      	mov	r0, r3
 800c756:	f7fc fcf5 	bl	8009144 <ld_word>
 800c75a:	4603      	mov	r3, r0
 800c75c:	461a      	mov	r2, r3
 800c75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c760:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c764:	891b      	ldrh	r3, [r3, #8]
 800c766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c768:	8992      	ldrh	r2, [r2, #12]
 800c76a:	0952      	lsrs	r2, r2, #5
 800c76c:	b292      	uxth	r2, r2
 800c76e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c772:	fb02 f201 	mul.w	r2, r2, r1
 800c776:	1a9b      	subs	r3, r3, r2
 800c778:	b29b      	uxth	r3, r3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <find_volume+0x4b6>
 800c77e:	230d      	movs	r3, #13
 800c780:	e127      	b.n	800c9d2 <find_volume+0x706>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c784:	333c      	adds	r3, #60	; 0x3c
 800c786:	3313      	adds	r3, #19
 800c788:	4618      	mov	r0, r3
 800c78a:	f7fc fcdb 	bl	8009144 <ld_word>
 800c78e:	4603      	mov	r3, r0
 800c790:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c794:	2b00      	cmp	r3, #0
 800c796:	d106      	bne.n	800c7a6 <find_volume+0x4da>
 800c798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c79a:	333c      	adds	r3, #60	; 0x3c
 800c79c:	3320      	adds	r3, #32
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fc fce8 	bl	8009174 <ld_dword>
 800c7a4:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a8:	333c      	adds	r3, #60	; 0x3c
 800c7aa:	330e      	adds	r3, #14
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fc fcc9 	bl	8009144 <ld_word>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c7b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d101      	bne.n	800c7c0 <find_volume+0x4f4>
 800c7bc:	230d      	movs	r3, #13
 800c7be:	e108      	b.n	800c9d2 <find_volume+0x706>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c7c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c7c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7c4:	4413      	add	r3, r2
 800c7c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7c8:	8911      	ldrh	r1, [r2, #8]
 800c7ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7cc:	8992      	ldrh	r2, [r2, #12]
 800c7ce:	0952      	lsrs	r2, r2, #5
 800c7d0:	b292      	uxth	r2, r2
 800c7d2:	fbb1 f2f2 	udiv	r2, r1, r2
 800c7d6:	b292      	uxth	r2, r2
 800c7d8:	4413      	add	r3, r2
 800c7da:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c7dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d201      	bcs.n	800c7e8 <find_volume+0x51c>
 800c7e4:	230d      	movs	r3, #13
 800c7e6:	e0f4      	b.n	800c9d2 <find_volume+0x706>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c7e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7f0:	8952      	ldrh	r2, [r2, #10]
 800c7f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d101      	bne.n	800c802 <find_volume+0x536>
 800c7fe:	230d      	movs	r3, #13
 800c800:	e0e7      	b.n	800c9d2 <find_volume+0x706>
		fmt = FS_FAT32;
 800c802:	2303      	movs	r3, #3
 800c804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c80e:	4293      	cmp	r3, r2
 800c810:	d802      	bhi.n	800c818 <find_volume+0x54c>
 800c812:	2302      	movs	r3, #2
 800c814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c81e:	4293      	cmp	r3, r2
 800c820:	d802      	bhi.n	800c828 <find_volume+0x55c>
 800c822:	2301      	movs	r3, #1
 800c824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	1c9a      	adds	r2, r3, #2
 800c82c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c82e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800c830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c834:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c836:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c83a:	441a      	add	r2, r3
 800c83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c83e:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800c840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	441a      	add	r2, r3
 800c846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c848:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800c84a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d11e      	bne.n	800c890 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c854:	333c      	adds	r3, #60	; 0x3c
 800c856:	332a      	adds	r3, #42	; 0x2a
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fc fc73 	bl	8009144 <ld_word>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <find_volume+0x59c>
 800c864:	230d      	movs	r3, #13
 800c866:	e0b4      	b.n	800c9d2 <find_volume+0x706>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c86a:	891b      	ldrh	r3, [r3, #8]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d001      	beq.n	800c874 <find_volume+0x5a8>
 800c870:	230d      	movs	r3, #13
 800c872:	e0ae      	b.n	800c9d2 <find_volume+0x706>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c876:	333c      	adds	r3, #60	; 0x3c
 800c878:	332c      	adds	r3, #44	; 0x2c
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fc fc7a 	bl	8009174 <ld_dword>
 800c880:	4602      	mov	r2, r0
 800c882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c884:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c88e:	e01f      	b.n	800c8d0 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c892:	891b      	ldrh	r3, [r3, #8]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <find_volume+0x5d0>
 800c898:	230d      	movs	r3, #13
 800c89a:	e09a      	b.n	800c9d2 <find_volume+0x706>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a2:	441a      	add	r2, r3
 800c8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8a6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c8a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d103      	bne.n	800c8b8 <find_volume+0x5ec>
 800c8b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8b2:	6a1b      	ldr	r3, [r3, #32]
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	e00a      	b.n	800c8ce <find_volume+0x602>
 800c8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ba:	6a1a      	ldr	r2, [r3, #32]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	4413      	add	r3, r2
 800c8c2:	085a      	lsrs	r2, r3, #1
 800c8c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c6:	6a1b      	ldr	r3, [r3, #32]
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d6:	899b      	ldrh	r3, [r3, #12]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8dc:	440b      	add	r3, r1
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8e2:	8989      	ldrh	r1, [r1, #12]
 800c8e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d201      	bcs.n	800c8f0 <find_volume+0x624>
 800c8ec:	230d      	movs	r3, #13
 800c8ee:	e070      	b.n	800c9d2 <find_volume+0x706>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f6:	61da      	str	r2, [r3, #28]
 800c8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8fa:	69da      	ldr	r2, [r3, #28]
 800c8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8fe:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800c900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c902:	2280      	movs	r2, #128	; 0x80
 800c904:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d149      	bne.n	800c9a2 <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c90e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c910:	333c      	adds	r3, #60	; 0x3c
 800c912:	3330      	adds	r3, #48	; 0x30
 800c914:	4618      	mov	r0, r3
 800c916:	f7fc fc15 	bl	8009144 <ld_word>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d140      	bne.n	800c9a2 <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c922:	3301      	adds	r3, #1
 800c924:	4619      	mov	r1, r3
 800c926:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c928:	f7fd f800 	bl	800992c <move_window>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d137      	bne.n	800c9a2 <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 800c932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c934:	2200      	movs	r2, #0
 800c936:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c93a:	333c      	adds	r3, #60	; 0x3c
 800c93c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c940:	4618      	mov	r0, r3
 800c942:	f7fc fbff 	bl	8009144 <ld_word>
 800c946:	4603      	mov	r3, r0
 800c948:	461a      	mov	r2, r3
 800c94a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c94e:	429a      	cmp	r2, r3
 800c950:	d127      	bne.n	800c9a2 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c954:	333c      	adds	r3, #60	; 0x3c
 800c956:	4618      	mov	r0, r3
 800c958:	f7fc fc0c 	bl	8009174 <ld_dword>
 800c95c:	4602      	mov	r2, r0
 800c95e:	4b1f      	ldr	r3, [pc, #124]	; (800c9dc <find_volume+0x710>)
 800c960:	429a      	cmp	r2, r3
 800c962:	d11e      	bne.n	800c9a2 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c966:	333c      	adds	r3, #60	; 0x3c
 800c968:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fc fc01 	bl	8009174 <ld_dword>
 800c972:	4602      	mov	r2, r0
 800c974:	4b1a      	ldr	r3, [pc, #104]	; (800c9e0 <find_volume+0x714>)
 800c976:	429a      	cmp	r2, r3
 800c978:	d113      	bne.n	800c9a2 <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c97c:	333c      	adds	r3, #60	; 0x3c
 800c97e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c982:	4618      	mov	r0, r3
 800c984:	f7fc fbf6 	bl	8009174 <ld_dword>
 800c988:	4602      	mov	r2, r0
 800c98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98c:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c98e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c990:	333c      	adds	r3, #60	; 0x3c
 800c992:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c996:	4618      	mov	r0, r3
 800c998:	f7fc fbec 	bl	8009174 <ld_dword>
 800c99c:	4602      	mov	r2, r0
 800c99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a0:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c9a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c9a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c9aa:	4b0e      	ldr	r3, [pc, #56]	; (800c9e4 <find_volume+0x718>)
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	4b0c      	ldr	r3, [pc, #48]	; (800c9e4 <find_volume+0x718>)
 800c9b4:	801a      	strh	r2, [r3, #0]
 800c9b6:	4b0b      	ldr	r3, [pc, #44]	; (800c9e4 <find_volume+0x718>)
 800c9b8:	881a      	ldrh	r2, [r3, #0]
 800c9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9bc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c9be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c0:	4a09      	ldr	r2, [pc, #36]	; (800c9e8 <find_volume+0x71c>)
 800c9c2:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800c9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c6:	4a09      	ldr	r2, [pc, #36]	; (800c9ec <find_volume+0x720>)
 800c9c8:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c9ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c9cc:	f7fc ff46 	bl	800985c <clear_lock>
#endif
	return FR_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3760      	adds	r7, #96	; 0x60
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800c9dc:	41615252 	.word	0x41615252
 800c9e0:	61417272 	.word	0x61417272
 800c9e4:	200000c0 	.word	0x200000c0
 800c9e8:	20000344 	.word	0x20000344
 800c9ec:	200000e4 	.word	0x200000e4

0800c9f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c9fa:	2309      	movs	r3, #9
 800c9fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d01c      	beq.n	800ca3e <validate+0x4e>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d018      	beq.n	800ca3e <validate+0x4e>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d013      	beq.n	800ca3e <validate+0x4e>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	889a      	ldrh	r2, [r3, #4]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	88db      	ldrh	r3, [r3, #6]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d10c      	bne.n	800ca3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	785b      	ldrb	r3, [r3, #1]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fc faec 	bl	8009008 <disk_status>
 800ca30:	4603      	mov	r3, r0
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <validate+0x4e>
			res = FR_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d102      	bne.n	800ca4a <validate+0x5a>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	e000      	b.n	800ca4c <validate+0x5c>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	683a      	ldr	r2, [r7, #0]
 800ca4e:	6013      	str	r3, [r2, #0]
	return res;
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
	...

0800ca5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b088      	sub	sp, #32
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	4613      	mov	r3, r2
 800ca68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ca6e:	f107 0310 	add.w	r3, r7, #16
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff fb81 	bl	800c17a <get_ldnumber>
 800ca78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	da01      	bge.n	800ca84 <f_mount+0x28>
 800ca80:	230b      	movs	r3, #11
 800ca82:	e02b      	b.n	800cadc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ca84:	4a17      	ldr	r2, [pc, #92]	; (800cae4 <f_mount+0x88>)
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d005      	beq.n	800caa0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ca94:	69b8      	ldr	r0, [r7, #24]
 800ca96:	f7fc fee1 	bl	800985c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d002      	beq.n	800caac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	490d      	ldr	r1, [pc, #52]	; (800cae4 <f_mount+0x88>)
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <f_mount+0x66>
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d001      	beq.n	800cac6 <f_mount+0x6a>
 800cac2:	2300      	movs	r3, #0
 800cac4:	e00a      	b.n	800cadc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cac6:	f107 010c 	add.w	r1, r7, #12
 800caca:	f107 0308 	add.w	r3, r7, #8
 800cace:	2200      	movs	r2, #0
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff fbfb 	bl	800c2cc <find_volume>
 800cad6:	4603      	mov	r3, r0
 800cad8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cada:	7dfb      	ldrb	r3, [r7, #23]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3720      	adds	r7, #32
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	200000bc 	.word	0x200000bc

0800cae8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cae8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800caec:	b0a2      	sub	sp, #136	; 0x88
 800caee:	af00      	add	r7, sp, #0
 800caf0:	60f8      	str	r0, [r7, #12]
 800caf2:	60b9      	str	r1, [r7, #8]
 800caf4:	4613      	mov	r3, r2
 800caf6:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <f_open+0x1a>
 800cafe:	2309      	movs	r3, #9
 800cb00:	e2a8      	b.n	800d054 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cb02:	79fb      	ldrb	r3, [r7, #7]
 800cb04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb08:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cb0a:	79fa      	ldrb	r2, [r7, #7]
 800cb0c:	f107 0114 	add.w	r1, r7, #20
 800cb10:	f107 0308 	add.w	r3, r7, #8
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7ff fbd9 	bl	800c2cc <find_volume>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 800cb20:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f040 828c 	bne.w	800d042 <f_open+0x55a>
		dj.obj.fs = fs;
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	f107 0318 	add.w	r3, r7, #24
 800cb34:	4611      	mov	r1, r2
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7ff fa72 	bl	800c020 <follow_path>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cb42:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d11a      	bne.n	800cb80 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cb4a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800cb4e:	b25b      	sxtb	r3, r3
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	da03      	bge.n	800cb5c <f_open+0x74>
				res = FR_INVALID_NAME;
 800cb54:	2306      	movs	r3, #6
 800cb56:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800cb5a:	e011      	b.n	800cb80 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	f023 0301 	bic.w	r3, r3, #1
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	bf14      	ite	ne
 800cb66:	2301      	movne	r3, #1
 800cb68:	2300      	moveq	r3, #0
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	f107 0318 	add.w	r3, r7, #24
 800cb72:	4611      	mov	r1, r2
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fc fd29 	bl	80095cc <chk_lock>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	f003 031c 	and.w	r3, r3, #28
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 8109 	beq.w	800cd9e <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 800cb8c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d017      	beq.n	800cbc4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cb94:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cb98:	2b04      	cmp	r3, #4
 800cb9a:	d10e      	bne.n	800cbba <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cb9c:	f7fc fd72 	bl	8009684 <enq_lock>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d006      	beq.n	800cbb4 <f_open+0xcc>
 800cba6:	f107 0318 	add.w	r3, r7, #24
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fe fde4 	bl	800b778 <dir_register>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	e000      	b.n	800cbb6 <f_open+0xce>
 800cbb4:	2312      	movs	r3, #18
 800cbb6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cbba:	79fb      	ldrb	r3, [r7, #7]
 800cbbc:	f043 0308 	orr.w	r3, r3, #8
 800cbc0:	71fb      	strb	r3, [r7, #7]
 800cbc2:	e010      	b.n	800cbe6 <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cbc4:	7fbb      	ldrb	r3, [r7, #30]
 800cbc6:	f003 0311 	and.w	r3, r3, #17
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <f_open+0xee>
					res = FR_DENIED;
 800cbce:	2307      	movs	r3, #7
 800cbd0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800cbd4:	e007      	b.n	800cbe6 <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cbd6:	79fb      	ldrb	r3, [r7, #7]
 800cbd8:	f003 0304 	and.w	r3, r3, #4
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d002      	beq.n	800cbe6 <f_open+0xfe>
 800cbe0:	2308      	movs	r3, #8
 800cbe2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cbe6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f040 80f1 	bne.w	800cdd2 <f_open+0x2ea>
 800cbf0:	79fb      	ldrb	r3, [r7, #7]
 800cbf2:	f003 0308 	and.w	r3, r3, #8
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 80eb 	beq.w	800cdd2 <f_open+0x2ea>
				dw = GET_FATTIME();
 800cbfc:	f7f9 ffdc 	bl	8006bb8 <get_fattime>
 800cc00:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	2b04      	cmp	r3, #4
 800cc08:	f040 8082 	bne.w	800cd10 <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800cc0c:	697a      	ldr	r2, [r7, #20]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	3334      	adds	r3, #52	; 0x34
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7fc faab 	bl	8009174 <ld_dword>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	695b      	ldr	r3, [r3, #20]
 800cc28:	3338      	adds	r3, #56	; 0x38
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fc fac5 	bl	80091ba <ld_qword>
 800cc30:	4603      	mov	r3, r0
 800cc32:	460c      	mov	r4, r1
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	3321      	adds	r3, #33	; 0x21
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	f003 0302 	and.w	r3, r3, #2
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	695b      	ldr	r3, [r3, #20]
 800cc56:	3308      	adds	r3, #8
 800cc58:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fc fb85 	bl	800936a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	3314      	adds	r3, #20
 800cc66:	2200      	movs	r2, #0
 800cc68:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	695b      	ldr	r3, [r3, #20]
 800cc6e:	330c      	adds	r3, #12
 800cc70:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fc fb79 	bl	800936a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	695b      	ldr	r3, [r3, #20]
 800cc7c:	3315      	adds	r3, #21
 800cc7e:	2200      	movs	r2, #0
 800cc80:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	3304      	adds	r3, #4
 800cc88:	2220      	movs	r2, #32
 800cc8a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	3334      	adds	r3, #52	; 0x34
 800cc92:	2100      	movs	r1, #0
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fc fb68 	bl	800936a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cca2:	f04f 0200 	mov.w	r2, #0
 800cca6:	f04f 0300 	mov.w	r3, #0
 800ccaa:	4608      	mov	r0, r1
 800ccac:	f7fc fb89 	bl	80093c2 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ccb8:	f04f 0200 	mov.w	r2, #0
 800ccbc:	f04f 0300 	mov.w	r3, #0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	f7fc fb7e 	bl	80093c2 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	3321      	adds	r3, #33	; 0x21
 800cccc:	2201      	movs	r2, #1
 800ccce:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800ccd0:	f107 0318 	add.w	r3, r7, #24
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fe fa9c 	bl	800b212 <store_xdir>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800cce0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d174      	bne.n	800cdd2 <f_open+0x2ea>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d070      	beq.n	800cdd2 <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f7fd faa7 	bl	800a24c <remove_chain>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	689a      	ldr	r2, [r3, #8]
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	3a01      	subs	r2, #1
 800cd0c:	619a      	str	r2, [r3, #24]
 800cd0e:	e060      	b.n	800cdd2 <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cd10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd12:	330e      	adds	r3, #14
 800cd14:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fc fb27 	bl	800936a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cd1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd1e:	3316      	adds	r3, #22
 800cd20:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fc fb21 	bl	800936a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cd28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd2a:	330b      	adds	r3, #11
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd34:	4611      	mov	r1, r2
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fd fe5a 	bl	800a9f0 <ld_clust>
 800cd3c:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd42:	2200      	movs	r2, #0
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fd fe72 	bl	800aa2e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cd4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd4c:	331c      	adds	r3, #28
 800cd4e:	2100      	movs	r1, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fc fb0a 	bl	800936a <st_dword>
					fs->wflag = 1;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cd5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d037      	beq.n	800cdd2 <f_open+0x2ea>
						dw = fs->winsect;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 800cd68:	f107 0318 	add.w	r3, r7, #24
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fd fa6b 	bl	800a24c <remove_chain>
 800cd76:	4603      	mov	r3, r0
 800cd78:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800cd7c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d126      	bne.n	800cdd2 <f_open+0x2ea>
							res = move_window(fs, dw);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fc fdcf 	bl	800992c <move_window>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cd98:	3a01      	subs	r2, #1
 800cd9a:	619a      	str	r2, [r3, #24]
 800cd9c:	e019      	b.n	800cdd2 <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cd9e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d115      	bne.n	800cdd2 <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cda6:	7fbb      	ldrb	r3, [r7, #30]
 800cda8:	f003 0310 	and.w	r3, r3, #16
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d003      	beq.n	800cdb8 <f_open+0x2d0>
					res = FR_NO_FILE;
 800cdb0:	2304      	movs	r3, #4
 800cdb2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800cdb6:	e00c      	b.n	800cdd2 <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cdb8:	79fb      	ldrb	r3, [r7, #7]
 800cdba:	f003 0302 	and.w	r3, r3, #2
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d007      	beq.n	800cdd2 <f_open+0x2ea>
 800cdc2:	7fbb      	ldrb	r3, [r7, #30]
 800cdc4:	f003 0301 	and.w	r3, r3, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <f_open+0x2ea>
						res = FR_DENIED;
 800cdcc:	2307      	movs	r3, #7
 800cdce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 800cdd2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d128      	bne.n	800ce2c <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cdda:	79fb      	ldrb	r3, [r7, #7]
 800cddc:	f003 0308 	and.w	r3, r3, #8
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d003      	beq.n	800cdec <f_open+0x304>
				mode |= FA_MODIFIED;
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdea:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800cdf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cdfa:	79fb      	ldrb	r3, [r7, #7]
 800cdfc:	f023 0301 	bic.w	r3, r3, #1
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	bf14      	ite	ne
 800ce04:	2301      	movne	r3, #1
 800ce06:	2300      	moveq	r3, #0
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	f107 0318 	add.w	r3, r7, #24
 800ce10:	4611      	mov	r1, r2
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fc fc58 	bl	80096c8 <inc_lock>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d102      	bne.n	800ce2c <f_open+0x344>
 800ce26:	2302      	movs	r3, #2
 800ce28:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ce2c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f040 8106 	bne.w	800d042 <f_open+0x55a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	2b04      	cmp	r3, #4
 800ce3c:	d12b      	bne.n	800ce96 <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800ce3e:	6a3a      	ldr	r2, [r7, #32]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800ce44:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800ce48:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce4c:	7ffa      	ldrb	r2, [r7, #31]
 800ce4e:	431a      	orrs	r2, r3
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800ce54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	3334      	adds	r3, #52	; 0x34
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fc f987 	bl	8009174 <ld_dword>
 800ce66:	4602      	mov	r2, r0
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	695b      	ldr	r3, [r3, #20]
 800ce70:	3338      	adds	r3, #56	; 0x38
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fc f9a1 	bl	80091ba <ld_qword>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	695b      	ldr	r3, [r3, #20]
 800ce86:	3321      	adds	r3, #33	; 0x21
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	f003 0302 	and.w	r3, r3, #2
 800ce8e:	b2da      	uxtb	r2, r3
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	71da      	strb	r2, [r3, #7]
 800ce94:	e013      	b.n	800cebe <f_open+0x3d6>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fd fda7 	bl	800a9f0 <ld_clust>
 800cea2:	4602      	mov	r2, r0
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceaa:	331c      	adds	r3, #28
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fc f961 	bl	8009174 <ld_dword>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	f04f 0400 	mov.w	r4, #0
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	88da      	ldrh	r2, [r3, #6]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	79fa      	ldrb	r2, [r7, #7]
 800ced6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2200      	movs	r2, #0
 800cee6:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	f04f 0300 	mov.w	r3, #0
 800ceee:	f04f 0400 	mov.w	r4, #0
 800cef2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	3354      	adds	r3, #84	; 0x54
 800cefa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cefe:	2100      	movs	r1, #0
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fc fb06 	bl	8009512 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cf06:	79fb      	ldrb	r3, [r7, #7]
 800cf08:	f003 0320 	and.w	r3, r3, #32
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 8098 	beq.w	800d042 <f_open+0x55a>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800cf18:	4323      	orrs	r3, r4
 800cf1a:	f000 8092 	beq.w	800d042 <f_open+0x55a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	895b      	ldrh	r3, [r3, #10]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	899b      	ldrh	r3, [r3, #12]
 800cf34:	fb03 f302 	mul.w	r3, r3, r2
 800cf38:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800cf48:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800cf4c:	e024      	b.n	800cf98 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fc fda7 	bl	8009aa8 <get_fat>
 800cf5a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 800cf5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d802      	bhi.n	800cf6c <f_open+0x484>
 800cf66:	2302      	movs	r3, #2
 800cf68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cf6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf74:	d102      	bne.n	800cf7c <f_open+0x494>
 800cf76:	2301      	movs	r3, #1
 800cf78:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf7e:	469b      	mov	fp, r3
 800cf80:	f04f 0c00 	mov.w	ip, #0
 800cf84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800cf88:	460b      	mov	r3, r1
 800cf8a:	4614      	mov	r4, r2
 800cf8c:	ebb3 030b 	subs.w	r3, r3, fp
 800cf90:	eb64 040c 	sbc.w	r4, r4, ip
 800cf94:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800cf98:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d109      	bne.n	800cfb4 <f_open+0x4cc>
 800cfa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	f04f 0200 	mov.w	r2, #0
 800cfa8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800cfac:	42a2      	cmp	r2, r4
 800cfae:	bf08      	it	eq
 800cfb0:	4299      	cmpeq	r1, r3
 800cfb2:	d3cc      	bcc.n	800cf4e <f_open+0x466>
				}
				fp->clust = clst;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cfba:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cfbc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d13e      	bne.n	800d042 <f_open+0x55a>
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	899b      	ldrh	r3, [r3, #12]
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f04f 0400 	mov.w	r4, #0
 800cfce:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	4623      	mov	r3, r4
 800cfd6:	f7f3 f9eb 	bl	80003b0 <__aeabi_uldivmod>
 800cfda:	461c      	mov	r4, r3
 800cfdc:	4613      	mov	r3, r2
 800cfde:	4323      	orrs	r3, r4
 800cfe0:	d02f      	beq.n	800d042 <f_open+0x55a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fc fd3d 	bl	8009a68 <clust2sect>
 800cfee:	66b8      	str	r0, [r7, #104]	; 0x68
 800cff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d103      	bne.n	800cffe <f_open+0x516>
						res = FR_INT_ERR;
 800cff6:	2302      	movs	r3, #2
 800cff8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800cffc:	e021      	b.n	800d042 <f_open+0x55a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	899b      	ldrh	r3, [r3, #12]
 800d002:	b29b      	uxth	r3, r3
 800d004:	f04f 0400 	mov.w	r4, #0
 800d008:	461a      	mov	r2, r3
 800d00a:	4623      	mov	r3, r4
 800d00c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d010:	f7f3 f9ce 	bl	80003b0 <__aeabi_uldivmod>
 800d014:	4603      	mov	r3, r0
 800d016:	460c      	mov	r4, r1
 800d018:	461a      	mov	r2, r3
 800d01a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d01c:	441a      	add	r2, r3
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	7858      	ldrb	r0, [r3, #1]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d030:	2301      	movs	r3, #1
 800d032:	f7fc f829 	bl	8009088 <disk_read>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <f_open+0x55a>
 800d03c:	2301      	movs	r3, #1
 800d03e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d042:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <f_open+0x568>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d050:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800d054:	4618      	mov	r0, r3
 800d056:	3788      	adds	r7, #136	; 0x88
 800d058:	46bd      	mov	sp, r7
 800d05a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800d05e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d05e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d060:	b08d      	sub	sp, #52	; 0x34
 800d062:	af00      	add	r7, sp, #0
 800d064:	60f8      	str	r0, [r7, #12]
 800d066:	60b9      	str	r1, [r7, #8]
 800d068:	607a      	str	r2, [r7, #4]
 800d06a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	2200      	movs	r2, #0
 800d074:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f107 0210 	add.w	r2, r7, #16
 800d07c:	4611      	mov	r1, r2
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff fcb6 	bl	800c9f0 <validate>
 800d084:	4603      	mov	r3, r0
 800d086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d08a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d108      	bne.n	800d0a4 <f_write+0x46>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d09c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <f_write+0x4c>
 800d0a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0a8:	e1ab      	b.n	800d402 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0b0:	f003 0302 	and.w	r3, r3, #2
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d101      	bne.n	800d0bc <f_write+0x5e>
 800d0b8:	2307      	movs	r3, #7
 800d0ba:	e1a2      	b.n	800d402 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	f000 818e 	beq.w	800d3e2 <f_write+0x384>
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	441a      	add	r2, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	f080 8182 	bcs.w	800d3e2 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800d0e4:	43db      	mvns	r3, r3
 800d0e6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d0e8:	e17b      	b.n	800d3e2 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	899b      	ldrh	r3, [r3, #12]
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	f04f 0400 	mov.w	r4, #0
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	4623      	mov	r3, r4
 800d0fe:	f7f3 f957 	bl	80003b0 <__aeabi_uldivmod>
 800d102:	461c      	mov	r4, r3
 800d104:	4613      	mov	r3, r2
 800d106:	4323      	orrs	r3, r4
 800d108:	f040 810c 	bne.w	800d324 <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	899b      	ldrh	r3, [r3, #12]
 800d116:	b29b      	uxth	r3, r3
 800d118:	f04f 0400 	mov.w	r4, #0
 800d11c:	461a      	mov	r2, r3
 800d11e:	4623      	mov	r3, r4
 800d120:	f7f3 f946 	bl	80003b0 <__aeabi_uldivmod>
 800d124:	4603      	mov	r3, r0
 800d126:	460c      	mov	r4, r1
 800d128:	461a      	mov	r2, r3
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	895b      	ldrh	r3, [r3, #10]
 800d12e:	3b01      	subs	r3, #1
 800d130:	4013      	ands	r3, r2
 800d132:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d148      	bne.n	800d1cc <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800d140:	4323      	orrs	r3, r4
 800d142:	d10c      	bne.n	800d15e <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d11c      	bne.n	800d18a <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2100      	movs	r1, #0
 800d154:	4618      	mov	r0, r3
 800d156:	f7fd f92d 	bl	800a3b4 <create_chain>
 800d15a:	62b8      	str	r0, [r7, #40]	; 0x28
 800d15c:	e015      	b.n	800d18a <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d162:	2b00      	cmp	r3, #0
 800d164:	d009      	beq.n	800d17a <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800d16c:	461a      	mov	r2, r3
 800d16e:	4623      	mov	r3, r4
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7fd fa20 	bl	800a5b6 <clmt_clust>
 800d176:	62b8      	str	r0, [r7, #40]	; 0x28
 800d178:	e007      	b.n	800d18a <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d180:	4619      	mov	r1, r3
 800d182:	4610      	mov	r0, r2
 800d184:	f7fd f916 	bl	800a3b4 <create_chain>
 800d188:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f000 812d 	beq.w	800d3ec <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d194:	2b01      	cmp	r3, #1
 800d196:	d105      	bne.n	800d1a4 <f_write+0x146>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2202      	movs	r2, #2
 800d19c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	e12e      	b.n	800d402 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1aa:	d105      	bne.n	800d1b8 <f_write+0x15a>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e124      	b.n	800d402 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1bc:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d102      	bne.n	800d1cc <f_write+0x16e>
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1ca:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1d2:	b25b      	sxtb	r3, r3
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	da1b      	bge.n	800d210 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	7858      	ldrb	r0, [r3, #1]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	f7fb ff6e 	bl	80090c8 <disk_write>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d005      	beq.n	800d1fe <f_write+0x1a0>
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e101      	b.n	800d402 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d210:	693a      	ldr	r2, [r7, #16]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d216:	4619      	mov	r1, r3
 800d218:	4610      	mov	r0, r2
 800d21a:	f7fc fc25 	bl	8009a68 <clust2sect>
 800d21e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d105      	bne.n	800d232 <f_write+0x1d4>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2202      	movs	r2, #2
 800d22a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d22e:	2302      	movs	r3, #2
 800d230:	e0e7      	b.n	800d402 <f_write+0x3a4>
			sect += csect;
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	4413      	add	r3, r2
 800d238:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	899b      	ldrh	r3, [r3, #12]
 800d23e:	461a      	mov	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	fbb3 f3f2 	udiv	r3, r3, r2
 800d246:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d046      	beq.n	800d2dc <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d24e:	69ba      	ldr	r2, [r7, #24]
 800d250:	6a3b      	ldr	r3, [r7, #32]
 800d252:	4413      	add	r3, r2
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	8952      	ldrh	r2, [r2, #10]
 800d258:	4293      	cmp	r3, r2
 800d25a:	d905      	bls.n	800d268 <f_write+0x20a>
					cc = fs->csize - csect;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	895b      	ldrh	r3, [r3, #10]
 800d260:	461a      	mov	r2, r3
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	1ad3      	subs	r3, r2, r3
 800d266:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	7858      	ldrb	r0, [r3, #1]
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	697a      	ldr	r2, [r7, #20]
 800d270:	69f9      	ldr	r1, [r7, #28]
 800d272:	f7fb ff29 	bl	80090c8 <disk_write>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d005      	beq.n	800d288 <f_write+0x22a>
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d284:	2301      	movs	r3, #1
 800d286:	e0bc      	b.n	800d402 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	6a3a      	ldr	r2, [r7, #32]
 800d292:	429a      	cmp	r2, r3
 800d294:	d91a      	bls.n	800d2cc <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	8992      	ldrh	r2, [r2, #12]
 800d2a8:	fb02 f303 	mul.w	r3, r2, r3
 800d2ac:	69fa      	ldr	r2, [r7, #28]
 800d2ae:	18d1      	adds	r1, r2, r3
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	899b      	ldrh	r3, [r3, #12]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	f7fc f90b 	bl	80094d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	899b      	ldrh	r3, [r3, #12]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	fb02 f303 	mul.w	r3, r2, r3
 800d2d8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d2da:	e058      	b.n	800d38e <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2e0:	697a      	ldr	r2, [r7, #20]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d01b      	beq.n	800d31e <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d2f2:	42a2      	cmp	r2, r4
 800d2f4:	bf08      	it	eq
 800d2f6:	4299      	cmpeq	r1, r3
 800d2f8:	d211      	bcs.n	800d31e <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	7858      	ldrb	r0, [r3, #1]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d304:	2301      	movs	r3, #1
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	f7fb febe 	bl	8009088 <disk_read>
 800d30c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d005      	beq.n	800d31e <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2201      	movs	r2, #1
 800d316:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d31a:	2301      	movs	r3, #1
 800d31c:	e071      	b.n	800d402 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	899b      	ldrh	r3, [r3, #12]
 800d328:	4618      	mov	r0, r3
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800d330:	693a      	ldr	r2, [r7, #16]
 800d332:	8992      	ldrh	r2, [r2, #12]
 800d334:	fbb3 f1f2 	udiv	r1, r3, r2
 800d338:	fb02 f201 	mul.w	r2, r2, r1
 800d33c:	1a9b      	subs	r3, r3, r2
 800d33e:	1ac3      	subs	r3, r0, r3
 800d340:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	429a      	cmp	r2, r3
 800d348:	d901      	bls.n	800d34e <f_write+0x2f0>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f103 0554 	add.w	r5, r3, #84	; 0x54
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	899b      	ldrh	r3, [r3, #12]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	f04f 0400 	mov.w	r4, #0
 800d364:	461a      	mov	r2, r3
 800d366:	4623      	mov	r3, r4
 800d368:	f7f3 f822 	bl	80003b0 <__aeabi_uldivmod>
 800d36c:	461c      	mov	r4, r3
 800d36e:	4613      	mov	r3, r2
 800d370:	442b      	add	r3, r5
 800d372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d374:	69f9      	ldr	r1, [r7, #28]
 800d376:	4618      	mov	r0, r3
 800d378:	f7fc f8aa 	bl	80094d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d386:	b2da      	uxtb	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d38e:	69fa      	ldr	r2, [r7, #28]
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d392:	4413      	add	r3, r2
 800d394:	61fb      	str	r3, [r7, #28]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	461d      	mov	r5, r3
 800d3a0:	f04f 0600 	mov.w	r6, #0
 800d3a4:	186b      	adds	r3, r5, r1
 800d3a6:	eb46 0402 	adc.w	r4, r6, r2
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 800d3bc:	4294      	cmp	r4, r2
 800d3be:	bf08      	it	eq
 800d3c0:	428b      	cmpeq	r3, r1
 800d3c2:	d201      	bcs.n	800d3c8 <f_write+0x36a>
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4614      	mov	r4, r2
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	441a      	add	r2, r3
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	601a      	str	r2, [r3, #0]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f47f ae80 	bne.w	800d0ea <f_write+0x8c>
 800d3ea:	e000      	b.n	800d3ee <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d3ec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3734      	adds	r7, #52	; 0x34
 800d406:	46bd      	mov	sp, r7
 800d408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d40a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d40a:	b590      	push	{r4, r7, lr}
 800d40c:	b09b      	sub	sp, #108	; 0x6c
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d418:	4611      	mov	r1, r2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff fae8 	bl	800c9f0 <validate>
 800d420:	4603      	mov	r3, r0
 800d422:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d426:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f040 8109 	bne.w	800d642 <f_sync+0x238>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f000 8101 	beq.w	800d642 <f_sync+0x238>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d446:	b25b      	sxtb	r3, r3
 800d448:	2b00      	cmp	r3, #0
 800d44a:	da17      	bge.n	800d47c <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d44c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d44e:	7858      	ldrb	r0, [r3, #1]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d45a:	2301      	movs	r3, #1
 800d45c:	f7fb fe34 	bl	80090c8 <disk_write>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <f_sync+0x60>
 800d466:	2301      	movs	r3, #1
 800d468:	e0ed      	b.n	800d646 <f_sync+0x23c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d474:	b2da      	uxtb	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d47c:	f7f9 fb9c 	bl	8006bb8 <get_fattime>
 800d480:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	2b04      	cmp	r3, #4
 800d488:	f040 8090 	bne.w	800d5ac <f_sync+0x1a2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fc fe7c 	bl	800a18c <fill_first_frag>
 800d494:	4603      	mov	r3, r0
 800d496:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d49a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d10a      	bne.n	800d4b8 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	f7fc fe9c 	bl	800a1ea <fill_last_frag>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800d4b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f040 80c0 	bne.w	800d642 <f_sync+0x238>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	f107 0308 	add.w	r3, r7, #8
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fd fe64 	bl	800b198 <load_obj_dir>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800d4d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f040 80b1 	bne.w	800d642 <f_sync+0x238>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d4e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4e2:	695b      	ldr	r3, [r3, #20]
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	781a      	ldrb	r2, [r3, #0]
 800d4e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4ea:	695b      	ldr	r3, [r3, #20]
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	f042 0220 	orr.w	r2, r2, #32
 800d4f2:	b2d2      	uxtb	r2, r2
 800d4f4:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	79da      	ldrb	r2, [r3, #7]
 800d4fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	3321      	adds	r3, #33	; 0x21
 800d500:	f042 0201 	orr.w	r2, r2, #1
 800d504:	b2d2      	uxtb	r2, r2
 800d506:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800d508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d50a:	695b      	ldr	r3, [r3, #20]
 800d50c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	4619      	mov	r1, r3
 800d516:	4610      	mov	r0, r2
 800d518:	f7fb ff27 	bl	800936a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800d51c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d51e:	695b      	ldr	r3, [r3, #20]
 800d520:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d52a:	461a      	mov	r2, r3
 800d52c:	4623      	mov	r3, r4
 800d52e:	4608      	mov	r0, r1
 800d530:	f7fb ff47 	bl	80093c2 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800d534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d542:	461a      	mov	r2, r3
 800d544:	4623      	mov	r3, r4
 800d546:	4608      	mov	r0, r1
 800d548:	f7fb ff3b 	bl	80093c2 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d54c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	330c      	adds	r3, #12
 800d552:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d554:	4618      	mov	r0, r3
 800d556:	f7fb ff08 	bl	800936a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d55a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	3315      	adds	r3, #21
 800d560:	2200      	movs	r2, #0
 800d562:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d566:	695b      	ldr	r3, [r3, #20]
 800d568:	3310      	adds	r3, #16
 800d56a:	2100      	movs	r1, #0
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fb fefc 	bl	800936a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d572:	f107 0308 	add.w	r3, r7, #8
 800d576:	4618      	mov	r0, r3
 800d578:	f7fd fe4b 	bl	800b212 <store_xdir>
 800d57c:	4603      	mov	r3, r0
 800d57e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d582:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d586:	2b00      	cmp	r3, #0
 800d588:	d15b      	bne.n	800d642 <f_sync+0x238>
							res = sync_fs(fs);
 800d58a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fc f9fb 	bl	8009988 <sync_fs>
 800d592:	4603      	mov	r3, r0
 800d594:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d59e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d5aa:	e04a      	b.n	800d642 <f_sync+0x238>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d5ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	f7fc f9b9 	bl	800992c <move_window>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d5c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d13c      	bne.n	800d642 <f_sync+0x238>
					dir = fp->dir_ptr;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5cc:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d5ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5d0:	330b      	adds	r3, #11
 800d5d2:	781a      	ldrb	r2, [r3, #0]
 800d5d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5d6:	330b      	adds	r3, #11
 800d5d8:	f042 0220 	orr.w	r2, r2, #32
 800d5dc:	b2d2      	uxtb	r2, r2
 800d5de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6818      	ldr	r0, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d5ec:	f7fd fa1f 	bl	800aa2e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d5f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5f2:	f103 021c 	add.w	r2, r3, #28
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4610      	mov	r0, r2
 800d600:	f7fb feb3 	bl	800936a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d606:	3316      	adds	r3, #22
 800d608:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fb fead 	bl	800936a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d612:	3312      	adds	r3, #18
 800d614:	2100      	movs	r1, #0
 800d616:	4618      	mov	r0, r3
 800d618:	f7fb fe8c 	bl	8009334 <st_word>
					fs->wflag = 1;
 800d61c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d61e:	2201      	movs	r2, #1
 800d620:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d624:	4618      	mov	r0, r3
 800d626:	f7fc f9af 	bl	8009988 <sync_fs>
 800d62a:	4603      	mov	r3, r0
 800d62c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d642:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d646:	4618      	mov	r0, r3
 800d648:	376c      	adds	r7, #108	; 0x6c
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd90      	pop	{r4, r7, pc}

0800d64e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b084      	sub	sp, #16
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff fed7 	bl	800d40a <f_sync>
 800d65c:	4603      	mov	r3, r0
 800d65e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d660:	7bfb      	ldrb	r3, [r7, #15]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d118      	bne.n	800d698 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f107 0208 	add.w	r2, r7, #8
 800d66c:	4611      	mov	r1, r2
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff f9be 	bl	800c9f0 <validate>
 800d674:	4603      	mov	r3, r0
 800d676:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d678:	7bfb      	ldrb	r3, [r7, #15]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10c      	bne.n	800d698 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d682:	4618      	mov	r0, r3
 800d684:	f7fc f8ae 	bl	80097e4 <dec_lock>
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d102      	bne.n	800d698 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d698:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d6a2:	b590      	push	{r4, r7, lr}
 800d6a4:	b087      	sub	sp, #28
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d101      	bne.n	800d6b6 <f_opendir+0x14>
 800d6b2:	2309      	movs	r3, #9
 800d6b4:	e099      	b.n	800d7ea <f_opendir+0x148>

	/* Get logical drive */
	obj = &dp->obj;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d6ba:	f107 010c 	add.w	r1, r7, #12
 800d6be:	463b      	mov	r3, r7
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fe fe02 	bl	800c2cc <find_volume>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6cc:	7dfb      	ldrb	r3, [r7, #23]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	f040 8084 	bne.w	800d7dc <f_opendir+0x13a>
		obj->fs = fs;
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7fe fc9e 	bl	800c020 <follow_path>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d6e8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d171      	bne.n	800d7d2 <f_opendir+0x130>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d6f4:	b25b      	sxtb	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	db46      	blt.n	800d788 <f_opendir+0xe6>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	799b      	ldrb	r3, [r3, #6]
 800d6fe:	f003 0310 	and.w	r3, r3, #16
 800d702:	2b00      	cmp	r3, #0
 800d704:	d03e      	beq.n	800d784 <f_opendir+0xe2>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d12f      	bne.n	800d76e <f_opendir+0xcc>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	689a      	ldr	r2, [r3, #8]
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d71c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	79d2      	ldrb	r2, [r2, #7]
 800d724:	431a      	orrs	r2, r3
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	695b      	ldr	r3, [r3, #20]
 800d736:	3334      	adds	r3, #52	; 0x34
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fb fd1b 	bl	8009174 <ld_dword>
 800d73e:	4602      	mov	r2, r0
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	695b      	ldr	r3, [r3, #20]
 800d748:	3338      	adds	r3, #56	; 0x38
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fb fd35 	bl	80091ba <ld_qword>
 800d750:	4603      	mov	r3, r0
 800d752:	460c      	mov	r4, r1
 800d754:	693a      	ldr	r2, [r7, #16]
 800d756:	e9c2 3404 	strd	r3, r4, [r2, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	695b      	ldr	r3, [r3, #20]
 800d75e:	3321      	adds	r3, #33	; 0x21
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	f003 0302 	and.w	r3, r3, #2
 800d766:	b2da      	uxtb	r2, r3
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	71da      	strb	r2, [r3, #7]
 800d76c:	e00c      	b.n	800d788 <f_opendir+0xe6>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d76e:	68fa      	ldr	r2, [r7, #12]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d774:	4619      	mov	r1, r3
 800d776:	4610      	mov	r0, r2
 800d778:	f7fd f93a 	bl	800a9f0 <ld_clust>
 800d77c:	4602      	mov	r2, r0
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	609a      	str	r2, [r3, #8]
 800d782:	e001      	b.n	800d788 <f_opendir+0xe6>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d784:	2305      	movs	r3, #5
 800d786:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d788:	7dfb      	ldrb	r3, [r7, #23]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d121      	bne.n	800d7d2 <f_opendir+0x130>
				obj->id = fs->id;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	88da      	ldrh	r2, [r3, #6]
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d796:	2100      	movs	r1, #0
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7fc ff53 	bl	800a644 <dir_sdi>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d7a2:	7dfb      	ldrb	r3, [r7, #23]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d114      	bne.n	800d7d2 <f_opendir+0x130>
					if (obj->sclust) {
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00d      	beq.n	800d7cc <f_opendir+0x12a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7fb ff88 	bl	80096c8 <inc_lock>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d105      	bne.n	800d7d2 <f_opendir+0x130>
 800d7c6:	2312      	movs	r3, #18
 800d7c8:	75fb      	strb	r3, [r7, #23]
 800d7ca:	e002      	b.n	800d7d2 <f_opendir+0x130>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d7d2:	7dfb      	ldrb	r3, [r7, #23]
 800d7d4:	2b04      	cmp	r3, #4
 800d7d6:	d101      	bne.n	800d7dc <f_opendir+0x13a>
 800d7d8:	2305      	movs	r3, #5
 800d7da:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d7dc:	7dfb      	ldrb	r3, [r7, #23]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <f_opendir+0x146>
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	371c      	adds	r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd90      	pop	{r4, r7, pc}

0800d7f2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f107 0208 	add.w	r2, r7, #8
 800d800:	4611      	mov	r1, r2
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff f8f4 	bl	800c9f0 <validate>
 800d808:	4603      	mov	r3, r0
 800d80a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d80c:	7bfb      	ldrb	r3, [r7, #15]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d110      	bne.n	800d834 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d816:	2b00      	cmp	r3, #0
 800d818:	d006      	beq.n	800d828 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fb ffe0 	bl	80097e4 <dec_lock>
 800d824:	4603      	mov	r3, r0
 800d826:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d828:	7bfb      	ldrb	r3, [r7, #15]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d102      	bne.n	800d834 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d834:	7bfb      	ldrb	r3, [r7, #15]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b084      	sub	sp, #16
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f107 0208 	add.w	r2, r7, #8
 800d84e:	4611      	mov	r1, r2
 800d850:	4618      	mov	r0, r3
 800d852:	f7ff f8cd 	bl	800c9f0 <validate>
 800d856:	4603      	mov	r3, r0
 800d858:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d85a:	7bfb      	ldrb	r3, [r7, #15]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d126      	bne.n	800d8ae <f_readdir+0x70>
		if (!fno) {
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d106      	bne.n	800d874 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d866:	2100      	movs	r1, #0
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7fc feeb 	bl	800a644 <dir_sdi>
 800d86e:	4603      	mov	r3, r0
 800d870:	73fb      	strb	r3, [r7, #15]
 800d872:	e01c      	b.n	800d8ae <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d874:	2100      	movs	r1, #0
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7fd fd8d 	bl	800b396 <dir_read>
 800d87c:	4603      	mov	r3, r0
 800d87e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d880:	7bfb      	ldrb	r3, [r7, #15]
 800d882:	2b04      	cmp	r3, #4
 800d884:	d101      	bne.n	800d88a <f_readdir+0x4c>
 800d886:	2300      	movs	r3, #0
 800d888:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10e      	bne.n	800d8ae <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d890:	6839      	ldr	r1, [r7, #0]
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7fe f920 	bl	800bad8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d898:	2100      	movs	r1, #0
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7fc ff66 	bl	800a76c <dir_next>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d8a4:	7bfb      	ldrb	r3, [r7, #15]
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	d101      	bne.n	800d8ae <f_readdir+0x70>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b098      	sub	sp, #96	; 0x60
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d8c2:	f107 0108 	add.w	r1, r7, #8
 800d8c6:	1d3b      	adds	r3, r7, #4
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe fcfe 	bl	800c2cc <find_volume>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d11f      	bne.n	800d91e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	f107 0308 	add.w	r3, r7, #8
 800d8e4:	4611      	mov	r1, r2
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fe fb9a 	bl	800c020 <follow_path>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800d8f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d111      	bne.n	800d91e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d8fa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d8fe:	b25b      	sxtb	r3, r3
 800d900:	2b00      	cmp	r3, #0
 800d902:	da03      	bge.n	800d90c <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d904:	2306      	movs	r3, #6
 800d906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d90a:	e008      	b.n	800d91e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d005      	beq.n	800d91e <f_stat+0x66>
 800d912:	f107 0308 	add.w	r3, r7, #8
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fe f8dd 	bl	800bad8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d91e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d922:	4618      	mov	r0, r3
 800d924:	3760      	adds	r7, #96	; 0x60
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b09a      	sub	sp, #104	; 0x68
 800d92e:	af00      	add	r7, sp, #0
 800d930:	60f8      	str	r0, [r7, #12]
 800d932:	60b9      	str	r1, [r7, #8]
 800d934:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d936:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d93a:	f107 030c 	add.w	r3, r7, #12
 800d93e:	2200      	movs	r2, #0
 800d940:	4618      	mov	r0, r3
 800d942:	f7fe fcc3 	bl	800c2cc <find_volume>
 800d946:	4603      	mov	r3, r0
 800d948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d94c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d950:	2b00      	cmp	r3, #0
 800d952:	f040 80eb 	bne.w	800db2c <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d95c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d95e:	69da      	ldr	r2, [r3, #28]
 800d960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d962:	6a1b      	ldr	r3, [r3, #32]
 800d964:	3b02      	subs	r3, #2
 800d966:	429a      	cmp	r2, r3
 800d968:	d804      	bhi.n	800d974 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d96a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d96c:	69da      	ldr	r2, [r3, #28]
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	601a      	str	r2, [r3, #0]
 800d972:	e0db      	b.n	800db2c <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d128      	bne.n	800d9d2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d980:	2302      	movs	r3, #2
 800d982:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d986:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800d988:	f107 0310 	add.w	r3, r7, #16
 800d98c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fc f88a 	bl	8009aa8 <get_fat>
 800d994:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d99c:	d103      	bne.n	800d9a6 <f_getfree+0x7c>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d9a4:	e0b5      	b.n	800db12 <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d103      	bne.n	800d9b4 <f_getfree+0x8a>
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d9b2:	e0ae      	b.n	800db12 <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800d9b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d102      	bne.n	800d9c0 <f_getfree+0x96>
 800d9ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9bc:	3301      	adds	r3, #1
 800d9be:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800d9c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d3db      	bcc.n	800d988 <f_getfree+0x5e>
 800d9d0:	e09f      	b.n	800db12 <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800d9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	2b04      	cmp	r3, #4
 800d9d8:	d14b      	bne.n	800da72 <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800d9da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9dc:	6a1b      	ldr	r3, [r3, #32]
 800d9de:	3b02      	subs	r3, #2
 800d9e0:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800d9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e6:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10d      	bne.n	800da0e <f_getfree+0xe4>
 800d9f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d9f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9f6:	1c5a      	adds	r2, r3, #1
 800d9f8:	65ba      	str	r2, [r7, #88]	; 0x58
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	f7fb ff96 	bl	800992c <move_window>
 800da00:	4603      	mov	r3, r0
 800da02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800da06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d17e      	bne.n	800db0c <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800da0e:	2308      	movs	r3, #8
 800da10:	64bb      	str	r3, [r7, #72]	; 0x48
 800da12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da16:	4413      	add	r3, r2
 800da18:	333c      	adds	r3, #60	; 0x3c
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800da20:	e013      	b.n	800da4a <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800da22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da26:	f003 0301 	and.w	r3, r3, #1
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d102      	bne.n	800da34 <f_getfree+0x10a>
 800da2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da30:	3301      	adds	r3, #1
 800da32:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800da34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da38:	085b      	lsrs	r3, r3, #1
 800da3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800da3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da40:	3b01      	subs	r3, #1
 800da42:	64bb      	str	r3, [r7, #72]	; 0x48
 800da44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da46:	3b01      	subs	r3, #1
 800da48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <f_getfree+0x12c>
 800da50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1e5      	bne.n	800da22 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800da56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da58:	3301      	adds	r3, #1
 800da5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da5c:	8992      	ldrh	r2, [r2, #12]
 800da5e:	fbb3 f1f2 	udiv	r1, r3, r2
 800da62:	fb02 f201 	mul.w	r2, r2, r1
 800da66:	1a9b      	subs	r3, r3, r2
 800da68:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800da6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1bd      	bne.n	800d9ec <f_getfree+0xc2>
 800da70:	e04f      	b.n	800db12 <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800da72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da74:	6a1b      	ldr	r3, [r3, #32]
 800da76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7c:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	657b      	str	r3, [r7, #84]	; 0x54
 800da82:	2300      	movs	r3, #0
 800da84:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800da86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d113      	bne.n	800dab4 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800da8c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800da8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da90:	1c5a      	adds	r2, r3, #1
 800da92:	65ba      	str	r2, [r7, #88]	; 0x58
 800da94:	4619      	mov	r1, r3
 800da96:	f7fb ff49 	bl	800992c <move_window>
 800da9a:	4603      	mov	r3, r0
 800da9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800daa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d133      	bne.n	800db10 <f_getfree+0x1e6>
							p = fs->win;
 800daa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daaa:	333c      	adds	r3, #60	; 0x3c
 800daac:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800daae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dab0:	899b      	ldrh	r3, [r3, #12]
 800dab2:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800dab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d10f      	bne.n	800dadc <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800dabc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dabe:	f7fb fb41 	bl	8009144 <ld_word>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d102      	bne.n	800dace <f_getfree+0x1a4>
 800dac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daca:	3301      	adds	r3, #1
 800dacc:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800dace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dad0:	3302      	adds	r3, #2
 800dad2:	653b      	str	r3, [r7, #80]	; 0x50
 800dad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dad6:	3b02      	subs	r3, #2
 800dad8:	657b      	str	r3, [r7, #84]	; 0x54
 800dada:	e010      	b.n	800dafe <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800dadc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dade:	f7fb fb49 	bl	8009174 <ld_dword>
 800dae2:	4603      	mov	r3, r0
 800dae4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <f_getfree+0x1c8>
 800daec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daee:	3301      	adds	r3, #1
 800daf0:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800daf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daf4:	3304      	adds	r3, #4
 800daf6:	653b      	str	r3, [r7, #80]	; 0x50
 800daf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dafa:	3b04      	subs	r3, #4
 800dafc:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800dafe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db00:	3b01      	subs	r3, #1
 800db02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1bd      	bne.n	800da86 <f_getfree+0x15c>
 800db0a:	e002      	b.n	800db12 <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800db0c:	bf00      	nop
 800db0e:	e000      	b.n	800db12 <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800db10:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db16:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800db18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db1c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800db1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db20:	791a      	ldrb	r2, [r3, #4]
 800db22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db24:	f042 0201 	orr.w	r2, r2, #1
 800db28:	b2d2      	uxtb	r2, r2
 800db2a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800db2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800db30:	4618      	mov	r0, r3
 800db32:	3768      	adds	r7, #104	; 0x68
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800db38:	b590      	push	{r4, r7, lr}
 800db3a:	b0a1      	sub	sp, #132	; 0x84
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800db40:	f107 010c 	add.w	r1, r7, #12
 800db44:	1d3b      	adds	r3, r7, #4
 800db46:	2202      	movs	r2, #2
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fe fbbf 	bl	800c2cc <find_volume>
 800db4e:	4603      	mov	r3, r0
 800db50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800db58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f040 8132 	bne.w	800ddc6 <f_mkdir+0x28e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	f107 0310 	add.w	r3, r7, #16
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fa58 	bl	800c020 <follow_path>
 800db70:	4603      	mov	r3, r0
 800db72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800db76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d102      	bne.n	800db84 <f_mkdir+0x4c>
 800db7e:	2308      	movs	r3, #8
 800db80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800db84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db88:	2b04      	cmp	r3, #4
 800db8a:	f040 811c 	bne.w	800ddc6 <f_mkdir+0x28e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800db8e:	f107 0310 	add.w	r3, r7, #16
 800db92:	2100      	movs	r1, #0
 800db94:	4618      	mov	r0, r3
 800db96:	f7fc fc0d 	bl	800a3b4 <create_chain>
 800db9a:	66f8      	str	r0, [r7, #108]	; 0x6c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	895b      	ldrh	r3, [r3, #10]
 800dba0:	461a      	mov	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	899b      	ldrh	r3, [r3, #12]
 800dba6:	fb03 f302 	mul.w	r3, r3, r2
 800dbaa:	f04f 0400 	mov.w	r4, #0
 800dbae:	e9c7 3408 	strd	r3, r4, [r7, #32]
			res = FR_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800dbb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d102      	bne.n	800dbc4 <f_mkdir+0x8c>
 800dbbe:	2307      	movs	r3, #7
 800dbc0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 800dbc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d102      	bne.n	800dbd0 <f_mkdir+0x98>
 800dbca:	2302      	movs	r3, #2
 800dbcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dbd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd6:	d102      	bne.n	800dbde <f_mkdir+0xa6>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800dbde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d106      	bne.n	800dbf4 <f_mkdir+0xbc>
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7fb fe5b 	bl	80098a4 <sync_window>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 800dbf4:	f7f8 ffe0 	bl	8006bb8 <get_fattime>
 800dbf8:	66b8      	str	r0, [r7, #104]	; 0x68
			if (res == FR_OK) {					/* Initialize the new directory table */
 800dbfa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d170      	bne.n	800dce4 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fb ff2e 	bl	8009a68 <clust2sect>
 800dc0c:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	333c      	adds	r3, #60	; 0x3c
 800dc12:	667b      	str	r3, [r7, #100]	; 0x64
				mem_set(dir, 0, SS(fs));
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	899b      	ldrh	r3, [r3, #12]
 800dc18:	461a      	mov	r2, r3
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dc1e:	f7fb fc78 	bl	8009512 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	2b04      	cmp	r3, #4
 800dc28:	d036      	beq.n	800dc98 <f_mkdir+0x160>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800dc2a:	220b      	movs	r2, #11
 800dc2c:	2120      	movs	r1, #32
 800dc2e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dc30:	f7fb fc6f 	bl	8009512 <mem_set>
					dir[DIR_Name] = '.';
 800dc34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc36:	222e      	movs	r2, #46	; 0x2e
 800dc38:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800dc3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc3c:	330b      	adds	r3, #11
 800dc3e:	2210      	movs	r2, #16
 800dc40:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800dc42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc44:	3316      	adds	r3, #22
 800dc46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7fb fb8e 	bl	800936a <st_dword>
					st_clust(fs, dir, dcl);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dc52:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fc feea 	bl	800aa2e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800dc5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc5c:	3320      	adds	r3, #32
 800dc5e:	2220      	movs	r2, #32
 800dc60:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fb fc34 	bl	80094d0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800dc68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc6a:	3321      	adds	r3, #33	; 0x21
 800dc6c:	222e      	movs	r2, #46	; 0x2e
 800dc6e:	701a      	strb	r2, [r3, #0]
 800dc70:	69bb      	ldr	r3, [r7, #24]
 800dc72:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b03      	cmp	r3, #3
 800dc7a:	d106      	bne.n	800dc8a <f_mkdir+0x152>
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d101      	bne.n	800dc8a <f_mkdir+0x152>
 800dc86:	2300      	movs	r3, #0
 800dc88:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc8e:	3320      	adds	r3, #32
 800dc90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dc92:	4619      	mov	r1, r3
 800dc94:	f7fc fecb 	bl	800aa2e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	895b      	ldrh	r3, [r3, #10]
 800dc9c:	67bb      	str	r3, [r7, #120]	; 0x78
 800dc9e:	e01c      	b.n	800dcda <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 800dca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	677a      	str	r2, [r7, #116]	; 0x74
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2201      	movs	r2, #1
 800dcae:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fb fdf6 	bl	80098a4 <sync_window>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 800dcbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10d      	bne.n	800dce2 <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	899b      	ldrh	r3, [r3, #12]
 800dcca:	461a      	mov	r2, r3
 800dccc:	2100      	movs	r1, #0
 800dcce:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dcd0:	f7fb fc1f 	bl	8009512 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800dcd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	67bb      	str	r3, [r7, #120]	; 0x78
 800dcda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1df      	bne.n	800dca0 <f_mkdir+0x168>
 800dce0:	e000      	b.n	800dce4 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 800dce2:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800dce4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d107      	bne.n	800dcfc <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800dcec:	f107 0310 	add.w	r3, r7, #16
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fd fd41 	bl	800b778 <dir_register>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 800dcfc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d159      	bne.n	800ddb8 <f_mkdir+0x280>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b04      	cmp	r3, #4
 800dd0a:	d134      	bne.n	800dd76 <f_mkdir+0x23e>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	695b      	ldr	r3, [r3, #20]
 800dd10:	330c      	adds	r3, #12
 800dd12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fb fb28 	bl	800936a <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	3334      	adds	r3, #52	; 0x34
 800dd20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fb fb21 	bl	800936a <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	695b      	ldr	r3, [r3, #20]
 800dd2c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dd30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dd34:	4619      	mov	r1, r3
 800dd36:	4610      	mov	r0, r2
 800dd38:	f7fb fb17 	bl	800936a <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	695b      	ldr	r3, [r3, #20]
 800dd40:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800dd44:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dd48:	4619      	mov	r1, r3
 800dd4a:	4610      	mov	r0, r2
 800dd4c:	f7fb fb0d 	bl	800936a <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	695b      	ldr	r3, [r3, #20]
 800dd54:	3321      	adds	r3, #33	; 0x21
 800dd56:	2203      	movs	r2, #3
 800dd58:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	695b      	ldr	r3, [r3, #20]
 800dd5e:	3304      	adds	r3, #4
 800dd60:	2210      	movs	r2, #16
 800dd62:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800dd64:	f107 0310 	add.w	r3, r7, #16
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fd fa52 	bl	800b212 <store_xdir>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dd74:	e014      	b.n	800dda0 <f_mkdir+0x268>
				} else
#endif
				{
					dir = dj.dir;
 800dd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd78:	667b      	str	r3, [r7, #100]	; 0x64
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800dd7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd7c:	3316      	adds	r3, #22
 800dd7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fb faf2 	bl	800936a <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd8a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fc fe4e 	bl	800aa2e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800dd92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd94:	330b      	adds	r3, #11
 800dd96:	2210      	movs	r2, #16
 800dd98:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800dda0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10e      	bne.n	800ddc6 <f_mkdir+0x28e>
					res = sync_fs(fs);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fb fdec 	bl	8009988 <sync_fs>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ddb6:	e006      	b.n	800ddc6 <f_mkdir+0x28e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800ddb8:	f107 0310 	add.w	r3, r7, #16
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fc fa43 	bl	800a24c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ddc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3784      	adds	r7, #132	; 0x84
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd90      	pop	{r4, r7, pc}
	...

0800ddd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b087      	sub	sp, #28
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	4613      	mov	r3, r2
 800dde0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dde2:	2301      	movs	r3, #1
 800dde4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ddea:	4b1f      	ldr	r3, [pc, #124]	; (800de68 <FATFS_LinkDriverEx+0x94>)
 800ddec:	7a5b      	ldrb	r3, [r3, #9]
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d131      	bne.n	800de58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ddf4:	4b1c      	ldr	r3, [pc, #112]	; (800de68 <FATFS_LinkDriverEx+0x94>)
 800ddf6:	7a5b      	ldrb	r3, [r3, #9]
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	4b1a      	ldr	r3, [pc, #104]	; (800de68 <FATFS_LinkDriverEx+0x94>)
 800ddfe:	2100      	movs	r1, #0
 800de00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800de02:	4b19      	ldr	r3, [pc, #100]	; (800de68 <FATFS_LinkDriverEx+0x94>)
 800de04:	7a5b      	ldrb	r3, [r3, #9]
 800de06:	b2db      	uxtb	r3, r3
 800de08:	4a17      	ldr	r2, [pc, #92]	; (800de68 <FATFS_LinkDriverEx+0x94>)
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800de12:	4b15      	ldr	r3, [pc, #84]	; (800de68 <FATFS_LinkDriverEx+0x94>)
 800de14:	7a5b      	ldrb	r3, [r3, #9]
 800de16:	b2db      	uxtb	r3, r3
 800de18:	461a      	mov	r2, r3
 800de1a:	4b13      	ldr	r3, [pc, #76]	; (800de68 <FATFS_LinkDriverEx+0x94>)
 800de1c:	4413      	add	r3, r2
 800de1e:	79fa      	ldrb	r2, [r7, #7]
 800de20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800de22:	4b11      	ldr	r3, [pc, #68]	; (800de68 <FATFS_LinkDriverEx+0x94>)
 800de24:	7a5b      	ldrb	r3, [r3, #9]
 800de26:	b2db      	uxtb	r3, r3
 800de28:	1c5a      	adds	r2, r3, #1
 800de2a:	b2d1      	uxtb	r1, r2
 800de2c:	4a0e      	ldr	r2, [pc, #56]	; (800de68 <FATFS_LinkDriverEx+0x94>)
 800de2e:	7251      	strb	r1, [r2, #9]
 800de30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800de32:	7dbb      	ldrb	r3, [r7, #22]
 800de34:	3330      	adds	r3, #48	; 0x30
 800de36:	b2da      	uxtb	r2, r3
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	3301      	adds	r3, #1
 800de40:	223a      	movs	r2, #58	; 0x3a
 800de42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	3302      	adds	r3, #2
 800de48:	222f      	movs	r2, #47	; 0x2f
 800de4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	3303      	adds	r3, #3
 800de50:	2200      	movs	r2, #0
 800de52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800de54:	2300      	movs	r3, #0
 800de56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800de58:	7dfb      	ldrb	r3, [r7, #23]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	371c      	adds	r7, #28
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	20000544 	.word	0x20000544

0800de6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800de76:	2200      	movs	r2, #0
 800de78:	6839      	ldr	r1, [r7, #0]
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f7ff ffaa 	bl	800ddd4 <FATFS_LinkDriverEx>
 800de80:	4603      	mov	r3, r0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
	...

0800de8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800de90:	2201      	movs	r2, #1
 800de92:	490e      	ldr	r1, [pc, #56]	; (800decc <MX_USB_HOST_Init+0x40>)
 800de94:	480e      	ldr	r0, [pc, #56]	; (800ded0 <MX_USB_HOST_Init+0x44>)
 800de96:	f7f8 ffa5 	bl	8006de4 <USBH_Init>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d001      	beq.n	800dea4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dea0:	f7f3 fa1e 	bl	80012e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dea4:	490b      	ldr	r1, [pc, #44]	; (800ded4 <MX_USB_HOST_Init+0x48>)
 800dea6:	480a      	ldr	r0, [pc, #40]	; (800ded0 <MX_USB_HOST_Init+0x44>)
 800dea8:	f7f9 f82a 	bl	8006f00 <USBH_RegisterClass>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d001      	beq.n	800deb6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800deb2:	f7f3 fa15 	bl	80012e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800deb6:	4806      	ldr	r0, [pc, #24]	; (800ded0 <MX_USB_HOST_Init+0x44>)
 800deb8:	f7f9 f8ae 	bl	8007018 <USBH_Start>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dec2:	f7f3 fa0d 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dec6:	bf00      	nop
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	0800ded9 	.word	0x0800ded9
 800ded0:	200027d0 	.word	0x200027d0
 800ded4:	20000010 	.word	0x20000010

0800ded8 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	460b      	mov	r3, r1
 800dee2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
	Send_Uart("USBH_UserProcess...\n");
 800dee4:	4827      	ldr	r0, [pc, #156]	; (800df84 <USBH_UserProcess+0xac>)
 800dee6:	f7f2 fc7d 	bl	80007e4 <Send_Uart>
  switch(id)
 800deea:	78fb      	ldrb	r3, [r7, #3]
 800deec:	3b01      	subs	r3, #1
 800deee:	2b04      	cmp	r3, #4
 800def0:	d843      	bhi.n	800df7a <USBH_UserProcess+0xa2>
 800def2:	a201      	add	r2, pc, #4	; (adr r2, 800def8 <USBH_UserProcess+0x20>)
 800def4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def8:	0800df7b 	.word	0x0800df7b
 800defc:	0800df19 	.word	0x0800df19
 800df00:	0800df7b 	.word	0x0800df7b
 800df04:	0800df73 	.word	0x0800df73
 800df08:	0800df0d 	.word	0x0800df0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800df0c:	4b1e      	ldr	r3, [pc, #120]	; (800df88 <USBH_UserProcess+0xb0>)
 800df0e:	2203      	movs	r2, #3
 800df10:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800df12:	f7f2 fc9f 	bl	8000854 <Unmount_USB>
  break;
 800df16:	e031      	b.n	800df7c <USBH_UserProcess+0xa4>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800df18:	4b1b      	ldr	r3, [pc, #108]	; (800df88 <USBH_UserProcess+0xb0>)
 800df1a:	2202      	movs	r2, #2
 800df1c:	701a      	strb	r2, [r3, #0]

  Mount_USB();
 800df1e:	f7f2 fc77 	bl	8000810 <Mount_USB>

  Check_USB_Details();   // check space details
 800df22:	f7f2 ffd3 	bl	8000ecc <Check_USB_Details>

  Scan_USB("/");   // scan for files and directories
 800df26:	4819      	ldr	r0, [pc, #100]	; (800df8c <USBH_UserProcess+0xb4>)
 800df28:	f7f2 fcb4 	bl	8000894 <Scan_USB>

  Create_File("/ROOTFILE.txt");
 800df2c:	4818      	ldr	r0, [pc, #96]	; (800df90 <USBH_UserProcess+0xb8>)
 800df2e:	f7f2 fe19 	bl	8000b64 <Create_File>
  Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 800df32:	4918      	ldr	r1, [pc, #96]	; (800df94 <USBH_UserProcess+0xbc>)
 800df34:	4816      	ldr	r0, [pc, #88]	; (800df90 <USBH_UserProcess+0xb8>)
 800df36:	f7f2 fd51 	bl	80009dc <Write_File>

  Create_Dir("/DIR1");
 800df3a:	4817      	ldr	r0, [pc, #92]	; (800df98 <USBH_UserProcess+0xc0>)
 800df3c:	f7f2 ff86 	bl	8000e4c <Create_Dir>
  Create_File("/DIR1/DIR1FILE.txt");
 800df40:	4816      	ldr	r0, [pc, #88]	; (800df9c <USBH_UserProcess+0xc4>)
 800df42:	f7f2 fe0f 	bl	8000b64 <Create_File>
  Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 800df46:	4916      	ldr	r1, [pc, #88]	; (800dfa0 <USBH_UserProcess+0xc8>)
 800df48:	4814      	ldr	r0, [pc, #80]	; (800df9c <USBH_UserProcess+0xc4>)
 800df4a:	f7f2 fd47 	bl	80009dc <Write_File>

  Create_Dir("/DIR2");
 800df4e:	4815      	ldr	r0, [pc, #84]	; (800dfa4 <USBH_UserProcess+0xcc>)
 800df50:	f7f2 ff7c 	bl	8000e4c <Create_Dir>
  Create_Dir("/DIR2/SUBDIR1");
 800df54:	4814      	ldr	r0, [pc, #80]	; (800dfa8 <USBH_UserProcess+0xd0>)
 800df56:	f7f2 ff79 	bl	8000e4c <Create_Dir>
  Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 800df5a:	4814      	ldr	r0, [pc, #80]	; (800dfac <USBH_UserProcess+0xd4>)
 800df5c:	f7f2 fe02 	bl	8000b64 <Create_File>
  Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 800df60:	4913      	ldr	r1, [pc, #76]	; (800dfb0 <USBH_UserProcess+0xd8>)
 800df62:	4812      	ldr	r0, [pc, #72]	; (800dfac <USBH_UserProcess+0xd4>)
 800df64:	f7f2 fd3a 	bl	80009dc <Write_File>

  Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 800df68:	4912      	ldr	r1, [pc, #72]	; (800dfb4 <USBH_UserProcess+0xdc>)
 800df6a:	4809      	ldr	r0, [pc, #36]	; (800df90 <USBH_UserProcess+0xb8>)
 800df6c:	f7f2 fe96 	bl	8000c9c <Update_File>
  break;
 800df70:	e004      	b.n	800df7c <USBH_UserProcess+0xa4>


  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800df72:	4b05      	ldr	r3, [pc, #20]	; (800df88 <USBH_UserProcess+0xb0>)
 800df74:	2201      	movs	r2, #1
 800df76:	701a      	strb	r2, [r3, #0]
  break;
 800df78:	e000      	b.n	800df7c <USBH_UserProcess+0xa4>

  default:
  break;
 800df7a:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800df7c:	bf00      	nop
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	0800f2c8 	.word	0x0800f2c8
 800df88:	20000550 	.word	0x20000550
 800df8c:	0800f2e0 	.word	0x0800f2e0
 800df90:	0800f2e4 	.word	0x0800f2e4
 800df94:	0800f2f4 	.word	0x0800f2f4
 800df98:	0800f318 	.word	0x0800f318
 800df9c:	0800f320 	.word	0x0800f320
 800dfa0:	0800f334 	.word	0x0800f334
 800dfa4:	0800f358 	.word	0x0800f358
 800dfa8:	0800f360 	.word	0x0800f360
 800dfac:	0800f370 	.word	0x0800f370
 800dfb0:	0800f38c 	.word	0x0800f38c
 800dfb4:	0800f3f0 	.word	0x0800f3f0

0800dfb8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b08a      	sub	sp, #40	; 0x28
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfc0:	f107 0314 	add.w	r3, r7, #20
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	601a      	str	r2, [r3, #0]
 800dfc8:	605a      	str	r2, [r3, #4]
 800dfca:	609a      	str	r2, [r3, #8]
 800dfcc:	60da      	str	r2, [r3, #12]
 800dfce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a25      	ldr	r2, [pc, #148]	; (800e06c <HAL_HCD_MspInit+0xb4>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d143      	bne.n	800e062 <HAL_HCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfda:	4b25      	ldr	r3, [pc, #148]	; (800e070 <HAL_HCD_MspInit+0xb8>)
 800dfdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfe0:	4a23      	ldr	r2, [pc, #140]	; (800e070 <HAL_HCD_MspInit+0xb8>)
 800dfe2:	f043 0301 	orr.w	r3, r3, #1
 800dfe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dfea:	4b21      	ldr	r3, [pc, #132]	; (800e070 <HAL_HCD_MspInit+0xb8>)
 800dfec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dff0:	f003 0301 	and.w	r3, r3, #1
 800dff4:	613b      	str	r3, [r7, #16]
 800dff6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dffe:	2300      	movs	r3, #0
 800e000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e002:	2300      	movs	r3, #0
 800e004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e006:	f107 0314 	add.w	r3, r7, #20
 800e00a:	4619      	mov	r1, r3
 800e00c:	4819      	ldr	r0, [pc, #100]	; (800e074 <HAL_HCD_MspInit+0xbc>)
 800e00e:	f7f3 fc37 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800e012:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e018:	2302      	movs	r3, #2
 800e01a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e01c:	2300      	movs	r3, #0
 800e01e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e020:	2300      	movs	r3, #0
 800e022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e024:	230a      	movs	r3, #10
 800e026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e028:	f107 0314 	add.w	r3, r7, #20
 800e02c:	4619      	mov	r1, r3
 800e02e:	4811      	ldr	r0, [pc, #68]	; (800e074 <HAL_HCD_MspInit+0xbc>)
 800e030:	f7f3 fc26 	bl	8001880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e034:	4b0e      	ldr	r3, [pc, #56]	; (800e070 <HAL_HCD_MspInit+0xb8>)
 800e036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e03a:	4a0d      	ldr	r2, [pc, #52]	; (800e070 <HAL_HCD_MspInit+0xb8>)
 800e03c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e040:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e044:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <HAL_HCD_MspInit+0xb8>)
 800e046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e04a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e04e:	60fb      	str	r3, [r7, #12]
 800e050:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e052:	2200      	movs	r2, #0
 800e054:	2100      	movs	r1, #0
 800e056:	2065      	movs	r0, #101	; 0x65
 800e058:	f7f3 fbdd 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e05c:	2065      	movs	r0, #101	; 0x65
 800e05e:	f7f3 fbf4 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e062:	bf00      	nop
 800e064:	3728      	adds	r7, #40	; 0x28
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	40080000 	.word	0x40080000
 800e070:	58024400 	.word	0x58024400
 800e074:	58020000 	.word	0x58020000

0800e078 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e086:	4618      	mov	r0, r3
 800e088:	f7f8 ffe5 	bl	8007056 <USBH_LL_IncTimer>
}
 800e08c:	bf00      	nop
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7f9 f81d 	bl	80070e2 <USBH_LL_Connect>
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7f9 f826 	bl	8007110 <USBH_LL_Disconnect>
}
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	70fb      	strb	r3, [r7, #3]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7f8 ffd7 	bl	80070aa <USBH_LL_PortEnabled>
}
 800e0fc:	bf00      	nop
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e112:	4618      	mov	r0, r3
 800e114:	f7f8 ffd7 	bl	80070c6 <USBH_LL_PortDisabled>
}
 800e118:	bf00      	nop
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d129      	bne.n	800e186 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e132:	4a17      	ldr	r2, [pc, #92]	; (800e190 <USBH_LL_Init+0x70>)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4a14      	ldr	r2, [pc, #80]	; (800e190 <USBH_LL_Init+0x70>)
 800e13e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e142:	4b13      	ldr	r3, [pc, #76]	; (800e190 <USBH_LL_Init+0x70>)
 800e144:	4a13      	ldr	r2, [pc, #76]	; (800e194 <USBH_LL_Init+0x74>)
 800e146:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800e148:	4b11      	ldr	r3, [pc, #68]	; (800e190 <USBH_LL_Init+0x70>)
 800e14a:	2210      	movs	r2, #16
 800e14c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e14e:	4b10      	ldr	r3, [pc, #64]	; (800e190 <USBH_LL_Init+0x70>)
 800e150:	2201      	movs	r2, #1
 800e152:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e154:	4b0e      	ldr	r3, [pc, #56]	; (800e190 <USBH_LL_Init+0x70>)
 800e156:	2200      	movs	r2, #0
 800e158:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e15a:	4b0d      	ldr	r3, [pc, #52]	; (800e190 <USBH_LL_Init+0x70>)
 800e15c:	2202      	movs	r2, #2
 800e15e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e160:	4b0b      	ldr	r3, [pc, #44]	; (800e190 <USBH_LL_Init+0x70>)
 800e162:	2200      	movs	r2, #0
 800e164:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e166:	480a      	ldr	r0, [pc, #40]	; (800e190 <USBH_LL_Init+0x70>)
 800e168:	f7f3 fd53 	bl	8001c12 <HAL_HCD_Init>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 800e172:	f7f3 f8b5 	bl	80012e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e176:	4806      	ldr	r0, [pc, #24]	; (800e190 <USBH_LL_Init+0x70>)
 800e178:	f7f4 f948 	bl	800240c <HAL_HCD_GetCurrentFrame>
 800e17c:	4603      	mov	r3, r0
 800e17e:	4619      	mov	r1, r3
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7f8 ff59 	bl	8007038 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20002ba8 	.word	0x20002ba8
 800e194:	40080000 	.word	0x40080000

0800e198 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7f4 f8c2 	bl	8002338 <HAL_HCD_Start>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e1b8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f000 f944 	bl	800e448 <USBH_Get_USB_Status>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b084      	sub	sp, #16
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7f4 f8ca 	bl	800237e <HAL_HCD_Stop>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e1ee:	7bfb      	ldrb	r3, [r7, #15]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f000 f929 	bl	800e448 <USBH_Get_USB_Status>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	460b      	mov	r3, r1
 800e20e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e216:	78fa      	ldrb	r2, [r7, #3]
 800e218:	4611      	mov	r1, r2
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7f4 f8e1 	bl	80023e2 <HAL_HCD_HC_GetXferCount>
 800e220:	4603      	mov	r3, r0
}
 800e222:	4618      	mov	r0, r3
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e22a:	b590      	push	{r4, r7, lr}
 800e22c:	b089      	sub	sp, #36	; 0x24
 800e22e:	af04      	add	r7, sp, #16
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	4608      	mov	r0, r1
 800e234:	4611      	mov	r1, r2
 800e236:	461a      	mov	r2, r3
 800e238:	4603      	mov	r3, r0
 800e23a:	70fb      	strb	r3, [r7, #3]
 800e23c:	460b      	mov	r3, r1
 800e23e:	70bb      	strb	r3, [r7, #2]
 800e240:	4613      	mov	r3, r2
 800e242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e248:	2300      	movs	r3, #0
 800e24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e252:	787c      	ldrb	r4, [r7, #1]
 800e254:	78ba      	ldrb	r2, [r7, #2]
 800e256:	78f9      	ldrb	r1, [r7, #3]
 800e258:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e25a:	9302      	str	r3, [sp, #8]
 800e25c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	4623      	mov	r3, r4
 800e26a:	f7f3 fd34 	bl	8001cd6 <HAL_HCD_HC_Init>
 800e26e:	4603      	mov	r3, r0
 800e270:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e272:	7bfb      	ldrb	r3, [r7, #15]
 800e274:	4618      	mov	r0, r3
 800e276:	f000 f8e7 	bl	800e448 <USBH_Get_USB_Status>
 800e27a:	4603      	mov	r3, r0
 800e27c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e27e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e280:	4618      	mov	r0, r3
 800e282:	3714      	adds	r7, #20
 800e284:	46bd      	mov	sp, r7
 800e286:	bd90      	pop	{r4, r7, pc}

0800e288 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	460b      	mov	r3, r1
 800e292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e298:	2300      	movs	r3, #0
 800e29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2a2:	78fa      	ldrb	r2, [r7, #3]
 800e2a4:	4611      	mov	r1, r2
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7f3 fdad 	bl	8001e06 <HAL_HCD_HC_Halt>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2b0:	7bfb      	ldrb	r3, [r7, #15]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f000 f8c8 	bl	800e448 <USBH_Get_USB_Status>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e2c6:	b590      	push	{r4, r7, lr}
 800e2c8:	b089      	sub	sp, #36	; 0x24
 800e2ca:	af04      	add	r7, sp, #16
 800e2cc:	6078      	str	r0, [r7, #4]
 800e2ce:	4608      	mov	r0, r1
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	70fb      	strb	r3, [r7, #3]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	70bb      	strb	r3, [r7, #2]
 800e2dc:	4613      	mov	r3, r2
 800e2de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e2ee:	787c      	ldrb	r4, [r7, #1]
 800e2f0:	78ba      	ldrb	r2, [r7, #2]
 800e2f2:	78f9      	ldrb	r1, [r7, #3]
 800e2f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e2f8:	9303      	str	r3, [sp, #12]
 800e2fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2fc:	9302      	str	r3, [sp, #8]
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e300:	9301      	str	r3, [sp, #4]
 800e302:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	4623      	mov	r3, r4
 800e30a:	f7f3 fd9f 	bl	8001e4c <HAL_HCD_HC_SubmitRequest>
 800e30e:	4603      	mov	r3, r0
 800e310:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e312:	7bfb      	ldrb	r3, [r7, #15]
 800e314:	4618      	mov	r0, r3
 800e316:	f000 f897 	bl	800e448 <USBH_Get_USB_Status>
 800e31a:	4603      	mov	r3, r0
 800e31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e31e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3714      	adds	r7, #20
 800e324:	46bd      	mov	sp, r7
 800e326:	bd90      	pop	{r4, r7, pc}

0800e328 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	460b      	mov	r3, r1
 800e332:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e33a:	78fa      	ldrb	r2, [r7, #3]
 800e33c:	4611      	mov	r1, r2
 800e33e:	4618      	mov	r0, r3
 800e340:	f7f4 f83a 	bl	80023b8 <HAL_HCD_HC_GetURBState>
 800e344:	4603      	mov	r3, r0
}
 800e346:	4618      	mov	r0, r3
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e34e:	b580      	push	{r7, lr}
 800e350:	b082      	sub	sp, #8
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
 800e356:	460b      	mov	r3, r1
 800e358:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e360:	2b01      	cmp	r3, #1
 800e362:	d103      	bne.n	800e36c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e364:	78fb      	ldrb	r3, [r7, #3]
 800e366:	4618      	mov	r0, r3
 800e368:	f000 f89a 	bl	800e4a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e36c:	20c8      	movs	r0, #200	; 0xc8
 800e36e:	f7f3 f949 	bl	8001604 <HAL_Delay>
  return USBH_OK;
 800e372:	2300      	movs	r3, #0
}
 800e374:	4618      	mov	r0, r3
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b085      	sub	sp, #20
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	460b      	mov	r3, r1
 800e386:	70fb      	strb	r3, [r7, #3]
 800e388:	4613      	mov	r3, r2
 800e38a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e392:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e394:	78fa      	ldrb	r2, [r7, #3]
 800e396:	68f9      	ldr	r1, [r7, #12]
 800e398:	4613      	mov	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	4413      	add	r3, r2
 800e39e:	00db      	lsls	r3, r3, #3
 800e3a0:	440b      	add	r3, r1
 800e3a2:	333b      	adds	r3, #59	; 0x3b
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00a      	beq.n	800e3c0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e3aa:	78fa      	ldrb	r2, [r7, #3]
 800e3ac:	68f9      	ldr	r1, [r7, #12]
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	4413      	add	r3, r2
 800e3b4:	00db      	lsls	r3, r3, #3
 800e3b6:	440b      	add	r3, r1
 800e3b8:	3350      	adds	r3, #80	; 0x50
 800e3ba:	78ba      	ldrb	r2, [r7, #2]
 800e3bc:	701a      	strb	r2, [r3, #0]
 800e3be:	e009      	b.n	800e3d4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e3c0:	78fa      	ldrb	r2, [r7, #3]
 800e3c2:	68f9      	ldr	r1, [r7, #12]
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	00db      	lsls	r3, r3, #3
 800e3cc:	440b      	add	r3, r1
 800e3ce:	3351      	adds	r3, #81	; 0x51
 800e3d0:	78ba      	ldrb	r2, [r7, #2]
 800e3d2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e3d4:	2300      	movs	r3, #0
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3714      	adds	r7, #20
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr

0800e3e2 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e3e2:	b480      	push	{r7}
 800e3e4:	b085      	sub	sp, #20
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3f8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e3fa:	78fa      	ldrb	r2, [r7, #3]
 800e3fc:	68b9      	ldr	r1, [r7, #8]
 800e3fe:	4613      	mov	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4413      	add	r3, r2
 800e404:	00db      	lsls	r3, r3, #3
 800e406:	440b      	add	r3, r1
 800e408:	333b      	adds	r3, #59	; 0x3b
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d00a      	beq.n	800e426 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e410:	78fa      	ldrb	r2, [r7, #3]
 800e412:	68b9      	ldr	r1, [r7, #8]
 800e414:	4613      	mov	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	4413      	add	r3, r2
 800e41a:	00db      	lsls	r3, r3, #3
 800e41c:	440b      	add	r3, r1
 800e41e:	3350      	adds	r3, #80	; 0x50
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	73fb      	strb	r3, [r7, #15]
 800e424:	e009      	b.n	800e43a <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e426:	78fa      	ldrb	r2, [r7, #3]
 800e428:	68b9      	ldr	r1, [r7, #8]
 800e42a:	4613      	mov	r3, r2
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	4413      	add	r3, r2
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	440b      	add	r3, r1
 800e434:	3351      	adds	r3, #81	; 0x51
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3714      	adds	r7, #20
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e456:	79fb      	ldrb	r3, [r7, #7]
 800e458:	2b03      	cmp	r3, #3
 800e45a:	d817      	bhi.n	800e48c <USBH_Get_USB_Status+0x44>
 800e45c:	a201      	add	r2, pc, #4	; (adr r2, 800e464 <USBH_Get_USB_Status+0x1c>)
 800e45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e462:	bf00      	nop
 800e464:	0800e475 	.word	0x0800e475
 800e468:	0800e47b 	.word	0x0800e47b
 800e46c:	0800e481 	.word	0x0800e481
 800e470:	0800e487 	.word	0x0800e487
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e474:	2300      	movs	r3, #0
 800e476:	73fb      	strb	r3, [r7, #15]
    break;
 800e478:	e00b      	b.n	800e492 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e47a:	2302      	movs	r3, #2
 800e47c:	73fb      	strb	r3, [r7, #15]
    break;
 800e47e:	e008      	b.n	800e492 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e480:	2301      	movs	r3, #1
 800e482:	73fb      	strb	r3, [r7, #15]
    break;
 800e484:	e005      	b.n	800e492 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e486:	2302      	movs	r3, #2
 800e488:	73fb      	strb	r3, [r7, #15]
    break;
 800e48a:	e002      	b.n	800e492 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e48c:	2302      	movs	r3, #2
 800e48e:	73fb      	strb	r3, [r7, #15]
    break;
 800e490:	bf00      	nop
  }
  return usb_status;
 800e492:	7bfb      	ldrb	r3, [r7, #15]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e4aa:	79fb      	ldrb	r3, [r7, #7]
 800e4ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e4ae:	79fb      	ldrb	r3, [r7, #7]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d102      	bne.n	800e4ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	73fb      	strb	r3, [r7, #15]
 800e4b8:	e001      	b.n	800e4be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_3,(GPIO_PinState)data);
 800e4be:	7bfb      	ldrb	r3, [r7, #15]
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	2108      	movs	r1, #8
 800e4c4:	4803      	ldr	r0, [pc, #12]	; (800e4d4 <MX_DriverVbusFS+0x34>)
 800e4c6:	f7f3 fb8b 	bl	8001be0 <HAL_GPIO_WritePin>
}
 800e4ca:	bf00      	nop
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	58022400 	.word	0x58022400

0800e4d8 <__errno>:
 800e4d8:	4b01      	ldr	r3, [pc, #4]	; (800e4e0 <__errno+0x8>)
 800e4da:	6818      	ldr	r0, [r3, #0]
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	20000030 	.word	0x20000030

0800e4e4 <__libc_init_array>:
 800e4e4:	b570      	push	{r4, r5, r6, lr}
 800e4e6:	4e0d      	ldr	r6, [pc, #52]	; (800e51c <__libc_init_array+0x38>)
 800e4e8:	4c0d      	ldr	r4, [pc, #52]	; (800e520 <__libc_init_array+0x3c>)
 800e4ea:	1ba4      	subs	r4, r4, r6
 800e4ec:	10a4      	asrs	r4, r4, #2
 800e4ee:	2500      	movs	r5, #0
 800e4f0:	42a5      	cmp	r5, r4
 800e4f2:	d109      	bne.n	800e508 <__libc_init_array+0x24>
 800e4f4:	4e0b      	ldr	r6, [pc, #44]	; (800e524 <__libc_init_array+0x40>)
 800e4f6:	4c0c      	ldr	r4, [pc, #48]	; (800e528 <__libc_init_array+0x44>)
 800e4f8:	f000 fc40 	bl	800ed7c <_init>
 800e4fc:	1ba4      	subs	r4, r4, r6
 800e4fe:	10a4      	asrs	r4, r4, #2
 800e500:	2500      	movs	r5, #0
 800e502:	42a5      	cmp	r5, r4
 800e504:	d105      	bne.n	800e512 <__libc_init_array+0x2e>
 800e506:	bd70      	pop	{r4, r5, r6, pc}
 800e508:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e50c:	4798      	blx	r3
 800e50e:	3501      	adds	r5, #1
 800e510:	e7ee      	b.n	800e4f0 <__libc_init_array+0xc>
 800e512:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e516:	4798      	blx	r3
 800e518:	3501      	adds	r5, #1
 800e51a:	e7f2      	b.n	800e502 <__libc_init_array+0x1e>
 800e51c:	0800f8dc 	.word	0x0800f8dc
 800e520:	0800f8dc 	.word	0x0800f8dc
 800e524:	0800f8dc 	.word	0x0800f8dc
 800e528:	0800f8e0 	.word	0x0800f8e0

0800e52c <malloc>:
 800e52c:	4b02      	ldr	r3, [pc, #8]	; (800e538 <malloc+0xc>)
 800e52e:	4601      	mov	r1, r0
 800e530:	6818      	ldr	r0, [r3, #0]
 800e532:	f000 b86d 	b.w	800e610 <_malloc_r>
 800e536:	bf00      	nop
 800e538:	20000030 	.word	0x20000030

0800e53c <free>:
 800e53c:	4b02      	ldr	r3, [pc, #8]	; (800e548 <free+0xc>)
 800e53e:	4601      	mov	r1, r0
 800e540:	6818      	ldr	r0, [r3, #0]
 800e542:	f000 b817 	b.w	800e574 <_free_r>
 800e546:	bf00      	nop
 800e548:	20000030 	.word	0x20000030

0800e54c <memcpy>:
 800e54c:	b510      	push	{r4, lr}
 800e54e:	1e43      	subs	r3, r0, #1
 800e550:	440a      	add	r2, r1
 800e552:	4291      	cmp	r1, r2
 800e554:	d100      	bne.n	800e558 <memcpy+0xc>
 800e556:	bd10      	pop	{r4, pc}
 800e558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e55c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e560:	e7f7      	b.n	800e552 <memcpy+0x6>

0800e562 <memset>:
 800e562:	4402      	add	r2, r0
 800e564:	4603      	mov	r3, r0
 800e566:	4293      	cmp	r3, r2
 800e568:	d100      	bne.n	800e56c <memset+0xa>
 800e56a:	4770      	bx	lr
 800e56c:	f803 1b01 	strb.w	r1, [r3], #1
 800e570:	e7f9      	b.n	800e566 <memset+0x4>
	...

0800e574 <_free_r>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	4605      	mov	r5, r0
 800e578:	2900      	cmp	r1, #0
 800e57a:	d045      	beq.n	800e608 <_free_r+0x94>
 800e57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e580:	1f0c      	subs	r4, r1, #4
 800e582:	2b00      	cmp	r3, #0
 800e584:	bfb8      	it	lt
 800e586:	18e4      	addlt	r4, r4, r3
 800e588:	f000 f8d4 	bl	800e734 <__malloc_lock>
 800e58c:	4a1f      	ldr	r2, [pc, #124]	; (800e60c <_free_r+0x98>)
 800e58e:	6813      	ldr	r3, [r2, #0]
 800e590:	4610      	mov	r0, r2
 800e592:	b933      	cbnz	r3, 800e5a2 <_free_r+0x2e>
 800e594:	6063      	str	r3, [r4, #4]
 800e596:	6014      	str	r4, [r2, #0]
 800e598:	4628      	mov	r0, r5
 800e59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e59e:	f000 b8ca 	b.w	800e736 <__malloc_unlock>
 800e5a2:	42a3      	cmp	r3, r4
 800e5a4:	d90c      	bls.n	800e5c0 <_free_r+0x4c>
 800e5a6:	6821      	ldr	r1, [r4, #0]
 800e5a8:	1862      	adds	r2, r4, r1
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	bf04      	itt	eq
 800e5ae:	681a      	ldreq	r2, [r3, #0]
 800e5b0:	685b      	ldreq	r3, [r3, #4]
 800e5b2:	6063      	str	r3, [r4, #4]
 800e5b4:	bf04      	itt	eq
 800e5b6:	1852      	addeq	r2, r2, r1
 800e5b8:	6022      	streq	r2, [r4, #0]
 800e5ba:	6004      	str	r4, [r0, #0]
 800e5bc:	e7ec      	b.n	800e598 <_free_r+0x24>
 800e5be:	4613      	mov	r3, r2
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	b10a      	cbz	r2, 800e5c8 <_free_r+0x54>
 800e5c4:	42a2      	cmp	r2, r4
 800e5c6:	d9fa      	bls.n	800e5be <_free_r+0x4a>
 800e5c8:	6819      	ldr	r1, [r3, #0]
 800e5ca:	1858      	adds	r0, r3, r1
 800e5cc:	42a0      	cmp	r0, r4
 800e5ce:	d10b      	bne.n	800e5e8 <_free_r+0x74>
 800e5d0:	6820      	ldr	r0, [r4, #0]
 800e5d2:	4401      	add	r1, r0
 800e5d4:	1858      	adds	r0, r3, r1
 800e5d6:	4282      	cmp	r2, r0
 800e5d8:	6019      	str	r1, [r3, #0]
 800e5da:	d1dd      	bne.n	800e598 <_free_r+0x24>
 800e5dc:	6810      	ldr	r0, [r2, #0]
 800e5de:	6852      	ldr	r2, [r2, #4]
 800e5e0:	605a      	str	r2, [r3, #4]
 800e5e2:	4401      	add	r1, r0
 800e5e4:	6019      	str	r1, [r3, #0]
 800e5e6:	e7d7      	b.n	800e598 <_free_r+0x24>
 800e5e8:	d902      	bls.n	800e5f0 <_free_r+0x7c>
 800e5ea:	230c      	movs	r3, #12
 800e5ec:	602b      	str	r3, [r5, #0]
 800e5ee:	e7d3      	b.n	800e598 <_free_r+0x24>
 800e5f0:	6820      	ldr	r0, [r4, #0]
 800e5f2:	1821      	adds	r1, r4, r0
 800e5f4:	428a      	cmp	r2, r1
 800e5f6:	bf04      	itt	eq
 800e5f8:	6811      	ldreq	r1, [r2, #0]
 800e5fa:	6852      	ldreq	r2, [r2, #4]
 800e5fc:	6062      	str	r2, [r4, #4]
 800e5fe:	bf04      	itt	eq
 800e600:	1809      	addeq	r1, r1, r0
 800e602:	6021      	streq	r1, [r4, #0]
 800e604:	605c      	str	r4, [r3, #4]
 800e606:	e7c7      	b.n	800e598 <_free_r+0x24>
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	20000554 	.word	0x20000554

0800e610 <_malloc_r>:
 800e610:	b570      	push	{r4, r5, r6, lr}
 800e612:	1ccd      	adds	r5, r1, #3
 800e614:	f025 0503 	bic.w	r5, r5, #3
 800e618:	3508      	adds	r5, #8
 800e61a:	2d0c      	cmp	r5, #12
 800e61c:	bf38      	it	cc
 800e61e:	250c      	movcc	r5, #12
 800e620:	2d00      	cmp	r5, #0
 800e622:	4606      	mov	r6, r0
 800e624:	db01      	blt.n	800e62a <_malloc_r+0x1a>
 800e626:	42a9      	cmp	r1, r5
 800e628:	d903      	bls.n	800e632 <_malloc_r+0x22>
 800e62a:	230c      	movs	r3, #12
 800e62c:	6033      	str	r3, [r6, #0]
 800e62e:	2000      	movs	r0, #0
 800e630:	bd70      	pop	{r4, r5, r6, pc}
 800e632:	f000 f87f 	bl	800e734 <__malloc_lock>
 800e636:	4a21      	ldr	r2, [pc, #132]	; (800e6bc <_malloc_r+0xac>)
 800e638:	6814      	ldr	r4, [r2, #0]
 800e63a:	4621      	mov	r1, r4
 800e63c:	b991      	cbnz	r1, 800e664 <_malloc_r+0x54>
 800e63e:	4c20      	ldr	r4, [pc, #128]	; (800e6c0 <_malloc_r+0xb0>)
 800e640:	6823      	ldr	r3, [r4, #0]
 800e642:	b91b      	cbnz	r3, 800e64c <_malloc_r+0x3c>
 800e644:	4630      	mov	r0, r6
 800e646:	f000 f83d 	bl	800e6c4 <_sbrk_r>
 800e64a:	6020      	str	r0, [r4, #0]
 800e64c:	4629      	mov	r1, r5
 800e64e:	4630      	mov	r0, r6
 800e650:	f000 f838 	bl	800e6c4 <_sbrk_r>
 800e654:	1c43      	adds	r3, r0, #1
 800e656:	d124      	bne.n	800e6a2 <_malloc_r+0x92>
 800e658:	230c      	movs	r3, #12
 800e65a:	6033      	str	r3, [r6, #0]
 800e65c:	4630      	mov	r0, r6
 800e65e:	f000 f86a 	bl	800e736 <__malloc_unlock>
 800e662:	e7e4      	b.n	800e62e <_malloc_r+0x1e>
 800e664:	680b      	ldr	r3, [r1, #0]
 800e666:	1b5b      	subs	r3, r3, r5
 800e668:	d418      	bmi.n	800e69c <_malloc_r+0x8c>
 800e66a:	2b0b      	cmp	r3, #11
 800e66c:	d90f      	bls.n	800e68e <_malloc_r+0x7e>
 800e66e:	600b      	str	r3, [r1, #0]
 800e670:	50cd      	str	r5, [r1, r3]
 800e672:	18cc      	adds	r4, r1, r3
 800e674:	4630      	mov	r0, r6
 800e676:	f000 f85e 	bl	800e736 <__malloc_unlock>
 800e67a:	f104 000b 	add.w	r0, r4, #11
 800e67e:	1d23      	adds	r3, r4, #4
 800e680:	f020 0007 	bic.w	r0, r0, #7
 800e684:	1ac3      	subs	r3, r0, r3
 800e686:	d0d3      	beq.n	800e630 <_malloc_r+0x20>
 800e688:	425a      	negs	r2, r3
 800e68a:	50e2      	str	r2, [r4, r3]
 800e68c:	e7d0      	b.n	800e630 <_malloc_r+0x20>
 800e68e:	428c      	cmp	r4, r1
 800e690:	684b      	ldr	r3, [r1, #4]
 800e692:	bf16      	itet	ne
 800e694:	6063      	strne	r3, [r4, #4]
 800e696:	6013      	streq	r3, [r2, #0]
 800e698:	460c      	movne	r4, r1
 800e69a:	e7eb      	b.n	800e674 <_malloc_r+0x64>
 800e69c:	460c      	mov	r4, r1
 800e69e:	6849      	ldr	r1, [r1, #4]
 800e6a0:	e7cc      	b.n	800e63c <_malloc_r+0x2c>
 800e6a2:	1cc4      	adds	r4, r0, #3
 800e6a4:	f024 0403 	bic.w	r4, r4, #3
 800e6a8:	42a0      	cmp	r0, r4
 800e6aa:	d005      	beq.n	800e6b8 <_malloc_r+0xa8>
 800e6ac:	1a21      	subs	r1, r4, r0
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f000 f808 	bl	800e6c4 <_sbrk_r>
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	d0cf      	beq.n	800e658 <_malloc_r+0x48>
 800e6b8:	6025      	str	r5, [r4, #0]
 800e6ba:	e7db      	b.n	800e674 <_malloc_r+0x64>
 800e6bc:	20000554 	.word	0x20000554
 800e6c0:	20000558 	.word	0x20000558

0800e6c4 <_sbrk_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4c06      	ldr	r4, [pc, #24]	; (800e6e0 <_sbrk_r+0x1c>)
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	4605      	mov	r5, r0
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	6023      	str	r3, [r4, #0]
 800e6d0:	f7f2 fea6 	bl	8001420 <_sbrk>
 800e6d4:	1c43      	adds	r3, r0, #1
 800e6d6:	d102      	bne.n	800e6de <_sbrk_r+0x1a>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	b103      	cbz	r3, 800e6de <_sbrk_r+0x1a>
 800e6dc:	602b      	str	r3, [r5, #0]
 800e6de:	bd38      	pop	{r3, r4, r5, pc}
 800e6e0:	20002e6c 	.word	0x20002e6c

0800e6e4 <siprintf>:
 800e6e4:	b40e      	push	{r1, r2, r3}
 800e6e6:	b500      	push	{lr}
 800e6e8:	b09c      	sub	sp, #112	; 0x70
 800e6ea:	ab1d      	add	r3, sp, #116	; 0x74
 800e6ec:	9002      	str	r0, [sp, #8]
 800e6ee:	9006      	str	r0, [sp, #24]
 800e6f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e6f4:	4809      	ldr	r0, [pc, #36]	; (800e71c <siprintf+0x38>)
 800e6f6:	9107      	str	r1, [sp, #28]
 800e6f8:	9104      	str	r1, [sp, #16]
 800e6fa:	4909      	ldr	r1, [pc, #36]	; (800e720 <siprintf+0x3c>)
 800e6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e700:	9105      	str	r1, [sp, #20]
 800e702:	6800      	ldr	r0, [r0, #0]
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	a902      	add	r1, sp, #8
 800e708:	f000 f870 	bl	800e7ec <_svfiprintf_r>
 800e70c:	9b02      	ldr	r3, [sp, #8]
 800e70e:	2200      	movs	r2, #0
 800e710:	701a      	strb	r2, [r3, #0]
 800e712:	b01c      	add	sp, #112	; 0x70
 800e714:	f85d eb04 	ldr.w	lr, [sp], #4
 800e718:	b003      	add	sp, #12
 800e71a:	4770      	bx	lr
 800e71c:	20000030 	.word	0x20000030
 800e720:	ffff0208 	.word	0xffff0208

0800e724 <strcpy>:
 800e724:	4603      	mov	r3, r0
 800e726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e72a:	f803 2b01 	strb.w	r2, [r3], #1
 800e72e:	2a00      	cmp	r2, #0
 800e730:	d1f9      	bne.n	800e726 <strcpy+0x2>
 800e732:	4770      	bx	lr

0800e734 <__malloc_lock>:
 800e734:	4770      	bx	lr

0800e736 <__malloc_unlock>:
 800e736:	4770      	bx	lr

0800e738 <__ssputs_r>:
 800e738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e73c:	688e      	ldr	r6, [r1, #8]
 800e73e:	429e      	cmp	r6, r3
 800e740:	4682      	mov	sl, r0
 800e742:	460c      	mov	r4, r1
 800e744:	4690      	mov	r8, r2
 800e746:	4699      	mov	r9, r3
 800e748:	d837      	bhi.n	800e7ba <__ssputs_r+0x82>
 800e74a:	898a      	ldrh	r2, [r1, #12]
 800e74c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e750:	d031      	beq.n	800e7b6 <__ssputs_r+0x7e>
 800e752:	6825      	ldr	r5, [r4, #0]
 800e754:	6909      	ldr	r1, [r1, #16]
 800e756:	1a6f      	subs	r7, r5, r1
 800e758:	6965      	ldr	r5, [r4, #20]
 800e75a:	2302      	movs	r3, #2
 800e75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e760:	fb95 f5f3 	sdiv	r5, r5, r3
 800e764:	f109 0301 	add.w	r3, r9, #1
 800e768:	443b      	add	r3, r7
 800e76a:	429d      	cmp	r5, r3
 800e76c:	bf38      	it	cc
 800e76e:	461d      	movcc	r5, r3
 800e770:	0553      	lsls	r3, r2, #21
 800e772:	d530      	bpl.n	800e7d6 <__ssputs_r+0x9e>
 800e774:	4629      	mov	r1, r5
 800e776:	f7ff ff4b 	bl	800e610 <_malloc_r>
 800e77a:	4606      	mov	r6, r0
 800e77c:	b950      	cbnz	r0, 800e794 <__ssputs_r+0x5c>
 800e77e:	230c      	movs	r3, #12
 800e780:	f8ca 3000 	str.w	r3, [sl]
 800e784:	89a3      	ldrh	r3, [r4, #12]
 800e786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	f04f 30ff 	mov.w	r0, #4294967295
 800e790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e794:	463a      	mov	r2, r7
 800e796:	6921      	ldr	r1, [r4, #16]
 800e798:	f7ff fed8 	bl	800e54c <memcpy>
 800e79c:	89a3      	ldrh	r3, [r4, #12]
 800e79e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7a6:	81a3      	strh	r3, [r4, #12]
 800e7a8:	6126      	str	r6, [r4, #16]
 800e7aa:	6165      	str	r5, [r4, #20]
 800e7ac:	443e      	add	r6, r7
 800e7ae:	1bed      	subs	r5, r5, r7
 800e7b0:	6026      	str	r6, [r4, #0]
 800e7b2:	60a5      	str	r5, [r4, #8]
 800e7b4:	464e      	mov	r6, r9
 800e7b6:	454e      	cmp	r6, r9
 800e7b8:	d900      	bls.n	800e7bc <__ssputs_r+0x84>
 800e7ba:	464e      	mov	r6, r9
 800e7bc:	4632      	mov	r2, r6
 800e7be:	4641      	mov	r1, r8
 800e7c0:	6820      	ldr	r0, [r4, #0]
 800e7c2:	f000 fa93 	bl	800ecec <memmove>
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	1b9b      	subs	r3, r3, r6
 800e7ca:	60a3      	str	r3, [r4, #8]
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	441e      	add	r6, r3
 800e7d0:	6026      	str	r6, [r4, #0]
 800e7d2:	2000      	movs	r0, #0
 800e7d4:	e7dc      	b.n	800e790 <__ssputs_r+0x58>
 800e7d6:	462a      	mov	r2, r5
 800e7d8:	f000 faa1 	bl	800ed1e <_realloc_r>
 800e7dc:	4606      	mov	r6, r0
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d1e2      	bne.n	800e7a8 <__ssputs_r+0x70>
 800e7e2:	6921      	ldr	r1, [r4, #16]
 800e7e4:	4650      	mov	r0, sl
 800e7e6:	f7ff fec5 	bl	800e574 <_free_r>
 800e7ea:	e7c8      	b.n	800e77e <__ssputs_r+0x46>

0800e7ec <_svfiprintf_r>:
 800e7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f0:	461d      	mov	r5, r3
 800e7f2:	898b      	ldrh	r3, [r1, #12]
 800e7f4:	061f      	lsls	r7, r3, #24
 800e7f6:	b09d      	sub	sp, #116	; 0x74
 800e7f8:	4680      	mov	r8, r0
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	4616      	mov	r6, r2
 800e7fe:	d50f      	bpl.n	800e820 <_svfiprintf_r+0x34>
 800e800:	690b      	ldr	r3, [r1, #16]
 800e802:	b96b      	cbnz	r3, 800e820 <_svfiprintf_r+0x34>
 800e804:	2140      	movs	r1, #64	; 0x40
 800e806:	f7ff ff03 	bl	800e610 <_malloc_r>
 800e80a:	6020      	str	r0, [r4, #0]
 800e80c:	6120      	str	r0, [r4, #16]
 800e80e:	b928      	cbnz	r0, 800e81c <_svfiprintf_r+0x30>
 800e810:	230c      	movs	r3, #12
 800e812:	f8c8 3000 	str.w	r3, [r8]
 800e816:	f04f 30ff 	mov.w	r0, #4294967295
 800e81a:	e0c8      	b.n	800e9ae <_svfiprintf_r+0x1c2>
 800e81c:	2340      	movs	r3, #64	; 0x40
 800e81e:	6163      	str	r3, [r4, #20]
 800e820:	2300      	movs	r3, #0
 800e822:	9309      	str	r3, [sp, #36]	; 0x24
 800e824:	2320      	movs	r3, #32
 800e826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e82a:	2330      	movs	r3, #48	; 0x30
 800e82c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e830:	9503      	str	r5, [sp, #12]
 800e832:	f04f 0b01 	mov.w	fp, #1
 800e836:	4637      	mov	r7, r6
 800e838:	463d      	mov	r5, r7
 800e83a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e83e:	b10b      	cbz	r3, 800e844 <_svfiprintf_r+0x58>
 800e840:	2b25      	cmp	r3, #37	; 0x25
 800e842:	d13e      	bne.n	800e8c2 <_svfiprintf_r+0xd6>
 800e844:	ebb7 0a06 	subs.w	sl, r7, r6
 800e848:	d00b      	beq.n	800e862 <_svfiprintf_r+0x76>
 800e84a:	4653      	mov	r3, sl
 800e84c:	4632      	mov	r2, r6
 800e84e:	4621      	mov	r1, r4
 800e850:	4640      	mov	r0, r8
 800e852:	f7ff ff71 	bl	800e738 <__ssputs_r>
 800e856:	3001      	adds	r0, #1
 800e858:	f000 80a4 	beq.w	800e9a4 <_svfiprintf_r+0x1b8>
 800e85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e85e:	4453      	add	r3, sl
 800e860:	9309      	str	r3, [sp, #36]	; 0x24
 800e862:	783b      	ldrb	r3, [r7, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 809d 	beq.w	800e9a4 <_svfiprintf_r+0x1b8>
 800e86a:	2300      	movs	r3, #0
 800e86c:	f04f 32ff 	mov.w	r2, #4294967295
 800e870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e874:	9304      	str	r3, [sp, #16]
 800e876:	9307      	str	r3, [sp, #28]
 800e878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e87c:	931a      	str	r3, [sp, #104]	; 0x68
 800e87e:	462f      	mov	r7, r5
 800e880:	2205      	movs	r2, #5
 800e882:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e886:	4850      	ldr	r0, [pc, #320]	; (800e9c8 <_svfiprintf_r+0x1dc>)
 800e888:	f7f1 fd42 	bl	8000310 <memchr>
 800e88c:	9b04      	ldr	r3, [sp, #16]
 800e88e:	b9d0      	cbnz	r0, 800e8c6 <_svfiprintf_r+0xda>
 800e890:	06d9      	lsls	r1, r3, #27
 800e892:	bf44      	itt	mi
 800e894:	2220      	movmi	r2, #32
 800e896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e89a:	071a      	lsls	r2, r3, #28
 800e89c:	bf44      	itt	mi
 800e89e:	222b      	movmi	r2, #43	; 0x2b
 800e8a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e8a4:	782a      	ldrb	r2, [r5, #0]
 800e8a6:	2a2a      	cmp	r2, #42	; 0x2a
 800e8a8:	d015      	beq.n	800e8d6 <_svfiprintf_r+0xea>
 800e8aa:	9a07      	ldr	r2, [sp, #28]
 800e8ac:	462f      	mov	r7, r5
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	250a      	movs	r5, #10
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8b8:	3b30      	subs	r3, #48	; 0x30
 800e8ba:	2b09      	cmp	r3, #9
 800e8bc:	d94d      	bls.n	800e95a <_svfiprintf_r+0x16e>
 800e8be:	b1b8      	cbz	r0, 800e8f0 <_svfiprintf_r+0x104>
 800e8c0:	e00f      	b.n	800e8e2 <_svfiprintf_r+0xf6>
 800e8c2:	462f      	mov	r7, r5
 800e8c4:	e7b8      	b.n	800e838 <_svfiprintf_r+0x4c>
 800e8c6:	4a40      	ldr	r2, [pc, #256]	; (800e9c8 <_svfiprintf_r+0x1dc>)
 800e8c8:	1a80      	subs	r0, r0, r2
 800e8ca:	fa0b f000 	lsl.w	r0, fp, r0
 800e8ce:	4318      	orrs	r0, r3
 800e8d0:	9004      	str	r0, [sp, #16]
 800e8d2:	463d      	mov	r5, r7
 800e8d4:	e7d3      	b.n	800e87e <_svfiprintf_r+0x92>
 800e8d6:	9a03      	ldr	r2, [sp, #12]
 800e8d8:	1d11      	adds	r1, r2, #4
 800e8da:	6812      	ldr	r2, [r2, #0]
 800e8dc:	9103      	str	r1, [sp, #12]
 800e8de:	2a00      	cmp	r2, #0
 800e8e0:	db01      	blt.n	800e8e6 <_svfiprintf_r+0xfa>
 800e8e2:	9207      	str	r2, [sp, #28]
 800e8e4:	e004      	b.n	800e8f0 <_svfiprintf_r+0x104>
 800e8e6:	4252      	negs	r2, r2
 800e8e8:	f043 0302 	orr.w	r3, r3, #2
 800e8ec:	9207      	str	r2, [sp, #28]
 800e8ee:	9304      	str	r3, [sp, #16]
 800e8f0:	783b      	ldrb	r3, [r7, #0]
 800e8f2:	2b2e      	cmp	r3, #46	; 0x2e
 800e8f4:	d10c      	bne.n	800e910 <_svfiprintf_r+0x124>
 800e8f6:	787b      	ldrb	r3, [r7, #1]
 800e8f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e8fa:	d133      	bne.n	800e964 <_svfiprintf_r+0x178>
 800e8fc:	9b03      	ldr	r3, [sp, #12]
 800e8fe:	1d1a      	adds	r2, r3, #4
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	9203      	str	r2, [sp, #12]
 800e904:	2b00      	cmp	r3, #0
 800e906:	bfb8      	it	lt
 800e908:	f04f 33ff 	movlt.w	r3, #4294967295
 800e90c:	3702      	adds	r7, #2
 800e90e:	9305      	str	r3, [sp, #20]
 800e910:	4d2e      	ldr	r5, [pc, #184]	; (800e9cc <_svfiprintf_r+0x1e0>)
 800e912:	7839      	ldrb	r1, [r7, #0]
 800e914:	2203      	movs	r2, #3
 800e916:	4628      	mov	r0, r5
 800e918:	f7f1 fcfa 	bl	8000310 <memchr>
 800e91c:	b138      	cbz	r0, 800e92e <_svfiprintf_r+0x142>
 800e91e:	2340      	movs	r3, #64	; 0x40
 800e920:	1b40      	subs	r0, r0, r5
 800e922:	fa03 f000 	lsl.w	r0, r3, r0
 800e926:	9b04      	ldr	r3, [sp, #16]
 800e928:	4303      	orrs	r3, r0
 800e92a:	3701      	adds	r7, #1
 800e92c:	9304      	str	r3, [sp, #16]
 800e92e:	7839      	ldrb	r1, [r7, #0]
 800e930:	4827      	ldr	r0, [pc, #156]	; (800e9d0 <_svfiprintf_r+0x1e4>)
 800e932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e936:	2206      	movs	r2, #6
 800e938:	1c7e      	adds	r6, r7, #1
 800e93a:	f7f1 fce9 	bl	8000310 <memchr>
 800e93e:	2800      	cmp	r0, #0
 800e940:	d038      	beq.n	800e9b4 <_svfiprintf_r+0x1c8>
 800e942:	4b24      	ldr	r3, [pc, #144]	; (800e9d4 <_svfiprintf_r+0x1e8>)
 800e944:	bb13      	cbnz	r3, 800e98c <_svfiprintf_r+0x1a0>
 800e946:	9b03      	ldr	r3, [sp, #12]
 800e948:	3307      	adds	r3, #7
 800e94a:	f023 0307 	bic.w	r3, r3, #7
 800e94e:	3308      	adds	r3, #8
 800e950:	9303      	str	r3, [sp, #12]
 800e952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e954:	444b      	add	r3, r9
 800e956:	9309      	str	r3, [sp, #36]	; 0x24
 800e958:	e76d      	b.n	800e836 <_svfiprintf_r+0x4a>
 800e95a:	fb05 3202 	mla	r2, r5, r2, r3
 800e95e:	2001      	movs	r0, #1
 800e960:	460f      	mov	r7, r1
 800e962:	e7a6      	b.n	800e8b2 <_svfiprintf_r+0xc6>
 800e964:	2300      	movs	r3, #0
 800e966:	3701      	adds	r7, #1
 800e968:	9305      	str	r3, [sp, #20]
 800e96a:	4619      	mov	r1, r3
 800e96c:	250a      	movs	r5, #10
 800e96e:	4638      	mov	r0, r7
 800e970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e974:	3a30      	subs	r2, #48	; 0x30
 800e976:	2a09      	cmp	r2, #9
 800e978:	d903      	bls.n	800e982 <_svfiprintf_r+0x196>
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d0c8      	beq.n	800e910 <_svfiprintf_r+0x124>
 800e97e:	9105      	str	r1, [sp, #20]
 800e980:	e7c6      	b.n	800e910 <_svfiprintf_r+0x124>
 800e982:	fb05 2101 	mla	r1, r5, r1, r2
 800e986:	2301      	movs	r3, #1
 800e988:	4607      	mov	r7, r0
 800e98a:	e7f0      	b.n	800e96e <_svfiprintf_r+0x182>
 800e98c:	ab03      	add	r3, sp, #12
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	4622      	mov	r2, r4
 800e992:	4b11      	ldr	r3, [pc, #68]	; (800e9d8 <_svfiprintf_r+0x1ec>)
 800e994:	a904      	add	r1, sp, #16
 800e996:	4640      	mov	r0, r8
 800e998:	f3af 8000 	nop.w
 800e99c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e9a0:	4681      	mov	r9, r0
 800e9a2:	d1d6      	bne.n	800e952 <_svfiprintf_r+0x166>
 800e9a4:	89a3      	ldrh	r3, [r4, #12]
 800e9a6:	065b      	lsls	r3, r3, #25
 800e9a8:	f53f af35 	bmi.w	800e816 <_svfiprintf_r+0x2a>
 800e9ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9ae:	b01d      	add	sp, #116	; 0x74
 800e9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b4:	ab03      	add	r3, sp, #12
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	4622      	mov	r2, r4
 800e9ba:	4b07      	ldr	r3, [pc, #28]	; (800e9d8 <_svfiprintf_r+0x1ec>)
 800e9bc:	a904      	add	r1, sp, #16
 800e9be:	4640      	mov	r0, r8
 800e9c0:	f000 f882 	bl	800eac8 <_printf_i>
 800e9c4:	e7ea      	b.n	800e99c <_svfiprintf_r+0x1b0>
 800e9c6:	bf00      	nop
 800e9c8:	0800f8a1 	.word	0x0800f8a1
 800e9cc:	0800f8a7 	.word	0x0800f8a7
 800e9d0:	0800f8ab 	.word	0x0800f8ab
 800e9d4:	00000000 	.word	0x00000000
 800e9d8:	0800e739 	.word	0x0800e739

0800e9dc <_printf_common>:
 800e9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e0:	4691      	mov	r9, r2
 800e9e2:	461f      	mov	r7, r3
 800e9e4:	688a      	ldr	r2, [r1, #8]
 800e9e6:	690b      	ldr	r3, [r1, #16]
 800e9e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	bfb8      	it	lt
 800e9f0:	4613      	movlt	r3, r2
 800e9f2:	f8c9 3000 	str.w	r3, [r9]
 800e9f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e9fa:	4606      	mov	r6, r0
 800e9fc:	460c      	mov	r4, r1
 800e9fe:	b112      	cbz	r2, 800ea06 <_printf_common+0x2a>
 800ea00:	3301      	adds	r3, #1
 800ea02:	f8c9 3000 	str.w	r3, [r9]
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	0699      	lsls	r1, r3, #26
 800ea0a:	bf42      	ittt	mi
 800ea0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ea10:	3302      	addmi	r3, #2
 800ea12:	f8c9 3000 	strmi.w	r3, [r9]
 800ea16:	6825      	ldr	r5, [r4, #0]
 800ea18:	f015 0506 	ands.w	r5, r5, #6
 800ea1c:	d107      	bne.n	800ea2e <_printf_common+0x52>
 800ea1e:	f104 0a19 	add.w	sl, r4, #25
 800ea22:	68e3      	ldr	r3, [r4, #12]
 800ea24:	f8d9 2000 	ldr.w	r2, [r9]
 800ea28:	1a9b      	subs	r3, r3, r2
 800ea2a:	42ab      	cmp	r3, r5
 800ea2c:	dc28      	bgt.n	800ea80 <_printf_common+0xa4>
 800ea2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ea32:	6822      	ldr	r2, [r4, #0]
 800ea34:	3300      	adds	r3, #0
 800ea36:	bf18      	it	ne
 800ea38:	2301      	movne	r3, #1
 800ea3a:	0692      	lsls	r2, r2, #26
 800ea3c:	d42d      	bmi.n	800ea9a <_printf_common+0xbe>
 800ea3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea42:	4639      	mov	r1, r7
 800ea44:	4630      	mov	r0, r6
 800ea46:	47c0      	blx	r8
 800ea48:	3001      	adds	r0, #1
 800ea4a:	d020      	beq.n	800ea8e <_printf_common+0xb2>
 800ea4c:	6823      	ldr	r3, [r4, #0]
 800ea4e:	68e5      	ldr	r5, [r4, #12]
 800ea50:	f8d9 2000 	ldr.w	r2, [r9]
 800ea54:	f003 0306 	and.w	r3, r3, #6
 800ea58:	2b04      	cmp	r3, #4
 800ea5a:	bf08      	it	eq
 800ea5c:	1aad      	subeq	r5, r5, r2
 800ea5e:	68a3      	ldr	r3, [r4, #8]
 800ea60:	6922      	ldr	r2, [r4, #16]
 800ea62:	bf0c      	ite	eq
 800ea64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea68:	2500      	movne	r5, #0
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	bfc4      	itt	gt
 800ea6e:	1a9b      	subgt	r3, r3, r2
 800ea70:	18ed      	addgt	r5, r5, r3
 800ea72:	f04f 0900 	mov.w	r9, #0
 800ea76:	341a      	adds	r4, #26
 800ea78:	454d      	cmp	r5, r9
 800ea7a:	d11a      	bne.n	800eab2 <_printf_common+0xd6>
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	e008      	b.n	800ea92 <_printf_common+0xb6>
 800ea80:	2301      	movs	r3, #1
 800ea82:	4652      	mov	r2, sl
 800ea84:	4639      	mov	r1, r7
 800ea86:	4630      	mov	r0, r6
 800ea88:	47c0      	blx	r8
 800ea8a:	3001      	adds	r0, #1
 800ea8c:	d103      	bne.n	800ea96 <_printf_common+0xba>
 800ea8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea96:	3501      	adds	r5, #1
 800ea98:	e7c3      	b.n	800ea22 <_printf_common+0x46>
 800ea9a:	18e1      	adds	r1, r4, r3
 800ea9c:	1c5a      	adds	r2, r3, #1
 800ea9e:	2030      	movs	r0, #48	; 0x30
 800eaa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eaa4:	4422      	add	r2, r4
 800eaa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eaaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eaae:	3302      	adds	r3, #2
 800eab0:	e7c5      	b.n	800ea3e <_printf_common+0x62>
 800eab2:	2301      	movs	r3, #1
 800eab4:	4622      	mov	r2, r4
 800eab6:	4639      	mov	r1, r7
 800eab8:	4630      	mov	r0, r6
 800eaba:	47c0      	blx	r8
 800eabc:	3001      	adds	r0, #1
 800eabe:	d0e6      	beq.n	800ea8e <_printf_common+0xb2>
 800eac0:	f109 0901 	add.w	r9, r9, #1
 800eac4:	e7d8      	b.n	800ea78 <_printf_common+0x9c>
	...

0800eac8 <_printf_i>:
 800eac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eacc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ead0:	460c      	mov	r4, r1
 800ead2:	7e09      	ldrb	r1, [r1, #24]
 800ead4:	b085      	sub	sp, #20
 800ead6:	296e      	cmp	r1, #110	; 0x6e
 800ead8:	4617      	mov	r7, r2
 800eada:	4606      	mov	r6, r0
 800eadc:	4698      	mov	r8, r3
 800eade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eae0:	f000 80b3 	beq.w	800ec4a <_printf_i+0x182>
 800eae4:	d822      	bhi.n	800eb2c <_printf_i+0x64>
 800eae6:	2963      	cmp	r1, #99	; 0x63
 800eae8:	d036      	beq.n	800eb58 <_printf_i+0x90>
 800eaea:	d80a      	bhi.n	800eb02 <_printf_i+0x3a>
 800eaec:	2900      	cmp	r1, #0
 800eaee:	f000 80b9 	beq.w	800ec64 <_printf_i+0x19c>
 800eaf2:	2958      	cmp	r1, #88	; 0x58
 800eaf4:	f000 8083 	beq.w	800ebfe <_printf_i+0x136>
 800eaf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eafc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800eb00:	e032      	b.n	800eb68 <_printf_i+0xa0>
 800eb02:	2964      	cmp	r1, #100	; 0x64
 800eb04:	d001      	beq.n	800eb0a <_printf_i+0x42>
 800eb06:	2969      	cmp	r1, #105	; 0x69
 800eb08:	d1f6      	bne.n	800eaf8 <_printf_i+0x30>
 800eb0a:	6820      	ldr	r0, [r4, #0]
 800eb0c:	6813      	ldr	r3, [r2, #0]
 800eb0e:	0605      	lsls	r5, r0, #24
 800eb10:	f103 0104 	add.w	r1, r3, #4
 800eb14:	d52a      	bpl.n	800eb6c <_printf_i+0xa4>
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	6011      	str	r1, [r2, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	da03      	bge.n	800eb26 <_printf_i+0x5e>
 800eb1e:	222d      	movs	r2, #45	; 0x2d
 800eb20:	425b      	negs	r3, r3
 800eb22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800eb26:	486f      	ldr	r0, [pc, #444]	; (800ece4 <_printf_i+0x21c>)
 800eb28:	220a      	movs	r2, #10
 800eb2a:	e039      	b.n	800eba0 <_printf_i+0xd8>
 800eb2c:	2973      	cmp	r1, #115	; 0x73
 800eb2e:	f000 809d 	beq.w	800ec6c <_printf_i+0x1a4>
 800eb32:	d808      	bhi.n	800eb46 <_printf_i+0x7e>
 800eb34:	296f      	cmp	r1, #111	; 0x6f
 800eb36:	d020      	beq.n	800eb7a <_printf_i+0xb2>
 800eb38:	2970      	cmp	r1, #112	; 0x70
 800eb3a:	d1dd      	bne.n	800eaf8 <_printf_i+0x30>
 800eb3c:	6823      	ldr	r3, [r4, #0]
 800eb3e:	f043 0320 	orr.w	r3, r3, #32
 800eb42:	6023      	str	r3, [r4, #0]
 800eb44:	e003      	b.n	800eb4e <_printf_i+0x86>
 800eb46:	2975      	cmp	r1, #117	; 0x75
 800eb48:	d017      	beq.n	800eb7a <_printf_i+0xb2>
 800eb4a:	2978      	cmp	r1, #120	; 0x78
 800eb4c:	d1d4      	bne.n	800eaf8 <_printf_i+0x30>
 800eb4e:	2378      	movs	r3, #120	; 0x78
 800eb50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb54:	4864      	ldr	r0, [pc, #400]	; (800ece8 <_printf_i+0x220>)
 800eb56:	e055      	b.n	800ec04 <_printf_i+0x13c>
 800eb58:	6813      	ldr	r3, [r2, #0]
 800eb5a:	1d19      	adds	r1, r3, #4
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	6011      	str	r1, [r2, #0]
 800eb60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e08c      	b.n	800ec86 <_printf_i+0x1be>
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	6011      	str	r1, [r2, #0]
 800eb70:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eb74:	bf18      	it	ne
 800eb76:	b21b      	sxthne	r3, r3
 800eb78:	e7cf      	b.n	800eb1a <_printf_i+0x52>
 800eb7a:	6813      	ldr	r3, [r2, #0]
 800eb7c:	6825      	ldr	r5, [r4, #0]
 800eb7e:	1d18      	adds	r0, r3, #4
 800eb80:	6010      	str	r0, [r2, #0]
 800eb82:	0628      	lsls	r0, r5, #24
 800eb84:	d501      	bpl.n	800eb8a <_printf_i+0xc2>
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	e002      	b.n	800eb90 <_printf_i+0xc8>
 800eb8a:	0668      	lsls	r0, r5, #25
 800eb8c:	d5fb      	bpl.n	800eb86 <_printf_i+0xbe>
 800eb8e:	881b      	ldrh	r3, [r3, #0]
 800eb90:	4854      	ldr	r0, [pc, #336]	; (800ece4 <_printf_i+0x21c>)
 800eb92:	296f      	cmp	r1, #111	; 0x6f
 800eb94:	bf14      	ite	ne
 800eb96:	220a      	movne	r2, #10
 800eb98:	2208      	moveq	r2, #8
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eba0:	6865      	ldr	r5, [r4, #4]
 800eba2:	60a5      	str	r5, [r4, #8]
 800eba4:	2d00      	cmp	r5, #0
 800eba6:	f2c0 8095 	blt.w	800ecd4 <_printf_i+0x20c>
 800ebaa:	6821      	ldr	r1, [r4, #0]
 800ebac:	f021 0104 	bic.w	r1, r1, #4
 800ebb0:	6021      	str	r1, [r4, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d13d      	bne.n	800ec32 <_printf_i+0x16a>
 800ebb6:	2d00      	cmp	r5, #0
 800ebb8:	f040 808e 	bne.w	800ecd8 <_printf_i+0x210>
 800ebbc:	4665      	mov	r5, ip
 800ebbe:	2a08      	cmp	r2, #8
 800ebc0:	d10b      	bne.n	800ebda <_printf_i+0x112>
 800ebc2:	6823      	ldr	r3, [r4, #0]
 800ebc4:	07db      	lsls	r3, r3, #31
 800ebc6:	d508      	bpl.n	800ebda <_printf_i+0x112>
 800ebc8:	6923      	ldr	r3, [r4, #16]
 800ebca:	6862      	ldr	r2, [r4, #4]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	bfde      	ittt	le
 800ebd0:	2330      	movle	r3, #48	; 0x30
 800ebd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ebd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ebda:	ebac 0305 	sub.w	r3, ip, r5
 800ebde:	6123      	str	r3, [r4, #16]
 800ebe0:	f8cd 8000 	str.w	r8, [sp]
 800ebe4:	463b      	mov	r3, r7
 800ebe6:	aa03      	add	r2, sp, #12
 800ebe8:	4621      	mov	r1, r4
 800ebea:	4630      	mov	r0, r6
 800ebec:	f7ff fef6 	bl	800e9dc <_printf_common>
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	d14d      	bne.n	800ec90 <_printf_i+0x1c8>
 800ebf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf8:	b005      	add	sp, #20
 800ebfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebfe:	4839      	ldr	r0, [pc, #228]	; (800ece4 <_printf_i+0x21c>)
 800ec00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ec04:	6813      	ldr	r3, [r2, #0]
 800ec06:	6821      	ldr	r1, [r4, #0]
 800ec08:	1d1d      	adds	r5, r3, #4
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	6015      	str	r5, [r2, #0]
 800ec0e:	060a      	lsls	r2, r1, #24
 800ec10:	d50b      	bpl.n	800ec2a <_printf_i+0x162>
 800ec12:	07ca      	lsls	r2, r1, #31
 800ec14:	bf44      	itt	mi
 800ec16:	f041 0120 	orrmi.w	r1, r1, #32
 800ec1a:	6021      	strmi	r1, [r4, #0]
 800ec1c:	b91b      	cbnz	r3, 800ec26 <_printf_i+0x15e>
 800ec1e:	6822      	ldr	r2, [r4, #0]
 800ec20:	f022 0220 	bic.w	r2, r2, #32
 800ec24:	6022      	str	r2, [r4, #0]
 800ec26:	2210      	movs	r2, #16
 800ec28:	e7b7      	b.n	800eb9a <_printf_i+0xd2>
 800ec2a:	064d      	lsls	r5, r1, #25
 800ec2c:	bf48      	it	mi
 800ec2e:	b29b      	uxthmi	r3, r3
 800ec30:	e7ef      	b.n	800ec12 <_printf_i+0x14a>
 800ec32:	4665      	mov	r5, ip
 800ec34:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec38:	fb02 3311 	mls	r3, r2, r1, r3
 800ec3c:	5cc3      	ldrb	r3, [r0, r3]
 800ec3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ec42:	460b      	mov	r3, r1
 800ec44:	2900      	cmp	r1, #0
 800ec46:	d1f5      	bne.n	800ec34 <_printf_i+0x16c>
 800ec48:	e7b9      	b.n	800ebbe <_printf_i+0xf6>
 800ec4a:	6813      	ldr	r3, [r2, #0]
 800ec4c:	6825      	ldr	r5, [r4, #0]
 800ec4e:	6961      	ldr	r1, [r4, #20]
 800ec50:	1d18      	adds	r0, r3, #4
 800ec52:	6010      	str	r0, [r2, #0]
 800ec54:	0628      	lsls	r0, r5, #24
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	d501      	bpl.n	800ec5e <_printf_i+0x196>
 800ec5a:	6019      	str	r1, [r3, #0]
 800ec5c:	e002      	b.n	800ec64 <_printf_i+0x19c>
 800ec5e:	066a      	lsls	r2, r5, #25
 800ec60:	d5fb      	bpl.n	800ec5a <_printf_i+0x192>
 800ec62:	8019      	strh	r1, [r3, #0]
 800ec64:	2300      	movs	r3, #0
 800ec66:	6123      	str	r3, [r4, #16]
 800ec68:	4665      	mov	r5, ip
 800ec6a:	e7b9      	b.n	800ebe0 <_printf_i+0x118>
 800ec6c:	6813      	ldr	r3, [r2, #0]
 800ec6e:	1d19      	adds	r1, r3, #4
 800ec70:	6011      	str	r1, [r2, #0]
 800ec72:	681d      	ldr	r5, [r3, #0]
 800ec74:	6862      	ldr	r2, [r4, #4]
 800ec76:	2100      	movs	r1, #0
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f7f1 fb49 	bl	8000310 <memchr>
 800ec7e:	b108      	cbz	r0, 800ec84 <_printf_i+0x1bc>
 800ec80:	1b40      	subs	r0, r0, r5
 800ec82:	6060      	str	r0, [r4, #4]
 800ec84:	6863      	ldr	r3, [r4, #4]
 800ec86:	6123      	str	r3, [r4, #16]
 800ec88:	2300      	movs	r3, #0
 800ec8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec8e:	e7a7      	b.n	800ebe0 <_printf_i+0x118>
 800ec90:	6923      	ldr	r3, [r4, #16]
 800ec92:	462a      	mov	r2, r5
 800ec94:	4639      	mov	r1, r7
 800ec96:	4630      	mov	r0, r6
 800ec98:	47c0      	blx	r8
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	d0aa      	beq.n	800ebf4 <_printf_i+0x12c>
 800ec9e:	6823      	ldr	r3, [r4, #0]
 800eca0:	079b      	lsls	r3, r3, #30
 800eca2:	d413      	bmi.n	800eccc <_printf_i+0x204>
 800eca4:	68e0      	ldr	r0, [r4, #12]
 800eca6:	9b03      	ldr	r3, [sp, #12]
 800eca8:	4298      	cmp	r0, r3
 800ecaa:	bfb8      	it	lt
 800ecac:	4618      	movlt	r0, r3
 800ecae:	e7a3      	b.n	800ebf8 <_printf_i+0x130>
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	464a      	mov	r2, r9
 800ecb4:	4639      	mov	r1, r7
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	47c0      	blx	r8
 800ecba:	3001      	adds	r0, #1
 800ecbc:	d09a      	beq.n	800ebf4 <_printf_i+0x12c>
 800ecbe:	3501      	adds	r5, #1
 800ecc0:	68e3      	ldr	r3, [r4, #12]
 800ecc2:	9a03      	ldr	r2, [sp, #12]
 800ecc4:	1a9b      	subs	r3, r3, r2
 800ecc6:	42ab      	cmp	r3, r5
 800ecc8:	dcf2      	bgt.n	800ecb0 <_printf_i+0x1e8>
 800ecca:	e7eb      	b.n	800eca4 <_printf_i+0x1dc>
 800eccc:	2500      	movs	r5, #0
 800ecce:	f104 0919 	add.w	r9, r4, #25
 800ecd2:	e7f5      	b.n	800ecc0 <_printf_i+0x1f8>
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1ac      	bne.n	800ec32 <_printf_i+0x16a>
 800ecd8:	7803      	ldrb	r3, [r0, #0]
 800ecda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ece2:	e76c      	b.n	800ebbe <_printf_i+0xf6>
 800ece4:	0800f8b2 	.word	0x0800f8b2
 800ece8:	0800f8c3 	.word	0x0800f8c3

0800ecec <memmove>:
 800ecec:	4288      	cmp	r0, r1
 800ecee:	b510      	push	{r4, lr}
 800ecf0:	eb01 0302 	add.w	r3, r1, r2
 800ecf4:	d807      	bhi.n	800ed06 <memmove+0x1a>
 800ecf6:	1e42      	subs	r2, r0, #1
 800ecf8:	4299      	cmp	r1, r3
 800ecfa:	d00a      	beq.n	800ed12 <memmove+0x26>
 800ecfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed00:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ed04:	e7f8      	b.n	800ecf8 <memmove+0xc>
 800ed06:	4283      	cmp	r3, r0
 800ed08:	d9f5      	bls.n	800ecf6 <memmove+0xa>
 800ed0a:	1881      	adds	r1, r0, r2
 800ed0c:	1ad2      	subs	r2, r2, r3
 800ed0e:	42d3      	cmn	r3, r2
 800ed10:	d100      	bne.n	800ed14 <memmove+0x28>
 800ed12:	bd10      	pop	{r4, pc}
 800ed14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ed1c:	e7f7      	b.n	800ed0e <memmove+0x22>

0800ed1e <_realloc_r>:
 800ed1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed20:	4607      	mov	r7, r0
 800ed22:	4614      	mov	r4, r2
 800ed24:	460e      	mov	r6, r1
 800ed26:	b921      	cbnz	r1, 800ed32 <_realloc_r+0x14>
 800ed28:	4611      	mov	r1, r2
 800ed2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed2e:	f7ff bc6f 	b.w	800e610 <_malloc_r>
 800ed32:	b922      	cbnz	r2, 800ed3e <_realloc_r+0x20>
 800ed34:	f7ff fc1e 	bl	800e574 <_free_r>
 800ed38:	4625      	mov	r5, r4
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed3e:	f000 f814 	bl	800ed6a <_malloc_usable_size_r>
 800ed42:	42a0      	cmp	r0, r4
 800ed44:	d20f      	bcs.n	800ed66 <_realloc_r+0x48>
 800ed46:	4621      	mov	r1, r4
 800ed48:	4638      	mov	r0, r7
 800ed4a:	f7ff fc61 	bl	800e610 <_malloc_r>
 800ed4e:	4605      	mov	r5, r0
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d0f2      	beq.n	800ed3a <_realloc_r+0x1c>
 800ed54:	4631      	mov	r1, r6
 800ed56:	4622      	mov	r2, r4
 800ed58:	f7ff fbf8 	bl	800e54c <memcpy>
 800ed5c:	4631      	mov	r1, r6
 800ed5e:	4638      	mov	r0, r7
 800ed60:	f7ff fc08 	bl	800e574 <_free_r>
 800ed64:	e7e9      	b.n	800ed3a <_realloc_r+0x1c>
 800ed66:	4635      	mov	r5, r6
 800ed68:	e7e7      	b.n	800ed3a <_realloc_r+0x1c>

0800ed6a <_malloc_usable_size_r>:
 800ed6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed6e:	1f18      	subs	r0, r3, #4
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	bfbc      	itt	lt
 800ed74:	580b      	ldrlt	r3, [r1, r0]
 800ed76:	18c0      	addlt	r0, r0, r3
 800ed78:	4770      	bx	lr
	...

0800ed7c <_init>:
 800ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7e:	bf00      	nop
 800ed80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed82:	bc08      	pop	{r3}
 800ed84:	469e      	mov	lr, r3
 800ed86:	4770      	bx	lr

0800ed88 <_fini>:
 800ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8a:	bf00      	nop
 800ed8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8e:	bc08      	pop	{r3}
 800ed90:	469e      	mov	lr, r3
 800ed92:	4770      	bx	lr
