
H747_LCD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006860  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e8c  08006e8c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e94  08006e94  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  24000074  08006f10  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001ac  08006f10  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e103  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000348f  00000000  00000000  0003e1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00041638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00042588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003feae  00000000  00000000  000433d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131e2  00000000  00000000  0008327e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195795  00000000  00000000  00096460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022bbf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004544  00000000  00000000  0022bc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006ae0 	.word	0x08006ae0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	08006ae0 	.word	0x08006ae0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c4;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af02      	add	r7, sp, #8
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f023 030f 	bic.w	r3, r3, #15
 8000714:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	f043 030c 	orr.w	r3, r3, #12
 8000722:	b2db      	uxtb	r3, r3
 8000724:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	b2db      	uxtb	r3, r3
 800072e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000730:	7bbb      	ldrb	r3, [r7, #14]
 8000732:	f043 030c 	orr.w	r3, r3, #12
 8000736:	b2db      	uxtb	r3, r3
 8000738:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	b2db      	uxtb	r3, r3
 8000742:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000744:	f107 0208 	add.w	r2, r7, #8
 8000748:	2364      	movs	r3, #100	; 0x64
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2304      	movs	r3, #4
 800074e:	214e      	movs	r1, #78	; 0x4e
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <lcd_send_cmd+0x5c>)
 8000752:	f001 fd8f 	bl	8002274 <HAL_I2C_Master_Transmit>
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	240000a0 	.word	0x240000a0

08000764 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f023 030f 	bic.w	r3, r3, #15
 8000774:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	f043 030d 	orr.w	r3, r3, #13
 8000782:	b2db      	uxtb	r3, r3
 8000784:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	f043 0309 	orr.w	r3, r3, #9
 800078c:	b2db      	uxtb	r3, r3
 800078e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000790:	7bbb      	ldrb	r3, [r7, #14]
 8000792:	f043 030d 	orr.w	r3, r3, #13
 8000796:	b2db      	uxtb	r3, r3
 8000798:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	f043 0309 	orr.w	r3, r3, #9
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007a4:	f107 0208 	add.w	r2, r7, #8
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2304      	movs	r3, #4
 80007ae:	214e      	movs	r1, #78	; 0x4e
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <lcd_send_data+0x5c>)
 80007b2:	f001 fd5f 	bl	8002274 <HAL_I2C_Master_Transmit>
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	240000a0 	.word	0x240000a0

080007c4 <lcd_clear>:

void lcd_clear (void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ff9a 	bl	8000704 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	e005      	b.n	80007e2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80007d6:	2020      	movs	r0, #32
 80007d8:	f7ff ffc4 	bl	8000764 <lcd_send_data>
	for (int i=0; i<100; i++)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3301      	adds	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b63      	cmp	r3, #99	; 0x63
 80007e6:	ddf6      	ble.n	80007d6 <lcd_clear+0x12>
	}
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b03      	cmp	r3, #3
 8000802:	d81f      	bhi.n	8000844 <lcd_put_cur+0x50>
 8000804:	a201      	add	r2, pc, #4	; (adr r2, 800080c <lcd_put_cur+0x18>)
 8000806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080a:	bf00      	nop
 800080c:	0800081d 	.word	0x0800081d
 8000810:	08000827 	.word	0x08000827
 8000814:	08000831 	.word	0x08000831
 8000818:	0800083b 	.word	0x0800083b
    switch (row)
    {
        case 0:
            col |= 0x80;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000822:	603b      	str	r3, [r7, #0]
            break;
 8000824:	e00f      	b.n	8000846 <lcd_put_cur+0x52>
        case 1:
            col |= 0xC0;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800082c:	603b      	str	r3, [r7, #0]
            break;
 800082e:	e00a      	b.n	8000846 <lcd_put_cur+0x52>
        case 2:
            col |= 0x94;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 8000836:	603b      	str	r3, [r7, #0]
            break;
 8000838:	e005      	b.n	8000846 <lcd_put_cur+0x52>
        case 3:
            col |= 0xd4;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 8000840:	603b      	str	r3, [r7, #0]
            break;
 8000842:	e000      	b.n	8000846 <lcd_put_cur+0x52>
        default:
			break;
 8000844:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff5a 	bl	8000704 <lcd_send_cmd>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <lcd_init>:


void lcd_init (void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800085c:	2032      	movs	r0, #50	; 0x32
 800085e:	f001 f927 	bl	8001ab0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000862:	2030      	movs	r0, #48	; 0x30
 8000864:	f7ff ff4e 	bl	8000704 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000868:	2005      	movs	r0, #5
 800086a:	f001 f921 	bl	8001ab0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800086e:	2030      	movs	r0, #48	; 0x30
 8000870:	f7ff ff48 	bl	8000704 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000874:	2001      	movs	r0, #1
 8000876:	f001 f91b 	bl	8001ab0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800087a:	2030      	movs	r0, #48	; 0x30
 800087c:	f7ff ff42 	bl	8000704 <lcd_send_cmd>
	HAL_Delay(10);
 8000880:	200a      	movs	r0, #10
 8000882:	f001 f915 	bl	8001ab0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000886:	2020      	movs	r0, #32
 8000888:	f7ff ff3c 	bl	8000704 <lcd_send_cmd>
	HAL_Delay(10);
 800088c:	200a      	movs	r0, #10
 800088e:	f001 f90f 	bl	8001ab0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000892:	2028      	movs	r0, #40	; 0x28
 8000894:	f7ff ff36 	bl	8000704 <lcd_send_cmd>
	HAL_Delay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f001 f909 	bl	8001ab0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800089e:	2008      	movs	r0, #8
 80008a0:	f7ff ff30 	bl	8000704 <lcd_send_cmd>
	HAL_Delay(1);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f001 f903 	bl	8001ab0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff ff2a 	bl	8000704 <lcd_send_cmd>
	HAL_Delay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f001 f8fd 	bl	8001ab0 <HAL_Delay>
	HAL_Delay(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f001 f8fa 	bl	8001ab0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80008bc:	2006      	movs	r0, #6
 80008be:	f7ff ff21 	bl	8000704 <lcd_send_cmd>
	HAL_Delay(1);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f001 f8f4 	bl	8001ab0 <HAL_Delay>
	lcd_send_cmd (0x0F); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80008c8:	200f      	movs	r0, #15
 80008ca:	f7ff ff1b 	bl	8000704 <lcd_send_cmd>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80008da:	e006      	b.n	80008ea <lcd_send_string+0x18>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff3d 	bl	8000764 <lcd_send_data>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f4      	bne.n	80008dc <lcd_send_string+0xa>
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <vMoveScreenUp>:
teLCDState eLCDState = E_LCD_MAIN_MENU;

uint8_t u8MenuIndex = 0;

void vMoveScreenUp(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	if(u8MenuIndex < 3)u8MenuIndex++;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <vMoveScreenUp+0x24>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d805      	bhi.n	8000914 <vMoveScreenUp+0x18>
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <vMoveScreenUp+0x24>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <vMoveScreenUp+0x24>)
 8000912:	701a      	strb	r2, [r3, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	24000091 	.word	0x24000091

08000924 <vMoveScreenDown>:

void vMoveScreenDown(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	if(u8MenuIndex > 0)u8MenuIndex--;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <vMoveScreenDown+0x24>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d005      	beq.n	800093c <vMoveScreenDown+0x18>
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <vMoveScreenDown+0x24>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3b01      	subs	r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <vMoveScreenDown+0x24>)
 800093a:	701a      	strb	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	24000091 	.word	0x24000091

0800094c <vLCDDisplay>:

void vLCDDisplay(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	switch (eLCDState)
 8000950:	4bc7      	ldr	r3, [pc, #796]	; (8000c70 <vLCDDisplay+0x324>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b0a      	cmp	r3, #10
 8000956:	f200 81f8 	bhi.w	8000d4a <vLCDDisplay+0x3fe>
 800095a:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <vLCDDisplay+0x14>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	0800098d 	.word	0x0800098d
 8000964:	080009d7 	.word	0x080009d7
 8000968:	08000a21 	.word	0x08000a21
 800096c:	08000a6b 	.word	0x08000a6b
 8000970:	08000ab5 	.word	0x08000ab5
 8000974:	08000aff 	.word	0x08000aff
 8000978:	08000b49 	.word	0x08000b49
 800097c:	08000b93 	.word	0x08000b93
 8000980:	08000bdd 	.word	0x08000bdd
 8000984:	08000c27 	.word	0x08000c27
 8000988:	08000d01 	.word	0x08000d01
	{
		case E_LCD_MAIN_MENU:
		{
			lcd_clear();
 800098c:	f7ff ff1a 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 8000990:	2100      	movs	r1, #0
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff ff2e 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Overview");
 8000998:	48b6      	ldr	r0, [pc, #728]	; (8000c74 <vLCDDisplay+0x328>)
 800099a:	f7ff ff9a 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(1,0);
 800099e:	2100      	movs	r1, #0
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff ff27 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("System setting");
 80009a6:	48b4      	ldr	r0, [pc, #720]	; (8000c78 <vLCDDisplay+0x32c>)
 80009a8:	f7ff ff93 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 80009ac:	2100      	movs	r1, #0
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff ff20 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("I/O setting");
 80009b4:	48b1      	ldr	r0, [pc, #708]	; (8000c7c <vLCDDisplay+0x330>)
 80009b6:	f7ff ff8c 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	2003      	movs	r0, #3
 80009be:	f7ff ff19 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Sensor status");
 80009c2:	48af      	ldr	r0, [pc, #700]	; (8000c80 <vLCDDisplay+0x334>)
 80009c4:	f7ff ff85 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,0);
 80009c8:	4bae      	ldr	r3, [pc, #696]	; (8000c84 <vLCDDisplay+0x338>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff10 	bl	80007f4 <lcd_put_cur>
			break;
 80009d4:	e1ba      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		case E_LCD_OVERVIEW:
		{
			lcd_clear();
 80009d6:	f7ff fef5 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 80009da:	2100      	movs	r1, #0
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff ff09 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Model name: D-SL21");
 80009e2:	48a9      	ldr	r0, [pc, #676]	; (8000c88 <vLCDDisplay+0x33c>)
 80009e4:	f7ff ff75 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(1,0);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff ff02 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Station name: Hi");
 80009f0:	48a6      	ldr	r0, [pc, #664]	; (8000c8c <vLCDDisplay+0x340>)
 80009f2:	f7ff ff6e 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 80009f6:	2100      	movs	r1, #0
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff fefb 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Serial number: 202");
 80009fe:	48a4      	ldr	r0, [pc, #656]	; (8000c90 <vLCDDisplay+0x344>)
 8000a00:	f7ff ff67 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 8000a04:	2100      	movs	r1, #0
 8000a06:	2003      	movs	r0, #3
 8000a08:	f7ff fef4 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Voltage: 9.1V");
 8000a0c:	48a1      	ldr	r0, [pc, #644]	; (8000c94 <vLCDDisplay+0x348>)
 8000a0e:	f7ff ff60 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,0);
 8000a12:	4b9c      	ldr	r3, [pc, #624]	; (8000c84 <vLCDDisplay+0x338>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff feeb 	bl	80007f4 <lcd_put_cur>
			break;
 8000a1e:	e195      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		case E_LCD_SYSTEM_SETTING:
		{
			lcd_clear();
 8000a20:	f7ff fed0 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 8000a24:	2100      	movs	r1, #0
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fee4 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Name: _________");
 8000a2c:	489a      	ldr	r0, [pc, #616]	; (8000c98 <vLCDDisplay+0x34c>)
 8000a2e:	f7ff ff50 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(1,0);
 8000a32:	2100      	movs	r1, #0
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fedd 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("ID: ___________");
 8000a3a:	4898      	ldr	r0, [pc, #608]	; (8000c9c <vLCDDisplay+0x350>)
 8000a3c:	f7ff ff49 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 8000a40:	2100      	movs	r1, #0
 8000a42:	2002      	movs	r0, #2
 8000a44:	f7ff fed6 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("IPAdd: 192.168");
 8000a48:	4895      	ldr	r0, [pc, #596]	; (8000ca0 <vLCDDisplay+0x354>)
 8000a4a:	f7ff ff42 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2003      	movs	r0, #3
 8000a52:	f7ff fecf 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Date: 5-5-2021");
 8000a56:	4893      	ldr	r0, [pc, #588]	; (8000ca4 <vLCDDisplay+0x358>)
 8000a58:	f7ff ff3b 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,0);
 8000a5c:	4b89      	ldr	r3, [pc, #548]	; (8000c84 <vLCDDisplay+0x338>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fec6 	bl	80007f4 <lcd_put_cur>
			break;
 8000a68:	e170      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		case E_LCD_IO_SETTING:
		{
			lcd_clear();
 8000a6a:	f7ff feab 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff febf 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("I/O setting");
 8000a76:	4881      	ldr	r0, [pc, #516]	; (8000c7c <vLCDDisplay+0x330>)
 8000a78:	f7ff ff2b 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(1,0);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff feb8 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Setting Analog channel");
 8000a84:	4888      	ldr	r0, [pc, #544]	; (8000ca8 <vLCDDisplay+0x35c>)
 8000a86:	f7ff ff24 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f7ff feb1 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Setting Digital channel");
 8000a92:	4886      	ldr	r0, [pc, #536]	; (8000cac <vLCDDisplay+0x360>)
 8000a94:	f7ff ff1d 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f7ff feaa 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Setting Serial channel");
 8000aa0:	4883      	ldr	r0, [pc, #524]	; (8000cb0 <vLCDDisplay+0x364>)
 8000aa2:	f7ff ff16 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000aa6:	4b77      	ldr	r3, [pc, #476]	; (8000c84 <vLCDDisplay+0x338>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fea1 	bl	80007f4 <lcd_put_cur>
			break;
 8000ab2:	e14b      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		case E_LCD_IO_SETTING_ANALOG:
		{
			lcd_clear();
 8000ab4:	f7ff fe86 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff fe9a 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Setting analog");
 8000ac0:	487c      	ldr	r0, [pc, #496]	; (8000cb4 <vLCDDisplay+0x368>)
 8000ac2:	f7ff ff06 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(1,0);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff fe93 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("AI1:      Enable");
 8000ace:	487a      	ldr	r0, [pc, #488]	; (8000cb8 <vLCDDisplay+0x36c>)
 8000ad0:	f7ff feff 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	f7ff fe8c 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("AI2:      Enable");
 8000adc:	4877      	ldr	r0, [pc, #476]	; (8000cbc <vLCDDisplay+0x370>)
 8000ade:	f7ff fef8 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f7ff fe85 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("AI3:      Enable");
 8000aea:	4875      	ldr	r0, [pc, #468]	; (8000cc0 <vLCDDisplay+0x374>)
 8000aec:	f7ff fef1 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000af0:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <vLCDDisplay+0x338>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe7c 	bl	80007f4 <lcd_put_cur>
			break;
 8000afc:	e126      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		case E_LCD_IO_SETTING_DIGITAL:
		{
			lcd_clear();
 8000afe:	f7ff fe61 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 8000b02:	2100      	movs	r1, #0
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fe75 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Setting digital");
 8000b0a:	486e      	ldr	r0, [pc, #440]	; (8000cc4 <vLCDDisplay+0x378>)
 8000b0c:	f7ff fee1 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(1,0);
 8000b10:	2100      	movs	r1, #0
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fe6e 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("AI1:      Enable");
 8000b18:	4867      	ldr	r0, [pc, #412]	; (8000cb8 <vLCDDisplay+0x36c>)
 8000b1a:	f7ff feda 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff fe67 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("AI2:      Enable");
 8000b26:	4865      	ldr	r0, [pc, #404]	; (8000cbc <vLCDDisplay+0x370>)
 8000b28:	f7ff fed3 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f7ff fe60 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("AI3:      Enable");
 8000b34:	4862      	ldr	r0, [pc, #392]	; (8000cc0 <vLCDDisplay+0x374>)
 8000b36:	f7ff fecc 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000b3a:	4b52      	ldr	r3, [pc, #328]	; (8000c84 <vLCDDisplay+0x338>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe57 	bl	80007f4 <lcd_put_cur>
			break;
 8000b46:	e101      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		case E_LCD_IO_SETTING_SERIAL:
		{
			lcd_clear();
 8000b48:	f7ff fe3c 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff fe50 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Setting Serial");
 8000b54:	485c      	ldr	r0, [pc, #368]	; (8000cc8 <vLCDDisplay+0x37c>)
 8000b56:	f7ff febc 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(1,0);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f7ff fe49 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("COM4:    Enable");
 8000b62:	485a      	ldr	r0, [pc, #360]	; (8000ccc <vLCDDisplay+0x380>)
 8000b64:	f7ff feb5 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	f7ff fe42 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("SDI12:   Enable");
 8000b70:	4857      	ldr	r0, [pc, #348]	; (8000cd0 <vLCDDisplay+0x384>)
 8000b72:	f7ff feae 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 8000b76:	2100      	movs	r1, #0
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f7ff fe3b 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("RS485:   Enable");
 8000b7e:	4855      	ldr	r0, [pc, #340]	; (8000cd4 <vLCDDisplay+0x388>)
 8000b80:	f7ff fea7 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000b84:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <vLCDDisplay+0x338>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fe32 	bl	80007f4 <lcd_put_cur>
			break;
 8000b90:	e0dc      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		case E_LCD_SENSOR_STATUS:
		{
			lcd_clear();
 8000b92:	f7ff fe17 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fe2b 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Sensor status");
 8000b9e:	4838      	ldr	r0, [pc, #224]	; (8000c80 <vLCDDisplay+0x334>)
 8000ba0:	f7ff fe97 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(1,0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fe24 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Temperature: 20C");
 8000bac:	484a      	ldr	r0, [pc, #296]	; (8000cd8 <vLCDDisplay+0x38c>)
 8000bae:	f7ff fe90 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f7ff fe1d 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Humidity: 75%");
 8000bba:	4848      	ldr	r0, [pc, #288]	; (8000cdc <vLCDDisplay+0x390>)
 8000bbc:	f7ff fe89 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f7ff fe16 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Date: 5-5-2021");
 8000bc8:	4836      	ldr	r0, [pc, #216]	; (8000ca4 <vLCDDisplay+0x358>)
 8000bca:	f7ff fe82 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <vLCDDisplay+0x338>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fe0d 	bl	80007f4 <lcd_put_cur>
			break;
 8000bda:	e0b7      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		case E_LCD_TRANSMISSION_SETTING:
		{
			lcd_clear();
 8000bdc:	f7ff fdf2 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 8000be0:	2100      	movs	r1, #0
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fe06 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Transmission setting");
 8000be8:	483d      	ldr	r0, [pc, #244]	; (8000ce0 <vLCDDisplay+0x394>)
 8000bea:	f7ff fe72 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(0,0);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fdff 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Cellular setting");
 8000bf6:	483b      	ldr	r0, [pc, #236]	; (8000ce4 <vLCDDisplay+0x398>)
 8000bf8:	f7ff fe6b 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f7ff fdf8 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Ethernet setting");
 8000c04:	4838      	ldr	r0, [pc, #224]	; (8000ce8 <vLCDDisplay+0x39c>)
 8000c06:	f7ff fe64 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f7ff fdf1 	bl	80007f4 <lcd_put_cur>
			lcd_send_string(" ");
 8000c12:	4836      	ldr	r0, [pc, #216]	; (8000cec <vLCDDisplay+0x3a0>)
 8000c14:	f7ff fe5d 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <vLCDDisplay+0x338>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fde8 	bl	80007f4 <lcd_put_cur>
			break;
 8000c24:	e092      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		case E_LCD_STORAGE_SETTING:
		{
			lcd_clear();
 8000c26:	f7ff fdcd 	bl	80007c4 <lcd_clear>
			lcd_put_cur(0,0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fde1 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Storage setting");
 8000c32:	482f      	ldr	r0, [pc, #188]	; (8000cf0 <vLCDDisplay+0x3a4>)
 8000c34:	f7ff fe4d 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(1,0);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fdda 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Space free: 55%");
 8000c40:	482c      	ldr	r0, [pc, #176]	; (8000cf4 <vLCDDisplay+0x3a8>)
 8000c42:	f7ff fe46 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff fdd3 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Storage: Forever");
 8000c4e:	482a      	ldr	r0, [pc, #168]	; (8000cf8 <vLCDDisplay+0x3ac>)
 8000c50:	f7ff fe3f 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,0);
 8000c54:	2100      	movs	r1, #0
 8000c56:	2003      	movs	r0, #3
 8000c58:	f7ff fdcc 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("USB: Enable");
 8000c5c:	4827      	ldr	r0, [pc, #156]	; (8000cfc <vLCDDisplay+0x3b0>)
 8000c5e:	f7ff fe38 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <vLCDDisplay+0x338>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2101      	movs	r1, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fdc3 	bl	80007f4 <lcd_put_cur>
			break;
 8000c6e:	e06d      	b.n	8000d4c <vLCDDisplay+0x400>
 8000c70:	24000090 	.word	0x24000090
 8000c74:	08006af8 	.word	0x08006af8
 8000c78:	08006b04 	.word	0x08006b04
 8000c7c:	08006b14 	.word	0x08006b14
 8000c80:	08006b20 	.word	0x08006b20
 8000c84:	24000091 	.word	0x24000091
 8000c88:	08006b30 	.word	0x08006b30
 8000c8c:	08006b44 	.word	0x08006b44
 8000c90:	08006b58 	.word	0x08006b58
 8000c94:	08006b6c 	.word	0x08006b6c
 8000c98:	08006b7c 	.word	0x08006b7c
 8000c9c:	08006b8c 	.word	0x08006b8c
 8000ca0:	08006b9c 	.word	0x08006b9c
 8000ca4:	08006bac 	.word	0x08006bac
 8000ca8:	08006bbc 	.word	0x08006bbc
 8000cac:	08006bd4 	.word	0x08006bd4
 8000cb0:	08006bec 	.word	0x08006bec
 8000cb4:	08006c04 	.word	0x08006c04
 8000cb8:	08006c14 	.word	0x08006c14
 8000cbc:	08006c28 	.word	0x08006c28
 8000cc0:	08006c3c 	.word	0x08006c3c
 8000cc4:	08006c50 	.word	0x08006c50
 8000cc8:	08006c60 	.word	0x08006c60
 8000ccc:	08006c70 	.word	0x08006c70
 8000cd0:	08006c80 	.word	0x08006c80
 8000cd4:	08006c90 	.word	0x08006c90
 8000cd8:	08006ca0 	.word	0x08006ca0
 8000cdc:	08006cb4 	.word	0x08006cb4
 8000ce0:	08006cc4 	.word	0x08006cc4
 8000ce4:	08006cdc 	.word	0x08006cdc
 8000ce8:	08006cf0 	.word	0x08006cf0
 8000cec:	08006d04 	.word	0x08006d04
 8000cf0:	08006d08 	.word	0x08006d08
 8000cf4:	08006d18 	.word	0x08006d18
 8000cf8:	08006d28 	.word	0x08006d28
 8000cfc:	08006d3c 	.word	0x08006d3c
		}
		case E_LCD_LOG_FILE:
		{
			lcd_clear();
 8000d00:	f7ff fd60 	bl	80007c4 <lcd_clear>
			lcd_put_cur(1,1);
 8000d04:	2101      	movs	r1, #1
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fd74 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("Log file");
 8000d0c:	4810      	ldr	r0, [pc, #64]	; (8000d50 <vLCDDisplay+0x404>)
 8000d0e:	f7ff fde0 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(2,1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	2002      	movs	r0, #2
 8000d16:	f7ff fd6d 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("23/5 Setting change");
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <vLCDDisplay+0x408>)
 8000d1c:	f7ff fdd9 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(3,1);
 8000d20:	2101      	movs	r1, #1
 8000d22:	2003      	movs	r0, #3
 8000d24:	f7ff fd66 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("24/5 Setting change");
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <vLCDDisplay+0x40c>)
 8000d2a:	f7ff fdd2 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(4,1);
 8000d2e:	2101      	movs	r1, #1
 8000d30:	2004      	movs	r0, #4
 8000d32:	f7ff fd5f 	bl	80007f4 <lcd_put_cur>
			lcd_send_string("25/5 Setting change");
 8000d36:	4809      	ldr	r0, [pc, #36]	; (8000d5c <vLCDDisplay+0x410>)
 8000d38:	f7ff fdcb 	bl	80008d2 <lcd_send_string>
			lcd_put_cur(u8MenuIndex,1);
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <vLCDDisplay+0x414>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fd56 	bl	80007f4 <lcd_put_cur>
			break;
 8000d48:	e000      	b.n	8000d4c <vLCDDisplay+0x400>
		}
		default:
		break;
 8000d4a:	bf00      	nop
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	08006d48 	.word	0x08006d48
 8000d54:	08006d54 	.word	0x08006d54
 8000d58:	08006d68 	.word	0x08006d68
 8000d5c:	08006d7c 	.word	0x08006d7c
 8000d60:	24000091 	.word	0x24000091

08000d64 <vChangeLCDState>:

void vChangeLCDState(uint8_t u8Key)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
    switch (eLCDState)
 8000d6e:	4ba9      	ldr	r3, [pc, #676]	; (8001014 <vChangeLCDState+0x2b0>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b0a      	cmp	r3, #10
 8000d74:	f200 8194 	bhi.w	80010a0 <vChangeLCDState+0x33c>
 8000d78:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <vChangeLCDState+0x1c>)
 8000d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7e:	bf00      	nop
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000e05 	.word	0x08000e05
 8000d88:	08000e47 	.word	0x08000e47
 8000d8c:	08000e89 	.word	0x08000e89
 8000d90:	08000ecb 	.word	0x08000ecb
 8000d94:	08000f0d 	.word	0x08000f0d
 8000d98:	08000f4f 	.word	0x08000f4f
 8000d9c:	08000f91 	.word	0x08000f91
 8000da0:	08000fd3 	.word	0x08000fd3
 8000da4:	0800101d 	.word	0x0800101d
 8000da8:	0800105f 	.word	0x0800105f
    {
        case E_LCD_MAIN_MENU:
        {
            switch(u8Key)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b40      	cmp	r3, #64	; 0x40
 8000db0:	d023      	beq.n	8000dfa <vChangeLCDState+0x96>
 8000db2:	2b40      	cmp	r3, #64	; 0x40
 8000db4:	dc24      	bgt.n	8000e00 <vChangeLCDState+0x9c>
 8000db6:	2b20      	cmp	r3, #32
 8000db8:	d005      	beq.n	8000dc6 <vChangeLCDState+0x62>
 8000dba:	2b20      	cmp	r3, #32
 8000dbc:	dc20      	bgt.n	8000e00 <vChangeLCDState+0x9c>
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d018      	beq.n	8000df4 <vChangeLCDState+0x90>
 8000dc2:	2b10      	cmp	r3, #16
                case GPIO_PIN_6:
                        vMoveScreenDown();
                    break;

                case GPIO_PIN_4:
                    break;
 8000dc4:	e01d      	b.n	8000e02 <vChangeLCDState+0x9e>
					switch(u8MenuIndex)
 8000dc6:	4b94      	ldr	r3, [pc, #592]	; (8001018 <vChangeLCDState+0x2b4>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <vChangeLCDState+0x70>
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d004      	beq.n	8000ddc <vChangeLCDState+0x78>
 8000dd2:	e007      	b.n	8000de4 <vChangeLCDState+0x80>
							eLCDState = E_LCD_OVERVIEW;
 8000dd4:	4b8f      	ldr	r3, [pc, #572]	; (8001014 <vChangeLCDState+0x2b0>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
						break;
 8000dda:	e007      	b.n	8000dec <vChangeLCDState+0x88>
							eLCDState = E_LCD_SYSTEM_SETTING;
 8000ddc:	4b8d      	ldr	r3, [pc, #564]	; (8001014 <vChangeLCDState+0x2b0>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	701a      	strb	r2, [r3, #0]
						break;
 8000de2:	e003      	b.n	8000dec <vChangeLCDState+0x88>
							eLCDState = E_LCD_MAIN_MENU;
 8000de4:	4b8b      	ldr	r3, [pc, #556]	; (8001014 <vChangeLCDState+0x2b0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
						break;
 8000dea:	bf00      	nop
					u8MenuIndex = 0;
 8000dec:	4b8a      	ldr	r3, [pc, #552]	; (8001018 <vChangeLCDState+0x2b4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
                    break;
 8000df2:	e006      	b.n	8000e02 <vChangeLCDState+0x9e>
                        vMoveScreenUp();
 8000df4:	f7ff fd82 	bl	80008fc <vMoveScreenUp>
                    break;
 8000df8:	e003      	b.n	8000e02 <vChangeLCDState+0x9e>
                        vMoveScreenDown();
 8000dfa:	f7ff fd93 	bl	8000924 <vMoveScreenDown>
                    break;
 8000dfe:	e000      	b.n	8000e02 <vChangeLCDState+0x9e>
                default:
                    break;
 8000e00:	bf00      	nop
            }
            break;
 8000e02:	e14d      	b.n	80010a0 <vChangeLCDState+0x33c>
        }
        case E_LCD_OVERVIEW:
        {
            switch(u8Key)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b40      	cmp	r3, #64	; 0x40
 8000e08:	d011      	beq.n	8000e2e <vChangeLCDState+0xca>
 8000e0a:	2b40      	cmp	r3, #64	; 0x40
 8000e0c:	dc19      	bgt.n	8000e42 <vChangeLCDState+0xde>
 8000e0e:	2b20      	cmp	r3, #32
 8000e10:	d006      	beq.n	8000e20 <vChangeLCDState+0xbc>
 8000e12:	2b20      	cmp	r3, #32
 8000e14:	dc15      	bgt.n	8000e42 <vChangeLCDState+0xde>
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d006      	beq.n	8000e28 <vChangeLCDState+0xc4>
 8000e1a:	2b10      	cmp	r3, #16
 8000e1c:	d00a      	beq.n	8000e34 <vChangeLCDState+0xd0>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8000e1e:	e010      	b.n	8000e42 <vChangeLCDState+0xde>
                	u8MenuIndex = 0;
 8000e20:	4b7d      	ldr	r3, [pc, #500]	; (8001018 <vChangeLCDState+0x2b4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
                    break;
 8000e26:	e00d      	b.n	8000e44 <vChangeLCDState+0xe0>
                        vMoveScreenUp();
 8000e28:	f7ff fd68 	bl	80008fc <vMoveScreenUp>
                    break;
 8000e2c:	e00a      	b.n	8000e44 <vChangeLCDState+0xe0>
                        vMoveScreenDown();
 8000e2e:	f7ff fd79 	bl	8000924 <vMoveScreenDown>
                    break;
 8000e32:	e007      	b.n	8000e44 <vChangeLCDState+0xe0>
                	u8MenuIndex = 0;
 8000e34:	4b78      	ldr	r3, [pc, #480]	; (8001018 <vChangeLCDState+0x2b4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8000e3a:	4b76      	ldr	r3, [pc, #472]	; (8001014 <vChangeLCDState+0x2b0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
                    break;
 8000e40:	e000      	b.n	8000e44 <vChangeLCDState+0xe0>
                    break;
 8000e42:	bf00      	nop
            }
            break;
 8000e44:	e12c      	b.n	80010a0 <vChangeLCDState+0x33c>
        }
        case E_LCD_SYSTEM_SETTING:
        {
            switch(u8Key)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b40      	cmp	r3, #64	; 0x40
 8000e4a:	d011      	beq.n	8000e70 <vChangeLCDState+0x10c>
 8000e4c:	2b40      	cmp	r3, #64	; 0x40
 8000e4e:	dc19      	bgt.n	8000e84 <vChangeLCDState+0x120>
 8000e50:	2b20      	cmp	r3, #32
 8000e52:	d006      	beq.n	8000e62 <vChangeLCDState+0xfe>
 8000e54:	2b20      	cmp	r3, #32
 8000e56:	dc15      	bgt.n	8000e84 <vChangeLCDState+0x120>
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d006      	beq.n	8000e6a <vChangeLCDState+0x106>
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	d00a      	beq.n	8000e76 <vChangeLCDState+0x112>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8000e60:	e010      	b.n	8000e84 <vChangeLCDState+0x120>
                	u8MenuIndex = 0;
 8000e62:	4b6d      	ldr	r3, [pc, #436]	; (8001018 <vChangeLCDState+0x2b4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
                    break;
 8000e68:	e00d      	b.n	8000e86 <vChangeLCDState+0x122>
                        vMoveScreenUp();
 8000e6a:	f7ff fd47 	bl	80008fc <vMoveScreenUp>
                    break;
 8000e6e:	e00a      	b.n	8000e86 <vChangeLCDState+0x122>
                        vMoveScreenDown();
 8000e70:	f7ff fd58 	bl	8000924 <vMoveScreenDown>
                    break;
 8000e74:	e007      	b.n	8000e86 <vChangeLCDState+0x122>
                	u8MenuIndex = 0;
 8000e76:	4b68      	ldr	r3, [pc, #416]	; (8001018 <vChangeLCDState+0x2b4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8000e7c:	4b65      	ldr	r3, [pc, #404]	; (8001014 <vChangeLCDState+0x2b0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
                    break;
 8000e82:	e000      	b.n	8000e86 <vChangeLCDState+0x122>
                    break;
 8000e84:	bf00      	nop
            }
            break;
 8000e86:	e10b      	b.n	80010a0 <vChangeLCDState+0x33c>
        }
        case E_LCD_IO_SETTING:
        {
            switch(u8Key)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b40      	cmp	r3, #64	; 0x40
 8000e8c:	d011      	beq.n	8000eb2 <vChangeLCDState+0x14e>
 8000e8e:	2b40      	cmp	r3, #64	; 0x40
 8000e90:	dc19      	bgt.n	8000ec6 <vChangeLCDState+0x162>
 8000e92:	2b20      	cmp	r3, #32
 8000e94:	d006      	beq.n	8000ea4 <vChangeLCDState+0x140>
 8000e96:	2b20      	cmp	r3, #32
 8000e98:	dc15      	bgt.n	8000ec6 <vChangeLCDState+0x162>
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d006      	beq.n	8000eac <vChangeLCDState+0x148>
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	d00a      	beq.n	8000eb8 <vChangeLCDState+0x154>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8000ea2:	e010      	b.n	8000ec6 <vChangeLCDState+0x162>
                	u8MenuIndex = 0;
 8000ea4:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <vChangeLCDState+0x2b4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
                    break;
 8000eaa:	e00d      	b.n	8000ec8 <vChangeLCDState+0x164>
                        vMoveScreenUp();
 8000eac:	f7ff fd26 	bl	80008fc <vMoveScreenUp>
                    break;
 8000eb0:	e00a      	b.n	8000ec8 <vChangeLCDState+0x164>
                        vMoveScreenDown();
 8000eb2:	f7ff fd37 	bl	8000924 <vMoveScreenDown>
                    break;
 8000eb6:	e007      	b.n	8000ec8 <vChangeLCDState+0x164>
                	u8MenuIndex = 0;
 8000eb8:	4b57      	ldr	r3, [pc, #348]	; (8001018 <vChangeLCDState+0x2b4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8000ebe:	4b55      	ldr	r3, [pc, #340]	; (8001014 <vChangeLCDState+0x2b0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
                    break;
 8000ec4:	e000      	b.n	8000ec8 <vChangeLCDState+0x164>
                    break;
 8000ec6:	bf00      	nop
            }
            break;
 8000ec8:	e0ea      	b.n	80010a0 <vChangeLCDState+0x33c>
        }
        case E_LCD_IO_SETTING_ANALOG:
        {
            switch(u8Key)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b40      	cmp	r3, #64	; 0x40
 8000ece:	d011      	beq.n	8000ef4 <vChangeLCDState+0x190>
 8000ed0:	2b40      	cmp	r3, #64	; 0x40
 8000ed2:	dc19      	bgt.n	8000f08 <vChangeLCDState+0x1a4>
 8000ed4:	2b20      	cmp	r3, #32
 8000ed6:	d006      	beq.n	8000ee6 <vChangeLCDState+0x182>
 8000ed8:	2b20      	cmp	r3, #32
 8000eda:	dc15      	bgt.n	8000f08 <vChangeLCDState+0x1a4>
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d006      	beq.n	8000eee <vChangeLCDState+0x18a>
 8000ee0:	2b10      	cmp	r3, #16
 8000ee2:	d00a      	beq.n	8000efa <vChangeLCDState+0x196>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8000ee4:	e010      	b.n	8000f08 <vChangeLCDState+0x1a4>
                	u8MenuIndex = 0;
 8000ee6:	4b4c      	ldr	r3, [pc, #304]	; (8001018 <vChangeLCDState+0x2b4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
                    break;
 8000eec:	e00d      	b.n	8000f0a <vChangeLCDState+0x1a6>
                        vMoveScreenUp();
 8000eee:	f7ff fd05 	bl	80008fc <vMoveScreenUp>
                    break;
 8000ef2:	e00a      	b.n	8000f0a <vChangeLCDState+0x1a6>
                        vMoveScreenDown();
 8000ef4:	f7ff fd16 	bl	8000924 <vMoveScreenDown>
                    break;
 8000ef8:	e007      	b.n	8000f0a <vChangeLCDState+0x1a6>
                	u8MenuIndex = 0;
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <vChangeLCDState+0x2b4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <vChangeLCDState+0x2b0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
                    break;
 8000f06:	e000      	b.n	8000f0a <vChangeLCDState+0x1a6>
                    break;
 8000f08:	bf00      	nop
            }
            break;
 8000f0a:	e0c9      	b.n	80010a0 <vChangeLCDState+0x33c>
        }
        case E_LCD_IO_SETTING_DIGITAL:
        {
            switch(u8Key)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b40      	cmp	r3, #64	; 0x40
 8000f10:	d011      	beq.n	8000f36 <vChangeLCDState+0x1d2>
 8000f12:	2b40      	cmp	r3, #64	; 0x40
 8000f14:	dc19      	bgt.n	8000f4a <vChangeLCDState+0x1e6>
 8000f16:	2b20      	cmp	r3, #32
 8000f18:	d006      	beq.n	8000f28 <vChangeLCDState+0x1c4>
 8000f1a:	2b20      	cmp	r3, #32
 8000f1c:	dc15      	bgt.n	8000f4a <vChangeLCDState+0x1e6>
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d006      	beq.n	8000f30 <vChangeLCDState+0x1cc>
 8000f22:	2b10      	cmp	r3, #16
 8000f24:	d00a      	beq.n	8000f3c <vChangeLCDState+0x1d8>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8000f26:	e010      	b.n	8000f4a <vChangeLCDState+0x1e6>
                	u8MenuIndex = 0;
 8000f28:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <vChangeLCDState+0x2b4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
                    break;
 8000f2e:	e00d      	b.n	8000f4c <vChangeLCDState+0x1e8>
                        vMoveScreenUp();
 8000f30:	f7ff fce4 	bl	80008fc <vMoveScreenUp>
                    break;
 8000f34:	e00a      	b.n	8000f4c <vChangeLCDState+0x1e8>
                        vMoveScreenDown();
 8000f36:	f7ff fcf5 	bl	8000924 <vMoveScreenDown>
                    break;
 8000f3a:	e007      	b.n	8000f4c <vChangeLCDState+0x1e8>
                	u8MenuIndex = 0;
 8000f3c:	4b36      	ldr	r3, [pc, #216]	; (8001018 <vChangeLCDState+0x2b4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8000f42:	4b34      	ldr	r3, [pc, #208]	; (8001014 <vChangeLCDState+0x2b0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
                    break;
 8000f48:	e000      	b.n	8000f4c <vChangeLCDState+0x1e8>
                    break;
 8000f4a:	bf00      	nop
            }
            break;
 8000f4c:	e0a8      	b.n	80010a0 <vChangeLCDState+0x33c>
        }
        case E_LCD_IO_SETTING_SERIAL:
        {
            switch(u8Key)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b40      	cmp	r3, #64	; 0x40
 8000f52:	d011      	beq.n	8000f78 <vChangeLCDState+0x214>
 8000f54:	2b40      	cmp	r3, #64	; 0x40
 8000f56:	dc19      	bgt.n	8000f8c <vChangeLCDState+0x228>
 8000f58:	2b20      	cmp	r3, #32
 8000f5a:	d006      	beq.n	8000f6a <vChangeLCDState+0x206>
 8000f5c:	2b20      	cmp	r3, #32
 8000f5e:	dc15      	bgt.n	8000f8c <vChangeLCDState+0x228>
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d006      	beq.n	8000f72 <vChangeLCDState+0x20e>
 8000f64:	2b10      	cmp	r3, #16
 8000f66:	d00a      	beq.n	8000f7e <vChangeLCDState+0x21a>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8000f68:	e010      	b.n	8000f8c <vChangeLCDState+0x228>
                	u8MenuIndex = 0;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <vChangeLCDState+0x2b4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
                    break;
 8000f70:	e00d      	b.n	8000f8e <vChangeLCDState+0x22a>
                        vMoveScreenUp();
 8000f72:	f7ff fcc3 	bl	80008fc <vMoveScreenUp>
                    break;
 8000f76:	e00a      	b.n	8000f8e <vChangeLCDState+0x22a>
                        vMoveScreenDown();
 8000f78:	f7ff fcd4 	bl	8000924 <vMoveScreenDown>
                    break;
 8000f7c:	e007      	b.n	8000f8e <vChangeLCDState+0x22a>
                	u8MenuIndex = 0;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <vChangeLCDState+0x2b4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <vChangeLCDState+0x2b0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
                    break;
 8000f8a:	e000      	b.n	8000f8e <vChangeLCDState+0x22a>
                    break;
 8000f8c:	bf00      	nop
            }
            break;
 8000f8e:	e087      	b.n	80010a0 <vChangeLCDState+0x33c>
        }
        case E_LCD_SENSOR_STATUS:
        {
            switch(u8Key)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b40      	cmp	r3, #64	; 0x40
 8000f94:	d011      	beq.n	8000fba <vChangeLCDState+0x256>
 8000f96:	2b40      	cmp	r3, #64	; 0x40
 8000f98:	dc19      	bgt.n	8000fce <vChangeLCDState+0x26a>
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	d006      	beq.n	8000fac <vChangeLCDState+0x248>
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	dc15      	bgt.n	8000fce <vChangeLCDState+0x26a>
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d006      	beq.n	8000fb4 <vChangeLCDState+0x250>
 8000fa6:	2b10      	cmp	r3, #16
 8000fa8:	d00a      	beq.n	8000fc0 <vChangeLCDState+0x25c>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8000faa:	e010      	b.n	8000fce <vChangeLCDState+0x26a>
                	u8MenuIndex = 0;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <vChangeLCDState+0x2b4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
                    break;
 8000fb2:	e00d      	b.n	8000fd0 <vChangeLCDState+0x26c>
                        vMoveScreenUp();
 8000fb4:	f7ff fca2 	bl	80008fc <vMoveScreenUp>
                    break;
 8000fb8:	e00a      	b.n	8000fd0 <vChangeLCDState+0x26c>
                        vMoveScreenDown();
 8000fba:	f7ff fcb3 	bl	8000924 <vMoveScreenDown>
                    break;
 8000fbe:	e007      	b.n	8000fd0 <vChangeLCDState+0x26c>
                	u8MenuIndex = 0;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <vChangeLCDState+0x2b4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <vChangeLCDState+0x2b0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
                    break;
 8000fcc:	e000      	b.n	8000fd0 <vChangeLCDState+0x26c>
                    break;
 8000fce:	bf00      	nop
            }
            break;
 8000fd0:	e066      	b.n	80010a0 <vChangeLCDState+0x33c>
        }
        case E_LCD_TRANSMISSION_SETTING:
        {
            switch(u8Key)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b40      	cmp	r3, #64	; 0x40
 8000fd6:	d011      	beq.n	8000ffc <vChangeLCDState+0x298>
 8000fd8:	2b40      	cmp	r3, #64	; 0x40
 8000fda:	dc19      	bgt.n	8001010 <vChangeLCDState+0x2ac>
 8000fdc:	2b20      	cmp	r3, #32
 8000fde:	d006      	beq.n	8000fee <vChangeLCDState+0x28a>
 8000fe0:	2b20      	cmp	r3, #32
 8000fe2:	dc15      	bgt.n	8001010 <vChangeLCDState+0x2ac>
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d006      	beq.n	8000ff6 <vChangeLCDState+0x292>
 8000fe8:	2b10      	cmp	r3, #16
 8000fea:	d00a      	beq.n	8001002 <vChangeLCDState+0x29e>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8000fec:	e010      	b.n	8001010 <vChangeLCDState+0x2ac>
                	u8MenuIndex = 0;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <vChangeLCDState+0x2b4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
                    break;
 8000ff4:	e00d      	b.n	8001012 <vChangeLCDState+0x2ae>
                        vMoveScreenUp();
 8000ff6:	f7ff fc81 	bl	80008fc <vMoveScreenUp>
                    break;
 8000ffa:	e00a      	b.n	8001012 <vChangeLCDState+0x2ae>
                        vMoveScreenDown();
 8000ffc:	f7ff fc92 	bl	8000924 <vMoveScreenDown>
                    break;
 8001000:	e007      	b.n	8001012 <vChangeLCDState+0x2ae>
                	u8MenuIndex = 0;
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <vChangeLCDState+0x2b4>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <vChangeLCDState+0x2b0>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
                    break;
 800100e:	e000      	b.n	8001012 <vChangeLCDState+0x2ae>
                    break;
 8001010:	bf00      	nop
            }
            break;
 8001012:	e045      	b.n	80010a0 <vChangeLCDState+0x33c>
 8001014:	24000090 	.word	0x24000090
 8001018:	24000091 	.word	0x24000091
        }
        case E_LCD_STORAGE_SETTING:
        {
            switch(u8Key)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b40      	cmp	r3, #64	; 0x40
 8001020:	d011      	beq.n	8001046 <vChangeLCDState+0x2e2>
 8001022:	2b40      	cmp	r3, #64	; 0x40
 8001024:	dc19      	bgt.n	800105a <vChangeLCDState+0x2f6>
 8001026:	2b20      	cmp	r3, #32
 8001028:	d006      	beq.n	8001038 <vChangeLCDState+0x2d4>
 800102a:	2b20      	cmp	r3, #32
 800102c:	dc15      	bgt.n	800105a <vChangeLCDState+0x2f6>
 800102e:	2b08      	cmp	r3, #8
 8001030:	d006      	beq.n	8001040 <vChangeLCDState+0x2dc>
 8001032:	2b10      	cmp	r3, #16
 8001034:	d00a      	beq.n	800104c <vChangeLCDState+0x2e8>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8001036:	e010      	b.n	800105a <vChangeLCDState+0x2f6>
                	u8MenuIndex = 0;
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <vChangeLCDState+0x348>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
                    break;
 800103e:	e00d      	b.n	800105c <vChangeLCDState+0x2f8>
                        vMoveScreenUp();
 8001040:	f7ff fc5c 	bl	80008fc <vMoveScreenUp>
                    break;
 8001044:	e00a      	b.n	800105c <vChangeLCDState+0x2f8>
                        vMoveScreenDown();
 8001046:	f7ff fc6d 	bl	8000924 <vMoveScreenDown>
                    break;
 800104a:	e007      	b.n	800105c <vChangeLCDState+0x2f8>
                	u8MenuIndex = 0;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <vChangeLCDState+0x348>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <vChangeLCDState+0x34c>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
                    break;
 8001058:	e000      	b.n	800105c <vChangeLCDState+0x2f8>
                    break;
 800105a:	bf00      	nop
            }
            break;
 800105c:	e020      	b.n	80010a0 <vChangeLCDState+0x33c>
        }
        case E_LCD_LOG_FILE:
        {
            switch(u8Key)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b40      	cmp	r3, #64	; 0x40
 8001062:	d011      	beq.n	8001088 <vChangeLCDState+0x324>
 8001064:	2b40      	cmp	r3, #64	; 0x40
 8001066:	dc19      	bgt.n	800109c <vChangeLCDState+0x338>
 8001068:	2b20      	cmp	r3, #32
 800106a:	d006      	beq.n	800107a <vChangeLCDState+0x316>
 800106c:	2b20      	cmp	r3, #32
 800106e:	dc15      	bgt.n	800109c <vChangeLCDState+0x338>
 8001070:	2b08      	cmp	r3, #8
 8001072:	d006      	beq.n	8001082 <vChangeLCDState+0x31e>
 8001074:	2b10      	cmp	r3, #16
 8001076:	d00a      	beq.n	800108e <vChangeLCDState+0x32a>
                	u8MenuIndex = 0;
					eLCDState = E_LCD_MAIN_MENU;
                    break;

                default:
                    break;
 8001078:	e010      	b.n	800109c <vChangeLCDState+0x338>
                	u8MenuIndex = 0;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <vChangeLCDState+0x348>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
                    break;
 8001080:	e00d      	b.n	800109e <vChangeLCDState+0x33a>
                        vMoveScreenUp();
 8001082:	f7ff fc3b 	bl	80008fc <vMoveScreenUp>
                    break;
 8001086:	e00a      	b.n	800109e <vChangeLCDState+0x33a>
                        vMoveScreenDown();
 8001088:	f7ff fc4c 	bl	8000924 <vMoveScreenDown>
                    break;
 800108c:	e007      	b.n	800109e <vChangeLCDState+0x33a>
                	u8MenuIndex = 0;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <vChangeLCDState+0x348>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
					eLCDState = E_LCD_MAIN_MENU;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <vChangeLCDState+0x34c>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
                    break;
 800109a:	e000      	b.n	800109e <vChangeLCDState+0x33a>
                    break;
 800109c:	bf00      	nop
            }
            break;
 800109e:	bf00      	nop
        }
    }
    vLCDDisplay();
 80010a0:	f7ff fc54 	bl	800094c <vLCDDisplay>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	24000091 	.word	0x24000091
 80010b0:	24000090 	.word	0x24000090

080010b4 <__io_putchar>:
I2C_HandleTypeDef hi2c4;
UART_HandleTypeDef huart8;

char buf[25];

int __io_putchar (int ch) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t c = ch;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart8, &c, 1, HAL_MAX_DELAY);
 80010c2:	f107 010f 	add.w	r1, r7, #15
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	2201      	movs	r2, #1
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <__io_putchar+0x28>)
 80010ce:	f003 ffa9 	bl	8005024 <HAL_UART_Transmit>
	return ch;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	240000ec 	.word	0x240000ec

080010e0 <main>:
static void MX_GPIO_Init(void);
static void MX_I2C4_Init(void);
static void MX_UART8_Init(void);

int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

	int32_t timeout;
	timeout = 0xFFFF;
 80010e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ea:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80010ec:	bf00      	nop
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <main+0xf8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d004      	beq.n	8001104 <main+0x24>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dcf4      	bgt.n	80010ee <main+0xe>
	if ( timeout < 0 )
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da01      	bge.n	800110e <main+0x2e>
	{
		Error_Handler();
 800110a:	f000 fa3b 	bl	8001584 <Error_Handler>
	}

	HAL_Init();
 800110e:	f000 fc3d 	bl	800198c <HAL_Init>
	SystemClock_Config();
 8001112:	f000 f899 	bl	8001248 <SystemClock_Config>

	__HAL_RCC_HSEM_CLK_ENABLE();
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <main+0xf8>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <main+0xf8>)
 800111e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <main+0xf8>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	683b      	ldr	r3, [r7, #0]
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001134:	2000      	movs	r0, #0
 8001136:	f000 ffdf 	bl	80020f8 <HAL_HSEM_FastTake>
	HAL_HSEM_Release(HSEM_ID_0,0);
 800113a:	2100      	movs	r1, #0
 800113c:	2000      	movs	r0, #0
 800113e:	f000 fff5 	bl	800212c <HAL_HSEM_Release>
	timeout = 0xFFFF;
 8001142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001146:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001148:	bf00      	nop
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <main+0xf8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d104      	bne.n	8001160 <main+0x80>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	1e5a      	subs	r2, r3, #1
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dcf4      	bgt.n	800114a <main+0x6a>
	if ( timeout < 0 )
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	da01      	bge.n	800116a <main+0x8a>
	{
		Error_Handler();
 8001166:	f000 fa0d 	bl	8001584 <Error_Handler>
	}

	MX_GPIO_Init();
 800116a:	f000 f977 	bl	800145c <MX_GPIO_Init>
	MX_I2C4_Init();
 800116e:	f000 f8e9 	bl	8001344 <MX_I2C4_Init>
	MX_UART8_Init();
 8001172:	f000 f927 	bl	80013c4 <MX_UART8_Init>

	lcd_init ();
 8001176:	f7ff fb6f 	bl	8000858 <lcd_init>

	lcd_put_cur(0,0);
 800117a:	2100      	movs	r1, #0
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fb39 	bl	80007f4 <lcd_put_cur>
	lcd_send_string ("HELLO WORLD");
 8001182:	4816      	ldr	r0, [pc, #88]	; (80011dc <main+0xfc>)
 8001184:	f7ff fba5 	bl	80008d2 <lcd_send_string>

	HAL_Delay(1000);
 8001188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118c:	f000 fc90 	bl	8001ab0 <HAL_Delay>

	lcd_put_cur(1,0);
 8001190:	2100      	movs	r1, #0
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fb2e 	bl	80007f4 <lcd_put_cur>
	lcd_send_string("from CTECH");
 8001198:	4811      	ldr	r0, [pc, #68]	; (80011e0 <main+0x100>)
 800119a:	f7ff fb9a 	bl	80008d2 <lcd_send_string>

	HAL_Delay(1000);
 800119e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a2:	f000 fc85 	bl	8001ab0 <HAL_Delay>

	lcd_put_cur(2,0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	2002      	movs	r0, #2
 80011aa:	f7ff fb23 	bl	80007f4 <lcd_put_cur>
	lcd_send_string("BY");
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <main+0x104>)
 80011b0:	f7ff fb8f 	bl	80008d2 <lcd_send_string>

	HAL_Delay(1000);
 80011b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b8:	f000 fc7a 	bl	8001ab0 <HAL_Delay>

	lcd_put_cur(3,0);
 80011bc:	2100      	movs	r1, #0
 80011be:	2003      	movs	r0, #3
 80011c0:	f7ff fb18 	bl	80007f4 <lcd_put_cur>
	lcd_send_string("Tran Minh Tan");
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <main+0x108>)
 80011c6:	f7ff fb84 	bl	80008d2 <lcd_send_string>

	HAL_Delay(2000);
 80011ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011ce:	f000 fc6f 	bl	8001ab0 <HAL_Delay>
	vLCDDisplay();
 80011d2:	f7ff fbbb 	bl	800094c <vLCDDisplay>

	while (1)
 80011d6:	e7fe      	b.n	80011d6 <main+0xf6>
 80011d8:	58024400 	.word	0x58024400
 80011dc:	08006d90 	.word	0x08006d90
 80011e0:	08006d9c 	.word	0x08006d9c
 80011e4:	08006da8 	.word	0x08006da8
 80011e8:	08006dac 	.word	0x08006dac

080011ec <HAL_GPIO_EXTI_Callback>:
//		  }
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6){
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2b40      	cmp	r3, #64	; 0x40
 80011fa:	d102      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0x16>
		printf("***UP***\r\n");
 80011fc:	480e      	ldr	r0, [pc, #56]	; (8001238 <HAL_GPIO_EXTI_Callback+0x4c>)
 80011fe:	f005 f817 	bl	8006230 <puts>
	}
	if(GPIO_Pin == GPIO_PIN_3){
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d102      	bne.n	800120e <HAL_GPIO_EXTI_Callback+0x22>
		printf("***DOWN***\r\n");
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <HAL_GPIO_EXTI_Callback+0x50>)
 800120a:	f005 f811 	bl	8006230 <puts>
	}
	if(GPIO_Pin == GPIO_PIN_4){
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	2b10      	cmp	r3, #16
 8001212:	d102      	bne.n	800121a <HAL_GPIO_EXTI_Callback+0x2e>
		printf("***LEFT***\r\n");
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <HAL_GPIO_EXTI_Callback+0x54>)
 8001216:	f005 f80b 	bl	8006230 <puts>
	}
	if(GPIO_Pin == GPIO_PIN_5){
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	2b20      	cmp	r3, #32
 800121e:	d102      	bne.n	8001226 <HAL_GPIO_EXTI_Callback+0x3a>
		printf("***RIGHT***\r\n");
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <HAL_GPIO_EXTI_Callback+0x58>)
 8001222:	f005 f805 	bl	8006230 <puts>
	}

	vChangeLCDState(GPIO_Pin);
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fd9a 	bl	8000d64 <vChangeLCDState>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08006dbc 	.word	0x08006dbc
 800123c:	08006dc8 	.word	0x08006dc8
 8001240:	08006dd4 	.word	0x08006dd4
 8001244:	08006de0 	.word	0x08006de0

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b09e      	sub	sp, #120	; 0x78
 800124c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001254:	2004      	movs	r0, #4
 8001256:	f001 fb0d 	bl	8002874 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <SystemClock_Config+0xf4>)
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	4a36      	ldr	r2, [pc, #216]	; (800133c <SystemClock_Config+0xf4>)
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	62d3      	str	r3, [r2, #44]	; 0x2c
 800126a:	4b34      	ldr	r3, [pc, #208]	; (800133c <SystemClock_Config+0xf4>)
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <SystemClock_Config+0xf8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a31      	ldr	r2, [pc, #196]	; (8001340 <SystemClock_Config+0xf8>)
 800127a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <SystemClock_Config+0xf8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800128c:	bf00      	nop
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <SystemClock_Config+0xf8>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800129a:	d1f8      	bne.n	800128e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129c:	2301      	movs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b2:	2302      	movs	r3, #2
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80012b6:	2305      	movs	r3, #5
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 80012ba:	23a0      	movs	r3, #160	; 0xa0
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ca:	2304      	movs	r3, #4
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80012d2:	2308      	movs	r3, #8
 80012d4:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fb24 	bl	8002928 <HAL_RCC_OscConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80012e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012ee:	f000 f949 	bl	8001584 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80012f2:	233f      	movs	r3, #63	; 0x3f
 80012f4:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f6:	2303      	movs	r3, #3
 80012f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012fe:	2308      	movs	r3, #8
 8001300:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001314:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001318:	2104      	movs	r1, #4
 800131a:	4618      	mov	r0, r3
 800131c:	f001 ff14 	bl	8003148 <HAL_RCC_ClockConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8001326:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800132e:	f000 f929 	bl	8001584 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 8001332:	bf00      	nop
 8001334:	3778      	adds	r7, #120	; 0x78
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	58000400 	.word	0x58000400
 8001340:	58024800 	.word	0x58024800

08001344 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  hi2c4.Instance = I2C4;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_I2C4_Init+0x74>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_I2C4_Init+0x78>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_I2C4_Init+0x74>)
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <MX_I2C4_Init+0x7c>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_I2C4_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_I2C4_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_I2C4_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_I2C4_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C4_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C4_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C4_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <MX_I2C4_Init+0x74>)
 8001380:	f000 fee8 	bl	8002154 <HAL_I2C_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 f8fb 	bl	8001584 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <MX_I2C4_Init+0x74>)
 8001392:	f001 f9d7 	bl	8002744 <HAL_I2CEx_ConfigAnalogFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 f8f2 	bl	8001584 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_I2C4_Init+0x74>)
 80013a4:	f001 fa19 	bl	80027da <HAL_I2CEx_ConfigDigitalFilter>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 f8e9 	bl	8001584 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	240000a0 	.word	0x240000a0
 80013bc:	58001c00 	.word	0x58001c00
 80013c0:	00707cbb 	.word	0x00707cbb

080013c4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  huart8.Instance = UART8;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_UART8_Init+0x90>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <MX_UART8_Init+0x94>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_UART8_Init+0x90>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_UART8_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_UART8_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_UART8_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_UART8_Init+0x90>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_UART8_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_UART8_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_UART8_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_UART8_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_UART8_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800140c:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_UART8_Init+0x90>)
 800140e:	f003 fdb9 	bl	8004f84 <HAL_UART_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001418:	f000 f8b4 	bl	8001584 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_UART8_Init+0x90>)
 8001420:	f004 fd9c 	bl	8005f5c <HAL_UARTEx_SetTxFifoThreshold>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800142a:	f000 f8ab 	bl	8001584 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <MX_UART8_Init+0x90>)
 8001432:	f004 fdd1 	bl	8005fd8 <HAL_UARTEx_SetRxFifoThreshold>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800143c:	f000 f8a2 	bl	8001584 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_UART8_Init+0x90>)
 8001442:	f004 fd52 	bl	8005eea <HAL_UARTEx_DisableFifoMode>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800144c:	f000 f89a 	bl	8001584 <Error_Handler>
  }
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	240000ec 	.word	0x240000ec
 8001458:	40007c00 	.word	0x40007c00

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001472:	4b40      	ldr	r3, [pc, #256]	; (8001574 <MX_GPIO_Init+0x118>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	4a3e      	ldr	r2, [pc, #248]	; (8001574 <MX_GPIO_Init+0x118>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001482:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <MX_GPIO_Init+0x118>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <MX_GPIO_Init+0x118>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	4a37      	ldr	r2, [pc, #220]	; (8001574 <MX_GPIO_Init+0x118>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a0:	4b34      	ldr	r3, [pc, #208]	; (8001574 <MX_GPIO_Init+0x118>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <MX_GPIO_Init+0x118>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	4a2f      	ldr	r2, [pc, #188]	; (8001574 <MX_GPIO_Init+0x118>)
 80014b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <MX_GPIO_Init+0x118>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MX_GPIO_Init+0x118>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	4a28      	ldr	r2, [pc, #160]	; (8001574 <MX_GPIO_Init+0x118>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <MX_GPIO_Init+0x118>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014f0:	4821      	ldr	r0, [pc, #132]	; (8001578 <MX_GPIO_Init+0x11c>)
 80014f2:	f000 fdcd 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_2;
 80014f6:	237c      	movs	r3, #124	; 0x7c
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <MX_GPIO_Init+0x120>)
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	481d      	ldr	r0, [pc, #116]	; (8001580 <MX_GPIO_Init+0x124>)
 800150a:	f000 fc11 	bl	8001d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800150e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4814      	ldr	r0, [pc, #80]	; (8001578 <MX_GPIO_Init+0x11c>)
 8001528:	f000 fc02 	bl	8001d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	2008      	movs	r0, #8
 8001532:	f000 fbc8 	bl	8001cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001536:	2008      	movs	r0, #8
 8001538:	f000 fbdf 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2009      	movs	r0, #9
 8001542:	f000 fbc0 	bl	8001cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001546:	2009      	movs	r0, #9
 8001548:	f000 fbd7 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	200a      	movs	r0, #10
 8001552:	f000 fbb8 	bl	8001cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001556:	200a      	movs	r0, #10
 8001558:	f000 fbcf 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2017      	movs	r0, #23
 8001562:	f000 fbb0 	bl	8001cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001566:	2017      	movs	r0, #23
 8001568:	f000 fbc7 	bl	8001cfa <HAL_NVIC_EnableIRQ>

}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	; 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	58024400 	.word	0x58024400
 8001578:	58022000 	.word	0x58022000
 800157c:	11210000 	.word	0x11210000
 8001580:	58022800 	.word	0x58022800

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_MspInit+0x30>)
 800159c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_MspInit+0x30>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_MspInit+0x30>)
 80015ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	58024400 	.word	0x58024400

080015c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0ba      	sub	sp, #232	; 0xe8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	22c0      	movs	r2, #192	; 0xc0
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 fdab 	bl	8006144 <memset>
  if(hi2c->Instance==I2C4)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_I2C_MspInit+0xc0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d142      	bne.n	800167e <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015f8:	2310      	movs	r3, #16
 80015fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4618      	mov	r0, r3
 8001608:	f002 f92a 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001612:	f7ff ffb7 	bl	8001584 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_I2C_MspInit+0xc4>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_I2C_MspInit+0xc4>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_I2C_MspInit+0xc4>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001634:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001638:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163c:	2312      	movs	r3, #18
 800163e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800164e:	2304      	movs	r3, #4
 8001650:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001654:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <HAL_I2C_MspInit+0xc8>)
 800165c:	f000 fb68 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_I2C_MspInit+0xc4>)
 8001662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001666:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_I2C_MspInit+0xc4>)
 8001668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_I2C_MspInit+0xc4>)
 8001672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	37e8      	adds	r7, #232	; 0xe8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	58001c00 	.word	0x58001c00
 800168c:	58024400 	.word	0x58024400
 8001690:	58020c00 	.word	0x58020c00

08001694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0ba      	sub	sp, #232	; 0xe8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	22c0      	movs	r2, #192	; 0xc0
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 fd45 	bl	8006144 <memset>
  if(huart->Instance==UART8)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a25      	ldr	r2, [pc, #148]	; (8001754 <HAL_UART_MspInit+0xc0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d142      	bne.n	800174a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80016c4:	2302      	movs	r3, #2
 80016c6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 f8c4 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016de:	f7ff ff51 	bl	8001584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_UART_MspInit+0xc4>)
 80016f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_UART_MspInit+0xc4>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_UART_MspInit+0xc4>)
 8001708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800170c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_UART_MspInit+0xc4>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800171e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001738:	2308      	movs	r3, #8
 800173a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800173e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_UART_MspInit+0xc8>)
 8001746:	f000 faf3 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	37e8      	adds	r7, #232	; 0xe8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40007c00 	.word	0x40007c00
 8001758:	58024400 	.word	0x58024400
 800175c:	58022400 	.word	0x58022400

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ac:	f000 f960 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80017b8:	2004      	movs	r0, #4
 80017ba:	f000 fc82 	bl	80020c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80017c6:	2008      	movs	r0, #8
 80017c8:	f000 fc7b 	bl	80020c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80017d4:	2010      	movs	r0, #16
 80017d6:	f000 fc74 	bl	80020c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}

080017de <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80017e2:	2020      	movs	r0, #32
 80017e4:	f000 fc6d 	bl	80020c2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80017e8:	2040      	movs	r0, #64	; 0x40
 80017ea:	f000 fc6a 	bl	80020c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e00a      	b.n	800181a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001804:	f3af 8000 	nop.w
 8001808:	4601      	mov	r1, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbf0      	blt.n	8001804 <_read+0x12>
	}

return len;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e009      	b.n	8001852 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fc34 	bl	80010b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	dbf1      	blt.n	800183e <_write+0x12>
	}
	return len;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_close>:

int _close(int file)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	return -1;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188c:	605a      	str	r2, [r3, #4]
	return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_isatty>:

int _isatty(int file)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
	return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f004 fbf8 	bl	80060f0 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	24040000 	.word	0x24040000
 800192c:	00000400 	.word	0x00000400
 8001930:	24000094 	.word	0x24000094
 8001934:	240001b0 	.word	0x240001b0

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800193c:	f7fe fe48 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	; (8001978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f004 fbc9 	bl	80060fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7ff fbb9 	bl	80010e0 <main>
  bx  lr
 800196e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001974:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001978:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800197c:	08006e9c 	.word	0x08006e9c
  ldr r2, =_sbss
 8001980:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001984:	240001ac 	.word	0x240001ac

08001988 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC3_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001992:	2003      	movs	r0, #3
 8001994:	f000 f98c 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001998:	f001 fd8c 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_Init+0x68>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	4913      	ldr	r1, [pc, #76]	; (80019f8 <HAL_Init+0x6c>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_Init+0x68>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_Init+0x6c>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_Init+0x70>)
 80019ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019d0:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_Init+0x74>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f814 	bl	8001a04 <HAL_InitTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e002      	b.n	80019ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019e6:	f7ff fdd5 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	58024400 	.word	0x58024400
 80019f8:	08006df0 	.word	0x08006df0
 80019fc:	24000004 	.word	0x24000004
 8001a00:	24000000 	.word	0x24000000

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_InitTick+0x60>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e021      	b.n	8001a5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_InitTick+0x64>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_InitTick+0x60>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f971 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00e      	b.n	8001a5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d80a      	bhi.n	8001a5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f000 f93b 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_InitTick+0x68>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2400000c 	.word	0x2400000c
 8001a68:	24000000 	.word	0x24000000
 8001a6c:	24000008 	.word	0x24000008

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	2400000c 	.word	0x2400000c
 8001a94:	24000198 	.word	0x24000198

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	24000198 	.word	0x24000198

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2400000c 	.word	0x2400000c

08001af8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_GetREVID+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0c1b      	lsrs	r3, r3, #16
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	5c001000 	.word	0x5c001000

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	05fa0000 	.word	0x05fa0000

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff40 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff90 	bl	8001c04 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5f 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff33 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa4 	bl	8001c6c <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_GPIO_Init+0x234>)
 8001d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d42:	e194      	b.n	800206e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8186 	beq.w	8002068 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d00b      	beq.n	8001d7c <HAL_GPIO_Init+0x4c>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d007      	beq.n	8001d7c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d70:	2b11      	cmp	r3, #17
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b12      	cmp	r3, #18
 8001d7a:	d130      	bne.n	8001dde <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 0201 	and.w	r2, r3, #1
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0xee>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	69b9      	ldr	r1, [r7, #24]
 8001e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0203 	and.w	r2, r3, #3
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80e0 	beq.w	8002068 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x238>)
 8001eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eae:	4a2e      	ldr	r2, [pc, #184]	; (8001f68 <HAL_GPIO_Init+0x238>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_GPIO_Init+0x238>)
 8001eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec6:	4a29      	ldr	r2, [pc, #164]	; (8001f6c <HAL_GPIO_Init+0x23c>)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <HAL_GPIO_Init+0x240>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d052      	beq.n	8001f98 <HAL_GPIO_Init+0x268>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_GPIO_Init+0x244>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d031      	beq.n	8001f5e <HAL_GPIO_Init+0x22e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <HAL_GPIO_Init+0x248>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02b      	beq.n	8001f5a <HAL_GPIO_Init+0x22a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_GPIO_Init+0x24c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d025      	beq.n	8001f56 <HAL_GPIO_Init+0x226>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_GPIO_Init+0x250>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01f      	beq.n	8001f52 <HAL_GPIO_Init+0x222>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_GPIO_Init+0x254>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x21e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1a      	ldr	r2, [pc, #104]	; (8001f88 <HAL_GPIO_Init+0x258>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x21a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_GPIO_Init+0x25c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x216>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_GPIO_Init+0x260>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x212>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <HAL_GPIO_Init+0x264>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x20e>
 8001f3a:	2309      	movs	r3, #9
 8001f3c:	e02d      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f3e:	230a      	movs	r3, #10
 8001f40:	e02b      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f42:	2308      	movs	r3, #8
 8001f44:	e029      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e027      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e025      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e023      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e021      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e01f      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e01d      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e01b      	b.n	8001f9a <HAL_GPIO_Init+0x26a>
 8001f62:	bf00      	nop
 8001f64:	58000080 	.word	0x58000080
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	58000400 	.word	0x58000400
 8001f70:	58020000 	.word	0x58020000
 8001f74:	58020400 	.word	0x58020400
 8001f78:	58020800 	.word	0x58020800
 8001f7c:	58020c00 	.word	0x58020c00
 8001f80:	58021000 	.word	0x58021000
 8001f84:	58021400 	.word	0x58021400
 8001f88:	58021800 	.word	0x58021800
 8001f8c:	58021c00 	.word	0x58021c00
 8001f90:	58022000 	.word	0x58022000
 8001f94:	58022400 	.word	0x58022400
 8001f98:	2300      	movs	r3, #0
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001faa:	4938      	ldr	r1, [pc, #224]	; (800208c <HAL_GPIO_Init+0x35c>)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f ae63 	bne.w	8001d44 <HAL_GPIO_Init+0x14>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3724      	adds	r7, #36	; 0x24
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	58000400 	.word	0x58000400

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	619a      	str	r2, [r3, #24]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f87f 	bl	80011ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002100:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_HSEM_FastTake+0x2c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3320      	adds	r3, #32
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_HSEM_FastTake+0x30>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	58026400 	.word	0x58026400
 8002128:	80000300 	.word	0x80000300

0800212c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002136:	4906      	ldr	r1, [pc, #24]	; (8002150 <HAL_HSEM_Release+0x24>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	58026400 	.word	0x58026400

08002154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e07f      	b.n	8002266 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fa24 	bl	80015c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e006      	b.n	80021dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d104      	bne.n	80021ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_I2C_Init+0x11c>)
 80021fa:	430b      	orrs	r3, r1
 80021fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	ea42 0103 	orr.w	r1, r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	021a      	lsls	r2, r3, #8
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69d9      	ldr	r1, [r3, #28]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	02008000 	.word	0x02008000

08002274 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	460b      	mov	r3, r1
 8002282:	817b      	strh	r3, [r7, #10]
 8002284:	4613      	mov	r3, r2
 8002286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	f040 80da 	bne.w	800244a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_I2C_Master_Transmit+0x30>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e0d3      	b.n	800244c <HAL_I2C_Master_Transmit+0x1d8>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ac:	f7ff fbf4 	bl	8001a98 <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2319      	movs	r3, #25
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f8f0 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0be      	b.n	800244c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2221      	movs	r2, #33	; 0x21
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2210      	movs	r2, #16
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2bff      	cmp	r3, #255	; 0xff
 80022fe:	d90e      	bls.n	800231e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	22ff      	movs	r2, #255	; 0xff
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	b2da      	uxtb	r2, r3
 800230c:	8979      	ldrh	r1, [r7, #10]
 800230e:	4b51      	ldr	r3, [pc, #324]	; (8002454 <HAL_I2C_Master_Transmit+0x1e0>)
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f9e6 	bl	80026e8 <I2C_TransferConfig>
 800231c:	e06c      	b.n	80023f8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	b2da      	uxtb	r2, r3
 800232e:	8979      	ldrh	r1, [r7, #10]
 8002330:	4b48      	ldr	r3, [pc, #288]	; (8002454 <HAL_I2C_Master_Transmit+0x1e0>)
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f9d5 	bl	80026e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800233e:	e05b      	b.n	80023f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	6a39      	ldr	r1, [r7, #32]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f8ed 	bl	8002524 <I2C_WaitOnTXISFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e07b      	b.n	800244c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d034      	beq.n	80023f8 <HAL_I2C_Master_Transmit+0x184>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002392:	2b00      	cmp	r3, #0
 8002394:	d130      	bne.n	80023f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	2200      	movs	r2, #0
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f87f 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e04d      	b.n	800244c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2bff      	cmp	r3, #255	; 0xff
 80023b8:	d90e      	bls.n	80023d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	22ff      	movs	r2, #255	; 0xff
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	8979      	ldrh	r1, [r7, #10]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f989 	bl	80026e8 <I2C_TransferConfig>
 80023d6:	e00f      	b.n	80023f8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	2300      	movs	r3, #0
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f978 	bl	80026e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d19e      	bne.n	8002340 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	6a39      	ldr	r1, [r7, #32]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f8cc 	bl	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e01a      	b.n	800244c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2220      	movs	r2, #32
 800241c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_I2C_Master_Transmit+0x1e4>)
 800242a:	400b      	ands	r3, r1
 800242c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800244a:	2302      	movs	r3, #2
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	80002000 	.word	0x80002000
 8002458:	fe00e800 	.word	0xfe00e800

0800245c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b02      	cmp	r3, #2
 8002470:	d103      	bne.n	800247a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d007      	beq.n	8002498 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	619a      	str	r2, [r3, #24]
  }
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b4:	e022      	b.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d01e      	beq.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024be:	f7ff faeb 	bl	8001a98 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d113      	bne.n	80024fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e00f      	b.n	800251c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	429a      	cmp	r2, r3
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	429a      	cmp	r2, r3
 8002518:	d0cd      	beq.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002530:	e02c      	b.n	800258c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f870 	bl	800261c <I2C_IsAcknowledgeFailed>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e02a      	b.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d01e      	beq.n	800258c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7ff faa3 	bl	8001a98 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d113      	bne.n	800258c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e007      	b.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d1cb      	bne.n	8002532 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b0:	e028      	b.n	8002604 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f830 	bl	800261c <I2C_IsAcknowledgeFailed>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e026      	b.n	8002614 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c6:	f7ff fa67 	bl	8001a98 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d113      	bne.n	8002604 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e007      	b.n	8002614 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d1cf      	bne.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b10      	cmp	r3, #16
 8002634:	d151      	bne.n	80026da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002636:	e022      	b.n	800267e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d01e      	beq.n	800267e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002640:	f7ff fa2a 	bl	8001a98 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <I2C_IsAcknowledgeFailed+0x3a>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d113      	bne.n	800267e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e02e      	b.n	80026dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b20      	cmp	r3, #32
 800268a:	d1d5      	bne.n	8002638 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2210      	movs	r2, #16
 8002692:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2220      	movs	r2, #32
 800269a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff fedd 	bl	800245c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <I2C_IsAcknowledgeFailed+0xc8>)
 80026ae:	400b      	ands	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f043 0204 	orr.w	r2, r3, #4
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	817b      	strh	r3, [r7, #10]
 80026f6:	4613      	mov	r3, r2
 80026f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	0d5b      	lsrs	r3, r3, #21
 8002704:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <I2C_TransferConfig+0x58>)
 800270a:	430b      	orrs	r3, r1
 800270c:	43db      	mvns	r3, r3
 800270e:	ea02 0103 	and.w	r1, r2, r3
 8002712:	897b      	ldrh	r3, [r7, #10]
 8002714:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002718:	7a7b      	ldrb	r3, [r7, #9]
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	431a      	orrs	r2, r3
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	03ff63ff 	.word	0x03ff63ff

08002744 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	d138      	bne.n	80027cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002764:	2302      	movs	r3, #2
 8002766:	e032      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002796:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d139      	bne.n	8002864 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e033      	b.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2224      	movs	r2, #36	; 0x24
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800282c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800287c:	4b29      	ldr	r3, [pc, #164]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	2b06      	cmp	r3, #6
 8002886:	d00a      	beq.n	800289e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e040      	b.n	800291c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e03e      	b.n	800291c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028a6:	491f      	ldr	r1, [pc, #124]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028ae:	f7ff f8f3 	bl	8001a98 <HAL_GetTick>
 80028b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028b4:	e009      	b.n	80028ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028b6:	f7ff f8ef 	bl	8001a98 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c4:	d901      	bls.n	80028ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e028      	b.n	800291c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d6:	d1ee      	bne.n	80028b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b1e      	cmp	r3, #30
 80028dc:	d008      	beq.n	80028f0 <HAL_PWREx_ConfigSupply+0x7c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b2e      	cmp	r3, #46	; 0x2e
 80028e2:	d005      	beq.n	80028f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b1d      	cmp	r3, #29
 80028e8:	d002      	beq.n	80028f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b2d      	cmp	r3, #45	; 0x2d
 80028ee:	d114      	bne.n	800291a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80028f0:	f7ff f8d2 	bl	8001a98 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028f6:	e009      	b.n	800290c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028f8:	f7ff f8ce 	bl	8001a98 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002906:	d901      	bls.n	800290c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e007      	b.n	800291c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_PWREx_ConfigSupply+0xb0>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d1ee      	bne.n	80028f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	58024800 	.word	0x58024800

08002928 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e3ff      	b.n	800313a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8087 	beq.w	8002a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002948:	4b99      	ldr	r3, [pc, #612]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002952:	4b97      	ldr	r3, [pc, #604]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	2b10      	cmp	r3, #16
 800295c:	d007      	beq.n	800296e <HAL_RCC_OscConfig+0x46>
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	2b18      	cmp	r3, #24
 8002962:	d110      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d10b      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296e:	4b90      	ldr	r3, [pc, #576]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d06c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x12c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d168      	bne.n	8002a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e3d9      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x76>
 8002990:	4b87      	ldr	r3, [pc, #540]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a86      	ldr	r2, [pc, #536]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e02e      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x98>
 80029a6:	4b82      	ldr	r3, [pc, #520]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a81      	ldr	r2, [pc, #516]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7e      	ldr	r2, [pc, #504]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01d      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0xbc>
 80029ca:	4b79      	ldr	r3, [pc, #484]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a78      	ldr	r2, [pc, #480]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a75      	ldr	r2, [pc, #468]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029e4:	4b72      	ldr	r3, [pc, #456]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a71      	ldr	r2, [pc, #452]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a6e      	ldr	r2, [pc, #440]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7ff f848 	bl	8001a98 <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7ff f844 	bl	8001a98 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e38d      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1e:	4b64      	ldr	r3, [pc, #400]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0xe4>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7ff f834 	bl	8001a98 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7ff f830 	bl	8001a98 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e379      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a46:	4b5a      	ldr	r3, [pc, #360]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x10c>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80ae 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a64:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a6e:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <HAL_RCC_OscConfig+0x162>
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	2b18      	cmp	r3, #24
 8002a7e:	d13a      	bne.n	8002af6 <HAL_RCC_OscConfig+0x1ce>
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d135      	bne.n	8002af6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8a:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x17a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e34b      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	f7ff f829 	bl	8001af8 <HAL_GetREVID>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d817      	bhi.n	8002ae0 <HAL_RCC_OscConfig+0x1b8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d108      	bne.n	8002aca <HAL_RCC_OscConfig+0x1a2>
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ac0:	4a3b      	ldr	r2, [pc, #236]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac8:	e07a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	031b      	lsls	r3, r3, #12
 8002ad8:	4935      	ldr	r1, [pc, #212]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ade:	e06f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	4930      	ldr	r1, [pc, #192]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af4:	e064      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d045      	beq.n	8002b8a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002afe:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 0219 	bic.w	r2, r3, #25
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe ffc2 	bl	8001a98 <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe ffbe 	bl	8001a98 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e307      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2a:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	f7fe ffdf 	bl	8001af8 <HAL_GetREVID>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d817      	bhi.n	8002b74 <HAL_RCC_OscConfig+0x24c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d108      	bne.n	8002b5e <HAL_RCC_OscConfig+0x236>
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b54:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5a:	6053      	str	r3, [r2, #4]
 8002b5c:	e030      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	031b      	lsls	r3, r3, #12
 8002b6c:	4910      	ldr	r1, [pc, #64]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
 8002b72:	e025      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	061b      	lsls	r3, r3, #24
 8002b82:	490b      	ldr	r1, [pc, #44]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
 8002b88:	e01a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_RCC_OscConfig+0x288>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe ff7f 	bl	8001a98 <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9e:	f7fe ff7b 	bl	8001a98 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d903      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e2c4      	b.n	800313a <HAL_RCC_OscConfig+0x812>
 8002bb0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bb4:	4ba4      	ldr	r3, [pc, #656]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ee      	bne.n	8002b9e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a9 	beq.w	8002d20 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bce:	4b9e      	ldr	r3, [pc, #632]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bd8:	4b9b      	ldr	r3, [pc, #620]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d007      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x2cc>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b18      	cmp	r3, #24
 8002be8:	d13a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x338>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d135      	bne.n	8002c60 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf4:	4b94      	ldr	r3, [pc, #592]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x2e4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e296      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c0c:	f7fe ff74 	bl	8001af8 <HAL_GetREVID>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d817      	bhi.n	8002c4a <HAL_RCC_OscConfig+0x322>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d108      	bne.n	8002c34 <HAL_RCC_OscConfig+0x30c>
 8002c22:	4b89      	ldr	r3, [pc, #548]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c2a:	4a87      	ldr	r2, [pc, #540]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c32:	e075      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c34:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	069b      	lsls	r3, r3, #26
 8002c42:	4981      	ldr	r1, [pc, #516]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c48:	e06a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	497b      	ldr	r1, [pc, #492]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c5e:	e05f      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d042      	beq.n	8002cee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c68:	4b77      	ldr	r3, [pc, #476]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a76      	ldr	r2, [pc, #472]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe ff10 	bl	8001a98 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c7c:	f7fe ff0c 	bl	8001a98 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e255      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c8e:	4b6e      	ldr	r3, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c9a:	f7fe ff2d 	bl	8001af8 <HAL_GetREVID>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d817      	bhi.n	8002cd8 <HAL_RCC_OscConfig+0x3b0>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d108      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x39a>
 8002cb0:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cb8:	4a63      	ldr	r2, [pc, #396]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cbe:	6053      	str	r3, [r2, #4]
 8002cc0:	e02e      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
 8002cc2:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	495d      	ldr	r1, [pc, #372]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
 8002cd6:	e023      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
 8002cd8:	4b5b      	ldr	r3, [pc, #364]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	4958      	ldr	r1, [pc, #352]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60cb      	str	r3, [r1, #12]
 8002cec:	e018      	b.n	8002d20 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a55      	ldr	r2, [pc, #340]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fecd 	bl	8001a98 <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d02:	f7fe fec9 	bl	8001a98 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e212      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d14:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d036      	beq.n	8002d9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d019      	beq.n	8002d68 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d34:	4b44      	ldr	r3, [pc, #272]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d38:	4a43      	ldr	r2, [pc, #268]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe feaa 	bl	8001a98 <HAL_GetTick>
 8002d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe fea6 	bl	8001a98 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1ef      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x420>
 8002d66:	e018      	b.n	8002d9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d68:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	4a36      	ldr	r2, [pc, #216]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe fe90 	bl	8001a98 <HAL_GetTick>
 8002d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fe8c 	bl	8001a98 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1d5      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d036      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002db8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fe6d 	bl	8001a98 <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dc2:	f7fe fe69 	bl	8001a98 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1b2      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x49a>
 8002de0:	e018      	b.n	8002e14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002de2:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dee:	f7fe fe53 	bl	8001a98 <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002df6:	f7fe fe4f 	bl	8001a98 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e198      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <HAL_RCC_OscConfig+0x520>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8085 	beq.w	8002f2c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_RCC_OscConfig+0x524>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_OscConfig+0x524>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e2e:	f7fe fe33 	bl	8001a98 <HAL_GetTick>
 8002e32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e34:	e00c      	b.n	8002e50 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fe fe2f 	bl	8001a98 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	; 0x64
 8002e42:	d905      	bls.n	8002e50 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e178      	b.n	800313a <HAL_RCC_OscConfig+0x812>
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e50:	4b96      	ldr	r3, [pc, #600]	; (80030ac <HAL_RCC_OscConfig+0x784>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ec      	beq.n	8002e36 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x54a>
 8002e64:	4b92      	ldr	r3, [pc, #584]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a91      	ldr	r2, [pc, #580]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e02d      	b.n	8002ece <HAL_RCC_OscConfig+0x5a6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x56c>
 8002e7a:	4b8d      	ldr	r3, [pc, #564]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a8c      	ldr	r2, [pc, #560]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	4b8a      	ldr	r3, [pc, #552]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a89      	ldr	r2, [pc, #548]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	e01c      	b.n	8002ece <HAL_RCC_OscConfig+0x5a6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x58e>
 8002e9c:	4b84      	ldr	r3, [pc, #528]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a83      	ldr	r2, [pc, #524]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	4b81      	ldr	r3, [pc, #516]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a80      	ldr	r2, [pc, #512]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	e00b      	b.n	8002ece <HAL_RCC_OscConfig+0x5a6>
 8002eb6:	4b7e      	ldr	r3, [pc, #504]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a7d      	ldr	r2, [pc, #500]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b7b      	ldr	r3, [pc, #492]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a7a      	ldr	r2, [pc, #488]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d015      	beq.n	8002f02 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe fddf 	bl	8001a98 <HAL_GetTick>
 8002eda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe fddb 	bl	8001a98 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e122      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef4:	4b6e      	ldr	r3, [pc, #440]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ee      	beq.n	8002ede <HAL_RCC_OscConfig+0x5b6>
 8002f00:	e014      	b.n	8002f2c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe fdc9 	bl	8001a98 <HAL_GetTick>
 8002f06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe fdc5 	bl	8001a98 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e10c      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f20:	4b63      	ldr	r3, [pc, #396]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8101 	beq.w	8003138 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f36:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f3e:	2b18      	cmp	r3, #24
 8002f40:	f000 80bc 	beq.w	80030bc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	f040 8095 	bne.w	8003078 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a57      	ldr	r2, [pc, #348]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fd9d 	bl	8001a98 <HAL_GetTick>
 8002f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fe fd99 	bl	8001a98 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0e2      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f74:	4b4e      	ldr	r3, [pc, #312]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f80:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f84:	4b4b      	ldr	r3, [pc, #300]	; (80030b4 <HAL_RCC_OscConfig+0x78c>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f90:	0112      	lsls	r2, r2, #4
 8002f92:	430a      	orrs	r2, r1
 8002f94:	4946      	ldr	r1, [pc, #280]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	628b      	str	r3, [r1, #40]	; 0x28
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	025b      	lsls	r3, r3, #9
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fca:	4939      	ldr	r1, [pc, #228]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4a36      	ldr	r2, [pc, #216]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe0:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <HAL_RCC_OscConfig+0x790>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fe8:	00d2      	lsls	r2, r2, #3
 8002fea:	4931      	ldr	r1, [pc, #196]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ff0:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	f023 020c 	bic.w	r2, r3, #12
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	492c      	ldr	r1, [pc, #176]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	f023 0202 	bic.w	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	4928      	ldr	r1, [pc, #160]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003010:	4313      	orrs	r3, r2
 8003012:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003014:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800301a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003020:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fd22 	bl	8001a98 <HAL_GetTick>
 8003054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fd1e 	bl	8001a98 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e067      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x730>
 8003076:	e05f      	b.n	8003138 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0c      	ldr	r2, [pc, #48]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fd08 	bl	8001a98 <HAL_GetTick>
 8003088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fd04 	bl	8001a98 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e04d      	b.n	800313a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <HAL_RCC_OscConfig+0x788>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x764>
 80030aa:	e045      	b.n	8003138 <HAL_RCC_OscConfig+0x810>
 80030ac:	58024800 	.word	0x58024800
 80030b0:	58024400 	.word	0x58024400
 80030b4:	fffffc0c 	.word	0xfffffc0c
 80030b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <HAL_RCC_OscConfig+0x81c>)
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_RCC_OscConfig+0x81c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d031      	beq.n	8003134 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0203 	and.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d12a      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d122      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d11a      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0a5b      	lsrs	r3, r3, #9
 8003102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d111      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	0c1b      	lsrs	r3, r3, #16
 8003114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d108      	bne.n	8003134 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0e1b      	lsrs	r3, r3, #24
 8003126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3730      	adds	r7, #48	; 0x30
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	58024400 	.word	0x58024400

08003148 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e19c      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800315c:	4b8a      	ldr	r3, [pc, #552]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d910      	bls.n	800318c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b87      	ldr	r3, [pc, #540]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 020f 	bic.w	r2, r3, #15
 8003172:	4985      	ldr	r1, [pc, #532]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b83      	ldr	r3, [pc, #524]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e184      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d010      	beq.n	80031ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	4b7b      	ldr	r3, [pc, #492]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d908      	bls.n	80031ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031a8:	4b78      	ldr	r3, [pc, #480]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	4975      	ldr	r1, [pc, #468]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	4b70      	ldr	r3, [pc, #448]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d908      	bls.n	80031e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031d6:	4b6d      	ldr	r3, [pc, #436]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	496a      	ldr	r1, [pc, #424]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699a      	ldr	r2, [r3, #24]
 80031f8:	4b64      	ldr	r3, [pc, #400]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003200:	429a      	cmp	r2, r3
 8003202:	d908      	bls.n	8003216 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003204:	4b61      	ldr	r3, [pc, #388]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	495e      	ldr	r1, [pc, #376]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003212:	4313      	orrs	r3, r2
 8003214:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800322e:	429a      	cmp	r2, r3
 8003230:	d908      	bls.n	8003244 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003232:	4b56      	ldr	r3, [pc, #344]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4953      	ldr	r1, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003240:	4313      	orrs	r3, r2
 8003242:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	4b4d      	ldr	r3, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	429a      	cmp	r2, r3
 800325e:	d908      	bls.n	8003272 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b4a      	ldr	r3, [pc, #296]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f023 020f 	bic.w	r2, r3, #15
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4947      	ldr	r1, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800326e:	4313      	orrs	r3, r2
 8003270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d055      	beq.n	800332a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800327e:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	4940      	ldr	r1, [pc, #256]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800328c:	4313      	orrs	r3, r2
 800328e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d107      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003298:	4b3c      	ldr	r3, [pc, #240]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d121      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0f6      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d115      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0ea      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032c8:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0de      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032d8:	4b2c      	ldr	r3, [pc, #176]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0d6      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f023 0207 	bic.w	r2, r3, #7
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4925      	ldr	r1, [pc, #148]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fe fbcd 	bl	8001a98 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003300:	e00a      	b.n	8003318 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003302:	f7fe fbc9 	bl	8001a98 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0be      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003318:	4b1c      	ldr	r3, [pc, #112]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	429a      	cmp	r2, r3
 8003328:	d1eb      	bne.n	8003302 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	429a      	cmp	r2, r3
 8003344:	d208      	bcs.n	8003358 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f023 020f 	bic.w	r2, r3, #15
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x244>)
 8003354:	4313      	orrs	r3, r2
 8003356:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d214      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 020f 	bic.w	r2, r3, #15
 800336e:	4906      	ldr	r1, [pc, #24]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e086      	b.n	8003496 <HAL_RCC_ClockConfig+0x34e>
 8003388:	52002000 	.word	0x52002000
 800338c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d208      	bcs.n	80033be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4939      	ldr	r1, [pc, #228]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d010      	beq.n	80033ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d208      	bcs.n	80033ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	492e      	ldr	r1, [pc, #184]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003404:	429a      	cmp	r2, r3
 8003406:	d208      	bcs.n	800341a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4922      	ldr	r1, [pc, #136]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003416:	4313      	orrs	r3, r2
 8003418:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003432:	429a      	cmp	r2, r3
 8003434:	d208      	bcs.n	8003448 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4917      	ldr	r1, [pc, #92]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003444:	4313      	orrs	r3, r2
 8003446:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003448:	f000 f834 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	4912      	ldr	r1, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x35c>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
 8003464:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <HAL_RCC_ClockConfig+0x358>)
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <HAL_RCC_ClockConfig+0x35c>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x360>)
 800347e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003480:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x364>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_RCC_ClockConfig+0x368>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe faba 	bl	8001a04 <HAL_InitTick>
 8003490:	4603      	mov	r3, r0
 8003492:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	58024400 	.word	0x58024400
 80034a4:	08006df0 	.word	0x08006df0
 80034a8:	24000004 	.word	0x24000004
 80034ac:	24000000 	.word	0x24000000
 80034b0:	24000008 	.word	0x24000008

080034b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ba:	4bb3      	ldr	r3, [pc, #716]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c2:	2b18      	cmp	r3, #24
 80034c4:	f200 8155 	bhi.w	8003772 <HAL_RCC_GetSysClockFreq+0x2be>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	08003535 	.word	0x08003535
 80034d4:	08003773 	.word	0x08003773
 80034d8:	08003773 	.word	0x08003773
 80034dc:	08003773 	.word	0x08003773
 80034e0:	08003773 	.word	0x08003773
 80034e4:	08003773 	.word	0x08003773
 80034e8:	08003773 	.word	0x08003773
 80034ec:	08003773 	.word	0x08003773
 80034f0:	0800355b 	.word	0x0800355b
 80034f4:	08003773 	.word	0x08003773
 80034f8:	08003773 	.word	0x08003773
 80034fc:	08003773 	.word	0x08003773
 8003500:	08003773 	.word	0x08003773
 8003504:	08003773 	.word	0x08003773
 8003508:	08003773 	.word	0x08003773
 800350c:	08003773 	.word	0x08003773
 8003510:	08003561 	.word	0x08003561
 8003514:	08003773 	.word	0x08003773
 8003518:	08003773 	.word	0x08003773
 800351c:	08003773 	.word	0x08003773
 8003520:	08003773 	.word	0x08003773
 8003524:	08003773 	.word	0x08003773
 8003528:	08003773 	.word	0x08003773
 800352c:	08003773 	.word	0x08003773
 8003530:	08003567 	.word	0x08003567
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003534:	4b94      	ldr	r3, [pc, #592]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003540:	4b91      	ldr	r3, [pc, #580]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	08db      	lsrs	r3, r3, #3
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	4a90      	ldr	r2, [pc, #576]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
 8003550:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003552:	e111      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003554:	4b8d      	ldr	r3, [pc, #564]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003556:	61bb      	str	r3, [r7, #24]
    break;
 8003558:	e10e      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800355a:	4b8d      	ldr	r3, [pc, #564]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800355c:	61bb      	str	r3, [r7, #24]
    break;
 800355e:	e10b      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003560:	4b8c      	ldr	r3, [pc, #560]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003562:	61bb      	str	r3, [r7, #24]
    break;
 8003564:	e108      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003566:	4b88      	ldr	r3, [pc, #544]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003570:	4b85      	ldr	r3, [pc, #532]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800357a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800357c:	4b82      	ldr	r3, [pc, #520]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003586:	4b80      	ldr	r3, [pc, #512]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80e1 	beq.w	800376c <HAL_RCC_GetSysClockFreq+0x2b8>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	f000 8083 	beq.w	80036b8 <HAL_RCC_GetSysClockFreq+0x204>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	f200 80a1 	bhi.w	80036fc <HAL_RCC_GetSysClockFreq+0x248>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x114>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d056      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035c6:	e099      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035c8:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d02d      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035d4:	4b6c      	ldr	r3, [pc, #432]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	08db      	lsrs	r3, r3, #3
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	4a6b      	ldr	r2, [pc, #428]	; (800378c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035fe:	4b62      	ldr	r3, [pc, #392]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003612:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800361e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800362e:	e087      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800379c <HAL_RCC_GetSysClockFreq+0x2e8>
 800363e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003642:	4b51      	ldr	r3, [pc, #324]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003652:	ed97 6a02 	vldr	s12, [r7, #8]
 8003656:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800365a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800365e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003672:	e065      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003686:	4b40      	ldr	r3, [pc, #256]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003696:	ed97 6a02 	vldr	s12, [r7, #8]
 800369a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800369e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036b6:	e043      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036da:	ed97 6a02 	vldr	s12, [r7, #8]
 80036de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036fa:	e021      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003722:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003798 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800373e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	0a5b      	lsrs	r3, r3, #9
 8003746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800374a:	3301      	adds	r3, #1
 800374c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003758:	edd7 6a07 	vldr	s13, [r7, #28]
 800375c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003764:	ee17 3a90 	vmov	r3, s15
 8003768:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800376a:	e005      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	61bb      	str	r3, [r7, #24]
    break;
 8003770:	e002      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003774:	61bb      	str	r3, [r7, #24]
    break;
 8003776:	bf00      	nop
  }

  return sysclockfreq;
 8003778:	69bb      	ldr	r3, [r7, #24]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3724      	adds	r7, #36	; 0x24
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	58024400 	.word	0x58024400
 800378c:	03d09000 	.word	0x03d09000
 8003790:	003d0900 	.word	0x003d0900
 8003794:	017d7840 	.word	0x017d7840
 8003798:	46000000 	.word	0x46000000
 800379c:	4c742400 	.word	0x4c742400
 80037a0:	4a742400 	.word	0x4a742400
 80037a4:	4bbebc20 	.word	0x4bbebc20

080037a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037ae:	f7ff fe81 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490f      	ldr	r1, [pc, #60]	; (80037fc <HAL_RCC_GetHCLKFreq+0x54>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_GetHCLKFreq+0x54>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	4a07      	ldr	r2, [pc, #28]	; (8003800 <HAL_RCC_GetHCLKFreq+0x58>)
 80037e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_RCC_GetHCLKFreq+0x58>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	58024400 	.word	0x58024400
 80037fc:	08006df0 	.word	0x08006df0
 8003800:	24000004 	.word	0x24000004
 8003804:	24000000 	.word	0x24000000

08003808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800380c:	f7ff ffcc 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4904      	ldr	r1, [pc, #16]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	58024400 	.word	0x58024400
 8003830:	08006df0 	.word	0x08006df0

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003838:	f7ff ffb6 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4904      	ldr	r1, [pc, #16]	; (800385c <HAL_RCC_GetPCLK2Freq+0x28>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	58024400 	.word	0x58024400
 800385c:	08006df0 	.word	0x08006df0

08003860 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003868:	2300      	movs	r3, #0
 800386a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800386c:	2300      	movs	r3, #0
 800386e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d03f      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003884:	d02a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003886:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800388a:	d824      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800388c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003890:	d018      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003896:	d81e      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800389c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a0:	d007      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038a2:	e018      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a4:	4bab      	ldr	r3, [pc, #684]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4aaa      	ldr	r2, [pc, #680]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038b0:	e015      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2102      	movs	r1, #2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 f9ff 	bl	8004cbc <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038c2:	e00c      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3324      	adds	r3, #36	; 0x24
 80038c8:	2102      	movs	r1, #2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 faa8 	bl	8004e20 <RCCEx_PLL3_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038d4:	e003      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
      break;
 80038da:	e000      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038e4:	4b9b      	ldr	r3, [pc, #620]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f0:	4998      	ldr	r1, [pc, #608]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	650b      	str	r3, [r1, #80]	; 0x50
 80038f6:	e001      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d03d      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	2b04      	cmp	r3, #4
 800390e:	d826      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800392d 	.word	0x0800392d
 800391c:	0800393b 	.word	0x0800393b
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003965 	.word	0x08003965
 8003928:	08003965 	.word	0x08003965
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392c:	4b89      	ldr	r3, [pc, #548]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	4a88      	ldr	r2, [pc, #544]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003938:	e015      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f001 f9bb 	bl	8004cbc <RCCEx_PLL2_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800394a:	e00c      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3324      	adds	r3, #36	; 0x24
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f001 fa64 	bl	8004e20 <RCCEx_PLL3_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800395c:	e003      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	75fb      	strb	r3, [r7, #23]
      break;
 8003962:	e000      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800396c:	4b79      	ldr	r3, [pc, #484]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003970:	f023 0207 	bic.w	r2, r3, #7
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	4976      	ldr	r1, [pc, #472]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	650b      	str	r3, [r1, #80]	; 0x50
 800397e:	e001      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800398c:	2b00      	cmp	r3, #0
 800398e:	d042      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003998:	d02b      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800399a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399e:	d825      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039a0:	2bc0      	cmp	r3, #192	; 0xc0
 80039a2:	d028      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039a4:	2bc0      	cmp	r3, #192	; 0xc0
 80039a6:	d821      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d016      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80039ac:	2b80      	cmp	r3, #128	; 0x80
 80039ae:	d81d      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d007      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80039b8:	e018      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ba:	4b66      	ldr	r3, [pc, #408]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039c6:	e017      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f974 	bl	8004cbc <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039d8:	e00e      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3324      	adds	r3, #36	; 0x24
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fa1d 	bl	8004e20 <RCCEx_PLL3_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039ea:	e005      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	75fb      	strb	r3, [r7, #23]
      break;
 80039f0:	e002      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039f2:	bf00      	nop
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80039f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039fe:	4b55      	ldr	r3, [pc, #340]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0a:	4952      	ldr	r1, [pc, #328]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	650b      	str	r3, [r1, #80]	; 0x50
 8003a10:	e001      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d049      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a2c:	d030      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a32:	d82a      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a38:	d02c      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a3e:	d824      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a44:	d018      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4a:	d81e      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a54:	d007      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a56:	e018      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	4a3d      	ldr	r2, [pc, #244]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a64:	e017      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f001 f925 	bl	8004cbc <RCCEx_PLL2_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a76:	e00e      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3324      	adds	r3, #36	; 0x24
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f9ce 	bl	8004e20 <RCCEx_PLL3_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a88:	e005      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8e:	e002      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aaa:	492a      	ldr	r1, [pc, #168]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	658b      	str	r3, [r1, #88]	; 0x58
 8003ab0:	e001      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d04c      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003acc:	d030      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad2:	d82a      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ad4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ad8:	d02c      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003ada:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ade:	d824      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ae4:	d018      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aea:	d81e      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af4:	d007      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003af6:	e018      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b04:	e017      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 f8d5 	bl	8004cbc <RCCEx_PLL2_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b16:	e00e      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3324      	adds	r3, #36	; 0x24
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 f97e 	bl	8004e20 <RCCEx_PLL3_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b28:	e005      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b4a:	4902      	ldr	r1, [pc, #8]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	658b      	str	r3, [r1, #88]	; 0x58
 8003b50:	e004      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003b52:	bf00      	nop
 8003b54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d032      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6c:	2b30      	cmp	r3, #48	; 0x30
 8003b6e:	d01c      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b70:	2b30      	cmp	r3, #48	; 0x30
 8003b72:	d817      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d00c      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d813      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d016      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d10f      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b84:	4bb1      	ldr	r3, [pc, #708]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	4ab0      	ldr	r2, [pc, #704]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b90:	e00e      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2102      	movs	r1, #2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 f88f 	bl	8004cbc <RCCEx_PLL2_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ba2:	e005      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bb6:	4ba5      	ldr	r3, [pc, #660]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc2:	49a2      	ldr	r1, [pc, #648]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bc8:	e001      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d047      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be2:	d030      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be8:	d82a      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003bea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bee:	d02c      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003bf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bf4:	d824      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bfa:	d018      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c00:	d81e      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0a:	d007      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003c0c:	e018      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0e:	4b8f      	ldr	r3, [pc, #572]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	4a8e      	ldr	r2, [pc, #568]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c1a:	e017      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 f84a 	bl	8004cbc <RCCEx_PLL2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c2c:	e00e      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3324      	adds	r3, #36	; 0x24
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 f8f3 	bl	8004e20 <RCCEx_PLL3_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c3e:	e005      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
      break;
 8003c44:	e002      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c52:	4b7e      	ldr	r3, [pc, #504]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c56:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5e:	497b      	ldr	r1, [pc, #492]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	650b      	str	r3, [r1, #80]	; 0x50
 8003c64:	e001      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d049      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c7e:	d02e      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c84:	d828      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c8a:	d02a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003c8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c90:	d822      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c96:	d026      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003c98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c9c:	d81c      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca2:	d010      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca8:	d816      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01d      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb2:	d111      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fffe 	bl	8004cbc <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e012      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f8a7 	bl	8004e20 <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cd6:	e009      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	e006      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e004      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e002      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cf2:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfe:	4953      	ldr	r1, [pc, #332]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	650b      	str	r3, [r1, #80]	; 0x50
 8003d04:	e001      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d04b      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d20:	d02e      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d26:	d828      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2c:	d02a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d32:	d822      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d38:	d026      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003d3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d3e:	d81c      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d44:	d010      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d4a:	d816      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01d      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d54:	d111      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ffad 	bl	8004cbc <RCCEx_PLL2_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d66:	e012      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f856 	bl	8004e20 <RCCEx_PLL3_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d78:	e009      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7e:	e006      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d80:	bf00      	nop
 8003d82:	e004      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d84:	bf00      	nop
 8003d86:	e002      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d88:	bf00      	nop
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d94:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da2:	492a      	ldr	r1, [pc, #168]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	658b      	str	r3, [r1, #88]	; 0x58
 8003da8:	e001      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d022      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00e      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc6:	d108      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 ff74 	bl	8004cbc <RCCEx_PLL2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8003dd8:	e003      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8003de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df4:	4915      	ldr	r1, [pc, #84]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dfa:	e001      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d031      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e14:	d00e      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e1a:	d814      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d017      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8003e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e24:	d10f      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e32:	e00e      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 ff3e 	bl	8004cbc <RCCEx_PLL2_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e44:	e005      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4a:	e002      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003e4c:	58024400 	.word	0x58024400
      break;
 8003e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e58:	4bbc      	ldr	r3, [pc, #752]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	49b9      	ldr	r1, [pc, #740]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	650b      	str	r3, [r1, #80]	; 0x50
 8003e6a:	e001      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d032      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d81b      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003e9d 	.word	0x08003e9d
 8003e94:	08003eab 	.word	0x08003eab
 8003e98:	08003ec3 	.word	0x08003ec3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9c:	4bab      	ldr	r3, [pc, #684]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	4aaa      	ldr	r2, [pc, #680]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ea8:	e00c      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 ff03 	bl	8004cbc <RCCEx_PLL2_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003eba:	e003      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec0:	e000      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8003ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003eca:	4ba0      	ldr	r3, [pc, #640]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	499d      	ldr	r1, [pc, #628]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003edc:	e001      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8086 	beq.w	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef0:	4b97      	ldr	r3, [pc, #604]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a96      	ldr	r2, [pc, #600]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003efc:	f7fd fdcc 	bl	8001a98 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f02:	e009      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f04:	f7fd fdc8 	bl	8001a98 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d902      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	75fb      	strb	r3, [r7, #23]
        break;
 8003f16:	e005      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f18:	4b8d      	ldr	r3, [pc, #564]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0ef      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d166      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f2a:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f34:	4053      	eors	r3, r2
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d013      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f3e:	4b83      	ldr	r3, [pc, #524]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f48:	4b80      	ldr	r3, [pc, #512]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	4a7f      	ldr	r2, [pc, #508]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f54:	4b7d      	ldr	r3, [pc, #500]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	4a7c      	ldr	r2, [pc, #496]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f60:	4a7a      	ldr	r2, [pc, #488]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f70:	d115      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7fd fd91 	bl	8001a98 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f78:	e00b      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fd fd8d 	bl	8001a98 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d902      	bls.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8003f90:	e005      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f92:	4b6e      	ldr	r3, [pc, #440]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ed      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d126      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb2:	d10d      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8003fb4:	4b65      	ldr	r3, [pc, #404]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fc2:	0919      	lsrs	r1, r3, #4
 8003fc4:	4b63      	ldr	r3, [pc, #396]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8003fc6:	400b      	ands	r3, r1
 8003fc8:	4960      	ldr	r1, [pc, #384]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	610b      	str	r3, [r1, #16]
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8003fd0:	4b5e      	ldr	r3, [pc, #376]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	4a5d      	ldr	r2, [pc, #372]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fda:	6113      	str	r3, [r2, #16]
 8003fdc:	4b5b      	ldr	r3, [pc, #364]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fea:	4958      	ldr	r1, [pc, #352]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	670b      	str	r3, [r1, #112]	; 0x70
 8003ff0:	e004      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	75bb      	strb	r3, [r7, #22]
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d07e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400c:	2b28      	cmp	r3, #40	; 0x28
 800400e:	d867      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	080040e7 	.word	0x080040e7
 800401c:	080040e1 	.word	0x080040e1
 8004020:	080040e1 	.word	0x080040e1
 8004024:	080040e1 	.word	0x080040e1
 8004028:	080040e1 	.word	0x080040e1
 800402c:	080040e1 	.word	0x080040e1
 8004030:	080040e1 	.word	0x080040e1
 8004034:	080040e1 	.word	0x080040e1
 8004038:	080040bd 	.word	0x080040bd
 800403c:	080040e1 	.word	0x080040e1
 8004040:	080040e1 	.word	0x080040e1
 8004044:	080040e1 	.word	0x080040e1
 8004048:	080040e1 	.word	0x080040e1
 800404c:	080040e1 	.word	0x080040e1
 8004050:	080040e1 	.word	0x080040e1
 8004054:	080040e1 	.word	0x080040e1
 8004058:	080040cf 	.word	0x080040cf
 800405c:	080040e1 	.word	0x080040e1
 8004060:	080040e1 	.word	0x080040e1
 8004064:	080040e1 	.word	0x080040e1
 8004068:	080040e1 	.word	0x080040e1
 800406c:	080040e1 	.word	0x080040e1
 8004070:	080040e1 	.word	0x080040e1
 8004074:	080040e1 	.word	0x080040e1
 8004078:	080040e7 	.word	0x080040e7
 800407c:	080040e1 	.word	0x080040e1
 8004080:	080040e1 	.word	0x080040e1
 8004084:	080040e1 	.word	0x080040e1
 8004088:	080040e1 	.word	0x080040e1
 800408c:	080040e1 	.word	0x080040e1
 8004090:	080040e1 	.word	0x080040e1
 8004094:	080040e1 	.word	0x080040e1
 8004098:	080040e7 	.word	0x080040e7
 800409c:	080040e1 	.word	0x080040e1
 80040a0:	080040e1 	.word	0x080040e1
 80040a4:	080040e1 	.word	0x080040e1
 80040a8:	080040e1 	.word	0x080040e1
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	080040e1 	.word	0x080040e1
 80040b4:	080040e1 	.word	0x080040e1
 80040b8:	080040e7 	.word	0x080040e7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	2101      	movs	r1, #1
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fdfa 	bl	8004cbc <RCCEx_PLL2_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040cc:	e00c      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3324      	adds	r3, #36	; 0x24
 80040d2:	2101      	movs	r1, #1
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fea3 	bl	8004e20 <RCCEx_PLL3_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040de:	e003      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	75fb      	strb	r3, [r7, #23]
      break;
 80040e4:	e000      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 80040e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040ee:	4b17      	ldr	r3, [pc, #92]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fa:	4914      	ldr	r1, [pc, #80]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004100:	e001      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d03e      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004116:	2b05      	cmp	r3, #5
 8004118:	d827      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004171 	.word	0x08004171
 8004124:	08004139 	.word	0x08004139
 8004128:	08004159 	.word	0x08004159
 800412c:	08004171 	.word	0x08004171
 8004130:	08004171 	.word	0x08004171
 8004134:	08004171 	.word	0x08004171
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3304      	adds	r3, #4
 800413c:	2101      	movs	r1, #1
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fdbc 	bl	8004cbc <RCCEx_PLL2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004148:	e013      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800414a:	bf00      	nop
 800414c:	58024400 	.word	0x58024400
 8004150:	58024800 	.word	0x58024800
 8004154:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3324      	adds	r3, #36	; 0x24
 800415c:	2101      	movs	r1, #1
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fe5e 	bl	8004e20 <RCCEx_PLL3_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
      break;
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8004170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004178:	4b9f      	ldr	r3, [pc, #636]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f023 0207 	bic.w	r2, r3, #7
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004184:	499c      	ldr	r1, [pc, #624]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004186:	4313      	orrs	r3, r2
 8004188:	654b      	str	r3, [r1, #84]	; 0x54
 800418a:	e001      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d039      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d820      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80041a6:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080041ef 	.word	0x080041ef
 80041b0:	080041c5 	.word	0x080041c5
 80041b4:	080041d7 	.word	0x080041d7
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	080041ef 	.word	0x080041ef
 80041c0:	080041ef 	.word	0x080041ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	2101      	movs	r1, #1
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fd76 	bl	8004cbc <RCCEx_PLL2_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041d4:	e00c      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3324      	adds	r3, #36	; 0x24
 80041da:	2101      	movs	r1, #1
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fe1f 	bl	8004e20 <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
      break;
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 80041ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f6:	4b80      	ldr	r3, [pc, #512]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	f023 0207 	bic.w	r2, r3, #7
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004204:	497c      	ldr	r1, [pc, #496]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004206:	4313      	orrs	r3, r2
 8004208:	658b      	str	r3, [r1, #88]	; 0x58
 800420a:	e001      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d04b      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004226:	d02e      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8004228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800422c:	d828      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004232:	d02a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004238:	d822      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800423a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800423e:	d026      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8004240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004244:	d81c      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424a:	d010      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800424c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004250:	d816      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01d      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800425a:	d111      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fd2a 	bl	8004cbc <RCCEx_PLL2_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800426c:	e012      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3324      	adds	r3, #36	; 0x24
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fdd3 	bl	8004e20 <RCCEx_PLL3_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800427e:	e009      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
      break;
 8004284:	e006      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004286:	bf00      	nop
 8004288:	e004      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8004292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800429a:	4b57      	ldr	r3, [pc, #348]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	4953      	ldr	r1, [pc, #332]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	654b      	str	r3, [r1, #84]	; 0x54
 80042ae:	e001      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d04b      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042ca:	d02e      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80042cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042d0:	d828      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d6:	d02a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xace>
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042dc:	d822      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80042de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e2:	d026      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 80042e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042e8:	d81c      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80042ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ee:	d010      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80042f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f4:	d816      	bhi.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01d      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fe:	d111      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fcd8 	bl	8004cbc <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004310:	e012      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3324      	adds	r3, #36	; 0x24
 8004316:	2102      	movs	r1, #2
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fd81 	bl	8004e20 <RCCEx_PLL3_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004322:	e009      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	75fb      	strb	r3, [r7, #23]
      break;
 8004328:	e006      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800432a:	bf00      	nop
 800432c:	e004      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800432e:	bf00      	nop
 8004330:	e002      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004332:	bf00      	nop
 8004334:	e000      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8004336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800434c:	492a      	ldr	r1, [pc, #168]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800434e:	4313      	orrs	r3, r2
 8004350:	658b      	str	r3, [r1, #88]	; 0x58
 8004352:	e001      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d04d      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800436a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800436e:	d02e      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8004370:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004374:	d828      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437a:	d02a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004380:	d822      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004382:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004386:	d026      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8004388:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800438c:	d81c      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800438e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004392:	d010      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004398:	d816      	bhi.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01d      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d111      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fc86 	bl	8004cbc <RCCEx_PLL2_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043b4:	e012      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3324      	adds	r3, #36	; 0x24
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fd2f 	bl	8004e20 <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043c6:	e009      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
      break;
 80043cc:	e006      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80043ce:	bf00      	nop
 80043d0:	e004      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80043da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10c      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043f0:	4901      	ldr	r1, [pc, #4]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	658b      	str	r3, [r1, #88]	; 0x58
 80043f6:	e003      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80043f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004416:	d10a      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3324      	adds	r3, #36	; 0x24
 800441c:	2102      	movs	r1, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fcfe 	bl	8004e20 <RCCEx_PLL3_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800442e:	4b8c      	ldr	r3, [pc, #560]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443c:	4988      	ldr	r1, [pc, #544]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800443e:	4313      	orrs	r3, r2
 8004440:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004458:	d10a      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3324      	adds	r3, #36	; 0x24
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fcdd 	bl	8004e20 <RCCEx_PLL3_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004470:	4b7b      	ldr	r3, [pc, #492]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800447e:	4978      	ldr	r1, [pc, #480]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004480:	4313      	orrs	r3, r2
 8004482:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d034      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800449a:	d01d      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800449c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a0:	d817      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80044a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044aa:	d009      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 80044ac:	e011      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3304      	adds	r3, #4
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fc01 	bl	8004cbc <RCCEx_PLL2_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044be:	e00c      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3324      	adds	r3, #36	; 0x24
 80044c4:	2102      	movs	r1, #2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fcaa 	bl	8004e20 <RCCEx_PLL3_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044d0:	e003      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	75fb      	strb	r3, [r7, #23]
      break;
 80044d6:	e000      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 80044d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044e0:	4b5f      	ldr	r3, [pc, #380]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044ee:	495c      	ldr	r1, [pc, #368]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	658b      	str	r3, [r1, #88]	; 0x58
 80044f4:	e001      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d033      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004510:	d01c      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004512:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004516:	d816      	bhi.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8004518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451c:	d003      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800451e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004522:	d007      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8004524:	e00f      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004526:	4b4e      	ldr	r3, [pc, #312]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	4a4d      	ldr	r2, [pc, #308]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800452c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004532:	e00c      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3324      	adds	r3, #36	; 0x24
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fc70 	bl	8004e20 <RCCEx_PLL3_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004544:	e003      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
      break;
 800454a:	e000      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 800454c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004554:	4b42      	ldr	r3, [pc, #264]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	493f      	ldr	r1, [pc, #252]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004564:	4313      	orrs	r3, r2
 8004566:	654b      	str	r3, [r1, #84]	; 0x54
 8004568:	e001      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d029      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8004582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004586:	d007      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8004588:	e00f      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458a:	4b35      	ldr	r3, [pc, #212]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	4a34      	ldr	r2, [pc, #208]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004594:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004596:	e00b      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	2102      	movs	r1, #2
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fb8c 	bl	8004cbc <RCCEx_PLL2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045a8:	e002      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
      break;
 80045ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045b6:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	4927      	ldr	r1, [pc, #156]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045c8:	e001      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3324      	adds	r3, #36	; 0x24
 80045de:	2102      	movs	r1, #2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fc1d 	bl	8004e20 <RCCEx_PLL3_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d035      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004606:	d017      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8004608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460c:	d811      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800460e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004612:	d013      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8004614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004618:	d80b      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d010      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800461e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004622:	d106      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800462a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004630:	e007      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	75fb      	strb	r3, [r7, #23]
      break;
 8004636:	e004      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004638:	bf00      	nop
 800463a:	e002      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800463c:	bf00      	nop
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10d      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004656:	4902      	ldr	r1, [pc, #8]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004658:	4313      	orrs	r3, r2
 800465a:	654b      	str	r3, [r1, #84]	; 0x54
 800465c:	e004      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800465e:	bf00      	nop
 8004660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004674:	4b31      	ldr	r3, [pc, #196]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004680:	492e      	ldr	r1, [pc, #184]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004692:	4b2a      	ldr	r3, [pc, #168]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046a0:	4926      	ldr	r1, [pc, #152]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046be:	491f      	ldr	r1, [pc, #124]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80046d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046da:	6113      	str	r3, [r2, #16]
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046e6:	4915      	ldr	r1, [pc, #84]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da08      	bge.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	490e      	ldr	r1, [pc, #56]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004702:	4313      	orrs	r3, r2
 8004704:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004720:	4906      	ldr	r1, [pc, #24]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004726:	7dbb      	ldrb	r3, [r7, #22]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e000      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400

08004740 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004744:	f7ff f830 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4904      	ldr	r1, [pc, #16]	; (8004768 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	58024400 	.word	0x58024400
 8004768:	08006df0 	.word	0x08006df0

0800476c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004774:	4ba1      	ldr	r3, [pc, #644]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800477e:	4b9f      	ldr	r3, [pc, #636]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	0b1b      	lsrs	r3, r3, #12
 8004784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004788:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800478a:	4b9c      	ldr	r3, [pc, #624]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004796:	4b99      	ldr	r3, [pc, #612]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8111 	beq.w	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	f000 8083 	beq.w	80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f200 80a1 	bhi.w	800490c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d056      	beq.n	8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047d6:	e099      	b.n	800490c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047d8:	4b88      	ldr	r3, [pc, #544]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d02d      	beq.n	8004840 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047e4:	4b85      	ldr	r3, [pc, #532]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	08db      	lsrs	r3, r3, #3
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	4a84      	ldr	r2, [pc, #528]	; (8004a00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	4b7b      	ldr	r3, [pc, #492]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004822:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800483e:	e087      	b.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a03 	vldr	s12, [r7, #12]
 8004866:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004882:	e065      	b.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b59      	ldr	r3, [pc, #356]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048c6:	e043      	b.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b48      	ldr	r3, [pc, #288]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800490a:	e021      	b.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b37      	ldr	r3, [pc, #220]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004932:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800494e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004950:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	0a5b      	lsrs	r3, r3, #9
 8004956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004966:	ee37 7a87 	vadd.f32	s14, s15, s14
 800496a:	edd7 6a07 	vldr	s13, [r7, #28]
 800496e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004976:	ee17 2a90 	vmov	r2, s15
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800497e:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	0c1b      	lsrs	r3, r3, #16
 8004984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004998:	edd7 6a07 	vldr	s13, [r7, #28]
 800499c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a4:	ee17 2a90 	vmov	r2, s15
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80049ac:	4b13      	ldr	r3, [pc, #76]	; (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	0e1b      	lsrs	r3, r3, #24
 80049b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d2:	ee17 2a90 	vmov	r2, s15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049da:	e008      	b.n	80049ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
}
 80049ee:	bf00      	nop
 80049f0:	3724      	adds	r7, #36	; 0x24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	58024400 	.word	0x58024400
 8004a00:	03d09000 	.word	0x03d09000
 8004a04:	46000000 	.word	0x46000000
 8004a08:	4c742400 	.word	0x4c742400
 8004a0c:	4a742400 	.word	0x4a742400
 8004a10:	4bbebc20 	.word	0x4bbebc20

08004a14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	; 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a1c:	4ba1      	ldr	r3, [pc, #644]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004a26:	4b9f      	ldr	r3, [pc, #636]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	0d1b      	lsrs	r3, r3, #20
 8004a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a32:	4b9c      	ldr	r3, [pc, #624]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004a3e:	4b99      	ldr	r3, [pc, #612]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	08db      	lsrs	r3, r3, #3
 8004a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8111 	beq.w	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	f000 8083 	beq.w	8004b70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	f200 80a1 	bhi.w	8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d056      	beq.n	8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a7e:	e099      	b.n	8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a80:	4b88      	ldr	r3, [pc, #544]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d02d      	beq.n	8004ae8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a8c:	4b85      	ldr	r3, [pc, #532]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	08db      	lsrs	r3, r3, #3
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	4a84      	ldr	r2, [pc, #528]	; (8004ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	ee07 3a90 	vmov	s15, r3
 8004aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab6:	4b7b      	ldr	r3, [pc, #492]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ae6:	e087      	b.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afa:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b2a:	e065      	b.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	4b59      	ldr	r3, [pc, #356]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b6e:	e043      	b.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b82:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bb2:	e021      	b.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc6:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004bf8:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	0a5b      	lsrs	r3, r3, #9
 8004bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1e:	ee17 2a90 	vmov	r2, s15
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004c26:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4c:	ee17 2a90 	vmov	r2, s15
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	0e1b      	lsrs	r3, r3, #24
 8004c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7a:	ee17 2a90 	vmov	r2, s15
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c82:	e008      	b.n	8004c96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	bf00      	nop
 8004c98:	3724      	adds	r7, #36	; 0x24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	03d09000 	.word	0x03d09000
 8004cac:	46000000 	.word	0x46000000
 8004cb0:	4c742400 	.word	0x4c742400
 8004cb4:	4a742400 	.word	0x4a742400
 8004cb8:	4bbebc20 	.word	0x4bbebc20

08004cbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cca:	4b53      	ldr	r3, [pc, #332]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d101      	bne.n	8004cda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e099      	b.n	8004e0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cda:	4b4f      	ldr	r3, [pc, #316]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a4e      	ldr	r2, [pc, #312]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce6:	f7fc fed7 	bl	8001a98 <HAL_GetTick>
 8004cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cec:	e008      	b.n	8004d00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004cee:	f7fc fed3 	bl	8001a98 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e086      	b.n	8004e0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d00:	4b45      	ldr	r3, [pc, #276]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d0c:	4b42      	ldr	r3, [pc, #264]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	493f      	ldr	r1, [pc, #252]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	025b      	lsls	r3, r3, #9
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	041b      	lsls	r3, r3, #16
 8004d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	061b      	lsls	r3, r3, #24
 8004d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d50:	4931      	ldr	r1, [pc, #196]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d56:	4b30      	ldr	r3, [pc, #192]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	492d      	ldr	r1, [pc, #180]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d68:	4b2b      	ldr	r3, [pc, #172]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	f023 0220 	bic.w	r2, r3, #32
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	4928      	ldr	r1, [pc, #160]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d7a:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	f023 0310 	bic.w	r3, r3, #16
 8004d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d86:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8a:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <RCCEx_PLL2_Config+0x160>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	69d2      	ldr	r2, [r2, #28]
 8004d92:	00d2      	lsls	r2, r2, #3
 8004d94:	4920      	ldr	r1, [pc, #128]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	f043 0310 	orr.w	r3, r3, #16
 8004da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dac:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004db2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004db8:	e00f      	b.n	8004dda <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dc0:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dcc:	e005      	b.n	8004dda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	4a11      	ldr	r2, [pc, #68]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004dda:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a0e      	ldr	r2, [pc, #56]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004de0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de6:	f7fc fe57 	bl	8001a98 <HAL_GetTick>
 8004dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dec:	e008      	b.n	8004e00 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004dee:	f7fc fe53 	bl	8001a98 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e006      	b.n	8004e0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	ffff0007 	.word	0xffff0007

08004e20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e2e:	4b53      	ldr	r3, [pc, #332]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d101      	bne.n	8004e3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e099      	b.n	8004f72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e3e:	4b4f      	ldr	r3, [pc, #316]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a4e      	ldr	r2, [pc, #312]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4a:	f7fc fe25 	bl	8001a98 <HAL_GetTick>
 8004e4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e50:	e008      	b.n	8004e64 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e52:	f7fc fe21 	bl	8001a98 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e086      	b.n	8004f72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e64:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e70:	4b42      	ldr	r3, [pc, #264]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	051b      	lsls	r3, r3, #20
 8004e7e:	493f      	ldr	r1, [pc, #252]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	628b      	str	r3, [r1, #40]	; 0x28
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	025b      	lsls	r3, r3, #9
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	041b      	lsls	r3, r3, #16
 8004ea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004eb4:	4931      	ldr	r1, [pc, #196]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004eba:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	492d      	ldr	r1, [pc, #180]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	4928      	ldr	r1, [pc, #160]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ede:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eee:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <RCCEx_PLL3_Config+0x160>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	69d2      	ldr	r2, [r2, #28]
 8004ef6:	00d2      	lsls	r2, r2, #3
 8004ef8:	4920      	ldr	r1, [pc, #128]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004efe:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f10:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f1c:	e00f      	b.n	8004f3e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d106      	bne.n	8004f32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f24:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	4a14      	ldr	r2, [pc, #80]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f30:	e005      	b.n	8004f3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f32:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	4a11      	ldr	r2, [pc, #68]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a0e      	ldr	r2, [pc, #56]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4a:	f7fc fda5 	bl	8001a98 <HAL_GetTick>
 8004f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f50:	e008      	b.n	8004f64 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f52:	f7fc fda1 	bl	8001a98 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	ffff0007 	.word	0xffff0007

08004f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e042      	b.n	800501c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fc fb73 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2224      	movs	r2, #36	; 0x24
 8004fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8c2 	bl	8005150 <UART_SetConfig>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e022      	b.n	800501c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fe16 	bl	8005c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fe9d 	bl	8005d54 <UART_CheckIdleState>
 800501a:	4603      	mov	r3, r0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503a:	2b20      	cmp	r3, #32
 800503c:	f040 8083 	bne.w	8005146 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_Transmit+0x28>
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e07b      	b.n	8005148 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_UART_Transmit+0x3a>
 800505a:	2302      	movs	r3, #2
 800505c:	e074      	b.n	8005148 <HAL_UART_Transmit+0x124>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2221      	movs	r2, #33	; 0x21
 8005072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005076:	f7fc fd0f 	bl	8001a98 <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005094:	d108      	bne.n	80050a8 <HAL_UART_Transmit+0x84>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	e003      	b.n	80050b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80050b8:	e02c      	b.n	8005114 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fe90 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e039      	b.n	8005148 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	3302      	adds	r3, #2
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e007      	b.n	8005102 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1cc      	bne.n	80050ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fe5d 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e006      	b.n	8005148 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005150:	b5b0      	push	{r4, r5, r7, lr}
 8005152:	b08e      	sub	sp, #56	; 0x38
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	4313      	orrs	r3, r2
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4bbf      	ldr	r3, [pc, #764]	; (800547c <UART_SetConfig+0x32c>)
 800517e:	4013      	ands	r3, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005186:	430b      	orrs	r3, r1
 8005188:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4ab5      	ldr	r2, [pc, #724]	; (8005480 <UART_SetConfig+0x330>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051b6:	4313      	orrs	r3, r2
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	4bb0      	ldr	r3, [pc, #704]	; (8005484 <UART_SetConfig+0x334>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	f023 010f 	bic.w	r1, r3, #15
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4aa7      	ldr	r2, [pc, #668]	; (8005488 <UART_SetConfig+0x338>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d176      	bne.n	80052dc <UART_SetConfig+0x18c>
 80051ee:	4ba7      	ldr	r3, [pc, #668]	; (800548c <UART_SetConfig+0x33c>)
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f6:	2b28      	cmp	r3, #40	; 0x28
 80051f8:	d86c      	bhi.n	80052d4 <UART_SetConfig+0x184>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <UART_SetConfig+0xb0>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	080052a5 	.word	0x080052a5
 8005204:	080052d5 	.word	0x080052d5
 8005208:	080052d5 	.word	0x080052d5
 800520c:	080052d5 	.word	0x080052d5
 8005210:	080052d5 	.word	0x080052d5
 8005214:	080052d5 	.word	0x080052d5
 8005218:	080052d5 	.word	0x080052d5
 800521c:	080052d5 	.word	0x080052d5
 8005220:	080052ad 	.word	0x080052ad
 8005224:	080052d5 	.word	0x080052d5
 8005228:	080052d5 	.word	0x080052d5
 800522c:	080052d5 	.word	0x080052d5
 8005230:	080052d5 	.word	0x080052d5
 8005234:	080052d5 	.word	0x080052d5
 8005238:	080052d5 	.word	0x080052d5
 800523c:	080052d5 	.word	0x080052d5
 8005240:	080052b5 	.word	0x080052b5
 8005244:	080052d5 	.word	0x080052d5
 8005248:	080052d5 	.word	0x080052d5
 800524c:	080052d5 	.word	0x080052d5
 8005250:	080052d5 	.word	0x080052d5
 8005254:	080052d5 	.word	0x080052d5
 8005258:	080052d5 	.word	0x080052d5
 800525c:	080052d5 	.word	0x080052d5
 8005260:	080052bd 	.word	0x080052bd
 8005264:	080052d5 	.word	0x080052d5
 8005268:	080052d5 	.word	0x080052d5
 800526c:	080052d5 	.word	0x080052d5
 8005270:	080052d5 	.word	0x080052d5
 8005274:	080052d5 	.word	0x080052d5
 8005278:	080052d5 	.word	0x080052d5
 800527c:	080052d5 	.word	0x080052d5
 8005280:	080052c5 	.word	0x080052c5
 8005284:	080052d5 	.word	0x080052d5
 8005288:	080052d5 	.word	0x080052d5
 800528c:	080052d5 	.word	0x080052d5
 8005290:	080052d5 	.word	0x080052d5
 8005294:	080052d5 	.word	0x080052d5
 8005298:	080052d5 	.word	0x080052d5
 800529c:	080052d5 	.word	0x080052d5
 80052a0:	080052cd 	.word	0x080052cd
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052aa:	e222      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80052ac:	2304      	movs	r3, #4
 80052ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b2:	e21e      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80052b4:	2308      	movs	r3, #8
 80052b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ba:	e21a      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80052bc:	2310      	movs	r3, #16
 80052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c2:	e216      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80052c4:	2320      	movs	r3, #32
 80052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ca:	e212      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80052cc:	2340      	movs	r3, #64	; 0x40
 80052ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d2:	e20e      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052da:	e20a      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a6b      	ldr	r2, [pc, #428]	; (8005490 <UART_SetConfig+0x340>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d130      	bne.n	8005348 <UART_SetConfig+0x1f8>
 80052e6:	4b69      	ldr	r3, [pc, #420]	; (800548c <UART_SetConfig+0x33c>)
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d826      	bhi.n	8005340 <UART_SetConfig+0x1f0>
 80052f2:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <UART_SetConfig+0x1a8>)
 80052f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f8:	08005311 	.word	0x08005311
 80052fc:	08005319 	.word	0x08005319
 8005300:	08005321 	.word	0x08005321
 8005304:	08005329 	.word	0x08005329
 8005308:	08005331 	.word	0x08005331
 800530c:	08005339 	.word	0x08005339
 8005310:	2300      	movs	r3, #0
 8005312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005316:	e1ec      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005318:	2304      	movs	r3, #4
 800531a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531e:	e1e8      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005320:	2308      	movs	r3, #8
 8005322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005326:	e1e4      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005328:	2310      	movs	r3, #16
 800532a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532e:	e1e0      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005330:	2320      	movs	r3, #32
 8005332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005336:	e1dc      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800533e:	e1d8      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005346:	e1d4      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a51      	ldr	r2, [pc, #324]	; (8005494 <UART_SetConfig+0x344>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d130      	bne.n	80053b4 <UART_SetConfig+0x264>
 8005352:	4b4e      	ldr	r3, [pc, #312]	; (800548c <UART_SetConfig+0x33c>)
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	2b05      	cmp	r3, #5
 800535c:	d826      	bhi.n	80053ac <UART_SetConfig+0x25c>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x214>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	0800537d 	.word	0x0800537d
 8005368:	08005385 	.word	0x08005385
 800536c:	0800538d 	.word	0x0800538d
 8005370:	08005395 	.word	0x08005395
 8005374:	0800539d 	.word	0x0800539d
 8005378:	080053a5 	.word	0x080053a5
 800537c:	2300      	movs	r3, #0
 800537e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005382:	e1b6      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005384:	2304      	movs	r3, #4
 8005386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538a:	e1b2      	b.n	80056f2 <UART_SetConfig+0x5a2>
 800538c:	2308      	movs	r3, #8
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e1ae      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005394:	2310      	movs	r3, #16
 8005396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539a:	e1aa      	b.n	80056f2 <UART_SetConfig+0x5a2>
 800539c:	2320      	movs	r3, #32
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e1a6      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80053a4:	2340      	movs	r3, #64	; 0x40
 80053a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053aa:	e1a2      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80053ac:	2380      	movs	r3, #128	; 0x80
 80053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b2:	e19e      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a37      	ldr	r2, [pc, #220]	; (8005498 <UART_SetConfig+0x348>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d130      	bne.n	8005420 <UART_SetConfig+0x2d0>
 80053be:	4b33      	ldr	r3, [pc, #204]	; (800548c <UART_SetConfig+0x33c>)
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b05      	cmp	r3, #5
 80053c8:	d826      	bhi.n	8005418 <UART_SetConfig+0x2c8>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <UART_SetConfig+0x280>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053e9 	.word	0x080053e9
 80053d4:	080053f1 	.word	0x080053f1
 80053d8:	080053f9 	.word	0x080053f9
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005409 	.word	0x08005409
 80053e4:	08005411 	.word	0x08005411
 80053e8:	2300      	movs	r3, #0
 80053ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ee:	e180      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80053f0:	2304      	movs	r3, #4
 80053f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f6:	e17c      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80053f8:	2308      	movs	r3, #8
 80053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fe:	e178      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005400:	2310      	movs	r3, #16
 8005402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005406:	e174      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005408:	2320      	movs	r3, #32
 800540a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540e:	e170      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005410:	2340      	movs	r3, #64	; 0x40
 8005412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005416:	e16c      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541e:	e168      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1d      	ldr	r2, [pc, #116]	; (800549c <UART_SetConfig+0x34c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d142      	bne.n	80054b0 <UART_SetConfig+0x360>
 800542a:	4b18      	ldr	r3, [pc, #96]	; (800548c <UART_SetConfig+0x33c>)
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	2b05      	cmp	r3, #5
 8005434:	d838      	bhi.n	80054a8 <UART_SetConfig+0x358>
 8005436:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0x2ec>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	08005455 	.word	0x08005455
 8005440:	0800545d 	.word	0x0800545d
 8005444:	08005465 	.word	0x08005465
 8005448:	0800546d 	.word	0x0800546d
 800544c:	08005475 	.word	0x08005475
 8005450:	080054a1 	.word	0x080054a1
 8005454:	2300      	movs	r3, #0
 8005456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800545a:	e14a      	b.n	80056f2 <UART_SetConfig+0x5a2>
 800545c:	2304      	movs	r3, #4
 800545e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005462:	e146      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005464:	2308      	movs	r3, #8
 8005466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546a:	e142      	b.n	80056f2 <UART_SetConfig+0x5a2>
 800546c:	2310      	movs	r3, #16
 800546e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005472:	e13e      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005474:	2320      	movs	r3, #32
 8005476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547a:	e13a      	b.n	80056f2 <UART_SetConfig+0x5a2>
 800547c:	cfff69f3 	.word	0xcfff69f3
 8005480:	58000c00 	.word	0x58000c00
 8005484:	11fff4ff 	.word	0x11fff4ff
 8005488:	40011000 	.word	0x40011000
 800548c:	58024400 	.word	0x58024400
 8005490:	40004400 	.word	0x40004400
 8005494:	40004800 	.word	0x40004800
 8005498:	40004c00 	.word	0x40004c00
 800549c:	40005000 	.word	0x40005000
 80054a0:	2340      	movs	r3, #64	; 0x40
 80054a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054a6:	e124      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ae:	e120      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4acc      	ldr	r2, [pc, #816]	; (80057e8 <UART_SetConfig+0x698>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d176      	bne.n	80055a8 <UART_SetConfig+0x458>
 80054ba:	4bcc      	ldr	r3, [pc, #816]	; (80057ec <UART_SetConfig+0x69c>)
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054c2:	2b28      	cmp	r3, #40	; 0x28
 80054c4:	d86c      	bhi.n	80055a0 <UART_SetConfig+0x450>
 80054c6:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <UART_SetConfig+0x37c>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	08005571 	.word	0x08005571
 80054d0:	080055a1 	.word	0x080055a1
 80054d4:	080055a1 	.word	0x080055a1
 80054d8:	080055a1 	.word	0x080055a1
 80054dc:	080055a1 	.word	0x080055a1
 80054e0:	080055a1 	.word	0x080055a1
 80054e4:	080055a1 	.word	0x080055a1
 80054e8:	080055a1 	.word	0x080055a1
 80054ec:	08005579 	.word	0x08005579
 80054f0:	080055a1 	.word	0x080055a1
 80054f4:	080055a1 	.word	0x080055a1
 80054f8:	080055a1 	.word	0x080055a1
 80054fc:	080055a1 	.word	0x080055a1
 8005500:	080055a1 	.word	0x080055a1
 8005504:	080055a1 	.word	0x080055a1
 8005508:	080055a1 	.word	0x080055a1
 800550c:	08005581 	.word	0x08005581
 8005510:	080055a1 	.word	0x080055a1
 8005514:	080055a1 	.word	0x080055a1
 8005518:	080055a1 	.word	0x080055a1
 800551c:	080055a1 	.word	0x080055a1
 8005520:	080055a1 	.word	0x080055a1
 8005524:	080055a1 	.word	0x080055a1
 8005528:	080055a1 	.word	0x080055a1
 800552c:	08005589 	.word	0x08005589
 8005530:	080055a1 	.word	0x080055a1
 8005534:	080055a1 	.word	0x080055a1
 8005538:	080055a1 	.word	0x080055a1
 800553c:	080055a1 	.word	0x080055a1
 8005540:	080055a1 	.word	0x080055a1
 8005544:	080055a1 	.word	0x080055a1
 8005548:	080055a1 	.word	0x080055a1
 800554c:	08005591 	.word	0x08005591
 8005550:	080055a1 	.word	0x080055a1
 8005554:	080055a1 	.word	0x080055a1
 8005558:	080055a1 	.word	0x080055a1
 800555c:	080055a1 	.word	0x080055a1
 8005560:	080055a1 	.word	0x080055a1
 8005564:	080055a1 	.word	0x080055a1
 8005568:	080055a1 	.word	0x080055a1
 800556c:	08005599 	.word	0x08005599
 8005570:	2301      	movs	r3, #1
 8005572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005576:	e0bc      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005578:	2304      	movs	r3, #4
 800557a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557e:	e0b8      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005580:	2308      	movs	r3, #8
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e0b4      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005588:	2310      	movs	r3, #16
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e0b0      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005590:	2320      	movs	r3, #32
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e0ac      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005598:	2340      	movs	r3, #64	; 0x40
 800559a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559e:	e0a8      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80055a0:	2380      	movs	r3, #128	; 0x80
 80055a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a6:	e0a4      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a90      	ldr	r2, [pc, #576]	; (80057f0 <UART_SetConfig+0x6a0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d130      	bne.n	8005614 <UART_SetConfig+0x4c4>
 80055b2:	4b8e      	ldr	r3, [pc, #568]	; (80057ec <UART_SetConfig+0x69c>)
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d826      	bhi.n	800560c <UART_SetConfig+0x4bc>
 80055be:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <UART_SetConfig+0x474>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	080055dd 	.word	0x080055dd
 80055c8:	080055e5 	.word	0x080055e5
 80055cc:	080055ed 	.word	0x080055ed
 80055d0:	080055f5 	.word	0x080055f5
 80055d4:	080055fd 	.word	0x080055fd
 80055d8:	08005605 	.word	0x08005605
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e2:	e086      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80055e4:	2304      	movs	r3, #4
 80055e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ea:	e082      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80055ec:	2308      	movs	r3, #8
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e07e      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e07a      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80055fc:	2320      	movs	r3, #32
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e076      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005604:	2340      	movs	r3, #64	; 0x40
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560a:	e072      	b.n	80056f2 <UART_SetConfig+0x5a2>
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e06e      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a76      	ldr	r2, [pc, #472]	; (80057f4 <UART_SetConfig+0x6a4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d130      	bne.n	8005680 <UART_SetConfig+0x530>
 800561e:	4b73      	ldr	r3, [pc, #460]	; (80057ec <UART_SetConfig+0x69c>)
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b05      	cmp	r3, #5
 8005628:	d826      	bhi.n	8005678 <UART_SetConfig+0x528>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0x4e0>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005649 	.word	0x08005649
 8005634:	08005651 	.word	0x08005651
 8005638:	08005659 	.word	0x08005659
 800563c:	08005661 	.word	0x08005661
 8005640:	08005669 	.word	0x08005669
 8005644:	08005671 	.word	0x08005671
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800564e:	e050      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005650:	2304      	movs	r3, #4
 8005652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005656:	e04c      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005658:	2308      	movs	r3, #8
 800565a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565e:	e048      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005660:	2310      	movs	r3, #16
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e044      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005668:	2320      	movs	r3, #32
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	e040      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005670:	2340      	movs	r3, #64	; 0x40
 8005672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005676:	e03c      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005678:	2380      	movs	r3, #128	; 0x80
 800567a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567e:	e038      	b.n	80056f2 <UART_SetConfig+0x5a2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a5c      	ldr	r2, [pc, #368]	; (80057f8 <UART_SetConfig+0x6a8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d130      	bne.n	80056ec <UART_SetConfig+0x59c>
 800568a:	4b58      	ldr	r3, [pc, #352]	; (80057ec <UART_SetConfig+0x69c>)
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	2b05      	cmp	r3, #5
 8005694:	d826      	bhi.n	80056e4 <UART_SetConfig+0x594>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x54c>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	080056b5 	.word	0x080056b5
 80056a0:	080056bd 	.word	0x080056bd
 80056a4:	080056c5 	.word	0x080056c5
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	2302      	movs	r3, #2
 80056b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ba:	e01a      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80056bc:	2304      	movs	r3, #4
 80056be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c2:	e016      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80056c4:	2308      	movs	r3, #8
 80056c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ca:	e012      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80056cc:	2310      	movs	r3, #16
 80056ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d2:	e00e      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80056d4:	2320      	movs	r3, #32
 80056d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056da:	e00a      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80056dc:	2340      	movs	r3, #64	; 0x40
 80056de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e2:	e006      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ea:	e002      	b.n	80056f2 <UART_SetConfig+0x5a2>
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a40      	ldr	r2, [pc, #256]	; (80057f8 <UART_SetConfig+0x6a8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	f040 80ef 	bne.w	80058dc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005702:	2b20      	cmp	r3, #32
 8005704:	dc46      	bgt.n	8005794 <UART_SetConfig+0x644>
 8005706:	2b02      	cmp	r3, #2
 8005708:	f2c0 8081 	blt.w	800580e <UART_SetConfig+0x6be>
 800570c:	3b02      	subs	r3, #2
 800570e:	2b1e      	cmp	r3, #30
 8005710:	d87d      	bhi.n	800580e <UART_SetConfig+0x6be>
 8005712:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <UART_SetConfig+0x5c8>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	0800579b 	.word	0x0800579b
 800571c:	0800580f 	.word	0x0800580f
 8005720:	080057a3 	.word	0x080057a3
 8005724:	0800580f 	.word	0x0800580f
 8005728:	0800580f 	.word	0x0800580f
 800572c:	0800580f 	.word	0x0800580f
 8005730:	080057b3 	.word	0x080057b3
 8005734:	0800580f 	.word	0x0800580f
 8005738:	0800580f 	.word	0x0800580f
 800573c:	0800580f 	.word	0x0800580f
 8005740:	0800580f 	.word	0x0800580f
 8005744:	0800580f 	.word	0x0800580f
 8005748:	0800580f 	.word	0x0800580f
 800574c:	0800580f 	.word	0x0800580f
 8005750:	080057c3 	.word	0x080057c3
 8005754:	0800580f 	.word	0x0800580f
 8005758:	0800580f 	.word	0x0800580f
 800575c:	0800580f 	.word	0x0800580f
 8005760:	0800580f 	.word	0x0800580f
 8005764:	0800580f 	.word	0x0800580f
 8005768:	0800580f 	.word	0x0800580f
 800576c:	0800580f 	.word	0x0800580f
 8005770:	0800580f 	.word	0x0800580f
 8005774:	0800580f 	.word	0x0800580f
 8005778:	0800580f 	.word	0x0800580f
 800577c:	0800580f 	.word	0x0800580f
 8005780:	0800580f 	.word	0x0800580f
 8005784:	0800580f 	.word	0x0800580f
 8005788:	0800580f 	.word	0x0800580f
 800578c:	0800580f 	.word	0x0800580f
 8005790:	08005801 	.word	0x08005801
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d036      	beq.n	8005806 <UART_SetConfig+0x6b6>
 8005798:	e039      	b.n	800580e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800579a:	f7fe ffd1 	bl	8004740 <HAL_RCCEx_GetD3PCLK1Freq>
 800579e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80057a0:	e03b      	b.n	800581a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057a2:	f107 0314 	add.w	r3, r7, #20
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe ffe0 	bl	800476c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057b0:	e033      	b.n	800581a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057b2:	f107 0308 	add.w	r3, r7, #8
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff f92c 	bl	8004a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057c0:	e02b      	b.n	800581a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <UART_SetConfig+0x69c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <UART_SetConfig+0x69c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	08db      	lsrs	r3, r3, #3
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <UART_SetConfig+0x6ac>)
 80057da:	fa22 f303 	lsr.w	r3, r2, r3
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057e0:	e01b      	b.n	800581a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <UART_SetConfig+0x6ac>)
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057e6:	e018      	b.n	800581a <UART_SetConfig+0x6ca>
 80057e8:	40011400 	.word	0x40011400
 80057ec:	58024400 	.word	0x58024400
 80057f0:	40007800 	.word	0x40007800
 80057f4:	40007c00 	.word	0x40007c00
 80057f8:	58000c00 	.word	0x58000c00
 80057fc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005800:	4bc4      	ldr	r3, [pc, #784]	; (8005b14 <UART_SetConfig+0x9c4>)
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005804:	e009      	b.n	800581a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800580c:	e005      	b.n	800581a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 81da 	beq.w	8005bd6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	4abc      	ldr	r2, [pc, #752]	; (8005b18 <UART_SetConfig+0x9c8>)
 8005828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800582c:	461a      	mov	r2, r3
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	fbb3 f3f2 	udiv	r3, r3, r2
 8005834:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	4413      	add	r3, r2
 8005840:	6a3a      	ldr	r2, [r7, #32]
 8005842:	429a      	cmp	r2, r3
 8005844:	d305      	bcc.n	8005852 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	429a      	cmp	r2, r3
 8005850:	d903      	bls.n	800585a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005858:	e1bd      	b.n	8005bd6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	4618      	mov	r0, r3
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	4aac      	ldr	r2, [pc, #688]	; (8005b18 <UART_SetConfig+0x9c8>)
 8005868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800586c:	b29a      	uxth	r2, r3
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	f7fa fd31 	bl	80002d8 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4610      	mov	r0, r2
 800587c:	4619      	mov	r1, r3
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	020b      	lsls	r3, r1, #8
 8005888:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800588c:	0202      	lsls	r2, r0, #8
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	6849      	ldr	r1, [r1, #4]
 8005892:	0849      	lsrs	r1, r1, #1
 8005894:	4608      	mov	r0, r1
 8005896:	f04f 0100 	mov.w	r1, #0
 800589a:	1814      	adds	r4, r2, r0
 800589c:	eb43 0501 	adc.w	r5, r3, r1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	461a      	mov	r2, r3
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	4620      	mov	r0, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	f7fa fd13 	bl	80002d8 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4613      	mov	r3, r2
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058c0:	d308      	bcc.n	80058d4 <UART_SetConfig+0x784>
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c8:	d204      	bcs.n	80058d4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	e180      	b.n	8005bd6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80058da:	e17c      	b.n	8005bd6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e4:	f040 80bf 	bne.w	8005a66 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80058e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	dc49      	bgt.n	8005984 <UART_SetConfig+0x834>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	db7c      	blt.n	80059ee <UART_SetConfig+0x89e>
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d87a      	bhi.n	80059ee <UART_SetConfig+0x89e>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x7b0>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	0800598b 	.word	0x0800598b
 8005904:	08005993 	.word	0x08005993
 8005908:	080059ef 	.word	0x080059ef
 800590c:	080059ef 	.word	0x080059ef
 8005910:	0800599b 	.word	0x0800599b
 8005914:	080059ef 	.word	0x080059ef
 8005918:	080059ef 	.word	0x080059ef
 800591c:	080059ef 	.word	0x080059ef
 8005920:	080059ab 	.word	0x080059ab
 8005924:	080059ef 	.word	0x080059ef
 8005928:	080059ef 	.word	0x080059ef
 800592c:	080059ef 	.word	0x080059ef
 8005930:	080059ef 	.word	0x080059ef
 8005934:	080059ef 	.word	0x080059ef
 8005938:	080059ef 	.word	0x080059ef
 800593c:	080059ef 	.word	0x080059ef
 8005940:	080059bb 	.word	0x080059bb
 8005944:	080059ef 	.word	0x080059ef
 8005948:	080059ef 	.word	0x080059ef
 800594c:	080059ef 	.word	0x080059ef
 8005950:	080059ef 	.word	0x080059ef
 8005954:	080059ef 	.word	0x080059ef
 8005958:	080059ef 	.word	0x080059ef
 800595c:	080059ef 	.word	0x080059ef
 8005960:	080059ef 	.word	0x080059ef
 8005964:	080059ef 	.word	0x080059ef
 8005968:	080059ef 	.word	0x080059ef
 800596c:	080059ef 	.word	0x080059ef
 8005970:	080059ef 	.word	0x080059ef
 8005974:	080059ef 	.word	0x080059ef
 8005978:	080059ef 	.word	0x080059ef
 800597c:	080059ef 	.word	0x080059ef
 8005980:	080059e1 	.word	0x080059e1
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d02e      	beq.n	80059e6 <UART_SetConfig+0x896>
 8005988:	e031      	b.n	80059ee <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800598a:	f7fd ff3d 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 800598e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005990:	e033      	b.n	80059fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005992:	f7fd ff4f 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005996:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005998:	e02f      	b.n	80059fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800599a:	f107 0314 	add.w	r3, r7, #20
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe fee4 	bl	800476c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059a8:	e027      	b.n	80059fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059aa:	f107 0308 	add.w	r3, r7, #8
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff f830 	bl	8004a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059b8:	e01f      	b.n	80059fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ba:	4b58      	ldr	r3, [pc, #352]	; (8005b1c <UART_SetConfig+0x9cc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059c6:	4b55      	ldr	r3, [pc, #340]	; (8005b1c <UART_SetConfig+0x9cc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	08db      	lsrs	r3, r3, #3
 80059cc:	f003 0303 	and.w	r3, r3, #3
 80059d0:	4a53      	ldr	r2, [pc, #332]	; (8005b20 <UART_SetConfig+0x9d0>)
 80059d2:	fa22 f303 	lsr.w	r3, r2, r3
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059d8:	e00f      	b.n	80059fa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80059da:	4b51      	ldr	r3, [pc, #324]	; (8005b20 <UART_SetConfig+0x9d0>)
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059de:	e00c      	b.n	80059fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059e0:	4b4c      	ldr	r3, [pc, #304]	; (8005b14 <UART_SetConfig+0x9c4>)
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059e4:	e009      	b.n	80059fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059ec:	e005      	b.n	80059fa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80ea 	beq.w	8005bd6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	4a44      	ldr	r2, [pc, #272]	; (8005b18 <UART_SetConfig+0x9c8>)
 8005a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a14:	005a      	lsls	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	441a      	add	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2b0f      	cmp	r3, #15
 8005a2e:	d916      	bls.n	8005a5e <UART_SetConfig+0x90e>
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a36:	d212      	bcs.n	8005a5e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f023 030f 	bic.w	r3, r3, #15
 8005a40:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a50:	4313      	orrs	r3, r2
 8005a52:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	e0bb      	b.n	8005bd6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a64:	e0b7      	b.n	8005bd6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	dc4a      	bgt.n	8005b04 <UART_SetConfig+0x9b4>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f2c0 8086 	blt.w	8005b80 <UART_SetConfig+0xa30>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	f200 8083 	bhi.w	8005b80 <UART_SetConfig+0xa30>
 8005a7a:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <UART_SetConfig+0x930>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005b0b 	.word	0x08005b0b
 8005a84:	08005b25 	.word	0x08005b25
 8005a88:	08005b81 	.word	0x08005b81
 8005a8c:	08005b81 	.word	0x08005b81
 8005a90:	08005b2d 	.word	0x08005b2d
 8005a94:	08005b81 	.word	0x08005b81
 8005a98:	08005b81 	.word	0x08005b81
 8005a9c:	08005b81 	.word	0x08005b81
 8005aa0:	08005b3d 	.word	0x08005b3d
 8005aa4:	08005b81 	.word	0x08005b81
 8005aa8:	08005b81 	.word	0x08005b81
 8005aac:	08005b81 	.word	0x08005b81
 8005ab0:	08005b81 	.word	0x08005b81
 8005ab4:	08005b81 	.word	0x08005b81
 8005ab8:	08005b81 	.word	0x08005b81
 8005abc:	08005b81 	.word	0x08005b81
 8005ac0:	08005b4d 	.word	0x08005b4d
 8005ac4:	08005b81 	.word	0x08005b81
 8005ac8:	08005b81 	.word	0x08005b81
 8005acc:	08005b81 	.word	0x08005b81
 8005ad0:	08005b81 	.word	0x08005b81
 8005ad4:	08005b81 	.word	0x08005b81
 8005ad8:	08005b81 	.word	0x08005b81
 8005adc:	08005b81 	.word	0x08005b81
 8005ae0:	08005b81 	.word	0x08005b81
 8005ae4:	08005b81 	.word	0x08005b81
 8005ae8:	08005b81 	.word	0x08005b81
 8005aec:	08005b81 	.word	0x08005b81
 8005af0:	08005b81 	.word	0x08005b81
 8005af4:	08005b81 	.word	0x08005b81
 8005af8:	08005b81 	.word	0x08005b81
 8005afc:	08005b81 	.word	0x08005b81
 8005b00:	08005b73 	.word	0x08005b73
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d037      	beq.n	8005b78 <UART_SetConfig+0xa28>
 8005b08:	e03a      	b.n	8005b80 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b0a:	f7fd fe7d 	bl	8003808 <HAL_RCC_GetPCLK1Freq>
 8005b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b10:	e03c      	b.n	8005b8c <UART_SetConfig+0xa3c>
 8005b12:	bf00      	nop
 8005b14:	003d0900 	.word	0x003d0900
 8005b18:	08006e00 	.word	0x08006e00
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b24:	f7fd fe86 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005b28:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b2a:	e02f      	b.n	8005b8c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b2c:	f107 0314 	add.w	r3, r7, #20
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fe fe1b 	bl	800476c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b3a:	e027      	b.n	8005b8c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b3c:	f107 0308 	add.w	r3, r7, #8
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe ff67 	bl	8004a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b4a:	e01f      	b.n	8005b8c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b4c:	4b2c      	ldr	r3, [pc, #176]	; (8005c00 <UART_SetConfig+0xab0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d009      	beq.n	8005b6c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b58:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <UART_SetConfig+0xab0>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	08db      	lsrs	r3, r3, #3
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	4a28      	ldr	r2, [pc, #160]	; (8005c04 <UART_SetConfig+0xab4>)
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b6a:	e00f      	b.n	8005b8c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005b6c:	4b25      	ldr	r3, [pc, #148]	; (8005c04 <UART_SetConfig+0xab4>)
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b70:	e00c      	b.n	8005b8c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b72:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <UART_SetConfig+0xab8>)
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b76:	e009      	b.n	8005b8c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b7e:	e005      	b.n	8005b8c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b8a:	bf00      	nop
    }

    if (pclk != 0U)
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d021      	beq.n	8005bd6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	4a1d      	ldr	r2, [pc, #116]	; (8005c0c <UART_SetConfig+0xabc>)
 8005b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	441a      	add	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2b0f      	cmp	r3, #15
 8005bbc:	d908      	bls.n	8005bd0 <UART_SetConfig+0xa80>
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc4:	d204      	bcs.n	8005bd0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bcc:	60da      	str	r2, [r3, #12]
 8005bce:	e002      	b.n	8005bd6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005bf2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3738      	adds	r7, #56	; 0x38
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	58024400 	.word	0x58024400
 8005c04:	03d09000 	.word	0x03d09000
 8005c08:	003d0900 	.word	0x003d0900
 8005c0c:	08006e00 	.word	0x08006e00

08005c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01a      	beq.n	8005d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d0e:	d10a      	bne.n	8005d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d64:	f7fb fe98 	bl	8001a98 <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d10e      	bne.n	8005d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f82f 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e025      	b.n	8005de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d10e      	bne.n	8005dc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f819 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e00f      	b.n	8005de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfa:	e062      	b.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d05e      	beq.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e04:	f7fb fe48 	bl	8001a98 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d302      	bcc.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d11d      	bne.n	8005e56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e045      	b.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d02e      	beq.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e72:	d126      	bne.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e8c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e00f      	b.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	bf0c      	ite	eq
 8005ed2:	2301      	moveq	r3, #1
 8005ed4:	2300      	movne	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d08d      	beq.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_UARTEx_DisableFifoMode+0x16>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e027      	b.n	8005f50 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2224      	movs	r2, #36	; 0x24
 8005f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e02d      	b.n	8005fd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2224      	movs	r2, #36	; 0x24
 8005f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f84f 	bl	8006054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e02d      	b.n	800604c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f811 	bl	8006054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006060:	2b00      	cmp	r3, #0
 8006062:	d108      	bne.n	8006076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006074:	e031      	b.n	80060da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006076:	2310      	movs	r3, #16
 8006078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800607a:	2310      	movs	r3, #16
 800607c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	0e5b      	lsrs	r3, r3, #25
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	0f5b      	lsrs	r3, r3, #29
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	7b3a      	ldrb	r2, [r7, #12]
 80060a2:	4911      	ldr	r1, [pc, #68]	; (80060e8 <UARTEx_SetNbDataToProcess+0x94>)
 80060a4:	5c8a      	ldrb	r2, [r1, r2]
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060aa:	7b3a      	ldrb	r2, [r7, #12]
 80060ac:	490f      	ldr	r1, [pc, #60]	; (80060ec <UARTEx_SetNbDataToProcess+0x98>)
 80060ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	7b7a      	ldrb	r2, [r7, #13]
 80060c0:	4909      	ldr	r1, [pc, #36]	; (80060e8 <UARTEx_SetNbDataToProcess+0x94>)
 80060c2:	5c8a      	ldrb	r2, [r1, r2]
 80060c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060c8:	7b7a      	ldrb	r2, [r7, #13]
 80060ca:	4908      	ldr	r1, [pc, #32]	; (80060ec <UARTEx_SetNbDataToProcess+0x98>)
 80060cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	08006e18 	.word	0x08006e18
 80060ec:	08006e20 	.word	0x08006e20

080060f0 <__errno>:
 80060f0:	4b01      	ldr	r3, [pc, #4]	; (80060f8 <__errno+0x8>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	24000010 	.word	0x24000010

080060fc <__libc_init_array>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4d0d      	ldr	r5, [pc, #52]	; (8006134 <__libc_init_array+0x38>)
 8006100:	4c0d      	ldr	r4, [pc, #52]	; (8006138 <__libc_init_array+0x3c>)
 8006102:	1b64      	subs	r4, r4, r5
 8006104:	10a4      	asrs	r4, r4, #2
 8006106:	2600      	movs	r6, #0
 8006108:	42a6      	cmp	r6, r4
 800610a:	d109      	bne.n	8006120 <__libc_init_array+0x24>
 800610c:	4d0b      	ldr	r5, [pc, #44]	; (800613c <__libc_init_array+0x40>)
 800610e:	4c0c      	ldr	r4, [pc, #48]	; (8006140 <__libc_init_array+0x44>)
 8006110:	f000 fce6 	bl	8006ae0 <_init>
 8006114:	1b64      	subs	r4, r4, r5
 8006116:	10a4      	asrs	r4, r4, #2
 8006118:	2600      	movs	r6, #0
 800611a:	42a6      	cmp	r6, r4
 800611c:	d105      	bne.n	800612a <__libc_init_array+0x2e>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	f855 3b04 	ldr.w	r3, [r5], #4
 8006124:	4798      	blx	r3
 8006126:	3601      	adds	r6, #1
 8006128:	e7ee      	b.n	8006108 <__libc_init_array+0xc>
 800612a:	f855 3b04 	ldr.w	r3, [r5], #4
 800612e:	4798      	blx	r3
 8006130:	3601      	adds	r6, #1
 8006132:	e7f2      	b.n	800611a <__libc_init_array+0x1e>
 8006134:	08006e94 	.word	0x08006e94
 8006138:	08006e94 	.word	0x08006e94
 800613c:	08006e94 	.word	0x08006e94
 8006140:	08006e98 	.word	0x08006e98

08006144 <memset>:
 8006144:	4402      	add	r2, r0
 8006146:	4603      	mov	r3, r0
 8006148:	4293      	cmp	r3, r2
 800614a:	d100      	bne.n	800614e <memset+0xa>
 800614c:	4770      	bx	lr
 800614e:	f803 1b01 	strb.w	r1, [r3], #1
 8006152:	e7f9      	b.n	8006148 <memset+0x4>

08006154 <_puts_r>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	460e      	mov	r6, r1
 8006158:	4605      	mov	r5, r0
 800615a:	b118      	cbz	r0, 8006164 <_puts_r+0x10>
 800615c:	6983      	ldr	r3, [r0, #24]
 800615e:	b90b      	cbnz	r3, 8006164 <_puts_r+0x10>
 8006160:	f000 fa48 	bl	80065f4 <__sinit>
 8006164:	69ab      	ldr	r3, [r5, #24]
 8006166:	68ac      	ldr	r4, [r5, #8]
 8006168:	b913      	cbnz	r3, 8006170 <_puts_r+0x1c>
 800616a:	4628      	mov	r0, r5
 800616c:	f000 fa42 	bl	80065f4 <__sinit>
 8006170:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <_puts_r+0xd0>)
 8006172:	429c      	cmp	r4, r3
 8006174:	d120      	bne.n	80061b8 <_puts_r+0x64>
 8006176:	686c      	ldr	r4, [r5, #4]
 8006178:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800617a:	07db      	lsls	r3, r3, #31
 800617c:	d405      	bmi.n	800618a <_puts_r+0x36>
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	0598      	lsls	r0, r3, #22
 8006182:	d402      	bmi.n	800618a <_puts_r+0x36>
 8006184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006186:	f000 fad3 	bl	8006730 <__retarget_lock_acquire_recursive>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	0719      	lsls	r1, r3, #28
 800618e:	d51d      	bpl.n	80061cc <_puts_r+0x78>
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	b1db      	cbz	r3, 80061cc <_puts_r+0x78>
 8006194:	3e01      	subs	r6, #1
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800619c:	3b01      	subs	r3, #1
 800619e:	60a3      	str	r3, [r4, #8]
 80061a0:	bb39      	cbnz	r1, 80061f2 <_puts_r+0x9e>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da38      	bge.n	8006218 <_puts_r+0xc4>
 80061a6:	4622      	mov	r2, r4
 80061a8:	210a      	movs	r1, #10
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 f848 	bl	8006240 <__swbuf_r>
 80061b0:	3001      	adds	r0, #1
 80061b2:	d011      	beq.n	80061d8 <_puts_r+0x84>
 80061b4:	250a      	movs	r5, #10
 80061b6:	e011      	b.n	80061dc <_puts_r+0x88>
 80061b8:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <_puts_r+0xd4>)
 80061ba:	429c      	cmp	r4, r3
 80061bc:	d101      	bne.n	80061c2 <_puts_r+0x6e>
 80061be:	68ac      	ldr	r4, [r5, #8]
 80061c0:	e7da      	b.n	8006178 <_puts_r+0x24>
 80061c2:	4b1a      	ldr	r3, [pc, #104]	; (800622c <_puts_r+0xd8>)
 80061c4:	429c      	cmp	r4, r3
 80061c6:	bf08      	it	eq
 80061c8:	68ec      	ldreq	r4, [r5, #12]
 80061ca:	e7d5      	b.n	8006178 <_puts_r+0x24>
 80061cc:	4621      	mov	r1, r4
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 f888 	bl	80062e4 <__swsetup_r>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d0dd      	beq.n	8006194 <_puts_r+0x40>
 80061d8:	f04f 35ff 	mov.w	r5, #4294967295
 80061dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061de:	07da      	lsls	r2, r3, #31
 80061e0:	d405      	bmi.n	80061ee <_puts_r+0x9a>
 80061e2:	89a3      	ldrh	r3, [r4, #12]
 80061e4:	059b      	lsls	r3, r3, #22
 80061e6:	d402      	bmi.n	80061ee <_puts_r+0x9a>
 80061e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ea:	f000 faa2 	bl	8006732 <__retarget_lock_release_recursive>
 80061ee:	4628      	mov	r0, r5
 80061f0:	bd70      	pop	{r4, r5, r6, pc}
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	da04      	bge.n	8006200 <_puts_r+0xac>
 80061f6:	69a2      	ldr	r2, [r4, #24]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	dc06      	bgt.n	800620a <_puts_r+0xb6>
 80061fc:	290a      	cmp	r1, #10
 80061fe:	d004      	beq.n	800620a <_puts_r+0xb6>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	6022      	str	r2, [r4, #0]
 8006206:	7019      	strb	r1, [r3, #0]
 8006208:	e7c5      	b.n	8006196 <_puts_r+0x42>
 800620a:	4622      	mov	r2, r4
 800620c:	4628      	mov	r0, r5
 800620e:	f000 f817 	bl	8006240 <__swbuf_r>
 8006212:	3001      	adds	r0, #1
 8006214:	d1bf      	bne.n	8006196 <_puts_r+0x42>
 8006216:	e7df      	b.n	80061d8 <_puts_r+0x84>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	250a      	movs	r5, #10
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	6022      	str	r2, [r4, #0]
 8006220:	701d      	strb	r5, [r3, #0]
 8006222:	e7db      	b.n	80061dc <_puts_r+0x88>
 8006224:	08006e4c 	.word	0x08006e4c
 8006228:	08006e6c 	.word	0x08006e6c
 800622c:	08006e2c 	.word	0x08006e2c

08006230 <puts>:
 8006230:	4b02      	ldr	r3, [pc, #8]	; (800623c <puts+0xc>)
 8006232:	4601      	mov	r1, r0
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	f7ff bf8d 	b.w	8006154 <_puts_r>
 800623a:	bf00      	nop
 800623c:	24000010 	.word	0x24000010

08006240 <__swbuf_r>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	460e      	mov	r6, r1
 8006244:	4614      	mov	r4, r2
 8006246:	4605      	mov	r5, r0
 8006248:	b118      	cbz	r0, 8006252 <__swbuf_r+0x12>
 800624a:	6983      	ldr	r3, [r0, #24]
 800624c:	b90b      	cbnz	r3, 8006252 <__swbuf_r+0x12>
 800624e:	f000 f9d1 	bl	80065f4 <__sinit>
 8006252:	4b21      	ldr	r3, [pc, #132]	; (80062d8 <__swbuf_r+0x98>)
 8006254:	429c      	cmp	r4, r3
 8006256:	d12b      	bne.n	80062b0 <__swbuf_r+0x70>
 8006258:	686c      	ldr	r4, [r5, #4]
 800625a:	69a3      	ldr	r3, [r4, #24]
 800625c:	60a3      	str	r3, [r4, #8]
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	071a      	lsls	r2, r3, #28
 8006262:	d52f      	bpl.n	80062c4 <__swbuf_r+0x84>
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	b36b      	cbz	r3, 80062c4 <__swbuf_r+0x84>
 8006268:	6923      	ldr	r3, [r4, #16]
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	1ac0      	subs	r0, r0, r3
 800626e:	6963      	ldr	r3, [r4, #20]
 8006270:	b2f6      	uxtb	r6, r6
 8006272:	4283      	cmp	r3, r0
 8006274:	4637      	mov	r7, r6
 8006276:	dc04      	bgt.n	8006282 <__swbuf_r+0x42>
 8006278:	4621      	mov	r1, r4
 800627a:	4628      	mov	r0, r5
 800627c:	f000 f926 	bl	80064cc <_fflush_r>
 8006280:	bb30      	cbnz	r0, 80062d0 <__swbuf_r+0x90>
 8006282:	68a3      	ldr	r3, [r4, #8]
 8006284:	3b01      	subs	r3, #1
 8006286:	60a3      	str	r3, [r4, #8]
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	6022      	str	r2, [r4, #0]
 800628e:	701e      	strb	r6, [r3, #0]
 8006290:	6963      	ldr	r3, [r4, #20]
 8006292:	3001      	adds	r0, #1
 8006294:	4283      	cmp	r3, r0
 8006296:	d004      	beq.n	80062a2 <__swbuf_r+0x62>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	07db      	lsls	r3, r3, #31
 800629c:	d506      	bpl.n	80062ac <__swbuf_r+0x6c>
 800629e:	2e0a      	cmp	r6, #10
 80062a0:	d104      	bne.n	80062ac <__swbuf_r+0x6c>
 80062a2:	4621      	mov	r1, r4
 80062a4:	4628      	mov	r0, r5
 80062a6:	f000 f911 	bl	80064cc <_fflush_r>
 80062aa:	b988      	cbnz	r0, 80062d0 <__swbuf_r+0x90>
 80062ac:	4638      	mov	r0, r7
 80062ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062b0:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <__swbuf_r+0x9c>)
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d101      	bne.n	80062ba <__swbuf_r+0x7a>
 80062b6:	68ac      	ldr	r4, [r5, #8]
 80062b8:	e7cf      	b.n	800625a <__swbuf_r+0x1a>
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <__swbuf_r+0xa0>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	bf08      	it	eq
 80062c0:	68ec      	ldreq	r4, [r5, #12]
 80062c2:	e7ca      	b.n	800625a <__swbuf_r+0x1a>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f80c 	bl	80062e4 <__swsetup_r>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d0cb      	beq.n	8006268 <__swbuf_r+0x28>
 80062d0:	f04f 37ff 	mov.w	r7, #4294967295
 80062d4:	e7ea      	b.n	80062ac <__swbuf_r+0x6c>
 80062d6:	bf00      	nop
 80062d8:	08006e4c 	.word	0x08006e4c
 80062dc:	08006e6c 	.word	0x08006e6c
 80062e0:	08006e2c 	.word	0x08006e2c

080062e4 <__swsetup_r>:
 80062e4:	4b32      	ldr	r3, [pc, #200]	; (80063b0 <__swsetup_r+0xcc>)
 80062e6:	b570      	push	{r4, r5, r6, lr}
 80062e8:	681d      	ldr	r5, [r3, #0]
 80062ea:	4606      	mov	r6, r0
 80062ec:	460c      	mov	r4, r1
 80062ee:	b125      	cbz	r5, 80062fa <__swsetup_r+0x16>
 80062f0:	69ab      	ldr	r3, [r5, #24]
 80062f2:	b913      	cbnz	r3, 80062fa <__swsetup_r+0x16>
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 f97d 	bl	80065f4 <__sinit>
 80062fa:	4b2e      	ldr	r3, [pc, #184]	; (80063b4 <__swsetup_r+0xd0>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	d10f      	bne.n	8006320 <__swsetup_r+0x3c>
 8006300:	686c      	ldr	r4, [r5, #4]
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006308:	0719      	lsls	r1, r3, #28
 800630a:	d42c      	bmi.n	8006366 <__swsetup_r+0x82>
 800630c:	06dd      	lsls	r5, r3, #27
 800630e:	d411      	bmi.n	8006334 <__swsetup_r+0x50>
 8006310:	2309      	movs	r3, #9
 8006312:	6033      	str	r3, [r6, #0]
 8006314:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	f04f 30ff 	mov.w	r0, #4294967295
 800631e:	e03e      	b.n	800639e <__swsetup_r+0xba>
 8006320:	4b25      	ldr	r3, [pc, #148]	; (80063b8 <__swsetup_r+0xd4>)
 8006322:	429c      	cmp	r4, r3
 8006324:	d101      	bne.n	800632a <__swsetup_r+0x46>
 8006326:	68ac      	ldr	r4, [r5, #8]
 8006328:	e7eb      	b.n	8006302 <__swsetup_r+0x1e>
 800632a:	4b24      	ldr	r3, [pc, #144]	; (80063bc <__swsetup_r+0xd8>)
 800632c:	429c      	cmp	r4, r3
 800632e:	bf08      	it	eq
 8006330:	68ec      	ldreq	r4, [r5, #12]
 8006332:	e7e6      	b.n	8006302 <__swsetup_r+0x1e>
 8006334:	0758      	lsls	r0, r3, #29
 8006336:	d512      	bpl.n	800635e <__swsetup_r+0x7a>
 8006338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800633a:	b141      	cbz	r1, 800634e <__swsetup_r+0x6a>
 800633c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006340:	4299      	cmp	r1, r3
 8006342:	d002      	beq.n	800634a <__swsetup_r+0x66>
 8006344:	4630      	mov	r0, r6
 8006346:	f000 fa59 	bl	80067fc <_free_r>
 800634a:	2300      	movs	r3, #0
 800634c:	6363      	str	r3, [r4, #52]	; 0x34
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	2300      	movs	r3, #0
 8006358:	6063      	str	r3, [r4, #4]
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	f043 0308 	orr.w	r3, r3, #8
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	b94b      	cbnz	r3, 800637e <__swsetup_r+0x9a>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006374:	d003      	beq.n	800637e <__swsetup_r+0x9a>
 8006376:	4621      	mov	r1, r4
 8006378:	4630      	mov	r0, r6
 800637a:	f000 f9ff 	bl	800677c <__smakebuf_r>
 800637e:	89a0      	ldrh	r0, [r4, #12]
 8006380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006384:	f010 0301 	ands.w	r3, r0, #1
 8006388:	d00a      	beq.n	80063a0 <__swsetup_r+0xbc>
 800638a:	2300      	movs	r3, #0
 800638c:	60a3      	str	r3, [r4, #8]
 800638e:	6963      	ldr	r3, [r4, #20]
 8006390:	425b      	negs	r3, r3
 8006392:	61a3      	str	r3, [r4, #24]
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	b943      	cbnz	r3, 80063aa <__swsetup_r+0xc6>
 8006398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800639c:	d1ba      	bne.n	8006314 <__swsetup_r+0x30>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	0781      	lsls	r1, r0, #30
 80063a2:	bf58      	it	pl
 80063a4:	6963      	ldrpl	r3, [r4, #20]
 80063a6:	60a3      	str	r3, [r4, #8]
 80063a8:	e7f4      	b.n	8006394 <__swsetup_r+0xb0>
 80063aa:	2000      	movs	r0, #0
 80063ac:	e7f7      	b.n	800639e <__swsetup_r+0xba>
 80063ae:	bf00      	nop
 80063b0:	24000010 	.word	0x24000010
 80063b4:	08006e4c 	.word	0x08006e4c
 80063b8:	08006e6c 	.word	0x08006e6c
 80063bc:	08006e2c 	.word	0x08006e2c

080063c0 <__sflush_r>:
 80063c0:	898a      	ldrh	r2, [r1, #12]
 80063c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c6:	4605      	mov	r5, r0
 80063c8:	0710      	lsls	r0, r2, #28
 80063ca:	460c      	mov	r4, r1
 80063cc:	d458      	bmi.n	8006480 <__sflush_r+0xc0>
 80063ce:	684b      	ldr	r3, [r1, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	dc05      	bgt.n	80063e0 <__sflush_r+0x20>
 80063d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	dc02      	bgt.n	80063e0 <__sflush_r+0x20>
 80063da:	2000      	movs	r0, #0
 80063dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063e2:	2e00      	cmp	r6, #0
 80063e4:	d0f9      	beq.n	80063da <__sflush_r+0x1a>
 80063e6:	2300      	movs	r3, #0
 80063e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063ec:	682f      	ldr	r7, [r5, #0]
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	d032      	beq.n	8006458 <__sflush_r+0x98>
 80063f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	075a      	lsls	r2, r3, #29
 80063f8:	d505      	bpl.n	8006406 <__sflush_r+0x46>
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	1ac0      	subs	r0, r0, r3
 80063fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006400:	b10b      	cbz	r3, 8006406 <__sflush_r+0x46>
 8006402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006404:	1ac0      	subs	r0, r0, r3
 8006406:	2300      	movs	r3, #0
 8006408:	4602      	mov	r2, r0
 800640a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800640c:	6a21      	ldr	r1, [r4, #32]
 800640e:	4628      	mov	r0, r5
 8006410:	47b0      	blx	r6
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	d106      	bne.n	8006426 <__sflush_r+0x66>
 8006418:	6829      	ldr	r1, [r5, #0]
 800641a:	291d      	cmp	r1, #29
 800641c:	d82c      	bhi.n	8006478 <__sflush_r+0xb8>
 800641e:	4a2a      	ldr	r2, [pc, #168]	; (80064c8 <__sflush_r+0x108>)
 8006420:	40ca      	lsrs	r2, r1
 8006422:	07d6      	lsls	r6, r2, #31
 8006424:	d528      	bpl.n	8006478 <__sflush_r+0xb8>
 8006426:	2200      	movs	r2, #0
 8006428:	6062      	str	r2, [r4, #4]
 800642a:	04d9      	lsls	r1, r3, #19
 800642c:	6922      	ldr	r2, [r4, #16]
 800642e:	6022      	str	r2, [r4, #0]
 8006430:	d504      	bpl.n	800643c <__sflush_r+0x7c>
 8006432:	1c42      	adds	r2, r0, #1
 8006434:	d101      	bne.n	800643a <__sflush_r+0x7a>
 8006436:	682b      	ldr	r3, [r5, #0]
 8006438:	b903      	cbnz	r3, 800643c <__sflush_r+0x7c>
 800643a:	6560      	str	r0, [r4, #84]	; 0x54
 800643c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800643e:	602f      	str	r7, [r5, #0]
 8006440:	2900      	cmp	r1, #0
 8006442:	d0ca      	beq.n	80063da <__sflush_r+0x1a>
 8006444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006448:	4299      	cmp	r1, r3
 800644a:	d002      	beq.n	8006452 <__sflush_r+0x92>
 800644c:	4628      	mov	r0, r5
 800644e:	f000 f9d5 	bl	80067fc <_free_r>
 8006452:	2000      	movs	r0, #0
 8006454:	6360      	str	r0, [r4, #52]	; 0x34
 8006456:	e7c1      	b.n	80063dc <__sflush_r+0x1c>
 8006458:	6a21      	ldr	r1, [r4, #32]
 800645a:	2301      	movs	r3, #1
 800645c:	4628      	mov	r0, r5
 800645e:	47b0      	blx	r6
 8006460:	1c41      	adds	r1, r0, #1
 8006462:	d1c7      	bne.n	80063f4 <__sflush_r+0x34>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0c4      	beq.n	80063f4 <__sflush_r+0x34>
 800646a:	2b1d      	cmp	r3, #29
 800646c:	d001      	beq.n	8006472 <__sflush_r+0xb2>
 800646e:	2b16      	cmp	r3, #22
 8006470:	d101      	bne.n	8006476 <__sflush_r+0xb6>
 8006472:	602f      	str	r7, [r5, #0]
 8006474:	e7b1      	b.n	80063da <__sflush_r+0x1a>
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	e7ad      	b.n	80063dc <__sflush_r+0x1c>
 8006480:	690f      	ldr	r7, [r1, #16]
 8006482:	2f00      	cmp	r7, #0
 8006484:	d0a9      	beq.n	80063da <__sflush_r+0x1a>
 8006486:	0793      	lsls	r3, r2, #30
 8006488:	680e      	ldr	r6, [r1, #0]
 800648a:	bf08      	it	eq
 800648c:	694b      	ldreq	r3, [r1, #20]
 800648e:	600f      	str	r7, [r1, #0]
 8006490:	bf18      	it	ne
 8006492:	2300      	movne	r3, #0
 8006494:	eba6 0807 	sub.w	r8, r6, r7
 8006498:	608b      	str	r3, [r1, #8]
 800649a:	f1b8 0f00 	cmp.w	r8, #0
 800649e:	dd9c      	ble.n	80063da <__sflush_r+0x1a>
 80064a0:	6a21      	ldr	r1, [r4, #32]
 80064a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064a4:	4643      	mov	r3, r8
 80064a6:	463a      	mov	r2, r7
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b0      	blx	r6
 80064ac:	2800      	cmp	r0, #0
 80064ae:	dc06      	bgt.n	80064be <__sflush_r+0xfe>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295
 80064bc:	e78e      	b.n	80063dc <__sflush_r+0x1c>
 80064be:	4407      	add	r7, r0
 80064c0:	eba8 0800 	sub.w	r8, r8, r0
 80064c4:	e7e9      	b.n	800649a <__sflush_r+0xda>
 80064c6:	bf00      	nop
 80064c8:	20400001 	.word	0x20400001

080064cc <_fflush_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	690b      	ldr	r3, [r1, #16]
 80064d0:	4605      	mov	r5, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	b913      	cbnz	r3, 80064dc <_fflush_r+0x10>
 80064d6:	2500      	movs	r5, #0
 80064d8:	4628      	mov	r0, r5
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	b118      	cbz	r0, 80064e6 <_fflush_r+0x1a>
 80064de:	6983      	ldr	r3, [r0, #24]
 80064e0:	b90b      	cbnz	r3, 80064e6 <_fflush_r+0x1a>
 80064e2:	f000 f887 	bl	80065f4 <__sinit>
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <_fflush_r+0x6c>)
 80064e8:	429c      	cmp	r4, r3
 80064ea:	d11b      	bne.n	8006524 <_fflush_r+0x58>
 80064ec:	686c      	ldr	r4, [r5, #4]
 80064ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0ef      	beq.n	80064d6 <_fflush_r+0xa>
 80064f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064f8:	07d0      	lsls	r0, r2, #31
 80064fa:	d404      	bmi.n	8006506 <_fflush_r+0x3a>
 80064fc:	0599      	lsls	r1, r3, #22
 80064fe:	d402      	bmi.n	8006506 <_fflush_r+0x3a>
 8006500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006502:	f000 f915 	bl	8006730 <__retarget_lock_acquire_recursive>
 8006506:	4628      	mov	r0, r5
 8006508:	4621      	mov	r1, r4
 800650a:	f7ff ff59 	bl	80063c0 <__sflush_r>
 800650e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006510:	07da      	lsls	r2, r3, #31
 8006512:	4605      	mov	r5, r0
 8006514:	d4e0      	bmi.n	80064d8 <_fflush_r+0xc>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	059b      	lsls	r3, r3, #22
 800651a:	d4dd      	bmi.n	80064d8 <_fflush_r+0xc>
 800651c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800651e:	f000 f908 	bl	8006732 <__retarget_lock_release_recursive>
 8006522:	e7d9      	b.n	80064d8 <_fflush_r+0xc>
 8006524:	4b05      	ldr	r3, [pc, #20]	; (800653c <_fflush_r+0x70>)
 8006526:	429c      	cmp	r4, r3
 8006528:	d101      	bne.n	800652e <_fflush_r+0x62>
 800652a:	68ac      	ldr	r4, [r5, #8]
 800652c:	e7df      	b.n	80064ee <_fflush_r+0x22>
 800652e:	4b04      	ldr	r3, [pc, #16]	; (8006540 <_fflush_r+0x74>)
 8006530:	429c      	cmp	r4, r3
 8006532:	bf08      	it	eq
 8006534:	68ec      	ldreq	r4, [r5, #12]
 8006536:	e7da      	b.n	80064ee <_fflush_r+0x22>
 8006538:	08006e4c 	.word	0x08006e4c
 800653c:	08006e6c 	.word	0x08006e6c
 8006540:	08006e2c 	.word	0x08006e2c

08006544 <std>:
 8006544:	2300      	movs	r3, #0
 8006546:	b510      	push	{r4, lr}
 8006548:	4604      	mov	r4, r0
 800654a:	e9c0 3300 	strd	r3, r3, [r0]
 800654e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006552:	6083      	str	r3, [r0, #8]
 8006554:	8181      	strh	r1, [r0, #12]
 8006556:	6643      	str	r3, [r0, #100]	; 0x64
 8006558:	81c2      	strh	r2, [r0, #14]
 800655a:	6183      	str	r3, [r0, #24]
 800655c:	4619      	mov	r1, r3
 800655e:	2208      	movs	r2, #8
 8006560:	305c      	adds	r0, #92	; 0x5c
 8006562:	f7ff fdef 	bl	8006144 <memset>
 8006566:	4b05      	ldr	r3, [pc, #20]	; (800657c <std+0x38>)
 8006568:	6263      	str	r3, [r4, #36]	; 0x24
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <std+0x3c>)
 800656c:	62a3      	str	r3, [r4, #40]	; 0x28
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <std+0x40>)
 8006570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <std+0x44>)
 8006574:	6224      	str	r4, [r4, #32]
 8006576:	6323      	str	r3, [r4, #48]	; 0x30
 8006578:	bd10      	pop	{r4, pc}
 800657a:	bf00      	nop
 800657c:	08006971 	.word	0x08006971
 8006580:	08006993 	.word	0x08006993
 8006584:	080069cb 	.word	0x080069cb
 8006588:	080069ef 	.word	0x080069ef

0800658c <_cleanup_r>:
 800658c:	4901      	ldr	r1, [pc, #4]	; (8006594 <_cleanup_r+0x8>)
 800658e:	f000 b8af 	b.w	80066f0 <_fwalk_reent>
 8006592:	bf00      	nop
 8006594:	080064cd 	.word	0x080064cd

08006598 <__sfmoreglue>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	1e4a      	subs	r2, r1, #1
 800659c:	2568      	movs	r5, #104	; 0x68
 800659e:	4355      	muls	r5, r2
 80065a0:	460e      	mov	r6, r1
 80065a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065a6:	f000 f979 	bl	800689c <_malloc_r>
 80065aa:	4604      	mov	r4, r0
 80065ac:	b140      	cbz	r0, 80065c0 <__sfmoreglue+0x28>
 80065ae:	2100      	movs	r1, #0
 80065b0:	e9c0 1600 	strd	r1, r6, [r0]
 80065b4:	300c      	adds	r0, #12
 80065b6:	60a0      	str	r0, [r4, #8]
 80065b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065bc:	f7ff fdc2 	bl	8006144 <memset>
 80065c0:	4620      	mov	r0, r4
 80065c2:	bd70      	pop	{r4, r5, r6, pc}

080065c4 <__sfp_lock_acquire>:
 80065c4:	4801      	ldr	r0, [pc, #4]	; (80065cc <__sfp_lock_acquire+0x8>)
 80065c6:	f000 b8b3 	b.w	8006730 <__retarget_lock_acquire_recursive>
 80065ca:	bf00      	nop
 80065cc:	240001a4 	.word	0x240001a4

080065d0 <__sfp_lock_release>:
 80065d0:	4801      	ldr	r0, [pc, #4]	; (80065d8 <__sfp_lock_release+0x8>)
 80065d2:	f000 b8ae 	b.w	8006732 <__retarget_lock_release_recursive>
 80065d6:	bf00      	nop
 80065d8:	240001a4 	.word	0x240001a4

080065dc <__sinit_lock_acquire>:
 80065dc:	4801      	ldr	r0, [pc, #4]	; (80065e4 <__sinit_lock_acquire+0x8>)
 80065de:	f000 b8a7 	b.w	8006730 <__retarget_lock_acquire_recursive>
 80065e2:	bf00      	nop
 80065e4:	2400019f 	.word	0x2400019f

080065e8 <__sinit_lock_release>:
 80065e8:	4801      	ldr	r0, [pc, #4]	; (80065f0 <__sinit_lock_release+0x8>)
 80065ea:	f000 b8a2 	b.w	8006732 <__retarget_lock_release_recursive>
 80065ee:	bf00      	nop
 80065f0:	2400019f 	.word	0x2400019f

080065f4 <__sinit>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4604      	mov	r4, r0
 80065f8:	f7ff fff0 	bl	80065dc <__sinit_lock_acquire>
 80065fc:	69a3      	ldr	r3, [r4, #24]
 80065fe:	b11b      	cbz	r3, 8006608 <__sinit+0x14>
 8006600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006604:	f7ff bff0 	b.w	80065e8 <__sinit_lock_release>
 8006608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800660c:	6523      	str	r3, [r4, #80]	; 0x50
 800660e:	4b13      	ldr	r3, [pc, #76]	; (800665c <__sinit+0x68>)
 8006610:	4a13      	ldr	r2, [pc, #76]	; (8006660 <__sinit+0x6c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	62a2      	str	r2, [r4, #40]	; 0x28
 8006616:	42a3      	cmp	r3, r4
 8006618:	bf04      	itt	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	61a3      	streq	r3, [r4, #24]
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f820 	bl	8006664 <__sfp>
 8006624:	6060      	str	r0, [r4, #4]
 8006626:	4620      	mov	r0, r4
 8006628:	f000 f81c 	bl	8006664 <__sfp>
 800662c:	60a0      	str	r0, [r4, #8]
 800662e:	4620      	mov	r0, r4
 8006630:	f000 f818 	bl	8006664 <__sfp>
 8006634:	2200      	movs	r2, #0
 8006636:	60e0      	str	r0, [r4, #12]
 8006638:	2104      	movs	r1, #4
 800663a:	6860      	ldr	r0, [r4, #4]
 800663c:	f7ff ff82 	bl	8006544 <std>
 8006640:	68a0      	ldr	r0, [r4, #8]
 8006642:	2201      	movs	r2, #1
 8006644:	2109      	movs	r1, #9
 8006646:	f7ff ff7d 	bl	8006544 <std>
 800664a:	68e0      	ldr	r0, [r4, #12]
 800664c:	2202      	movs	r2, #2
 800664e:	2112      	movs	r1, #18
 8006650:	f7ff ff78 	bl	8006544 <std>
 8006654:	2301      	movs	r3, #1
 8006656:	61a3      	str	r3, [r4, #24]
 8006658:	e7d2      	b.n	8006600 <__sinit+0xc>
 800665a:	bf00      	nop
 800665c:	08006e28 	.word	0x08006e28
 8006660:	0800658d 	.word	0x0800658d

08006664 <__sfp>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	4607      	mov	r7, r0
 8006668:	f7ff ffac 	bl	80065c4 <__sfp_lock_acquire>
 800666c:	4b1e      	ldr	r3, [pc, #120]	; (80066e8 <__sfp+0x84>)
 800666e:	681e      	ldr	r6, [r3, #0]
 8006670:	69b3      	ldr	r3, [r6, #24]
 8006672:	b913      	cbnz	r3, 800667a <__sfp+0x16>
 8006674:	4630      	mov	r0, r6
 8006676:	f7ff ffbd 	bl	80065f4 <__sinit>
 800667a:	3648      	adds	r6, #72	; 0x48
 800667c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006680:	3b01      	subs	r3, #1
 8006682:	d503      	bpl.n	800668c <__sfp+0x28>
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	b30b      	cbz	r3, 80066cc <__sfp+0x68>
 8006688:	6836      	ldr	r6, [r6, #0]
 800668a:	e7f7      	b.n	800667c <__sfp+0x18>
 800668c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006690:	b9d5      	cbnz	r5, 80066c8 <__sfp+0x64>
 8006692:	4b16      	ldr	r3, [pc, #88]	; (80066ec <__sfp+0x88>)
 8006694:	60e3      	str	r3, [r4, #12]
 8006696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800669a:	6665      	str	r5, [r4, #100]	; 0x64
 800669c:	f000 f847 	bl	800672e <__retarget_lock_init_recursive>
 80066a0:	f7ff ff96 	bl	80065d0 <__sfp_lock_release>
 80066a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066ac:	6025      	str	r5, [r4, #0]
 80066ae:	61a5      	str	r5, [r4, #24]
 80066b0:	2208      	movs	r2, #8
 80066b2:	4629      	mov	r1, r5
 80066b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066b8:	f7ff fd44 	bl	8006144 <memset>
 80066bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066c4:	4620      	mov	r0, r4
 80066c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c8:	3468      	adds	r4, #104	; 0x68
 80066ca:	e7d9      	b.n	8006680 <__sfp+0x1c>
 80066cc:	2104      	movs	r1, #4
 80066ce:	4638      	mov	r0, r7
 80066d0:	f7ff ff62 	bl	8006598 <__sfmoreglue>
 80066d4:	4604      	mov	r4, r0
 80066d6:	6030      	str	r0, [r6, #0]
 80066d8:	2800      	cmp	r0, #0
 80066da:	d1d5      	bne.n	8006688 <__sfp+0x24>
 80066dc:	f7ff ff78 	bl	80065d0 <__sfp_lock_release>
 80066e0:	230c      	movs	r3, #12
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	e7ee      	b.n	80066c4 <__sfp+0x60>
 80066e6:	bf00      	nop
 80066e8:	08006e28 	.word	0x08006e28
 80066ec:	ffff0001 	.word	0xffff0001

080066f0 <_fwalk_reent>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	4606      	mov	r6, r0
 80066f6:	4688      	mov	r8, r1
 80066f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066fc:	2700      	movs	r7, #0
 80066fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006702:	f1b9 0901 	subs.w	r9, r9, #1
 8006706:	d505      	bpl.n	8006714 <_fwalk_reent+0x24>
 8006708:	6824      	ldr	r4, [r4, #0]
 800670a:	2c00      	cmp	r4, #0
 800670c:	d1f7      	bne.n	80066fe <_fwalk_reent+0xe>
 800670e:	4638      	mov	r0, r7
 8006710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006714:	89ab      	ldrh	r3, [r5, #12]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d907      	bls.n	800672a <_fwalk_reent+0x3a>
 800671a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800671e:	3301      	adds	r3, #1
 8006720:	d003      	beq.n	800672a <_fwalk_reent+0x3a>
 8006722:	4629      	mov	r1, r5
 8006724:	4630      	mov	r0, r6
 8006726:	47c0      	blx	r8
 8006728:	4307      	orrs	r7, r0
 800672a:	3568      	adds	r5, #104	; 0x68
 800672c:	e7e9      	b.n	8006702 <_fwalk_reent+0x12>

0800672e <__retarget_lock_init_recursive>:
 800672e:	4770      	bx	lr

08006730 <__retarget_lock_acquire_recursive>:
 8006730:	4770      	bx	lr

08006732 <__retarget_lock_release_recursive>:
 8006732:	4770      	bx	lr

08006734 <__swhatbuf_r>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	460e      	mov	r6, r1
 8006738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800673c:	2900      	cmp	r1, #0
 800673e:	b096      	sub	sp, #88	; 0x58
 8006740:	4614      	mov	r4, r2
 8006742:	461d      	mov	r5, r3
 8006744:	da07      	bge.n	8006756 <__swhatbuf_r+0x22>
 8006746:	2300      	movs	r3, #0
 8006748:	602b      	str	r3, [r5, #0]
 800674a:	89b3      	ldrh	r3, [r6, #12]
 800674c:	061a      	lsls	r2, r3, #24
 800674e:	d410      	bmi.n	8006772 <__swhatbuf_r+0x3e>
 8006750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006754:	e00e      	b.n	8006774 <__swhatbuf_r+0x40>
 8006756:	466a      	mov	r2, sp
 8006758:	f000 f970 	bl	8006a3c <_fstat_r>
 800675c:	2800      	cmp	r0, #0
 800675e:	dbf2      	blt.n	8006746 <__swhatbuf_r+0x12>
 8006760:	9a01      	ldr	r2, [sp, #4]
 8006762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800676a:	425a      	negs	r2, r3
 800676c:	415a      	adcs	r2, r3
 800676e:	602a      	str	r2, [r5, #0]
 8006770:	e7ee      	b.n	8006750 <__swhatbuf_r+0x1c>
 8006772:	2340      	movs	r3, #64	; 0x40
 8006774:	2000      	movs	r0, #0
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	b016      	add	sp, #88	; 0x58
 800677a:	bd70      	pop	{r4, r5, r6, pc}

0800677c <__smakebuf_r>:
 800677c:	898b      	ldrh	r3, [r1, #12]
 800677e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006780:	079d      	lsls	r5, r3, #30
 8006782:	4606      	mov	r6, r0
 8006784:	460c      	mov	r4, r1
 8006786:	d507      	bpl.n	8006798 <__smakebuf_r+0x1c>
 8006788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	2301      	movs	r3, #1
 8006792:	6163      	str	r3, [r4, #20]
 8006794:	b002      	add	sp, #8
 8006796:	bd70      	pop	{r4, r5, r6, pc}
 8006798:	ab01      	add	r3, sp, #4
 800679a:	466a      	mov	r2, sp
 800679c:	f7ff ffca 	bl	8006734 <__swhatbuf_r>
 80067a0:	9900      	ldr	r1, [sp, #0]
 80067a2:	4605      	mov	r5, r0
 80067a4:	4630      	mov	r0, r6
 80067a6:	f000 f879 	bl	800689c <_malloc_r>
 80067aa:	b948      	cbnz	r0, 80067c0 <__smakebuf_r+0x44>
 80067ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067b0:	059a      	lsls	r2, r3, #22
 80067b2:	d4ef      	bmi.n	8006794 <__smakebuf_r+0x18>
 80067b4:	f023 0303 	bic.w	r3, r3, #3
 80067b8:	f043 0302 	orr.w	r3, r3, #2
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	e7e3      	b.n	8006788 <__smakebuf_r+0xc>
 80067c0:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <__smakebuf_r+0x7c>)
 80067c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	6020      	str	r0, [r4, #0]
 80067c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067cc:	81a3      	strh	r3, [r4, #12]
 80067ce:	9b00      	ldr	r3, [sp, #0]
 80067d0:	6163      	str	r3, [r4, #20]
 80067d2:	9b01      	ldr	r3, [sp, #4]
 80067d4:	6120      	str	r0, [r4, #16]
 80067d6:	b15b      	cbz	r3, 80067f0 <__smakebuf_r+0x74>
 80067d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067dc:	4630      	mov	r0, r6
 80067de:	f000 f93f 	bl	8006a60 <_isatty_r>
 80067e2:	b128      	cbz	r0, 80067f0 <__smakebuf_r+0x74>
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	f043 0301 	orr.w	r3, r3, #1
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	89a0      	ldrh	r0, [r4, #12]
 80067f2:	4305      	orrs	r5, r0
 80067f4:	81a5      	strh	r5, [r4, #12]
 80067f6:	e7cd      	b.n	8006794 <__smakebuf_r+0x18>
 80067f8:	0800658d 	.word	0x0800658d

080067fc <_free_r>:
 80067fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067fe:	2900      	cmp	r1, #0
 8006800:	d048      	beq.n	8006894 <_free_r+0x98>
 8006802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006806:	9001      	str	r0, [sp, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	f1a1 0404 	sub.w	r4, r1, #4
 800680e:	bfb8      	it	lt
 8006810:	18e4      	addlt	r4, r4, r3
 8006812:	f000 f947 	bl	8006aa4 <__malloc_lock>
 8006816:	4a20      	ldr	r2, [pc, #128]	; (8006898 <_free_r+0x9c>)
 8006818:	9801      	ldr	r0, [sp, #4]
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	4615      	mov	r5, r2
 800681e:	b933      	cbnz	r3, 800682e <_free_r+0x32>
 8006820:	6063      	str	r3, [r4, #4]
 8006822:	6014      	str	r4, [r2, #0]
 8006824:	b003      	add	sp, #12
 8006826:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800682a:	f000 b941 	b.w	8006ab0 <__malloc_unlock>
 800682e:	42a3      	cmp	r3, r4
 8006830:	d90b      	bls.n	800684a <_free_r+0x4e>
 8006832:	6821      	ldr	r1, [r4, #0]
 8006834:	1862      	adds	r2, r4, r1
 8006836:	4293      	cmp	r3, r2
 8006838:	bf04      	itt	eq
 800683a:	681a      	ldreq	r2, [r3, #0]
 800683c:	685b      	ldreq	r3, [r3, #4]
 800683e:	6063      	str	r3, [r4, #4]
 8006840:	bf04      	itt	eq
 8006842:	1852      	addeq	r2, r2, r1
 8006844:	6022      	streq	r2, [r4, #0]
 8006846:	602c      	str	r4, [r5, #0]
 8006848:	e7ec      	b.n	8006824 <_free_r+0x28>
 800684a:	461a      	mov	r2, r3
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	b10b      	cbz	r3, 8006854 <_free_r+0x58>
 8006850:	42a3      	cmp	r3, r4
 8006852:	d9fa      	bls.n	800684a <_free_r+0x4e>
 8006854:	6811      	ldr	r1, [r2, #0]
 8006856:	1855      	adds	r5, r2, r1
 8006858:	42a5      	cmp	r5, r4
 800685a:	d10b      	bne.n	8006874 <_free_r+0x78>
 800685c:	6824      	ldr	r4, [r4, #0]
 800685e:	4421      	add	r1, r4
 8006860:	1854      	adds	r4, r2, r1
 8006862:	42a3      	cmp	r3, r4
 8006864:	6011      	str	r1, [r2, #0]
 8006866:	d1dd      	bne.n	8006824 <_free_r+0x28>
 8006868:	681c      	ldr	r4, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	6053      	str	r3, [r2, #4]
 800686e:	4421      	add	r1, r4
 8006870:	6011      	str	r1, [r2, #0]
 8006872:	e7d7      	b.n	8006824 <_free_r+0x28>
 8006874:	d902      	bls.n	800687c <_free_r+0x80>
 8006876:	230c      	movs	r3, #12
 8006878:	6003      	str	r3, [r0, #0]
 800687a:	e7d3      	b.n	8006824 <_free_r+0x28>
 800687c:	6825      	ldr	r5, [r4, #0]
 800687e:	1961      	adds	r1, r4, r5
 8006880:	428b      	cmp	r3, r1
 8006882:	bf04      	itt	eq
 8006884:	6819      	ldreq	r1, [r3, #0]
 8006886:	685b      	ldreq	r3, [r3, #4]
 8006888:	6063      	str	r3, [r4, #4]
 800688a:	bf04      	itt	eq
 800688c:	1949      	addeq	r1, r1, r5
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	6054      	str	r4, [r2, #4]
 8006892:	e7c7      	b.n	8006824 <_free_r+0x28>
 8006894:	b003      	add	sp, #12
 8006896:	bd30      	pop	{r4, r5, pc}
 8006898:	24000098 	.word	0x24000098

0800689c <_malloc_r>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	1ccd      	adds	r5, r1, #3
 80068a0:	f025 0503 	bic.w	r5, r5, #3
 80068a4:	3508      	adds	r5, #8
 80068a6:	2d0c      	cmp	r5, #12
 80068a8:	bf38      	it	cc
 80068aa:	250c      	movcc	r5, #12
 80068ac:	2d00      	cmp	r5, #0
 80068ae:	4606      	mov	r6, r0
 80068b0:	db01      	blt.n	80068b6 <_malloc_r+0x1a>
 80068b2:	42a9      	cmp	r1, r5
 80068b4:	d903      	bls.n	80068be <_malloc_r+0x22>
 80068b6:	230c      	movs	r3, #12
 80068b8:	6033      	str	r3, [r6, #0]
 80068ba:	2000      	movs	r0, #0
 80068bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068be:	f000 f8f1 	bl	8006aa4 <__malloc_lock>
 80068c2:	4921      	ldr	r1, [pc, #132]	; (8006948 <_malloc_r+0xac>)
 80068c4:	680a      	ldr	r2, [r1, #0]
 80068c6:	4614      	mov	r4, r2
 80068c8:	b99c      	cbnz	r4, 80068f2 <_malloc_r+0x56>
 80068ca:	4f20      	ldr	r7, [pc, #128]	; (800694c <_malloc_r+0xb0>)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	b923      	cbnz	r3, 80068da <_malloc_r+0x3e>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4630      	mov	r0, r6
 80068d4:	f000 f83c 	bl	8006950 <_sbrk_r>
 80068d8:	6038      	str	r0, [r7, #0]
 80068da:	4629      	mov	r1, r5
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f837 	bl	8006950 <_sbrk_r>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	d123      	bne.n	800692e <_malloc_r+0x92>
 80068e6:	230c      	movs	r3, #12
 80068e8:	6033      	str	r3, [r6, #0]
 80068ea:	4630      	mov	r0, r6
 80068ec:	f000 f8e0 	bl	8006ab0 <__malloc_unlock>
 80068f0:	e7e3      	b.n	80068ba <_malloc_r+0x1e>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	1b5b      	subs	r3, r3, r5
 80068f6:	d417      	bmi.n	8006928 <_malloc_r+0x8c>
 80068f8:	2b0b      	cmp	r3, #11
 80068fa:	d903      	bls.n	8006904 <_malloc_r+0x68>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	441c      	add	r4, r3
 8006900:	6025      	str	r5, [r4, #0]
 8006902:	e004      	b.n	800690e <_malloc_r+0x72>
 8006904:	6863      	ldr	r3, [r4, #4]
 8006906:	42a2      	cmp	r2, r4
 8006908:	bf0c      	ite	eq
 800690a:	600b      	streq	r3, [r1, #0]
 800690c:	6053      	strne	r3, [r2, #4]
 800690e:	4630      	mov	r0, r6
 8006910:	f000 f8ce 	bl	8006ab0 <__malloc_unlock>
 8006914:	f104 000b 	add.w	r0, r4, #11
 8006918:	1d23      	adds	r3, r4, #4
 800691a:	f020 0007 	bic.w	r0, r0, #7
 800691e:	1ac2      	subs	r2, r0, r3
 8006920:	d0cc      	beq.n	80068bc <_malloc_r+0x20>
 8006922:	1a1b      	subs	r3, r3, r0
 8006924:	50a3      	str	r3, [r4, r2]
 8006926:	e7c9      	b.n	80068bc <_malloc_r+0x20>
 8006928:	4622      	mov	r2, r4
 800692a:	6864      	ldr	r4, [r4, #4]
 800692c:	e7cc      	b.n	80068c8 <_malloc_r+0x2c>
 800692e:	1cc4      	adds	r4, r0, #3
 8006930:	f024 0403 	bic.w	r4, r4, #3
 8006934:	42a0      	cmp	r0, r4
 8006936:	d0e3      	beq.n	8006900 <_malloc_r+0x64>
 8006938:	1a21      	subs	r1, r4, r0
 800693a:	4630      	mov	r0, r6
 800693c:	f000 f808 	bl	8006950 <_sbrk_r>
 8006940:	3001      	adds	r0, #1
 8006942:	d1dd      	bne.n	8006900 <_malloc_r+0x64>
 8006944:	e7cf      	b.n	80068e6 <_malloc_r+0x4a>
 8006946:	bf00      	nop
 8006948:	24000098 	.word	0x24000098
 800694c:	2400009c 	.word	0x2400009c

08006950 <_sbrk_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d06      	ldr	r5, [pc, #24]	; (800696c <_sbrk_r+0x1c>)
 8006954:	2300      	movs	r3, #0
 8006956:	4604      	mov	r4, r0
 8006958:	4608      	mov	r0, r1
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	f7fa ffb6 	bl	80018cc <_sbrk>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_sbrk_r+0x1a>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_sbrk_r+0x1a>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	240001a8 	.word	0x240001a8

08006970 <__sread>:
 8006970:	b510      	push	{r4, lr}
 8006972:	460c      	mov	r4, r1
 8006974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006978:	f000 f8a0 	bl	8006abc <_read_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	bfab      	itete	ge
 8006980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006982:	89a3      	ldrhlt	r3, [r4, #12]
 8006984:	181b      	addge	r3, r3, r0
 8006986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800698a:	bfac      	ite	ge
 800698c:	6563      	strge	r3, [r4, #84]	; 0x54
 800698e:	81a3      	strhlt	r3, [r4, #12]
 8006990:	bd10      	pop	{r4, pc}

08006992 <__swrite>:
 8006992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	461f      	mov	r7, r3
 8006998:	898b      	ldrh	r3, [r1, #12]
 800699a:	05db      	lsls	r3, r3, #23
 800699c:	4605      	mov	r5, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	4616      	mov	r6, r2
 80069a2:	d505      	bpl.n	80069b0 <__swrite+0x1e>
 80069a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a8:	2302      	movs	r3, #2
 80069aa:	2200      	movs	r2, #0
 80069ac:	f000 f868 	bl	8006a80 <_lseek_r>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069ba:	81a3      	strh	r3, [r4, #12]
 80069bc:	4632      	mov	r2, r6
 80069be:	463b      	mov	r3, r7
 80069c0:	4628      	mov	r0, r5
 80069c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069c6:	f000 b817 	b.w	80069f8 <_write_r>

080069ca <__sseek>:
 80069ca:	b510      	push	{r4, lr}
 80069cc:	460c      	mov	r4, r1
 80069ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d2:	f000 f855 	bl	8006a80 <_lseek_r>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	bf15      	itete	ne
 80069dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069e6:	81a3      	strheq	r3, [r4, #12]
 80069e8:	bf18      	it	ne
 80069ea:	81a3      	strhne	r3, [r4, #12]
 80069ec:	bd10      	pop	{r4, pc}

080069ee <__sclose>:
 80069ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f2:	f000 b813 	b.w	8006a1c <_close_r>
	...

080069f8 <_write_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4d07      	ldr	r5, [pc, #28]	; (8006a18 <_write_r+0x20>)
 80069fc:	4604      	mov	r4, r0
 80069fe:	4608      	mov	r0, r1
 8006a00:	4611      	mov	r1, r2
 8006a02:	2200      	movs	r2, #0
 8006a04:	602a      	str	r2, [r5, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f7fa ff10 	bl	800182c <_write>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_write_r+0x1e>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_write_r+0x1e>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	240001a8 	.word	0x240001a8

08006a1c <_close_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d06      	ldr	r5, [pc, #24]	; (8006a38 <_close_r+0x1c>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fa ff1c 	bl	8001864 <_close>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_close_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_close_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	240001a8 	.word	0x240001a8

08006a3c <_fstat_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4d07      	ldr	r5, [pc, #28]	; (8006a5c <_fstat_r+0x20>)
 8006a40:	2300      	movs	r3, #0
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	f7fa ff17 	bl	800187c <_fstat>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d102      	bne.n	8006a58 <_fstat_r+0x1c>
 8006a52:	682b      	ldr	r3, [r5, #0]
 8006a54:	b103      	cbz	r3, 8006a58 <_fstat_r+0x1c>
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	bd38      	pop	{r3, r4, r5, pc}
 8006a5a:	bf00      	nop
 8006a5c:	240001a8 	.word	0x240001a8

08006a60 <_isatty_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d06      	ldr	r5, [pc, #24]	; (8006a7c <_isatty_r+0x1c>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fa ff16 	bl	800189c <_isatty>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_isatty_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_isatty_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	240001a8 	.word	0x240001a8

08006a80 <_lseek_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d07      	ldr	r5, [pc, #28]	; (8006aa0 <_lseek_r+0x20>)
 8006a84:	4604      	mov	r4, r0
 8006a86:	4608      	mov	r0, r1
 8006a88:	4611      	mov	r1, r2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	602a      	str	r2, [r5, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f7fa ff0f 	bl	80018b2 <_lseek>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d102      	bne.n	8006a9e <_lseek_r+0x1e>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	b103      	cbz	r3, 8006a9e <_lseek_r+0x1e>
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	240001a8 	.word	0x240001a8

08006aa4 <__malloc_lock>:
 8006aa4:	4801      	ldr	r0, [pc, #4]	; (8006aac <__malloc_lock+0x8>)
 8006aa6:	f7ff be43 	b.w	8006730 <__retarget_lock_acquire_recursive>
 8006aaa:	bf00      	nop
 8006aac:	240001a0 	.word	0x240001a0

08006ab0 <__malloc_unlock>:
 8006ab0:	4801      	ldr	r0, [pc, #4]	; (8006ab8 <__malloc_unlock+0x8>)
 8006ab2:	f7ff be3e 	b.w	8006732 <__retarget_lock_release_recursive>
 8006ab6:	bf00      	nop
 8006ab8:	240001a0 	.word	0x240001a0

08006abc <_read_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d07      	ldr	r5, [pc, #28]	; (8006adc <_read_r+0x20>)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7fa fe91 	bl	80017f2 <_read>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_read_r+0x1e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_read_r+0x1e>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	240001a8 	.word	0x240001a8

08006ae0 <_init>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	bf00      	nop
 8006ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	469e      	mov	lr, r3
 8006aea:	4770      	bx	lr

08006aec <_fini>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr
